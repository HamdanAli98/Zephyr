
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00020200 <_vector_table>:
   20200:	70 b0 01 20 15 5b 02 00 15 a0 03 00 75 5b 02 00     p.. .[......u[..
   20210:	75 5b 02 00 75 5b 02 00 75 5b 02 00 75 5b 02 00     u[..u[..u[..u[..
	...
   2022c:	b1 58 02 00 75 5b 02 00 00 00 00 00 59 58 02 00     .X..u[......YX..
   2023c:	65 55 02 00                                         eU..

00020240 <_irq_vector_table>:
   20240:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20250:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20260:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20270:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20280:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20290:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   202a0:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   202b0:	91 90 02 00 dd b0 03 00 d5 5a 02 00 d5 5a 02 00     .........Z...Z..
   202c0:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   202d0:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   202e0:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   202f0:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20300:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20310:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20320:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20330:	d5 5a 02 00 d5 5a 02 00 d5 5a 02 00 d5 5a 02 00     .Z...Z...Z...Z..
   20340:	d5 5a 02 00                                         .Z..

00020344 <_vector_end>:
	...

00020400 <m_firmware_info>:
   20400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
   20410:	38 39 02 00 01 00 00 00 00 02 02 00 00 02 02 00     89..............
   20420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00020440 <__aeabi_drsub>:
   20440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   20444:	e002      	b.n	2044c <__adddf3>
   20446:	bf00      	nop

00020448 <__aeabi_dsub>:
   20448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0002044c <__adddf3>:
   2044c:	b530      	push	{r4, r5, lr}
   2044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   20452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   20456:	ea94 0f05 	teq	r4, r5
   2045a:	bf08      	it	eq
   2045c:	ea90 0f02 	teqeq	r0, r2
   20460:	bf1f      	itttt	ne
   20462:	ea54 0c00 	orrsne.w	ip, r4, r0
   20466:	ea55 0c02 	orrsne.w	ip, r5, r2
   2046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   2046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   20472:	f000 80e2 	beq.w	2063a <__adddf3+0x1ee>
   20476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   2047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   2047e:	bfb8      	it	lt
   20480:	426d      	neglt	r5, r5
   20482:	dd0c      	ble.n	2049e <__adddf3+0x52>
   20484:	442c      	add	r4, r5
   20486:	ea80 0202 	eor.w	r2, r0, r2
   2048a:	ea81 0303 	eor.w	r3, r1, r3
   2048e:	ea82 0000 	eor.w	r0, r2, r0
   20492:	ea83 0101 	eor.w	r1, r3, r1
   20496:	ea80 0202 	eor.w	r2, r0, r2
   2049a:	ea81 0303 	eor.w	r3, r1, r3
   2049e:	2d36      	cmp	r5, #54	; 0x36
   204a0:	bf88      	it	hi
   204a2:	bd30      	pophi	{r4, r5, pc}
   204a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   204a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   204ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   204b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   204b4:	d002      	beq.n	204bc <__adddf3+0x70>
   204b6:	4240      	negs	r0, r0
   204b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   204bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   204c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   204c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   204c8:	d002      	beq.n	204d0 <__adddf3+0x84>
   204ca:	4252      	negs	r2, r2
   204cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   204d0:	ea94 0f05 	teq	r4, r5
   204d4:	f000 80a7 	beq.w	20626 <__adddf3+0x1da>
   204d8:	f1a4 0401 	sub.w	r4, r4, #1
   204dc:	f1d5 0e20 	rsbs	lr, r5, #32
   204e0:	db0d      	blt.n	204fe <__adddf3+0xb2>
   204e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   204e6:	fa22 f205 	lsr.w	r2, r2, r5
   204ea:	1880      	adds	r0, r0, r2
   204ec:	f141 0100 	adc.w	r1, r1, #0
   204f0:	fa03 f20e 	lsl.w	r2, r3, lr
   204f4:	1880      	adds	r0, r0, r2
   204f6:	fa43 f305 	asr.w	r3, r3, r5
   204fa:	4159      	adcs	r1, r3
   204fc:	e00e      	b.n	2051c <__adddf3+0xd0>
   204fe:	f1a5 0520 	sub.w	r5, r5, #32
   20502:	f10e 0e20 	add.w	lr, lr, #32
   20506:	2a01      	cmp	r2, #1
   20508:	fa03 fc0e 	lsl.w	ip, r3, lr
   2050c:	bf28      	it	cs
   2050e:	f04c 0c02 	orrcs.w	ip, ip, #2
   20512:	fa43 f305 	asr.w	r3, r3, r5
   20516:	18c0      	adds	r0, r0, r3
   20518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   2051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   20520:	d507      	bpl.n	20532 <__adddf3+0xe6>
   20522:	f04f 0e00 	mov.w	lr, #0
   20526:	f1dc 0c00 	rsbs	ip, ip, #0
   2052a:	eb7e 0000 	sbcs.w	r0, lr, r0
   2052e:	eb6e 0101 	sbc.w	r1, lr, r1
   20532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   20536:	d31b      	bcc.n	20570 <__adddf3+0x124>
   20538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   2053c:	d30c      	bcc.n	20558 <__adddf3+0x10c>
   2053e:	0849      	lsrs	r1, r1, #1
   20540:	ea5f 0030 	movs.w	r0, r0, rrx
   20544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   20548:	f104 0401 	add.w	r4, r4, #1
   2054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   20550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   20554:	f080 809a 	bcs.w	2068c <__adddf3+0x240>
   20558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   2055c:	bf08      	it	eq
   2055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   20562:	f150 0000 	adcs.w	r0, r0, #0
   20566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   2056a:	ea41 0105 	orr.w	r1, r1, r5
   2056e:	bd30      	pop	{r4, r5, pc}
   20570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   20574:	4140      	adcs	r0, r0
   20576:	eb41 0101 	adc.w	r1, r1, r1
   2057a:	3c01      	subs	r4, #1
   2057c:	bf28      	it	cs
   2057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   20582:	d2e9      	bcs.n	20558 <__adddf3+0x10c>
   20584:	f091 0f00 	teq	r1, #0
   20588:	bf04      	itt	eq
   2058a:	4601      	moveq	r1, r0
   2058c:	2000      	moveq	r0, #0
   2058e:	fab1 f381 	clz	r3, r1
   20592:	bf08      	it	eq
   20594:	3320      	addeq	r3, #32
   20596:	f1a3 030b 	sub.w	r3, r3, #11
   2059a:	f1b3 0220 	subs.w	r2, r3, #32
   2059e:	da0c      	bge.n	205ba <__adddf3+0x16e>
   205a0:	320c      	adds	r2, #12
   205a2:	dd08      	ble.n	205b6 <__adddf3+0x16a>
   205a4:	f102 0c14 	add.w	ip, r2, #20
   205a8:	f1c2 020c 	rsb	r2, r2, #12
   205ac:	fa01 f00c 	lsl.w	r0, r1, ip
   205b0:	fa21 f102 	lsr.w	r1, r1, r2
   205b4:	e00c      	b.n	205d0 <__adddf3+0x184>
   205b6:	f102 0214 	add.w	r2, r2, #20
   205ba:	bfd8      	it	le
   205bc:	f1c2 0c20 	rsble	ip, r2, #32
   205c0:	fa01 f102 	lsl.w	r1, r1, r2
   205c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   205c8:	bfdc      	itt	le
   205ca:	ea41 010c 	orrle.w	r1, r1, ip
   205ce:	4090      	lslle	r0, r2
   205d0:	1ae4      	subs	r4, r4, r3
   205d2:	bfa2      	ittt	ge
   205d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   205d8:	4329      	orrge	r1, r5
   205da:	bd30      	popge	{r4, r5, pc}
   205dc:	ea6f 0404 	mvn.w	r4, r4
   205e0:	3c1f      	subs	r4, #31
   205e2:	da1c      	bge.n	2061e <__adddf3+0x1d2>
   205e4:	340c      	adds	r4, #12
   205e6:	dc0e      	bgt.n	20606 <__adddf3+0x1ba>
   205e8:	f104 0414 	add.w	r4, r4, #20
   205ec:	f1c4 0220 	rsb	r2, r4, #32
   205f0:	fa20 f004 	lsr.w	r0, r0, r4
   205f4:	fa01 f302 	lsl.w	r3, r1, r2
   205f8:	ea40 0003 	orr.w	r0, r0, r3
   205fc:	fa21 f304 	lsr.w	r3, r1, r4
   20600:	ea45 0103 	orr.w	r1, r5, r3
   20604:	bd30      	pop	{r4, r5, pc}
   20606:	f1c4 040c 	rsb	r4, r4, #12
   2060a:	f1c4 0220 	rsb	r2, r4, #32
   2060e:	fa20 f002 	lsr.w	r0, r0, r2
   20612:	fa01 f304 	lsl.w	r3, r1, r4
   20616:	ea40 0003 	orr.w	r0, r0, r3
   2061a:	4629      	mov	r1, r5
   2061c:	bd30      	pop	{r4, r5, pc}
   2061e:	fa21 f004 	lsr.w	r0, r1, r4
   20622:	4629      	mov	r1, r5
   20624:	bd30      	pop	{r4, r5, pc}
   20626:	f094 0f00 	teq	r4, #0
   2062a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   2062e:	bf06      	itte	eq
   20630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   20634:	3401      	addeq	r4, #1
   20636:	3d01      	subne	r5, #1
   20638:	e74e      	b.n	204d8 <__adddf3+0x8c>
   2063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   2063e:	bf18      	it	ne
   20640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   20644:	d029      	beq.n	2069a <__adddf3+0x24e>
   20646:	ea94 0f05 	teq	r4, r5
   2064a:	bf08      	it	eq
   2064c:	ea90 0f02 	teqeq	r0, r2
   20650:	d005      	beq.n	2065e <__adddf3+0x212>
   20652:	ea54 0c00 	orrs.w	ip, r4, r0
   20656:	bf04      	itt	eq
   20658:	4619      	moveq	r1, r3
   2065a:	4610      	moveq	r0, r2
   2065c:	bd30      	pop	{r4, r5, pc}
   2065e:	ea91 0f03 	teq	r1, r3
   20662:	bf1e      	ittt	ne
   20664:	2100      	movne	r1, #0
   20666:	2000      	movne	r0, #0
   20668:	bd30      	popne	{r4, r5, pc}
   2066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   2066e:	d105      	bne.n	2067c <__adddf3+0x230>
   20670:	0040      	lsls	r0, r0, #1
   20672:	4149      	adcs	r1, r1
   20674:	bf28      	it	cs
   20676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   2067a:	bd30      	pop	{r4, r5, pc}
   2067c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   20680:	bf3c      	itt	cc
   20682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   20686:	bd30      	popcc	{r4, r5, pc}
   20688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   2068c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   20690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   20694:	f04f 0000 	mov.w	r0, #0
   20698:	bd30      	pop	{r4, r5, pc}
   2069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   2069e:	bf1a      	itte	ne
   206a0:	4619      	movne	r1, r3
   206a2:	4610      	movne	r0, r2
   206a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   206a8:	bf1c      	itt	ne
   206aa:	460b      	movne	r3, r1
   206ac:	4602      	movne	r2, r0
   206ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   206b2:	bf06      	itte	eq
   206b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   206b8:	ea91 0f03 	teqeq	r1, r3
   206bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   206c0:	bd30      	pop	{r4, r5, pc}
   206c2:	bf00      	nop

000206c4 <__aeabi_ui2d>:
   206c4:	f090 0f00 	teq	r0, #0
   206c8:	bf04      	itt	eq
   206ca:	2100      	moveq	r1, #0
   206cc:	4770      	bxeq	lr
   206ce:	b530      	push	{r4, r5, lr}
   206d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   206d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   206d8:	f04f 0500 	mov.w	r5, #0
   206dc:	f04f 0100 	mov.w	r1, #0
   206e0:	e750      	b.n	20584 <__adddf3+0x138>
   206e2:	bf00      	nop

000206e4 <__aeabi_i2d>:
   206e4:	f090 0f00 	teq	r0, #0
   206e8:	bf04      	itt	eq
   206ea:	2100      	moveq	r1, #0
   206ec:	4770      	bxeq	lr
   206ee:	b530      	push	{r4, r5, lr}
   206f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   206f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   206f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   206fc:	bf48      	it	mi
   206fe:	4240      	negmi	r0, r0
   20700:	f04f 0100 	mov.w	r1, #0
   20704:	e73e      	b.n	20584 <__adddf3+0x138>
   20706:	bf00      	nop

00020708 <__aeabi_f2d>:
   20708:	0042      	lsls	r2, r0, #1
   2070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   2070e:	ea4f 0131 	mov.w	r1, r1, rrx
   20712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   20716:	bf1f      	itttt	ne
   20718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   2071c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   20720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   20724:	4770      	bxne	lr
   20726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   2072a:	bf08      	it	eq
   2072c:	4770      	bxeq	lr
   2072e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   20732:	bf04      	itt	eq
   20734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   20738:	4770      	bxeq	lr
   2073a:	b530      	push	{r4, r5, lr}
   2073c:	f44f 7460 	mov.w	r4, #896	; 0x380
   20740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   20744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   20748:	e71c      	b.n	20584 <__adddf3+0x138>
   2074a:	bf00      	nop

0002074c <__aeabi_ul2d>:
   2074c:	ea50 0201 	orrs.w	r2, r0, r1
   20750:	bf08      	it	eq
   20752:	4770      	bxeq	lr
   20754:	b530      	push	{r4, r5, lr}
   20756:	f04f 0500 	mov.w	r5, #0
   2075a:	e00a      	b.n	20772 <__aeabi_l2d+0x16>

0002075c <__aeabi_l2d>:
   2075c:	ea50 0201 	orrs.w	r2, r0, r1
   20760:	bf08      	it	eq
   20762:	4770      	bxeq	lr
   20764:	b530      	push	{r4, r5, lr}
   20766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   2076a:	d502      	bpl.n	20772 <__aeabi_l2d+0x16>
   2076c:	4240      	negs	r0, r0
   2076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   20776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   2077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   2077e:	f43f aed8 	beq.w	20532 <__adddf3+0xe6>
   20782:	f04f 0203 	mov.w	r2, #3
   20786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   2078a:	bf18      	it	ne
   2078c:	3203      	addne	r2, #3
   2078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   20792:	bf18      	it	ne
   20794:	3203      	addne	r2, #3
   20796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   2079a:	f1c2 0320 	rsb	r3, r2, #32
   2079e:	fa00 fc03 	lsl.w	ip, r0, r3
   207a2:	fa20 f002 	lsr.w	r0, r0, r2
   207a6:	fa01 fe03 	lsl.w	lr, r1, r3
   207aa:	ea40 000e 	orr.w	r0, r0, lr
   207ae:	fa21 f102 	lsr.w	r1, r1, r2
   207b2:	4414      	add	r4, r2
   207b4:	e6bd      	b.n	20532 <__adddf3+0xe6>
   207b6:	bf00      	nop

000207b8 <__aeabi_dmul>:
   207b8:	b570      	push	{r4, r5, r6, lr}
   207ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   207be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   207c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   207c6:	bf1d      	ittte	ne
   207c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   207cc:	ea94 0f0c 	teqne	r4, ip
   207d0:	ea95 0f0c 	teqne	r5, ip
   207d4:	f000 f8de 	bleq	20994 <__aeabi_dmul+0x1dc>
   207d8:	442c      	add	r4, r5
   207da:	ea81 0603 	eor.w	r6, r1, r3
   207de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   207e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   207e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   207ea:	bf18      	it	ne
   207ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   207f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   207f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   207f8:	d038      	beq.n	2086c <__aeabi_dmul+0xb4>
   207fa:	fba0 ce02 	umull	ip, lr, r0, r2
   207fe:	f04f 0500 	mov.w	r5, #0
   20802:	fbe1 e502 	umlal	lr, r5, r1, r2
   20806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   2080a:	fbe0 e503 	umlal	lr, r5, r0, r3
   2080e:	f04f 0600 	mov.w	r6, #0
   20812:	fbe1 5603 	umlal	r5, r6, r1, r3
   20816:	f09c 0f00 	teq	ip, #0
   2081a:	bf18      	it	ne
   2081c:	f04e 0e01 	orrne.w	lr, lr, #1
   20820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   20824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   20828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   2082c:	d204      	bcs.n	20838 <__aeabi_dmul+0x80>
   2082e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   20832:	416d      	adcs	r5, r5
   20834:	eb46 0606 	adc.w	r6, r6, r6
   20838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   2083c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   20840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   20844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   20848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   2084c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   20850:	bf88      	it	hi
   20852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   20856:	d81e      	bhi.n	20896 <__aeabi_dmul+0xde>
   20858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   2085c:	bf08      	it	eq
   2085e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   20862:	f150 0000 	adcs.w	r0, r0, #0
   20866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   2086a:	bd70      	pop	{r4, r5, r6, pc}
   2086c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   20870:	ea46 0101 	orr.w	r1, r6, r1
   20874:	ea40 0002 	orr.w	r0, r0, r2
   20878:	ea81 0103 	eor.w	r1, r1, r3
   2087c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   20880:	bfc2      	ittt	gt
   20882:	ebd4 050c 	rsbsgt	r5, r4, ip
   20886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   2088a:	bd70      	popgt	{r4, r5, r6, pc}
   2088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   20890:	f04f 0e00 	mov.w	lr, #0
   20894:	3c01      	subs	r4, #1
   20896:	f300 80ab 	bgt.w	209f0 <__aeabi_dmul+0x238>
   2089a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   2089e:	bfde      	ittt	le
   208a0:	2000      	movle	r0, #0
   208a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   208a6:	bd70      	pople	{r4, r5, r6, pc}
   208a8:	f1c4 0400 	rsb	r4, r4, #0
   208ac:	3c20      	subs	r4, #32
   208ae:	da35      	bge.n	2091c <__aeabi_dmul+0x164>
   208b0:	340c      	adds	r4, #12
   208b2:	dc1b      	bgt.n	208ec <__aeabi_dmul+0x134>
   208b4:	f104 0414 	add.w	r4, r4, #20
   208b8:	f1c4 0520 	rsb	r5, r4, #32
   208bc:	fa00 f305 	lsl.w	r3, r0, r5
   208c0:	fa20 f004 	lsr.w	r0, r0, r4
   208c4:	fa01 f205 	lsl.w	r2, r1, r5
   208c8:	ea40 0002 	orr.w	r0, r0, r2
   208cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   208d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   208d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   208d8:	fa21 f604 	lsr.w	r6, r1, r4
   208dc:	eb42 0106 	adc.w	r1, r2, r6
   208e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   208e4:	bf08      	it	eq
   208e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   208ea:	bd70      	pop	{r4, r5, r6, pc}
   208ec:	f1c4 040c 	rsb	r4, r4, #12
   208f0:	f1c4 0520 	rsb	r5, r4, #32
   208f4:	fa00 f304 	lsl.w	r3, r0, r4
   208f8:	fa20 f005 	lsr.w	r0, r0, r5
   208fc:	fa01 f204 	lsl.w	r2, r1, r4
   20900:	ea40 0002 	orr.w	r0, r0, r2
   20904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   20908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   2090c:	f141 0100 	adc.w	r1, r1, #0
   20910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   20914:	bf08      	it	eq
   20916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   2091a:	bd70      	pop	{r4, r5, r6, pc}
   2091c:	f1c4 0520 	rsb	r5, r4, #32
   20920:	fa00 f205 	lsl.w	r2, r0, r5
   20924:	ea4e 0e02 	orr.w	lr, lr, r2
   20928:	fa20 f304 	lsr.w	r3, r0, r4
   2092c:	fa01 f205 	lsl.w	r2, r1, r5
   20930:	ea43 0302 	orr.w	r3, r3, r2
   20934:	fa21 f004 	lsr.w	r0, r1, r4
   20938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   2093c:	fa21 f204 	lsr.w	r2, r1, r4
   20940:	ea20 0002 	bic.w	r0, r0, r2
   20944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   20948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   2094c:	bf08      	it	eq
   2094e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   20952:	bd70      	pop	{r4, r5, r6, pc}
   20954:	f094 0f00 	teq	r4, #0
   20958:	d10f      	bne.n	2097a <__aeabi_dmul+0x1c2>
   2095a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   2095e:	0040      	lsls	r0, r0, #1
   20960:	eb41 0101 	adc.w	r1, r1, r1
   20964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   20968:	bf08      	it	eq
   2096a:	3c01      	subeq	r4, #1
   2096c:	d0f7      	beq.n	2095e <__aeabi_dmul+0x1a6>
   2096e:	ea41 0106 	orr.w	r1, r1, r6
   20972:	f095 0f00 	teq	r5, #0
   20976:	bf18      	it	ne
   20978:	4770      	bxne	lr
   2097a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   2097e:	0052      	lsls	r2, r2, #1
   20980:	eb43 0303 	adc.w	r3, r3, r3
   20984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   20988:	bf08      	it	eq
   2098a:	3d01      	subeq	r5, #1
   2098c:	d0f7      	beq.n	2097e <__aeabi_dmul+0x1c6>
   2098e:	ea43 0306 	orr.w	r3, r3, r6
   20992:	4770      	bx	lr
   20994:	ea94 0f0c 	teq	r4, ip
   20998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   2099c:	bf18      	it	ne
   2099e:	ea95 0f0c 	teqne	r5, ip
   209a2:	d00c      	beq.n	209be <__aeabi_dmul+0x206>
   209a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   209a8:	bf18      	it	ne
   209aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   209ae:	d1d1      	bne.n	20954 <__aeabi_dmul+0x19c>
   209b0:	ea81 0103 	eor.w	r1, r1, r3
   209b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   209b8:	f04f 0000 	mov.w	r0, #0
   209bc:	bd70      	pop	{r4, r5, r6, pc}
   209be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   209c2:	bf06      	itte	eq
   209c4:	4610      	moveq	r0, r2
   209c6:	4619      	moveq	r1, r3
   209c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   209cc:	d019      	beq.n	20a02 <__aeabi_dmul+0x24a>
   209ce:	ea94 0f0c 	teq	r4, ip
   209d2:	d102      	bne.n	209da <__aeabi_dmul+0x222>
   209d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   209d8:	d113      	bne.n	20a02 <__aeabi_dmul+0x24a>
   209da:	ea95 0f0c 	teq	r5, ip
   209de:	d105      	bne.n	209ec <__aeabi_dmul+0x234>
   209e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   209e4:	bf1c      	itt	ne
   209e6:	4610      	movne	r0, r2
   209e8:	4619      	movne	r1, r3
   209ea:	d10a      	bne.n	20a02 <__aeabi_dmul+0x24a>
   209ec:	ea81 0103 	eor.w	r1, r1, r3
   209f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   209f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   209f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   209fc:	f04f 0000 	mov.w	r0, #0
   20a00:	bd70      	pop	{r4, r5, r6, pc}
   20a02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   20a06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   20a0a:	bd70      	pop	{r4, r5, r6, pc}

00020a0c <__aeabi_ddiv>:
   20a0c:	b570      	push	{r4, r5, r6, lr}
   20a0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   20a12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   20a16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   20a1a:	bf1d      	ittte	ne
   20a1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   20a20:	ea94 0f0c 	teqne	r4, ip
   20a24:	ea95 0f0c 	teqne	r5, ip
   20a28:	f000 f8a7 	bleq	20b7a <__aeabi_ddiv+0x16e>
   20a2c:	eba4 0405 	sub.w	r4, r4, r5
   20a30:	ea81 0e03 	eor.w	lr, r1, r3
   20a34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   20a38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   20a3c:	f000 8088 	beq.w	20b50 <__aeabi_ddiv+0x144>
   20a40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   20a44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   20a48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   20a4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   20a50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   20a54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   20a58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   20a5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   20a60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   20a64:	429d      	cmp	r5, r3
   20a66:	bf08      	it	eq
   20a68:	4296      	cmpeq	r6, r2
   20a6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   20a6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   20a72:	d202      	bcs.n	20a7a <__aeabi_ddiv+0x6e>
   20a74:	085b      	lsrs	r3, r3, #1
   20a76:	ea4f 0232 	mov.w	r2, r2, rrx
   20a7a:	1ab6      	subs	r6, r6, r2
   20a7c:	eb65 0503 	sbc.w	r5, r5, r3
   20a80:	085b      	lsrs	r3, r3, #1
   20a82:	ea4f 0232 	mov.w	r2, r2, rrx
   20a86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   20a8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   20a8e:	ebb6 0e02 	subs.w	lr, r6, r2
   20a92:	eb75 0e03 	sbcs.w	lr, r5, r3
   20a96:	bf22      	ittt	cs
   20a98:	1ab6      	subcs	r6, r6, r2
   20a9a:	4675      	movcs	r5, lr
   20a9c:	ea40 000c 	orrcs.w	r0, r0, ip
   20aa0:	085b      	lsrs	r3, r3, #1
   20aa2:	ea4f 0232 	mov.w	r2, r2, rrx
   20aa6:	ebb6 0e02 	subs.w	lr, r6, r2
   20aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   20aae:	bf22      	ittt	cs
   20ab0:	1ab6      	subcs	r6, r6, r2
   20ab2:	4675      	movcs	r5, lr
   20ab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   20ab8:	085b      	lsrs	r3, r3, #1
   20aba:	ea4f 0232 	mov.w	r2, r2, rrx
   20abe:	ebb6 0e02 	subs.w	lr, r6, r2
   20ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   20ac6:	bf22      	ittt	cs
   20ac8:	1ab6      	subcs	r6, r6, r2
   20aca:	4675      	movcs	r5, lr
   20acc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   20ad0:	085b      	lsrs	r3, r3, #1
   20ad2:	ea4f 0232 	mov.w	r2, r2, rrx
   20ad6:	ebb6 0e02 	subs.w	lr, r6, r2
   20ada:	eb75 0e03 	sbcs.w	lr, r5, r3
   20ade:	bf22      	ittt	cs
   20ae0:	1ab6      	subcs	r6, r6, r2
   20ae2:	4675      	movcs	r5, lr
   20ae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   20ae8:	ea55 0e06 	orrs.w	lr, r5, r6
   20aec:	d018      	beq.n	20b20 <__aeabi_ddiv+0x114>
   20aee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   20af2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   20af6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   20afa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   20afe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   20b02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   20b06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   20b0a:	d1c0      	bne.n	20a8e <__aeabi_ddiv+0x82>
   20b0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   20b10:	d10b      	bne.n	20b2a <__aeabi_ddiv+0x11e>
   20b12:	ea41 0100 	orr.w	r1, r1, r0
   20b16:	f04f 0000 	mov.w	r0, #0
   20b1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   20b1e:	e7b6      	b.n	20a8e <__aeabi_ddiv+0x82>
   20b20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   20b24:	bf04      	itt	eq
   20b26:	4301      	orreq	r1, r0
   20b28:	2000      	moveq	r0, #0
   20b2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   20b2e:	bf88      	it	hi
   20b30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   20b34:	f63f aeaf 	bhi.w	20896 <__aeabi_dmul+0xde>
   20b38:	ebb5 0c03 	subs.w	ip, r5, r3
   20b3c:	bf04      	itt	eq
   20b3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   20b42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   20b46:	f150 0000 	adcs.w	r0, r0, #0
   20b4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   20b4e:	bd70      	pop	{r4, r5, r6, pc}
   20b50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   20b54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   20b58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   20b5c:	bfc2      	ittt	gt
   20b5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   20b62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   20b66:	bd70      	popgt	{r4, r5, r6, pc}
   20b68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   20b6c:	f04f 0e00 	mov.w	lr, #0
   20b70:	3c01      	subs	r4, #1
   20b72:	e690      	b.n	20896 <__aeabi_dmul+0xde>
   20b74:	ea45 0e06 	orr.w	lr, r5, r6
   20b78:	e68d      	b.n	20896 <__aeabi_dmul+0xde>
   20b7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   20b7e:	ea94 0f0c 	teq	r4, ip
   20b82:	bf08      	it	eq
   20b84:	ea95 0f0c 	teqeq	r5, ip
   20b88:	f43f af3b 	beq.w	20a02 <__aeabi_dmul+0x24a>
   20b8c:	ea94 0f0c 	teq	r4, ip
   20b90:	d10a      	bne.n	20ba8 <__aeabi_ddiv+0x19c>
   20b92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   20b96:	f47f af34 	bne.w	20a02 <__aeabi_dmul+0x24a>
   20b9a:	ea95 0f0c 	teq	r5, ip
   20b9e:	f47f af25 	bne.w	209ec <__aeabi_dmul+0x234>
   20ba2:	4610      	mov	r0, r2
   20ba4:	4619      	mov	r1, r3
   20ba6:	e72c      	b.n	20a02 <__aeabi_dmul+0x24a>
   20ba8:	ea95 0f0c 	teq	r5, ip
   20bac:	d106      	bne.n	20bbc <__aeabi_ddiv+0x1b0>
   20bae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   20bb2:	f43f aefd 	beq.w	209b0 <__aeabi_dmul+0x1f8>
   20bb6:	4610      	mov	r0, r2
   20bb8:	4619      	mov	r1, r3
   20bba:	e722      	b.n	20a02 <__aeabi_dmul+0x24a>
   20bbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   20bc0:	bf18      	it	ne
   20bc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   20bc6:	f47f aec5 	bne.w	20954 <__aeabi_dmul+0x19c>
   20bca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   20bce:	f47f af0d 	bne.w	209ec <__aeabi_dmul+0x234>
   20bd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   20bd6:	f47f aeeb 	bne.w	209b0 <__aeabi_dmul+0x1f8>
   20bda:	e712      	b.n	20a02 <__aeabi_dmul+0x24a>

00020bdc <__aeabi_d2f>:
   20bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   20be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   20be4:	bf24      	itt	cs
   20be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   20bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   20bee:	d90d      	bls.n	20c0c <__aeabi_d2f+0x30>
   20bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   20bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   20bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   20bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   20c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   20c04:	bf08      	it	eq
   20c06:	f020 0001 	biceq.w	r0, r0, #1
   20c0a:	4770      	bx	lr
   20c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   20c10:	d121      	bne.n	20c56 <__aeabi_d2f+0x7a>
   20c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   20c16:	bfbc      	itt	lt
   20c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   20c1c:	4770      	bxlt	lr
   20c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   20c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
   20c26:	f1c2 0218 	rsb	r2, r2, #24
   20c2a:	f1c2 0c20 	rsb	ip, r2, #32
   20c2e:	fa10 f30c 	lsls.w	r3, r0, ip
   20c32:	fa20 f002 	lsr.w	r0, r0, r2
   20c36:	bf18      	it	ne
   20c38:	f040 0001 	orrne.w	r0, r0, #1
   20c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   20c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   20c44:	fa03 fc0c 	lsl.w	ip, r3, ip
   20c48:	ea40 000c 	orr.w	r0, r0, ip
   20c4c:	fa23 f302 	lsr.w	r3, r3, r2
   20c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
   20c54:	e7cc      	b.n	20bf0 <__aeabi_d2f+0x14>
   20c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
   20c5a:	d107      	bne.n	20c6c <__aeabi_d2f+0x90>
   20c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   20c60:	bf1e      	ittt	ne
   20c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   20c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   20c6a:	4770      	bxne	lr
   20c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   20c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   20c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20c78:	4770      	bx	lr
   20c7a:	bf00      	nop

00020c7c <__aeabi_frsub>:
   20c7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   20c80:	e002      	b.n	20c88 <__addsf3>
   20c82:	bf00      	nop

00020c84 <__aeabi_fsub>:
   20c84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00020c88 <__addsf3>:
   20c88:	0042      	lsls	r2, r0, #1
   20c8a:	bf1f      	itttt	ne
   20c8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   20c90:	ea92 0f03 	teqne	r2, r3
   20c94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   20c98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   20c9c:	d06a      	beq.n	20d74 <__addsf3+0xec>
   20c9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   20ca2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   20ca6:	bfc1      	itttt	gt
   20ca8:	18d2      	addgt	r2, r2, r3
   20caa:	4041      	eorgt	r1, r0
   20cac:	4048      	eorgt	r0, r1
   20cae:	4041      	eorgt	r1, r0
   20cb0:	bfb8      	it	lt
   20cb2:	425b      	neglt	r3, r3
   20cb4:	2b19      	cmp	r3, #25
   20cb6:	bf88      	it	hi
   20cb8:	4770      	bxhi	lr
   20cba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   20cbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20cc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   20cc6:	bf18      	it	ne
   20cc8:	4240      	negne	r0, r0
   20cca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   20cce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   20cd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   20cd6:	bf18      	it	ne
   20cd8:	4249      	negne	r1, r1
   20cda:	ea92 0f03 	teq	r2, r3
   20cde:	d03f      	beq.n	20d60 <__addsf3+0xd8>
   20ce0:	f1a2 0201 	sub.w	r2, r2, #1
   20ce4:	fa41 fc03 	asr.w	ip, r1, r3
   20ce8:	eb10 000c 	adds.w	r0, r0, ip
   20cec:	f1c3 0320 	rsb	r3, r3, #32
   20cf0:	fa01 f103 	lsl.w	r1, r1, r3
   20cf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   20cf8:	d502      	bpl.n	20d00 <__addsf3+0x78>
   20cfa:	4249      	negs	r1, r1
   20cfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   20d00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20d04:	d313      	bcc.n	20d2e <__addsf3+0xa6>
   20d06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   20d0a:	d306      	bcc.n	20d1a <__addsf3+0x92>
   20d0c:	0840      	lsrs	r0, r0, #1
   20d0e:	ea4f 0131 	mov.w	r1, r1, rrx
   20d12:	f102 0201 	add.w	r2, r2, #1
   20d16:	2afe      	cmp	r2, #254	; 0xfe
   20d18:	d251      	bcs.n	20dbe <__addsf3+0x136>
   20d1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   20d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   20d22:	bf08      	it	eq
   20d24:	f020 0001 	biceq.w	r0, r0, #1
   20d28:	ea40 0003 	orr.w	r0, r0, r3
   20d2c:	4770      	bx	lr
   20d2e:	0049      	lsls	r1, r1, #1
   20d30:	eb40 0000 	adc.w	r0, r0, r0
   20d34:	3a01      	subs	r2, #1
   20d36:	bf28      	it	cs
   20d38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   20d3c:	d2ed      	bcs.n	20d1a <__addsf3+0x92>
   20d3e:	fab0 fc80 	clz	ip, r0
   20d42:	f1ac 0c08 	sub.w	ip, ip, #8
   20d46:	ebb2 020c 	subs.w	r2, r2, ip
   20d4a:	fa00 f00c 	lsl.w	r0, r0, ip
   20d4e:	bfaa      	itet	ge
   20d50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   20d54:	4252      	neglt	r2, r2
   20d56:	4318      	orrge	r0, r3
   20d58:	bfbc      	itt	lt
   20d5a:	40d0      	lsrlt	r0, r2
   20d5c:	4318      	orrlt	r0, r3
   20d5e:	4770      	bx	lr
   20d60:	f092 0f00 	teq	r2, #0
   20d64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   20d68:	bf06      	itte	eq
   20d6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   20d6e:	3201      	addeq	r2, #1
   20d70:	3b01      	subne	r3, #1
   20d72:	e7b5      	b.n	20ce0 <__addsf3+0x58>
   20d74:	ea4f 0341 	mov.w	r3, r1, lsl #1
   20d78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   20d7c:	bf18      	it	ne
   20d7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   20d82:	d021      	beq.n	20dc8 <__addsf3+0x140>
   20d84:	ea92 0f03 	teq	r2, r3
   20d88:	d004      	beq.n	20d94 <__addsf3+0x10c>
   20d8a:	f092 0f00 	teq	r2, #0
   20d8e:	bf08      	it	eq
   20d90:	4608      	moveq	r0, r1
   20d92:	4770      	bx	lr
   20d94:	ea90 0f01 	teq	r0, r1
   20d98:	bf1c      	itt	ne
   20d9a:	2000      	movne	r0, #0
   20d9c:	4770      	bxne	lr
   20d9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   20da2:	d104      	bne.n	20dae <__addsf3+0x126>
   20da4:	0040      	lsls	r0, r0, #1
   20da6:	bf28      	it	cs
   20da8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   20dac:	4770      	bx	lr
   20dae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   20db2:	bf3c      	itt	cc
   20db4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   20db8:	4770      	bxcc	lr
   20dba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   20dbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   20dc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20dc6:	4770      	bx	lr
   20dc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   20dcc:	bf16      	itet	ne
   20dce:	4608      	movne	r0, r1
   20dd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   20dd4:	4601      	movne	r1, r0
   20dd6:	0242      	lsls	r2, r0, #9
   20dd8:	bf06      	itte	eq
   20dda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   20dde:	ea90 0f01 	teqeq	r0, r1
   20de2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   20de6:	4770      	bx	lr

00020de8 <__aeabi_ui2f>:
   20de8:	f04f 0300 	mov.w	r3, #0
   20dec:	e004      	b.n	20df8 <__aeabi_i2f+0x8>
   20dee:	bf00      	nop

00020df0 <__aeabi_i2f>:
   20df0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   20df4:	bf48      	it	mi
   20df6:	4240      	negmi	r0, r0
   20df8:	ea5f 0c00 	movs.w	ip, r0
   20dfc:	bf08      	it	eq
   20dfe:	4770      	bxeq	lr
   20e00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   20e04:	4601      	mov	r1, r0
   20e06:	f04f 0000 	mov.w	r0, #0
   20e0a:	e01c      	b.n	20e46 <__aeabi_l2f+0x2a>

00020e0c <__aeabi_ul2f>:
   20e0c:	ea50 0201 	orrs.w	r2, r0, r1
   20e10:	bf08      	it	eq
   20e12:	4770      	bxeq	lr
   20e14:	f04f 0300 	mov.w	r3, #0
   20e18:	e00a      	b.n	20e30 <__aeabi_l2f+0x14>
   20e1a:	bf00      	nop

00020e1c <__aeabi_l2f>:
   20e1c:	ea50 0201 	orrs.w	r2, r0, r1
   20e20:	bf08      	it	eq
   20e22:	4770      	bxeq	lr
   20e24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   20e28:	d502      	bpl.n	20e30 <__aeabi_l2f+0x14>
   20e2a:	4240      	negs	r0, r0
   20e2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20e30:	ea5f 0c01 	movs.w	ip, r1
   20e34:	bf02      	ittt	eq
   20e36:	4684      	moveq	ip, r0
   20e38:	4601      	moveq	r1, r0
   20e3a:	2000      	moveq	r0, #0
   20e3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   20e40:	bf08      	it	eq
   20e42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   20e46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   20e4a:	fabc f28c 	clz	r2, ip
   20e4e:	3a08      	subs	r2, #8
   20e50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   20e54:	db10      	blt.n	20e78 <__aeabi_l2f+0x5c>
   20e56:	fa01 fc02 	lsl.w	ip, r1, r2
   20e5a:	4463      	add	r3, ip
   20e5c:	fa00 fc02 	lsl.w	ip, r0, r2
   20e60:	f1c2 0220 	rsb	r2, r2, #32
   20e64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   20e68:	fa20 f202 	lsr.w	r2, r0, r2
   20e6c:	eb43 0002 	adc.w	r0, r3, r2
   20e70:	bf08      	it	eq
   20e72:	f020 0001 	biceq.w	r0, r0, #1
   20e76:	4770      	bx	lr
   20e78:	f102 0220 	add.w	r2, r2, #32
   20e7c:	fa01 fc02 	lsl.w	ip, r1, r2
   20e80:	f1c2 0220 	rsb	r2, r2, #32
   20e84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   20e88:	fa21 f202 	lsr.w	r2, r1, r2
   20e8c:	eb43 0002 	adc.w	r0, r3, r2
   20e90:	bf08      	it	eq
   20e92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   20e96:	4770      	bx	lr

00020e98 <__aeabi_fmul>:
   20e98:	f04f 0cff 	mov.w	ip, #255	; 0xff
   20e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   20ea0:	bf1e      	ittt	ne
   20ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   20ea6:	ea92 0f0c 	teqne	r2, ip
   20eaa:	ea93 0f0c 	teqne	r3, ip
   20eae:	d06f      	beq.n	20f90 <__aeabi_fmul+0xf8>
   20eb0:	441a      	add	r2, r3
   20eb2:	ea80 0c01 	eor.w	ip, r0, r1
   20eb6:	0240      	lsls	r0, r0, #9
   20eb8:	bf18      	it	ne
   20eba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   20ebe:	d01e      	beq.n	20efe <__aeabi_fmul+0x66>
   20ec0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   20ec4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   20ec8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   20ecc:	fba0 3101 	umull	r3, r1, r0, r1
   20ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   20ed4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   20ed8:	bf3e      	ittt	cc
   20eda:	0049      	lslcc	r1, r1, #1
   20edc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   20ee0:	005b      	lslcc	r3, r3, #1
   20ee2:	ea40 0001 	orr.w	r0, r0, r1
   20ee6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   20eea:	2afd      	cmp	r2, #253	; 0xfd
   20eec:	d81d      	bhi.n	20f2a <__aeabi_fmul+0x92>
   20eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   20ef2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   20ef6:	bf08      	it	eq
   20ef8:	f020 0001 	biceq.w	r0, r0, #1
   20efc:	4770      	bx	lr
   20efe:	f090 0f00 	teq	r0, #0
   20f02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   20f06:	bf08      	it	eq
   20f08:	0249      	lsleq	r1, r1, #9
   20f0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   20f0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   20f12:	3a7f      	subs	r2, #127	; 0x7f
   20f14:	bfc2      	ittt	gt
   20f16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   20f1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   20f1e:	4770      	bxgt	lr
   20f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20f24:	f04f 0300 	mov.w	r3, #0
   20f28:	3a01      	subs	r2, #1
   20f2a:	dc5d      	bgt.n	20fe8 <__aeabi_fmul+0x150>
   20f2c:	f112 0f19 	cmn.w	r2, #25
   20f30:	bfdc      	itt	le
   20f32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   20f36:	4770      	bxle	lr
   20f38:	f1c2 0200 	rsb	r2, r2, #0
   20f3c:	0041      	lsls	r1, r0, #1
   20f3e:	fa21 f102 	lsr.w	r1, r1, r2
   20f42:	f1c2 0220 	rsb	r2, r2, #32
   20f46:	fa00 fc02 	lsl.w	ip, r0, r2
   20f4a:	ea5f 0031 	movs.w	r0, r1, rrx
   20f4e:	f140 0000 	adc.w	r0, r0, #0
   20f52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   20f56:	bf08      	it	eq
   20f58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   20f5c:	4770      	bx	lr
   20f5e:	f092 0f00 	teq	r2, #0
   20f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   20f66:	bf02      	ittt	eq
   20f68:	0040      	lsleq	r0, r0, #1
   20f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   20f6e:	3a01      	subeq	r2, #1
   20f70:	d0f9      	beq.n	20f66 <__aeabi_fmul+0xce>
   20f72:	ea40 000c 	orr.w	r0, r0, ip
   20f76:	f093 0f00 	teq	r3, #0
   20f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   20f7e:	bf02      	ittt	eq
   20f80:	0049      	lsleq	r1, r1, #1
   20f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   20f86:	3b01      	subeq	r3, #1
   20f88:	d0f9      	beq.n	20f7e <__aeabi_fmul+0xe6>
   20f8a:	ea41 010c 	orr.w	r1, r1, ip
   20f8e:	e78f      	b.n	20eb0 <__aeabi_fmul+0x18>
   20f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   20f94:	ea92 0f0c 	teq	r2, ip
   20f98:	bf18      	it	ne
   20f9a:	ea93 0f0c 	teqne	r3, ip
   20f9e:	d00a      	beq.n	20fb6 <__aeabi_fmul+0x11e>
   20fa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   20fa4:	bf18      	it	ne
   20fa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   20faa:	d1d8      	bne.n	20f5e <__aeabi_fmul+0xc6>
   20fac:	ea80 0001 	eor.w	r0, r0, r1
   20fb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   20fb4:	4770      	bx	lr
   20fb6:	f090 0f00 	teq	r0, #0
   20fba:	bf17      	itett	ne
   20fbc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   20fc0:	4608      	moveq	r0, r1
   20fc2:	f091 0f00 	teqne	r1, #0
   20fc6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   20fca:	d014      	beq.n	20ff6 <__aeabi_fmul+0x15e>
   20fcc:	ea92 0f0c 	teq	r2, ip
   20fd0:	d101      	bne.n	20fd6 <__aeabi_fmul+0x13e>
   20fd2:	0242      	lsls	r2, r0, #9
   20fd4:	d10f      	bne.n	20ff6 <__aeabi_fmul+0x15e>
   20fd6:	ea93 0f0c 	teq	r3, ip
   20fda:	d103      	bne.n	20fe4 <__aeabi_fmul+0x14c>
   20fdc:	024b      	lsls	r3, r1, #9
   20fde:	bf18      	it	ne
   20fe0:	4608      	movne	r0, r1
   20fe2:	d108      	bne.n	20ff6 <__aeabi_fmul+0x15e>
   20fe4:	ea80 0001 	eor.w	r0, r0, r1
   20fe8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   20fec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   20ff0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20ff4:	4770      	bx	lr
   20ff6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   20ffa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   20ffe:	4770      	bx	lr

00021000 <__aeabi_fdiv>:
   21000:	f04f 0cff 	mov.w	ip, #255	; 0xff
   21004:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   21008:	bf1e      	ittt	ne
   2100a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   2100e:	ea92 0f0c 	teqne	r2, ip
   21012:	ea93 0f0c 	teqne	r3, ip
   21016:	d069      	beq.n	210ec <__aeabi_fdiv+0xec>
   21018:	eba2 0203 	sub.w	r2, r2, r3
   2101c:	ea80 0c01 	eor.w	ip, r0, r1
   21020:	0249      	lsls	r1, r1, #9
   21022:	ea4f 2040 	mov.w	r0, r0, lsl #9
   21026:	d037      	beq.n	21098 <__aeabi_fdiv+0x98>
   21028:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2102c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   21030:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   21034:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   21038:	428b      	cmp	r3, r1
   2103a:	bf38      	it	cc
   2103c:	005b      	lslcc	r3, r3, #1
   2103e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   21042:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   21046:	428b      	cmp	r3, r1
   21048:	bf24      	itt	cs
   2104a:	1a5b      	subcs	r3, r3, r1
   2104c:	ea40 000c 	orrcs.w	r0, r0, ip
   21050:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   21054:	bf24      	itt	cs
   21056:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   2105a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   2105e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   21062:	bf24      	itt	cs
   21064:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   21068:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   2106c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   21070:	bf24      	itt	cs
   21072:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   21076:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   2107a:	011b      	lsls	r3, r3, #4
   2107c:	bf18      	it	ne
   2107e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   21082:	d1e0      	bne.n	21046 <__aeabi_fdiv+0x46>
   21084:	2afd      	cmp	r2, #253	; 0xfd
   21086:	f63f af50 	bhi.w	20f2a <__aeabi_fmul+0x92>
   2108a:	428b      	cmp	r3, r1
   2108c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   21090:	bf08      	it	eq
   21092:	f020 0001 	biceq.w	r0, r0, #1
   21096:	4770      	bx	lr
   21098:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   2109c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   210a0:	327f      	adds	r2, #127	; 0x7f
   210a2:	bfc2      	ittt	gt
   210a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   210a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   210ac:	4770      	bxgt	lr
   210ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   210b2:	f04f 0300 	mov.w	r3, #0
   210b6:	3a01      	subs	r2, #1
   210b8:	e737      	b.n	20f2a <__aeabi_fmul+0x92>
   210ba:	f092 0f00 	teq	r2, #0
   210be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   210c2:	bf02      	ittt	eq
   210c4:	0040      	lsleq	r0, r0, #1
   210c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   210ca:	3a01      	subeq	r2, #1
   210cc:	d0f9      	beq.n	210c2 <__aeabi_fdiv+0xc2>
   210ce:	ea40 000c 	orr.w	r0, r0, ip
   210d2:	f093 0f00 	teq	r3, #0
   210d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   210da:	bf02      	ittt	eq
   210dc:	0049      	lsleq	r1, r1, #1
   210de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   210e2:	3b01      	subeq	r3, #1
   210e4:	d0f9      	beq.n	210da <__aeabi_fdiv+0xda>
   210e6:	ea41 010c 	orr.w	r1, r1, ip
   210ea:	e795      	b.n	21018 <__aeabi_fdiv+0x18>
   210ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   210f0:	ea92 0f0c 	teq	r2, ip
   210f4:	d108      	bne.n	21108 <__aeabi_fdiv+0x108>
   210f6:	0242      	lsls	r2, r0, #9
   210f8:	f47f af7d 	bne.w	20ff6 <__aeabi_fmul+0x15e>
   210fc:	ea93 0f0c 	teq	r3, ip
   21100:	f47f af70 	bne.w	20fe4 <__aeabi_fmul+0x14c>
   21104:	4608      	mov	r0, r1
   21106:	e776      	b.n	20ff6 <__aeabi_fmul+0x15e>
   21108:	ea93 0f0c 	teq	r3, ip
   2110c:	d104      	bne.n	21118 <__aeabi_fdiv+0x118>
   2110e:	024b      	lsls	r3, r1, #9
   21110:	f43f af4c 	beq.w	20fac <__aeabi_fmul+0x114>
   21114:	4608      	mov	r0, r1
   21116:	e76e      	b.n	20ff6 <__aeabi_fmul+0x15e>
   21118:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   2111c:	bf18      	it	ne
   2111e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   21122:	d1ca      	bne.n	210ba <__aeabi_fdiv+0xba>
   21124:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   21128:	f47f af5c 	bne.w	20fe4 <__aeabi_fmul+0x14c>
   2112c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   21130:	f47f af3c 	bne.w	20fac <__aeabi_fmul+0x114>
   21134:	e75f      	b.n	20ff6 <__aeabi_fmul+0x15e>
   21136:	bf00      	nop

00021138 <__aeabi_ldivmod>:
   21138:	b97b      	cbnz	r3, 2115a <__aeabi_ldivmod+0x22>
   2113a:	b972      	cbnz	r2, 2115a <__aeabi_ldivmod+0x22>
   2113c:	2900      	cmp	r1, #0
   2113e:	bfbe      	ittt	lt
   21140:	2000      	movlt	r0, #0
   21142:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   21146:	e006      	blt.n	21156 <__aeabi_ldivmod+0x1e>
   21148:	bf08      	it	eq
   2114a:	2800      	cmpeq	r0, #0
   2114c:	bf1c      	itt	ne
   2114e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   21152:	f04f 30ff 	movne.w	r0, #4294967295
   21156:	f000 b857 	b.w	21208 <__aeabi_idiv0>
   2115a:	f1ad 0c08 	sub.w	ip, sp, #8
   2115e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   21162:	2900      	cmp	r1, #0
   21164:	db09      	blt.n	2117a <__aeabi_ldivmod+0x42>
   21166:	2b00      	cmp	r3, #0
   21168:	db1a      	blt.n	211a0 <__aeabi_ldivmod+0x68>
   2116a:	f000 f928 	bl	213be <__udivmoddi4>
   2116e:	f8dd e004 	ldr.w	lr, [sp, #4]
   21172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21176:	b004      	add	sp, #16
   21178:	4770      	bx	lr
   2117a:	4240      	negs	r0, r0
   2117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21180:	2b00      	cmp	r3, #0
   21182:	db1b      	blt.n	211bc <__aeabi_ldivmod+0x84>
   21184:	f000 f91b 	bl	213be <__udivmoddi4>
   21188:	f8dd e004 	ldr.w	lr, [sp, #4]
   2118c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21190:	b004      	add	sp, #16
   21192:	4240      	negs	r0, r0
   21194:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21198:	4252      	negs	r2, r2
   2119a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2119e:	4770      	bx	lr
   211a0:	4252      	negs	r2, r2
   211a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   211a6:	f000 f90a 	bl	213be <__udivmoddi4>
   211aa:	f8dd e004 	ldr.w	lr, [sp, #4]
   211ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   211b2:	b004      	add	sp, #16
   211b4:	4240      	negs	r0, r0
   211b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   211ba:	4770      	bx	lr
   211bc:	4252      	negs	r2, r2
   211be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   211c2:	f000 f8fc 	bl	213be <__udivmoddi4>
   211c6:	f8dd e004 	ldr.w	lr, [sp, #4]
   211ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   211ce:	b004      	add	sp, #16
   211d0:	4252      	negs	r2, r2
   211d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   211d6:	4770      	bx	lr

000211d8 <__aeabi_uldivmod>:
   211d8:	b953      	cbnz	r3, 211f0 <__aeabi_uldivmod+0x18>
   211da:	b94a      	cbnz	r2, 211f0 <__aeabi_uldivmod+0x18>
   211dc:	2900      	cmp	r1, #0
   211de:	bf08      	it	eq
   211e0:	2800      	cmpeq	r0, #0
   211e2:	bf1c      	itt	ne
   211e4:	f04f 31ff 	movne.w	r1, #4294967295
   211e8:	f04f 30ff 	movne.w	r0, #4294967295
   211ec:	f000 b80c 	b.w	21208 <__aeabi_idiv0>
   211f0:	f1ad 0c08 	sub.w	ip, sp, #8
   211f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   211f8:	f000 f8e1 	bl	213be <__udivmoddi4>
   211fc:	f8dd e004 	ldr.w	lr, [sp, #4]
   21200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21204:	b004      	add	sp, #16
   21206:	4770      	bx	lr

00021208 <__aeabi_idiv0>:
   21208:	4770      	bx	lr
   2120a:	bf00      	nop

0002120c <__gedf2>:
   2120c:	f04f 3cff 	mov.w	ip, #4294967295
   21210:	e006      	b.n	21220 <__cmpdf2+0x4>
   21212:	bf00      	nop

00021214 <__ledf2>:
   21214:	f04f 0c01 	mov.w	ip, #1
   21218:	e002      	b.n	21220 <__cmpdf2+0x4>
   2121a:	bf00      	nop

0002121c <__cmpdf2>:
   2121c:	f04f 0c01 	mov.w	ip, #1
   21220:	f84d cd04 	str.w	ip, [sp, #-4]!
   21224:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   21228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   2122c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21230:	bf18      	it	ne
   21232:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   21236:	d01b      	beq.n	21270 <__cmpdf2+0x54>
   21238:	b001      	add	sp, #4
   2123a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   2123e:	bf0c      	ite	eq
   21240:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   21244:	ea91 0f03 	teqne	r1, r3
   21248:	bf02      	ittt	eq
   2124a:	ea90 0f02 	teqeq	r0, r2
   2124e:	2000      	moveq	r0, #0
   21250:	4770      	bxeq	lr
   21252:	f110 0f00 	cmn.w	r0, #0
   21256:	ea91 0f03 	teq	r1, r3
   2125a:	bf58      	it	pl
   2125c:	4299      	cmppl	r1, r3
   2125e:	bf08      	it	eq
   21260:	4290      	cmpeq	r0, r2
   21262:	bf2c      	ite	cs
   21264:	17d8      	asrcs	r0, r3, #31
   21266:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   2126a:	f040 0001 	orr.w	r0, r0, #1
   2126e:	4770      	bx	lr
   21270:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   21274:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21278:	d102      	bne.n	21280 <__cmpdf2+0x64>
   2127a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2127e:	d107      	bne.n	21290 <__cmpdf2+0x74>
   21280:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21288:	d1d6      	bne.n	21238 <__cmpdf2+0x1c>
   2128a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2128e:	d0d3      	beq.n	21238 <__cmpdf2+0x1c>
   21290:	f85d 0b04 	ldr.w	r0, [sp], #4
   21294:	4770      	bx	lr
   21296:	bf00      	nop

00021298 <__aeabi_cdrcmple>:
   21298:	4684      	mov	ip, r0
   2129a:	4610      	mov	r0, r2
   2129c:	4662      	mov	r2, ip
   2129e:	468c      	mov	ip, r1
   212a0:	4619      	mov	r1, r3
   212a2:	4663      	mov	r3, ip
   212a4:	e000      	b.n	212a8 <__aeabi_cdcmpeq>
   212a6:	bf00      	nop

000212a8 <__aeabi_cdcmpeq>:
   212a8:	b501      	push	{r0, lr}
   212aa:	f7ff ffb7 	bl	2121c <__cmpdf2>
   212ae:	2800      	cmp	r0, #0
   212b0:	bf48      	it	mi
   212b2:	f110 0f00 	cmnmi.w	r0, #0
   212b6:	bd01      	pop	{r0, pc}

000212b8 <__aeabi_dcmpeq>:
   212b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   212bc:	f7ff fff4 	bl	212a8 <__aeabi_cdcmpeq>
   212c0:	bf0c      	ite	eq
   212c2:	2001      	moveq	r0, #1
   212c4:	2000      	movne	r0, #0
   212c6:	f85d fb08 	ldr.w	pc, [sp], #8
   212ca:	bf00      	nop

000212cc <__aeabi_dcmplt>:
   212cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   212d0:	f7ff ffea 	bl	212a8 <__aeabi_cdcmpeq>
   212d4:	bf34      	ite	cc
   212d6:	2001      	movcc	r0, #1
   212d8:	2000      	movcs	r0, #0
   212da:	f85d fb08 	ldr.w	pc, [sp], #8
   212de:	bf00      	nop

000212e0 <__aeabi_dcmple>:
   212e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   212e4:	f7ff ffe0 	bl	212a8 <__aeabi_cdcmpeq>
   212e8:	bf94      	ite	ls
   212ea:	2001      	movls	r0, #1
   212ec:	2000      	movhi	r0, #0
   212ee:	f85d fb08 	ldr.w	pc, [sp], #8
   212f2:	bf00      	nop

000212f4 <__aeabi_dcmpge>:
   212f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   212f8:	f7ff ffce 	bl	21298 <__aeabi_cdrcmple>
   212fc:	bf94      	ite	ls
   212fe:	2001      	movls	r0, #1
   21300:	2000      	movhi	r0, #0
   21302:	f85d fb08 	ldr.w	pc, [sp], #8
   21306:	bf00      	nop

00021308 <__aeabi_dcmpgt>:
   21308:	f84d ed08 	str.w	lr, [sp, #-8]!
   2130c:	f7ff ffc4 	bl	21298 <__aeabi_cdrcmple>
   21310:	bf34      	ite	cc
   21312:	2001      	movcc	r0, #1
   21314:	2000      	movcs	r0, #0
   21316:	f85d fb08 	ldr.w	pc, [sp], #8
   2131a:	bf00      	nop

0002131c <__aeabi_dcmpun>:
   2131c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   21320:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21324:	d102      	bne.n	2132c <__aeabi_dcmpun+0x10>
   21326:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2132a:	d10a      	bne.n	21342 <__aeabi_dcmpun+0x26>
   2132c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21334:	d102      	bne.n	2133c <__aeabi_dcmpun+0x20>
   21336:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2133a:	d102      	bne.n	21342 <__aeabi_dcmpun+0x26>
   2133c:	f04f 0000 	mov.w	r0, #0
   21340:	4770      	bx	lr
   21342:	f04f 0001 	mov.w	r0, #1
   21346:	4770      	bx	lr

00021348 <__aeabi_d2iz>:
   21348:	ea4f 0241 	mov.w	r2, r1, lsl #1
   2134c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   21350:	d215      	bcs.n	2137e <__aeabi_d2iz+0x36>
   21352:	d511      	bpl.n	21378 <__aeabi_d2iz+0x30>
   21354:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   21358:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   2135c:	d912      	bls.n	21384 <__aeabi_d2iz+0x3c>
   2135e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   21362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   21366:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   2136a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   2136e:	fa23 f002 	lsr.w	r0, r3, r2
   21372:	bf18      	it	ne
   21374:	4240      	negne	r0, r0
   21376:	4770      	bx	lr
   21378:	f04f 0000 	mov.w	r0, #0
   2137c:	4770      	bx	lr
   2137e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   21382:	d105      	bne.n	21390 <__aeabi_d2iz+0x48>
   21384:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   21388:	bf08      	it	eq
   2138a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   2138e:	4770      	bx	lr
   21390:	f04f 0000 	mov.w	r0, #0
   21394:	4770      	bx	lr
   21396:	bf00      	nop

00021398 <__popcountsi2>:
   21398:	0843      	lsrs	r3, r0, #1
   2139a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   2139e:	1ac0      	subs	r0, r0, r3
   213a0:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
   213a4:	0880      	lsrs	r0, r0, #2
   213a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   213aa:	4418      	add	r0, r3
   213ac:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
   213b0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   213b4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   213b8:	4358      	muls	r0, r3
   213ba:	0e00      	lsrs	r0, r0, #24
   213bc:	4770      	bx	lr

000213be <__udivmoddi4>:
   213be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   213c2:	4686      	mov	lr, r0
   213c4:	468c      	mov	ip, r1
   213c6:	4608      	mov	r0, r1
   213c8:	9e08      	ldr	r6, [sp, #32]
   213ca:	4615      	mov	r5, r2
   213cc:	4674      	mov	r4, lr
   213ce:	4619      	mov	r1, r3
   213d0:	2b00      	cmp	r3, #0
   213d2:	f040 80c1 	bne.w	21558 <__udivmoddi4+0x19a>
   213d6:	4285      	cmp	r5, r0
   213d8:	fab2 f282 	clz	r2, r2
   213dc:	d945      	bls.n	2146a <__udivmoddi4+0xac>
   213de:	b14a      	cbz	r2, 213f4 <__udivmoddi4+0x36>
   213e0:	f1c2 0320 	rsb	r3, r2, #32
   213e4:	fa00 fc02 	lsl.w	ip, r0, r2
   213e8:	4095      	lsls	r5, r2
   213ea:	4094      	lsls	r4, r2
   213ec:	fa2e f303 	lsr.w	r3, lr, r3
   213f0:	ea43 0c0c 	orr.w	ip, r3, ip
   213f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   213f8:	b2a8      	uxth	r0, r5
   213fa:	0c23      	lsrs	r3, r4, #16
   213fc:	fbbc f8fe 	udiv	r8, ip, lr
   21400:	fb0e cc18 	mls	ip, lr, r8, ip
   21404:	fb08 f900 	mul.w	r9, r8, r0
   21408:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   2140c:	4599      	cmp	r9, r3
   2140e:	d928      	bls.n	21462 <__udivmoddi4+0xa4>
   21410:	18eb      	adds	r3, r5, r3
   21412:	f108 37ff 	add.w	r7, r8, #4294967295
   21416:	d204      	bcs.n	21422 <__udivmoddi4+0x64>
   21418:	4599      	cmp	r9, r3
   2141a:	d902      	bls.n	21422 <__udivmoddi4+0x64>
   2141c:	f1a8 0702 	sub.w	r7, r8, #2
   21420:	442b      	add	r3, r5
   21422:	eba3 0309 	sub.w	r3, r3, r9
   21426:	b2a4      	uxth	r4, r4
   21428:	fbb3 fcfe 	udiv	ip, r3, lr
   2142c:	fb0e 331c 	mls	r3, lr, ip, r3
   21430:	fb0c f000 	mul.w	r0, ip, r0
   21434:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   21438:	42a0      	cmp	r0, r4
   2143a:	d914      	bls.n	21466 <__udivmoddi4+0xa8>
   2143c:	192c      	adds	r4, r5, r4
   2143e:	f10c 33ff 	add.w	r3, ip, #4294967295
   21442:	d204      	bcs.n	2144e <__udivmoddi4+0x90>
   21444:	42a0      	cmp	r0, r4
   21446:	d902      	bls.n	2144e <__udivmoddi4+0x90>
   21448:	f1ac 0302 	sub.w	r3, ip, #2
   2144c:	442c      	add	r4, r5
   2144e:	1a24      	subs	r4, r4, r0
   21450:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   21454:	b11e      	cbz	r6, 2145e <__udivmoddi4+0xa0>
   21456:	40d4      	lsrs	r4, r2
   21458:	2300      	movs	r3, #0
   2145a:	6034      	str	r4, [r6, #0]
   2145c:	6073      	str	r3, [r6, #4]
   2145e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21462:	4647      	mov	r7, r8
   21464:	e7dd      	b.n	21422 <__udivmoddi4+0x64>
   21466:	4663      	mov	r3, ip
   21468:	e7f1      	b.n	2144e <__udivmoddi4+0x90>
   2146a:	bb92      	cbnz	r2, 214d2 <__udivmoddi4+0x114>
   2146c:	1b43      	subs	r3, r0, r5
   2146e:	2101      	movs	r1, #1
   21470:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   21474:	b2af      	uxth	r7, r5
   21476:	0c20      	lsrs	r0, r4, #16
   21478:	fbb3 fcfe 	udiv	ip, r3, lr
   2147c:	fb0e 331c 	mls	r3, lr, ip, r3
   21480:	fb0c f807 	mul.w	r8, ip, r7
   21484:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   21488:	4598      	cmp	r8, r3
   2148a:	d961      	bls.n	21550 <__udivmoddi4+0x192>
   2148c:	18eb      	adds	r3, r5, r3
   2148e:	f10c 30ff 	add.w	r0, ip, #4294967295
   21492:	d204      	bcs.n	2149e <__udivmoddi4+0xe0>
   21494:	4598      	cmp	r8, r3
   21496:	d902      	bls.n	2149e <__udivmoddi4+0xe0>
   21498:	f1ac 0002 	sub.w	r0, ip, #2
   2149c:	442b      	add	r3, r5
   2149e:	eba3 0308 	sub.w	r3, r3, r8
   214a2:	b2a4      	uxth	r4, r4
   214a4:	fbb3 fcfe 	udiv	ip, r3, lr
   214a8:	fb0e 331c 	mls	r3, lr, ip, r3
   214ac:	fb0c f707 	mul.w	r7, ip, r7
   214b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   214b4:	42a7      	cmp	r7, r4
   214b6:	d94d      	bls.n	21554 <__udivmoddi4+0x196>
   214b8:	192c      	adds	r4, r5, r4
   214ba:	f10c 33ff 	add.w	r3, ip, #4294967295
   214be:	d204      	bcs.n	214ca <__udivmoddi4+0x10c>
   214c0:	42a7      	cmp	r7, r4
   214c2:	d902      	bls.n	214ca <__udivmoddi4+0x10c>
   214c4:	f1ac 0302 	sub.w	r3, ip, #2
   214c8:	442c      	add	r4, r5
   214ca:	1be4      	subs	r4, r4, r7
   214cc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   214d0:	e7c0      	b.n	21454 <__udivmoddi4+0x96>
   214d2:	f1c2 0320 	rsb	r3, r2, #32
   214d6:	4095      	lsls	r5, r2
   214d8:	4094      	lsls	r4, r2
   214da:	fa20 f103 	lsr.w	r1, r0, r3
   214de:	fa2e f303 	lsr.w	r3, lr, r3
   214e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   214e6:	4090      	lsls	r0, r2
   214e8:	b2af      	uxth	r7, r5
   214ea:	4303      	orrs	r3, r0
   214ec:	fbb1 fcfe 	udiv	ip, r1, lr
   214f0:	fb0e 101c 	mls	r0, lr, ip, r1
   214f4:	0c19      	lsrs	r1, r3, #16
   214f6:	fb0c f807 	mul.w	r8, ip, r7
   214fa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   214fe:	4588      	cmp	r8, r1
   21500:	d922      	bls.n	21548 <__udivmoddi4+0x18a>
   21502:	1869      	adds	r1, r5, r1
   21504:	f10c 30ff 	add.w	r0, ip, #4294967295
   21508:	d204      	bcs.n	21514 <__udivmoddi4+0x156>
   2150a:	4588      	cmp	r8, r1
   2150c:	d902      	bls.n	21514 <__udivmoddi4+0x156>
   2150e:	f1ac 0002 	sub.w	r0, ip, #2
   21512:	4429      	add	r1, r5
   21514:	eba1 0108 	sub.w	r1, r1, r8
   21518:	b29b      	uxth	r3, r3
   2151a:	fbb1 fcfe 	udiv	ip, r1, lr
   2151e:	fb0e 111c 	mls	r1, lr, ip, r1
   21522:	fb0c f707 	mul.w	r7, ip, r7
   21526:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2152a:	429f      	cmp	r7, r3
   2152c:	d90e      	bls.n	2154c <__udivmoddi4+0x18e>
   2152e:	18eb      	adds	r3, r5, r3
   21530:	f10c 31ff 	add.w	r1, ip, #4294967295
   21534:	d204      	bcs.n	21540 <__udivmoddi4+0x182>
   21536:	429f      	cmp	r7, r3
   21538:	d902      	bls.n	21540 <__udivmoddi4+0x182>
   2153a:	f1ac 0102 	sub.w	r1, ip, #2
   2153e:	442b      	add	r3, r5
   21540:	1bdb      	subs	r3, r3, r7
   21542:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   21546:	e793      	b.n	21470 <__udivmoddi4+0xb2>
   21548:	4660      	mov	r0, ip
   2154a:	e7e3      	b.n	21514 <__udivmoddi4+0x156>
   2154c:	4661      	mov	r1, ip
   2154e:	e7f7      	b.n	21540 <__udivmoddi4+0x182>
   21550:	4660      	mov	r0, ip
   21552:	e7a4      	b.n	2149e <__udivmoddi4+0xe0>
   21554:	4663      	mov	r3, ip
   21556:	e7b8      	b.n	214ca <__udivmoddi4+0x10c>
   21558:	4283      	cmp	r3, r0
   2155a:	d906      	bls.n	2156a <__udivmoddi4+0x1ac>
   2155c:	b916      	cbnz	r6, 21564 <__udivmoddi4+0x1a6>
   2155e:	2100      	movs	r1, #0
   21560:	4608      	mov	r0, r1
   21562:	e77c      	b.n	2145e <__udivmoddi4+0xa0>
   21564:	e9c6 e000 	strd	lr, r0, [r6]
   21568:	e7f9      	b.n	2155e <__udivmoddi4+0x1a0>
   2156a:	fab3 f783 	clz	r7, r3
   2156e:	b98f      	cbnz	r7, 21594 <__udivmoddi4+0x1d6>
   21570:	4283      	cmp	r3, r0
   21572:	d301      	bcc.n	21578 <__udivmoddi4+0x1ba>
   21574:	4572      	cmp	r2, lr
   21576:	d808      	bhi.n	2158a <__udivmoddi4+0x1cc>
   21578:	ebbe 0402 	subs.w	r4, lr, r2
   2157c:	eb60 0303 	sbc.w	r3, r0, r3
   21580:	2001      	movs	r0, #1
   21582:	469c      	mov	ip, r3
   21584:	b91e      	cbnz	r6, 2158e <__udivmoddi4+0x1d0>
   21586:	2100      	movs	r1, #0
   21588:	e769      	b.n	2145e <__udivmoddi4+0xa0>
   2158a:	4638      	mov	r0, r7
   2158c:	e7fa      	b.n	21584 <__udivmoddi4+0x1c6>
   2158e:	e9c6 4c00 	strd	r4, ip, [r6]
   21592:	e7f8      	b.n	21586 <__udivmoddi4+0x1c8>
   21594:	f1c7 0c20 	rsb	ip, r7, #32
   21598:	40bb      	lsls	r3, r7
   2159a:	fa0e f507 	lsl.w	r5, lr, r7
   2159e:	fa22 f40c 	lsr.w	r4, r2, ip
   215a2:	fa2e f10c 	lsr.w	r1, lr, ip
   215a6:	40ba      	lsls	r2, r7
   215a8:	431c      	orrs	r4, r3
   215aa:	fa20 f30c 	lsr.w	r3, r0, ip
   215ae:	40b8      	lsls	r0, r7
   215b0:	ea4f 4914 	mov.w	r9, r4, lsr #16
   215b4:	4301      	orrs	r1, r0
   215b6:	fa1f fe84 	uxth.w	lr, r4
   215ba:	fbb3 f8f9 	udiv	r8, r3, r9
   215be:	fb09 3018 	mls	r0, r9, r8, r3
   215c2:	0c0b      	lsrs	r3, r1, #16
   215c4:	fb08 fa0e 	mul.w	sl, r8, lr
   215c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   215cc:	459a      	cmp	sl, r3
   215ce:	d940      	bls.n	21652 <__udivmoddi4+0x294>
   215d0:	18e3      	adds	r3, r4, r3
   215d2:	f108 30ff 	add.w	r0, r8, #4294967295
   215d6:	d204      	bcs.n	215e2 <__udivmoddi4+0x224>
   215d8:	459a      	cmp	sl, r3
   215da:	d902      	bls.n	215e2 <__udivmoddi4+0x224>
   215dc:	f1a8 0002 	sub.w	r0, r8, #2
   215e0:	4423      	add	r3, r4
   215e2:	eba3 030a 	sub.w	r3, r3, sl
   215e6:	b289      	uxth	r1, r1
   215e8:	fbb3 f8f9 	udiv	r8, r3, r9
   215ec:	fb09 3318 	mls	r3, r9, r8, r3
   215f0:	fb08 fe0e 	mul.w	lr, r8, lr
   215f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   215f8:	458e      	cmp	lr, r1
   215fa:	d92c      	bls.n	21656 <__udivmoddi4+0x298>
   215fc:	1861      	adds	r1, r4, r1
   215fe:	f108 33ff 	add.w	r3, r8, #4294967295
   21602:	d204      	bcs.n	2160e <__udivmoddi4+0x250>
   21604:	458e      	cmp	lr, r1
   21606:	d902      	bls.n	2160e <__udivmoddi4+0x250>
   21608:	f1a8 0302 	sub.w	r3, r8, #2
   2160c:	4421      	add	r1, r4
   2160e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   21612:	eba1 010e 	sub.w	r1, r1, lr
   21616:	fba0 9802 	umull	r9, r8, r0, r2
   2161a:	4541      	cmp	r1, r8
   2161c:	46ce      	mov	lr, r9
   2161e:	4643      	mov	r3, r8
   21620:	d302      	bcc.n	21628 <__udivmoddi4+0x26a>
   21622:	d106      	bne.n	21632 <__udivmoddi4+0x274>
   21624:	454d      	cmp	r5, r9
   21626:	d204      	bcs.n	21632 <__udivmoddi4+0x274>
   21628:	3801      	subs	r0, #1
   2162a:	ebb9 0e02 	subs.w	lr, r9, r2
   2162e:	eb68 0304 	sbc.w	r3, r8, r4
   21632:	2e00      	cmp	r6, #0
   21634:	d0a7      	beq.n	21586 <__udivmoddi4+0x1c8>
   21636:	ebb5 020e 	subs.w	r2, r5, lr
   2163a:	eb61 0103 	sbc.w	r1, r1, r3
   2163e:	fa01 fc0c 	lsl.w	ip, r1, ip
   21642:	fa22 f307 	lsr.w	r3, r2, r7
   21646:	40f9      	lsrs	r1, r7
   21648:	ea4c 0303 	orr.w	r3, ip, r3
   2164c:	e9c6 3100 	strd	r3, r1, [r6]
   21650:	e799      	b.n	21586 <__udivmoddi4+0x1c8>
   21652:	4640      	mov	r0, r8
   21654:	e7c5      	b.n	215e2 <__udivmoddi4+0x224>
   21656:	4643      	mov	r3, r8
   21658:	e7d9      	b.n	2160e <__udivmoddi4+0x250>

0002165a <strcmp>:
   2165a:	f810 2b01 	ldrb.w	r2, [r0], #1
   2165e:	f811 3b01 	ldrb.w	r3, [r1], #1
   21662:	2a01      	cmp	r2, #1
   21664:	bf28      	it	cs
   21666:	429a      	cmpcs	r2, r3
   21668:	d0f7      	beq.n	2165a <strcmp>
   2166a:	1ad0      	subs	r0, r2, r3
   2166c:	4770      	bx	lr

0002166e <strlen>:
   2166e:	4603      	mov	r3, r0
   21670:	f813 2b01 	ldrb.w	r2, [r3], #1
   21674:	2a00      	cmp	r2, #0
   21676:	d1fb      	bne.n	21670 <strlen+0x2>
   21678:	1a18      	subs	r0, r3, r0
   2167a:	3801      	subs	r0, #1
   2167c:	4770      	bx	lr
	...

00021680 <read_adc>:

  
    // return 0;
}

void read_adc(void) {
   21680:	b5f0      	push	{r4, r5, r6, r7, lr}
   21682:	b093      	sub	sp, #76	; 0x4c
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   21684:	4872      	ldr	r0, [pc, #456]	; (21850 <read_adc+0x1d0>)
   21686:	f01b fe72 	bl	3d36e <z_device_ready>
   2168a:	b928      	cbnz	r0, 21698 <read_adc+0x18>
    int err;

    if (!device_is_ready(adc_dev)) {
        printk("adc_dev not ready\n");
   2168c:	4871      	ldr	r0, [pc, #452]	; (21854 <read_adc+0x1d4>)
                    printk("%s", output_string);
                    break;
            }
        }
        k_sleep(K_MSEC(1000)); // Sleep for 1 second
    }
   2168e:	b013      	add	sp, #76	; 0x4c
   21690:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        printk("adc_dev not ready\n");
   21694:	f017 bd91 	b.w	391ba <printk>
   21698:	4d6f      	ldr	r5, [pc, #444]	; (21858 <read_adc+0x1d8>)
    for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
   2169a:	2400      	movs	r4, #0
   2169c:	462e      	mov	r6, r5
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   2169e:	4b6c      	ldr	r3, [pc, #432]	; (21850 <read_adc+0x1d0>)
   216a0:	689f      	ldr	r7, [r3, #8]
   216a2:	486b      	ldr	r0, [pc, #428]	; (21850 <read_adc+0x1d0>)
   216a4:	4629      	mov	r1, r5
   216a6:	683b      	ldr	r3, [r7, #0]
   216a8:	4798      	blx	r3
        if (err != 0) {
   216aa:	4602      	mov	r2, r0
   216ac:	b150      	cbz	r0, 216c4 <read_adc+0x44>
            printk("ADC adc_channel_setup failed for channel %d with error %d.\n", ch_cfg[i].channel_id, err);
   216ae:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
   216b2:	7921      	ldrb	r1, [r4, #4]
   216b4:	4869      	ldr	r0, [pc, #420]	; (2185c <read_adc+0x1dc>)
   216b6:	f001 011f 	and.w	r1, r1, #31
    }
   216ba:	b013      	add	sp, #76	; 0x4c
   216bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            printk("ADC adc_channel_setup failed for channel %d with error %d.\n", ch_cfg[i].channel_id, err);
   216c0:	f017 bd7b 	b.w	391ba <printk>
    for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
   216c4:	3401      	adds	r4, #1
   216c6:	2c04      	cmp	r4, #4
   216c8:	f105 0508 	add.w	r5, r5, #8
   216cc:	d1e9      	bne.n	216a2 <read_adc+0x22>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   216ce:	4964      	ldr	r1, [pc, #400]	; (21860 <read_adc+0x1e0>)
   216d0:	687b      	ldr	r3, [r7, #4]
   216d2:	485f      	ldr	r0, [pc, #380]	; (21850 <read_adc+0x1d0>)
   216d4:	4798      	blx	r3
        if (err != 0) {
   216d6:	4604      	mov	r4, r0
   216d8:	b130      	cbz	r0, 216e8 <read_adc+0x68>
            printk("ADC reading failed with error %d.\n", err);
   216da:	4601      	mov	r1, r0
   216dc:	4861      	ldr	r0, [pc, #388]	; (21864 <read_adc+0x1e4>)
    }
   216de:	b013      	add	sp, #76	; 0x4c
   216e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            printk("ADC reading failed with error %d.\n", err);
   216e4:	f017 bd69 	b.w	391ba <printk>
   216e8:	4d5f      	ldr	r5, [pc, #380]	; (21868 <read_adc+0x1e8>)
            switch (ch_cfg[i].channel_id) {
   216ea:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
   216ee:	791b      	ldrb	r3, [r3, #4]
            int16_t adc_value = sample_buffer[i];
   216f0:	f935 0b02 	ldrsh.w	r0, [r5], #2
            switch (ch_cfg[i].channel_id) {
   216f4:	f003 031f 	and.w	r3, r3, #31
   216f8:	2b04      	cmp	r3, #4
   216fa:	f200 8090 	bhi.w	2181e <read_adc+0x19e>
   216fe:	e8df f003 	tbb	[pc, r3]
   21702:	2903      	.short	0x2903
   21704:	3d8e      	.short	0x3d8e
   21706:	63          	.byte	0x63
   21707:	00          	.byte	0x00
                    voltage = ((float)adc_value / ADC_MAX_VALUE) * ADC_REF_VOLTAGE;
   21708:	f7ff fb72 	bl	20df0 <__aeabi_i2f>
   2170c:	4957      	ldr	r1, [pc, #348]	; (2186c <read_adc+0x1ec>)
   2170e:	f7ff fc77 	bl	21000 <__aeabi_fdiv>
   21712:	f7fe fff9 	bl	20708 <__aeabi_f2d>
   21716:	a346      	add	r3, pc, #280	; (adr r3, 21830 <read_adc+0x1b0>)
   21718:	e9d3 2300 	ldrd	r2, r3, [r3]
   2171c:	f7ff f84c 	bl	207b8 <__aeabi_dmul>
   21720:	f7ff fa5c 	bl	20bdc <__aeabi_d2f>
                    snprintf(output_string, sizeof(output_string), "NO2 Sensor value: %.2f V\n", voltage);
   21724:	f7fe fff0 	bl	20708 <__aeabi_f2d>
   21728:	e9cd 0100 	strd	r0, r1, [sp]
   2172c:	4a50      	ldr	r2, [pc, #320]	; (21870 <read_adc+0x1f0>)
                    snprintf(output_string, sizeof(output_string), "Temperature: %.2f °C\n", real_value);
   2172e:	2140      	movs	r1, #64	; 0x40
   21730:	a802      	add	r0, sp, #8
   21732:	f016 fc93 	bl	3805c <sniprintf>
                    printk("%s", output_string);
   21736:	484f      	ldr	r0, [pc, #316]	; (21874 <read_adc+0x1f4>)
   21738:	a902      	add	r1, sp, #8
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
   2173a:	3401      	adds	r4, #1
                    printk("%s", output_string);
   2173c:	f017 fd3d 	bl	391ba <printk>
        for (int i = 0; i < ADC_CHANNEL_COUNT; i++) {
   21740:	2c04      	cmp	r4, #4
   21742:	d1d2      	bne.n	216ea <read_adc+0x6a>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   21744:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   21748:	2100      	movs	r1, #0
    }
   2174a:	b013      	add	sp, #76	; 0x4c
   2174c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21750:	f014 bd90 	b.w	36274 <z_impl_k_sleep>
                    voltage = ((float)adc_value / ADC_MAX_VALUE) * ADC_REF_VOLTAGE;
   21754:	f7ff fb4c 	bl	20df0 <__aeabi_i2f>
   21758:	4944      	ldr	r1, [pc, #272]	; (2186c <read_adc+0x1ec>)
   2175a:	f7ff fc51 	bl	21000 <__aeabi_fdiv>
   2175e:	f7fe ffd3 	bl	20708 <__aeabi_f2d>
   21762:	a333      	add	r3, pc, #204	; (adr r3, 21830 <read_adc+0x1b0>)
   21764:	e9d3 2300 	ldrd	r2, r3, [r3]
   21768:	f7ff f826 	bl	207b8 <__aeabi_dmul>
   2176c:	f7ff fa36 	bl	20bdc <__aeabi_d2f>
                    snprintf(output_string, sizeof(output_string), "Battery Voltage: %.2f V\n", voltage);
   21770:	f7fe ffca 	bl	20708 <__aeabi_f2d>
   21774:	4a40      	ldr	r2, [pc, #256]	; (21878 <read_adc+0x1f8>)
   21776:	e9cd 0100 	strd	r0, r1, [sp]
   2177a:	e7d8      	b.n	2172e <read_adc+0xae>
                    voltage = ((float)adc_value / ADC_MAX_VALUE) * ADC_REF_VOLTAGE;
   2177c:	f7ff fb38 	bl	20df0 <__aeabi_i2f>
   21780:	493a      	ldr	r1, [pc, #232]	; (2186c <read_adc+0x1ec>)
   21782:	f7ff fc3d 	bl	21000 <__aeabi_fdiv>
   21786:	f7fe ffbf 	bl	20708 <__aeabi_f2d>
   2178a:	a329      	add	r3, pc, #164	; (adr r3, 21830 <read_adc+0x1b0>)
   2178c:	e9d3 2300 	ldrd	r2, r3, [r3]
   21790:	f7ff f812 	bl	207b8 <__aeabi_dmul>
   21794:	f7ff fa22 	bl	20bdc <__aeabi_d2f>
                    real_value = ((voltage - 0.48) / (2.4 - 0.48)) * 100.0;
   21798:	f7fe ffb6 	bl	20708 <__aeabi_f2d>
   2179c:	a326      	add	r3, pc, #152	; (adr r3, 21838 <read_adc+0x1b8>)
   2179e:	e9d3 2300 	ldrd	r2, r3, [r3]
   217a2:	f7fe fe51 	bl	20448 <__aeabi_dsub>
   217a6:	a326      	add	r3, pc, #152	; (adr r3, 21840 <read_adc+0x1c0>)
   217a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   217ac:	f7ff f92e 	bl	20a0c <__aeabi_ddiv>
   217b0:	2200      	movs	r2, #0
   217b2:	4b32      	ldr	r3, [pc, #200]	; (2187c <read_adc+0x1fc>)
   217b4:	f7ff f800 	bl	207b8 <__aeabi_dmul>
   217b8:	f7ff fa10 	bl	20bdc <__aeabi_d2f>
                    snprintf(output_string, sizeof(output_string), "Humidity: %.2f %%\n", real_value);
   217bc:	f7fe ffa4 	bl	20708 <__aeabi_f2d>
   217c0:	4a2f      	ldr	r2, [pc, #188]	; (21880 <read_adc+0x200>)
   217c2:	e9cd 0100 	strd	r0, r1, [sp]
   217c6:	e7b2      	b.n	2172e <read_adc+0xae>
                    voltage = ((float)adc_value / ADC_MAX_VALUE) * ADC_REF_VOLTAGE;
   217c8:	f7ff fb12 	bl	20df0 <__aeabi_i2f>
   217cc:	4927      	ldr	r1, [pc, #156]	; (2186c <read_adc+0x1ec>)
   217ce:	f7ff fc17 	bl	21000 <__aeabi_fdiv>
   217d2:	f7fe ff99 	bl	20708 <__aeabi_f2d>
   217d6:	a316      	add	r3, pc, #88	; (adr r3, 21830 <read_adc+0x1b0>)
   217d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   217dc:	f7fe ffec 	bl	207b8 <__aeabi_dmul>
   217e0:	f7ff f9fc 	bl	20bdc <__aeabi_d2f>
                    real_value = ((voltage - 0.48) / (2.4 - 0.48)) * 165.0 - 40.0;
   217e4:	f7fe ff90 	bl	20708 <__aeabi_f2d>
   217e8:	a313      	add	r3, pc, #76	; (adr r3, 21838 <read_adc+0x1b8>)
   217ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   217ee:	f7fe fe2b 	bl	20448 <__aeabi_dsub>
   217f2:	a313      	add	r3, pc, #76	; (adr r3, 21840 <read_adc+0x1c0>)
   217f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   217f8:	f7ff f908 	bl	20a0c <__aeabi_ddiv>
   217fc:	a312      	add	r3, pc, #72	; (adr r3, 21848 <read_adc+0x1c8>)
   217fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   21802:	f7fe ffd9 	bl	207b8 <__aeabi_dmul>
   21806:	2200      	movs	r2, #0
   21808:	4b1e      	ldr	r3, [pc, #120]	; (21884 <read_adc+0x204>)
   2180a:	f7fe fe1d 	bl	20448 <__aeabi_dsub>
   2180e:	f7ff f9e5 	bl	20bdc <__aeabi_d2f>
                    snprintf(output_string, sizeof(output_string), "Temperature: %.2f °C\n", real_value);
   21812:	f7fe ff79 	bl	20708 <__aeabi_f2d>
   21816:	4a1c      	ldr	r2, [pc, #112]	; (21888 <read_adc+0x208>)
   21818:	e9cd 0100 	strd	r0, r1, [sp]
   2181c:	e787      	b.n	2172e <read_adc+0xae>
                    snprintf(output_string, sizeof(output_string), "Unused ADC channel %d\n", ch_cfg[i].channel_id);
   2181e:	2140      	movs	r1, #64	; 0x40
   21820:	4a1a      	ldr	r2, [pc, #104]	; (2188c <read_adc+0x20c>)
   21822:	a802      	add	r0, sp, #8
   21824:	f016 fc1a 	bl	3805c <sniprintf>
   21828:	e785      	b.n	21736 <read_adc+0xb6>
   2182a:	bf00      	nop
   2182c:	f3af 8000 	nop.w
   21830:	66666666 	.word	0x66666666
   21834:	400a6666 	.word	0x400a6666
   21838:	eb851eb8 	.word	0xeb851eb8
   2183c:	3fdeb851 	.word	0x3fdeb851
   21840:	eb851eb8 	.word	0xeb851eb8
   21844:	3ffeb851 	.word	0x3ffeb851
   21848:	00000000 	.word	0x00000000
   2184c:	4064a000 	.word	0x4064a000
   21850:	0003e1c4 	.word	0x0003e1c4
   21854:	0003efd8 	.word	0x0003efd8
   21858:	20014974 	.word	0x20014974
   2185c:	0003efeb 	.word	0x0003efeb
   21860:	200145a8 	.word	0x200145a8
   21864:	0003f027 	.word	0x0003f027
   21868:	20017fcc 	.word	0x20017fcc
   2186c:	457ff000 	.word	0x457ff000
   21870:	0003f04a 	.word	0x0003f04a
   21874:	00040987 	.word	0x00040987
   21878:	0003f064 	.word	0x0003f064
   2187c:	40590000 	.word	0x40590000
   21880:	0003f07d 	.word	0x0003f07d
   21884:	40440000 	.word	0x40440000
   21888:	0003f090 	.word	0x0003f090
   2188c:	0003f0a7 	.word	0x0003f0a7

00021890 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
   21890:	2903      	cmp	r1, #3
{
   21892:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21894:	4605      	mov	r5, r0
   21896:	4614      	mov	r4, r2
	switch (chan) {
   21898:	d872      	bhi.n	21980 <lis2dh_attr_set+0xf0>
	switch (attr) {
   2189a:	2a00      	cmp	r2, #0
   2189c:	d040      	beq.n	21920 <lis2dh_attr_set+0x90>
   2189e:	2a06      	cmp	r2, #6
   218a0:	d15d      	bne.n	2195e <lis2dh_attr_set+0xce>
 *
 * @return The converted value, in Gs.
 */
static inline int32_t sensor_ms2_to_g(const struct sensor_value *ms2)
{
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
   218a2:	685a      	ldr	r2, [r3, #4]
   218a4:	681c      	ldr	r4, [r3, #0]
   218a6:	4613      	mov	r3, r2
   218a8:	483d      	ldr	r0, [pc, #244]	; (219a0 <lis2dh_attr_set+0x110>)
   218aa:	17d1      	asrs	r1, r2, #31
   218ac:	fbc4 3100 	smlal	r3, r1, r4, r0

	if (micro_ms2 > 0) {
   218b0:	2b01      	cmp	r3, #1
   218b2:	f171 0200 	sbcs.w	r2, r1, #0
   218b6:	db25      	blt.n	21904 <lis2dh_attr_set+0x74>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
   218b8:	f500 106e 	add.w	r0, r0, #3899392	; 0x3b8000
   218bc:	f600 705d 	addw	r0, r0, #3933	; 0xf5d
   218c0:	1818      	adds	r0, r3, r0
   218c2:	f141 0100 	adc.w	r1, r1, #0
   218c6:	a334      	add	r3, pc, #208	; (adr r3, 21998 <lis2dh_attr_set+0x108>)
   218c8:	e9d3 2300 	ldrd	r2, r3, [r3]
	} else {
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
   218cc:	f7ff fc34 	bl	21138 <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
   218d0:	b280      	uxth	r0, r0
   218d2:	2802      	cmp	r0, #2
   218d4:	d01e      	beq.n	21914 <lis2dh_attr_set+0x84>
   218d6:	2804      	cmp	r0, #4
   218d8:	d01e      	beq.n	21918 <lis2dh_attr_set+0x88>
   218da:	2808      	cmp	r0, #8
   218dc:	d01e      	beq.n	2191c <lis2dh_attr_set+0x8c>
   218de:	2810      	cmp	r0, #16
   218e0:	d134      	bne.n	2194c <lis2dh_attr_set+0xbc>
   218e2:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
   218e4:	492f      	ldr	r1, [pc, #188]	; (219a4 <lis2dh_attr_set+0x114>)
	struct lis2dh_data *lis2dh = dev->data;
   218e6:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
   218e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
   218ec:	4628      	mov	r0, r5
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
   218ee:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
   218f0:	6852      	ldr	r2, [r2, #4]
   218f2:	2123      	movs	r1, #35	; 0x23
   218f4:	6914      	ldr	r4, [r2, #16]
   218f6:	2230      	movs	r2, #48	; 0x30
   218f8:	46a4      	mov	ip, r4
   218fa:	011b      	lsls	r3, r3, #4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
   218fc:	b002      	add	sp, #8
   218fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
   21902:	4760      	bx	ip
   21904:	4828      	ldr	r0, [pc, #160]	; (219a8 <lis2dh_attr_set+0x118>)
   21906:	1818      	adds	r0, r3, r0
   21908:	f161 0100 	sbc.w	r1, r1, #0
   2190c:	a322      	add	r3, pc, #136	; (adr r3, 21998 <lis2dh_attr_set+0x108>)
   2190e:	e9d3 2300 	ldrd	r2, r3, [r3]
   21912:	e7db      	b.n	218cc <lis2dh_attr_set+0x3c>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
   21914:	2300      	movs	r3, #0
   21916:	e7e5      	b.n	218e4 <lis2dh_attr_set+0x54>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
   21918:	2301      	movs	r3, #1
   2191a:	e7e3      	b.n	218e4 <lis2dh_attr_set+0x54>
   2191c:	2302      	movs	r3, #2
   2191e:	e7e1      	b.n	218e4 <lis2dh_attr_set+0x54>
		return lis2dh_acc_odr_set(dev, val->val1);
   21920:	881b      	ldrh	r3, [r3, #0]
	if (freq == 0U) {
   21922:	b19b      	cbz	r3, 2194c <lis2dh_attr_set+0xbc>
   21924:	4a21      	ldr	r2, [pc, #132]	; (219ac <lis2dh_attr_set+0x11c>)
		if (freq == lis2dh_odr_map[i]) {
   21926:	f832 1b02 	ldrh.w	r1, [r2], #2
   2192a:	428b      	cmp	r3, r1
   2192c:	d10b      	bne.n	21946 <lis2dh_attr_set+0xb6>
	struct lis2dh_data *data = dev->data;
   2192e:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
   21930:	2120      	movs	r1, #32
   21932:	6873      	ldr	r3, [r6, #4]
   21934:	4628      	mov	r0, r5
   21936:	689b      	ldr	r3, [r3, #8]
   21938:	f10d 0207 	add.w	r2, sp, #7
   2193c:	4798      	blx	r3
	if (status < 0) {
   2193e:	2800      	cmp	r0, #0
   21940:	da07      	bge.n	21952 <lis2dh_attr_set+0xc2>
}
   21942:	b002      	add	sp, #8
   21944:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
   21946:	3401      	adds	r4, #1
   21948:	2c0b      	cmp	r4, #11
   2194a:	d1ec      	bne.n	21926 <lis2dh_attr_set+0x96>
	return -EINVAL;
   2194c:	f06f 0015 	mvn.w	r0, #21
   21950:	e7f7      	b.n	21942 <lis2dh_attr_set+0xb2>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
   21952:	f89d 2007 	ldrb.w	r2, [sp, #7]
   21956:	0713      	lsls	r3, r2, #28
   21958:	d404      	bmi.n	21964 <lis2dh_attr_set+0xd4>
   2195a:	2c08      	cmp	r4, #8
   2195c:	d105      	bne.n	2196a <lis2dh_attr_set+0xda>
		return -EINVAL;
   2195e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21962:	e7ee      	b.n	21942 <lis2dh_attr_set+0xb2>
	if (((value & LIS2DH_LP_EN_BIT_MASK) == LIS2DH_LP_EN_BIT_MASK) &&
   21964:	2c0a      	cmp	r4, #10
		odr--;
   21966:	bf08      	it	eq
   21968:	2409      	moveq	r4, #9
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   2196a:	6873      	ldr	r3, [r6, #4]
				      (value & ~LIS2DH_ODR_MASK) |
   2196c:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   21970:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
   21974:	2120      	movs	r1, #32
   21976:	4628      	mov	r0, r5
   21978:	68db      	ldr	r3, [r3, #12]
   2197a:	b2d2      	uxtb	r2, r2
   2197c:	4798      	blx	r3
   2197e:	e7e0      	b.n	21942 <lis2dh_attr_set+0xb2>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   21980:	4b0b      	ldr	r3, [pc, #44]	; (219b0 <lis2dh_attr_set+0x120>)
   21982:	490c      	ldr	r1, [pc, #48]	; (219b4 <lis2dh_attr_set+0x124>)
		LOG_WRN("attr_set() not supported on this channel.");
   21984:	480c      	ldr	r0, [pc, #48]	; (219b8 <lis2dh_attr_set+0x128>)
   21986:	1ac9      	subs	r1, r1, r3
   21988:	08c9      	lsrs	r1, r1, #3
   2198a:	0189      	lsls	r1, r1, #6
   2198c:	f041 0102 	orr.w	r1, r1, #2
   21990:	f017 feb3 	bl	396fa <log_0>
		return -ENOTSUP;
   21994:	e7e3      	b.n	2195e <lis2dh_attr_set+0xce>
   21996:	bf00      	nop
   21998:	0095a33a 	.word	0x0095a33a
   2199c:	00000000 	.word	0x00000000
   219a0:	000f4240 	.word	0x000f4240
   219a4:	2001462c 	.word	0x2001462c
   219a8:	ffb52e63 	.word	0xffb52e63
   219ac:	0003ee14 	.word	0x0003ee14
   219b0:	0003e468 	.word	0x0003e468
   219b4:	0003e4e8 	.word	0x0003e4e8
   219b8:	00040adc 	.word	0x00040adc
   219bc:	00000000 	.word	0x00000000

000219c0 <_dtoa_r>:
   219c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219c4:	4614      	mov	r4, r2
   219c6:	b097      	sub	sp, #92	; 0x5c
   219c8:	461d      	mov	r5, r3
   219ca:	6a47      	ldr	r7, [r0, #36]	; 0x24
   219cc:	4683      	mov	fp, r0
   219ce:	9e23      	ldr	r6, [sp, #140]	; 0x8c
   219d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   219d4:	b97f      	cbnz	r7, 219f6 <_dtoa_r+0x36>
   219d6:	2010      	movs	r0, #16
   219d8:	f015 fdec 	bl	375b4 <malloc>
   219dc:	4602      	mov	r2, r0
   219de:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   219e2:	b920      	cbnz	r0, 219ee <_dtoa_r+0x2e>
   219e4:	4ba2      	ldr	r3, [pc, #648]	; (21c70 <_dtoa_r+0x2b0>)
   219e6:	21ea      	movs	r1, #234	; 0xea
   219e8:	48a2      	ldr	r0, [pc, #648]	; (21c74 <_dtoa_r+0x2b4>)
   219ea:	f015 fdb3 	bl	37554 <__assert_func>
   219ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
   219f2:	6007      	str	r7, [r0, #0]
   219f4:	60c7      	str	r7, [r0, #12]
   219f6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   219fa:	6819      	ldr	r1, [r3, #0]
   219fc:	b159      	cbz	r1, 21a16 <_dtoa_r+0x56>
   219fe:	685a      	ldr	r2, [r3, #4]
   21a00:	2301      	movs	r3, #1
   21a02:	4658      	mov	r0, fp
   21a04:	4093      	lsls	r3, r2
   21a06:	604a      	str	r2, [r1, #4]
   21a08:	608b      	str	r3, [r1, #8]
   21a0a:	f016 ff3b 	bl	38884 <_Bfree>
   21a0e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   21a12:	2200      	movs	r2, #0
   21a14:	601a      	str	r2, [r3, #0]
   21a16:	1e2b      	subs	r3, r5, #0
   21a18:	bfb7      	itett	lt
   21a1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   21a1e:	2300      	movge	r3, #0
   21a20:	2201      	movlt	r2, #1
   21a22:	9305      	strlt	r3, [sp, #20]
   21a24:	bfa8      	it	ge
   21a26:	6033      	strge	r3, [r6, #0]
   21a28:	9f05      	ldr	r7, [sp, #20]
   21a2a:	4b93      	ldr	r3, [pc, #588]	; (21c78 <_dtoa_r+0x2b8>)
   21a2c:	bfb8      	it	lt
   21a2e:	6032      	strlt	r2, [r6, #0]
   21a30:	43bb      	bics	r3, r7
   21a32:	d119      	bne.n	21a68 <_dtoa_r+0xa8>
   21a34:	f242 730f 	movw	r3, #9999	; 0x270f
   21a38:	9a22      	ldr	r2, [sp, #136]	; 0x88
   21a3a:	6013      	str	r3, [r2, #0]
   21a3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   21a40:	4323      	orrs	r3, r4
   21a42:	f000 85e0 	beq.w	22606 <_dtoa_r+0xc46>
   21a46:	9b24      	ldr	r3, [sp, #144]	; 0x90
   21a48:	b953      	cbnz	r3, 21a60 <_dtoa_r+0xa0>
   21a4a:	4b8c      	ldr	r3, [pc, #560]	; (21c7c <_dtoa_r+0x2bc>)
   21a4c:	e021      	b.n	21a92 <_dtoa_r+0xd2>
   21a4e:	4b8c      	ldr	r3, [pc, #560]	; (21c80 <_dtoa_r+0x2c0>)
   21a50:	9308      	str	r3, [sp, #32]
   21a52:	3308      	adds	r3, #8
   21a54:	9a24      	ldr	r2, [sp, #144]	; 0x90
   21a56:	6013      	str	r3, [r2, #0]
   21a58:	9808      	ldr	r0, [sp, #32]
   21a5a:	b017      	add	sp, #92	; 0x5c
   21a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a60:	4b86      	ldr	r3, [pc, #536]	; (21c7c <_dtoa_r+0x2bc>)
   21a62:	9308      	str	r3, [sp, #32]
   21a64:	3303      	adds	r3, #3
   21a66:	e7f5      	b.n	21a54 <_dtoa_r+0x94>
   21a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21a6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   21a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   21a74:	2200      	movs	r2, #0
   21a76:	2300      	movs	r3, #0
   21a78:	f7ff fc1e 	bl	212b8 <__aeabi_dcmpeq>
   21a7c:	4680      	mov	r8, r0
   21a7e:	b150      	cbz	r0, 21a96 <_dtoa_r+0xd6>
   21a80:	2301      	movs	r3, #1
   21a82:	9a22      	ldr	r2, [sp, #136]	; 0x88
   21a84:	6013      	str	r3, [r2, #0]
   21a86:	9b24      	ldr	r3, [sp, #144]	; 0x90
   21a88:	b113      	cbz	r3, 21a90 <_dtoa_r+0xd0>
   21a8a:	4b7e      	ldr	r3, [pc, #504]	; (21c84 <_dtoa_r+0x2c4>)
   21a8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   21a8e:	6013      	str	r3, [r2, #0]
   21a90:	4b7d      	ldr	r3, [pc, #500]	; (21c88 <_dtoa_r+0x2c8>)
   21a92:	9308      	str	r3, [sp, #32]
   21a94:	e7e0      	b.n	21a58 <_dtoa_r+0x98>
   21a96:	ab14      	add	r3, sp, #80	; 0x50
   21a98:	f3c7 560a 	ubfx	r6, r7, #20, #11
   21a9c:	4658      	mov	r0, fp
   21a9e:	9301      	str	r3, [sp, #4]
   21aa0:	ab15      	add	r3, sp, #84	; 0x54
   21aa2:	9300      	str	r3, [sp, #0]
   21aa4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   21aa8:	f017 f972 	bl	38d90 <__d2b>
   21aac:	9003      	str	r0, [sp, #12]
   21aae:	2e00      	cmp	r6, #0
   21ab0:	d078      	beq.n	21ba4 <_dtoa_r+0x1e4>
   21ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21ab4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   21ab8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   21abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
   21ac0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
   21ac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   21ac8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   21acc:	4619      	mov	r1, r3
   21ace:	2200      	movs	r2, #0
   21ad0:	4b6e      	ldr	r3, [pc, #440]	; (21c8c <_dtoa_r+0x2cc>)
   21ad2:	f7fe fcb9 	bl	20448 <__aeabi_dsub>
   21ad6:	a360      	add	r3, pc, #384	; (adr r3, 21c58 <_dtoa_r+0x298>)
   21ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
   21adc:	f7fe fe6c 	bl	207b8 <__aeabi_dmul>
   21ae0:	a35f      	add	r3, pc, #380	; (adr r3, 21c60 <_dtoa_r+0x2a0>)
   21ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
   21ae6:	f7fe fcb1 	bl	2044c <__adddf3>
   21aea:	4604      	mov	r4, r0
   21aec:	460d      	mov	r5, r1
   21aee:	4630      	mov	r0, r6
   21af0:	f7fe fdf8 	bl	206e4 <__aeabi_i2d>
   21af4:	a35c      	add	r3, pc, #368	; (adr r3, 21c68 <_dtoa_r+0x2a8>)
   21af6:	e9d3 2300 	ldrd	r2, r3, [r3]
   21afa:	f7fe fe5d 	bl	207b8 <__aeabi_dmul>
   21afe:	4602      	mov	r2, r0
   21b00:	460b      	mov	r3, r1
   21b02:	4620      	mov	r0, r4
   21b04:	4629      	mov	r1, r5
   21b06:	f7fe fca1 	bl	2044c <__adddf3>
   21b0a:	4604      	mov	r4, r0
   21b0c:	460d      	mov	r5, r1
   21b0e:	f7ff fc1b 	bl	21348 <__aeabi_d2iz>
   21b12:	2200      	movs	r2, #0
   21b14:	4607      	mov	r7, r0
   21b16:	2300      	movs	r3, #0
   21b18:	4620      	mov	r0, r4
   21b1a:	4629      	mov	r1, r5
   21b1c:	f7ff fbd6 	bl	212cc <__aeabi_dcmplt>
   21b20:	b140      	cbz	r0, 21b34 <_dtoa_r+0x174>
   21b22:	4638      	mov	r0, r7
   21b24:	f7fe fdde 	bl	206e4 <__aeabi_i2d>
   21b28:	4622      	mov	r2, r4
   21b2a:	462b      	mov	r3, r5
   21b2c:	f7ff fbc4 	bl	212b8 <__aeabi_dcmpeq>
   21b30:	b900      	cbnz	r0, 21b34 <_dtoa_r+0x174>
   21b32:	3f01      	subs	r7, #1
   21b34:	2f16      	cmp	r7, #22
   21b36:	d854      	bhi.n	21be2 <_dtoa_r+0x222>
   21b38:	4b55      	ldr	r3, [pc, #340]	; (21c90 <_dtoa_r+0x2d0>)
   21b3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   21b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   21b42:	e9d3 2300 	ldrd	r2, r3, [r3]
   21b46:	f7ff fbc1 	bl	212cc <__aeabi_dcmplt>
   21b4a:	2800      	cmp	r0, #0
   21b4c:	d04b      	beq.n	21be6 <_dtoa_r+0x226>
   21b4e:	3f01      	subs	r7, #1
   21b50:	2300      	movs	r3, #0
   21b52:	9312      	str	r3, [sp, #72]	; 0x48
   21b54:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21b56:	1b9b      	subs	r3, r3, r6
   21b58:	1e5a      	subs	r2, r3, #1
   21b5a:	bf4c      	ite	mi
   21b5c:	f1c3 0301 	rsbmi	r3, r3, #1
   21b60:	2300      	movpl	r3, #0
   21b62:	920a      	str	r2, [sp, #40]	; 0x28
   21b64:	bf45      	ittet	mi
   21b66:	9306      	strmi	r3, [sp, #24]
   21b68:	2300      	movmi	r3, #0
   21b6a:	9306      	strpl	r3, [sp, #24]
   21b6c:	930a      	strmi	r3, [sp, #40]	; 0x28
   21b6e:	2f00      	cmp	r7, #0
   21b70:	db3b      	blt.n	21bea <_dtoa_r+0x22a>
   21b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21b74:	970f      	str	r7, [sp, #60]	; 0x3c
   21b76:	443b      	add	r3, r7
   21b78:	930a      	str	r3, [sp, #40]	; 0x28
   21b7a:	2300      	movs	r3, #0
   21b7c:	930b      	str	r3, [sp, #44]	; 0x2c
   21b7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   21b80:	2b09      	cmp	r3, #9
   21b82:	f200 8089 	bhi.w	21c98 <_dtoa_r+0x2d8>
   21b86:	2b05      	cmp	r3, #5
   21b88:	bfc5      	ittet	gt
   21b8a:	3b04      	subgt	r3, #4
   21b8c:	2400      	movgt	r4, #0
   21b8e:	2401      	movle	r4, #1
   21b90:	9320      	strgt	r3, [sp, #128]	; 0x80
   21b92:	9b20      	ldr	r3, [sp, #128]	; 0x80
   21b94:	3b02      	subs	r3, #2
   21b96:	2b03      	cmp	r3, #3
   21b98:	f200 8089 	bhi.w	21cae <_dtoa_r+0x2ee>
   21b9c:	e8df f003 	tbb	[pc, r3]
   21ba0:	59383a2d 	.word	0x59383a2d
   21ba4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
   21ba8:	441e      	add	r6, r3
   21baa:	f206 4332 	addw	r3, r6, #1074	; 0x432
   21bae:	2b20      	cmp	r3, #32
   21bb0:	bfc9      	itett	gt
   21bb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   21bb6:	f1c3 0320 	rsble	r3, r3, #32
   21bba:	409f      	lslgt	r7, r3
   21bbc:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
   21bc0:	bfd8      	it	le
   21bc2:	fa04 f003 	lslle.w	r0, r4, r3
   21bc6:	f106 36ff 	add.w	r6, r6, #4294967295
   21bca:	bfc4      	itt	gt
   21bcc:	fa24 f303 	lsrgt.w	r3, r4, r3
   21bd0:	ea47 0003 	orrgt.w	r0, r7, r3
   21bd4:	f7fe fd76 	bl	206c4 <__aeabi_ui2d>
   21bd8:	2201      	movs	r2, #1
   21bda:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
   21bde:	9213      	str	r2, [sp, #76]	; 0x4c
   21be0:	e774      	b.n	21acc <_dtoa_r+0x10c>
   21be2:	2301      	movs	r3, #1
   21be4:	e7b5      	b.n	21b52 <_dtoa_r+0x192>
   21be6:	9012      	str	r0, [sp, #72]	; 0x48
   21be8:	e7b4      	b.n	21b54 <_dtoa_r+0x194>
   21bea:	9b06      	ldr	r3, [sp, #24]
   21bec:	1bdb      	subs	r3, r3, r7
   21bee:	9306      	str	r3, [sp, #24]
   21bf0:	427b      	negs	r3, r7
   21bf2:	930b      	str	r3, [sp, #44]	; 0x2c
   21bf4:	2300      	movs	r3, #0
   21bf6:	930f      	str	r3, [sp, #60]	; 0x3c
   21bf8:	e7c1      	b.n	21b7e <_dtoa_r+0x1be>
   21bfa:	2300      	movs	r3, #0
   21bfc:	930e      	str	r3, [sp, #56]	; 0x38
   21bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
   21c00:	2b00      	cmp	r3, #0
   21c02:	dc57      	bgt.n	21cb4 <_dtoa_r+0x2f4>
   21c04:	2301      	movs	r3, #1
   21c06:	4699      	mov	r9, r3
   21c08:	461a      	mov	r2, r3
   21c0a:	9309      	str	r3, [sp, #36]	; 0x24
   21c0c:	9221      	str	r2, [sp, #132]	; 0x84
   21c0e:	e00c      	b.n	21c2a <_dtoa_r+0x26a>
   21c10:	2301      	movs	r3, #1
   21c12:	e7f3      	b.n	21bfc <_dtoa_r+0x23c>
   21c14:	2300      	movs	r3, #0
   21c16:	930e      	str	r3, [sp, #56]	; 0x38
   21c18:	9b21      	ldr	r3, [sp, #132]	; 0x84
   21c1a:	18fb      	adds	r3, r7, r3
   21c1c:	f103 0901 	add.w	r9, r3, #1
   21c20:	9309      	str	r3, [sp, #36]	; 0x24
   21c22:	464b      	mov	r3, r9
   21c24:	2b01      	cmp	r3, #1
   21c26:	bfb8      	it	lt
   21c28:	2301      	movlt	r3, #1
   21c2a:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
   21c2e:	2100      	movs	r1, #0
   21c30:	2204      	movs	r2, #4
   21c32:	f102 0514 	add.w	r5, r2, #20
   21c36:	429d      	cmp	r5, r3
   21c38:	d940      	bls.n	21cbc <_dtoa_r+0x2fc>
   21c3a:	6041      	str	r1, [r0, #4]
   21c3c:	4658      	mov	r0, fp
   21c3e:	f016 fde1 	bl	38804 <_Balloc>
   21c42:	9008      	str	r0, [sp, #32]
   21c44:	2800      	cmp	r0, #0
   21c46:	d13c      	bne.n	21cc2 <_dtoa_r+0x302>
   21c48:	4b12      	ldr	r3, [pc, #72]	; (21c94 <_dtoa_r+0x2d4>)
   21c4a:	4602      	mov	r2, r0
   21c4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   21c50:	e6ca      	b.n	219e8 <_dtoa_r+0x28>
   21c52:	2301      	movs	r3, #1
   21c54:	e7df      	b.n	21c16 <_dtoa_r+0x256>
   21c56:	bf00      	nop
   21c58:	636f4361 	.word	0x636f4361
   21c5c:	3fd287a7 	.word	0x3fd287a7
   21c60:	8b60c8b3 	.word	0x8b60c8b3
   21c64:	3fc68a28 	.word	0x3fc68a28
   21c68:	509f79fb 	.word	0x509f79fb
   21c6c:	3fd34413 	.word	0x3fd34413
   21c70:	00043322 	.word	0x00043322
   21c74:	00043339 	.word	0x00043339
   21c78:	7ff00000 	.word	0x7ff00000
   21c7c:	0004331e 	.word	0x0004331e
   21c80:	00043315 	.word	0x00043315
   21c84:	000422af 	.word	0x000422af
   21c88:	000422ae 	.word	0x000422ae
   21c8c:	3ff80000 	.word	0x3ff80000
   21c90:	0003e690 	.word	0x0003e690
   21c94:	000433ad 	.word	0x000433ad
   21c98:	2401      	movs	r4, #1
   21c9a:	2300      	movs	r3, #0
   21c9c:	940e      	str	r4, [sp, #56]	; 0x38
   21c9e:	9320      	str	r3, [sp, #128]	; 0x80
   21ca0:	f04f 33ff 	mov.w	r3, #4294967295
   21ca4:	2200      	movs	r2, #0
   21ca6:	4699      	mov	r9, r3
   21ca8:	9309      	str	r3, [sp, #36]	; 0x24
   21caa:	2312      	movs	r3, #18
   21cac:	e7ae      	b.n	21c0c <_dtoa_r+0x24c>
   21cae:	2301      	movs	r3, #1
   21cb0:	930e      	str	r3, [sp, #56]	; 0x38
   21cb2:	e7f5      	b.n	21ca0 <_dtoa_r+0x2e0>
   21cb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   21cb6:	4699      	mov	r9, r3
   21cb8:	9309      	str	r3, [sp, #36]	; 0x24
   21cba:	e7b6      	b.n	21c2a <_dtoa_r+0x26a>
   21cbc:	3101      	adds	r1, #1
   21cbe:	0052      	lsls	r2, r2, #1
   21cc0:	e7b7      	b.n	21c32 <_dtoa_r+0x272>
   21cc2:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   21cc6:	f1b9 0f0e 	cmp.w	r9, #14
   21cca:	9a08      	ldr	r2, [sp, #32]
   21ccc:	601a      	str	r2, [r3, #0]
   21cce:	d86f      	bhi.n	21db0 <_dtoa_r+0x3f0>
   21cd0:	2c00      	cmp	r4, #0
   21cd2:	d06d      	beq.n	21db0 <_dtoa_r+0x3f0>
   21cd4:	2f00      	cmp	r7, #0
   21cd6:	dd36      	ble.n	21d46 <_dtoa_r+0x386>
   21cd8:	f007 020f 	and.w	r2, r7, #15
   21cdc:	4ba0      	ldr	r3, [pc, #640]	; (21f60 <_dtoa_r+0x5a0>)
   21cde:	05f8      	lsls	r0, r7, #23
   21ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21ce4:	e9d3 3400 	ldrd	r3, r4, [r3]
   21ce8:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   21cec:	ea4f 1427 	mov.w	r4, r7, asr #4
   21cf0:	d517      	bpl.n	21d22 <_dtoa_r+0x362>
   21cf2:	4b9c      	ldr	r3, [pc, #624]	; (21f64 <_dtoa_r+0x5a4>)
   21cf4:	f004 040f 	and.w	r4, r4, #15
   21cf8:	f04f 0803 	mov.w	r8, #3
   21cfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   21d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   21d04:	f7fe fe82 	bl	20a0c <__aeabi_ddiv>
   21d08:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21d0c:	4d95      	ldr	r5, [pc, #596]	; (21f64 <_dtoa_r+0x5a4>)
   21d0e:	b95c      	cbnz	r4, 21d28 <_dtoa_r+0x368>
   21d10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21d14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21d18:	f7fe fe78 	bl	20a0c <__aeabi_ddiv>
   21d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21d20:	e02b      	b.n	21d7a <_dtoa_r+0x3ba>
   21d22:	f04f 0802 	mov.w	r8, #2
   21d26:	e7f1      	b.n	21d0c <_dtoa_r+0x34c>
   21d28:	07e1      	lsls	r1, r4, #31
   21d2a:	d509      	bpl.n	21d40 <_dtoa_r+0x380>
   21d2c:	f108 0801 	add.w	r8, r8, #1
   21d30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21d34:	e9d5 2300 	ldrd	r2, r3, [r5]
   21d38:	f7fe fd3e 	bl	207b8 <__aeabi_dmul>
   21d3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   21d40:	1064      	asrs	r4, r4, #1
   21d42:	3508      	adds	r5, #8
   21d44:	e7e3      	b.n	21d0e <_dtoa_r+0x34e>
   21d46:	f000 8107 	beq.w	21f58 <_dtoa_r+0x598>
   21d4a:	427c      	negs	r4, r7
   21d4c:	4b84      	ldr	r3, [pc, #528]	; (21f60 <_dtoa_r+0x5a0>)
   21d4e:	4d85      	ldr	r5, [pc, #532]	; (21f64 <_dtoa_r+0x5a4>)
   21d50:	f04f 0802 	mov.w	r8, #2
   21d54:	f004 020f 	and.w	r2, r4, #15
   21d58:	1124      	asrs	r4, r4, #4
   21d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   21d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   21d66:	f7fe fd27 	bl	207b8 <__aeabi_dmul>
   21d6a:	2300      	movs	r3, #0
   21d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21d70:	2c00      	cmp	r4, #0
   21d72:	f040 80e5 	bne.w	21f40 <_dtoa_r+0x580>
   21d76:	2b00      	cmp	r3, #0
   21d78:	d1d0      	bne.n	21d1c <_dtoa_r+0x35c>
   21d7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21d7c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   21d80:	2b00      	cmp	r3, #0
   21d82:	f000 814c 	beq.w	2201e <_dtoa_r+0x65e>
   21d86:	2200      	movs	r2, #0
   21d88:	4b77      	ldr	r3, [pc, #476]	; (21f68 <_dtoa_r+0x5a8>)
   21d8a:	4620      	mov	r0, r4
   21d8c:	4629      	mov	r1, r5
   21d8e:	f7ff fa9d 	bl	212cc <__aeabi_dcmplt>
   21d92:	2800      	cmp	r0, #0
   21d94:	f000 8143 	beq.w	2201e <_dtoa_r+0x65e>
   21d98:	f1b9 0f00 	cmp.w	r9, #0
   21d9c:	f000 813f 	beq.w	2201e <_dtoa_r+0x65e>
   21da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21da2:	2b00      	cmp	r3, #0
   21da4:	f300 80e4 	bgt.w	21f70 <_dtoa_r+0x5b0>
   21da8:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   21dac:	e9cd 3404 	strd	r3, r4, [sp, #16]
   21db0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21db2:	2b00      	cmp	r3, #0
   21db4:	db02      	blt.n	21dbc <_dtoa_r+0x3fc>
   21db6:	2f0e      	cmp	r7, #14
   21db8:	f340 8242 	ble.w	22240 <_dtoa_r+0x880>
   21dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21dbe:	2a00      	cmp	r2, #0
   21dc0:	f040 8267 	bne.w	22292 <_dtoa_r+0x8d2>
   21dc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   21dc6:	2500      	movs	r5, #0
   21dc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21dcc:	f1b8 0f00 	cmp.w	r8, #0
   21dd0:	d00d      	beq.n	21dee <_dtoa_r+0x42e>
   21dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21dd4:	2b00      	cmp	r3, #0
   21dd6:	dd0a      	ble.n	21dee <_dtoa_r+0x42e>
   21dd8:	4543      	cmp	r3, r8
   21dda:	9a06      	ldr	r2, [sp, #24]
   21ddc:	bfa8      	it	ge
   21dde:	4643      	movge	r3, r8
   21de0:	1ad2      	subs	r2, r2, r3
   21de2:	eba8 0803 	sub.w	r8, r8, r3
   21de6:	9206      	str	r2, [sp, #24]
   21de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21dea:	1ad3      	subs	r3, r2, r3
   21dec:	930a      	str	r3, [sp, #40]	; 0x28
   21dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21df0:	b30b      	cbz	r3, 21e36 <_dtoa_r+0x476>
   21df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21df4:	2b00      	cmp	r3, #0
   21df6:	f000 82a6 	beq.w	22346 <_dtoa_r+0x986>
   21dfa:	2c00      	cmp	r4, #0
   21dfc:	f000 82a1 	beq.w	22342 <_dtoa_r+0x982>
   21e00:	4629      	mov	r1, r5
   21e02:	4622      	mov	r2, r4
   21e04:	4658      	mov	r0, fp
   21e06:	f016 fe67 	bl	38ad8 <__pow5mult>
   21e0a:	9a03      	ldr	r2, [sp, #12]
   21e0c:	4601      	mov	r1, r0
   21e0e:	4605      	mov	r5, r0
   21e10:	4658      	mov	r0, fp
   21e12:	f016 fdb7 	bl	38984 <__multiply>
   21e16:	9903      	ldr	r1, [sp, #12]
   21e18:	4606      	mov	r6, r0
   21e1a:	4658      	mov	r0, fp
   21e1c:	f016 fd32 	bl	38884 <_Bfree>
   21e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21e22:	1b1b      	subs	r3, r3, r4
   21e24:	930b      	str	r3, [sp, #44]	; 0x2c
   21e26:	f000 8291 	beq.w	2234c <_dtoa_r+0x98c>
   21e2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21e2c:	4631      	mov	r1, r6
   21e2e:	4658      	mov	r0, fp
   21e30:	f016 fe52 	bl	38ad8 <__pow5mult>
   21e34:	9003      	str	r0, [sp, #12]
   21e36:	2101      	movs	r1, #1
   21e38:	4658      	mov	r0, fp
   21e3a:	f016 fd8d 	bl	38958 <__i2b>
   21e3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21e40:	4604      	mov	r4, r0
   21e42:	2b00      	cmp	r3, #0
   21e44:	f000 8284 	beq.w	22350 <_dtoa_r+0x990>
   21e48:	461a      	mov	r2, r3
   21e4a:	4601      	mov	r1, r0
   21e4c:	4658      	mov	r0, fp
   21e4e:	f016 fe43 	bl	38ad8 <__pow5mult>
   21e52:	9b20      	ldr	r3, [sp, #128]	; 0x80
   21e54:	4604      	mov	r4, r0
   21e56:	2b01      	cmp	r3, #1
   21e58:	dc03      	bgt.n	21e62 <_dtoa_r+0x4a2>
   21e5a:	9b04      	ldr	r3, [sp, #16]
   21e5c:	2b00      	cmp	r3, #0
   21e5e:	f000 827c 	beq.w	2235a <_dtoa_r+0x99a>
   21e62:	2600      	movs	r6, #0
   21e64:	6923      	ldr	r3, [r4, #16]
   21e66:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   21e6a:	6918      	ldr	r0, [r3, #16]
   21e6c:	f01b ff4b 	bl	3dd06 <__hi0bits>
   21e70:	f1c0 0020 	rsb	r0, r0, #32
   21e74:	960f      	str	r6, [sp, #60]	; 0x3c
   21e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e78:	4418      	add	r0, r3
   21e7a:	f010 001f 	ands.w	r0, r0, #31
   21e7e:	f000 8291 	beq.w	223a4 <_dtoa_r+0x9e4>
   21e82:	f1c0 0320 	rsb	r3, r0, #32
   21e86:	2b04      	cmp	r3, #4
   21e88:	f340 8281 	ble.w	2238e <_dtoa_r+0x9ce>
   21e8c:	f1c0 001c 	rsb	r0, r0, #28
   21e90:	9b06      	ldr	r3, [sp, #24]
   21e92:	4403      	add	r3, r0
   21e94:	4480      	add	r8, r0
   21e96:	9306      	str	r3, [sp, #24]
   21e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e9a:	4403      	add	r3, r0
   21e9c:	930a      	str	r3, [sp, #40]	; 0x28
   21e9e:	9b06      	ldr	r3, [sp, #24]
   21ea0:	2b00      	cmp	r3, #0
   21ea2:	dd05      	ble.n	21eb0 <_dtoa_r+0x4f0>
   21ea4:	461a      	mov	r2, r3
   21ea6:	9903      	ldr	r1, [sp, #12]
   21ea8:	4658      	mov	r0, fp
   21eaa:	f016 fe6f 	bl	38b8c <__lshift>
   21eae:	9003      	str	r0, [sp, #12]
   21eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21eb2:	2b00      	cmp	r3, #0
   21eb4:	dd05      	ble.n	21ec2 <_dtoa_r+0x502>
   21eb6:	4621      	mov	r1, r4
   21eb8:	461a      	mov	r2, r3
   21eba:	4658      	mov	r0, fp
   21ebc:	f016 fe66 	bl	38b8c <__lshift>
   21ec0:	4604      	mov	r4, r0
   21ec2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21ec4:	2b00      	cmp	r3, #0
   21ec6:	f000 8276 	beq.w	223b6 <_dtoa_r+0x9f6>
   21eca:	4621      	mov	r1, r4
   21ecc:	9803      	ldr	r0, [sp, #12]
   21ece:	f01b ff69 	bl	3dda4 <__mcmp>
   21ed2:	2800      	cmp	r0, #0
   21ed4:	f280 826f 	bge.w	223b6 <_dtoa_r+0x9f6>
   21ed8:	2300      	movs	r3, #0
   21eda:	220a      	movs	r2, #10
   21edc:	9903      	ldr	r1, [sp, #12]
   21ede:	4658      	mov	r0, fp
   21ee0:	f016 fcf2 	bl	388c8 <__multadd>
   21ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21ee6:	1e7e      	subs	r6, r7, #1
   21ee8:	9003      	str	r0, [sp, #12]
   21eea:	2b00      	cmp	r3, #0
   21eec:	f000 825c 	beq.w	223a8 <_dtoa_r+0x9e8>
   21ef0:	2300      	movs	r3, #0
   21ef2:	4629      	mov	r1, r5
   21ef4:	220a      	movs	r2, #10
   21ef6:	4658      	mov	r0, fp
   21ef8:	f016 fce6 	bl	388c8 <__multadd>
   21efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21efe:	4605      	mov	r5, r0
   21f00:	2b00      	cmp	r3, #0
   21f02:	dc03      	bgt.n	21f0c <_dtoa_r+0x54c>
   21f04:	9b20      	ldr	r3, [sp, #128]	; 0x80
   21f06:	2b02      	cmp	r3, #2
   21f08:	f300 825e 	bgt.w	223c8 <_dtoa_r+0xa08>
   21f0c:	f1b8 0f00 	cmp.w	r8, #0
   21f10:	dd05      	ble.n	21f1e <_dtoa_r+0x55e>
   21f12:	4629      	mov	r1, r5
   21f14:	4642      	mov	r2, r8
   21f16:	4658      	mov	r0, fp
   21f18:	f016 fe38 	bl	38b8c <__lshift>
   21f1c:	4605      	mov	r5, r0
   21f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21f20:	2b00      	cmp	r3, #0
   21f22:	f000 82d0 	beq.w	224c6 <_dtoa_r+0xb06>
   21f26:	6869      	ldr	r1, [r5, #4]
   21f28:	4658      	mov	r0, fp
   21f2a:	f016 fc6b 	bl	38804 <_Balloc>
   21f2e:	4607      	mov	r7, r0
   21f30:	2800      	cmp	r0, #0
   21f32:	f040 827f 	bne.w	22434 <_dtoa_r+0xa74>
   21f36:	4b0d      	ldr	r3, [pc, #52]	; (21f6c <_dtoa_r+0x5ac>)
   21f38:	4602      	mov	r2, r0
   21f3a:	f240 21ea 	movw	r1, #746	; 0x2ea
   21f3e:	e553      	b.n	219e8 <_dtoa_r+0x28>
   21f40:	07e2      	lsls	r2, r4, #31
   21f42:	d506      	bpl.n	21f52 <_dtoa_r+0x592>
   21f44:	f108 0801 	add.w	r8, r8, #1
   21f48:	e9d5 2300 	ldrd	r2, r3, [r5]
   21f4c:	f7fe fc34 	bl	207b8 <__aeabi_dmul>
   21f50:	2301      	movs	r3, #1
   21f52:	1064      	asrs	r4, r4, #1
   21f54:	3508      	adds	r5, #8
   21f56:	e70b      	b.n	21d70 <_dtoa_r+0x3b0>
   21f58:	f04f 0802 	mov.w	r8, #2
   21f5c:	e70d      	b.n	21d7a <_dtoa_r+0x3ba>
   21f5e:	bf00      	nop
   21f60:	0003e690 	.word	0x0003e690
   21f64:	0003e668 	.word	0x0003e668
   21f68:	3ff00000 	.word	0x3ff00000
   21f6c:	000433ad 	.word	0x000433ad
   21f70:	4620      	mov	r0, r4
   21f72:	2200      	movs	r2, #0
   21f74:	4bac      	ldr	r3, [pc, #688]	; (22228 <_dtoa_r+0x868>)
   21f76:	4629      	mov	r1, r5
   21f78:	f7fe fc1e 	bl	207b8 <__aeabi_dmul>
   21f7c:	1e7e      	subs	r6, r7, #1
   21f7e:	f108 0801 	add.w	r8, r8, #1
   21f82:	9c09      	ldr	r4, [sp, #36]	; 0x24
   21f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21f88:	4640      	mov	r0, r8
   21f8a:	f7fe fbab 	bl	206e4 <__aeabi_i2d>
   21f8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21f92:	f7fe fc11 	bl	207b8 <__aeabi_dmul>
   21f96:	4ba5      	ldr	r3, [pc, #660]	; (2222c <_dtoa_r+0x86c>)
   21f98:	2200      	movs	r2, #0
   21f9a:	f7fe fa57 	bl	2044c <__adddf3>
   21f9e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   21fa2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   21fa6:	9311      	str	r3, [sp, #68]	; 0x44
   21fa8:	2c00      	cmp	r4, #0
   21faa:	d13b      	bne.n	22024 <_dtoa_r+0x664>
   21fac:	2200      	movs	r2, #0
   21fae:	4ba0      	ldr	r3, [pc, #640]	; (22230 <_dtoa_r+0x870>)
   21fb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21fb4:	f7fe fa48 	bl	20448 <__aeabi_dsub>
   21fb8:	4602      	mov	r2, r0
   21fba:	460b      	mov	r3, r1
   21fbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21fc4:	f7ff f9a0 	bl	21308 <__aeabi_dcmpgt>
   21fc8:	2800      	cmp	r0, #0
   21fca:	f040 8157 	bne.w	2227c <_dtoa_r+0x8bc>
   21fce:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
   21fd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   21fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21fda:	f7ff f977 	bl	212cc <__aeabi_dcmplt>
   21fde:	2800      	cmp	r0, #0
   21fe0:	f43f aee2 	beq.w	21da8 <_dtoa_r+0x3e8>
   21fe4:	2400      	movs	r4, #0
   21fe6:	4625      	mov	r5, r4
   21fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   21fea:	f8dd a020 	ldr.w	sl, [sp, #32]
   21fee:	43de      	mvns	r6, r3
   21ff0:	f04f 0800 	mov.w	r8, #0
   21ff4:	4621      	mov	r1, r4
   21ff6:	4658      	mov	r0, fp
   21ff8:	f016 fc44 	bl	38884 <_Bfree>
   21ffc:	2d00      	cmp	r5, #0
   21ffe:	f000 80a9 	beq.w	22154 <_dtoa_r+0x794>
   22002:	f1b8 0f00 	cmp.w	r8, #0
   22006:	d005      	beq.n	22014 <_dtoa_r+0x654>
   22008:	45a8      	cmp	r8, r5
   2200a:	d003      	beq.n	22014 <_dtoa_r+0x654>
   2200c:	4641      	mov	r1, r8
   2200e:	4658      	mov	r0, fp
   22010:	f016 fc38 	bl	38884 <_Bfree>
   22014:	4629      	mov	r1, r5
   22016:	4658      	mov	r0, fp
   22018:	f016 fc34 	bl	38884 <_Bfree>
   2201c:	e09a      	b.n	22154 <_dtoa_r+0x794>
   2201e:	463e      	mov	r6, r7
   22020:	464c      	mov	r4, r9
   22022:	e7b1      	b.n	21f88 <_dtoa_r+0x5c8>
   22024:	4b83      	ldr	r3, [pc, #524]	; (22234 <_dtoa_r+0x874>)
   22026:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2202a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   2202e:	9b08      	ldr	r3, [sp, #32]
   22030:	441c      	add	r4, r3
   22032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22034:	2b00      	cmp	r3, #0
   22036:	d04a      	beq.n	220ce <_dtoa_r+0x70e>
   22038:	4602      	mov	r2, r0
   2203a:	460b      	mov	r3, r1
   2203c:	2000      	movs	r0, #0
   2203e:	497e      	ldr	r1, [pc, #504]	; (22238 <_dtoa_r+0x878>)
   22040:	f7fe fce4 	bl	20a0c <__aeabi_ddiv>
   22044:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   22048:	f7fe f9fe 	bl	20448 <__aeabi_dsub>
   2204c:	f8dd a020 	ldr.w	sl, [sp, #32]
   22050:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   22054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   22058:	f7ff f976 	bl	21348 <__aeabi_d2iz>
   2205c:	4605      	mov	r5, r0
   2205e:	f7fe fb41 	bl	206e4 <__aeabi_i2d>
   22062:	4602      	mov	r2, r0
   22064:	3530      	adds	r5, #48	; 0x30
   22066:	460b      	mov	r3, r1
   22068:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2206c:	f7fe f9ec 	bl	20448 <__aeabi_dsub>
   22070:	f80a 5b01 	strb.w	r5, [sl], #1
   22074:	4602      	mov	r2, r0
   22076:	460b      	mov	r3, r1
   22078:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2207c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   22080:	f7ff f942 	bl	21308 <__aeabi_dcmpgt>
   22084:	2800      	cmp	r0, #0
   22086:	d165      	bne.n	22154 <_dtoa_r+0x794>
   22088:	2000      	movs	r0, #0
   2208a:	496c      	ldr	r1, [pc, #432]	; (2223c <_dtoa_r+0x87c>)
   2208c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   22090:	f7fe f9da 	bl	20448 <__aeabi_dsub>
   22094:	4602      	mov	r2, r0
   22096:	460b      	mov	r3, r1
   22098:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2209c:	f7ff f934 	bl	21308 <__aeabi_dcmpgt>
   220a0:	2800      	cmp	r0, #0
   220a2:	f040 810d 	bne.w	222c0 <_dtoa_r+0x900>
   220a6:	45a2      	cmp	sl, r4
   220a8:	f000 80ea 	beq.w	22280 <_dtoa_r+0x8c0>
   220ac:	2200      	movs	r2, #0
   220ae:	4b5e      	ldr	r3, [pc, #376]	; (22228 <_dtoa_r+0x868>)
   220b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   220b4:	f7fe fb80 	bl	207b8 <__aeabi_dmul>
   220b8:	2200      	movs	r2, #0
   220ba:	4b5b      	ldr	r3, [pc, #364]	; (22228 <_dtoa_r+0x868>)
   220bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   220c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   220c4:	f7fe fb78 	bl	207b8 <__aeabi_dmul>
   220c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   220cc:	e7c2      	b.n	22054 <_dtoa_r+0x694>
   220ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   220d2:	f7fe fb71 	bl	207b8 <__aeabi_dmul>
   220d6:	46a0      	mov	r8, r4
   220d8:	f8dd a020 	ldr.w	sl, [sp, #32]
   220dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   220e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   220e4:	f7ff f930 	bl	21348 <__aeabi_d2iz>
   220e8:	4605      	mov	r5, r0
   220ea:	f7fe fafb 	bl	206e4 <__aeabi_i2d>
   220ee:	4602      	mov	r2, r0
   220f0:	3530      	adds	r5, #48	; 0x30
   220f2:	460b      	mov	r3, r1
   220f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   220f8:	f7fe f9a6 	bl	20448 <__aeabi_dsub>
   220fc:	f80a 5b01 	strb.w	r5, [sl], #1
   22100:	4602      	mov	r2, r0
   22102:	460b      	mov	r3, r1
   22104:	45a2      	cmp	sl, r4
   22106:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2210a:	f04f 0200 	mov.w	r2, #0
   2210e:	d123      	bne.n	22158 <_dtoa_r+0x798>
   22110:	4b49      	ldr	r3, [pc, #292]	; (22238 <_dtoa_r+0x878>)
   22112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   22116:	f7fe f999 	bl	2044c <__adddf3>
   2211a:	4602      	mov	r2, r0
   2211c:	460b      	mov	r3, r1
   2211e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   22122:	f7ff f8f1 	bl	21308 <__aeabi_dcmpgt>
   22126:	2800      	cmp	r0, #0
   22128:	f040 80ca 	bne.w	222c0 <_dtoa_r+0x900>
   2212c:	2000      	movs	r0, #0
   2212e:	4942      	ldr	r1, [pc, #264]	; (22238 <_dtoa_r+0x878>)
   22130:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   22134:	f7fe f988 	bl	20448 <__aeabi_dsub>
   22138:	4602      	mov	r2, r0
   2213a:	460b      	mov	r3, r1
   2213c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   22140:	f7ff f8c4 	bl	212cc <__aeabi_dcmplt>
   22144:	b170      	cbz	r0, 22164 <_dtoa_r+0x7a4>
   22146:	46c2      	mov	sl, r8
   22148:	f108 38ff 	add.w	r8, r8, #4294967295
   2214c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   22150:	2b30      	cmp	r3, #48	; 0x30
   22152:	d0f8      	beq.n	22146 <_dtoa_r+0x786>
   22154:	4637      	mov	r7, r6
   22156:	e055      	b.n	22204 <_dtoa_r+0x844>
   22158:	4b33      	ldr	r3, [pc, #204]	; (22228 <_dtoa_r+0x868>)
   2215a:	f7fe fb2d 	bl	207b8 <__aeabi_dmul>
   2215e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   22162:	e7bd      	b.n	220e0 <_dtoa_r+0x720>
   22164:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   22168:	e9cd 3404 	strd	r3, r4, [sp, #16]
   2216c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2216e:	2b00      	cmp	r3, #0
   22170:	f6ff ae28 	blt.w	21dc4 <_dtoa_r+0x404>
   22174:	2f0e      	cmp	r7, #14
   22176:	f73f ae25 	bgt.w	21dc4 <_dtoa_r+0x404>
   2217a:	4b2e      	ldr	r3, [pc, #184]	; (22234 <_dtoa_r+0x874>)
   2217c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   22180:	e9d3 3400 	ldrd	r3, r4, [r3]
   22184:	e9cd 3406 	strd	r3, r4, [sp, #24]
   22188:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2218a:	2b00      	cmp	r3, #0
   2218c:	da02      	bge.n	22194 <_dtoa_r+0x7d4>
   2218e:	f1b9 0f00 	cmp.w	r9, #0
   22192:	d064      	beq.n	2225e <_dtoa_r+0x89e>
   22194:	f8dd a020 	ldr.w	sl, [sp, #32]
   22198:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   2219c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   221a0:	4620      	mov	r0, r4
   221a2:	4629      	mov	r1, r5
   221a4:	f7fe fc32 	bl	20a0c <__aeabi_ddiv>
   221a8:	f7ff f8ce 	bl	21348 <__aeabi_d2iz>
   221ac:	4606      	mov	r6, r0
   221ae:	f7fe fa99 	bl	206e4 <__aeabi_i2d>
   221b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   221b6:	f7fe faff 	bl	207b8 <__aeabi_dmul>
   221ba:	4602      	mov	r2, r0
   221bc:	4620      	mov	r0, r4
   221be:	f106 0430 	add.w	r4, r6, #48	; 0x30
   221c2:	460b      	mov	r3, r1
   221c4:	4629      	mov	r1, r5
   221c6:	f7fe f93f 	bl	20448 <__aeabi_dsub>
   221ca:	f80a 4b01 	strb.w	r4, [sl], #1
   221ce:	9c08      	ldr	r4, [sp, #32]
   221d0:	4602      	mov	r2, r0
   221d2:	460b      	mov	r3, r1
   221d4:	ebaa 0404 	sub.w	r4, sl, r4
   221d8:	45a1      	cmp	r9, r4
   221da:	f040 8082 	bne.w	222e2 <_dtoa_r+0x922>
   221de:	f7fe f935 	bl	2044c <__adddf3>
   221e2:	4604      	mov	r4, r0
   221e4:	460d      	mov	r5, r1
   221e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   221ea:	f7ff f88d 	bl	21308 <__aeabi_dcmpgt>
   221ee:	2800      	cmp	r0, #0
   221f0:	d165      	bne.n	222be <_dtoa_r+0x8fe>
   221f2:	4620      	mov	r0, r4
   221f4:	4629      	mov	r1, r5
   221f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   221fa:	f7ff f85d 	bl	212b8 <__aeabi_dcmpeq>
   221fe:	b108      	cbz	r0, 22204 <_dtoa_r+0x844>
   22200:	07f3      	lsls	r3, r6, #31
   22202:	d45c      	bmi.n	222be <_dtoa_r+0x8fe>
   22204:	9903      	ldr	r1, [sp, #12]
   22206:	4658      	mov	r0, fp
   22208:	f016 fb3c 	bl	38884 <_Bfree>
   2220c:	2300      	movs	r3, #0
   2220e:	3701      	adds	r7, #1
   22210:	f88a 3000 	strb.w	r3, [sl]
   22214:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22216:	601f      	str	r7, [r3, #0]
   22218:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2221a:	2b00      	cmp	r3, #0
   2221c:	f43f ac1c 	beq.w	21a58 <_dtoa_r+0x98>
   22220:	f8c3 a000 	str.w	sl, [r3]
   22224:	e418      	b.n	21a58 <_dtoa_r+0x98>
   22226:	bf00      	nop
   22228:	40240000 	.word	0x40240000
   2222c:	401c0000 	.word	0x401c0000
   22230:	40140000 	.word	0x40140000
   22234:	0003e690 	.word	0x0003e690
   22238:	3fe00000 	.word	0x3fe00000
   2223c:	3ff00000 	.word	0x3ff00000
   22240:	4ba2      	ldr	r3, [pc, #648]	; (224cc <_dtoa_r+0xb0c>)
   22242:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   22246:	e9d3 3400 	ldrd	r3, r4, [r3]
   2224a:	e9cd 3406 	strd	r3, r4, [sp, #24]
   2224e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   22250:	2b00      	cmp	r3, #0
   22252:	da9f      	bge.n	22194 <_dtoa_r+0x7d4>
   22254:	f1b9 0f00 	cmp.w	r9, #0
   22258:	dc9c      	bgt.n	22194 <_dtoa_r+0x7d4>
   2225a:	f47f aec3 	bne.w	21fe4 <_dtoa_r+0x624>
   2225e:	2200      	movs	r2, #0
   22260:	4b9b      	ldr	r3, [pc, #620]	; (224d0 <_dtoa_r+0xb10>)
   22262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   22266:	f7fe faa7 	bl	207b8 <__aeabi_dmul>
   2226a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2226e:	f7ff f841 	bl	212f4 <__aeabi_dcmpge>
   22272:	4604      	mov	r4, r0
   22274:	2800      	cmp	r0, #0
   22276:	f47f aeb5 	bne.w	21fe4 <_dtoa_r+0x624>
   2227a:	463e      	mov	r6, r7
   2227c:	4625      	mov	r5, r4
   2227e:	e0b4      	b.n	223ea <_dtoa_r+0xa2a>
   22280:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   22284:	e9cd 3404 	strd	r3, r4, [sp, #16]
   22288:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2228a:	2b00      	cmp	r3, #0
   2228c:	db01      	blt.n	22292 <_dtoa_r+0x8d2>
   2228e:	2f0e      	cmp	r7, #14
   22290:	ddd6      	ble.n	22240 <_dtoa_r+0x880>
   22292:	9a20      	ldr	r2, [sp, #128]	; 0x80
   22294:	2a01      	cmp	r2, #1
   22296:	dc36      	bgt.n	22306 <_dtoa_r+0x946>
   22298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2229a:	b382      	cbz	r2, 222fe <_dtoa_r+0x93e>
   2229c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   222a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   222a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   222a6:	9a06      	ldr	r2, [sp, #24]
   222a8:	2101      	movs	r1, #1
   222aa:	4658      	mov	r0, fp
   222ac:	441a      	add	r2, r3
   222ae:	9206      	str	r2, [sp, #24]
   222b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   222b2:	441a      	add	r2, r3
   222b4:	920a      	str	r2, [sp, #40]	; 0x28
   222b6:	f016 fb4f 	bl	38958 <__i2b>
   222ba:	4605      	mov	r5, r0
   222bc:	e586      	b.n	21dcc <_dtoa_r+0x40c>
   222be:	463e      	mov	r6, r7
   222c0:	4653      	mov	r3, sl
   222c2:	469a      	mov	sl, r3
   222c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   222c8:	2a39      	cmp	r2, #57	; 0x39
   222ca:	d106      	bne.n	222da <_dtoa_r+0x91a>
   222cc:	9a08      	ldr	r2, [sp, #32]
   222ce:	429a      	cmp	r2, r3
   222d0:	d1f7      	bne.n	222c2 <_dtoa_r+0x902>
   222d2:	2230      	movs	r2, #48	; 0x30
   222d4:	9908      	ldr	r1, [sp, #32]
   222d6:	3601      	adds	r6, #1
   222d8:	700a      	strb	r2, [r1, #0]
   222da:	781a      	ldrb	r2, [r3, #0]
   222dc:	3201      	adds	r2, #1
   222de:	701a      	strb	r2, [r3, #0]
   222e0:	e738      	b.n	22154 <_dtoa_r+0x794>
   222e2:	2200      	movs	r2, #0
   222e4:	4b7b      	ldr	r3, [pc, #492]	; (224d4 <_dtoa_r+0xb14>)
   222e6:	f7fe fa67 	bl	207b8 <__aeabi_dmul>
   222ea:	2200      	movs	r2, #0
   222ec:	2300      	movs	r3, #0
   222ee:	4604      	mov	r4, r0
   222f0:	460d      	mov	r5, r1
   222f2:	f7fe ffe1 	bl	212b8 <__aeabi_dcmpeq>
   222f6:	2800      	cmp	r0, #0
   222f8:	f43f af50 	beq.w	2219c <_dtoa_r+0x7dc>
   222fc:	e782      	b.n	22204 <_dtoa_r+0x844>
   222fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22300:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   22304:	e7cc      	b.n	222a0 <_dtoa_r+0x8e0>
   22306:	f109 34ff 	add.w	r4, r9, #4294967295
   2230a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2230c:	42a3      	cmp	r3, r4
   2230e:	db08      	blt.n	22322 <_dtoa_r+0x962>
   22310:	f1b9 0f00 	cmp.w	r9, #0
   22314:	eba3 0404 	sub.w	r4, r3, r4
   22318:	db0e      	blt.n	22338 <_dtoa_r+0x978>
   2231a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2231e:	464b      	mov	r3, r9
   22320:	e7c1      	b.n	222a6 <_dtoa_r+0x8e6>
   22322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22326:	1ae3      	subs	r3, r4, r3
   22328:	940b      	str	r4, [sp, #44]	; 0x2c
   2232a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2232e:	2400      	movs	r4, #0
   22330:	441a      	add	r2, r3
   22332:	464b      	mov	r3, r9
   22334:	920f      	str	r2, [sp, #60]	; 0x3c
   22336:	e7b6      	b.n	222a6 <_dtoa_r+0x8e6>
   22338:	9b06      	ldr	r3, [sp, #24]
   2233a:	eba3 0809 	sub.w	r8, r3, r9
   2233e:	2300      	movs	r3, #0
   22340:	e7b1      	b.n	222a6 <_dtoa_r+0x8e6>
   22342:	9e03      	ldr	r6, [sp, #12]
   22344:	e571      	b.n	21e2a <_dtoa_r+0x46a>
   22346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   22348:	9903      	ldr	r1, [sp, #12]
   2234a:	e570      	b.n	21e2e <_dtoa_r+0x46e>
   2234c:	9603      	str	r6, [sp, #12]
   2234e:	e572      	b.n	21e36 <_dtoa_r+0x476>
   22350:	9b20      	ldr	r3, [sp, #128]	; 0x80
   22352:	2b01      	cmp	r3, #1
   22354:	dc17      	bgt.n	22386 <_dtoa_r+0x9c6>
   22356:	9b04      	ldr	r3, [sp, #16]
   22358:	b9ab      	cbnz	r3, 22386 <_dtoa_r+0x9c6>
   2235a:	9b05      	ldr	r3, [sp, #20]
   2235c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   22360:	b99b      	cbnz	r3, 2238a <_dtoa_r+0x9ca>
   22362:	9b05      	ldr	r3, [sp, #20]
   22364:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
   22368:	0d36      	lsrs	r6, r6, #20
   2236a:	0536      	lsls	r6, r6, #20
   2236c:	b136      	cbz	r6, 2237c <_dtoa_r+0x9bc>
   2236e:	9b06      	ldr	r3, [sp, #24]
   22370:	2601      	movs	r6, #1
   22372:	3301      	adds	r3, #1
   22374:	9306      	str	r3, [sp, #24]
   22376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22378:	3301      	adds	r3, #1
   2237a:	930a      	str	r3, [sp, #40]	; 0x28
   2237c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2237e:	2b00      	cmp	r3, #0
   22380:	f47f ad70 	bne.w	21e64 <_dtoa_r+0x4a4>
   22384:	960f      	str	r6, [sp, #60]	; 0x3c
   22386:	2001      	movs	r0, #1
   22388:	e575      	b.n	21e76 <_dtoa_r+0x4b6>
   2238a:	2600      	movs	r6, #0
   2238c:	e7f6      	b.n	2237c <_dtoa_r+0x9bc>
   2238e:	f43f ad86 	beq.w	21e9e <_dtoa_r+0x4de>
   22392:	331c      	adds	r3, #28
   22394:	9a06      	ldr	r2, [sp, #24]
   22396:	441a      	add	r2, r3
   22398:	4498      	add	r8, r3
   2239a:	9206      	str	r2, [sp, #24]
   2239c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2239e:	441a      	add	r2, r3
   223a0:	920a      	str	r2, [sp, #40]	; 0x28
   223a2:	e57c      	b.n	21e9e <_dtoa_r+0x4de>
   223a4:	4603      	mov	r3, r0
   223a6:	e7f4      	b.n	22392 <_dtoa_r+0x9d2>
   223a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   223aa:	2b00      	cmp	r3, #0
   223ac:	dc2b      	bgt.n	22406 <_dtoa_r+0xa46>
   223ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   223b0:	2b02      	cmp	r3, #2
   223b2:	dc09      	bgt.n	223c8 <_dtoa_r+0xa08>
   223b4:	e027      	b.n	22406 <_dtoa_r+0xa46>
   223b6:	f1b9 0f00 	cmp.w	r9, #0
   223ba:	dc1d      	bgt.n	223f8 <_dtoa_r+0xa38>
   223bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   223be:	2b02      	cmp	r3, #2
   223c0:	dd1a      	ble.n	223f8 <_dtoa_r+0xa38>
   223c2:	463e      	mov	r6, r7
   223c4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   223c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   223ca:	2b00      	cmp	r3, #0
   223cc:	f47f ae0c 	bne.w	21fe8 <_dtoa_r+0x628>
   223d0:	4621      	mov	r1, r4
   223d2:	2205      	movs	r2, #5
   223d4:	4658      	mov	r0, fp
   223d6:	f016 fa77 	bl	388c8 <__multadd>
   223da:	4601      	mov	r1, r0
   223dc:	4604      	mov	r4, r0
   223de:	9803      	ldr	r0, [sp, #12]
   223e0:	f01b fce0 	bl	3dda4 <__mcmp>
   223e4:	2800      	cmp	r0, #0
   223e6:	f77f adff 	ble.w	21fe8 <_dtoa_r+0x628>
   223ea:	f8dd a020 	ldr.w	sl, [sp, #32]
   223ee:	2331      	movs	r3, #49	; 0x31
   223f0:	3601      	adds	r6, #1
   223f2:	f80a 3b01 	strb.w	r3, [sl], #1
   223f6:	e5fb      	b.n	21ff0 <_dtoa_r+0x630>
   223f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   223fa:	463e      	mov	r6, r7
   223fc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   22400:	2b00      	cmp	r3, #0
   22402:	f47f ad83 	bne.w	21f0c <_dtoa_r+0x54c>
   22406:	9f08      	ldr	r7, [sp, #32]
   22408:	4621      	mov	r1, r4
   2240a:	9803      	ldr	r0, [sp, #12]
   2240c:	f01b faf8 	bl	3da00 <quorem>
   22410:	9b08      	ldr	r3, [sp, #32]
   22412:	f100 0930 	add.w	r9, r0, #48	; 0x30
   22416:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22418:	f807 9b01 	strb.w	r9, [r7], #1
   2241c:	1afb      	subs	r3, r7, r3
   2241e:	429a      	cmp	r2, r3
   22420:	f340 80cb 	ble.w	225ba <_dtoa_r+0xbfa>
   22424:	2300      	movs	r3, #0
   22426:	220a      	movs	r2, #10
   22428:	9903      	ldr	r1, [sp, #12]
   2242a:	4658      	mov	r0, fp
   2242c:	f016 fa4c 	bl	388c8 <__multadd>
   22430:	9003      	str	r0, [sp, #12]
   22432:	e7e9      	b.n	22408 <_dtoa_r+0xa48>
   22434:	692a      	ldr	r2, [r5, #16]
   22436:	f105 010c 	add.w	r1, r5, #12
   2243a:	300c      	adds	r0, #12
   2243c:	3202      	adds	r2, #2
   2243e:	0092      	lsls	r2, r2, #2
   22440:	f01b f914 	bl	3d66c <memcpy>
   22444:	2201      	movs	r2, #1
   22446:	4639      	mov	r1, r7
   22448:	4658      	mov	r0, fp
   2244a:	f016 fb9f 	bl	38b8c <__lshift>
   2244e:	9b08      	ldr	r3, [sp, #32]
   22450:	46a8      	mov	r8, r5
   22452:	4605      	mov	r5, r0
   22454:	f103 0a01 	add.w	sl, r3, #1
   22458:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2245c:	4413      	add	r3, r2
   2245e:	930a      	str	r3, [sp, #40]	; 0x28
   22460:	9b04      	ldr	r3, [sp, #16]
   22462:	f003 0301 	and.w	r3, r3, #1
   22466:	930b      	str	r3, [sp, #44]	; 0x2c
   22468:	f10a 33ff 	add.w	r3, sl, #4294967295
   2246c:	4621      	mov	r1, r4
   2246e:	9803      	ldr	r0, [sp, #12]
   22470:	9306      	str	r3, [sp, #24]
   22472:	f01b fac5 	bl	3da00 <quorem>
   22476:	4641      	mov	r1, r8
   22478:	9009      	str	r0, [sp, #36]	; 0x24
   2247a:	f100 0930 	add.w	r9, r0, #48	; 0x30
   2247e:	9803      	ldr	r0, [sp, #12]
   22480:	f01b fc90 	bl	3dda4 <__mcmp>
   22484:	462a      	mov	r2, r5
   22486:	4621      	mov	r1, r4
   22488:	4607      	mov	r7, r0
   2248a:	4658      	mov	r0, fp
   2248c:	f016 fbea 	bl	38c64 <__mdiff>
   22490:	68c2      	ldr	r2, [r0, #12]
   22492:	4601      	mov	r1, r0
   22494:	b302      	cbz	r2, 224d8 <_dtoa_r+0xb18>
   22496:	4658      	mov	r0, fp
   22498:	f016 f9f4 	bl	38884 <_Bfree>
   2249c:	2f00      	cmp	r7, #0
   2249e:	da3a      	bge.n	22516 <_dtoa_r+0xb56>
   224a0:	2201      	movs	r2, #1
   224a2:	9903      	ldr	r1, [sp, #12]
   224a4:	4658      	mov	r0, fp
   224a6:	f016 fb71 	bl	38b8c <__lshift>
   224aa:	4621      	mov	r1, r4
   224ac:	9003      	str	r0, [sp, #12]
   224ae:	f01b fc79 	bl	3dda4 <__mcmp>
   224b2:	2800      	cmp	r0, #0
   224b4:	dc03      	bgt.n	224be <_dtoa_r+0xafe>
   224b6:	d129      	bne.n	2250c <_dtoa_r+0xb4c>
   224b8:	f019 0f01 	tst.w	r9, #1
   224bc:	d026      	beq.n	2250c <_dtoa_r+0xb4c>
   224be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   224c2:	d11d      	bne.n	22500 <_dtoa_r+0xb40>
   224c4:	e032      	b.n	2252c <_dtoa_r+0xb6c>
   224c6:	4628      	mov	r0, r5
   224c8:	e7c1      	b.n	2244e <_dtoa_r+0xa8e>
   224ca:	bf00      	nop
   224cc:	0003e690 	.word	0x0003e690
   224d0:	40140000 	.word	0x40140000
   224d4:	40240000 	.word	0x40240000
   224d8:	900e      	str	r0, [sp, #56]	; 0x38
   224da:	9803      	ldr	r0, [sp, #12]
   224dc:	f01b fc62 	bl	3dda4 <__mcmp>
   224e0:	990e      	ldr	r1, [sp, #56]	; 0x38
   224e2:	900c      	str	r0, [sp, #48]	; 0x30
   224e4:	4658      	mov	r0, fp
   224e6:	f016 f9cd 	bl	38884 <_Bfree>
   224ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   224ec:	bb5a      	cbnz	r2, 22546 <_dtoa_r+0xb86>
   224ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
   224f0:	b953      	cbnz	r3, 22508 <_dtoa_r+0xb48>
   224f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   224f4:	b943      	cbnz	r3, 22508 <_dtoa_r+0xb48>
   224f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   224fa:	d017      	beq.n	2252c <_dtoa_r+0xb6c>
   224fc:	2f00      	cmp	r7, #0
   224fe:	dd05      	ble.n	2250c <_dtoa_r+0xb4c>
   22500:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22502:	f103 0931 	add.w	r9, r3, #49	; 0x31
   22506:	e001      	b.n	2250c <_dtoa_r+0xb4c>
   22508:	2f00      	cmp	r7, #0
   2250a:	da2a      	bge.n	22562 <_dtoa_r+0xba2>
   2250c:	f8dd a018 	ldr.w	sl, [sp, #24]
   22510:	f80a 9b01 	strb.w	r9, [sl], #1
   22514:	e56e      	b.n	21ff4 <_dtoa_r+0x634>
   22516:	9b20      	ldr	r3, [sp, #128]	; 0x80
   22518:	433b      	orrs	r3, r7
   2251a:	d104      	bne.n	22526 <_dtoa_r+0xb66>
   2251c:	9b04      	ldr	r3, [sp, #16]
   2251e:	f003 0301 	and.w	r3, r3, #1
   22522:	2b00      	cmp	r3, #0
   22524:	d0bc      	beq.n	224a0 <_dtoa_r+0xae0>
   22526:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
   2252a:	d136      	bne.n	2259a <_dtoa_r+0xbda>
   2252c:	9f06      	ldr	r7, [sp, #24]
   2252e:	2339      	movs	r3, #57	; 0x39
   22530:	f807 3b01 	strb.w	r3, [r7], #1
   22534:	46ba      	mov	sl, r7
   22536:	3f01      	subs	r7, #1
   22538:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   2253c:	2b39      	cmp	r3, #57	; 0x39
   2253e:	d05a      	beq.n	225f6 <_dtoa_r+0xc36>
   22540:	3301      	adds	r3, #1
   22542:	703b      	strb	r3, [r7, #0]
   22544:	e556      	b.n	21ff4 <_dtoa_r+0x634>
   22546:	2f00      	cmp	r7, #0
   22548:	db06      	blt.n	22558 <_dtoa_r+0xb98>
   2254a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2254c:	433b      	orrs	r3, r7
   2254e:	d106      	bne.n	2255e <_dtoa_r+0xb9e>
   22550:	9b04      	ldr	r3, [sp, #16]
   22552:	f003 0301 	and.w	r3, r3, #1
   22556:	b913      	cbnz	r3, 2255e <_dtoa_r+0xb9e>
   22558:	2a00      	cmp	r2, #0
   2255a:	dca1      	bgt.n	224a0 <_dtoa_r+0xae0>
   2255c:	e7d6      	b.n	2250c <_dtoa_r+0xb4c>
   2255e:	2a00      	cmp	r2, #0
   22560:	dce1      	bgt.n	22526 <_dtoa_r+0xb66>
   22562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22564:	4657      	mov	r7, sl
   22566:	f80a 9c01 	strb.w	r9, [sl, #-1]
   2256a:	4553      	cmp	r3, sl
   2256c:	d02e      	beq.n	225cc <_dtoa_r+0xc0c>
   2256e:	2300      	movs	r3, #0
   22570:	220a      	movs	r2, #10
   22572:	9903      	ldr	r1, [sp, #12]
   22574:	4658      	mov	r0, fp
   22576:	f016 f9a7 	bl	388c8 <__multadd>
   2257a:	45a8      	cmp	r8, r5
   2257c:	9003      	str	r0, [sp, #12]
   2257e:	f04f 0300 	mov.w	r3, #0
   22582:	f04f 020a 	mov.w	r2, #10
   22586:	4641      	mov	r1, r8
   22588:	4658      	mov	r0, fp
   2258a:	d10b      	bne.n	225a4 <_dtoa_r+0xbe4>
   2258c:	f016 f99c 	bl	388c8 <__multadd>
   22590:	4680      	mov	r8, r0
   22592:	4605      	mov	r5, r0
   22594:	f10a 0a01 	add.w	sl, sl, #1
   22598:	e766      	b.n	22468 <_dtoa_r+0xaa8>
   2259a:	f8dd a018 	ldr.w	sl, [sp, #24]
   2259e:	f109 0901 	add.w	r9, r9, #1
   225a2:	e7b5      	b.n	22510 <_dtoa_r+0xb50>
   225a4:	f016 f990 	bl	388c8 <__multadd>
   225a8:	4629      	mov	r1, r5
   225aa:	4680      	mov	r8, r0
   225ac:	2300      	movs	r3, #0
   225ae:	220a      	movs	r2, #10
   225b0:	4658      	mov	r0, fp
   225b2:	f016 f989 	bl	388c8 <__multadd>
   225b6:	4605      	mov	r5, r0
   225b8:	e7ec      	b.n	22594 <_dtoa_r+0xbd4>
   225ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   225bc:	f04f 0800 	mov.w	r8, #0
   225c0:	2b00      	cmp	r3, #0
   225c2:	bfcc      	ite	gt
   225c4:	461f      	movgt	r7, r3
   225c6:	2701      	movle	r7, #1
   225c8:	9b08      	ldr	r3, [sp, #32]
   225ca:	441f      	add	r7, r3
   225cc:	2201      	movs	r2, #1
   225ce:	9903      	ldr	r1, [sp, #12]
   225d0:	4658      	mov	r0, fp
   225d2:	f016 fadb 	bl	38b8c <__lshift>
   225d6:	4621      	mov	r1, r4
   225d8:	9003      	str	r0, [sp, #12]
   225da:	f01b fbe3 	bl	3dda4 <__mcmp>
   225de:	2800      	cmp	r0, #0
   225e0:	dca8      	bgt.n	22534 <_dtoa_r+0xb74>
   225e2:	d102      	bne.n	225ea <_dtoa_r+0xc2a>
   225e4:	f019 0f01 	tst.w	r9, #1
   225e8:	d1a4      	bne.n	22534 <_dtoa_r+0xb74>
   225ea:	46ba      	mov	sl, r7
   225ec:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
   225f0:	2b30      	cmp	r3, #48	; 0x30
   225f2:	d0fa      	beq.n	225ea <_dtoa_r+0xc2a>
   225f4:	e4fe      	b.n	21ff4 <_dtoa_r+0x634>
   225f6:	9b08      	ldr	r3, [sp, #32]
   225f8:	42bb      	cmp	r3, r7
   225fa:	d19b      	bne.n	22534 <_dtoa_r+0xb74>
   225fc:	2331      	movs	r3, #49	; 0x31
   225fe:	9a08      	ldr	r2, [sp, #32]
   22600:	3601      	adds	r6, #1
   22602:	7013      	strb	r3, [r2, #0]
   22604:	e4f6      	b.n	21ff4 <_dtoa_r+0x634>
   22606:	9b24      	ldr	r3, [sp, #144]	; 0x90
   22608:	2b00      	cmp	r3, #0
   2260a:	f47f aa20 	bne.w	21a4e <_dtoa_r+0x8e>
   2260e:	4b01      	ldr	r3, [pc, #4]	; (22614 <_dtoa_r+0xc54>)
   22610:	f7ff ba3f 	b.w	21a92 <_dtoa_r+0xd2>
   22614:	00043315 	.word	0x00043315

00022618 <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data) {
   22618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (evt->type) {
   2261c:	780b      	ldrb	r3, [r1, #0]
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data) {
   2261e:	4604      	mov	r4, r0
    switch (evt->type) {
   22620:	3b02      	subs	r3, #2
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data) {
   22622:	460d      	mov	r5, r1
    switch (evt->type) {
   22624:	2b04      	cmp	r3, #4
   22626:	d838      	bhi.n	2269a <uart_cb+0x82>
   22628:	e8df f003 	tbb	[pc, r3]
   2262c:	29251903 	.word	0x29251903
   22630:	27          	.byte	0x27
   22631:	00          	.byte	0x00
            printk("Data received: ");
   22632:	481b      	ldr	r0, [pc, #108]	; (226a0 <uart_cb+0x88>)
   22634:	f016 fdc1 	bl	391ba <printk>
                printk("%02X ", rx_buf[i]);
   22638:	4e1a      	ldr	r6, [pc, #104]	; (226a4 <uart_cb+0x8c>)
            for (int i = evt->data.rx.offset; i < evt->data.rx.offset + evt->data.rx.len; i++) {
   2263a:	68ac      	ldr	r4, [r5, #8]
                printk("%02X ", rx_buf[i]);
   2263c:	4f1a      	ldr	r7, [pc, #104]	; (226a8 <uart_cb+0x90>)
            for (int i = evt->data.rx.offset; i < evt->data.rx.offset + evt->data.rx.len; i++) {
   2263e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   22642:	4413      	add	r3, r2
   22644:	42a3      	cmp	r3, r4
   22646:	d804      	bhi.n	22652 <uart_cb+0x3a>
            printk("\n");
   22648:	4818      	ldr	r0, [pc, #96]	; (226ac <uart_cb+0x94>)
}
   2264a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            printk("RX buffer released\n");
   2264e:	f016 bdb4 	b.w	391ba <printk>
                printk("%02X ", rx_buf[i]);
   22652:	5d31      	ldrb	r1, [r6, r4]
   22654:	4638      	mov	r0, r7
   22656:	f016 fdb0 	bl	391ba <printk>
            for (int i = evt->data.rx.offset; i < evt->data.rx.offset + evt->data.rx.len; i++) {
   2265a:	3401      	adds	r4, #1
   2265c:	e7ef      	b.n	2263e <uart_cb+0x26>
            printk("RX buffer request\n");
   2265e:	4814      	ldr	r0, [pc, #80]	; (226b0 <uart_cb+0x98>)
   22660:	f016 fdab 	bl	391ba <printk>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   22664:	68a3      	ldr	r3, [r4, #8]
   22666:	4620      	mov	r0, r4
}
   22668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2266c:	f44f 7280 	mov.w	r2, #256	; 0x100
   22670:	691b      	ldr	r3, [r3, #16]
   22672:	490c      	ldr	r1, [pc, #48]	; (226a4 <uart_cb+0x8c>)
   22674:	4718      	bx	r3
            printk("RX buffer released\n");
   22676:	480f      	ldr	r0, [pc, #60]	; (226b4 <uart_cb+0x9c>)
   22678:	e7e7      	b.n	2264a <uart_cb+0x32>
            printk("RX stopped\n");
   2267a:	480f      	ldr	r0, [pc, #60]	; (226b8 <uart_cb+0xa0>)
   2267c:	e7e5      	b.n	2264a <uart_cb+0x32>
            printk("RX disabled, re-enabling\n");
   2267e:	480f      	ldr	r0, [pc, #60]	; (226bc <uart_cb+0xa4>)
   22680:	f016 fd9b 	bl	391ba <printk>
	return api->rx_enable(dev, buf, len, timeout);
   22684:	68a3      	ldr	r3, [r4, #8]
   22686:	4620      	mov	r0, r4
   22688:	68dd      	ldr	r5, [r3, #12]
   2268a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2268e:	46ac      	mov	ip, r5
}
   22690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22694:	2364      	movs	r3, #100	; 0x64
   22696:	4903      	ldr	r1, [pc, #12]	; (226a4 <uart_cb+0x8c>)
   22698:	4760      	bx	ip
   2269a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2269e:	bf00      	nop
   226a0:	0003eee5 	.word	0x0003eee5
   226a4:	20017fde 	.word	0x20017fde
   226a8:	0003eef5 	.word	0x0003eef5
   226ac:	0003f6c9 	.word	0x0003f6c9
   226b0:	0003eefb 	.word	0x0003eefb
   226b4:	0003ef0e 	.word	0x0003ef0e
   226b8:	0003ef22 	.word	0x0003ef22
   226bc:	0003ef2e 	.word	0x0003ef2e

000226c0 <send_uart_command>:
void send_uart_command(const uint8_t *cmd, size_t cmd_size) {
   226c0:	b538      	push	{r3, r4, r5, lr}
    uint32_t err_code = uart_tx(uart, cmd, cmd_size, SYS_FOREVER_MS);
   226c2:	4b09      	ldr	r3, [pc, #36]	; (226e8 <send_uart_command+0x28>)
void send_uart_command(const uint8_t *cmd, size_t cmd_size) {
   226c4:	4604      	mov	r4, r0
   226c6:	460a      	mov	r2, r1
    uint32_t err_code = uart_tx(uart, cmd, cmd_size, SYS_FOREVER_MS);
   226c8:	6818      	ldr	r0, [r3, #0]
	return api->tx(dev, buf, len, timeout);
   226ca:	6883      	ldr	r3, [r0, #8]
   226cc:	4621      	mov	r1, r4
   226ce:	685d      	ldr	r5, [r3, #4]
   226d0:	f04f 33ff 	mov.w	r3, #4294967295
   226d4:	47a8      	blx	r5
    if (err_code) {
   226d6:	4601      	mov	r1, r0
   226d8:	b120      	cbz	r0, 226e4 <send_uart_command+0x24>
}
   226da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        printk("Failed to send UART command, error %d\n", err_code);
   226de:	4803      	ldr	r0, [pc, #12]	; (226ec <send_uart_command+0x2c>)
   226e0:	f016 bd6b 	b.w	391ba <printk>
}
   226e4:	bd38      	pop	{r3, r4, r5, pc}
   226e6:	bf00      	nop
   226e8:	200145bc 	.word	0x200145bc
   226ec:	0003ef48 	.word	0x0003ef48

000226f0 <UART>:
void UART(void) {
   226f0:	b510      	push	{r4, lr}
    if (!device_is_ready(uart)) {
   226f2:	4c1f      	ldr	r4, [pc, #124]	; (22770 <UART+0x80>)
    printk("SPS30 Sensor UART Example\n");
   226f4:	481f      	ldr	r0, [pc, #124]	; (22774 <UART+0x84>)
   226f6:	f016 fd60 	bl	391ba <printk>
    if (!device_is_ready(uart)) {
   226fa:	6820      	ldr	r0, [r4, #0]
   226fc:	f01a fe37 	bl	3d36e <z_device_ready>
   22700:	b910      	cbnz	r0, 22708 <UART+0x18>
        printk("UART device not ready\n");
   22702:	481d      	ldr	r0, [pc, #116]	; (22778 <UART+0x88>)
   22704:	f016 fd59 	bl	391ba <printk>
    send_uart_command(tx_start_msg1, sizeof(tx_start_msg1));
   22708:	2108      	movs	r1, #8
   2270a:	481c      	ldr	r0, [pc, #112]	; (2277c <UART+0x8c>)
   2270c:	f7ff ffd8 	bl	226c0 <send_uart_command>
   22710:	2100      	movs	r1, #0
   22712:	f640 40cd 	movw	r0, #3277	; 0xccd
   22716:	f013 fdad 	bl	36274 <z_impl_k_sleep>
    send_uart_command(tx_start_msg2, sizeof(tx_start_msg2));
   2271a:	2106      	movs	r1, #6
   2271c:	4818      	ldr	r0, [pc, #96]	; (22780 <UART+0x90>)
   2271e:	f7ff ffcf 	bl	226c0 <send_uart_command>
   22722:	2100      	movs	r1, #0
   22724:	f640 40cd 	movw	r0, #3277	; 0xccd
   22728:	f013 fda4 	bl	36274 <z_impl_k_sleep>
    send_uart_command(tx_start_msg3, sizeof(tx_start_msg3));
   2272c:	2106      	movs	r1, #6
   2272e:	4815      	ldr	r0, [pc, #84]	; (22784 <UART+0x94>)
   22730:	f7ff ffc6 	bl	226c0 <send_uart_command>
   22734:	2100      	movs	r1, #0
   22736:	f640 40cd 	movw	r0, #3277	; 0xccd
   2273a:	f013 fd9b 	bl	36274 <z_impl_k_sleep>
    if (uart_callback_set(uart, uart_cb, NULL) != 0) {
   2273e:	6820      	ldr	r0, [r4, #0]
	return api->callback_set(dev, callback, user_data);
   22740:	2200      	movs	r2, #0
   22742:	6883      	ldr	r3, [r0, #8]
   22744:	4910      	ldr	r1, [pc, #64]	; (22788 <UART+0x98>)
   22746:	681b      	ldr	r3, [r3, #0]
   22748:	4798      	blx	r3
   2274a:	b110      	cbz	r0, 22752 <UART+0x62>
        printk("Failed to set UART callback\n");
   2274c:	480f      	ldr	r0, [pc, #60]	; (2278c <UART+0x9c>)
   2274e:	f016 fd34 	bl	391ba <printk>
    if (uart_rx_enable(uart, rx_buf, sizeof(rx_buf), RECEIVE_TIMEOUT) != 0) {
   22752:	6820      	ldr	r0, [r4, #0]
	return api->rx_enable(dev, buf, len, timeout);
   22754:	6883      	ldr	r3, [r0, #8]
   22756:	f44f 7280 	mov.w	r2, #256	; 0x100
   2275a:	68dc      	ldr	r4, [r3, #12]
   2275c:	490c      	ldr	r1, [pc, #48]	; (22790 <UART+0xa0>)
   2275e:	2364      	movs	r3, #100	; 0x64
   22760:	47a0      	blx	r4
   22762:	b120      	cbz	r0, 2276e <UART+0x7e>
}
   22764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printk("Failed to enable UART RX\n");
   22768:	480a      	ldr	r0, [pc, #40]	; (22794 <UART+0xa4>)
   2276a:	f016 bd26 	b.w	391ba <printk>
}
   2276e:	bd10      	pop	{r4, pc}
   22770:	200145bc 	.word	0x200145bc
   22774:	0003ef6f 	.word	0x0003ef6f
   22778:	0003ef8a 	.word	0x0003ef8a
   2277c:	200149a0 	.word	0x200149a0
   22780:	2001499a 	.word	0x2001499a
   22784:	20014994 	.word	0x20014994
   22788:	00022619 	.word	0x00022619
   2278c:	0003efa1 	.word	0x0003efa1
   22790:	20017fde 	.word	0x20017fde
   22794:	0003efbe 	.word	0x0003efbe

00022798 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   22798:	2803      	cmp	r0, #3
{
   2279a:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   2279c:	d906      	bls.n	227ac <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   2279e:	f017 fc84 	bl	3a0aa <__errno>
   227a2:	2309      	movs	r3, #9
   227a4:	6003      	str	r3, [r0, #0]
		return -1;
   227a6:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   227aa:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   227ac:	4b04      	ldr	r3, [pc, #16]	; (227c0 <_check_fd+0x28>)
   227ae:	eb03 1340 	add.w	r3, r3, r0, lsl #5
   227b2:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_get(&fdtable[fd].refcount)) {
   227b6:	2b00      	cmp	r3, #0
   227b8:	d0f1      	beq.n	2279e <_check_fd+0x6>
	return 0;
   227ba:	2000      	movs	r0, #0
   227bc:	e7f5      	b.n	227aa <_check_fd+0x12>
   227be:	bf00      	nop
   227c0:	200176a0 	.word	0x200176a0

000227c4 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   227c4:	b570      	push	{r4, r5, r6, lr}
   227c6:	4604      	mov	r4, r0
   227c8:	460d      	mov	r5, r1
   227ca:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   227cc:	f7ff ffe4 	bl	22798 <_check_fd>
   227d0:	2800      	cmp	r0, #0
   227d2:	db09      	blt.n	227e8 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   227d4:	4b06      	ldr	r3, [pc, #24]	; (227f0 <z_get_fd_obj+0x2c>)
   227d6:	0160      	lsls	r0, r4, #5
   227d8:	b145      	cbz	r5, 227ec <z_get_fd_obj+0x28>
   227da:	181a      	adds	r2, r3, r0
   227dc:	6852      	ldr	r2, [r2, #4]
   227de:	42aa      	cmp	r2, r5
   227e0:	d004      	beq.n	227ec <z_get_fd_obj+0x28>
		errno = err;
   227e2:	f017 fc62 	bl	3a0aa <__errno>
   227e6:	6006      	str	r6, [r0, #0]
		return NULL;
   227e8:	2000      	movs	r0, #0
		return NULL;
	}

	return entry->obj;
}
   227ea:	bd70      	pop	{r4, r5, r6, pc}
	return entry->obj;
   227ec:	5818      	ldr	r0, [r3, r0]
   227ee:	e7fc      	b.n	227ea <z_get_fd_obj+0x26>
   227f0:	20017698 	.word	0x20017698

000227f4 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   227f4:	b570      	push	{r4, r5, r6, lr}
   227f6:	4604      	mov	r4, r0
   227f8:	460e      	mov	r6, r1
   227fa:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   227fc:	f7ff ffcc 	bl	22798 <_check_fd>
   22800:	2800      	cmp	r0, #0
   22802:	db0c      	blt.n	2281e <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   22804:	4b07      	ldr	r3, [pc, #28]	; (22824 <z_get_fd_obj_and_vtable+0x30>)
   22806:	0161      	lsls	r1, r4, #5
   22808:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   2280c:	6862      	ldr	r2, [r4, #4]
   2280e:	6032      	str	r2, [r6, #0]

	if (lock) {
   22810:	b11d      	cbz	r5, 2281a <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   22812:	f101 020c 	add.w	r2, r1, #12
   22816:	441a      	add	r2, r3
   22818:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   2281a:	5858      	ldr	r0, [r3, r1]
}
   2281c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2281e:	2000      	movs	r0, #0
   22820:	e7fc      	b.n	2281c <z_get_fd_obj_and_vtable+0x28>
   22822:	bf00      	nop
   22824:	20017698 	.word	0x20017698

00022828 <z_reserve_fd>:

int z_reserve_fd(void)
{
   22828:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   2282a:	2400      	movs	r4, #0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   2282c:	f04f 33ff 	mov.w	r3, #4294967295
   22830:	f04f 32ff 	mov.w	r2, #4294967295
   22834:	4814      	ldr	r0, [pc, #80]	; (22888 <z_reserve_fd+0x60>)
   22836:	f011 fe83 	bl	34540 <z_impl_k_mutex_lock>
   2283a:	4b14      	ldr	r3, [pc, #80]	; (2288c <z_reserve_fd+0x64>)
   2283c:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   22840:	b17a      	cbz	r2, 22862 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   22842:	3401      	adds	r4, #1
   22844:	2c04      	cmp	r4, #4
   22846:	f103 0320 	add.w	r3, r3, #32
   2284a:	d1f7      	bne.n	2283c <z_reserve_fd+0x14>
	errno = ENFILE;
   2284c:	f017 fc2d 	bl	3a0aa <__errno>
   22850:	2317      	movs	r3, #23
	return -1;
   22852:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   22856:	6003      	str	r3, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   22858:	480b      	ldr	r0, [pc, #44]	; (22888 <z_reserve_fd+0x60>)
   2285a:	f011 ff6b 	bl	34734 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   2285e:	4620      	mov	r0, r4
   22860:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22862:	e8d3 0fef 	ldaex	r0, [r3]
   22866:	3001      	adds	r0, #1
   22868:	e8c3 0fe1 	stlex	r1, r0, [r3]
   2286c:	2900      	cmp	r1, #0
   2286e:	d1f8      	bne.n	22862 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   22870:	4807      	ldr	r0, [pc, #28]	; (22890 <z_reserve_fd+0x68>)
   22872:	0163      	lsls	r3, r4, #5
   22874:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   22878:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   2287a:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   2287c:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   2287e:	4418      	add	r0, r3
   22880:	f01a fdc9 	bl	3d416 <z_impl_k_mutex_init>
   22884:	e7e8      	b.n	22858 <z_reserve_fd+0x30>
   22886:	bf00      	nop
   22888:	20014a9c 	.word	0x20014a9c
   2288c:	200176a0 	.word	0x200176a0
   22890:	20017698 	.word	0x20017698

00022894 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   22894:	b410      	push	{r4}
   22896:	4604      	mov	r4, r0
   22898:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   2289a:	4b09      	ldr	r3, [pc, #36]	; (228c0 <z_finalize_fd+0x2c>)
   2289c:	0162      	lsls	r2, r4, #5
   2289e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   228a2:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   228a4:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   228a6:	b140      	cbz	r0, 228ba <z_finalize_fd+0x26>
   228a8:	68c4      	ldr	r4, [r0, #12]
   228aa:	b134      	cbz	r4, 228ba <z_finalize_fd+0x26>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   228ac:	320c      	adds	r2, #12
   228ae:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   228b0:	bc10      	pop	{r4}
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   228b2:	f240 1205 	movw	r2, #261	; 0x105
   228b6:	f016 bc48 	b.w	3914a <z_fdtable_call_ioctl.constprop.0>
}
   228ba:	bc10      	pop	{r4}
   228bc:	4770      	bx	lr
   228be:	bf00      	nop
   228c0:	20017698 	.word	0x20017698

000228c4 <z_free_fd>:

void z_free_fd(int fd)
{
   228c4:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   228c6:	490d      	ldr	r1, [pc, #52]	; (228fc <z_free_fd+0x38>)
   228c8:	0140      	lsls	r0, r0, #5
   228ca:	f100 0308 	add.w	r3, r0, #8
   228ce:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   228d0:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   228d4:	b182      	cbz	r2, 228f8 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   228d6:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   228d8:	e8d3 5fef 	ldaex	r5, [r3]
   228dc:	4295      	cmp	r5, r2
   228de:	d104      	bne.n	228ea <z_free_fd+0x26>
   228e0:	e8c3 4fec 	stlex	ip, r4, [r3]
   228e4:	f1bc 0f00 	cmp.w	ip, #0
   228e8:	d1f6      	bne.n	228d8 <z_free_fd+0x14>
   228ea:	d1f1      	bne.n	228d0 <z_free_fd+0xc>
	if (old_rc != 1) {
   228ec:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   228ee:	bf01      	itttt	eq
   228f0:	2300      	moveq	r3, #0
   228f2:	180a      	addeq	r2, r1, r0
   228f4:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   228f6:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   228f8:	bd30      	pop	{r4, r5, pc}
   228fa:	bf00      	nop
   228fc:	20017698 	.word	0x20017698

00022900 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   22900:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22902:	6843      	ldr	r3, [r0, #4]
   22904:	4604      	mov	r4, r0

	return method & SYS_NOTIFY_METHOD_MASK;
   22906:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2290a:	2b02      	cmp	r3, #2
	notify->result = res;
   2290c:	6081      	str	r1, [r0, #8]
	switch (method) {
   2290e:	d00a      	beq.n	22926 <sys_notify_finalize+0x26>
   22910:	2b03      	cmp	r3, #3
   22912:	f04f 0500 	mov.w	r5, #0
   22916:	d003      	beq.n	22920 <sys_notify_finalize+0x20>
   22918:	2b01      	cmp	r3, #1
   2291a:	d10a      	bne.n	22932 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2291c:	6065      	str	r5, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2291e:	e006      	b.n	2292e <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   22920:	6800      	ldr	r0, [r0, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   22922:	6065      	str	r5, [r4, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   22924:	bd38      	pop	{r3, r4, r5, pc}
		sig = notify->method.signal;
   22926:	6800      	ldr	r0, [r0, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   22928:	2300      	movs	r3, #0
   2292a:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2292c:	b960      	cbnz	r0, 22948 <sys_notify_finalize+0x48>
	sys_notify_generic_callback rv = NULL;
   2292e:	2000      	movs	r0, #0
   22930:	e7f8      	b.n	22924 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   22932:	2345      	movs	r3, #69	; 0x45
   22934:	4a06      	ldr	r2, [pc, #24]	; (22950 <sys_notify_finalize+0x50>)
   22936:	4907      	ldr	r1, [pc, #28]	; (22954 <sys_notify_finalize+0x54>)
   22938:	4807      	ldr	r0, [pc, #28]	; (22958 <sys_notify_finalize+0x58>)
   2293a:	f016 fc3e 	bl	391ba <printk>
   2293e:	2145      	movs	r1, #69	; 0x45
   22940:	4803      	ldr	r0, [pc, #12]	; (22950 <sys_notify_finalize+0x50>)
   22942:	f016 fe91 	bl	39668 <assert_post_action>
   22946:	e7e9      	b.n	2291c <sys_notify_finalize+0x1c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   22948:	f014 fd12 	bl	37370 <z_impl_k_poll_signal_raise>
   2294c:	e7ef      	b.n	2292e <sys_notify_finalize+0x2e>
   2294e:	bf00      	nop
   22950:	0003f0be 	.word	0x0003f0be
   22954:	000422ae 	.word	0x000422ae
   22958:	0003f0e1 	.word	0x0003f0e1

0002295c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   2295c:	680b      	ldr	r3, [r1, #0]
   2295e:	3301      	adds	r3, #1
   22960:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   22962:	4b01      	ldr	r3, [pc, #4]	; (22968 <char_out+0xc>)
   22964:	681b      	ldr	r3, [r3, #0]
   22966:	4718      	bx	r3
   22968:	200145c0 	.word	0x200145c0

0002296c <__printk_hook_install>:
	_char_out = fn;
   2296c:	4b01      	ldr	r3, [pc, #4]	; (22974 <__printk_hook_install+0x8>)
   2296e:	6018      	str	r0, [r3, #0]
}
   22970:	4770      	bx	lr
   22972:	bf00      	nop
   22974:	200145c0 	.word	0x200145c0

00022978 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   22978:	b507      	push	{r0, r1, r2, lr}
   2297a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   2297c:	2100      	movs	r1, #0
{
   2297e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   22980:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   22982:	4803      	ldr	r0, [pc, #12]	; (22990 <vprintk+0x18>)
   22984:	a901      	add	r1, sp, #4
   22986:	f000 fd59 	bl	2343c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   2298a:	b003      	add	sp, #12
   2298c:	f85d fb04 	ldr.w	pc, [sp], #4
   22990:	0002295d 	.word	0x0002295d

00022994 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   22994:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   22996:	2500      	movs	r5, #0
{
   22998:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2299a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   2299e:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   229a0:	a901      	add	r1, sp, #4
   229a2:	4805      	ldr	r0, [pc, #20]	; (229b8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   229a4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   229a6:	f000 fd49 	bl	2343c <cbvprintf>

	if (ctx.count < ctx.max) {
   229aa:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   229ae:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   229b0:	bfb8      	it	lt
   229b2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   229b4:	b005      	add	sp, #20
   229b6:	bd30      	pop	{r4, r5, pc}
   229b8:	00039195 	.word	0x00039195

000229bc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   229bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   229c0:	8b85      	ldrh	r5, [r0, #28]
{
   229c2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   229c4:	072b      	lsls	r3, r5, #28
{
   229c6:	4691      	mov	r9, r2
	if (processing) {
   229c8:	d468      	bmi.n	22a9c <process_event+0xe0>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   229ca:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   229cc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   229d0:	f000 81ee 	beq.w	22db0 <process_event+0x3f4>
			evt = process_recheck(mgr);
		}

		if (evt == EVT_NOP) {
   229d4:	46aa      	mov	sl, r5
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
			res = mgr->last_res;
   229d6:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   229da:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   229dc:	f1b8 0f00 	cmp.w	r8, #0
   229e0:	da7c      	bge.n	22adc <process_event+0x120>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   229e2:	2200      	movs	r2, #0
		*clients = mgr->clients;
   229e4:	6826      	ldr	r6, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   229e6:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   229ea:	e9c4 2200 	strd	r2, r2, [r4]
   229ee:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   229f2:	83a3      	strh	r3, [r4, #28]
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   229f4:	8ba3      	ldrh	r3, [r4, #28]
   229f6:	2700      	movs	r7, #0
   229f8:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   229fc:	4555      	cmp	r5, sl
   229fe:	f040 81a6 	bne.w	22d4e <process_event+0x392>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22a02:	f04f 0a00 	mov.w	sl, #0

		evt = EVT_NOP;
		if (do_monitors
		    || !sys_slist_is_empty(&clients)
   22a06:	2e00      	cmp	r6, #0
   22a08:	f000 80f2 	beq.w	22bf0 <process_event+0x234>
		    || (transit != NULL)) {
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   22a0c:	f043 0308 	orr.w	r3, r3, #8

			mgr->flags = flags;
			state = flags & ONOFF_STATE_MASK;

			k_spin_unlock(&mgr->lock, key);
   22a10:	f104 0b14 	add.w	fp, r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a14:	4658      	mov	r0, fp
			mgr->flags = flags;
   22a16:	83a3      	strh	r3, [r4, #28]
   22a18:	f011 fbfa 	bl	34210 <z_spin_unlock_valid>
   22a1c:	b968      	cbnz	r0, 22a3a <process_event+0x7e>
   22a1e:	23ac      	movs	r3, #172	; 0xac
   22a20:	4a93      	ldr	r2, [pc, #588]	; (22c70 <process_event+0x2b4>)
   22a22:	4994      	ldr	r1, [pc, #592]	; (22c74 <process_event+0x2b8>)
   22a24:	4894      	ldr	r0, [pc, #592]	; (22c78 <process_event+0x2bc>)
   22a26:	f016 fbc8 	bl	391ba <printk>
   22a2a:	4659      	mov	r1, fp
   22a2c:	4893      	ldr	r0, [pc, #588]	; (22c7c <process_event+0x2c0>)
   22a2e:	f016 fbc4 	bl	391ba <printk>
   22a32:	21ac      	movs	r1, #172	; 0xac
   22a34:	488e      	ldr	r0, [pc, #568]	; (22c70 <process_event+0x2b4>)
   22a36:	f016 fe17 	bl	39668 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   22a3a:	f389 8811 	msr	BASEPRI, r9
   22a3e:	f3bf 8f6f 	isb	sy

			if (do_monitors) {
   22a42:	f1ba 0f00 	cmp.w	sl, #0
   22a46:	f040 8189 	bne.w	22d5c <process_event+0x3a0>
	while (!sys_slist_is_empty(list)) {
   22a4a:	2e00      	cmp	r6, #0
   22a4c:	f040 819f 	bne.w	22d8e <process_event+0x3d2>

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
			}

			if (transit != NULL) {
   22a50:	b117      	cbz	r7, 22a58 <process_event+0x9c>
				transit(mgr, transition_complete);
   22a52:	4620      	mov	r0, r4
   22a54:	498a      	ldr	r1, [pc, #552]	; (22c80 <process_event+0x2c4>)
   22a56:	47b8      	blx	r7
	__asm__ volatile(
   22a58:	f04f 0320 	mov.w	r3, #32
   22a5c:	f3ef 8911 	mrs	r9, BASEPRI
   22a60:	f383 8811 	msr	BASEPRI, r3
   22a64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a68:	4658      	mov	r0, fp
   22a6a:	f011 fbc3 	bl	341f4 <z_spin_lock_valid>
   22a6e:	b968      	cbnz	r0, 22a8c <process_event+0xd0>
   22a70:	2381      	movs	r3, #129	; 0x81
   22a72:	4a7f      	ldr	r2, [pc, #508]	; (22c70 <process_event+0x2b4>)
   22a74:	4983      	ldr	r1, [pc, #524]	; (22c84 <process_event+0x2c8>)
   22a76:	4880      	ldr	r0, [pc, #512]	; (22c78 <process_event+0x2bc>)
   22a78:	f016 fb9f 	bl	391ba <printk>
   22a7c:	4659      	mov	r1, fp
   22a7e:	4882      	ldr	r0, [pc, #520]	; (22c88 <process_event+0x2cc>)
   22a80:	f016 fb9b 	bl	391ba <printk>
   22a84:	2181      	movs	r1, #129	; 0x81
   22a86:	487a      	ldr	r0, [pc, #488]	; (22c70 <process_event+0x2b4>)
   22a88:	f016 fdee 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a8c:	4658      	mov	r0, fp
   22a8e:	f011 fbcd 	bl	3422c <z_spin_lock_set_owner>
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   22a92:	8ba3      	ldrh	r3, [r4, #28]
   22a94:	f023 0308 	bic.w	r3, r3, #8
   22a98:	83a3      	strh	r3, [r4, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
   22a9a:	e05a      	b.n	22b52 <process_event+0x196>
		if (evt == EVT_COMPLETE) {
   22a9c:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   22a9e:	bf0c      	ite	eq
   22aa0:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   22aa4:	f045 0520 	orrne.w	r5, r5, #32
   22aa8:	8385      	strh	r5, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   22aaa:	3414      	adds	r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22aac:	4620      	mov	r0, r4
   22aae:	f011 fbaf 	bl	34210 <z_spin_unlock_valid>
   22ab2:	b968      	cbnz	r0, 22ad0 <process_event+0x114>
   22ab4:	23ac      	movs	r3, #172	; 0xac
   22ab6:	4a6e      	ldr	r2, [pc, #440]	; (22c70 <process_event+0x2b4>)
   22ab8:	496e      	ldr	r1, [pc, #440]	; (22c74 <process_event+0x2b8>)
   22aba:	486f      	ldr	r0, [pc, #444]	; (22c78 <process_event+0x2bc>)
   22abc:	f016 fb7d 	bl	391ba <printk>
   22ac0:	4621      	mov	r1, r4
   22ac2:	486e      	ldr	r0, [pc, #440]	; (22c7c <process_event+0x2c0>)
   22ac4:	f016 fb79 	bl	391ba <printk>
   22ac8:	21ac      	movs	r1, #172	; 0xac
   22aca:	4869      	ldr	r0, [pc, #420]	; (22c70 <process_event+0x2b4>)
   22acc:	f016 fdcc 	bl	39668 <assert_post_action>
	__asm__ volatile(
   22ad0:	f389 8811 	msr	BASEPRI, r9
   22ad4:	f3bf 8f6f 	isb	sy
}
   22ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22adc:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   22ae0:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   22ae2:	2901      	cmp	r1, #1
   22ae4:	d820      	bhi.n	22b28 <process_event+0x16c>
	list->head = NULL;
   22ae6:	2100      	movs	r1, #0
		if (state == ONOFF_STATE_TO_ON) {
   22ae8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   22aea:	6826      	ldr	r6, [r4, #0]
	list->tail = NULL;
   22aec:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   22af0:	d116      	bne.n	22b20 <process_event+0x164>
		*clients = mgr->clients;
   22af2:	4632      	mov	r2, r6
   22af4:	e003      	b.n	22afe <process_event+0x142>
				mgr->refs += 1U;
   22af6:	8be1      	ldrh	r1, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   22af8:	6812      	ldr	r2, [r2, #0]
   22afa:	3101      	adds	r1, #1
   22afc:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   22afe:	2a00      	cmp	r2, #0
   22b00:	d1f9      	bne.n	22af6 <process_event+0x13a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22b02:	f023 0307 	bic.w	r3, r3, #7
   22b06:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   22b0a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   22b0c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   22b0e:	f016 fb6e 	bl	391ee <process_recheck>
   22b12:	2800      	cmp	r0, #0
   22b14:	f43f af6e 	beq.w	229f4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   22b18:	f042 0220 	orr.w	r2, r2, #32
   22b1c:	83a2      	strh	r2, [r4, #28]
   22b1e:	e769      	b.n	229f4 <process_event+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22b20:	f023 0307 	bic.w	r3, r3, #7
   22b24:	b29a      	uxth	r2, r3
}
   22b26:	e7f0      	b.n	22b0a <process_event+0x14e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   22b28:	2a04      	cmp	r2, #4
   22b2a:	d11e      	bne.n	22b6a <process_event+0x1ae>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22b2c:	f023 0307 	bic.w	r3, r3, #7
   22b30:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   22b32:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   22b34:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   22b36:	f016 fb5a 	bl	391ee <process_recheck>
   22b3a:	b110      	cbz	r0, 22b42 <process_event+0x186>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   22b3c:	f042 0220 	orr.w	r2, r2, #32
   22b40:	83a2      	strh	r2, [r4, #28]
		onoff_transition_fn transit = NULL;
   22b42:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22b44:	8ba3      	ldrh	r3, [r4, #28]
   22b46:	463e      	mov	r6, r7
   22b48:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   22b4c:	4555      	cmp	r5, sl
   22b4e:	f040 80fe 	bne.w	22d4e <process_event+0x392>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   22b52:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   22b56:	f01a 0f10 	tst.w	sl, #16
   22b5a:	f000 8120 	beq.w	22d9e <process_event+0x3e2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   22b5e:	f02a 0310 	bic.w	r3, sl, #16
   22b62:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   22b64:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   22b68:	e735      	b.n	229d6 <process_event+0x1a>
		__ASSERT_NO_MSG(false);
   22b6a:	f240 131b 	movw	r3, #283	; 0x11b
   22b6e:	4a47      	ldr	r2, [pc, #284]	; (22c8c <process_event+0x2d0>)
   22b70:	4947      	ldr	r1, [pc, #284]	; (22c90 <process_event+0x2d4>)
   22b72:	4841      	ldr	r0, [pc, #260]	; (22c78 <process_event+0x2bc>)
   22b74:	f016 fb21 	bl	391ba <printk>
   22b78:	f240 111b 	movw	r1, #283	; 0x11b
   22b7c:	4843      	ldr	r0, [pc, #268]	; (22c8c <process_event+0x2d0>)
   22b7e:	f016 fd73 	bl	39668 <assert_post_action>
   22b82:	e7de      	b.n	22b42 <process_event+0x186>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   22b84:	b15d      	cbz	r5, 22b9e <process_event+0x1e2>
   22b86:	4943      	ldr	r1, [pc, #268]	; (22c94 <process_event+0x2d8>)
   22b88:	483b      	ldr	r0, [pc, #236]	; (22c78 <process_event+0x2bc>)
   22b8a:	f44f 73ab 	mov.w	r3, #342	; 0x156
   22b8e:	4a3f      	ldr	r2, [pc, #252]	; (22c8c <process_event+0x2d0>)
   22b90:	f016 fb13 	bl	391ba <printk>
   22b94:	f44f 71ab 	mov.w	r1, #342	; 0x156
   22b98:	483c      	ldr	r0, [pc, #240]	; (22c8c <process_event+0x2d0>)
   22b9a:	f016 fd65 	bl	39668 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   22b9e:	6823      	ldr	r3, [r4, #0]
   22ba0:	b95b      	cbnz	r3, 22bba <process_event+0x1fe>
   22ba2:	493d      	ldr	r1, [pc, #244]	; (22c98 <process_event+0x2dc>)
   22ba4:	4834      	ldr	r0, [pc, #208]	; (22c78 <process_event+0x2bc>)
   22ba6:	f240 1357 	movw	r3, #343	; 0x157
   22baa:	4a38      	ldr	r2, [pc, #224]	; (22c8c <process_event+0x2d0>)
   22bac:	f016 fb05 	bl	391ba <printk>
   22bb0:	f240 1157 	movw	r1, #343	; 0x157
   22bb4:	4835      	ldr	r0, [pc, #212]	; (22c8c <process_event+0x2d0>)
   22bb6:	f016 fd57 	bl	39668 <assert_post_action>
			transit = mgr->transitions->start;
   22bba:	6923      	ldr	r3, [r4, #16]
   22bbc:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   22bbe:	b95f      	cbnz	r7, 22bd8 <process_event+0x21c>
   22bc0:	4936      	ldr	r1, [pc, #216]	; (22c9c <process_event+0x2e0>)
   22bc2:	482d      	ldr	r0, [pc, #180]	; (22c78 <process_event+0x2bc>)
   22bc4:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   22bc8:	4a30      	ldr	r2, [pc, #192]	; (22c8c <process_event+0x2d0>)
   22bca:	f016 faf6 	bl	391ba <printk>
   22bce:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   22bd2:	482e      	ldr	r0, [pc, #184]	; (22c8c <process_event+0x2d0>)
   22bd4:	f016 fd48 	bl	39668 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22bd8:	8ba3      	ldrh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   22bda:	2d06      	cmp	r5, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22bdc:	f023 0307 	bic.w	r3, r3, #7
   22be0:	f043 0306 	orr.w	r3, r3, #6
   22be4:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   22be6:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   22be8:	f040 80ae 	bne.w	22d48 <process_event+0x38c>
		res = 0;
   22bec:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22bf0:	f04f 0a00 	mov.w	sl, #0
   22bf4:	4656      	mov	r6, sl
		    || (transit != NULL)) {
   22bf6:	2f00      	cmp	r7, #0
   22bf8:	f47f af08 	bne.w	22a0c <process_event+0x50>
   22bfc:	e7a9      	b.n	22b52 <process_event+0x196>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   22bfe:	2d02      	cmp	r5, #2
   22c00:	d00b      	beq.n	22c1a <process_event+0x25e>
   22c02:	4927      	ldr	r1, [pc, #156]	; (22ca0 <process_event+0x2e4>)
   22c04:	481c      	ldr	r0, [pc, #112]	; (22c78 <process_event+0x2bc>)
   22c06:	f240 135d 	movw	r3, #349	; 0x15d
   22c0a:	4a20      	ldr	r2, [pc, #128]	; (22c8c <process_event+0x2d0>)
   22c0c:	f016 fad5 	bl	391ba <printk>
   22c10:	f240 115d 	movw	r1, #349	; 0x15d
   22c14:	481d      	ldr	r0, [pc, #116]	; (22c8c <process_event+0x2d0>)
   22c16:	f016 fd27 	bl	39668 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   22c1a:	8be3      	ldrh	r3, [r4, #30]
   22c1c:	b15b      	cbz	r3, 22c36 <process_event+0x27a>
   22c1e:	4921      	ldr	r1, [pc, #132]	; (22ca4 <process_event+0x2e8>)
   22c20:	4815      	ldr	r0, [pc, #84]	; (22c78 <process_event+0x2bc>)
   22c22:	f44f 73af 	mov.w	r3, #350	; 0x15e
   22c26:	4a19      	ldr	r2, [pc, #100]	; (22c8c <process_event+0x2d0>)
   22c28:	f016 fac7 	bl	391ba <printk>
   22c2c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   22c30:	4816      	ldr	r0, [pc, #88]	; (22c8c <process_event+0x2d0>)
   22c32:	f016 fd19 	bl	39668 <assert_post_action>
			transit = mgr->transitions->stop;
   22c36:	6923      	ldr	r3, [r4, #16]
   22c38:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   22c3a:	b95f      	cbnz	r7, 22c54 <process_event+0x298>
   22c3c:	4917      	ldr	r1, [pc, #92]	; (22c9c <process_event+0x2e0>)
   22c3e:	480e      	ldr	r0, [pc, #56]	; (22c78 <process_event+0x2bc>)
   22c40:	f240 1361 	movw	r3, #353	; 0x161
   22c44:	4a11      	ldr	r2, [pc, #68]	; (22c8c <process_event+0x2d0>)
   22c46:	f016 fab8 	bl	391ba <printk>
   22c4a:	f240 1161 	movw	r1, #353	; 0x161
   22c4e:	480f      	ldr	r0, [pc, #60]	; (22c8c <process_event+0x2d0>)
   22c50:	f016 fd0a 	bl	39668 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22c54:	8ba3      	ldrh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   22c56:	2d04      	cmp	r5, #4
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22c58:	f023 0307 	bic.w	r3, r3, #7
   22c5c:	f043 0304 	orr.w	r3, r3, #4
   22c60:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   22c62:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   22c64:	d0c2      	beq.n	22bec <process_event+0x230>
   22c66:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22c68:	2504      	movs	r5, #4
		res = 0;
   22c6a:	46b0      	mov	r8, r6
   22c6c:	e06f      	b.n	22d4e <process_event+0x392>
   22c6e:	bf00      	nop
   22c70:	0003f1a1 	.word	0x0003f1a1
   22c74:	0003f1c7 	.word	0x0003f1c7
   22c78:	0003f0e1 	.word	0x0003f0e1
   22c7c:	0003f1de 	.word	0x0003f1de
   22c80:	00022df5 	.word	0x00022df5
   22c84:	0003f1f3 	.word	0x0003f1f3
   22c88:	0003f208 	.word	0x0003f208
   22c8c:	0003f0fe 	.word	0x0003f0fe
   22c90:	000422ae 	.word	0x000422ae
   22c94:	0003f120 	.word	0x0003f120
   22c98:	0003f12c 	.word	0x0003f12c
   22c9c:	0003f14f 	.word	0x0003f14f
   22ca0:	0003f166 	.word	0x0003f166
   22ca4:	0003f17c 	.word	0x0003f17c
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   22ca8:	2d01      	cmp	r5, #1
   22caa:	d00b      	beq.n	22cc4 <process_event+0x308>
   22cac:	494b      	ldr	r1, [pc, #300]	; (22ddc <process_event+0x420>)
   22cae:	484c      	ldr	r0, [pc, #304]	; (22de0 <process_event+0x424>)
   22cb0:	f44f 73b2 	mov.w	r3, #356	; 0x164
   22cb4:	4a4b      	ldr	r2, [pc, #300]	; (22de4 <process_event+0x428>)
   22cb6:	f016 fa80 	bl	391ba <printk>
   22cba:	f44f 71b2 	mov.w	r1, #356	; 0x164
   22cbe:	4849      	ldr	r0, [pc, #292]	; (22de4 <process_event+0x428>)
   22cc0:	f016 fcd2 	bl	39668 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   22cc4:	6823      	ldr	r3, [r4, #0]
   22cc6:	b95b      	cbnz	r3, 22ce0 <process_event+0x324>
   22cc8:	4947      	ldr	r1, [pc, #284]	; (22de8 <process_event+0x42c>)
   22cca:	4845      	ldr	r0, [pc, #276]	; (22de0 <process_event+0x424>)
   22ccc:	f240 1365 	movw	r3, #357	; 0x165
   22cd0:	4a44      	ldr	r2, [pc, #272]	; (22de4 <process_event+0x428>)
   22cd2:	f016 fa72 	bl	391ba <printk>
   22cd6:	f240 1165 	movw	r1, #357	; 0x165
   22cda:	4842      	ldr	r0, [pc, #264]	; (22de4 <process_event+0x428>)
   22cdc:	f016 fcc4 	bl	39668 <assert_post_action>
			transit = mgr->transitions->reset;
   22ce0:	6923      	ldr	r3, [r4, #16]
   22ce2:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   22ce4:	b95f      	cbnz	r7, 22cfe <process_event+0x342>
   22ce6:	4941      	ldr	r1, [pc, #260]	; (22dec <process_event+0x430>)
   22ce8:	483d      	ldr	r0, [pc, #244]	; (22de0 <process_event+0x424>)
   22cea:	f44f 73b4 	mov.w	r3, #360	; 0x168
   22cee:	4a3d      	ldr	r2, [pc, #244]	; (22de4 <process_event+0x428>)
   22cf0:	f016 fa63 	bl	391ba <printk>
   22cf4:	f44f 71b4 	mov.w	r1, #360	; 0x168
   22cf8:	483a      	ldr	r0, [pc, #232]	; (22de4 <process_event+0x428>)
   22cfa:	f016 fcb5 	bl	39668 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22cfe:	8ba3      	ldrh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   22d00:	2d05      	cmp	r5, #5
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22d02:	f023 0307 	bic.w	r3, r3, #7
   22d06:	f043 0305 	orr.w	r3, r3, #5
   22d0a:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   22d0c:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   22d0e:	f43f af6d 	beq.w	22bec <process_event+0x230>
   22d12:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22d14:	2505      	movs	r5, #5
		res = 0;
   22d16:	46b0      	mov	r8, r6
   22d18:	e019      	b.n	22d4e <process_event+0x392>
			__ASSERT_NO_MSG(false);
   22d1a:	f240 136b 	movw	r3, #363	; 0x16b
   22d1e:	4a31      	ldr	r2, [pc, #196]	; (22de4 <process_event+0x428>)
   22d20:	4933      	ldr	r1, [pc, #204]	; (22df0 <process_event+0x434>)
   22d22:	482f      	ldr	r0, [pc, #188]	; (22de0 <process_event+0x424>)
   22d24:	f016 fa49 	bl	391ba <printk>
   22d28:	f240 116b 	movw	r1, #363	; 0x16b
   22d2c:	482d      	ldr	r0, [pc, #180]	; (22de4 <process_event+0x428>)
   22d2e:	f016 fc9b 	bl	39668 <assert_post_action>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22d32:	8ba3      	ldrh	r3, [r4, #28]
   22d34:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   22d38:	42aa      	cmp	r2, r5
   22d3a:	f43f af0a 	beq.w	22b52 <process_event+0x196>
   22d3e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22d40:	4615      	mov	r5, r2
		onoff_transition_fn transit = NULL;
   22d42:	4637      	mov	r7, r6
		res = 0;
   22d44:	46b0      	mov	r8, r6
   22d46:	e002      	b.n	22d4e <process_event+0x392>
				   && !sys_slist_is_empty(&mgr->monitors);
   22d48:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22d4a:	2506      	movs	r5, #6
		res = 0;
   22d4c:	46b0      	mov	r8, r6
				   && !sys_slist_is_empty(&mgr->monitors);
   22d4e:	68a2      	ldr	r2, [r4, #8]
   22d50:	2a00      	cmp	r2, #0
   22d52:	f43f ae56 	beq.w	22a02 <process_event+0x46>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22d56:	f04f 0a01 	mov.w	sl, #1
   22d5a:	e657      	b.n	22a0c <process_event+0x50>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   22d5c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   22d5e:	2900      	cmp	r1, #0
   22d60:	f43f ae73 	beq.w	22a4a <process_event+0x8e>
	return node->next;
   22d64:	f8d1 9000 	ldr.w	r9, [r1]
   22d68:	2900      	cmp	r1, #0
   22d6a:	f43f ae6e 	beq.w	22a4a <process_event+0x8e>
		mon->callback(mgr, mon, state, res);
   22d6e:	4643      	mov	r3, r8
   22d70:	462a      	mov	r2, r5
   22d72:	4620      	mov	r0, r4
   22d74:	f8d1 a004 	ldr.w	sl, [r1, #4]
   22d78:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   22d7a:	f1b9 0f00 	cmp.w	r9, #0
   22d7e:	d004      	beq.n	22d8a <process_event+0x3ce>
   22d80:	f8d9 3000 	ldr.w	r3, [r9]
   22d84:	4649      	mov	r1, r9
   22d86:	4699      	mov	r9, r3
   22d88:	e7ee      	b.n	22d68 <process_event+0x3ac>
   22d8a:	464b      	mov	r3, r9
   22d8c:	e7fa      	b.n	22d84 <process_event+0x3c8>
   22d8e:	4631      	mov	r1, r6
		notify_one(mgr, cli, state, res);
   22d90:	4643      	mov	r3, r8
   22d92:	462a      	mov	r2, r5
   22d94:	4620      	mov	r0, r4
   22d96:	6836      	ldr	r6, [r6, #0]
   22d98:	f016 fa55 	bl	39246 <notify_one>
   22d9c:	e655      	b.n	22a4a <process_event+0x8e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   22d9e:	f01a 0f20 	tst.w	sl, #32
   22da2:	f43f ae82 	beq.w	22aaa <process_event+0xee>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   22da6:	f02a 0320 	bic.w	r3, sl, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   22daa:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   22dac:	f00a 0507 	and.w	r5, sl, #7
			evt = process_recheck(mgr);
   22db0:	4620      	mov	r0, r4
   22db2:	f016 fa1c 	bl	391ee <process_recheck>
		if (evt == EVT_NOP) {
   22db6:	2800      	cmp	r0, #0
   22db8:	f43f ae77 	beq.w	22aaa <process_event+0xee>
		if (evt == EVT_COMPLETE) {
   22dbc:	3801      	subs	r0, #1
   22dbe:	2804      	cmp	r0, #4
   22dc0:	d8ab      	bhi.n	22d1a <process_event+0x35e>
   22dc2:	a301      	add	r3, pc, #4	; (adr r3, 22dc8 <process_event+0x40c>)
   22dc4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   22dc8:	000229d5 	.word	0x000229d5
   22dcc:	00022d1b 	.word	0x00022d1b
   22dd0:	00022b85 	.word	0x00022b85
   22dd4:	00022bff 	.word	0x00022bff
   22dd8:	00022ca9 	.word	0x00022ca9
   22ddc:	0003f18b 	.word	0x0003f18b
   22de0:	0003f0e1 	.word	0x0003f0e1
   22de4:	0003f0fe 	.word	0x0003f0fe
   22de8:	0003f12c 	.word	0x0003f12c
   22dec:	0003f14f 	.word	0x0003f14f
   22df0:	000422ae 	.word	0x000422ae

00022df4 <transition_complete>:
{
   22df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22df6:	4604      	mov	r4, r0
   22df8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   22dfa:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   22dfe:	f04f 0320 	mov.w	r3, #32
   22e02:	f3ef 8711 	mrs	r7, BASEPRI
   22e06:	f383 8811 	msr	BASEPRI, r3
   22e0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e0e:	4630      	mov	r0, r6
   22e10:	f011 f9f0 	bl	341f4 <z_spin_lock_valid>
   22e14:	b968      	cbnz	r0, 22e32 <transition_complete+0x3e>
   22e16:	2381      	movs	r3, #129	; 0x81
   22e18:	4a0b      	ldr	r2, [pc, #44]	; (22e48 <transition_complete+0x54>)
   22e1a:	490c      	ldr	r1, [pc, #48]	; (22e4c <transition_complete+0x58>)
   22e1c:	480c      	ldr	r0, [pc, #48]	; (22e50 <transition_complete+0x5c>)
   22e1e:	f016 f9cc 	bl	391ba <printk>
   22e22:	4631      	mov	r1, r6
   22e24:	480b      	ldr	r0, [pc, #44]	; (22e54 <transition_complete+0x60>)
   22e26:	f016 f9c8 	bl	391ba <printk>
   22e2a:	2181      	movs	r1, #129	; 0x81
   22e2c:	4806      	ldr	r0, [pc, #24]	; (22e48 <transition_complete+0x54>)
   22e2e:	f016 fc1b 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   22e32:	4630      	mov	r0, r6
   22e34:	f011 f9fa 	bl	3422c <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   22e38:	463a      	mov	r2, r7
   22e3a:	4620      	mov	r0, r4
	mgr->last_res = res;
   22e3c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   22e3e:	2101      	movs	r1, #1
}
   22e40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   22e44:	f7ff bdba 	b.w	229bc <process_event>
   22e48:	0003f1a1 	.word	0x0003f1a1
   22e4c:	0003f1f3 	.word	0x0003f1f3
   22e50:	0003f0e1 	.word	0x0003f0e1
   22e54:	0003f208 	.word	0x0003f208

00022e58 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   22e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22e5c:	4604      	mov	r4, r0
   22e5e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   22e60:	f016 f9e1 	bl	39226 <validate_args>

	if (rv < 0) {
   22e64:	1e05      	subs	r5, r0, #0
   22e66:	db78      	blt.n	22f5a <onoff_request+0x102>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   22e68:	f104 0914 	add.w	r9, r4, #20
   22e6c:	f04f 0320 	mov.w	r3, #32
   22e70:	f3ef 8a11 	mrs	sl, BASEPRI
   22e74:	f383 8811 	msr	BASEPRI, r3
   22e78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e7c:	4648      	mov	r0, r9
   22e7e:	f011 f9b9 	bl	341f4 <z_spin_lock_valid>
   22e82:	b968      	cbnz	r0, 22ea0 <onoff_request+0x48>
   22e84:	2381      	movs	r3, #129	; 0x81
   22e86:	4a39      	ldr	r2, [pc, #228]	; (22f6c <onoff_request+0x114>)
   22e88:	4939      	ldr	r1, [pc, #228]	; (22f70 <onoff_request+0x118>)
   22e8a:	483a      	ldr	r0, [pc, #232]	; (22f74 <onoff_request+0x11c>)
   22e8c:	f016 f995 	bl	391ba <printk>
   22e90:	4649      	mov	r1, r9
   22e92:	4839      	ldr	r0, [pc, #228]	; (22f78 <onoff_request+0x120>)
   22e94:	f016 f991 	bl	391ba <printk>
   22e98:	2181      	movs	r1, #129	; 0x81
   22e9a:	4834      	ldr	r0, [pc, #208]	; (22f6c <onoff_request+0x114>)
   22e9c:	f016 fbe4 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ea0:	4648      	mov	r0, r9
   22ea2:	f011 f9c3 	bl	3422c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   22ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   22eaa:	8be3      	ldrh	r3, [r4, #30]
   22eac:	8ba6      	ldrh	r6, [r4, #28]
   22eae:	4293      	cmp	r3, r2
   22eb0:	f006 0607 	and.w	r6, r6, #7
   22eb4:	d054      	beq.n	22f60 <onoff_request+0x108>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   22eb6:	2e02      	cmp	r6, #2
   22eb8:	d124      	bne.n	22f04 <onoff_request+0xac>
	rv = state;
   22eba:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   22ebc:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   22ec0:	3301      	adds	r3, #1
   22ec2:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ec4:	4648      	mov	r0, r9
   22ec6:	f011 f9a3 	bl	34210 <z_spin_unlock_valid>
   22eca:	b968      	cbnz	r0, 22ee8 <onoff_request+0x90>
   22ecc:	23ac      	movs	r3, #172	; 0xac
   22ece:	4a27      	ldr	r2, [pc, #156]	; (22f6c <onoff_request+0x114>)
   22ed0:	492a      	ldr	r1, [pc, #168]	; (22f7c <onoff_request+0x124>)
   22ed2:	4828      	ldr	r0, [pc, #160]	; (22f74 <onoff_request+0x11c>)
   22ed4:	f016 f971 	bl	391ba <printk>
   22ed8:	4649      	mov	r1, r9
   22eda:	4829      	ldr	r0, [pc, #164]	; (22f80 <onoff_request+0x128>)
   22edc:	f016 f96d 	bl	391ba <printk>
   22ee0:	21ac      	movs	r1, #172	; 0xac
   22ee2:	4822      	ldr	r0, [pc, #136]	; (22f6c <onoff_request+0x114>)
   22ee4:	f016 fbc0 	bl	39668 <assert_post_action>
	__asm__ volatile(
   22ee8:	f38a 8811 	msr	BASEPRI, sl
   22eec:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   22ef0:	f1b8 0f00 	cmp.w	r8, #0
   22ef4:	d031      	beq.n	22f5a <onoff_request+0x102>
			notify_one(mgr, cli, state, 0);
   22ef6:	2300      	movs	r3, #0
   22ef8:	4632      	mov	r2, r6
   22efa:	4639      	mov	r1, r7
   22efc:	4620      	mov	r0, r4
   22efe:	f016 f9a2 	bl	39246 <notify_one>
   22f02:	e02a      	b.n	22f5a <onoff_request+0x102>
	} else if ((state == ONOFF_STATE_OFF)
   22f04:	2e06      	cmp	r6, #6
   22f06:	d80e      	bhi.n	22f26 <onoff_request+0xce>
   22f08:	e8df f006 	tbb	[pc, r6]
   22f0c:	0d0d1904 	.word	0x0d0d1904
   22f10:	2d04      	.short	0x2d04
   22f12:	04          	.byte	0x04
   22f13:	00          	.byte	0x00
	parent->next = child;
   22f14:	2300      	movs	r3, #0
   22f16:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   22f18:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   22f1a:	b9ab      	cbnz	r3, 22f48 <onoff_request+0xf0>
	list->head = node;
   22f1c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   22f20:	b1ae      	cbz	r6, 22f4e <onoff_request+0xf6>
	rv = state;
   22f22:	4635      	mov	r5, r6
   22f24:	e00d      	b.n	22f42 <onoff_request+0xea>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   22f26:	4917      	ldr	r1, [pc, #92]	; (22f84 <onoff_request+0x12c>)
   22f28:	4812      	ldr	r0, [pc, #72]	; (22f74 <onoff_request+0x11c>)
   22f2a:	f240 13c9 	movw	r3, #457	; 0x1c9
   22f2e:	4a16      	ldr	r2, [pc, #88]	; (22f88 <onoff_request+0x130>)
   22f30:	f016 f943 	bl	391ba <printk>
   22f34:	f240 11c9 	movw	r1, #457	; 0x1c9
   22f38:	4813      	ldr	r0, [pc, #76]	; (22f88 <onoff_request+0x130>)
   22f3a:	f016 fb95 	bl	39668 <assert_post_action>
		rv = -EIO;
   22f3e:	f06f 0504 	mvn.w	r5, #4
	if (state == ONOFF_STATE_ON) {
   22f42:	f04f 0800 	mov.w	r8, #0
   22f46:	e7bd      	b.n	22ec4 <onoff_request+0x6c>
	parent->next = child;
   22f48:	601f      	str	r7, [r3, #0]
	list->tail = node;
   22f4a:	6067      	str	r7, [r4, #4]
}
   22f4c:	e7e8      	b.n	22f20 <onoff_request+0xc8>
		process_event(mgr, EVT_RECHECK, key);
   22f4e:	4652      	mov	r2, sl
   22f50:	2102      	movs	r1, #2
   22f52:	4620      	mov	r0, r4
   22f54:	f7ff fd32 	bl	229bc <process_event>
   22f58:	4635      	mov	r5, r6
		}
	}

	return rv;
}
   22f5a:	4628      	mov	r0, r5
   22f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   22f60:	f06f 050a 	mvn.w	r5, #10
   22f64:	e7ed      	b.n	22f42 <onoff_request+0xea>
	if (state == ONOFF_STATE_ON) {
   22f66:	f06f 0585 	mvn.w	r5, #133	; 0x85
   22f6a:	e7ea      	b.n	22f42 <onoff_request+0xea>
   22f6c:	0003f1a1 	.word	0x0003f1a1
   22f70:	0003f1f3 	.word	0x0003f1f3
   22f74:	0003f0e1 	.word	0x0003f0e1
   22f78:	0003f208 	.word	0x0003f208
   22f7c:	0003f1c7 	.word	0x0003f1c7
   22f80:	0003f1de 	.word	0x0003f1de
   22f84:	0003f18b 	.word	0x0003f18b
   22f88:	0003f0fe 	.word	0x0003f0fe

00022f8c <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   22f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
   22f90:	f240 736c 	movw	r3, #1900	; 0x76c
   22f94:	6944      	ldr	r4, [r0, #20]
	unsigned int m = tm->tm_mon + 1;
   22f96:	6905      	ldr	r5, [r0, #16]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   22f98:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
   22f9a:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   22f9c:	18e4      	adds	r4, r4, r3
   22f9e:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
   22fa2:	2d02      	cmp	r5, #2
   22fa4:	bf8c      	ite	hi
   22fa6:	2300      	movhi	r3, #0
   22fa8:	2301      	movls	r3, #1
   22faa:	1ae4      	subs	r4, r4, r3
	unsigned int d = tm->tm_mday - 1;
   22fac:	68c7      	ldr	r7, [r0, #12]
	y -= m <= 2;
   22fae:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   22fb2:	2900      	cmp	r1, #0
{
   22fb4:	4606      	mov	r6, r0
	unsigned int d = tm->tm_mday - 1;
   22fb6:	f107 37ff 	add.w	r7, r7, #4294967295
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   22fba:	da4e      	bge.n	2305a <timeutil_timegm64+0xce>
   22fbc:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   22fc0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   22fc4:	2300      	movs	r3, #0
   22fc6:	1820      	adds	r0, r4, r0
   22fc8:	f161 0100 	sbc.w	r1, r1, #0
   22fcc:	f7fe f8b4 	bl	21138 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   22fd0:	4b24      	ldr	r3, [pc, #144]	; (23064 <timeutil_timegm64+0xd8>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   22fd2:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   22fd6:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   22fda:	e9d6 8300 	ldrd	r8, r3, [r6]
   22fde:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   22fe2:	4699      	mov	r9, r3
   22fe4:	4663      	mov	r3, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   22fe6:	2d02      	cmp	r5, #2
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   22fe8:	4602      	mov	r2, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   22fea:	bf8c      	ite	hi
   22fec:	f06f 0002 	mvnhi.w	r0, #2
   22ff0:	2009      	movls	r0, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   22ff2:	68b6      	ldr	r6, [r6, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   22ff4:	4405      	add	r5, r0
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   22ff6:	fbc6 930e 	smlal	r9, r3, r6, lr
   22ffa:	fba9 c60e 	umull	ip, r6, r9, lr
   22ffe:	fb0e 6603 	mla	r6, lr, r3, r6
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   23002:	f240 1e6d 	movw	lr, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   23006:	2099      	movs	r0, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   23008:	08a3      	lsrs	r3, r4, #2
   2300a:	fb0e 3304 	mla	r3, lr, r4, r3
   2300e:	443b      	add	r3, r7
   23010:	2764      	movs	r7, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   23012:	4345      	muls	r5, r0
   23014:	2005      	movs	r0, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   23016:	fbb4 f4f7 	udiv	r4, r4, r7
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2301a:	3502      	adds	r5, #2
   2301c:	fbb5 f5f0 	udiv	r5, r5, r0
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   23020:	1b1b      	subs	r3, r3, r4
	return era * 146097 + (time_t)doe - 719468;
   23022:	4c11      	ldr	r4, [pc, #68]	; (23068 <timeutil_timegm64+0xdc>)
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   23024:	eb1c 0c08 	adds.w	ip, ip, r8
	return era * 146097 + (time_t)doe - 719468;
   23028:	fba2 2004 	umull	r2, r0, r2, r4
   2302c:	fb04 0101 	mla	r1, r4, r1, r0
   23030:	480e      	ldr	r0, [pc, #56]	; (2306c <timeutil_timegm64+0xe0>)
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   23032:	eb46 76e8 	adc.w	r6, r6, r8, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   23036:	442b      	add	r3, r5
	return era * 146097 + (time_t)doe - 719468;
   23038:	1812      	adds	r2, r2, r0
   2303a:	f161 0100 	sbc.w	r1, r1, #0
   2303e:	1898      	adds	r0, r3, r2
	time += 86400LL * ndays;
   23040:	4a0b      	ldr	r2, [pc, #44]	; (23070 <timeutil_timegm64+0xe4>)
	return era * 146097 + (time_t)doe - 719468;
   23042:	f141 0300 	adc.w	r3, r1, #0
	time += 86400LL * ndays;
   23046:	fba0 0102 	umull	r0, r1, r0, r2
   2304a:	fb02 1103 	mla	r1, r2, r3, r1
   2304e:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
   23052:	eb41 0106 	adc.w	r1, r1, r6
   23056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   2305a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2305e:	2300      	movs	r3, #0
   23060:	4620      	mov	r0, r4
   23062:	e7b3      	b.n	22fcc <timeutil_timegm64+0x40>
   23064:	fffffe70 	.word	0xfffffe70
   23068:	00023ab1 	.word	0x00023ab1
   2306c:	fff50594 	.word	0xfff50594
   23070:	00015180 	.word	0x00015180

00023074 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   23074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   23076:	460e      	mov	r6, r1
   23078:	2900      	cmp	r1, #0
   2307a:	d043      	beq.n	23104 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   2307c:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2307e:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   23080:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23082:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   23084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23088:	bf34      	ite	cc
   2308a:	2404      	movcc	r4, #4
   2308c:	2408      	movcs	r4, #8
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2308e:	1b0c      	subs	r4, r1, r4
   23090:	1b64      	subs	r4, r4, r5
   23092:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23094:	4621      	mov	r1, r4
   23096:	f016 f909 	bl	392ac <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   2309a:	07c3      	lsls	r3, r0, #31
   2309c:	d40d      	bmi.n	230ba <sys_heap_free+0x46>
   2309e:	239a      	movs	r3, #154	; 0x9a
   230a0:	4a19      	ldr	r2, [pc, #100]	; (23108 <sys_heap_free+0x94>)
   230a2:	491a      	ldr	r1, [pc, #104]	; (2310c <sys_heap_free+0x98>)
   230a4:	481a      	ldr	r0, [pc, #104]	; (23110 <sys_heap_free+0x9c>)
   230a6:	f016 f888 	bl	391ba <printk>
   230aa:	4631      	mov	r1, r6
   230ac:	4819      	ldr	r0, [pc, #100]	; (23114 <sys_heap_free+0xa0>)
   230ae:	f016 f884 	bl	391ba <printk>
   230b2:	219a      	movs	r1, #154	; 0x9a
   230b4:	4814      	ldr	r0, [pc, #80]	; (23108 <sys_heap_free+0x94>)
   230b6:	f016 fad7 	bl	39668 <assert_post_action>
	return c + chunk_size(h, c);
   230ba:	4621      	mov	r1, r4
   230bc:	4628      	mov	r0, r5
   230be:	f016 f90b 	bl	392d8 <chunk_size>
   230c2:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   230c4:	4639      	mov	r1, r7
   230c6:	2200      	movs	r2, #0
   230c8:	4628      	mov	r0, r5
   230ca:	f016 f8ef 	bl	392ac <chunk_field>
   230ce:	1a3f      	subs	r7, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   230d0:	42bc      	cmp	r4, r7
   230d2:	d00d      	beq.n	230f0 <sys_heap_free+0x7c>
   230d4:	23a2      	movs	r3, #162	; 0xa2
   230d6:	4a0c      	ldr	r2, [pc, #48]	; (23108 <sys_heap_free+0x94>)
   230d8:	490f      	ldr	r1, [pc, #60]	; (23118 <sys_heap_free+0xa4>)
   230da:	480d      	ldr	r0, [pc, #52]	; (23110 <sys_heap_free+0x9c>)
   230dc:	f016 f86d 	bl	391ba <printk>
   230e0:	4631      	mov	r1, r6
   230e2:	480e      	ldr	r0, [pc, #56]	; (2311c <sys_heap_free+0xa8>)
   230e4:	f016 f869 	bl	391ba <printk>
   230e8:	21a2      	movs	r1, #162	; 0xa2
   230ea:	4807      	ldr	r0, [pc, #28]	; (23108 <sys_heap_free+0x94>)
   230ec:	f016 fabc 	bl	39668 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   230f0:	4621      	mov	r1, r4
   230f2:	4628      	mov	r0, r5
   230f4:	2200      	movs	r2, #0
   230f6:	f016 f8f5 	bl	392e4 <set_chunk_used>
	free_chunk(h, c);
   230fa:	4621      	mov	r1, r4
}
   230fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   23100:	f016 ba27 	b.w	39552 <free_chunk>
}
   23104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23106:	bf00      	nop
   23108:	0003f220 	.word	0x0003f220
   2310c:	0003f241 	.word	0x0003f241
   23110:	0003f0e1 	.word	0x0003f0e1
   23114:	0003f252 	.word	0x0003f252
   23118:	0003f28a 	.word	0x0003f28a
   2311c:	0003f2b0 	.word	0x0003f2b0

00023120 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   23120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   23124:	6806      	ldr	r6, [r0, #0]
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   23126:	f101 39ff 	add.w	r9, r1, #4294967295
	return big_heap_chunks(h->end_chunk);
   2312a:	68b3      	ldr	r3, [r6, #8]
{
   2312c:	460f      	mov	r7, r1
	return big_heap(h) ? 8 : 4;
   2312e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23132:	bf34      	ite	cc
   23134:	2504      	movcc	r5, #4
   23136:	2508      	movcs	r5, #8
	if (align != rew) {
   23138:	ea19 0901 	ands.w	r9, r9, r1
{
   2313c:	4614      	mov	r4, r2
	if (align != rew) {
   2313e:	d010      	beq.n	23162 <sys_heap_aligned_alloc+0x42>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   23140:	f109 33ff 	add.w	r3, r9, #4294967295
   23144:	ea13 0f09 	tst.w	r3, r9
   23148:	d112      	bne.n	23170 <sys_heap_aligned_alloc+0x50>
	rew = align & -align;
   2314a:	427b      	negs	r3, r7
   2314c:	403b      	ands	r3, r7
   2314e:	429d      	cmp	r5, r3
   23150:	464f      	mov	r7, r9
   23152:	bf28      	it	cs
   23154:	461d      	movcs	r5, r3
   23156:	4699      	mov	r9, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   23158:	b9d4      	cbnz	r4, 23190 <sys_heap_aligned_alloc+0x70>
		return NULL;
   2315a:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   2315c:	4628      	mov	r0, r5
   2315e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   23162:	42a9      	cmp	r1, r5
   23164:	d8f8      	bhi.n	23158 <sys_heap_aligned_alloc+0x38>
}
   23166:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2316a:	4611      	mov	r1, r2
   2316c:	f016 ba33 	b.w	395d6 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   23170:	f240 130d 	movw	r3, #269	; 0x10d
   23174:	4a2c      	ldr	r2, [pc, #176]	; (23228 <sys_heap_aligned_alloc+0x108>)
   23176:	492d      	ldr	r1, [pc, #180]	; (2322c <sys_heap_aligned_alloc+0x10c>)
   23178:	482d      	ldr	r0, [pc, #180]	; (23230 <sys_heap_aligned_alloc+0x110>)
   2317a:	f016 f81e 	bl	391ba <printk>
   2317e:	482d      	ldr	r0, [pc, #180]	; (23234 <sys_heap_aligned_alloc+0x114>)
   23180:	f016 f81b 	bl	391ba <printk>
   23184:	f240 110d 	movw	r1, #269	; 0x10d
   23188:	4827      	ldr	r0, [pc, #156]	; (23228 <sys_heap_aligned_alloc+0x108>)
   2318a:	f016 fa6d 	bl	39668 <assert_post_action>
   2318e:	e7dc      	b.n	2314a <sys_heap_aligned_alloc+0x2a>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   23190:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0 || size_too_big(h, bytes)) {
   23192:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
   23196:	d9e0      	bls.n	2315a <sys_heap_aligned_alloc+0x3a>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   23198:	19e1      	adds	r1, r4, r7
   2319a:	1b49      	subs	r1, r1, r5
   2319c:	f016 f8be 	bl	3931c <bytes_to_chunksz.isra.0>
   231a0:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   231a2:	4630      	mov	r0, r6
   231a4:	f016 f914 	bl	393d0 <alloc_chunk>
	if (c0 == 0) {
   231a8:	4680      	mov	r8, r0
   231aa:	2800      	cmp	r0, #0
   231ac:	d0d5      	beq.n	2315a <sys_heap_aligned_alloc+0x3a>
	return big_heap(h) ? 8 : 4;
   231ae:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   231b0:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   231b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   231b8:	bf34      	ite	cc
   231ba:	2304      	movcc	r3, #4
   231bc:	2308      	movcs	r3, #8
   231be:	441d      	add	r5, r3
   231c0:	1e7a      	subs	r2, r7, #1
   231c2:	4435      	add	r5, r6
   231c4:	427f      	negs	r7, r7
   231c6:	4415      	add	r5, r2
   231c8:	403d      	ands	r5, r7
   231ca:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   231ce:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   231d0:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   231d2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   231d4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   231d6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   231da:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   231dc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   231e0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   231e4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   231e8:	d208      	bcs.n	231fc <sys_heap_aligned_alloc+0xdc>
		split_chunks(h, c0, c);
   231ea:	4601      	mov	r1, r0
   231ec:	463a      	mov	r2, r7
   231ee:	4630      	mov	r0, r6
   231f0:	f016 f928 	bl	39444 <split_chunks>
		free_list_add(h, c0);
   231f4:	4641      	mov	r1, r8
   231f6:	4630      	mov	r0, r6
   231f8:	f016 f969 	bl	394ce <free_list_add>
	return c + chunk_size(h, c);
   231fc:	4639      	mov	r1, r7
   231fe:	4630      	mov	r0, r6
   23200:	f016 f86a 	bl	392d8 <chunk_size>
   23204:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   23206:	4284      	cmp	r4, r0
   23208:	d208      	bcs.n	2321c <sys_heap_aligned_alloc+0xfc>
		split_chunks(h, c, c_end);
   2320a:	4639      	mov	r1, r7
   2320c:	4630      	mov	r0, r6
   2320e:	4622      	mov	r2, r4
   23210:	f016 f918 	bl	39444 <split_chunks>
		free_list_add(h, c_end);
   23214:	4621      	mov	r1, r4
   23216:	4630      	mov	r0, r6
   23218:	f016 f959 	bl	394ce <free_list_add>
	set_chunk_used(h, c, true);
   2321c:	2201      	movs	r2, #1
   2321e:	4639      	mov	r1, r7
   23220:	4630      	mov	r0, r6
   23222:	f016 f85f 	bl	392e4 <set_chunk_used>
	return mem;
   23226:	e799      	b.n	2315c <sys_heap_aligned_alloc+0x3c>
   23228:	0003f220 	.word	0x0003f220
   2322c:	0003f2ec 	.word	0x0003f2ec
   23230:	0003f0e1 	.word	0x0003f0e1
   23234:	0003f307 	.word	0x0003f307

00023238 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   23238:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2323e:	4607      	mov	r7, r0
   23240:	460c      	mov	r4, r1
   23242:	4616      	mov	r6, r2
   23244:	f080 8085 	bcs.w	23352 <sys_heap_init+0x11a>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   23248:	2a04      	cmp	r2, #4
   2324a:	d972      	bls.n	23332 <sys_heap_init+0xfa>
   2324c:	2304      	movs	r3, #4
	bytes -= heap_footer_bytes(bytes);
   2324e:	1af6      	subs	r6, r6, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23250:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23252:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23254:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23258:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2325c:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   2325e:	2c17      	cmp	r4, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   23260:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   23264:	d80e      	bhi.n	23284 <sys_heap_init+0x4c>
   23266:	493e      	ldr	r1, [pc, #248]	; (23360 <sys_heap_init+0x128>)
   23268:	f240 138b 	movw	r3, #395	; 0x18b
   2326c:	4a3d      	ldr	r2, [pc, #244]	; (23364 <sys_heap_init+0x12c>)
   2326e:	483e      	ldr	r0, [pc, #248]	; (23368 <sys_heap_init+0x130>)
   23270:	f015 ffa3 	bl	391ba <printk>
   23274:	483d      	ldr	r0, [pc, #244]	; (2336c <sys_heap_init+0x134>)
   23276:	f015 ffa0 	bl	391ba <printk>
   2327a:	f240 118b 	movw	r1, #395	; 0x18b
   2327e:	4839      	ldr	r0, [pc, #228]	; (23364 <sys_heap_init+0x12c>)
   23280:	f016 f9f2 	bl	39668 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   23284:	2300      	movs	r3, #0
	heap->heap = h;
   23286:	603d      	str	r5, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   23288:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   2328a:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2328c:	4630      	mov	r0, r6
	h->end_chunk = heap_sz;
   2328e:	60ae      	str	r6, [r5, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   23290:	f016 f84d 	bl	3932e <bucket_idx.isra.0>
	return bytes_to_chunksz(h, 1);
   23294:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   23296:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   23298:	1c47      	adds	r7, r0, #1
   2329a:	4630      	mov	r0, r6
   2329c:	f016 f83e 	bl	3931c <bytes_to_chunksz.isra.0>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   232a0:	341b      	adds	r4, #27
   232a2:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   232a4:	4420      	add	r0, r4
   232a6:	42b0      	cmp	r0, r6
   232a8:	d90e      	bls.n	232c8 <sys_heap_init+0x90>
   232aa:	4931      	ldr	r1, [pc, #196]	; (23370 <sys_heap_init+0x138>)
   232ac:	f44f 73cb 	mov.w	r3, #406	; 0x196
   232b0:	4a2c      	ldr	r2, [pc, #176]	; (23364 <sys_heap_init+0x12c>)
   232b2:	482d      	ldr	r0, [pc, #180]	; (23368 <sys_heap_init+0x130>)
   232b4:	f015 ff81 	bl	391ba <printk>
   232b8:	482c      	ldr	r0, [pc, #176]	; (2336c <sys_heap_init+0x134>)
   232ba:	f015 ff7e 	bl	391ba <printk>
   232be:	f44f 71cb 	mov.w	r1, #406	; 0x196
   232c2:	4828      	ldr	r0, [pc, #160]	; (23364 <sys_heap_init+0x12c>)
   232c4:	f016 f9d0 	bl	39668 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   232c8:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   232ca:	4619      	mov	r1, r3
   232cc:	f105 020c 	add.w	r2, r5, #12
	for (int i = 0; i < nb_buckets; i++) {
   232d0:	42bb      	cmp	r3, r7
   232d2:	db40      	blt.n	23356 <sys_heap_init+0x11e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   232d4:	4622      	mov	r2, r4
   232d6:	4628      	mov	r0, r5
   232d8:	2100      	movs	r1, #0
   232da:	f016 f81b 	bl	39314 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   232de:	2300      	movs	r3, #0
   232e0:	4628      	mov	r0, r5
   232e2:	461a      	mov	r2, r3
   232e4:	4619      	mov	r1, r3
   232e6:	f015 ffec 	bl	392c2 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   232ea:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
   232ec:	4619      	mov	r1, r3
   232ee:	4628      	mov	r0, r5
   232f0:	2201      	movs	r2, #1
   232f2:	f015 fff7 	bl	392e4 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   232f6:	463a      	mov	r2, r7
   232f8:	4621      	mov	r1, r4
   232fa:	f016 f80b 	bl	39314 <set_chunk_size>
   232fe:	4623      	mov	r3, r4
   23300:	2200      	movs	r2, #0
   23302:	4621      	mov	r1, r4
   23304:	4628      	mov	r0, r5
   23306:	f015 ffdc 	bl	392c2 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   2330a:	4631      	mov	r1, r6
   2330c:	4628      	mov	r0, r5
   2330e:	f016 f801 	bl	39314 <set_chunk_size>
   23312:	463b      	mov	r3, r7
   23314:	4631      	mov	r1, r6
   23316:	4628      	mov	r0, r5
   23318:	2200      	movs	r2, #0
   2331a:	f015 ffd2 	bl	392c2 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   2331e:	4631      	mov	r1, r6
   23320:	4628      	mov	r0, r5
   23322:	2201      	movs	r2, #1
   23324:	f015 ffde 	bl	392e4 <set_chunk_used>

	free_list_add(h, chunk0_size);
   23328:	4621      	mov	r1, r4
}
   2332a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   2332e:	f016 b8ce 	b.w	394ce <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   23332:	f44f 73c1 	mov.w	r3, #386	; 0x182
   23336:	4a0b      	ldr	r2, [pc, #44]	; (23364 <sys_heap_init+0x12c>)
   23338:	490e      	ldr	r1, [pc, #56]	; (23374 <sys_heap_init+0x13c>)
   2333a:	480b      	ldr	r0, [pc, #44]	; (23368 <sys_heap_init+0x130>)
   2333c:	f015 ff3d 	bl	391ba <printk>
   23340:	480a      	ldr	r0, [pc, #40]	; (2336c <sys_heap_init+0x134>)
   23342:	f015 ff3a 	bl	391ba <printk>
   23346:	f44f 71c1 	mov.w	r1, #386	; 0x182
   2334a:	4806      	ldr	r0, [pc, #24]	; (23364 <sys_heap_init+0x12c>)
   2334c:	f016 f98c 	bl	39668 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   23350:	e77c      	b.n	2324c <sys_heap_init+0x14>
   23352:	2308      	movs	r3, #8
   23354:	e77b      	b.n	2324e <sys_heap_init+0x16>
		h->buckets[i].next = 0;
   23356:	f842 1f04 	str.w	r1, [r2, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   2335a:	3301      	adds	r3, #1
   2335c:	e7b8      	b.n	232d0 <sys_heap_init+0x98>
   2335e:	bf00      	nop
   23360:	0003f35e 	.word	0x0003f35e
   23364:	0003f220 	.word	0x0003f220
   23368:	0003f0e1 	.word	0x0003f0e1
   2336c:	0003f345 	.word	0x0003f345
   23370:	0003f387 	.word	0x0003f387
   23374:	0003f324 	.word	0x0003f324

00023378 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   23378:	b5f0      	push	{r4, r5, r6, r7, lr}
   2337a:	4602      	mov	r2, r0
   2337c:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   2337e:	270a      	movs	r7, #10
	size_t val = 0;
   23380:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   23382:	4e07      	ldr	r6, [pc, #28]	; (233a0 <extract_decimal+0x28>)
   23384:	460b      	mov	r3, r1
   23386:	781c      	ldrb	r4, [r3, #0]
   23388:	3101      	adds	r1, #1
   2338a:	5d35      	ldrb	r5, [r6, r4]
   2338c:	076d      	lsls	r5, r5, #29
   2338e:	d401      	bmi.n	23394 <extract_decimal+0x1c>
	}
	*str = sp;
   23390:	6013      	str	r3, [r2, #0]
	return val;
}
   23392:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   23394:	fb07 4300 	mla	r3, r7, r0, r4
   23398:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2339c:	e7f2      	b.n	23384 <extract_decimal+0xc>
   2339e:	bf00      	nop
   233a0:	000431d6 	.word	0x000431d6

000233a4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   233a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233a8:	4615      	mov	r5, r2
   233aa:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   233ac:	78d3      	ldrb	r3, [r2, #3]
   233ae:	4a22      	ldr	r2, [pc, #136]	; (23438 <encode_uint+0x94>)
	switch (specifier) {
   233b0:	2b6f      	cmp	r3, #111	; 0x6f
   233b2:	f812 b003 	ldrb.w	fp, [r2, r3]
{
   233b6:	4680      	mov	r8, r0
   233b8:	460f      	mov	r7, r1
   233ba:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   233be:	d029      	beq.n	23414 <encode_uint+0x70>
   233c0:	d824      	bhi.n	2340c <encode_uint+0x68>
		return 10;
   233c2:	2b58      	cmp	r3, #88	; 0x58
   233c4:	bf0c      	ite	eq
   233c6:	2610      	moveq	r6, #16
   233c8:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   233ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   233ce:	4632      	mov	r2, r6
   233d0:	2300      	movs	r3, #0
   233d2:	4640      	mov	r0, r8
   233d4:	4639      	mov	r1, r7
   233d6:	f7fd feff 	bl	211d8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   233da:	2a09      	cmp	r2, #9
   233dc:	b2d4      	uxtb	r4, r2
   233de:	d81e      	bhi.n	2341e <encode_uint+0x7a>
   233e0:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   233e2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   233e4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   233e6:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   233ea:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   233ee:	d301      	bcc.n	233f4 <encode_uint+0x50>
   233f0:	45d1      	cmp	r9, sl
   233f2:	d811      	bhi.n	23418 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   233f4:	782b      	ldrb	r3, [r5, #0]
   233f6:	069b      	lsls	r3, r3, #26
   233f8:	d505      	bpl.n	23406 <encode_uint+0x62>
		if (radix == 8) {
   233fa:	2e08      	cmp	r6, #8
   233fc:	d115      	bne.n	2342a <encode_uint+0x86>
			conv->altform_0 = true;
   233fe:	78ab      	ldrb	r3, [r5, #2]
   23400:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   23404:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   23406:	4648      	mov	r0, r9
   23408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2340c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   23410:	2b70      	cmp	r3, #112	; 0x70
   23412:	e7d7      	b.n	233c4 <encode_uint+0x20>
	switch (specifier) {
   23414:	2608      	movs	r6, #8
   23416:	e7d8      	b.n	233ca <encode_uint+0x26>
		value /= radix;
   23418:	4680      	mov	r8, r0
   2341a:	460f      	mov	r7, r1
   2341c:	e7d7      	b.n	233ce <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2341e:	f1bb 0f01 	cmp.w	fp, #1
   23422:	bf0c      	ite	eq
   23424:	3437      	addeq	r4, #55	; 0x37
   23426:	3457      	addne	r4, #87	; 0x57
   23428:	e7db      	b.n	233e2 <encode_uint+0x3e>
		} else if (radix == 16) {
   2342a:	2e10      	cmp	r6, #16
   2342c:	d1eb      	bne.n	23406 <encode_uint+0x62>
			conv->altform_0c = true;
   2342e:	78ab      	ldrb	r3, [r5, #2]
   23430:	f043 0310 	orr.w	r3, r3, #16
   23434:	e7e6      	b.n	23404 <encode_uint+0x60>
   23436:	bf00      	nop
   23438:	000431d6 	.word	0x000431d6

0002343c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   2343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23440:	4682      	mov	sl, r0
   23442:	4617      	mov	r7, r2
   23444:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   23446:	2500      	movs	r5, #0
{
   23448:	b097      	sub	sp, #92	; 0x5c
   2344a:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   2344c:	7838      	ldrb	r0, [r7, #0]
   2344e:	b908      	cbnz	r0, 23454 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   23450:	4628      	mov	r0, r5
   23452:	e349      	b.n	23ae8 <_flash_used+0x1b0>
			OUTC(*fp++);
   23454:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   23456:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   23458:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
   2345a:	d006      	beq.n	2346a <cbvprintf+0x2e>
			OUTC('%');
   2345c:	9903      	ldr	r1, [sp, #12]
   2345e:	47d0      	blx	sl
   23460:	2800      	cmp	r0, #0
   23462:	f2c0 8341 	blt.w	23ae8 <_flash_used+0x1b0>
   23466:	3501      	adds	r5, #1
		if (bps == NULL) {
   23468:	e1f9      	b.n	2385e <cbvprintf+0x422>
		} state = {
   2346a:	2218      	movs	r2, #24
   2346c:	2100      	movs	r1, #0
   2346e:	a810      	add	r0, sp, #64	; 0x40
   23470:	f01a f909 	bl	3d686 <memset>
	if (*sp == '%') {
   23474:	787b      	ldrb	r3, [r7, #1]
   23476:	2b25      	cmp	r3, #37	; 0x25
   23478:	f000 80a3 	beq.w	235c2 <cbvprintf+0x186>
   2347c:	2300      	movs	r3, #0
   2347e:	4698      	mov	r8, r3
   23480:	469e      	mov	lr, r3
   23482:	469c      	mov	ip, r3
   23484:	4618      	mov	r0, r3
   23486:	1c79      	adds	r1, r7, #1
   23488:	460e      	mov	r6, r1
		switch (*sp) {
   2348a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2348e:	2a2b      	cmp	r2, #43	; 0x2b
   23490:	f000 80c6 	beq.w	23620 <cbvprintf+0x1e4>
   23494:	f200 80bd 	bhi.w	23612 <cbvprintf+0x1d6>
   23498:	2a20      	cmp	r2, #32
   2349a:	f000 80c4 	beq.w	23626 <cbvprintf+0x1ea>
   2349e:	2a23      	cmp	r2, #35	; 0x23
   234a0:	f000 80c4 	beq.w	2362c <cbvprintf+0x1f0>
   234a4:	b12b      	cbz	r3, 234b2 <cbvprintf+0x76>
   234a6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   234aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   234ae:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   234b2:	f1b8 0f00 	cmp.w	r8, #0
   234b6:	d005      	beq.n	234c4 <cbvprintf+0x88>
   234b8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   234bc:	f043 0320 	orr.w	r3, r3, #32
   234c0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   234c4:	f1be 0f00 	cmp.w	lr, #0
   234c8:	d005      	beq.n	234d6 <cbvprintf+0x9a>
   234ca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   234ce:	f043 0310 	orr.w	r3, r3, #16
   234d2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   234d6:	f1bc 0f00 	cmp.w	ip, #0
   234da:	d005      	beq.n	234e8 <cbvprintf+0xac>
   234dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   234e0:	f043 0308 	orr.w	r3, r3, #8
   234e4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   234e8:	b128      	cbz	r0, 234f6 <cbvprintf+0xba>
   234ea:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   234ee:	f043 0304 	orr.w	r3, r3, #4
   234f2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   234f6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   234fa:	f003 0144 	and.w	r1, r3, #68	; 0x44
   234fe:	2944      	cmp	r1, #68	; 0x44
   23500:	d103      	bne.n	2350a <cbvprintf+0xce>
		conv->flag_zero = false;
   23502:	f36f 1386 	bfc	r3, #6, #1
   23506:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   2350a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   2350e:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   23510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23514:	9609      	str	r6, [sp, #36]	; 0x24
   23516:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   2351a:	f040 808c 	bne.w	23636 <cbvprintf+0x1fa>
		conv->width_star = true;
   2351e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   23522:	f043 0301 	orr.w	r3, r3, #1
   23526:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   2352a:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
   2352c:	781a      	ldrb	r2, [r3, #0]
   2352e:	2a2e      	cmp	r2, #46	; 0x2e
   23530:	bf0c      	ite	eq
   23532:	2101      	moveq	r1, #1
   23534:	2100      	movne	r1, #0
   23536:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   2353a:	f361 0241 	bfi	r2, r1, #1, #1
   2353e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   23542:	d10c      	bne.n	2355e <cbvprintf+0x122>
	++sp;
   23544:	1c5a      	adds	r2, r3, #1
   23546:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   23548:	785a      	ldrb	r2, [r3, #1]
   2354a:	2a2a      	cmp	r2, #42	; 0x2a
   2354c:	f040 8083 	bne.w	23656 <cbvprintf+0x21a>
		conv->prec_star = true;
   23550:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   23554:	3302      	adds	r3, #2
		conv->prec_star = true;
   23556:	f042 0204 	orr.w	r2, r2, #4
   2355a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
   2355e:	781a      	ldrb	r2, [r3, #0]
   23560:	2a6c      	cmp	r2, #108	; 0x6c
   23562:	f000 80a4 	beq.w	236ae <cbvprintf+0x272>
   23566:	f200 8086 	bhi.w	23676 <cbvprintf+0x23a>
   2356a:	2a68      	cmp	r2, #104	; 0x68
   2356c:	f000 808c 	beq.w	23688 <cbvprintf+0x24c>
   23570:	2a6a      	cmp	r2, #106	; 0x6a
   23572:	f000 80a5 	beq.w	236c0 <cbvprintf+0x284>
   23576:	2a4c      	cmp	r2, #76	; 0x4c
   23578:	f000 80aa 	beq.w	236d0 <cbvprintf+0x294>
	conv->specifier = *sp++;
   2357c:	461a      	mov	r2, r3
   2357e:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
   23582:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
   23584:	9204      	str	r2, [sp, #16]
   23586:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
   2358a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
   2358e:	f200 8117 	bhi.w	237c0 <cbvprintf+0x384>
   23592:	2b6d      	cmp	r3, #109	; 0x6d
   23594:	f200 80a9 	bhi.w	236ea <cbvprintf+0x2ae>
   23598:	2b69      	cmp	r3, #105	; 0x69
   2359a:	f200 8111 	bhi.w	237c0 <cbvprintf+0x384>
   2359e:	2b57      	cmp	r3, #87	; 0x57
   235a0:	f200 80be 	bhi.w	23720 <cbvprintf+0x2e4>
   235a4:	2b41      	cmp	r3, #65	; 0x41
   235a6:	d003      	beq.n	235b0 <cbvprintf+0x174>
   235a8:	3b45      	subs	r3, #69	; 0x45
   235aa:	2b02      	cmp	r3, #2
   235ac:	f200 8108 	bhi.w	237c0 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_FP;
   235b0:	2204      	movs	r2, #4
   235b2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   235b6:	f362 0302 	bfi	r3, r2, #0, #3
   235ba:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
   235be:	2301      	movs	r3, #1
			break;
   235c0:	e0ca      	b.n	23758 <cbvprintf+0x31c>
		conv->specifier = *sp++;
   235c2:	1cba      	adds	r2, r7, #2
   235c4:	9204      	str	r2, [sp, #16]
   235c6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   235ca:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   235ce:	07da      	lsls	r2, r3, #31
   235d0:	f140 80fd 	bpl.w	237ce <cbvprintf+0x392>
			width = va_arg(ap, int);
   235d4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   235d8:	f1b9 0f00 	cmp.w	r9, #0
   235dc:	da07      	bge.n	235ee <cbvprintf+0x1b2>
				conv->flag_dash = true;
   235de:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
   235e2:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   235e6:	f042 0204 	orr.w	r2, r2, #4
   235ea:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
   235ee:	075e      	lsls	r6, r3, #29
   235f0:	f140 80f6 	bpl.w	237e0 <cbvprintf+0x3a4>
			int arg = va_arg(ap, int);
   235f4:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   235f8:	f1bb 0f00 	cmp.w	fp, #0
   235fc:	f280 80f5 	bge.w	237ea <cbvprintf+0x3ae>
				conv->prec_present = false;
   23600:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   23604:	f36f 0341 	bfc	r3, #1, #1
   23608:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   2360c:	f04f 3bff 	mov.w	fp, #4294967295
   23610:	e0eb      	b.n	237ea <cbvprintf+0x3ae>
		switch (*sp) {
   23612:	2a2d      	cmp	r2, #45	; 0x2d
   23614:	d00d      	beq.n	23632 <cbvprintf+0x1f6>
   23616:	2a30      	cmp	r2, #48	; 0x30
   23618:	f47f af44 	bne.w	234a4 <cbvprintf+0x68>
   2361c:	2301      	movs	r3, #1
	} while (loop);
   2361e:	e733      	b.n	23488 <cbvprintf+0x4c>
		switch (*sp) {
   23620:	f04f 0c01 	mov.w	ip, #1
   23624:	e730      	b.n	23488 <cbvprintf+0x4c>
   23626:	f04f 0e01 	mov.w	lr, #1
   2362a:	e72d      	b.n	23488 <cbvprintf+0x4c>
   2362c:	f04f 0801 	mov.w	r8, #1
   23630:	e72a      	b.n	23488 <cbvprintf+0x4c>
   23632:	2001      	movs	r0, #1
   23634:	e728      	b.n	23488 <cbvprintf+0x4c>
	size_t width = extract_decimal(&sp);
   23636:	a809      	add	r0, sp, #36	; 0x24
   23638:	f7ff fe9e 	bl	23378 <extract_decimal>
	if (sp != wp) {
   2363c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2363e:	42b3      	cmp	r3, r6
   23640:	f43f af74 	beq.w	2352c <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
   23644:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   23648:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   2364a:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   2364c:	f360 0241 	bfi	r2, r0, #1, #1
   23650:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   23654:	e76a      	b.n	2352c <cbvprintf+0xf0>
	size_t prec = extract_decimal(&sp);
   23656:	a809      	add	r0, sp, #36	; 0x24
   23658:	f7ff fe8e 	bl	23378 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   2365c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   23660:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   23662:	f3c3 0240 	ubfx	r2, r3, #1, #1
   23666:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   2366a:	f362 0341 	bfi	r3, r2, #1, #1
   2366e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   23672:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23674:	e773      	b.n	2355e <cbvprintf+0x122>
	switch (*sp) {
   23676:	2a74      	cmp	r2, #116	; 0x74
   23678:	d026      	beq.n	236c8 <cbvprintf+0x28c>
   2367a:	2a7a      	cmp	r2, #122	; 0x7a
   2367c:	f47f af7e 	bne.w	2357c <cbvprintf+0x140>
		conv->length_mod = LENGTH_Z;
   23680:	2106      	movs	r1, #6
   23682:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   23686:	e00c      	b.n	236a2 <cbvprintf+0x266>
		if (*++sp == 'h') {
   23688:	785a      	ldrb	r2, [r3, #1]
   2368a:	2a68      	cmp	r2, #104	; 0x68
   2368c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   23690:	d106      	bne.n	236a0 <cbvprintf+0x264>
			conv->length_mod = LENGTH_HH;
   23692:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   23694:	f361 02c6 	bfi	r2, r1, #3, #4
   23698:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   2369c:	3302      	adds	r3, #2
   2369e:	e76d      	b.n	2357c <cbvprintf+0x140>
			conv->length_mod = LENGTH_H;
   236a0:	2102      	movs	r1, #2
   236a2:	f361 02c6 	bfi	r2, r1, #3, #4
   236a6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   236aa:	3301      	adds	r3, #1
   236ac:	e766      	b.n	2357c <cbvprintf+0x140>
		if (*++sp == 'l') {
   236ae:	785a      	ldrb	r2, [r3, #1]
   236b0:	2a6c      	cmp	r2, #108	; 0x6c
   236b2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   236b6:	d101      	bne.n	236bc <cbvprintf+0x280>
			conv->length_mod = LENGTH_LL;
   236b8:	2104      	movs	r1, #4
   236ba:	e7eb      	b.n	23694 <cbvprintf+0x258>
			conv->length_mod = LENGTH_L;
   236bc:	2103      	movs	r1, #3
   236be:	e7f0      	b.n	236a2 <cbvprintf+0x266>
		conv->length_mod = LENGTH_J;
   236c0:	2105      	movs	r1, #5
   236c2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   236c6:	e7ec      	b.n	236a2 <cbvprintf+0x266>
		conv->length_mod = LENGTH_T;
   236c8:	2107      	movs	r1, #7
   236ca:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   236ce:	e7e8      	b.n	236a2 <cbvprintf+0x266>
		conv->unsupported = true;
   236d0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   236d4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   236d8:	f022 0202 	bic.w	r2, r2, #2
   236dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   236e0:	f042 0202 	orr.w	r2, r2, #2
   236e4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   236e8:	e7df      	b.n	236aa <cbvprintf+0x26e>
	switch (conv->specifier) {
   236ea:	3b6e      	subs	r3, #110	; 0x6e
   236ec:	b2d9      	uxtb	r1, r3
   236ee:	2301      	movs	r3, #1
   236f0:	408b      	lsls	r3, r1
   236f2:	f240 4182 	movw	r1, #1154	; 0x482
   236f6:	420b      	tst	r3, r1
   236f8:	d138      	bne.n	2376c <cbvprintf+0x330>
   236fa:	f013 0f24 	tst.w	r3, #36	; 0x24
   236fe:	d152      	bne.n	237a6 <cbvprintf+0x36a>
   23700:	07d8      	lsls	r0, r3, #31
   23702:	d55d      	bpl.n	237c0 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
   23704:	2103      	movs	r1, #3
   23706:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   2370a:	f361 0302 	bfi	r3, r1, #0, #3
   2370e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   23712:	f002 0378 	and.w	r3, r2, #120	; 0x78
   23716:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   2371a:	424b      	negs	r3, r1
   2371c:	414b      	adcs	r3, r1
   2371e:	e01b      	b.n	23758 <cbvprintf+0x31c>
   23720:	2001      	movs	r0, #1
	switch (conv->specifier) {
   23722:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   23726:	b2c9      	uxtb	r1, r1
   23728:	fa00 f101 	lsl.w	r1, r0, r1
   2372c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   23730:	f47f af3e 	bne.w	235b0 <cbvprintf+0x174>
   23734:	f640 0601 	movw	r6, #2049	; 0x801
   23738:	4231      	tst	r1, r6
   2373a:	d11d      	bne.n	23778 <cbvprintf+0x33c>
   2373c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   23740:	d03e      	beq.n	237c0 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
   23742:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   23746:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   2374a:	f002 0278 	and.w	r2, r2, #120	; 0x78
   2374e:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   23750:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   23754:	d034      	beq.n	237c0 <cbvprintf+0x384>
	bool unsupported = false;
   23756:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   23758:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   2375c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   23760:	430b      	orrs	r3, r1
   23762:	f363 0241 	bfi	r2, r3, #1, #1
   23766:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   2376a:	e72e      	b.n	235ca <cbvprintf+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
   2376c:	2102      	movs	r1, #2
   2376e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   23772:	f361 0302 	bfi	r3, r1, #0, #3
   23776:	e7e8      	b.n	2374a <cbvprintf+0x30e>
   23778:	2002      	movs	r0, #2
   2377a:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   2377e:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   23782:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   23786:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   23788:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   2378c:	bf02      	ittt	eq
   2378e:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   23792:	f041 0101 	orreq.w	r1, r1, #1
   23796:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   2379a:	2b63      	cmp	r3, #99	; 0x63
   2379c:	d1db      	bne.n	23756 <cbvprintf+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   2379e:	1e13      	subs	r3, r2, #0
   237a0:	bf18      	it	ne
   237a2:	2301      	movne	r3, #1
   237a4:	e7d8      	b.n	23758 <cbvprintf+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
   237a6:	2103      	movs	r1, #3
   237a8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   237ac:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   237b0:	f361 0302 	bfi	r3, r1, #0, #3
   237b4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   237b8:	bf14      	ite	ne
   237ba:	2301      	movne	r3, #1
   237bc:	2300      	moveq	r3, #0
   237be:	e7cb      	b.n	23758 <cbvprintf+0x31c>
		conv->invalid = true;
   237c0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   237c4:	f043 0301 	orr.w	r3, r3, #1
   237c8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   237cc:	e7c3      	b.n	23756 <cbvprintf+0x31a>
		} else if (conv->width_present) {
   237ce:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   237d2:	2a00      	cmp	r2, #0
		int width = -1;
   237d4:	bfac      	ite	ge
   237d6:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   237da:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
   237de:	e706      	b.n	235ee <cbvprintf+0x1b2>
		} else if (conv->prec_present) {
   237e0:	0798      	lsls	r0, r3, #30
   237e2:	f57f af13 	bpl.w	2360c <cbvprintf+0x1d0>
			precision = conv->prec_value;
   237e6:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   237ea:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   237ec:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
   237f0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
   237f4:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
   237f8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   237fc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   237fe:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   23802:	d133      	bne.n	2386c <cbvprintf+0x430>
			switch (length_mod) {
   23804:	1ecb      	subs	r3, r1, #3
   23806:	2b04      	cmp	r3, #4
   23808:	d804      	bhi.n	23814 <cbvprintf+0x3d8>
   2380a:	e8df f003 	tbb	[pc, r3]
   2380e:	4610      	.short	0x4610
   23810:	1046      	.short	0x1046
   23812:	10          	.byte	0x10
   23813:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   23814:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   23816:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   23818:	ea4f 72e3 	mov.w	r2, r3, asr #31
   2381c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   23820:	d10b      	bne.n	2383a <cbvprintf+0x3fe>
				value->sint = (char)value->sint;
   23822:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   23826:	9310      	str	r3, [sp, #64]	; 0x40
   23828:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
   2382a:	9311      	str	r3, [sp, #68]	; 0x44
   2382c:	e007      	b.n	2383e <cbvprintf+0x402>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   2382e:	f854 3b04 	ldr.w	r3, [r4], #4
   23832:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   23834:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   23838:	e002      	b.n	23840 <cbvprintf+0x404>
			} else if (length_mod == LENGTH_H) {
   2383a:	2902      	cmp	r1, #2
   2383c:	d011      	beq.n	23862 <cbvprintf+0x426>
				value->sint = va_arg(ap, int);
   2383e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   23840:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   23844:	f013 0603 	ands.w	r6, r3, #3
   23848:	d047      	beq.n	238da <cbvprintf+0x49e>
			OUTS(sp, fp);
   2384a:	463a      	mov	r2, r7
   2384c:	4650      	mov	r0, sl
   2384e:	9b04      	ldr	r3, [sp, #16]
   23850:	9903      	ldr	r1, [sp, #12]
   23852:	f015 fef2 	bl	3963a <outs>
   23856:	2800      	cmp	r0, #0
   23858:	f2c0 8146 	blt.w	23ae8 <_flash_used+0x1b0>
   2385c:	4405      	add	r5, r0
			continue;
   2385e:	9f04      	ldr	r7, [sp, #16]
   23860:	e5f4      	b.n	2344c <cbvprintf+0x10>
				value->sint = (short)value->sint;
   23862:	b21a      	sxth	r2, r3
   23864:	9210      	str	r2, [sp, #64]	; 0x40
   23866:	f343 33c0 	sbfx	r3, r3, #15, #1
   2386a:	e7de      	b.n	2382a <cbvprintf+0x3ee>
		} else if (specifier_cat == SPECIFIER_UINT) {
   2386c:	2b02      	cmp	r3, #2
   2386e:	d124      	bne.n	238ba <cbvprintf+0x47e>
			switch (length_mod) {
   23870:	1ecb      	subs	r3, r1, #3
   23872:	2b04      	cmp	r3, #4
   23874:	d804      	bhi.n	23880 <cbvprintf+0x444>
   23876:	e8df f003 	tbb	[pc, r3]
   2387a:	1018      	.short	0x1018
   2387c:	1810      	.short	0x1810
   2387e:	18          	.byte	0x18
   2387f:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   23880:	2901      	cmp	r1, #1
   23882:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
   23886:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   2388a:	d014      	beq.n	238b6 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
   2388c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   2388e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   23892:	d1d5      	bne.n	23840 <cbvprintf+0x404>
				value->uint = (unsigned short)value->uint;
   23894:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   23896:	9310      	str	r3, [sp, #64]	; 0x40
   23898:	e7d2      	b.n	23840 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap,
   2389a:	3407      	adds	r4, #7
   2389c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   238a0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   238a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   238a8:	e7ca      	b.n	23840 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap, size_t);
   238aa:	f854 3b04 	ldr.w	r3, [r4], #4
   238ae:	9310      	str	r3, [sp, #64]	; 0x40
   238b0:	2300      	movs	r3, #0
   238b2:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   238b4:	e7c4      	b.n	23840 <cbvprintf+0x404>
				value->uint = (unsigned char)value->uint;
   238b6:	b2db      	uxtb	r3, r3
   238b8:	e7bc      	b.n	23834 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_FP) {
   238ba:	2b04      	cmp	r3, #4
   238bc:	d108      	bne.n	238d0 <cbvprintf+0x494>
					(sint_value_type)va_arg(ap, long long);
   238be:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   238c0:	f024 0407 	bic.w	r4, r4, #7
   238c4:	e9d4 2300 	ldrd	r2, r3, [r4]
   238c8:	3408      	adds	r4, #8
   238ca:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   238ce:	e7b7      	b.n	23840 <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_PTR) {
   238d0:	2b03      	cmp	r3, #3
   238d2:	d1b5      	bne.n	23840 <cbvprintf+0x404>
			value->ptr = va_arg(ap, void *);
   238d4:	f854 3b04 	ldr.w	r3, [r4], #4
   238d8:	e7dd      	b.n	23896 <cbvprintf+0x45a>
		switch (conv->specifier) {
   238da:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   238de:	2878      	cmp	r0, #120	; 0x78
   238e0:	d8bd      	bhi.n	2385e <cbvprintf+0x422>
   238e2:	2862      	cmp	r0, #98	; 0x62
   238e4:	d81c      	bhi.n	23920 <cbvprintf+0x4e4>
   238e6:	2825      	cmp	r0, #37	; 0x25
   238e8:	f43f adb8 	beq.w	2345c <cbvprintf+0x20>
   238ec:	2858      	cmp	r0, #88	; 0x58
   238ee:	d1b6      	bne.n	2385e <cbvprintf+0x422>
			bps = encode_uint(value->uint, conv, buf, bpe);
   238f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   238f4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   238f8:	9300      	str	r3, [sp, #0]
   238fa:	aa12      	add	r2, sp, #72	; 0x48
   238fc:	ab0a      	add	r3, sp, #40	; 0x28
   238fe:	f7ff fd51 	bl	233a4 <encode_uint>
			if (precision >= 0) {
   23902:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   23906:	4607      	mov	r7, r0
			if (precision >= 0) {
   23908:	f280 8097 	bge.w	23a3a <_flash_used+0x102>
		if (bps == NULL) {
   2390c:	2f00      	cmp	r7, #0
   2390e:	d0a6      	beq.n	2385e <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
   23910:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   23914:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
   23918:	2e00      	cmp	r6, #0
   2391a:	d04e      	beq.n	239ba <_flash_used+0x82>
			nj_len += 1U;
   2391c:	3001      	adds	r0, #1
   2391e:	e04c      	b.n	239ba <_flash_used+0x82>
		switch (conv->specifier) {
   23920:	3863      	subs	r0, #99	; 0x63
   23922:	2815      	cmp	r0, #21
   23924:	d89b      	bhi.n	2385e <cbvprintf+0x422>
   23926:	a201      	add	r2, pc, #4	; (adr r2, 2392c <cbvprintf+0x4f0>)
   23928:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   2392c:	000239ab 	.word	0x000239ab
   23930:	00023a11 	.word	0x00023a11
   23934:	0002385f 	.word	0x0002385f
   23938:	0002385f 	.word	0x0002385f
   2393c:	0002385f 	.word	0x0002385f
   23940:	0002385f 	.word	0x0002385f
   23944:	00023a11 	.word	0x00023a11
   23948:	0002385f 	.word	0x0002385f
   2394c:	0002385f 	.word	0x0002385f
   23950:	0002385f 	.word	0x0002385f
   23954:	0002385f 	.word	0x0002385f
   23958:	00023a99 	.word	0x00023a99
   2395c:	00023a35 	.word	0x00023a35
   23960:	00023a5b 	.word	0x00023a5b
   23964:	0002385f 	.word	0x0002385f
   23968:	0002385f 	.word	0x0002385f
   2396c:	00023985 	.word	0x00023985
   23970:	0002385f 	.word	0x0002385f
   23974:	00023a35 	.word	0x00023a35
   23978:	0002385f 	.word	0x0002385f
   2397c:	0002385f 	.word	0x0002385f
   23980:	00023a35 	.word	0x00023a35
			if (precision >= 0) {
   23984:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
   23988:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
   2398a:	db0a      	blt.n	239a2 <_flash_used+0x6a>
				len = strnlen(bps, precision);
   2398c:	4659      	mov	r1, fp
   2398e:	4638      	mov	r0, r7
   23990:	f019 fffd 	bl	3d98e <strnlen>
			bpe = bps + len;
   23994:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
   23998:	2f00      	cmp	r7, #0
   2399a:	f43f af60 	beq.w	2385e <cbvprintf+0x422>
		char sign = 0;
   2399e:	2600      	movs	r6, #0
   239a0:	e00b      	b.n	239ba <_flash_used+0x82>
				len = strlen(bps);
   239a2:	4638      	mov	r0, r7
   239a4:	f7fd fe63 	bl	2166e <strlen>
   239a8:	e7f4      	b.n	23994 <_flash_used+0x5c>
		char sign = 0;
   239aa:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
   239ac:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   239ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
   239b0:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   239b4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
   239b8:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
   239ba:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   239be:	f013 0210 	ands.w	r2, r3, #16
   239c2:	9205      	str	r2, [sp, #20]
   239c4:	f000 8083 	beq.w	23ace <_flash_used+0x196>
			nj_len += 2U;
   239c8:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   239ca:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   239cc:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
   239d0:	bf48      	it	mi
   239d2:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   239d4:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
   239d6:	bf48      	it	mi
   239d8:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   239da:	f1b9 0f00 	cmp.w	r9, #0
   239de:	f340 8090 	ble.w	23b02 <_flash_used+0x1ca>
			if (!conv->flag_dash) {
   239e2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   239e6:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
   239ea:	f3c2 0380 	ubfx	r3, r2, #2, #1
   239ee:	0750      	lsls	r0, r2, #29
   239f0:	9306      	str	r3, [sp, #24]
   239f2:	f100 8086 	bmi.w	23b02 <_flash_used+0x1ca>
				if (conv->flag_zero) {
   239f6:	0651      	lsls	r1, r2, #25
   239f8:	d579      	bpl.n	23aee <_flash_used+0x1b6>
					if (sign != 0) {
   239fa:	b13e      	cbz	r6, 23a0c <_flash_used+0xd4>
						OUTC(sign);
   239fc:	4630      	mov	r0, r6
   239fe:	9903      	ldr	r1, [sp, #12]
   23a00:	47d0      	blx	sl
   23a02:	2800      	cmp	r0, #0
   23a04:	db70      	blt.n	23ae8 <_flash_used+0x1b0>
   23a06:	9b06      	ldr	r3, [sp, #24]
   23a08:	3501      	adds	r5, #1
   23a0a:	461e      	mov	r6, r3
					pad = '0';
   23a0c:	2230      	movs	r2, #48	; 0x30
   23a0e:	e06f      	b.n	23af0 <_flash_used+0x1b8>
			if (conv->flag_plus) {
   23a10:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   23a12:	bf5a      	itte	pl
   23a14:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   23a18:	015e      	lslpl	r6, r3, #5
				sign = '+';
   23a1a:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
   23a1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
   23a20:	2b00      	cmp	r3, #0
   23a22:	f6bf af65 	bge.w	238f0 <cbvprintf+0x4b4>
				value->uint = (uint_value_type)-sint;
   23a26:	4252      	negs	r2, r2
   23a28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   23a2c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   23a2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   23a32:	e75d      	b.n	238f0 <cbvprintf+0x4b4>
		switch (conv->specifier) {
   23a34:	2600      	movs	r6, #0
   23a36:	e75b      	b.n	238f0 <cbvprintf+0x4b4>
		char sign = 0;
   23a38:	2600      	movs	r6, #0
				conv->flag_zero = false;
   23a3a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   23a3e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   23a42:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   23a44:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   23a48:	459b      	cmp	fp, r3
				conv->flag_zero = false;
   23a4a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   23a4e:	f67f af5d 	bls.w	2390c <cbvprintf+0x4d0>
					conv->pad0_value = precision - (int)len;
   23a52:	ebab 0303 	sub.w	r3, fp, r3
   23a56:	9313      	str	r3, [sp, #76]	; 0x4c
   23a58:	e758      	b.n	2390c <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
   23a5a:	9810      	ldr	r0, [sp, #64]	; 0x40
   23a5c:	b380      	cbz	r0, 23ac0 <_flash_used+0x188>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   23a5e:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
   23a62:	ab0a      	add	r3, sp, #40	; 0x28
   23a64:	2100      	movs	r1, #0
   23a66:	f8cd 8000 	str.w	r8, [sp]
   23a6a:	aa12      	add	r2, sp, #72	; 0x48
   23a6c:	f7ff fc9a 	bl	233a4 <encode_uint>
				conv->altform_0c = true;
   23a70:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   23a74:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
   23a78:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   23a7c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   23a80:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   23a84:	4607      	mov	r7, r0
				conv->altform_0c = true;
   23a86:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
   23a8a:	dad5      	bge.n	23a38 <_flash_used+0x100>
		if (bps == NULL) {
   23a8c:	2800      	cmp	r0, #0
   23a8e:	f43f aee6 	beq.w	2385e <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
   23a92:	eba8 0000 	sub.w	r0, r8, r0
   23a96:	e782      	b.n	2399e <_flash_used+0x66>
				store_count(conv, value->ptr, count);
   23a98:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   23a9a:	2907      	cmp	r1, #7
   23a9c:	f63f aedf 	bhi.w	2385e <cbvprintf+0x422>
   23aa0:	e8df f001 	tbb	[pc, r1]
   23aa4:	0c06040c 	.word	0x0c06040c
   23aa8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   23aac:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   23aae:	e6d6      	b.n	2385e <cbvprintf+0x422>
		*(short *)dp = (short)count;
   23ab0:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   23ab2:	e6d4      	b.n	2385e <cbvprintf+0x422>
		*(intmax_t *)dp = (intmax_t)count;
   23ab4:	17ea      	asrs	r2, r5, #31
   23ab6:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   23aba:	e6d0      	b.n	2385e <cbvprintf+0x422>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   23abc:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   23abe:	e6ce      	b.n	2385e <cbvprintf+0x422>
			bpe = bps + 5;
   23ac0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23b80 <_flash_used+0x248>
		char sign = 0;
   23ac4:	4606      	mov	r6, r0
   23ac6:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
   23aca:	2005      	movs	r0, #5
   23acc:	e775      	b.n	239ba <_flash_used+0x82>
		} else if (conv->altform_0) {
   23ace:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   23ad0:	bf48      	it	mi
   23ad2:	3001      	addmi	r0, #1
   23ad4:	e779      	b.n	239ca <_flash_used+0x92>
					OUTC(pad);
   23ad6:	4610      	mov	r0, r2
   23ad8:	9307      	str	r3, [sp, #28]
   23ada:	9206      	str	r2, [sp, #24]
   23adc:	9903      	ldr	r1, [sp, #12]
   23ade:	47d0      	blx	sl
   23ae0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   23ae4:	2800      	cmp	r0, #0
   23ae6:	da04      	bge.n	23af2 <_flash_used+0x1ba>
#undef OUTS
#undef OUTC
}
   23ae8:	b017      	add	sp, #92	; 0x5c
   23aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   23aee:	2220      	movs	r2, #32
					pad = '0';
   23af0:	464b      	mov	r3, r9
				while (width-- > 0) {
   23af2:	4619      	mov	r1, r3
   23af4:	2900      	cmp	r1, #0
   23af6:	f103 33ff 	add.w	r3, r3, #4294967295
   23afa:	dcec      	bgt.n	23ad6 <_flash_used+0x19e>
   23afc:	444d      	add	r5, r9
   23afe:	4699      	mov	r9, r3
   23b00:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
   23b02:	b12e      	cbz	r6, 23b10 <_flash_used+0x1d8>
			OUTC(sign);
   23b04:	4630      	mov	r0, r6
   23b06:	9903      	ldr	r1, [sp, #12]
   23b08:	47d0      	blx	sl
   23b0a:	2800      	cmp	r0, #0
   23b0c:	dbec      	blt.n	23ae8 <_flash_used+0x1b0>
   23b0e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   23b10:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   23b14:	06da      	lsls	r2, r3, #27
   23b16:	d401      	bmi.n	23b1c <_flash_used+0x1e4>
   23b18:	071b      	lsls	r3, r3, #28
   23b1a:	d505      	bpl.n	23b28 <_flash_used+0x1f0>
				OUTC('0');
   23b1c:	2030      	movs	r0, #48	; 0x30
   23b1e:	9903      	ldr	r1, [sp, #12]
   23b20:	47d0      	blx	sl
   23b22:	2800      	cmp	r0, #0
   23b24:	dbe0      	blt.n	23ae8 <_flash_used+0x1b0>
   23b26:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   23b28:	9b05      	ldr	r3, [sp, #20]
   23b2a:	b133      	cbz	r3, 23b3a <_flash_used+0x202>
				OUTC(conv->specifier);
   23b2c:	9903      	ldr	r1, [sp, #12]
   23b2e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   23b32:	47d0      	blx	sl
   23b34:	2800      	cmp	r0, #0
   23b36:	dbd7      	blt.n	23ae8 <_flash_used+0x1b0>
   23b38:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   23b3a:	44ab      	add	fp, r5
   23b3c:	e005      	b.n	23b4a <_flash_used+0x212>
				OUTC('0');
   23b3e:	2030      	movs	r0, #48	; 0x30
   23b40:	9903      	ldr	r1, [sp, #12]
   23b42:	47d0      	blx	sl
   23b44:	2800      	cmp	r0, #0
   23b46:	dbcf      	blt.n	23ae8 <_flash_used+0x1b0>
   23b48:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   23b4a:	ebab 0305 	sub.w	r3, fp, r5
   23b4e:	2b00      	cmp	r3, #0
   23b50:	dcf5      	bgt.n	23b3e <_flash_used+0x206>
			OUTS(bps, bpe);
   23b52:	4643      	mov	r3, r8
   23b54:	463a      	mov	r2, r7
   23b56:	4650      	mov	r0, sl
   23b58:	9903      	ldr	r1, [sp, #12]
   23b5a:	f015 fd6e 	bl	3963a <outs>
   23b5e:	2800      	cmp	r0, #0
   23b60:	dbc2      	blt.n	23ae8 <_flash_used+0x1b0>
   23b62:	4405      	add	r5, r0
		while (width > 0) {
   23b64:	44a9      	add	r9, r5
   23b66:	eba9 0305 	sub.w	r3, r9, r5
   23b6a:	2b00      	cmp	r3, #0
   23b6c:	f77f ae77 	ble.w	2385e <cbvprintf+0x422>
			OUTC(' ');
   23b70:	2020      	movs	r0, #32
   23b72:	9903      	ldr	r1, [sp, #12]
   23b74:	47d0      	blx	sl
   23b76:	2800      	cmp	r0, #0
   23b78:	dbb6      	blt.n	23ae8 <_flash_used+0x1b0>
   23b7a:	3501      	adds	r5, #1
			--width;
   23b7c:	e7f3      	b.n	23b66 <_flash_used+0x22e>
   23b7e:	bf00      	nop
   23b80:	0003f3b7 	.word	0x0003f3b7

00023b84 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   23b84:	f04f 0220 	mov.w	r2, #32
   23b88:	f3ef 8311 	mrs	r3, BASEPRI
   23b8c:	f382 8811 	msr	BASEPRI, r2
   23b90:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   23b94:	2101      	movs	r1, #1
   23b96:	4a04      	ldr	r2, [pc, #16]	; (23ba8 <nordicsemi_nrf91_init+0x24>)
   23b98:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   23b9c:	f383 8811 	msr	BASEPRI, r3
   23ba0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   23ba4:	2000      	movs	r0, #0
   23ba6:	4770      	bx	lr
   23ba8:	40039000 	.word	0x40039000

00023bac <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   23bac:	b120      	cbz	r0, 23bb8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   23bae:	4b03      	ldr	r3, [pc, #12]	; (23bbc <arch_busy_wait+0x10>)
   23bb0:	0180      	lsls	r0, r0, #6
   23bb2:	f043 0301 	orr.w	r3, r3, #1
   23bb6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   23bb8:	4770      	bx	lr
   23bba:	bf00      	nop
   23bbc:	0003e660 	.word	0x0003e660

00023bc0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   23bc0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   23bc2:	2200      	movs	r2, #0
{
   23bc4:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   23bc6:	490f      	ldr	r1, [pc, #60]	; (23c04 <enable_logger+0x44>)
   23bc8:	480f      	ldr	r0, [pc, #60]	; (23c08 <enable_logger+0x48>)
   23bca:	f019 fca8 	bl	3d51e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23bce:	2200      	movs	r2, #0
   23bd0:	2300      	movs	r3, #0
   23bd2:	2400      	movs	r4, #0
   23bd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23bd8:	230e      	movs	r3, #14
   23bda:	4d0c      	ldr	r5, [pc, #48]	; (23c0c <enable_logger+0x4c>)
   23bdc:	e9cd 3403 	strd	r3, r4, [sp, #12]
   23be0:	f44f 7240 	mov.w	r2, #768	; 0x300
   23be4:	4628      	mov	r0, r5
   23be6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23bea:	4b09      	ldr	r3, [pc, #36]	; (23c10 <enable_logger+0x50>)
   23bec:	4909      	ldr	r1, [pc, #36]	; (23c14 <enable_logger+0x54>)
   23bee:	9400      	str	r4, [sp, #0]
   23bf0:	f010 fa28 	bl	34044 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   23bf4:	4908      	ldr	r1, [pc, #32]	; (23c18 <enable_logger+0x58>)
   23bf6:	4628      	mov	r0, r5
   23bf8:	f019 fbf7 	bl	3d3ea <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   23bfc:	4620      	mov	r0, r4
   23bfe:	b009      	add	sp, #36	; 0x24
   23c00:	bd30      	pop	{r4, r5, pc}
   23c02:	bf00      	nop
   23c04:	00023c1d 	.word	0x00023c1d
   23c08:	20014c60 	.word	0x20014c60
   23c0c:	20014be0 	.word	0x20014be0
   23c10:	00024055 	.word	0x00024055
   23c14:	20019270 	.word	0x20019270
   23c18:	0003f3bc 	.word	0x0003f3bc

00023c1c <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   23c1c:	4801      	ldr	r0, [pc, #4]	; (23c24 <log_process_thread_timer_expiry_fn+0x8>)
   23c1e:	f010 be4d 	b.w	348bc <z_impl_k_sem_give>
   23c22:	bf00      	nop
   23c24:	20014b90 	.word	0x20014b90

00023c28 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   23c28:	2920      	cmp	r1, #32
{
   23c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23c2c:	4605      	mov	r5, r0
   23c2e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   23c30:	d909      	bls.n	23c46 <z_log_get_s_mask+0x1e>
   23c32:	4913      	ldr	r1, [pc, #76]	; (23c80 <z_log_get_s_mask+0x58>)
   23c34:	4813      	ldr	r0, [pc, #76]	; (23c84 <z_log_get_s_mask+0x5c>)
   23c36:	2380      	movs	r3, #128	; 0x80
   23c38:	4a13      	ldr	r2, [pc, #76]	; (23c88 <z_log_get_s_mask+0x60>)
   23c3a:	f015 fabe 	bl	391ba <printk>
   23c3e:	2180      	movs	r1, #128	; 0x80
   23c40:	4811      	ldr	r0, [pc, #68]	; (23c88 <z_log_get_s_mask+0x60>)
   23c42:	f015 fd11 	bl	39668 <assert_post_action>
			arm = false;
   23c46:	2000      	movs	r0, #0
   23c48:	4603      	mov	r3, r0
   23c4a:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   23c4c:	4e0f      	ldr	r6, [pc, #60]	; (23c8c <z_log_get_s_mask+0x64>)
	while ((curr = *str++) && arg < nargs) {
   23c4e:	f815 1b01 	ldrb.w	r1, [r5], #1
   23c52:	b109      	cbz	r1, 23c58 <z_log_get_s_mask+0x30>
   23c54:	42a3      	cmp	r3, r4
   23c56:	d300      	bcc.n	23c5a <z_log_get_s_mask+0x32>
}
   23c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   23c5a:	2925      	cmp	r1, #37	; 0x25
   23c5c:	d102      	bne.n	23c64 <z_log_get_s_mask+0x3c>
			arm = !arm;
   23c5e:	f082 0201 	eor.w	r2, r2, #1
   23c62:	e7f4      	b.n	23c4e <z_log_get_s_mask+0x26>
		} else if (arm && isalpha((int)curr)) {
   23c64:	2a00      	cmp	r2, #0
   23c66:	d0f2      	beq.n	23c4e <z_log_get_s_mask+0x26>
   23c68:	5c77      	ldrb	r7, [r6, r1]
   23c6a:	07bf      	lsls	r7, r7, #30
   23c6c:	d0ef      	beq.n	23c4e <z_log_get_s_mask+0x26>
			if (curr == 's') {
   23c6e:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   23c70:	bf02      	ittt	eq
   23c72:	2201      	moveq	r2, #1
   23c74:	409a      	lsleq	r2, r3
   23c76:	4310      	orreq	r0, r2
			arg++;
   23c78:	3301      	adds	r3, #1
			arm = false;
   23c7a:	2200      	movs	r2, #0
   23c7c:	e7e7      	b.n	23c4e <z_log_get_s_mask+0x26>
   23c7e:	bf00      	nop
   23c80:	0003f3f1 	.word	0x0003f3f1
   23c84:	0003f0e1 	.word	0x0003f0e1
   23c88:	0003f3c4 	.word	0x0003f3c4
   23c8c:	000431d6 	.word	0x000431d6

00023c90 <log_core_init>:
	panic_mode = false;
   23c90:	2200      	movs	r2, #0
{
   23c92:	b510      	push	{r4, lr}
	panic_mode = false;
   23c94:	4b0a      	ldr	r3, [pc, #40]	; (23cc0 <log_core_init+0x30>)
	log_output_timestamp_freq_set(freq);
   23c96:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
   23c9a:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   23c9c:	4b09      	ldr	r3, [pc, #36]	; (23cc4 <log_core_init+0x34>)
   23c9e:	4a0a      	ldr	r2, [pc, #40]	; (23cc8 <log_core_init+0x38>)
   23ca0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   23ca2:	f000 fdaf 	bl	24804 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   23ca6:	f000 faa9 	bl	241fc <log_msg_pool_init>
		log_list_init(&list);
   23caa:	4808      	ldr	r0, [pc, #32]	; (23ccc <log_core_init+0x3c>)
   23cac:	f015 fd02 	bl	396b4 <log_list_init>
}
   23cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   23cb4:	2304      	movs	r3, #4
   23cb6:	2234      	movs	r2, #52	; 0x34
   23cb8:	4905      	ldr	r1, [pc, #20]	; (23cd0 <log_core_init+0x40>)
   23cba:	4806      	ldr	r0, [pc, #24]	; (23cd4 <log_core_init+0x44>)
   23cbc:	f019 bb73 	b.w	3d3a6 <k_mem_slab_init>
   23cc0:	200180df 	.word	0x200180df
   23cc4:	200145c4 	.word	0x200145c4
   23cc8:	000396f3 	.word	0x000396f3
   23ccc:	20017728 	.word	0x20017728
   23cd0:	2001c070 	.word	0x2001c070
   23cd4:	20017730 	.word	0x20017730

00023cd8 <get_msg>:
{
   23cd8:	b510      	push	{r4, lr}
	__asm__ volatile(
   23cda:	f04f 0320 	mov.w	r3, #32
   23cde:	f3ef 8411 	mrs	r4, BASEPRI
   23ce2:	f383 8811 	msr	BASEPRI, r3
   23ce6:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   23cea:	4804      	ldr	r0, [pc, #16]	; (23cfc <get_msg+0x24>)
   23cec:	f015 fcf2 	bl	396d4 <log_list_head_get>
	__asm__ volatile(
   23cf0:	f384 8811 	msr	BASEPRI, r4
   23cf4:	f3bf 8f6f 	isb	sy
}
   23cf8:	bd10      	pop	{r4, pc}
   23cfa:	bf00      	nop
   23cfc:	20017728 	.word	0x20017728

00023d00 <z_log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23d00:	4b04      	ldr	r3, [pc, #16]	; (23d14 <z_log_dropped+0x14>)
   23d02:	e8d3 1fef 	ldaex	r1, [r3]
   23d06:	3101      	adds	r1, #1
   23d08:	e8c3 1fe2 	stlex	r2, r1, [r3]
   23d0c:	2a00      	cmp	r2, #0
   23d0e:	d1f8      	bne.n	23d02 <z_log_dropped+0x2>
}
   23d10:	4770      	bx	lr
   23d12:	bf00      	nop
   23d14:	2001771c 	.word	0x2001771c

00023d18 <z_log_dropped_read_and_clear>:
}
   23d18:	2000      	movs	r0, #0
   23d1a:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23d1c:	4b03      	ldr	r3, [pc, #12]	; (23d2c <z_log_dropped_read_and_clear+0x14>)
   23d1e:	e8d3 0fef 	ldaex	r0, [r3]
   23d22:	e8c3 1fe2 	stlex	r2, r1, [r3]
   23d26:	2a00      	cmp	r2, #0
   23d28:	d1f9      	bne.n	23d1e <z_log_dropped_read_and_clear+0x6>
   23d2a:	4770      	bx	lr
   23d2c:	2001771c 	.word	0x2001771c

00023d30 <dropped_notify>:
{
   23d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   23d32:	f7ff fff1 	bl	23d18 <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
   23d36:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
   23d38:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   23d3a:	4c09      	ldr	r4, [pc, #36]	; (23d60 <dropped_notify+0x30>)
   23d3c:	4d09      	ldr	r5, [pc, #36]	; (23d64 <dropped_notify+0x34>)
   23d3e:	1b2d      	subs	r5, r5, r4
   23d40:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   23d42:	42ae      	cmp	r6, r5
   23d44:	db00      	blt.n	23d48 <dropped_notify+0x18>
}
   23d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   23d48:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   23d4a:	795b      	ldrb	r3, [r3, #5]
   23d4c:	b12b      	cbz	r3, 23d5a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   23d4e:	6823      	ldr	r3, [r4, #0]
   23d50:	691b      	ldr	r3, [r3, #16]
   23d52:	b113      	cbz	r3, 23d5a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   23d54:	4639      	mov	r1, r7
   23d56:	4620      	mov	r0, r4
   23d58:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   23d5a:	3601      	adds	r6, #1
   23d5c:	3410      	adds	r4, #16
   23d5e:	e7f0      	b.n	23d42 <dropped_notify+0x12>
   23d60:	0003e570 	.word	0x0003e570
   23d64:	0003e590 	.word	0x0003e590

00023d68 <log_source_name_get>:
   23d68:	4a04      	ldr	r2, [pc, #16]	; (23d7c <log_source_name_get+0x14>)
   23d6a:	4b05      	ldr	r3, [pc, #20]	; (23d80 <log_source_name_get+0x18>)
   23d6c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   23d6e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   23d72:	bf34      	ite	cc
   23d74:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   23d78:	2000      	movcs	r0, #0
}
   23d7a:	4770      	bx	lr
   23d7c:	0003e468 	.word	0x0003e468
   23d80:	0003e570 	.word	0x0003e570

00023d84 <log_backend_enable>:
	id += backend - log_backend_get(0);
   23d84:	4b10      	ldr	r3, [pc, #64]	; (23dc8 <log_backend_enable+0x44>)
{
   23d86:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
   23d88:	1ac3      	subs	r3, r0, r3
   23d8a:	111b      	asrs	r3, r3, #4
   23d8c:	3301      	adds	r3, #1
{
   23d8e:	4604      	mov	r4, r0
	log_backend_id_set(backend, id);
   23d90:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
   23d92:	b168      	cbz	r0, 23db0 <log_backend_enable+0x2c>
	backend->cb->id = id;
   23d94:	6842      	ldr	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   23d96:	4c0d      	ldr	r4, [pc, #52]	; (23dcc <log_backend_enable+0x48>)
   23d98:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   23d9a:	2301      	movs	r3, #1
   23d9c:	7153      	strb	r3, [r2, #5]
   23d9e:	7823      	ldrb	r3, [r4, #0]
	backend->cb->ctx = ctx;
   23da0:	6011      	str	r1, [r2, #0]
   23da2:	b913      	cbnz	r3, 23daa <log_backend_enable+0x26>
   23da4:	480a      	ldr	r0, [pc, #40]	; (23dd0 <log_backend_enable+0x4c>)
   23da6:	f010 fd89 	bl	348bc <z_impl_k_sem_give>
	backend_attached = true;
   23daa:	2301      	movs	r3, #1
   23dac:	7023      	strb	r3, [r4, #0]
}
   23dae:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   23db0:	23d1      	movs	r3, #209	; 0xd1
   23db2:	4a08      	ldr	r2, [pc, #32]	; (23dd4 <log_backend_enable+0x50>)
   23db4:	4908      	ldr	r1, [pc, #32]	; (23dd8 <log_backend_enable+0x54>)
   23db6:	4809      	ldr	r0, [pc, #36]	; (23ddc <log_backend_enable+0x58>)
   23db8:	f015 f9ff 	bl	391ba <printk>
   23dbc:	21d1      	movs	r1, #209	; 0xd1
   23dbe:	4805      	ldr	r0, [pc, #20]	; (23dd4 <log_backend_enable+0x50>)
   23dc0:	f015 fc52 	bl	39668 <assert_post_action>
	backend->cb->id = id;
   23dc4:	6863      	ldr	r3, [r4, #4]
   23dc6:	deff      	udf	#255	; 0xff
   23dc8:	0003e570 	.word	0x0003e570
   23dcc:	200180de 	.word	0x200180de
   23dd0:	20014b90 	.word	0x20014b90
   23dd4:	0003f409 	.word	0x0003f409
   23dd8:	0003f43a 	.word	0x0003f43a
   23ddc:	0003f0e1 	.word	0x0003f0e1

00023de0 <log_init>:
{
   23de0:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   23de2:	4b17      	ldr	r3, [pc, #92]	; (23e40 <log_init+0x60>)
   23de4:	4c17      	ldr	r4, [pc, #92]	; (23e44 <log_init+0x64>)
   23de6:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   23de8:	2c90      	cmp	r4, #144	; 0x90
   23dea:	d90b      	bls.n	23e04 <log_init+0x24>
   23dec:	4916      	ldr	r1, [pc, #88]	; (23e48 <log_init+0x68>)
   23dee:	4817      	ldr	r0, [pc, #92]	; (23e4c <log_init+0x6c>)
   23df0:	f44f 7315 	mov.w	r3, #596	; 0x254
   23df4:	4a16      	ldr	r2, [pc, #88]	; (23e50 <log_init+0x70>)
   23df6:	f015 f9e0 	bl	391ba <printk>
   23dfa:	f44f 7115 	mov.w	r1, #596	; 0x254
   23dfe:	4814      	ldr	r0, [pc, #80]	; (23e50 <log_init+0x70>)
   23e00:	f015 fc32 	bl	39668 <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23e04:	4b13      	ldr	r3, [pc, #76]	; (23e54 <log_init+0x74>)
   23e06:	e8d3 6fef 	ldaex	r6, [r3]
   23e0a:	1c72      	adds	r2, r6, #1
   23e0c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23e10:	2900      	cmp	r1, #0
   23e12:	d1f8      	bne.n	23e06 <log_init+0x26>
	if (atomic_inc(&initialized) != 0) {
   23e14:	b91e      	cbnz	r6, 23e1e <log_init+0x3e>
   23e16:	1125      	asrs	r5, r4, #4
   23e18:	4c09      	ldr	r4, [pc, #36]	; (23e40 <log_init+0x60>)
	for (i = 0; i < log_backend_count_get(); i++) {
   23e1a:	42ae      	cmp	r6, r5
   23e1c:	db00      	blt.n	23e20 <log_init+0x40>
}
   23e1e:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   23e20:	7b23      	ldrb	r3, [r4, #12]
   23e22:	b153      	cbz	r3, 23e3a <log_init+0x5a>
			if (backend->api->init != NULL) {
   23e24:	6823      	ldr	r3, [r4, #0]
   23e26:	699b      	ldr	r3, [r3, #24]
   23e28:	b10b      	cbz	r3, 23e2e <log_init+0x4e>
				backend->api->init(backend);
   23e2a:	4620      	mov	r0, r4
   23e2c:	4798      	blx	r3
			log_backend_enable(backend,
   23e2e:	6863      	ldr	r3, [r4, #4]
   23e30:	2204      	movs	r2, #4
   23e32:	4620      	mov	r0, r4
   23e34:	6819      	ldr	r1, [r3, #0]
   23e36:	f7ff ffa5 	bl	23d84 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   23e3a:	3601      	adds	r6, #1
   23e3c:	3410      	adds	r4, #16
   23e3e:	e7ec      	b.n	23e1a <log_init+0x3a>
   23e40:	0003e570 	.word	0x0003e570
   23e44:	0003e590 	.word	0x0003e590
   23e48:	0003f451 	.word	0x0003f451
   23e4c:	0003f0e1 	.word	0x0003f0e1
   23e50:	0003f3c4 	.word	0x0003f3c4
   23e54:	20017724 	.word	0x20017724

00023e58 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   23e58:	4b15      	ldr	r3, [pc, #84]	; (23eb0 <z_log_strdup+0x58>)
{
   23e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   23e5c:	4298      	cmp	r0, r3
{
   23e5e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   23e60:	d302      	bcc.n	23e68 <z_log_strdup+0x10>
   23e62:	4b14      	ldr	r3, [pc, #80]	; (23eb4 <z_log_strdup+0x5c>)
   23e64:	4298      	cmp	r0, r3
   23e66:	d31d      	bcc.n	23ea4 <z_log_strdup+0x4c>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   23e68:	2200      	movs	r2, #0
   23e6a:	2300      	movs	r3, #0
   23e6c:	4812      	ldr	r0, [pc, #72]	; (23eb8 <z_log_strdup+0x60>)
   23e6e:	a901      	add	r1, sp, #4
   23e70:	f00f ffb8 	bl	33de4 <k_mem_slab_alloc>
	if (err != 0) {
   23e74:	4605      	mov	r5, r0
   23e76:	b9c0      	cbnz	r0, 23eaa <z_log_strdup+0x52>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23e78:	2201      	movs	r2, #1
   23e7a:	9b01      	ldr	r3, [sp, #4]
   23e7c:	e8d3 1fef 	ldaex	r1, [r3]
   23e80:	e8c3 2fe0 	stlex	r0, r2, [r3]
   23e84:	2800      	cmp	r0, #0
   23e86:	d1f9      	bne.n	23e7c <z_log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   23e88:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   23e8a:	222d      	movs	r2, #45	; 0x2d
   23e8c:	1d33      	adds	r3, r6, #4
   23e8e:	4618      	mov	r0, r3
   23e90:	4621      	mov	r1, r4
   23e92:	f019 fd69 	bl	3d968 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   23e96:	227e      	movs	r2, #126	; 0x7e
   23e98:	4603      	mov	r3, r0
   23e9a:	f886 2031 	strb.w	r2, [r6, #49]	; 0x31
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   23e9e:	f886 5032 	strb.w	r5, [r6, #50]	; 0x32
	return dup->buf;
   23ea2:	461c      	mov	r4, r3
}
   23ea4:	4620      	mov	r0, r4
   23ea6:	b002      	add	sp, #8
   23ea8:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   23eaa:	4b04      	ldr	r3, [pc, #16]	; (23ebc <z_log_strdup+0x64>)
   23eac:	e7f9      	b.n	23ea2 <z_log_strdup+0x4a>
   23eae:	bf00      	nop
   23eb0:	0003e02c 	.word	0x0003e02c
   23eb4:	00043440 	.word	0x00043440
   23eb8:	20017730 	.word	0x20017730
   23ebc:	0003f475 	.word	0x0003f475

00023ec0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   23ec0:	b148      	cbz	r0, 23ed6 <log_is_strdup+0x16>
   23ec2:	4b05      	ldr	r3, [pc, #20]	; (23ed8 <log_is_strdup+0x18>)
   23ec4:	4298      	cmp	r0, r3
   23ec6:	d305      	bcc.n	23ed4 <log_is_strdup+0x14>
   23ec8:	33d0      	adds	r3, #208	; 0xd0
   23eca:	4298      	cmp	r0, r3
   23ecc:	bf2c      	ite	cs
   23ece:	2000      	movcs	r0, #0
   23ed0:	2001      	movcc	r0, #1
   23ed2:	4770      	bx	lr
   23ed4:	2000      	movs	r0, #0
}
   23ed6:	4770      	bx	lr
   23ed8:	2001c070 	.word	0x2001c070

00023edc <z_impl_log_process>:
{
   23edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   23ee0:	4b4c      	ldr	r3, [pc, #304]	; (24014 <z_impl_log_process+0x138>)
{
   23ee2:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
   23ee4:	781b      	ldrb	r3, [r3, #0]
   23ee6:	b9c3      	cbnz	r3, 23f1a <z_impl_log_process+0x3e>
   23ee8:	b1a0      	cbz	r0, 23f14 <z_impl_log_process+0x38>
	msg = get_msg();
   23eea:	f7ff fef5 	bl	23cd8 <get_msg>
	if (msg.msg) {
   23eee:	4604      	mov	r4, r0
   23ef0:	b150      	cbz	r0, 23f08 <z_impl_log_process+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   23ef2:	4b49      	ldr	r3, [pc, #292]	; (24018 <z_impl_log_process+0x13c>)
   23ef4:	e8d3 1fef 	ldaex	r1, [r3]
   23ef8:	3901      	subs	r1, #1
   23efa:	e8c3 1fe2 	stlex	r2, r1, [r3]
   23efe:	2a00      	cmp	r2, #0
   23f00:	d1f8      	bne.n	23ef4 <z_impl_log_process+0x18>
			log_msg_put(msg.msg);
   23f02:	4620      	mov	r0, r4
   23f04:	f015 fcdb 	bl	398be <log_msg_put>
	return (log_list_head_peek(&list) != NULL);
   23f08:	4844      	ldr	r0, [pc, #272]	; (2401c <z_impl_log_process+0x140>)
   23f0a:	f015 fbe1 	bl	396d0 <log_list_head_peek>
   23f0e:	1e05      	subs	r5, r0, #0
   23f10:	bf18      	it	ne
   23f12:	2501      	movne	r5, #1
}
   23f14:	4628      	mov	r0, r5
   23f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	msg = get_msg();
   23f1a:	f7ff fedd 	bl	23cd8 <get_msg>
	if (msg.msg) {
   23f1e:	4604      	mov	r4, r0
   23f20:	2800      	cmp	r0, #0
   23f22:	d074      	beq.n	2400e <z_impl_log_process+0x132>
   23f24:	4b3c      	ldr	r3, [pc, #240]	; (24018 <z_impl_log_process+0x13c>)
   23f26:	e8d3 1fef 	ldaex	r1, [r3]
   23f2a:	3901      	subs	r1, #1
   23f2c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   23f30:	2a00      	cmp	r2, #0
   23f32:	d1f8      	bne.n	23f26 <z_impl_log_process+0x4a>
	if (!bypass) {
   23f34:	2d00      	cmp	r5, #0
   23f36:	d1e4      	bne.n	23f02 <z_impl_log_process+0x26>
		    !panic_mode) {
   23f38:	4b39      	ldr	r3, [pc, #228]	; (24020 <z_impl_log_process+0x144>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   23f3a:	781b      	ldrb	r3, [r3, #0]
   23f3c:	b183      	cbz	r3, 23f60 <z_impl_log_process+0x84>
   23f3e:	2700      	movs	r7, #0
   23f40:	4d38      	ldr	r5, [pc, #224]	; (24024 <z_impl_log_process+0x148>)
   23f42:	4e39      	ldr	r6, [pc, #228]	; (24028 <z_impl_log_process+0x14c>)
   23f44:	1b76      	subs	r6, r6, r5
   23f46:	1136      	asrs	r6, r6, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   23f48:	42b7      	cmp	r7, r6
   23f4a:	db55      	blt.n	23ff8 <z_impl_log_process+0x11c>
			log_msg_put(msg.msg);
   23f4c:	4620      	mov	r0, r4
   23f4e:	f015 fcb6 	bl	398be <log_msg_put>
	return dropped_cnt > 0;
   23f52:	4b36      	ldr	r3, [pc, #216]	; (2402c <z_impl_log_process+0x150>)
	if (!bypass && z_log_dropped_pending()) {
   23f54:	681b      	ldr	r3, [r3, #0]
   23f56:	2b00      	cmp	r3, #0
   23f58:	ddd6      	ble.n	23f08 <z_impl_log_process+0x2c>
		dropped_notify();
   23f5a:	f7ff fee9 	bl	23d30 <dropped_notify>
   23f5e:	e7d3      	b.n	23f08 <z_impl_log_process+0x2c>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   23f60:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
   23f62:	07db      	lsls	r3, r3, #31
   23f64:	d4eb      	bmi.n	23f3e <z_impl_log_process+0x62>
	msg_str = log_msg_str_get(msg);
   23f66:	f015 fcb9 	bl	398dc <log_msg_str_get>
   23f6a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   23f6c:	4620      	mov	r0, r4
   23f6e:	f015 fc84 	bl	3987a <log_msg_nargs_get>
   23f72:	4601      	mov	r1, r0
   23f74:	4640      	mov	r0, r8
   23f76:	f7ff fe57 	bl	23c28 <z_log_get_s_mask>
   23f7a:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   23f7c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 24030 <z_impl_log_process+0x154>
   23f80:	4b2c      	ldr	r3, [pc, #176]	; (24034 <z_impl_log_process+0x158>)
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   23f82:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 24038 <z_impl_log_process+0x15c>
   23f86:	eba3 0309 	sub.w	r3, r3, r9
   23f8a:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	while (mask) {
   23f8e:	2e00      	cmp	r6, #0
   23f90:	d0d5      	beq.n	23f3e <z_impl_log_process+0x62>
		idx = 31 - __builtin_clz(mask);
   23f92:	fab6 f786 	clz	r7, r6
   23f96:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   23f9a:	4639      	mov	r1, r7
   23f9c:	4620      	mov	r0, r4
   23f9e:	f015 fc6f 	bl	39880 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   23fa2:	4b26      	ldr	r3, [pc, #152]	; (2403c <z_impl_log_process+0x160>)
		str = (const char *)log_msg_arg_get(msg, idx);
   23fa4:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   23fa6:	4298      	cmp	r0, r3
   23fa8:	d302      	bcc.n	23fb0 <z_impl_log_process+0xd4>
   23faa:	4b25      	ldr	r3, [pc, #148]	; (24040 <z_impl_log_process+0x164>)
   23fac:	4298      	cmp	r0, r3
   23fae:	d31e      	bcc.n	23fee <z_impl_log_process+0x112>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   23fb0:	4610      	mov	r0, r2
   23fb2:	f7ff ff85 	bl	23ec0 <log_is_strdup>
   23fb6:	4605      	mov	r5, r0
   23fb8:	b9c8      	cbnz	r0, 23fee <z_impl_log_process+0x112>
   23fba:	4b22      	ldr	r3, [pc, #136]	; (24044 <z_impl_log_process+0x168>)
   23fbc:	429a      	cmp	r2, r3
   23fbe:	d016      	beq.n	23fee <z_impl_log_process+0x112>
	return msg->hdr.ids.source_id;
   23fc0:	8963      	ldrh	r3, [r4, #10]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   23fc2:	4652      	mov	r2, sl
   23fc4:	f3c3 1389 	ubfx	r3, r3, #6, #10
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   23fc8:	455b      	cmp	r3, fp
	return __log_const_start[source_id].name;
   23fca:	bf38      	it	cc
   23fcc:	f859 5033 	ldrcc.w	r5, [r9, r3, lsl #3]
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   23fd0:	491d      	ldr	r1, [pc, #116]	; (24048 <z_impl_log_process+0x16c>)
   23fd2:	23d1      	movs	r3, #209	; 0xd1
   23fd4:	481d      	ldr	r0, [pc, #116]	; (2404c <z_impl_log_process+0x170>)
   23fd6:	f015 f8f0 	bl	391ba <printk>
   23fda:	4639      	mov	r1, r7
   23fdc:	481c      	ldr	r0, [pc, #112]	; (24050 <z_impl_log_process+0x174>)
   23fde:	4643      	mov	r3, r8
   23fe0:	462a      	mov	r2, r5
   23fe2:	f015 f8ea 	bl	391ba <printk>
   23fe6:	21d1      	movs	r1, #209	; 0xd1
   23fe8:	4650      	mov	r0, sl
   23fea:	f015 fb3d 	bl	39668 <assert_post_action>
		mask &= ~BIT(idx);
   23fee:	2301      	movs	r3, #1
   23ff0:	40bb      	lsls	r3, r7
   23ff2:	ea26 0603 	bic.w	r6, r6, r3
   23ff6:	e7ca      	b.n	23f8e <z_impl_log_process+0xb2>
	return backend->cb->active;
   23ff8:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
   23ffa:	795b      	ldrb	r3, [r3, #5]
   23ffc:	b123      	cbz	r3, 24008 <z_impl_log_process+0x12c>
	backend->api->put(backend, msg);
   23ffe:	682b      	ldr	r3, [r5, #0]
   24000:	4621      	mov	r1, r4
   24002:	4628      	mov	r0, r5
   24004:	685b      	ldr	r3, [r3, #4]
   24006:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   24008:	3701      	adds	r7, #1
   2400a:	3510      	adds	r5, #16
   2400c:	e79c      	b.n	23f48 <z_impl_log_process+0x6c>
	if (!bypass && z_log_dropped_pending()) {
   2400e:	2d00      	cmp	r5, #0
   24010:	d09f      	beq.n	23f52 <z_impl_log_process+0x76>
   24012:	e779      	b.n	23f08 <z_impl_log_process+0x2c>
   24014:	200180de 	.word	0x200180de
   24018:	20017720 	.word	0x20017720
   2401c:	20017728 	.word	0x20017728
   24020:	200180df 	.word	0x200180df
   24024:	0003e570 	.word	0x0003e570
   24028:	0003e590 	.word	0x0003e590
   2402c:	2001771c 	.word	0x2001771c
   24030:	0003e468 	.word	0x0003e468
   24034:	0003e570 	.word	0x0003e570
   24038:	0003f3c4 	.word	0x0003f3c4
   2403c:	0003e02c 	.word	0x0003e02c
   24040:	00043440 	.word	0x00043440
   24044:	0003f475 	.word	0x0003f475
   24048:	000422ae 	.word	0x000422ae
   2404c:	0003f0e1 	.word	0x0003f0e1
   24050:	0003f48f 	.word	0x0003f48f

00024054 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   24054:	4b16      	ldr	r3, [pc, #88]	; (240b0 <log_process_thread_func+0x5c>)
   24056:	4a17      	ldr	r2, [pc, #92]	; (240b4 <log_process_thread_func+0x60>)
{
   24058:	b510      	push	{r4, lr}
   2405a:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   2405c:	2b00      	cmp	r3, #0
   2405e:	dc0b      	bgt.n	24078 <log_process_thread_func+0x24>
   24060:	4915      	ldr	r1, [pc, #84]	; (240b8 <log_process_thread_func+0x64>)
   24062:	4816      	ldr	r0, [pc, #88]	; (240bc <log_process_thread_func+0x68>)
   24064:	f240 5374 	movw	r3, #1396	; 0x574
   24068:	4a15      	ldr	r2, [pc, #84]	; (240c0 <log_process_thread_func+0x6c>)
   2406a:	f015 f8a6 	bl	391ba <printk>
   2406e:	f240 5174 	movw	r1, #1396	; 0x574
   24072:	4813      	ldr	r0, [pc, #76]	; (240c0 <log_process_thread_func+0x6c>)
   24074:	f015 faf8 	bl	39668 <assert_post_action>
	log_init();
   24078:	f7ff feb2 	bl	23de0 <log_init>
	return z_impl_k_current_get();
   2407c:	f012 f932 	bl	362e4 <z_impl_k_current_get>
	proc_tid = process_tid;
   24080:	4b10      	ldr	r3, [pc, #64]	; (240c4 <log_process_thread_func+0x70>)
   24082:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   24084:	b130      	cbz	r0, 24094 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   24086:	4b10      	ldr	r3, [pc, #64]	; (240c8 <log_process_thread_func+0x74>)
	    process_tid &&
   24088:	681b      	ldr	r3, [r3, #0]
   2408a:	2b09      	cmp	r3, #9
   2408c:	dd02      	ble.n	24094 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   2408e:	480f      	ldr	r0, [pc, #60]	; (240cc <log_process_thread_func+0x78>)
   24090:	f010 fc14 	bl	348bc <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   24094:	4c0d      	ldr	r4, [pc, #52]	; (240cc <log_process_thread_func+0x78>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   24096:	2000      	movs	r0, #0
   24098:	f7ff ff20 	bl	23edc <z_impl_log_process>
		if (log_process(false) == false) {
   2409c:	2800      	cmp	r0, #0
   2409e:	d1fa      	bne.n	24096 <log_process_thread_func+0x42>
   240a0:	f04f 32ff 	mov.w	r2, #4294967295
   240a4:	f04f 33ff 	mov.w	r3, #4294967295
   240a8:	4620      	mov	r0, r4
   240aa:	f010 fc4b 	bl	34944 <z_impl_k_sem_take>
   240ae:	e7f2      	b.n	24096 <log_process_thread_func+0x42>
   240b0:	0003e590 	.word	0x0003e590
   240b4:	0003e570 	.word	0x0003e570
   240b8:	0003f4d0 	.word	0x0003f4d0
   240bc:	0003f0e1 	.word	0x0003f0e1
   240c0:	0003f3c4 	.word	0x0003f3c4
   240c4:	20017718 	.word	0x20017718
   240c8:	20017720 	.word	0x20017720
   240cc:	20014b90 	.word	0x20014b90

000240d0 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   240d0:	4b27      	ldr	r3, [pc, #156]	; (24170 <msg_finalize+0xa0>)
{
   240d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   240d4:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   240d6:	8141      	strh	r1, [r0, #10]
{
   240d8:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   240da:	4798      	blx	r3
   240dc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   240de:	f04f 0320 	mov.w	r3, #32
   240e2:	f3ef 8511 	mrs	r5, BASEPRI
   240e6:	f383 8811 	msr	BASEPRI, r3
   240ea:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   240ee:	4821      	ldr	r0, [pc, #132]	; (24174 <msg_finalize+0xa4>)
   240f0:	4621      	mov	r1, r4
   240f2:	f015 fae3 	bl	396bc <log_list_add_tail>
	__asm__ volatile(
   240f6:	f385 8811 	msr	BASEPRI, r5
   240fa:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   240fe:	4b1e      	ldr	r3, [pc, #120]	; (24178 <msg_finalize+0xa8>)
   24100:	e8d3 2fef 	ldaex	r2, [r3]
   24104:	3201      	adds	r2, #1
   24106:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2410a:	2900      	cmp	r1, #0
   2410c:	d1f8      	bne.n	24100 <msg_finalize+0x30>
	if (panic_mode) {
   2410e:	4a1b      	ldr	r2, [pc, #108]	; (2417c <msg_finalize+0xac>)
   24110:	7812      	ldrb	r2, [r2, #0]
   24112:	b182      	cbz	r2, 24136 <msg_finalize+0x66>
	__asm__ volatile(
   24114:	f04f 0320 	mov.w	r3, #32
   24118:	f3ef 8411 	mrs	r4, BASEPRI
   2411c:	f383 8811 	msr	BASEPRI, r3
   24120:	f3bf 8f6f 	isb	sy
   24124:	2000      	movs	r0, #0
   24126:	f7ff fed9 	bl	23edc <z_impl_log_process>
	__asm__ volatile(
   2412a:	f384 8811 	msr	BASEPRI, r4
   2412e:	f3bf 8f6f 	isb	sy
}
   24132:	b003      	add	sp, #12
   24134:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   24136:	4a12      	ldr	r2, [pc, #72]	; (24180 <msg_finalize+0xb0>)
   24138:	6812      	ldr	r2, [r2, #0]
   2413a:	2a00      	cmp	r2, #0
   2413c:	d0f9      	beq.n	24132 <msg_finalize+0x62>
   2413e:	681b      	ldr	r3, [r3, #0]
   24140:	2b01      	cmp	r3, #1
   24142:	d10a      	bne.n	2415a <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   24144:	2200      	movs	r2, #0
   24146:	2300      	movs	r3, #0
   24148:	480e      	ldr	r0, [pc, #56]	; (24184 <msg_finalize+0xb4>)
   2414a:	e9cd 2300 	strd	r2, r3, [sp]
   2414e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   24152:	2300      	movs	r3, #0
   24154:	f012 fd4a 	bl	36bec <z_impl_k_timer_start>
   24158:	e7eb      	b.n	24132 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   2415a:	2b0a      	cmp	r3, #10
   2415c:	d1e9      	bne.n	24132 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   2415e:	4809      	ldr	r0, [pc, #36]	; (24184 <msg_finalize+0xb4>)
   24160:	f019 f9e9 	bl	3d536 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   24164:	4808      	ldr	r0, [pc, #32]	; (24188 <msg_finalize+0xb8>)
}
   24166:	b003      	add	sp, #12
   24168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2416c:	f010 bba6 	b.w	348bc <z_impl_k_sem_give>
   24170:	200145c4 	.word	0x200145c4
   24174:	20017728 	.word	0x20017728
   24178:	20017720 	.word	0x20017720
   2417c:	200180df 	.word	0x200180df
   24180:	20017718 	.word	0x20017718
   24184:	20014c60 	.word	0x20014c60
   24188:	20014b90 	.word	0x20014b90

0002418c <z_impl_log_panic>:
{
   2418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   2418e:	4f0e      	ldr	r7, [pc, #56]	; (241c8 <z_impl_log_panic+0x3c>)
   24190:	783d      	ldrb	r5, [r7, #0]
   24192:	b975      	cbnz	r5, 241b2 <z_impl_log_panic+0x26>
	log_init();
   24194:	f7ff fe24 	bl	23de0 <log_init>
   24198:	4c0c      	ldr	r4, [pc, #48]	; (241cc <z_impl_log_panic+0x40>)
   2419a:	4e0d      	ldr	r6, [pc, #52]	; (241d0 <z_impl_log_panic+0x44>)
   2419c:	1b36      	subs	r6, r6, r4
   2419e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   241a0:	42b5      	cmp	r5, r6
   241a2:	db07      	blt.n	241b4 <z_impl_log_panic+0x28>
   241a4:	2000      	movs	r0, #0
   241a6:	f7ff fe99 	bl	23edc <z_impl_log_process>
		while (log_process(false) == true) {
   241aa:	2800      	cmp	r0, #0
   241ac:	d1fa      	bne.n	241a4 <z_impl_log_panic+0x18>
	panic_mode = true;
   241ae:	2301      	movs	r3, #1
   241b0:	703b      	strb	r3, [r7, #0]
}
   241b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   241b4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   241b6:	795b      	ldrb	r3, [r3, #5]
   241b8:	b11b      	cbz	r3, 241c2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   241ba:	6823      	ldr	r3, [r4, #0]
   241bc:	4620      	mov	r0, r4
   241be:	695b      	ldr	r3, [r3, #20]
   241c0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   241c2:	3501      	adds	r5, #1
   241c4:	3410      	adds	r4, #16
   241c6:	e7eb      	b.n	241a0 <z_impl_log_panic+0x14>
   241c8:	200180df 	.word	0x200180df
   241cc:	0003e570 	.word	0x0003e570
   241d0:	0003e590 	.word	0x0003e590

000241d4 <log_free>:
{
   241d4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   241d6:	3804      	subs	r0, #4
   241d8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   241da:	e8d0 3fef 	ldaex	r3, [r0]
   241de:	3b01      	subs	r3, #1
   241e0:	e8c0 3fe2 	stlex	r2, r3, [r0]
   241e4:	2a00      	cmp	r2, #0
   241e6:	d1f8      	bne.n	241da <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   241e8:	b91b      	cbnz	r3, 241f2 <log_free+0x1e>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   241ea:	4803      	ldr	r0, [pc, #12]	; (241f8 <log_free+0x24>)
   241ec:	a901      	add	r1, sp, #4
   241ee:	f00f fe65 	bl	33ebc <k_mem_slab_free>
}
   241f2:	b003      	add	sp, #12
   241f4:	f85d fb04 	ldr.w	pc, [sp], #4
   241f8:	20017730 	.word	0x20017730

000241fc <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   241fc:	2320      	movs	r3, #32
   241fe:	4902      	ldr	r1, [pc, #8]	; (24208 <log_msg_pool_init+0xc>)
   24200:	461a      	mov	r2, r3
   24202:	4802      	ldr	r0, [pc, #8]	; (2420c <log_msg_pool_init+0x10>)
   24204:	f019 b8cf 	b.w	3d3a6 <k_mem_slab_init>
   24208:	2001c140 	.word	0x2001c140
   2420c:	20017750 	.word	0x20017750

00024210 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   24210:	2300      	movs	r3, #0
{
   24212:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   24214:	4d09      	ldr	r5, [pc, #36]	; (2423c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   24216:	9301      	str	r3, [sp, #4]
   24218:	2001      	movs	r0, #1
   2421a:	f7ff fe5f 	bl	23edc <z_impl_log_process>
   2421e:	4604      	mov	r4, r0
			z_log_dropped();
   24220:	f7ff fd6e 	bl	23d00 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   24224:	2200      	movs	r2, #0
   24226:	2300      	movs	r3, #0
   24228:	4628      	mov	r0, r5
   2422a:	a901      	add	r1, sp, #4
   2422c:	f00f fdda 	bl	33de4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   24230:	b108      	cbz	r0, 24236 <log_msg_no_space_handle+0x26>
   24232:	2c00      	cmp	r4, #0
   24234:	d1f0      	bne.n	24218 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   24236:	9801      	ldr	r0, [sp, #4]
   24238:	b003      	add	sp, #12
   2423a:	bd30      	pop	{r4, r5, pc}
   2423c:	20017750 	.word	0x20017750

00024240 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   24240:	2300      	movs	r3, #0
{
   24242:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   24244:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   24246:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   24248:	4806      	ldr	r0, [pc, #24]	; (24264 <log_msg_chunk_alloc+0x24>)
   2424a:	2300      	movs	r3, #0
   2424c:	a901      	add	r1, sp, #4
   2424e:	f00f fdc9 	bl	33de4 <k_mem_slab_alloc>
	if (err != 0) {
   24252:	b110      	cbz	r0, 2425a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   24254:	f7ff ffdc 	bl	24210 <log_msg_no_space_handle>
   24258:	9001      	str	r0, [sp, #4]
}
   2425a:	9801      	ldr	r0, [sp, #4]
   2425c:	b003      	add	sp, #12
   2425e:	f85d fb04 	ldr.w	pc, [sp], #4
   24262:	bf00      	nop
   24264:	20017750 	.word	0x20017750

00024268 <msg_free>:
{
   24268:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2426a:	7a03      	ldrb	r3, [r0, #8]
   2426c:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
   2426e:	07dc      	lsls	r4, r3, #31
{
   24270:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   24272:	d41e      	bmi.n	242b2 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   24274:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
   24276:	092d      	lsrs	r5, r5, #4
   24278:	d01b      	beq.n	242b2 <msg_free+0x4a>
		uint32_t smask = 0U;
   2427a:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   2427c:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   2427e:	4631      	mov	r1, r6
   24280:	9801      	ldr	r0, [sp, #4]
   24282:	f015 fafd 	bl	39880 <log_msg_arg_get>
   24286:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   24288:	f7ff fe1a 	bl	23ec0 <log_is_strdup>
   2428c:	b170      	cbz	r0, 242ac <msg_free+0x44>
				if (smask == 0U) {
   2428e:	b934      	cbnz	r4, 2429e <msg_free+0x36>
					smask = z_log_get_s_mask(
   24290:	9b01      	ldr	r3, [sp, #4]
   24292:	4629      	mov	r1, r5
   24294:	6918      	ldr	r0, [r3, #16]
   24296:	f7ff fcc7 	bl	23c28 <z_log_get_s_mask>
					if (smask == 0U) {
   2429a:	4604      	mov	r4, r0
   2429c:	b148      	cbz	r0, 242b2 <msg_free+0x4a>
				if (smask & BIT(i)) {
   2429e:	fa24 f306 	lsr.w	r3, r4, r6
   242a2:	07d9      	lsls	r1, r3, #31
   242a4:	d502      	bpl.n	242ac <msg_free+0x44>
					log_free(buf);
   242a6:	4638      	mov	r0, r7
   242a8:	f7ff ff94 	bl	241d4 <log_free>
		for (i = 0U; i < nargs; i++) {
   242ac:	3601      	adds	r6, #1
   242ae:	42ae      	cmp	r6, r5
   242b0:	d3e5      	bcc.n	2427e <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   242b2:	9b01      	ldr	r3, [sp, #4]
   242b4:	7a1a      	ldrb	r2, [r3, #8]
   242b6:	0792      	lsls	r2, r2, #30
   242b8:	d503      	bpl.n	242c2 <msg_free+0x5a>
		cont_free(msg->payload.ext.next);
   242ba:	695c      	ldr	r4, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   242bc:	4d07      	ldr	r5, [pc, #28]	; (242dc <msg_free+0x74>)
   242be:	9403      	str	r4, [sp, #12]
	while (cont != NULL) {
   242c0:	b92c      	cbnz	r4, 242ce <msg_free+0x66>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   242c2:	4806      	ldr	r0, [pc, #24]	; (242dc <msg_free+0x74>)
   242c4:	a901      	add	r1, sp, #4
   242c6:	f00f fdf9 	bl	33ebc <k_mem_slab_free>
}
   242ca:	b005      	add	sp, #20
   242cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   242ce:	4628      	mov	r0, r5
   242d0:	a903      	add	r1, sp, #12
		next = cont->next;
   242d2:	6824      	ldr	r4, [r4, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   242d4:	f00f fdf2 	bl	33ebc <k_mem_slab_free>
		cont = next;
   242d8:	e7f1      	b.n	242be <msg_free+0x56>
   242da:	bf00      	nop
   242dc:	20017750 	.word	0x20017750

000242e0 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   242e0:	2a0e      	cmp	r2, #14
{
   242e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242e6:	4680      	mov	r8, r0
   242e8:	460d      	mov	r5, r1
   242ea:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   242ec:	d940      	bls.n	24370 <log_msg_create_n+0x90>
   242ee:	f240 133b 	movw	r3, #315	; 0x13b
   242f2:	4a35      	ldr	r2, [pc, #212]	; (243c8 <log_msg_create_n+0xe8>)
   242f4:	4935      	ldr	r1, [pc, #212]	; (243cc <log_msg_create_n+0xec>)
   242f6:	4836      	ldr	r0, [pc, #216]	; (243d0 <log_msg_create_n+0xf0>)
   242f8:	f014 ff5f 	bl	391ba <printk>
   242fc:	f240 113b 	movw	r1, #315	; 0x13b
   24300:	4831      	ldr	r0, [pc, #196]	; (243c8 <log_msg_create_n+0xe8>)
   24302:	f015 f9b1 	bl	39668 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   24306:	f7ff ff9b 	bl	24240 <log_msg_chunk_alloc>

	if (msg != NULL) {
   2430a:	4604      	mov	r4, r0
   2430c:	b3a0      	cbz	r0, 24378 <log_msg_create_n+0x98>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   2430e:	2301      	movs	r3, #1
   24310:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   24312:	2300      	movs	r3, #0
		(void)memcpy(msg->payload.single.args, args,
   24314:	f100 0914 	add.w	r9, r0, #20
   24318:	8103      	strh	r3, [r0, #8]
	*next = NULL;
   2431a:	f04f 0b00 	mov.w	fp, #0
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   2431e:	1eb7      	subs	r7, r6, #2
   24320:	46ba      	mov	sl, r7
	msg->hdr.params.generic.ext = 1;
   24322:	7a23      	ldrb	r3, [r4, #8]
	*next = NULL;
   24324:	f8c4 b014 	str.w	fp, [r4, #20]
	msg->hdr.params.generic.ext = 1;
   24328:	f043 0302 	orr.w	r3, r3, #2
   2432c:	7223      	strb	r3, [r4, #8]
	while (n > 0) {
   2432e:	f1ba 0f00 	cmp.w	sl, #0
   24332:	dc39      	bgt.n	243a8 <log_msg_create_n+0xc8>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   24334:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   24336:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   2433a:	f366 1307 	bfi	r3, r6, #4, #4
   2433e:	7263      	strb	r3, [r4, #9]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24340:	682b      	ldr	r3, [r5, #0]
	struct log_msg_cont *cont = msg->payload.ext.next;
   24342:	6966      	ldr	r6, [r4, #20]
   24344:	61a3      	str	r3, [r4, #24]
   24346:	686b      	ldr	r3, [r5, #4]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   24348:	3508      	adds	r5, #8
   2434a:	61e3      	str	r3, [r4, #28]
	while (nargs != 0U) {
   2434c:	b1af      	cbz	r7, 2437a <log_msg_create_n+0x9a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   2434e:	2f07      	cmp	r7, #7
   24350:	46b9      	mov	r9, r7
   24352:	bf28      	it	cs
   24354:	f04f 0907 	movcs.w	r9, #7
		(void)memcpy(cont->payload.args, args,
   24358:	ea4f 0889 	mov.w	r8, r9, lsl #2
   2435c:	4629      	mov	r1, r5
   2435e:	1d30      	adds	r0, r6, #4
   24360:	4642      	mov	r2, r8
   24362:	f019 f983 	bl	3d66c <memcpy>
		nargs -= cpy_args;
   24366:	eba7 0709 	sub.w	r7, r7, r9
		cont = cont->next;
   2436a:	6836      	ldr	r6, [r6, #0]
		args += cpy_args;
   2436c:	4445      	add	r5, r8
		cont = cont->next;
   2436e:	e7ed      	b.n	2434c <log_msg_create_n+0x6c>
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   24370:	f7ff ff66 	bl	24240 <log_msg_chunk_alloc>
	if (msg != NULL) {
   24374:	4604      	mov	r4, r0
   24376:	b918      	cbnz	r0, 24380 <log_msg_create_n+0xa0>
{
   24378:	2400      	movs	r4, #0
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   2437a:	4620      	mov	r0, r4
   2437c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		msg->hdr.ref_cnt = 1;
   24380:	2301      	movs	r3, #1
   24382:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   24384:	2300      	movs	r3, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   24386:	2e03      	cmp	r6, #3
   24388:	8103      	strh	r3, [r0, #8]
		(void)memcpy(msg->payload.single.args, args,
   2438a:	f100 0914 	add.w	r9, r0, #20
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2438e:	d8c4      	bhi.n	2431a <log_msg_create_n+0x3a>
		msg->hdr.params.std.nargs = nargs;
   24390:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   24392:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   24396:	f366 1307 	bfi	r3, r6, #4, #4
   2439a:	7243      	strb	r3, [r0, #9]
   2439c:	4629      	mov	r1, r5
   2439e:	4648      	mov	r0, r9
   243a0:	00b2      	lsls	r2, r6, #2
   243a2:	f019 f963 	bl	3d66c <memcpy>
	while (nargs != 0U) {
   243a6:	e7e8      	b.n	2437a <log_msg_create_n+0x9a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   243a8:	f7ff ff4a 	bl	24240 <log_msg_chunk_alloc>
		if (cont == NULL) {
   243ac:	b918      	cbnz	r0, 243b6 <log_msg_create_n+0xd6>
			msg_free(msg);
   243ae:	4620      	mov	r0, r4
   243b0:	f7ff ff5a 	bl	24268 <msg_free>
	if (msg != NULL) {
   243b4:	e7e0      	b.n	24378 <log_msg_create_n+0x98>
		*next = cont;
   243b6:	f8c9 0000 	str.w	r0, [r9]
		cont->next = NULL;
   243ba:	f1aa 0a07 	sub.w	sl, sl, #7
		next = &cont->next;
   243be:	4681      	mov	r9, r0
		cont->next = NULL;
   243c0:	f8c0 b000 	str.w	fp, [r0]
		n -= ARGS_CONT_MSG;
   243c4:	e7b3      	b.n	2432e <log_msg_create_n+0x4e>
   243c6:	bf00      	nop
   243c8:	0003f4f0 	.word	0x0003f4f0
   243cc:	0003f51c 	.word	0x0003f51c
   243d0:	0003f0e1 	.word	0x0003f0e1

000243d4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   243d4:	b40e      	push	{r1, r2, r3}
   243d6:	b503      	push	{r0, r1, lr}
   243d8:	ab03      	add	r3, sp, #12
   243da:	f853 2b04 	ldr.w	r2, [r3], #4
   243de:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   243e0:	4804      	ldr	r0, [pc, #16]	; (243f4 <print_formatted+0x20>)
	va_start(args, fmt);
   243e2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   243e4:	f7ff f82a 	bl	2343c <cbvprintf>
	va_end(args);

	return length;
}
   243e8:	b002      	add	sp, #8
   243ea:	f85d eb04 	ldr.w	lr, [sp], #4
   243ee:	b003      	add	sp, #12
   243f0:	4770      	bx	lr
   243f2:	bf00      	nop
   243f4:	00024631 	.word	0x00024631

000243f8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   243f8:	06ca      	lsls	r2, r1, #27
   243fa:	d405      	bmi.n	24408 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   243fc:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   243fe:	bf4c      	ite	mi
   24400:	4902      	ldrmi	r1, [pc, #8]	; (2440c <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   24402:	4903      	ldrpl	r1, [pc, #12]	; (24410 <newline_print+0x18>)
   24404:	f7ff bfe6 	b.w	243d4 <print_formatted>
	}
}
   24408:	4770      	bx	lr
   2440a:	bf00      	nop
   2440c:	0003f6c9 	.word	0x0003f6c9
   24410:	00041c40 	.word	0x00041c40

00024414 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   24414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24418:	460f      	mov	r7, r1
	newline_print(output, flags);
   2441a:	9908      	ldr	r1, [sp, #32]
{
   2441c:	4604      	mov	r4, r0
   2441e:	4616      	mov	r6, r2
   24420:	461d      	mov	r5, r3

	for (int i = 0; i < prefix_offset; i++) {
   24422:	f04f 0800 	mov.w	r8, #0
	newline_print(output, flags);
   24426:	f7ff ffe7 	bl	243f8 <newline_print>
		print_formatted(output, " ");
   2442a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 244d8 <hexdump_line_print+0xc4>
	for (int i = 0; i < prefix_offset; i++) {
   2442e:	45a8      	cmp	r8, r5
   24430:	db28      	blt.n	24484 <hexdump_line_print+0x70>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
		}

		if (i < length) {
   24432:	b376      	cbz	r6, 24492 <hexdump_line_print+0x7e>
			print_formatted(output, "%02x ", data[i]);
   24434:	4620      	mov	r0, r4
   24436:	783a      	ldrb	r2, [r7, #0]
   24438:	4928      	ldr	r1, [pc, #160]	; (244dc <hexdump_line_print+0xc8>)
   2443a:	f7ff ffcb 	bl	243d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2443e:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
   24440:	076a      	lsls	r2, r5, #29
   24442:	d103      	bne.n	2444c <hexdump_line_print+0x38>
			print_formatted(output, " ");
   24444:	4620      	mov	r0, r4
   24446:	4924      	ldr	r1, [pc, #144]	; (244d8 <hexdump_line_print+0xc4>)
   24448:	f7ff ffc4 	bl	243d4 <print_formatted>
		if (i < length) {
   2444c:	42b5      	cmp	r5, r6
   2444e:	d225      	bcs.n	2449c <hexdump_line_print+0x88>
			print_formatted(output, "%02x ", data[i]);
   24450:	4620      	mov	r0, r4
   24452:	5d7a      	ldrb	r2, [r7, r5]
   24454:	4921      	ldr	r1, [pc, #132]	; (244dc <hexdump_line_print+0xc8>)
   24456:	f7ff ffbd 	bl	243d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2445a:	3501      	adds	r5, #1
   2445c:	2d10      	cmp	r5, #16
   2445e:	d1ef      	bne.n	24440 <hexdump_line_print+0x2c>
		} else {
			print_formatted(output, "   ");
		}
	}

	print_formatted(output, "|");
   24460:	4620      	mov	r0, r4
   24462:	491f      	ldr	r1, [pc, #124]	; (244e0 <hexdump_line_print+0xcc>)
   24464:	f7ff ffb6 	bl	243d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
		}

		if (i < length) {
   24468:	b9ee      	cbnz	r6, 244a6 <hexdump_line_print+0x92>
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
   2446a:	4620      	mov	r0, r4
   2446c:	491a      	ldr	r1, [pc, #104]	; (244d8 <hexdump_line_print+0xc4>)
   2446e:	f7ff ffb1 	bl	243d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24472:	2501      	movs	r5, #1
		if (i < length) {
   24474:	42b5      	cmp	r5, r6
   24476:	462b      	mov	r3, r5
   24478:	d317      	bcc.n	244aa <hexdump_line_print+0x96>
			print_formatted(output, " ");
   2447a:	4620      	mov	r0, r4
   2447c:	4916      	ldr	r1, [pc, #88]	; (244d8 <hexdump_line_print+0xc4>)
   2447e:	f7ff ffa9 	bl	243d4 <print_formatted>
   24482:	e01d      	b.n	244c0 <hexdump_line_print+0xac>
		print_formatted(output, " ");
   24484:	4649      	mov	r1, r9
   24486:	4620      	mov	r0, r4
   24488:	f7ff ffa4 	bl	243d4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   2448c:	f108 0801 	add.w	r8, r8, #1
   24490:	e7cd      	b.n	2442e <hexdump_line_print+0x1a>
			print_formatted(output, "   ");
   24492:	4620      	mov	r0, r4
   24494:	4913      	ldr	r1, [pc, #76]	; (244e4 <hexdump_line_print+0xd0>)
   24496:	f7ff ff9d 	bl	243d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2449a:	2501      	movs	r5, #1
			print_formatted(output, "   ");
   2449c:	4620      	mov	r0, r4
   2449e:	4911      	ldr	r1, [pc, #68]	; (244e4 <hexdump_line_print+0xd0>)
   244a0:	f7ff ff98 	bl	243d4 <print_formatted>
   244a4:	e7d9      	b.n	2445a <hexdump_line_print+0x46>
		if (i < length) {
   244a6:	2500      	movs	r5, #0
   244a8:	462b      	mov	r3, r5
			char c = (char)data[i];
   244aa:	5cfa      	ldrb	r2, [r7, r3]
			      isprint((int)c) ? c : '.');
   244ac:	4b0e      	ldr	r3, [pc, #56]	; (244e8 <hexdump_line_print+0xd4>)
			print_formatted(output, "%c",
   244ae:	4620      	mov	r0, r4
   244b0:	5c9b      	ldrb	r3, [r3, r2]
   244b2:	490e      	ldr	r1, [pc, #56]	; (244ec <hexdump_line_print+0xd8>)
   244b4:	f013 0f97 	tst.w	r3, #151	; 0x97
   244b8:	bf08      	it	eq
   244ba:	222e      	moveq	r2, #46	; 0x2e
   244bc:	f7ff ff8a 	bl	243d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   244c0:	3501      	adds	r5, #1
   244c2:	2d10      	cmp	r5, #16
   244c4:	d006      	beq.n	244d4 <hexdump_line_print+0xc0>
		if (i > 0 && !(i % 8)) {
   244c6:	076b      	lsls	r3, r5, #29
   244c8:	d1d4      	bne.n	24474 <hexdump_line_print+0x60>
			print_formatted(output, " ");
   244ca:	4620      	mov	r0, r4
   244cc:	4902      	ldr	r1, [pc, #8]	; (244d8 <hexdump_line_print+0xc4>)
   244ce:	f7ff ff81 	bl	243d4 <print_formatted>
   244d2:	e7cf      	b.n	24474 <hexdump_line_print+0x60>
		}
	}
}
   244d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   244d8:	0003f52f 	.word	0x0003f52f
   244dc:	0003f527 	.word	0x0003f527
   244e0:	0003f531 	.word	0x0003f531
   244e4:	0003f52d 	.word	0x0003f52d
   244e8:	000431d6 	.word	0x000431d6
   244ec:	0003f533 	.word	0x0003f533

000244f0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   244f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   244f4:	f011 0602 	ands.w	r6, r1, #2
{
   244f8:	b087      	sub	sp, #28
   244fa:	9205      	str	r2, [sp, #20]
   244fc:	4607      	mov	r7, r0
   244fe:	461a      	mov	r2, r3
   24500:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   24504:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   24508:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   2450c:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   24510:	d006      	beq.n	24520 <prefix_print+0x30>
	if (!format) {
   24512:	f011 0f44 	tst.w	r1, #68	; 0x44
   24516:	d134      	bne.n	24582 <prefix_print+0x92>
		length = print_formatted(output, "[%08lu] ", timestamp);
   24518:	4930      	ldr	r1, [pc, #192]	; (245dc <prefix_print+0xec>)
   2451a:	f7ff ff5b 	bl	243d4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   2451e:	4606      	mov	r6, r0
	if (color) {
   24520:	f1ba 0f00 	cmp.w	sl, #0
   24524:	d00a      	beq.n	2453c <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   24526:	4b2e      	ldr	r3, [pc, #184]	; (245e0 <prefix_print+0xf0>)
		print_formatted(output, "%s", log_color);
   24528:	4638      	mov	r0, r7
		const char *log_color = start && (colors[level] != NULL) ?
   2452a:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   2452e:	4b2d      	ldr	r3, [pc, #180]	; (245e4 <prefix_print+0xf4>)
   24530:	492d      	ldr	r1, [pc, #180]	; (245e8 <prefix_print+0xf8>)
   24532:	2a00      	cmp	r2, #0
   24534:	bf08      	it	eq
   24536:	461a      	moveq	r2, r3
   24538:	f7ff ff4c 	bl	243d4 <print_formatted>
	if (level_on) {
   2453c:	b13d      	cbz	r5, 2454e <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   2453e:	4b2b      	ldr	r3, [pc, #172]	; (245ec <prefix_print+0xfc>)
   24540:	4638      	mov	r0, r7
   24542:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   24546:	492a      	ldr	r1, [pc, #168]	; (245f0 <prefix_print+0x100>)
   24548:	f7ff ff44 	bl	243d4 <print_formatted>
   2454c:	4605      	mov	r5, r0
	if (source_id >= 0) {
   2454e:	f1b9 0f00 	cmp.w	r9, #0
   24552:	db12      	blt.n	2457a <prefix_print+0x8a>
		total += print_formatted(output,
   24554:	9b05      	ldr	r3, [sp, #20]
   24556:	4c27      	ldr	r4, [pc, #156]	; (245f4 <prefix_print+0x104>)
   24558:	b123      	cbz	r3, 24564 <prefix_print+0x74>
   2455a:	4b27      	ldr	r3, [pc, #156]	; (245f8 <prefix_print+0x108>)
   2455c:	f1b8 0f04 	cmp.w	r8, #4
   24560:	bf08      	it	eq
   24562:	461c      	moveq	r4, r3
   24564:	4649      	mov	r1, r9
   24566:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   2456a:	f7ff fbfd 	bl	23d68 <log_source_name_get>
   2456e:	4621      	mov	r1, r4
   24570:	4602      	mov	r2, r0
   24572:	4638      	mov	r0, r7
   24574:	f7ff ff2e 	bl	243d4 <print_formatted>
   24578:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   2457a:	19a8      	adds	r0, r5, r6
   2457c:	b007      	add	sp, #28
   2457e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   24582:	4b1e      	ldr	r3, [pc, #120]	; (245fc <prefix_print+0x10c>)
   24584:	6819      	ldr	r1, [r3, #0]
   24586:	b331      	cbz	r1, 245d6 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   24588:	4b1d      	ldr	r3, [pc, #116]	; (24600 <prefix_print+0x110>)
   2458a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   2458e:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
   24590:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		timestamp /= timestamp_div;
   24594:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
   24598:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   2459c:	fbb4 f2f6 	udiv	r2, r4, r6
   245a0:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
   245a4:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   245a8:	fb0b f404 	mul.w	r4, fp, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   245ac:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
   245b0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   245b4:	fb01 441e 	mls	r4, r1, lr, r4
		mins = seconds / 60U;
   245b8:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   245bc:	fb0b f404 	mul.w	r4, fp, r4
   245c0:	fbb4 f4f1 	udiv	r4, r4, r1
			length = print_formatted(output,
   245c4:	fb0c 6613 	mls	r6, ip, r3, r6
   245c8:	e9cd e401 	strd	lr, r4, [sp, #4]
   245cc:	490d      	ldr	r1, [pc, #52]	; (24604 <prefix_print+0x114>)
   245ce:	9600      	str	r6, [sp, #0]
   245d0:	f7ff ff00 	bl	243d4 <print_formatted>
   245d4:	e7a3      	b.n	2451e <prefix_print+0x2e>
		length = 0;
   245d6:	4608      	mov	r0, r1
   245d8:	e7a1      	b.n	2451e <prefix_print+0x2e>
   245da:	bf00      	nop
   245dc:	0003f544 	.word	0x0003f544
   245e0:	0003e758 	.word	0x0003e758
   245e4:	0003f536 	.word	0x0003f536
   245e8:	00040987 	.word	0x00040987
   245ec:	0003e76c 	.word	0x0003e76c
   245f0:	0003f569 	.word	0x0003f569
   245f4:	0003f53f 	.word	0x0003f53f
   245f8:	0003f53b 	.word	0x0003f53b
   245fc:	20017774 	.word	0x20017774
   24600:	20017770 	.word	0x20017770
   24604:	0003f54d 	.word	0x0003f54d

00024608 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   24608:	b538      	push	{r3, r4, r5, lr}
	if (color) {
   2460a:	07cb      	lsls	r3, r1, #31
{
   2460c:	4605      	mov	r5, r0
   2460e:	460c      	mov	r4, r1
	if (color) {
   24610:	d503      	bpl.n	2461a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   24612:	4a05      	ldr	r2, [pc, #20]	; (24628 <postfix_print+0x20>)
   24614:	4905      	ldr	r1, [pc, #20]	; (2462c <postfix_print+0x24>)
   24616:	f7ff fedd 	bl	243d4 <print_formatted>
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
   2461a:	4621      	mov	r1, r4
   2461c:	4628      	mov	r0, r5
}
   2461e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	newline_print(output, flags);
   24622:	f7ff bee9 	b.w	243f8 <newline_print>
   24626:	bf00      	nop
   24628:	0003f536 	.word	0x0003f536
   2462c:	00040987 	.word	0x00040987

00024630 <out_func>:
{
   24630:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   24632:	684b      	ldr	r3, [r1, #4]
{
   24634:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   24636:	681a      	ldr	r2, [r3, #0]
   24638:	68cb      	ldr	r3, [r1, #12]
{
   2463a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2463c:	429a      	cmp	r2, r3
   2463e:	d102      	bne.n	24646 <out_func+0x16>
		log_output_flush(out_ctx);
   24640:	4608      	mov	r0, r1
   24642:	f015 fabe 	bl	39bc2 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24646:	6863      	ldr	r3, [r4, #4]
   24648:	e8d3 2fef 	ldaex	r2, [r3]
   2464c:	1c51      	adds	r1, r2, #1
   2464e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   24652:	2800      	cmp	r0, #0
   24654:	d1f8      	bne.n	24648 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   24656:	68a3      	ldr	r3, [r4, #8]
   24658:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   2465a:	6863      	ldr	r3, [r4, #4]
   2465c:	681a      	ldr	r2, [r3, #0]
   2465e:	68e3      	ldr	r3, [r4, #12]
   24660:	429a      	cmp	r2, r3
   24662:	d909      	bls.n	24678 <out_func+0x48>
   24664:	4905      	ldr	r1, [pc, #20]	; (2467c <out_func+0x4c>)
   24666:	4806      	ldr	r0, [pc, #24]	; (24680 <out_func+0x50>)
   24668:	2373      	movs	r3, #115	; 0x73
   2466a:	4a06      	ldr	r2, [pc, #24]	; (24684 <out_func+0x54>)
   2466c:	f014 fda5 	bl	391ba <printk>
   24670:	2173      	movs	r1, #115	; 0x73
   24672:	4804      	ldr	r0, [pc, #16]	; (24684 <out_func+0x54>)
   24674:	f014 fff8 	bl	39668 <assert_post_action>
}
   24678:	2000      	movs	r0, #0
   2467a:	bd38      	pop	{r3, r4, r5, pc}
   2467c:	0003f59e 	.word	0x0003f59e
   24680:	0003f0e1 	.word	0x0003f0e1
   24684:	0003f56f 	.word	0x0003f56f

00024688 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   24688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2468c:	460d      	mov	r5, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2468e:	7a0e      	ldrb	r6, [r1, #8]
	return msg->hdr.ids.level;
   24690:	7a8f      	ldrb	r7, [r1, #10]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   24692:	43f6      	mvns	r6, r6
   24694:	4690      	mov	r8, r2
	return msg->hdr.ids.source_id;
   24696:	896a      	ldrh	r2, [r5, #10]
	return msg->hdr.timestamp;
   24698:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.domain_id;
   2469a:	f3c7 01c2 	ubfx	r1, r7, #3, #3
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   2469e:	f017 0707 	ands.w	r7, r7, #7
{
   246a2:	4604      	mov	r4, r0
   246a4:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   246a6:	f006 0601 	and.w	r6, r6, #1
	return msg->hdr.ids.source_id;
   246aa:	f3c2 1289 	ubfx	r2, r2, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   246ae:	d017      	beq.n	246e0 <log_output_msg_process+0x58>
   246b0:	b212      	sxth	r2, r2
   246b2:	e9cd 1201 	strd	r1, r2, [sp, #4]
   246b6:	9700      	str	r7, [sp, #0]
   246b8:	4632      	mov	r2, r6
   246ba:	4641      	mov	r1, r8
   246bc:	f7ff ff18 	bl	244f0 <prefix_print>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   246c0:	7a2e      	ldrb	r6, [r5, #8]
   246c2:	4681      	mov	r9, r0
   246c4:	43f6      	mvns	r6, r6
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   246c6:	f016 0601 	ands.w	r6, r6, #1
   246ca:	d045      	beq.n	24758 <log_output_msg_process+0xd0>
		std_print(msg, output);
   246cc:	4621      	mov	r1, r4
   246ce:	4628      	mov	r0, r5
   246d0:	f015 f91a 	bl	39908 <std_print>
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
		postfix_print(output, flags, level);
   246d4:	463a      	mov	r2, r7
   246d6:	4641      	mov	r1, r8
   246d8:	4620      	mov	r0, r4
   246da:	f7ff ff95 	bl	24608 <postfix_print>
   246de:	e004      	b.n	246ea <log_output_msg_process+0x62>
	if (log_msg_is_std(msg)) {
   246e0:	b14e      	cbz	r6, 246f6 <log_output_msg_process+0x6e>
		std_print(msg, output);
   246e2:	4601      	mov	r1, r0
   246e4:	4628      	mov	r0, r5
   246e6:	f015 f90f 	bl	39908 <std_print>
	}

	log_output_flush(output);
   246ea:	4620      	mov	r0, r4
}
   246ec:	b00a      	add	sp, #40	; 0x28
   246ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
   246f2:	f015 ba66 	b.w	39bc2 <log_output_flush>
	__ASSERT_NO_MSG(output->size);
   246f6:	68c3      	ldr	r3, [r0, #12]
   246f8:	b95b      	cbnz	r3, 24712 <log_output_msg_process+0x8a>
   246fa:	4927      	ldr	r1, [pc, #156]	; (24798 <log_output_msg_process+0x110>)
   246fc:	4827      	ldr	r0, [pc, #156]	; (2479c <log_output_msg_process+0x114>)
   246fe:	f240 13cf 	movw	r3, #463	; 0x1cf
   24702:	4a27      	ldr	r2, [pc, #156]	; (247a0 <log_output_msg_process+0x118>)
   24704:	f014 fd59 	bl	391ba <printk>
   24708:	f240 11cf 	movw	r1, #463	; 0x1cf
   2470c:	4824      	ldr	r0, [pc, #144]	; (247a0 <log_output_msg_process+0x118>)
   2470e:	f014 ffab 	bl	39668 <assert_post_action>
{
   24712:	2700      	movs	r7, #0
		length = output->size;
   24714:	68e3      	ldr	r3, [r4, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   24716:	aa06      	add	r2, sp, #24
		length = output->size;
   24718:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   2471a:	4628      	mov	r0, r5
   2471c:	463b      	mov	r3, r7
   2471e:	68a1      	ldr	r1, [r4, #8]
   24720:	f015 f8de 	bl	398e0 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   24724:	9a06      	ldr	r2, [sp, #24]
   24726:	6863      	ldr	r3, [r4, #4]
   24728:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   2472a:	b13a      	cbz	r2, 2473c <log_output_msg_process+0xb4>
			eol = (output->buf[length - 1] == '\n');
   2472c:	68a3      	ldr	r3, [r4, #8]
   2472e:	4413      	add	r3, r2
   24730:	f813 6c01 	ldrb.w	r6, [r3, #-1]
   24734:	f1a6 030a 	sub.w	r3, r6, #10
   24738:	425e      	negs	r6, r3
   2473a:	415e      	adcs	r6, r3
		log_output_flush(output);
   2473c:	4620      	mov	r0, r4
   2473e:	f015 fa40 	bl	39bc2 <log_output_flush>
		offset += length;
   24742:	9b06      	ldr	r3, [sp, #24]
   24744:	441f      	add	r7, r3
	} while (length > 0);
   24746:	2b00      	cmp	r3, #0
   24748:	d1e4      	bne.n	24714 <log_output_msg_process+0x8c>
	if (eol) {
   2474a:	2e00      	cmp	r6, #0
   2474c:	d0cd      	beq.n	246ea <log_output_msg_process+0x62>
		print_formatted(output, "\r");
   2474e:	4620      	mov	r0, r4
   24750:	4914      	ldr	r1, [pc, #80]	; (247a4 <log_output_msg_process+0x11c>)
   24752:	f7ff fe3f 	bl	243d4 <print_formatted>
	if (!raw_string) {
   24756:	e7c8      	b.n	246ea <log_output_msg_process+0x62>
	print_formatted(output, "%s", log_msg_str_get(msg));
   24758:	4628      	mov	r0, r5
   2475a:	f015 f8bf 	bl	398dc <log_msg_str_get>
   2475e:	4912      	ldr	r1, [pc, #72]	; (247a8 <log_output_msg_process+0x120>)
   24760:	4602      	mov	r2, r0
   24762:	4620      	mov	r0, r4
   24764:	f7ff fe36 	bl	243d4 <print_formatted>
		length = sizeof(buf);
   24768:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   2476c:	aa05      	add	r2, sp, #20
   2476e:	4633      	mov	r3, r6
   24770:	4628      	mov	r0, r5
   24772:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   24774:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   24778:	f015 f8b2 	bl	398e0 <log_msg_hexdump_data_get>
		if (length) {
   2477c:	9a05      	ldr	r2, [sp, #20]
   2477e:	2a00      	cmp	r2, #0
   24780:	d0a8      	beq.n	246d4 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
   24782:	464b      	mov	r3, r9
   24784:	4620      	mov	r0, r4
   24786:	f8cd 8000 	str.w	r8, [sp]
   2478a:	a906      	add	r1, sp, #24
   2478c:	f7ff fe42 	bl	24414 <hexdump_line_print>
			offset += length;
   24790:	9b05      	ldr	r3, [sp, #20]
   24792:	441e      	add	r6, r3
		length = sizeof(buf);
   24794:	e7ea      	b.n	2476c <log_output_msg_process+0xe4>
   24796:	bf00      	nop
   24798:	0003f5ce 	.word	0x0003f5ce
   2479c:	0003f0e1 	.word	0x0003f0e1
   247a0:	0003f56f 	.word	0x0003f56f
   247a4:	0003f5db 	.word	0x0003f5db
   247a8:	00040987 	.word	0x00040987

000247ac <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   247ac:	f242 730f 	movw	r3, #9999	; 0x270f
{
   247b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   247b2:	428b      	cmp	r3, r1
   247b4:	bf28      	it	cs
   247b6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   247b8:	6805      	ldr	r5, [r0, #0]
{
   247ba:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   247bc:	2105      	movs	r1, #5
   247be:	4668      	mov	r0, sp
   247c0:	4a0d      	ldr	r2, [pc, #52]	; (247f8 <log_output_dropped_process+0x4c>)
   247c2:	f014 fd07 	bl	391d4 <snprintk>
   247c6:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   247c8:	6863      	ldr	r3, [r4, #4]
   247ca:	4628      	mov	r0, r5
   247cc:	220b      	movs	r2, #11
   247ce:	685b      	ldr	r3, [r3, #4]
   247d0:	490a      	ldr	r1, [pc, #40]	; (247fc <log_output_dropped_process+0x50>)
   247d2:	f015 f88c 	bl	398ee <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   247d6:	6863      	ldr	r3, [r4, #4]
   247d8:	4632      	mov	r2, r6
   247da:	4669      	mov	r1, sp
   247dc:	4628      	mov	r0, r5
   247de:	685b      	ldr	r3, [r3, #4]
   247e0:	f015 f885 	bl	398ee <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   247e4:	6863      	ldr	r3, [r4, #4]
   247e6:	221b      	movs	r2, #27
   247e8:	4628      	mov	r0, r5
   247ea:	685b      	ldr	r3, [r3, #4]
   247ec:	4904      	ldr	r1, [pc, #16]	; (24800 <log_output_dropped_process+0x54>)
   247ee:	f015 f87e 	bl	398ee <buffer_write>
		     output->control_block->ctx);
}
   247f2:	b002      	add	sp, #8
   247f4:	bd70      	pop	{r4, r5, r6, pc}
   247f6:	bf00      	nop
   247f8:	00040dcf 	.word	0x00040dcf
   247fc:	0003f5f9 	.word	0x0003f5f9
   24800:	0003f5dd 	.word	0x0003f5dd

00024804 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   24804:	2100      	movs	r1, #0
   24806:	2301      	movs	r3, #1
   24808:	4a06      	ldr	r2, [pc, #24]	; (24824 <log_output_timestamp_freq_set+0x20>)
   2480a:	4290      	cmp	r0, r2
   2480c:	d806      	bhi.n	2481c <log_output_timestamp_freq_set+0x18>
   2480e:	4a06      	ldr	r2, [pc, #24]	; (24828 <log_output_timestamp_freq_set+0x24>)
   24810:	b901      	cbnz	r1, 24814 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   24812:	2301      	movs	r3, #1
   24814:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   24816:	4b05      	ldr	r3, [pc, #20]	; (2482c <log_output_timestamp_freq_set+0x28>)
   24818:	6018      	str	r0, [r3, #0]
}
   2481a:	4770      	bx	lr
		timestamp_div *= 2U;
   2481c:	2101      	movs	r1, #1
		frequency /= 2U;
   2481e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   24820:	005b      	lsls	r3, r3, #1
   24822:	e7f2      	b.n	2480a <log_output_timestamp_freq_set+0x6>
   24824:	000f4240 	.word	0x000f4240
   24828:	20017770 	.word	0x20017770
   2482c:	20017774 	.word	0x20017774

00024830 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   24830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24832:	460d      	mov	r5, r1
   24834:	4604      	mov	r4, r0
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
   24836:	4f06      	ldr	r7, [pc, #24]	; (24850 <char_out+0x20>)
   24838:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   2483a:	42b4      	cmp	r4, r6
   2483c:	d101      	bne.n	24842 <char_out+0x12>
#endif
	}

	return length;
}
   2483e:	4628      	mov	r0, r5
   24840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   24842:	6838      	ldr	r0, [r7, #0]
   24844:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   24848:	6883      	ldr	r3, [r0, #8]
   2484a:	69db      	ldr	r3, [r3, #28]
   2484c:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   2484e:	e7f4      	b.n	2483a <char_out+0xa>
   24850:	2001778c 	.word	0x2001778c

00024854 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   24854:	4801      	ldr	r0, [pc, #4]	; (2485c <panic+0x8>)
   24856:	f015 b9b4 	b.w	39bc2 <log_output_flush>
   2485a:	bf00      	nop
   2485c:	0003e79c 	.word	0x0003e79c

00024860 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   24860:	4801      	ldr	r0, [pc, #4]	; (24868 <dropped+0x8>)
   24862:	f7ff bfa3 	b.w	247ac <log_output_dropped_process>
   24866:	bf00      	nop
   24868:	0003e79c 	.word	0x0003e79c

0002486c <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
   2486c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   2486e:	4809      	ldr	r0, [pc, #36]	; (24894 <log_backend_uart_init+0x28>)
   24870:	f00f f804 	bl	3387c <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   24874:	4b08      	ldr	r3, [pc, #32]	; (24898 <log_backend_uart_init+0x2c>)
   24876:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
   24878:	b958      	cbnz	r0, 24892 <log_backend_uart_init+0x26>
   2487a:	234f      	movs	r3, #79	; 0x4f
   2487c:	4907      	ldr	r1, [pc, #28]	; (2489c <log_backend_uart_init+0x30>)
   2487e:	4808      	ldr	r0, [pc, #32]	; (248a0 <log_backend_uart_init+0x34>)
   24880:	4a08      	ldr	r2, [pc, #32]	; (248a4 <log_backend_uart_init+0x38>)
   24882:	f014 fc9a 	bl	391ba <printk>
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
   24886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG((void *)uart_dev);
   2488a:	214f      	movs	r1, #79	; 0x4f
   2488c:	4805      	ldr	r0, [pc, #20]	; (248a4 <log_backend_uart_init+0x38>)
   2488e:	f014 beeb 	b.w	39668 <assert_post_action>
}
   24892:	bd08      	pop	{r3, pc}
   24894:	0003f625 	.word	0x0003f625
   24898:	2001778c 	.word	0x2001778c
   2489c:	0003f661 	.word	0x0003f661
   248a0:	0003f0e1 	.word	0x0003f0e1
   248a4:	0003f62c 	.word	0x0003f62c

000248a8 <put>:
{
   248a8:	b510      	push	{r4, lr}
   248aa:	460c      	mov	r4, r1
	log_msg_get(msg);
   248ac:	4608      	mov	r0, r1
   248ae:	f014 ffdb 	bl	39868 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   248b2:	4621      	mov	r1, r4
   248b4:	4804      	ldr	r0, [pc, #16]	; (248c8 <put+0x20>)
   248b6:	220f      	movs	r2, #15
   248b8:	f7ff fee6 	bl	24688 <log_output_msg_process>
	log_msg_put(msg);
   248bc:	4620      	mov	r0, r4
}
   248be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   248c2:	f014 bffc 	b.w	398be <log_msg_put>
   248c6:	bf00      	nop
   248c8:	0003e79c 	.word	0x0003e79c

000248cc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   248cc:	2201      	movs	r2, #1
   248ce:	4b01      	ldr	r3, [pc, #4]	; (248d4 <log_backend_rtt_init+0x8>)
   248d0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   248d2:	4770      	bx	lr
   248d4:	200180e1 	.word	0x200180e1

000248d8 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   248d8:	2201      	movs	r2, #1
   248da:	4b02      	ldr	r3, [pc, #8]	; (248e4 <panic+0xc>)
	log_output_flush(output);
   248dc:	4802      	ldr	r0, [pc, #8]	; (248e8 <panic+0x10>)
   248de:	701a      	strb	r2, [r3, #0]
   248e0:	f015 b96f 	b.w	39bc2 <log_output_flush>
   248e4:	200180e2 	.word	0x200180e2
   248e8:	0003e7c8 	.word	0x0003e7c8

000248ec <dropped>:
	log_output_dropped_process(output, cnt);
   248ec:	4801      	ldr	r0, [pc, #4]	; (248f4 <dropped+0x8>)
   248ee:	f7ff bf5d 	b.w	247ac <log_output_dropped_process>
   248f2:	bf00      	nop
   248f4:	0003e7c8 	.word	0x0003e7c8

000248f8 <put>:
{
   248f8:	b510      	push	{r4, lr}
   248fa:	460c      	mov	r4, r1
	log_msg_get(msg);
   248fc:	4608      	mov	r0, r1
   248fe:	f014 ffb3 	bl	39868 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   24902:	4621      	mov	r1, r4
   24904:	4804      	ldr	r0, [pc, #16]	; (24918 <put+0x20>)
   24906:	220f      	movs	r2, #15
   24908:	f7ff febe 	bl	24688 <log_output_msg_process>
	log_msg_put(msg);
   2490c:	4620      	mov	r0, r4
}
   2490e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24912:	f014 bfd4 	b.w	398be <log_msg_put>
   24916:	bf00      	nop
   24918:	0003e7c8 	.word	0x0003e7c8

0002491c <on_failed_write>:
	if (retry_cnt == 0) {
   2491c:	b910      	cbnz	r0, 24924 <on_failed_write+0x8>
		host_present = false;
   2491e:	4b07      	ldr	r3, [pc, #28]	; (2493c <on_failed_write+0x20>)
   24920:	7018      	strb	r0, [r3, #0]
}
   24922:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   24924:	4b06      	ldr	r3, [pc, #24]	; (24940 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   24926:	781b      	ldrb	r3, [r3, #0]
   24928:	b11b      	cbz	r3, 24932 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   2492a:	f241 3088 	movw	r0, #5000	; 0x1388
   2492e:	f018 bdd0 	b.w	3d4d2 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   24932:	20a4      	movs	r0, #164	; 0xa4
   24934:	2100      	movs	r1, #0
   24936:	f011 bc9d 	b.w	36274 <z_impl_k_sleep>
   2493a:	bf00      	nop
   2493c:	200180e1 	.word	0x200180e1
   24940:	200180e2 	.word	0x200180e2

00024944 <data_out_block_mode>:
{
   24944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24948:	4607      	mov	r7, r0
   2494a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   2494c:	2404      	movs	r4, #4
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   2494e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 249dc <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
   24952:	f8df 908c 	ldr.w	r9, [pc, #140]	; 249e0 <data_out_block_mode+0x9c>
		if (!is_sync_mode()) {
   24956:	f898 5000 	ldrb.w	r5, [r8]
   2495a:	b9dd      	cbnz	r5, 24994 <data_out_block_mode+0x50>
   2495c:	f04f 33ff 	mov.w	r3, #4294967295
   24960:	f04f 32ff 	mov.w	r2, #4294967295
   24964:	4648      	mov	r0, r9
   24966:	f00f fdeb 	bl	34540 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   2496a:	4632      	mov	r2, r6
   2496c:	4639      	mov	r1, r7
   2496e:	4628      	mov	r0, r5
   24970:	f00b f908 	bl	2fb84 <SEGGER_RTT_WriteSkipNoLock>
   24974:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   24976:	4648      	mov	r0, r9
   24978:	f00f fedc 	bl	34734 <z_impl_k_mutex_unlock>
		if (ret) {
   2497c:	f8df a064 	ldr.w	sl, [pc, #100]	; 249e4 <data_out_block_mode+0xa0>
   24980:	b1f5      	cbz	r5, 249c0 <data_out_block_mode+0x7c>
	host_present = true;
   24982:	2301      	movs	r3, #1
   24984:	f88a 3000 	strb.w	r3, [sl]
	if (is_panic_mode()) {
   24988:	f898 3000 	ldrb.w	r3, [r8]
   2498c:	b973      	cbnz	r3, 249ac <data_out_block_mode+0x68>
}
   2498e:	4630      	mov	r0, r6
   24990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   24994:	4632      	mov	r2, r6
   24996:	4639      	mov	r1, r7
   24998:	2000      	movs	r0, #0
   2499a:	f00b f8f3 	bl	2fb84 <SEGGER_RTT_WriteSkipNoLock>
   2499e:	4605      	mov	r5, r0
   249a0:	e7ec      	b.n	2497c <data_out_block_mode+0x38>
			on_failed_write(retry_cnt--);
   249a2:	4620      	mov	r0, r4
   249a4:	1e65      	subs	r5, r4, #1
   249a6:	f7ff ffb9 	bl	2491c <on_failed_write>
   249aa:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   249ac:	2000      	movs	r0, #0
   249ae:	f00b f931 	bl	2fc14 <SEGGER_RTT_HasDataUp>
   249b2:	2800      	cmp	r0, #0
   249b4:	d0eb      	beq.n	2498e <data_out_block_mode+0x4a>
   249b6:	f89a 3000 	ldrb.w	r3, [sl]
   249ba:	2b00      	cmp	r3, #0
   249bc:	d1f1      	bne.n	249a2 <data_out_block_mode+0x5e>
   249be:	e7e6      	b.n	2498e <data_out_block_mode+0x4a>
		} else if (host_present) {
   249c0:	f89a 3000 	ldrb.w	r3, [sl]
   249c4:	2b00      	cmp	r3, #0
   249c6:	d0e2      	beq.n	2498e <data_out_block_mode+0x4a>
			retry_cnt--;
   249c8:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   249ca:	4620      	mov	r0, r4
   249cc:	f7ff ffa6 	bl	2491c <on_failed_write>
	} while ((ret == 0) && host_present);
   249d0:	f89a 3000 	ldrb.w	r3, [sl]
   249d4:	2b00      	cmp	r3, #0
   249d6:	d1be      	bne.n	24956 <data_out_block_mode+0x12>
   249d8:	e7d9      	b.n	2498e <data_out_block_mode+0x4a>
   249da:	bf00      	nop
   249dc:	200180e2 	.word	0x200180e2
   249e0:	20014b00 	.word	0x20014b00
   249e4:	200180e1 	.word	0x200180e1

000249e8 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   249e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   249ea:	4604      	mov	r4, r0
   249ec:	b09b      	sub	sp, #108	; 0x6c
   249ee:	460f      	mov	r7, r1
   249f0:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   249f2:	2100      	movs	r1, #0
   249f4:	2230      	movs	r2, #48	; 0x30
   249f6:	a802      	add	r0, sp, #8
   249f8:	f018 fe45 	bl	3d686 <memset>
	int ret = 0;

	if (!ctx || !time) {
   249fc:	2c00      	cmp	r4, #0
   249fe:	d07b      	beq.n	24af8 <sntp_query+0x110>
   24a00:	2e00      	cmp	r6, #0
   24a02:	d079      	beq.n	24af8 <sntp_query+0x110>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   24a04:	231b      	movs	r3, #27
   24a06:	f88d 3008 	strb.w	r3, [sp, #8]
	return z_impl_k_uptime_ticks();
   24a0a:	f018 fd60 	bl	3d4ce <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   24a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24a12:	2500      	movs	r5, #0
   24a14:	fba0 0302 	umull	r0, r3, r0, r2
   24a18:	fb02 3101 	mla	r1, r2, r1, r3
   24a1c:	0bc0      	lsrs	r0, r0, #15
	return time / MSEC_PER_SEC;
   24a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24a22:	2300      	movs	r3, #0
   24a24:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   24a28:	4629      	mov	r1, r5
   24a2a:	f7fc fbd5 	bl	211d8 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   24a2e:	4b34      	ldr	r3, [pc, #208]	; (24b00 <sntp_query+0x118>)
   24a30:	4403      	add	r3, r0
   24a32:	6123      	str	r3, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   24a34:	ba1b      	rev	r3, r3
   24a36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24a3a:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   24a3e:	68e0      	ldr	r0, [r4, #12]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   24a40:	930c      	str	r3, [sp, #48]	; 0x30
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   24a42:	2230      	movs	r2, #48	; 0x30
   24a44:	462b      	mov	r3, r5
   24a46:	e9cd 5500 	strd	r5, r5, [sp]
   24a4a:	a902      	add	r1, sp, #8
   24a4c:	f015 f95c 	bl	39d08 <z_impl_zsock_sendto>
	if (ret < 0) {
   24a50:	2800      	cmp	r0, #0
   24a52:	db0f      	blt.n	24a74 <sntp_query+0x8c>
	struct sntp_pkt buf = { 0 };
   24a54:	4629      	mov	r1, r5
   24a56:	2230      	movs	r2, #48	; 0x30
   24a58:	a80e      	add	r0, sp, #56	; 0x38
   24a5a:	f018 fe14 	bl	3d686 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   24a5e:	68a1      	ldr	r1, [r4, #8]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   24a60:	463a      	mov	r2, r7
   24a62:	4620      	mov	r0, r4
   24a64:	f015 f9b0 	bl	39dc8 <z_impl_zsock_poll>
	if (status < 0) {
   24a68:	42a8      	cmp	r0, r5
   24a6a:	da05      	bge.n	24a78 <sntp_query+0x90>
		return -errno;
   24a6c:	f015 fb1d 	bl	3a0aa <__errno>
   24a70:	6800      	ldr	r0, [r0, #0]
   24a72:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   24a74:	b01b      	add	sp, #108	; 0x6c
   24a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status == 0) {
   24a78:	d035      	beq.n	24ae6 <sntp_query+0xfe>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   24a7a:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   24a7c:	2230      	movs	r2, #48	; 0x30
   24a7e:	462b      	mov	r3, r5
   24a80:	e9cd 5500 	strd	r5, r5, [sp]
   24a84:	a90e      	add	r1, sp, #56	; 0x38
   24a86:	f015 f96f 	bl	39d68 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   24a8a:	2800      	cmp	r0, #0
   24a8c:	dbee      	blt.n	24a6c <sntp_query+0x84>
	if (rcvd != sizeof(struct sntp_pkt)) {
   24a8e:	2830      	cmp	r0, #48	; 0x30
   24a90:	d12c      	bne.n	24aec <sntp_query+0x104>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   24a92:	9b14      	ldr	r3, [sp, #80]	; 0x50
   24a94:	6922      	ldr	r2, [r4, #16]
   24a96:	ba1b      	rev	r3, r3
   24a98:	429a      	cmp	r2, r3
   24a9a:	d002      	beq.n	24aa2 <sntp_query+0xba>
		return -EINVAL;
   24a9c:	f06f 0015 	mvn.w	r0, #21
   24aa0:	e7e8      	b.n	24a74 <sntp_query+0x8c>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   24aa2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   24aa6:	f003 0307 	and.w	r3, r3, #7
   24aaa:	2b04      	cmp	r3, #4
   24aac:	d1f6      	bne.n	24a9c <sntp_query+0xb4>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   24aae:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   24ab2:	b1f3      	cbz	r3, 24af2 <sntp_query+0x10a>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   24ab4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   24ab6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   24ab8:	ba1b      	rev	r3, r3
   24aba:	ba12      	rev	r2, r2
   24abc:	ea53 0102 	orrs.w	r1, r3, r2
   24ac0:	d0ec      	beq.n	24a9c <sntp_query+0xb4>
	if (ts & 0x80000000) {
   24ac2:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   24ac4:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   24ac6:	da0a      	bge.n	24ade <sntp_query+0xf6>
		if (ts >= OFFSET_1970_JAN_1) {
   24ac8:	4a0e      	ldr	r2, [pc, #56]	; (24b04 <sntp_query+0x11c>)
   24aca:	4293      	cmp	r3, r2
   24acc:	d9e6      	bls.n	24a9c <sntp_query+0xb4>
			time->seconds = ts - OFFSET_1970_JAN_1;
   24ace:	4a0e      	ldr	r2, [pc, #56]	; (24b08 <sntp_query+0x120>)
   24ad0:	189a      	adds	r2, r3, r2
   24ad2:	eb63 0303 	sbc.w	r3, r3, r3
	return 0;
   24ad6:	2000      	movs	r0, #0
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   24ad8:	e9c6 2300 	strd	r2, r3, [r6]
   24adc:	e7ca      	b.n	24a74 <sntp_query+0x8c>
   24ade:	4a0a      	ldr	r2, [pc, #40]	; (24b08 <sntp_query+0x120>)
   24ae0:	441a      	add	r2, r3
   24ae2:	2300      	movs	r3, #0
   24ae4:	e7f7      	b.n	24ad6 <sntp_query+0xee>
		return -ETIMEDOUT;
   24ae6:	f06f 0073 	mvn.w	r0, #115	; 0x73
   24aea:	e7c3      	b.n	24a74 <sntp_query+0x8c>
		return -EMSGSIZE;
   24aec:	f06f 0079 	mvn.w	r0, #121	; 0x79
   24af0:	e7c0      	b.n	24a74 <sntp_query+0x8c>
		return -EBUSY;
   24af2:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   24af6:	e7bd      	b.n	24a74 <sntp_query+0x8c>
		return -EFAULT;
   24af8:	f06f 000d 	mvn.w	r0, #13
   24afc:	e7ba      	b.n	24a74 <sntp_query+0x8c>
   24afe:	bf00      	nop
   24b00:	83aa7e80 	.word	0x83aa7e80
   24b04:	83aa7e7f 	.word	0x83aa7e7f
   24b08:	7c558180 	.word	0x7c558180

00024b0c <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   24b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b10:	4605      	mov	r5, r0
   24b12:	460e      	mov	r6, r1
   24b14:	4617      	mov	r7, r2
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   24b16:	4c1f      	ldr	r4, [pc, #124]	; (24b94 <z_impl_zsock_socket+0x88>)
   24b18:	f8df 807c 	ldr.w	r8, [pc, #124]	; 24b98 <z_impl_zsock_socket+0x8c>
   24b1c:	4544      	cmp	r4, r8
   24b1e:	d90c      	bls.n	24b3a <z_impl_zsock_socket+0x2e>
   24b20:	491e      	ldr	r1, [pc, #120]	; (24b9c <z_impl_zsock_socket+0x90>)
   24b22:	23d3      	movs	r3, #211	; 0xd3
   24b24:	4a1e      	ldr	r2, [pc, #120]	; (24ba0 <z_impl_zsock_socket+0x94>)
   24b26:	481f      	ldr	r0, [pc, #124]	; (24ba4 <z_impl_zsock_socket+0x98>)
   24b28:	f014 fb47 	bl	391ba <printk>
   24b2c:	481e      	ldr	r0, [pc, #120]	; (24ba8 <z_impl_zsock_socket+0x9c>)
   24b2e:	f014 fb44 	bl	391ba <printk>
   24b32:	21d3      	movs	r1, #211	; 0xd3
   24b34:	481a      	ldr	r0, [pc, #104]	; (24ba0 <z_impl_zsock_socket+0x94>)
   24b36:	f014 fd97 	bl	39668 <assert_post_action>
   24b3a:	4544      	cmp	r4, r8
   24b3c:	d307      	bcc.n	24b4e <z_impl_zsock_socket+0x42>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   24b3e:	f015 fab4 	bl	3a0aa <__errno>
   24b42:	236a      	movs	r3, #106	; 0x6a
   24b44:	6003      	str	r3, [r0, #0]
	return -1;
}
   24b46:	f04f 30ff 	mov.w	r0, #4294967295
   24b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sock_family->family != family &&
   24b4e:	6823      	ldr	r3, [r4, #0]
   24b50:	42ab      	cmp	r3, r5
   24b52:	d000      	beq.n	24b56 <z_impl_zsock_socket+0x4a>
   24b54:	b9db      	cbnz	r3, 24b8e <z_impl_zsock_socket+0x82>
		NET_ASSERT(sock_family->is_supported);
   24b56:	6863      	ldr	r3, [r4, #4]
   24b58:	b963      	cbnz	r3, 24b74 <z_impl_zsock_socket+0x68>
   24b5a:	4914      	ldr	r1, [pc, #80]	; (24bac <z_impl_zsock_socket+0xa0>)
   24b5c:	23d9      	movs	r3, #217	; 0xd9
   24b5e:	4a10      	ldr	r2, [pc, #64]	; (24ba0 <z_impl_zsock_socket+0x94>)
   24b60:	4810      	ldr	r0, [pc, #64]	; (24ba4 <z_impl_zsock_socket+0x98>)
   24b62:	f014 fb2a 	bl	391ba <printk>
   24b66:	4812      	ldr	r0, [pc, #72]	; (24bb0 <z_impl_zsock_socket+0xa4>)
   24b68:	f014 fb27 	bl	391ba <printk>
   24b6c:	21d9      	movs	r1, #217	; 0xd9
   24b6e:	480c      	ldr	r0, [pc, #48]	; (24ba0 <z_impl_zsock_socket+0x94>)
   24b70:	f014 fd7a 	bl	39668 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   24b74:	463a      	mov	r2, r7
   24b76:	4631      	mov	r1, r6
   24b78:	4628      	mov	r0, r5
   24b7a:	6863      	ldr	r3, [r4, #4]
   24b7c:	4798      	blx	r3
   24b7e:	b130      	cbz	r0, 24b8e <z_impl_zsock_socket+0x82>
		return sock_family->handler(family, type, proto);
   24b80:	463a      	mov	r2, r7
   24b82:	4631      	mov	r1, r6
   24b84:	4628      	mov	r0, r5
   24b86:	68a3      	ldr	r3, [r4, #8]
}
   24b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return sock_family->handler(family, type, proto);
   24b8c:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   24b8e:	340c      	adds	r4, #12
   24b90:	e7c4      	b.n	24b1c <z_impl_zsock_socket+0x10>
   24b92:	bf00      	nop
   24b94:	0003e45c 	.word	0x0003e45c
   24b98:	0003e468 	.word	0x0003e468
   24b9c:	0003f719 	.word	0x0003f719
   24ba0:	0003f6cb 	.word	0x0003f6cb
   24ba4:	0003f0e1 	.word	0x0003f0e1
   24ba8:	0003f746 	.word	0x0003f746
   24bac:	0003f6ff 	.word	0x0003f6ff
   24bb0:	0003f6c8 	.word	0x0003f6c8

00024bb4 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   24bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   24bb8:	f04f 0800 	mov.w	r8, #0
{
   24bbc:	b09b      	sub	sp, #108	; 0x6c
   24bbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
   24bc2:	4619      	mov	r1, r3
   24bc4:	4610      	mov	r0, r2
   24bc6:	461d      	mov	r5, r3
   24bc8:	4614      	mov	r4, r2

	end = sys_clock_timeout_end_calc(timeout);
   24bca:	f018 fc86 	bl	3d4da <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   24bce:	e9dd 9b04 	ldrd	r9, fp, [sp, #16]
	bool offload = false;
   24bd2:	4647      	mov	r7, r8
	end = sys_clock_timeout_end_calc(timeout);
   24bd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
	pev = poll_events;
   24bd8:	ab0b      	add	r3, sp, #44	; 0x2c
   24bda:	9308      	str	r3, [sp, #32]
	const struct fd_op_vtable *offl_vtable = NULL;
   24bdc:	f8cd 800c 	str.w	r8, [sp, #12]
	for (pfd = fds, i = nfds; i--; pfd++) {
   24be0:	f1bb 0f00 	cmp.w	fp, #0
   24be4:	d120      	bne.n	24c28 <zsock_poll_internal+0x74>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   24be6:	2f00      	cmp	r7, #0
   24be8:	d064      	beq.n	24cb4 <zsock_poll_internal+0x100>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24bea:	f1b5 3fff 	cmp.w	r5, #4294967295
   24bee:	bf08      	it	eq
   24bf0:	f1b4 3fff 	cmpeq.w	r4, #4294967295
			return (uint32_t)((t * to_hz + off) / from_hz);
   24bf4:	bf17      	itett	ne
   24bf6:	f44f 737a 	movne.w	r3, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   24bfa:	f04f 34ff 	moveq.w	r4, #4294967295
   24bfe:	fba4 3403 	umullne	r3, r4, r4, r3
   24c02:	0bdb      	lsrne	r3, r3, #15
   24c04:	bf18      	it	ne
   24c06:	ea43 4444 	orrne.w	r4, r3, r4, lsl #17
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   24c0a:	9b05      	ldr	r3, [sp, #20]
   24c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
   24c10:	9300      	str	r3, [sp, #0]
   24c12:	4641      	mov	r1, r8
   24c14:	9b04      	ldr	r3, [sp, #16]
   24c16:	9803      	ldr	r0, [sp, #12]
   24c18:	9401      	str	r4, [sp, #4]
   24c1a:	f015 f817 	bl	39c4c <z_fdtable_call_ioctl>
   24c1e:	4606      	mov	r6, r0
			}
		}
	} while (retry);

	return ret;
}
   24c20:	4630      	mov	r0, r6
   24c22:	b01b      	add	sp, #108	; 0x6c
   24c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   24c28:	f8d9 0000 	ldr.w	r0, [r9]
   24c2c:	2800      	cmp	r0, #0
   24c2e:	db20      	blt.n	24c72 <zsock_poll_internal+0xbe>
	ctx = z_get_fd_obj_and_vtable(sock,
   24c30:	aa0a      	add	r2, sp, #40	; 0x28
   24c32:	a909      	add	r1, sp, #36	; 0x24
   24c34:	f7fd fdde 	bl	227f4 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   24c38:	4606      	mov	r6, r0
   24c3a:	b1d0      	cbz	r0, 24c72 <zsock_poll_internal+0xbe>
		(void)k_mutex_lock(lock, K_FOREVER);
   24c3c:	f04f 32ff 	mov.w	r2, #4294967295
   24c40:	f04f 33ff 	mov.w	r3, #4294967295
   24c44:	980a      	ldr	r0, [sp, #40]	; 0x28
   24c46:	f015 f810 	bl	39c6a <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   24c4a:	ab1a      	add	r3, sp, #104	; 0x68
   24c4c:	9301      	str	r3, [sp, #4]
   24c4e:	ab08      	add	r3, sp, #32
   24c50:	9300      	str	r3, [sp, #0]
   24c52:	f44f 7281 	mov.w	r2, #258	; 0x102
   24c56:	464b      	mov	r3, r9
   24c58:	4631      	mov	r1, r6
   24c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
   24c5c:	f014 fff6 	bl	39c4c <z_fdtable_call_ioctl>
   24c60:	4682      	mov	sl, r0
		if (result == -EALREADY) {
   24c62:	f11a 0f78 	cmn.w	sl, #120	; 0x78
		k_mutex_unlock(lock);
   24c66:	980a      	ldr	r0, [sp, #40]	; 0x28
		if (result == -EALREADY) {
   24c68:	d108      	bne.n	24c7c <zsock_poll_internal+0xc8>
			timeout = K_NO_WAIT;
   24c6a:	2400      	movs	r4, #0
		k_mutex_unlock(lock);
   24c6c:	f014 ffff 	bl	39c6e <k_mutex_unlock.isra.0>
			timeout = K_NO_WAIT;
   24c70:	4625      	mov	r5, r4
	for (pfd = fds, i = nfds; i--; pfd++) {
   24c72:	f109 0908 	add.w	r9, r9, #8
   24c76:	f10b 3bff 	add.w	fp, fp, #4294967295
   24c7a:	e7b1      	b.n	24be0 <zsock_poll_internal+0x2c>
		} else if (result == -EXDEV) {
   24c7c:	f11a 0f12 	cmn.w	sl, #18
   24c80:	d10b      	bne.n	24c9a <zsock_poll_internal+0xe6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   24c82:	9b03      	ldr	r3, [sp, #12]
   24c84:	b11b      	cbz	r3, 24c8e <zsock_poll_internal+0xda>
		k_mutex_unlock(lock);
   24c86:	f014 fff2 	bl	39c6e <k_mutex_unlock.isra.0>
			offload = true;
   24c8a:	2701      	movs	r7, #1
   24c8c:	e7f1      	b.n	24c72 <zsock_poll_internal+0xbe>
				offl_vtable = vtable;
   24c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
		k_mutex_unlock(lock);
   24c90:	46b0      	mov	r8, r6
				offl_vtable = vtable;
   24c92:	9303      	str	r3, [sp, #12]
		k_mutex_unlock(lock);
   24c94:	f014 ffeb 	bl	39c6e <k_mutex_unlock.isra.0>
		if (result < 0) {
   24c98:	e7f7      	b.n	24c8a <zsock_poll_internal+0xd6>
		k_mutex_unlock(lock);
   24c9a:	f014 ffe8 	bl	39c6e <k_mutex_unlock.isra.0>
		if (result < 0) {
   24c9e:	f1ba 0f00 	cmp.w	sl, #0
   24ca2:	dae6      	bge.n	24c72 <zsock_poll_internal+0xbe>
			errno = -result;
   24ca4:	f015 fa01 	bl	3a0aa <__errno>
   24ca8:	f1ca 0300 	rsb	r3, sl, #0
			return -1;
   24cac:	f04f 36ff 	mov.w	r6, #4294967295
			errno = -ret;
   24cb0:	6003      	str	r3, [r0, #0]
			return -1;
   24cb2:	e7b5      	b.n	24c20 <zsock_poll_internal+0x6c>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   24cb4:	ea54 0305 	orrs.w	r3, r4, r5
   24cb8:	d010      	beq.n	24cdc <zsock_poll_internal+0x128>
   24cba:	f1b5 3fff 	cmp.w	r5, #4294967295
   24cbe:	bf08      	it	eq
   24cc0:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   24cc4:	d00a      	beq.n	24cdc <zsock_poll_internal+0x128>
		int64_t remaining = end - sys_clock_tick_get();
   24cc6:	f011 ff17 	bl	36af8 <sys_clock_tick_get>
   24cca:	9b06      	ldr	r3, [sp, #24]
   24ccc:	1a1c      	subs	r4, r3, r0
   24cce:	9b07      	ldr	r3, [sp, #28]
   24cd0:	eb63 0501 	sbc.w	r5, r3, r1
		if (remaining <= 0) {
   24cd4:	2d00      	cmp	r5, #0
   24cd6:	bfbc      	itt	lt
   24cd8:	463c      	movlt	r4, r7
   24cda:	4625      	movlt	r5, r4
		retry = false;
   24cdc:	f04f 0a00 	mov.w	sl, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   24ce0:	9908      	ldr	r1, [sp, #32]
   24ce2:	af0b      	add	r7, sp, #44	; 0x2c
   24ce4:	4b3a      	ldr	r3, [pc, #232]	; (24dd0 <zsock_poll_internal+0x21c>)
   24ce6:	1bc9      	subs	r1, r1, r7
   24ce8:	1089      	asrs	r1, r1, #2
   24cea:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   24cec:	462b      	mov	r3, r5
   24cee:	4622      	mov	r2, r4
   24cf0:	4638      	mov	r0, r7
   24cf2:	f012 fa2f 	bl	37154 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   24cf6:	f100 030b 	add.w	r3, r0, #11
   24cfa:	2b0b      	cmp	r3, #11
   24cfc:	4680      	mov	r8, r0
   24cfe:	d804      	bhi.n	24d0a <zsock_poll_internal+0x156>
   24d00:	4e34      	ldr	r6, [pc, #208]	; (24dd4 <zsock_poll_internal+0x220>)
   24d02:	411e      	asrs	r6, r3
   24d04:	f016 0601 	ands.w	r6, r6, #1
   24d08:	d004      	beq.n	24d14 <zsock_poll_internal+0x160>
			errno = -ret;
   24d0a:	f015 f9ce 	bl	3a0aa <__errno>
   24d0e:	f1c8 0300 	rsb	r3, r8, #0
   24d12:	e7cb      	b.n	24cac <zsock_poll_internal+0xf8>
		retry = false;
   24d14:	46b1      	mov	r9, r6
		pev = poll_events;
   24d16:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   24d18:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   24d1c:	f1b8 0f00 	cmp.w	r8, #0
   24d20:	d11c      	bne.n	24d5c <zsock_poll_internal+0x1a8>
		if (retry) {
   24d22:	f1b9 0f00 	cmp.w	r9, #0
   24d26:	f43f af7b 	beq.w	24c20 <zsock_poll_internal+0x6c>
			if (ret > 0) {
   24d2a:	2e00      	cmp	r6, #0
   24d2c:	f73f af78 	bgt.w	24c20 <zsock_poll_internal+0x6c>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24d30:	ea54 0305 	orrs.w	r3, r4, r5
   24d34:	f43f af74 	beq.w	24c20 <zsock_poll_internal+0x6c>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24d38:	f1b5 3fff 	cmp.w	r5, #4294967295
   24d3c:	bf08      	it	eq
   24d3e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   24d42:	d0cd      	beq.n	24ce0 <zsock_poll_internal+0x12c>
				int64_t remaining = end - sys_clock_tick_get();
   24d44:	f011 fed8 	bl	36af8 <sys_clock_tick_get>
   24d48:	9b06      	ldr	r3, [sp, #24]
   24d4a:	1a1c      	subs	r4, r3, r0
   24d4c:	9b07      	ldr	r3, [sp, #28]
   24d4e:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   24d52:	2c01      	cmp	r4, #1
   24d54:	f175 0300 	sbcs.w	r3, r5, #0
   24d58:	dac2      	bge.n	24ce0 <zsock_poll_internal+0x12c>
   24d5a:	e761      	b.n	24c20 <zsock_poll_internal+0x6c>
			if (pfd->fd < 0) {
   24d5c:	6838      	ldr	r0, [r7, #0]
			pfd->revents = 0;
   24d5e:	f8a7 a006 	strh.w	sl, [r7, #6]
			if (pfd->fd < 0) {
   24d62:	2800      	cmp	r0, #0
   24d64:	db2c      	blt.n	24dc0 <zsock_poll_internal+0x20c>
	ctx = z_get_fd_obj_and_vtable(sock,
   24d66:	aa0a      	add	r2, sp, #40	; 0x28
   24d68:	a909      	add	r1, sp, #36	; 0x24
   24d6a:	f7fd fd43 	bl	227f4 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   24d6e:	4683      	mov	fp, r0
   24d70:	b918      	cbnz	r0, 24d7a <zsock_poll_internal+0x1c6>
				pfd->revents = ZSOCK_POLLNVAL;
   24d72:	2320      	movs	r3, #32
   24d74:	80fb      	strh	r3, [r7, #6]
				ret++;
   24d76:	3601      	adds	r6, #1
   24d78:	e022      	b.n	24dc0 <zsock_poll_internal+0x20c>
			(void)k_mutex_lock(lock, K_FOREVER);
   24d7a:	f04f 32ff 	mov.w	r2, #4294967295
   24d7e:	f04f 33ff 	mov.w	r3, #4294967295
   24d82:	980a      	ldr	r0, [sp, #40]	; 0x28
   24d84:	f014 ff71 	bl	39c6a <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   24d88:	ab08      	add	r3, sp, #32
   24d8a:	4659      	mov	r1, fp
   24d8c:	f240 1203 	movw	r2, #259	; 0x103
   24d90:	9300      	str	r3, [sp, #0]
   24d92:	9809      	ldr	r0, [sp, #36]	; 0x24
   24d94:	463b      	mov	r3, r7
   24d96:	f014 ff59 	bl	39c4c <z_fdtable_call_ioctl>
   24d9a:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   24d9c:	980a      	ldr	r0, [sp, #40]	; 0x28
   24d9e:	f014 ff66 	bl	39c6e <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   24da2:	f11b 0f0b 	cmn.w	fp, #11
   24da6:	d00f      	beq.n	24dc8 <zsock_poll_internal+0x214>
			} else if (result != 0) {
   24da8:	f1bb 0f00 	cmp.w	fp, #0
   24dac:	d004      	beq.n	24db8 <zsock_poll_internal+0x204>
				errno = -result;
   24dae:	f015 f97c 	bl	3a0aa <__errno>
   24db2:	f1cb 0300 	rsb	r3, fp, #0
   24db6:	e779      	b.n	24cac <zsock_poll_internal+0xf8>
			if (pfd->revents != 0) {
   24db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   24dbc:	2b00      	cmp	r3, #0
   24dbe:	d1da      	bne.n	24d76 <zsock_poll_internal+0x1c2>
		for (pfd = fds, i = nfds; i--; pfd++) {
   24dc0:	3708      	adds	r7, #8
   24dc2:	f108 38ff 	add.w	r8, r8, #4294967295
   24dc6:	e7a9      	b.n	24d1c <zsock_poll_internal+0x168>
				retry = true;
   24dc8:	f04f 0901 	mov.w	r9, #1
   24dcc:	e7f8      	b.n	24dc0 <zsock_poll_internal+0x20c>
   24dce:	bf00      	nop
   24dd0:	cccccccd 	.word	0xcccccccd
   24dd4:	fffff77e 	.word	0xfffff77e

00024dd8 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   24dd8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   24dda:	4604      	mov	r4, r0
   24ddc:	b948      	cbnz	r0, 24df2 <socket_offload_dns_register+0x1a>
   24dde:	490c      	ldr	r1, [pc, #48]	; (24e10 <socket_offload_dns_register+0x38>)
   24de0:	480c      	ldr	r0, [pc, #48]	; (24e14 <socket_offload_dns_register+0x3c>)
   24de2:	2313      	movs	r3, #19
   24de4:	4a0c      	ldr	r2, [pc, #48]	; (24e18 <socket_offload_dns_register+0x40>)
   24de6:	f014 f9e8 	bl	391ba <printk>
   24dea:	2113      	movs	r1, #19
   24dec:	480a      	ldr	r0, [pc, #40]	; (24e18 <socket_offload_dns_register+0x40>)
   24dee:	f014 fc3b 	bl	39668 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   24df2:	4d0a      	ldr	r5, [pc, #40]	; (24e1c <socket_offload_dns_register+0x44>)
   24df4:	682b      	ldr	r3, [r5, #0]
   24df6:	b14b      	cbz	r3, 24e0c <socket_offload_dns_register+0x34>
   24df8:	4909      	ldr	r1, [pc, #36]	; (24e20 <socket_offload_dns_register+0x48>)
   24dfa:	4806      	ldr	r0, [pc, #24]	; (24e14 <socket_offload_dns_register+0x3c>)
   24dfc:	2314      	movs	r3, #20
   24dfe:	4a06      	ldr	r2, [pc, #24]	; (24e18 <socket_offload_dns_register+0x40>)
   24e00:	f014 f9db 	bl	391ba <printk>
   24e04:	2114      	movs	r1, #20
   24e06:	4804      	ldr	r0, [pc, #16]	; (24e18 <socket_offload_dns_register+0x40>)
   24e08:	f014 fc2e 	bl	39668 <assert_post_action>

	dns_offload = ops;
   24e0c:	602c      	str	r4, [r5, #0]
}
   24e0e:	bd38      	pop	{r3, r4, r5, pc}
   24e10:	00042943 	.word	0x00042943
   24e14:	0003f0e1 	.word	0x0003f0e1
   24e18:	0003f765 	.word	0x0003f765
   24e1c:	200177a4 	.word	0x200177a4
   24e20:	0003f7a0 	.word	0x0003f7a0

00024e24 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   24e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   24e28:	f8df 8058 	ldr.w	r8, [pc, #88]	; 24e84 <socket_offload_getaddrinfo+0x60>
{
   24e2c:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dns_offload);
   24e2e:	f8d8 3000 	ldr.w	r3, [r8]
{
   24e32:	4604      	mov	r4, r0
   24e34:	460d      	mov	r5, r1
   24e36:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dns_offload);
   24e38:	b94b      	cbnz	r3, 24e4e <socket_offload_getaddrinfo+0x2a>
   24e3a:	4913      	ldr	r1, [pc, #76]	; (24e88 <socket_offload_getaddrinfo+0x64>)
   24e3c:	4813      	ldr	r0, [pc, #76]	; (24e8c <socket_offload_getaddrinfo+0x68>)
   24e3e:	231d      	movs	r3, #29
   24e40:	4a13      	ldr	r2, [pc, #76]	; (24e90 <socket_offload_getaddrinfo+0x6c>)
   24e42:	f014 f9ba 	bl	391ba <printk>
   24e46:	211d      	movs	r1, #29
   24e48:	4811      	ldr	r0, [pc, #68]	; (24e90 <socket_offload_getaddrinfo+0x6c>)
   24e4a:	f014 fc0d 	bl	39668 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   24e4e:	f8d8 3000 	ldr.w	r3, [r8]
   24e52:	681b      	ldr	r3, [r3, #0]
   24e54:	b94b      	cbnz	r3, 24e6a <socket_offload_getaddrinfo+0x46>
   24e56:	490f      	ldr	r1, [pc, #60]	; (24e94 <socket_offload_getaddrinfo+0x70>)
   24e58:	480c      	ldr	r0, [pc, #48]	; (24e8c <socket_offload_getaddrinfo+0x68>)
   24e5a:	231e      	movs	r3, #30
   24e5c:	4a0c      	ldr	r2, [pc, #48]	; (24e90 <socket_offload_getaddrinfo+0x6c>)
   24e5e:	f014 f9ac 	bl	391ba <printk>
   24e62:	211e      	movs	r1, #30
   24e64:	480a      	ldr	r0, [pc, #40]	; (24e90 <socket_offload_getaddrinfo+0x6c>)
   24e66:	f014 fbff 	bl	39668 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   24e6a:	f8d8 3000 	ldr.w	r3, [r8]
   24e6e:	4632      	mov	r2, r6
   24e70:	f8d3 e000 	ldr.w	lr, [r3]
   24e74:	4629      	mov	r1, r5
   24e76:	463b      	mov	r3, r7
   24e78:	4620      	mov	r0, r4
   24e7a:	46f4      	mov	ip, lr
}
   24e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   24e80:	4760      	bx	ip
   24e82:	bf00      	nop
   24e84:	200177a4 	.word	0x200177a4
   24e88:	0003f7bb 	.word	0x0003f7bb
   24e8c:	0003f0e1 	.word	0x0003f0e1
   24e90:	0003f765 	.word	0x0003f765
   24e94:	0003f7c7 	.word	0x0003f7c7

00024e98 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   24e98:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   24e9a:	4d10      	ldr	r5, [pc, #64]	; (24edc <socket_offload_freeaddrinfo+0x44>)
{
   24e9c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(dns_offload);
   24e9e:	682b      	ldr	r3, [r5, #0]
   24ea0:	b94b      	cbnz	r3, 24eb6 <socket_offload_freeaddrinfo+0x1e>
   24ea2:	490f      	ldr	r1, [pc, #60]	; (24ee0 <socket_offload_freeaddrinfo+0x48>)
   24ea4:	480f      	ldr	r0, [pc, #60]	; (24ee4 <socket_offload_freeaddrinfo+0x4c>)
   24ea6:	2325      	movs	r3, #37	; 0x25
   24ea8:	4a0f      	ldr	r2, [pc, #60]	; (24ee8 <socket_offload_freeaddrinfo+0x50>)
   24eaa:	f014 f986 	bl	391ba <printk>
   24eae:	2125      	movs	r1, #37	; 0x25
   24eb0:	480d      	ldr	r0, [pc, #52]	; (24ee8 <socket_offload_freeaddrinfo+0x50>)
   24eb2:	f014 fbd9 	bl	39668 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   24eb6:	682b      	ldr	r3, [r5, #0]
   24eb8:	685b      	ldr	r3, [r3, #4]
   24eba:	b94b      	cbnz	r3, 24ed0 <socket_offload_freeaddrinfo+0x38>
   24ebc:	490b      	ldr	r1, [pc, #44]	; (24eec <socket_offload_freeaddrinfo+0x54>)
   24ebe:	4809      	ldr	r0, [pc, #36]	; (24ee4 <socket_offload_freeaddrinfo+0x4c>)
   24ec0:	2326      	movs	r3, #38	; 0x26
   24ec2:	4a09      	ldr	r2, [pc, #36]	; (24ee8 <socket_offload_freeaddrinfo+0x50>)
   24ec4:	f014 f979 	bl	391ba <printk>
   24ec8:	2126      	movs	r1, #38	; 0x26
   24eca:	4807      	ldr	r0, [pc, #28]	; (24ee8 <socket_offload_freeaddrinfo+0x50>)
   24ecc:	f014 fbcc 	bl	39668 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   24ed0:	682b      	ldr	r3, [r5, #0]
   24ed2:	4620      	mov	r0, r4
}
   24ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   24ed8:	685b      	ldr	r3, [r3, #4]
   24eda:	4718      	bx	r3
   24edc:	200177a4 	.word	0x200177a4
   24ee0:	0003f7bb 	.word	0x0003f7bb
   24ee4:	0003f0e1 	.word	0x0003f0e1
   24ee8:	0003f765 	.word	0x0003f765
   24eec:	0003f7e0 	.word	0x0003f7e0

00024ef0 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   24ef0:	4b08      	ldr	r3, [pc, #32]	; (24f14 <get_flash_area_from_id+0x24>)
{
   24ef2:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   24ef4:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   24ef6:	4b08      	ldr	r3, [pc, #32]	; (24f18 <get_flash_area_from_id+0x28>)
{
   24ef8:	4601      	mov	r1, r0
   24efa:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   24efc:	2300      	movs	r3, #0
   24efe:	429c      	cmp	r4, r3
   24f00:	dc01      	bgt.n	24f06 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   24f02:	2000      	movs	r0, #0
}
   24f04:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   24f06:	4610      	mov	r0, r2
   24f08:	7805      	ldrb	r5, [r0, #0]
   24f0a:	3210      	adds	r2, #16
   24f0c:	428d      	cmp	r5, r1
   24f0e:	d0f9      	beq.n	24f04 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
   24f10:	3301      	adds	r3, #1
   24f12:	e7f4      	b.n	24efe <get_flash_area_from_id+0xe>
   24f14:	0003e810 	.word	0x0003e810
   24f18:	200145cc 	.word	0x200145cc

00024f1c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   24f1c:	4b08      	ldr	r3, [pc, #32]	; (24f40 <flash_area_open+0x24>)
{
   24f1e:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   24f20:	681b      	ldr	r3, [r3, #0]
{
   24f22:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   24f24:	b12b      	cbz	r3, 24f32 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   24f26:	f7ff ffe3 	bl	24ef0 <get_flash_area_from_id>
	if (area == NULL) {
   24f2a:	b128      	cbz	r0, 24f38 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   24f2c:	6020      	str	r0, [r4, #0]
	return 0;
   24f2e:	2000      	movs	r0, #0
}
   24f30:	bd10      	pop	{r4, pc}
		return -EACCES;
   24f32:	f06f 000c 	mvn.w	r0, #12
   24f36:	e7fb      	b.n	24f30 <flash_area_open+0x14>
		return -ENOENT;
   24f38:	f06f 0001 	mvn.w	r0, #1
   24f3c:	e7f8      	b.n	24f30 <flash_area_open+0x14>
   24f3e:	bf00      	nop
   24f40:	200145cc 	.word	0x200145cc

00024f44 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   24f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f46:	4605      	mov	r5, r0
	__asm__ volatile(
   24f48:	f04f 0320 	mov.w	r3, #32
   24f4c:	f3ef 8611 	mrs	r6, BASEPRI
   24f50:	f383 8811 	msr	BASEPRI, r3
   24f54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24f58:	481c      	ldr	r0, [pc, #112]	; (24fcc <pm_state_notify+0x88>)
   24f5a:	f00f f94b 	bl	341f4 <z_spin_lock_valid>
   24f5e:	b968      	cbnz	r0, 24f7c <pm_state_notify+0x38>
   24f60:	2381      	movs	r3, #129	; 0x81
   24f62:	4a1b      	ldr	r2, [pc, #108]	; (24fd0 <pm_state_notify+0x8c>)
   24f64:	491b      	ldr	r1, [pc, #108]	; (24fd4 <pm_state_notify+0x90>)
   24f66:	481c      	ldr	r0, [pc, #112]	; (24fd8 <pm_state_notify+0x94>)
   24f68:	f014 f927 	bl	391ba <printk>
   24f6c:	4917      	ldr	r1, [pc, #92]	; (24fcc <pm_state_notify+0x88>)
   24f6e:	481b      	ldr	r0, [pc, #108]	; (24fdc <pm_state_notify+0x98>)
   24f70:	f014 f923 	bl	391ba <printk>
   24f74:	2181      	movs	r1, #129	; 0x81
   24f76:	4816      	ldr	r0, [pc, #88]	; (24fd0 <pm_state_notify+0x8c>)
   24f78:	f014 fb76 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   24f7c:	4813      	ldr	r0, [pc, #76]	; (24fcc <pm_state_notify+0x88>)
   24f7e:	f00f f955 	bl	3422c <z_spin_lock_set_owner>
	return list->head;
   24f82:	4b17      	ldr	r3, [pc, #92]	; (24fe0 <pm_state_notify+0x9c>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   24f84:	4f17      	ldr	r7, [pc, #92]	; (24fe4 <pm_state_notify+0xa0>)
   24f86:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   24f88:	b9b4      	cbnz	r4, 24fb8 <pm_state_notify+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f8a:	4810      	ldr	r0, [pc, #64]	; (24fcc <pm_state_notify+0x88>)
   24f8c:	f00f f940 	bl	34210 <z_spin_unlock_valid>
   24f90:	b968      	cbnz	r0, 24fae <pm_state_notify+0x6a>
   24f92:	23ac      	movs	r3, #172	; 0xac
   24f94:	4a0e      	ldr	r2, [pc, #56]	; (24fd0 <pm_state_notify+0x8c>)
   24f96:	4914      	ldr	r1, [pc, #80]	; (24fe8 <pm_state_notify+0xa4>)
   24f98:	480f      	ldr	r0, [pc, #60]	; (24fd8 <pm_state_notify+0x94>)
   24f9a:	f014 f90e 	bl	391ba <printk>
   24f9e:	490b      	ldr	r1, [pc, #44]	; (24fcc <pm_state_notify+0x88>)
   24fa0:	4812      	ldr	r0, [pc, #72]	; (24fec <pm_state_notify+0xa8>)
   24fa2:	f014 f90a 	bl	391ba <printk>
   24fa6:	21ac      	movs	r1, #172	; 0xac
   24fa8:	4809      	ldr	r0, [pc, #36]	; (24fd0 <pm_state_notify+0x8c>)
   24faa:	f014 fb5d 	bl	39668 <assert_post_action>
	__asm__ volatile(
   24fae:	f386 8811 	msr	BASEPRI, r6
   24fb2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   24fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			callback = notifier->state_exit;
   24fb8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   24fbc:	2d00      	cmp	r5, #0
   24fbe:	bf18      	it	ne
   24fc0:	4613      	movne	r3, r2
		if (callback) {
   24fc2:	b10b      	cbz	r3, 24fc8 <pm_state_notify+0x84>
			callback(z_power_state.state);
   24fc4:	7838      	ldrb	r0, [r7, #0]
   24fc6:	4798      	blx	r3
	return node->next;
   24fc8:	6824      	ldr	r4, [r4, #0]
   24fca:	e7dd      	b.n	24f88 <pm_state_notify+0x44>
   24fcc:	200177a8 	.word	0x200177a8
   24fd0:	0003f1a1 	.word	0x0003f1a1
   24fd4:	0003f1f3 	.word	0x0003f1f3
   24fd8:	0003f0e1 	.word	0x0003f0e1
   24fdc:	0003f208 	.word	0x0003f208
   24fe0:	200177ac 	.word	0x200177ac
   24fe4:	200177b4 	.word	0x200177b4
   24fe8:	0003f1c7 	.word	0x0003f1c7
   24fec:	0003f1de 	.word	0x0003f1de

00024ff0 <pm_system_resume>:

void pm_system_resume(void)
{
   24ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   24ff2:	4b0f      	ldr	r3, [pc, #60]	; (25030 <pm_system_resume+0x40>)
   24ff4:	681a      	ldr	r2, [r3, #0]
   24ff6:	b9ba      	cbnz	r2, 25028 <pm_system_resume+0x38>
		post_ops_done = 1;
   24ff8:	2201      	movs	r2, #1
   24ffa:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   24ffc:	4a0d      	ldr	r2, [pc, #52]	; (25034 <pm_system_resume+0x44>)
   24ffe:	ab01      	add	r3, sp, #4
   25000:	ca07      	ldmia	r2, {r0, r1, r2}
   25002:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   25006:	4a0c      	ldr	r2, [pc, #48]	; (25038 <pm_system_resume+0x48>)
   25008:	b14a      	cbz	r2, 2501e <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   2500a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2500e:	f014 fb46 	bl	3969e <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   25012:	2000      	movs	r0, #0
	}
}
   25014:	b005      	add	sp, #20
   25016:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   2501a:	f7ff bf93 	b.w	24f44 <pm_state_notify>
   2501e:	f382 8811 	msr	BASEPRI, r2
   25022:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   25026:	e7f4      	b.n	25012 <pm_system_resume+0x22>
}
   25028:	b005      	add	sp, #20
   2502a:	f85d fb04 	ldr.w	pc, [sp], #4
   2502e:	bf00      	nop
   25030:	200145c8 	.word	0x200145c8
   25034:	200177b4 	.word	0x200177b4
   25038:	0003969f 	.word	0x0003969f

0002503c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   2503c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2503e:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   25040:	466e      	mov	r6, sp
   25042:	4c24      	ldr	r4, [pc, #144]	; (250d4 <pm_system_suspend+0x98>)
   25044:	4601      	mov	r1, r0
{
   25046:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   25048:	4630      	mov	r0, r6
   2504a:	f014 ff5f 	bl	39f0c <pm_policy_next_state>
   2504e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   25052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   25056:	7820      	ldrb	r0, [r4, #0]
   25058:	4626      	mov	r6, r4
   2505a:	2800      	cmp	r0, #0
   2505c:	d037      	beq.n	250ce <pm_system_suspend+0x92>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   2505e:	2000      	movs	r0, #0
   25060:	4b1d      	ldr	r3, [pc, #116]	; (250d8 <pm_system_suspend+0x9c>)
   25062:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   25064:	1c6b      	adds	r3, r5, #1
   25066:	d01d      	beq.n	250a4 <pm_system_suspend+0x68>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   25068:	4291      	cmp	r1, r2
   2506a:	d20c      	bcs.n	25086 <pm_system_suspend+0x4a>
   2506c:	491b      	ldr	r1, [pc, #108]	; (250dc <pm_system_suspend+0xa0>)
   2506e:	23cb      	movs	r3, #203	; 0xcb
   25070:	4a1b      	ldr	r2, [pc, #108]	; (250e0 <pm_system_suspend+0xa4>)
   25072:	481c      	ldr	r0, [pc, #112]	; (250e4 <pm_system_suspend+0xa8>)
   25074:	f014 f8a1 	bl	391ba <printk>
   25078:	481b      	ldr	r0, [pc, #108]	; (250e8 <pm_system_suspend+0xac>)
   2507a:	f014 f89e 	bl	391ba <printk>
   2507e:	21cb      	movs	r1, #203	; 0xcb
   25080:	4817      	ldr	r0, [pc, #92]	; (250e0 <pm_system_suspend+0xa4>)
   25082:	f014 faf1 	bl	39668 <assert_post_action>
   25086:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2508a:	2100      	movs	r1, #0
   2508c:	68a7      	ldr	r7, [r4, #8]
   2508e:	4817      	ldr	r0, [pc, #92]	; (250ec <pm_system_suspend+0xb0>)
   25090:	2300      	movs	r3, #0
   25092:	fbe7 010c 	umlal	r0, r1, r7, ip
   25096:	4a16      	ldr	r2, [pc, #88]	; (250f0 <pm_system_suspend+0xb4>)
   25098:	f7fc f89e 	bl	211d8 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   2509c:	2101      	movs	r1, #1
   2509e:	1a28      	subs	r0, r5, r0
   250a0:	f011 fc1e 	bl	368e0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   250a4:	f010 fa5c 	bl	35560 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   250a8:	2001      	movs	r0, #1
   250aa:	f7ff ff4b 	bl	24f44 <pm_state_notify>
	pm_state_set(z_power_state);
   250ae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   250b2:	ab05      	add	r3, sp, #20
   250b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   250b8:	4a0e      	ldr	r2, [pc, #56]	; (250f4 <pm_system_suspend+0xb8>)
   250ba:	b11a      	cbz	r2, 250c4 <pm_system_suspend+0x88>
		pm_power_state_set(info);
   250bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   250c0:	f014 fada 	bl	39678 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   250c4:	f7ff ff94 	bl	24ff0 <pm_system_resume>
	k_sched_unlock();
   250c8:	f010 fabe 	bl	35648 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   250cc:	7820      	ldrb	r0, [r4, #0]
}
   250ce:	b009      	add	sp, #36	; 0x24
   250d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   250d2:	bf00      	nop
   250d4:	200177b4 	.word	0x200177b4
   250d8:	200145c8 	.word	0x200145c8
   250dc:	0003f87d 	.word	0x0003f87d
   250e0:	0003f807 	.word	0x0003f807
   250e4:	0003f0e1 	.word	0x0003f0e1
   250e8:	0003f8bd 	.word	0x0003f8bd
   250ec:	000f423f 	.word	0x000f423f
   250f0:	000f4240 	.word	0x000f4240
   250f4:	00039679 	.word	0x00039679

000250f8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   250f8:	b510      	push	{r4, lr}
   250fa:	4807      	ldr	r0, [pc, #28]	; (25118 <uart_console_init+0x20>)
   250fc:	f00e fbbe 	bl	3387c <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   25100:	4c06      	ldr	r4, [pc, #24]	; (2511c <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   25102:	4b07      	ldr	r3, [pc, #28]	; (25120 <uart_console_init+0x28>)
   25104:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   25106:	4620      	mov	r0, r4
   25108:	f001 fa44 	bl	26594 <__stdout_hook_install>
	__printk_hook_install(console_out);
   2510c:	4620      	mov	r0, r4
   2510e:	f7fd fc2d 	bl	2296c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   25112:	2000      	movs	r0, #0
   25114:	bd10      	pop	{r4, pc}
   25116:	bf00      	nop
   25118:	0003f625 	.word	0x0003f625
   2511c:	00025125 	.word	0x00025125
   25120:	200177c0 	.word	0x200177c0

00025124 <console_out>:
	if ('\n' == c) {
   25124:	280a      	cmp	r0, #10
{
   25126:	b538      	push	{r3, r4, r5, lr}
   25128:	4604      	mov	r4, r0
   2512a:	4d07      	ldr	r5, [pc, #28]	; (25148 <console_out+0x24>)
	if ('\n' == c) {
   2512c:	d104      	bne.n	25138 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   2512e:	6828      	ldr	r0, [r5, #0]
   25130:	6883      	ldr	r3, [r0, #8]
   25132:	210d      	movs	r1, #13
   25134:	69db      	ldr	r3, [r3, #28]
   25136:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   25138:	6828      	ldr	r0, [r5, #0]
   2513a:	6883      	ldr	r3, [r0, #8]
   2513c:	b2e1      	uxtb	r1, r4
   2513e:	69db      	ldr	r3, [r3, #28]
   25140:	4798      	blx	r3
}
   25142:	4620      	mov	r0, r4
   25144:	bd38      	pop	{r3, r4, r5, pc}
   25146:	bf00      	nop
   25148:	200177c0 	.word	0x200177c0

0002514c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2514c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2514e:	2340      	movs	r3, #64	; 0x40
{
   25150:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   25152:	490a      	ldr	r1, [pc, #40]	; (2517c <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   25154:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   25156:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   25158:	1149      	asrs	r1, r1, #5
{
   2515a:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2515c:	4623      	mov	r3, r4
   2515e:	4a08      	ldr	r2, [pc, #32]	; (25180 <onoff_start+0x34>)
   25160:	4808      	ldr	r0, [pc, #32]	; (25184 <onoff_start+0x38>)
   25162:	f014 feeb 	bl	39f3c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   25166:	1e01      	subs	r1, r0, #0
   25168:	da05      	bge.n	25176 <onoff_start+0x2a>
		notify(mgr, err);
   2516a:	4628      	mov	r0, r5
   2516c:	4623      	mov	r3, r4
	}
}
   2516e:	b003      	add	sp, #12
   25170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   25174:	4718      	bx	r3
}
   25176:	b003      	add	sp, #12
   25178:	bd30      	pop	{r4, r5, pc}
   2517a:	bf00      	nop
   2517c:	200177dc 	.word	0x200177dc
   25180:	00039fa7 	.word	0x00039fa7
   25184:	0003e11c 	.word	0x0003e11c

00025188 <get_status>:
{
   25188:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2518a:	b2cc      	uxtb	r4, r1
   2518c:	2c01      	cmp	r4, #1
{
   2518e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25190:	d909      	bls.n	251a6 <get_status+0x1e>
   25192:	4909      	ldr	r1, [pc, #36]	; (251b8 <get_status+0x30>)
   25194:	4809      	ldr	r0, [pc, #36]	; (251bc <get_status+0x34>)
   25196:	237e      	movs	r3, #126	; 0x7e
   25198:	4a09      	ldr	r2, [pc, #36]	; (251c0 <get_status+0x38>)
   2519a:	f014 f80e 	bl	391ba <printk>
   2519e:	217e      	movs	r1, #126	; 0x7e
   251a0:	4807      	ldr	r0, [pc, #28]	; (251c0 <get_status+0x38>)
   251a2:	f014 fa61 	bl	39668 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   251a6:	220c      	movs	r2, #12
   251a8:	692b      	ldr	r3, [r5, #16]
   251aa:	fb04 3302 	mla	r3, r4, r2, r3
   251ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   251b0:	f000 0007 	and.w	r0, r0, #7
   251b4:	bd38      	pop	{r3, r4, r5, pc}
   251b6:	bf00      	nop
   251b8:	0003f925 	.word	0x0003f925
   251bc:	0003f0e1 	.word	0x0003f0e1
   251c0:	0003f8e8 	.word	0x0003f8e8

000251c4 <stop>:
{
   251c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   251c6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   251c8:	2c01      	cmp	r4, #1
{
   251ca:	4605      	mov	r5, r0
   251cc:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
   251ce:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   251d0:	d90b      	bls.n	251ea <stop+0x26>
   251d2:	4919      	ldr	r1, [pc, #100]	; (25238 <stop+0x74>)
   251d4:	4819      	ldr	r0, [pc, #100]	; (2523c <stop+0x78>)
   251d6:	f240 1353 	movw	r3, #339	; 0x153
   251da:	4a19      	ldr	r2, [pc, #100]	; (25240 <stop+0x7c>)
   251dc:	f013 ffed 	bl	391ba <printk>
   251e0:	f240 1153 	movw	r1, #339	; 0x153
   251e4:	4816      	ldr	r0, [pc, #88]	; (25240 <stop+0x7c>)
   251e6:	f014 fa3f 	bl	39668 <assert_post_action>
	__asm__ volatile(
   251ea:	f04f 0320 	mov.w	r3, #32
   251ee:	f3ef 8211 	mrs	r2, BASEPRI
   251f2:	f383 8811 	msr	BASEPRI, r3
   251f6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   251fa:	210c      	movs	r1, #12
   251fc:	fb01 6304 	mla	r3, r1, r4, r6
   25200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   25202:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   25206:	d008      	beq.n	2521a <stop+0x56>
   25208:	429f      	cmp	r7, r3
   2520a:	d006      	beq.n	2521a <stop+0x56>
	__asm__ volatile(
   2520c:	f382 8811 	msr	BASEPRI, r2
   25210:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   25214:	f04f 30ff 	mov.w	r0, #4294967295
}
   25218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2521a:	2301      	movs	r3, #1
   2521c:	434c      	muls	r4, r1
   2521e:	4426      	add	r6, r4
   25220:	64b3      	str	r3, [r6, #72]	; 0x48
   25222:	f382 8811 	msr	BASEPRI, r2
   25226:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2522a:	686b      	ldr	r3, [r5, #4]
   2522c:	4423      	add	r3, r4
   2522e:	685b      	ldr	r3, [r3, #4]
   25230:	4798      	blx	r3
	return 0;
   25232:	2000      	movs	r0, #0
   25234:	e7f0      	b.n	25218 <stop+0x54>
   25236:	bf00      	nop
   25238:	0003f925 	.word	0x0003f925
   2523c:	0003f0e1 	.word	0x0003f0e1
   25240:	0003f8e8 	.word	0x0003f8e8

00025244 <onoff_stop>:
{
   25244:	b570      	push	{r4, r5, r6, lr}
   25246:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   25248:	4906      	ldr	r1, [pc, #24]	; (25264 <onoff_stop+0x20>)
{
   2524a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   2524c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2524e:	1149      	asrs	r1, r1, #5
   25250:	2240      	movs	r2, #64	; 0x40
   25252:	4805      	ldr	r0, [pc, #20]	; (25268 <onoff_stop+0x24>)
   25254:	f7ff ffb6 	bl	251c4 <stop>
	notify(mgr, res);
   25258:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2525a:	4601      	mov	r1, r0
	notify(mgr, res);
   2525c:	4620      	mov	r0, r4
}
   2525e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   25262:	4718      	bx	r3
   25264:	200177dc 	.word	0x200177dc
   25268:	0003e11c 	.word	0x0003e11c

0002526c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   2526c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2526e:	2200      	movs	r2, #0
   25270:	2101      	movs	r1, #1
{
   25272:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   25274:	2005      	movs	r0, #5
   25276:	f000 fb47 	bl	25908 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   2527a:	2005      	movs	r0, #5
   2527c:	f000 fb28 	bl	258d0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   25280:	480f      	ldr	r0, [pc, #60]	; (252c0 <clk_init+0x54>)
   25282:	f006 f8d9 	bl	2b438 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   25286:	4b0f      	ldr	r3, [pc, #60]	; (252c4 <clk_init+0x58>)
   25288:	4298      	cmp	r0, r3
   2528a:	d115      	bne.n	252b8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2528c:	f006 f8f8 	bl	2b480 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   25290:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   25292:	490d      	ldr	r1, [pc, #52]	; (252c8 <clk_init+0x5c>)
   25294:	4630      	mov	r0, r6
   25296:	f013 ffec 	bl	39272 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2529a:	2800      	cmp	r0, #0
   2529c:	db0b      	blt.n	252b6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2529e:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
   252a0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   252a2:	4909      	ldr	r1, [pc, #36]	; (252c8 <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   252a4:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   252a6:	f104 0020 	add.w	r0, r4, #32
   252aa:	f013 ffe2 	bl	39272 <onoff_manager_init>
		if (err < 0) {
   252ae:	2800      	cmp	r0, #0
   252b0:	db01      	blt.n	252b6 <clk_init+0x4a>
	}

	return 0;
   252b2:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   252b4:	6565      	str	r5, [r4, #84]	; 0x54
}
   252b6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   252b8:	f06f 0004 	mvn.w	r0, #4
   252bc:	e7fb      	b.n	252b6 <clk_init+0x4a>
   252be:	bf00      	nop
   252c0:	00025301 	.word	0x00025301
   252c4:	0bad0000 	.word	0x0bad0000
   252c8:	0003e7d8 	.word	0x0003e7d8

000252cc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   252cc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   252ce:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   252d0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   252d2:	434b      	muls	r3, r1
   252d4:	4808      	ldr	r0, [pc, #32]	; (252f8 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   252d6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   252d8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   252da:	3348      	adds	r3, #72	; 0x48
   252dc:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   252de:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   252e2:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   252e4:	f014 fe17 	bl	39f16 <set_on_state>
	if (callback) {
   252e8:	b12d      	cbz	r5, 252f6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   252ea:	4632      	mov	r2, r6
   252ec:	462b      	mov	r3, r5
}
   252ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   252f2:	4802      	ldr	r0, [pc, #8]	; (252fc <clkstarted_handle.constprop.0+0x30>)
   252f4:	4718      	bx	r3
}
   252f6:	bd70      	pop	{r4, r5, r6, pc}
   252f8:	200177dc 	.word	0x200177dc
   252fc:	0003e11c 	.word	0x0003e11c

00025300 <clock_event_handler>:
	switch (event) {
   25300:	2801      	cmp	r0, #1
{
   25302:	b508      	push	{r3, lr}
	switch (event) {
   25304:	d006      	beq.n	25314 <clock_event_handler+0x14>
   25306:	2803      	cmp	r0, #3
   25308:	d008      	beq.n	2531c <clock_event_handler+0x1c>
   2530a:	b9a8      	cbnz	r0, 25338 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2530c:	4b10      	ldr	r3, [pc, #64]	; (25350 <clock_event_handler+0x50>)
   2530e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   25310:	075b      	lsls	r3, r3, #29
   25312:	d11b      	bne.n	2534c <clock_event_handler+0x4c>
}
   25314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   25318:	f7ff bfd8 	b.w	252cc <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   2531c:	490d      	ldr	r1, [pc, #52]	; (25354 <clock_event_handler+0x54>)
   2531e:	f240 2366 	movw	r3, #614	; 0x266
   25322:	4a0d      	ldr	r2, [pc, #52]	; (25358 <clock_event_handler+0x58>)
   25324:	480d      	ldr	r0, [pc, #52]	; (2535c <clock_event_handler+0x5c>)
   25326:	f013 ff48 	bl	391ba <printk>
   2532a:	f240 2166 	movw	r1, #614	; 0x266
}
   2532e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   25332:	4809      	ldr	r0, [pc, #36]	; (25358 <clock_event_handler+0x58>)
   25334:	f014 b998 	b.w	39668 <assert_post_action>
   25338:	4906      	ldr	r1, [pc, #24]	; (25354 <clock_event_handler+0x54>)
   2533a:	f240 236a 	movw	r3, #618	; 0x26a
   2533e:	4a06      	ldr	r2, [pc, #24]	; (25358 <clock_event_handler+0x58>)
   25340:	4806      	ldr	r0, [pc, #24]	; (2535c <clock_event_handler+0x5c>)
   25342:	f013 ff3a 	bl	391ba <printk>
   25346:	f240 216a 	movw	r1, #618	; 0x26a
   2534a:	e7f0      	b.n	2532e <clock_event_handler+0x2e>
}
   2534c:	bd08      	pop	{r3, pc}
   2534e:	bf00      	nop
   25350:	200177dc 	.word	0x200177dc
   25354:	000422ae 	.word	0x000422ae
   25358:	0003f8e8 	.word	0x0003f8e8
   2535c:	0003f0e1 	.word	0x0003f0e1

00025360 <generic_hfclk_start>:
{
   25360:	b508      	push	{r3, lr}
	__asm__ volatile(
   25362:	f04f 0320 	mov.w	r3, #32
   25366:	f3ef 8111 	mrs	r1, BASEPRI
   2536a:	f383 8811 	msr	BASEPRI, r3
   2536e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   25372:	4a11      	ldr	r2, [pc, #68]	; (253b8 <generic_hfclk_start+0x58>)
   25374:	6813      	ldr	r3, [r2, #0]
   25376:	f043 0002 	orr.w	r0, r3, #2
   2537a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   2537c:	07da      	lsls	r2, r3, #31
   2537e:	d408      	bmi.n	25392 <generic_hfclk_start+0x32>
	__asm__ volatile(
   25380:	f381 8811 	msr	BASEPRI, r1
   25384:	f3bf 8f6f 	isb	sy
}
   25388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2538c:	2001      	movs	r0, #1
   2538e:	f006 b897 	b.w	2b4c0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   25392:	4b0a      	ldr	r3, [pc, #40]	; (253bc <generic_hfclk_start+0x5c>)
   25394:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   25398:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2539c:	07d3      	lsls	r3, r2, #31
   2539e:	d5ef      	bpl.n	25380 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   253a0:	4807      	ldr	r0, [pc, #28]	; (253c0 <generic_hfclk_start+0x60>)
   253a2:	f014 fdb8 	bl	39f16 <set_on_state>
   253a6:	f381 8811 	msr	BASEPRI, r1
   253aa:	f3bf 8f6f 	isb	sy
}
   253ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   253b2:	2000      	movs	r0, #0
   253b4:	f7ff bf8a 	b.w	252cc <clkstarted_handle.constprop.0>
   253b8:	20017834 	.word	0x20017834
   253bc:	40005000 	.word	0x40005000
   253c0:	20017824 	.word	0x20017824

000253c4 <api_blocking_start>:
{
   253c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   253c6:	2200      	movs	r2, #0
   253c8:	2301      	movs	r3, #1
   253ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   253ce:	ab04      	add	r3, sp, #16
   253d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   253d4:	4a09      	ldr	r2, [pc, #36]	; (253fc <api_blocking_start+0x38>)
   253d6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   253d8:	f8cd d000 	str.w	sp, [sp]
   253dc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   253e0:	f014 fdda 	bl	39f98 <api_start>
	if (err < 0) {
   253e4:	2800      	cmp	r0, #0
   253e6:	db05      	blt.n	253f4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   253e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   253ec:	2300      	movs	r3, #0
   253ee:	4668      	mov	r0, sp
   253f0:	f00f faa8 	bl	34944 <z_impl_k_sem_take>
}
   253f4:	b007      	add	sp, #28
   253f6:	f85d fb04 	ldr.w	pc, [sp], #4
   253fa:	bf00      	nop
   253fc:	00039fc5 	.word	0x00039fc5

00025400 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25400:	4b07      	ldr	r3, [pc, #28]	; (25420 <generic_hfclk_stop+0x20>)
   25402:	e8d3 2fef 	ldaex	r2, [r3]
   25406:	f022 0102 	bic.w	r1, r2, #2
   2540a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2540e:	2800      	cmp	r0, #0
   25410:	d1f7      	bne.n	25402 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   25412:	07d3      	lsls	r3, r2, #31
   25414:	d402      	bmi.n	2541c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   25416:	2001      	movs	r0, #1
   25418:	f006 b8a4 	b.w	2b564 <nrfx_clock_stop>
}
   2541c:	4770      	bx	lr
   2541e:	bf00      	nop
   25420:	20017834 	.word	0x20017834

00025424 <z_nrf_clock_control_lf_on>:
{
   25424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25428:	2201      	movs	r2, #1
   2542a:	4606      	mov	r6, r0
   2542c:	4943      	ldr	r1, [pc, #268]	; (2553c <z_nrf_clock_control_lf_on+0x118>)
   2542e:	e8d1 3fef 	ldaex	r3, [r1]
   25432:	e8c1 2fe0 	stlex	r0, r2, [r1]
   25436:	2800      	cmp	r0, #0
   25438:	d1f9      	bne.n	2542e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   2543a:	b9a3      	cbnz	r3, 25466 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   2543c:	4940      	ldr	r1, [pc, #256]	; (25540 <z_nrf_clock_control_lf_on+0x11c>)
		err = onoff_request(mgr, &cli);
   2543e:	4841      	ldr	r0, [pc, #260]	; (25544 <z_nrf_clock_control_lf_on+0x120>)
   25440:	604b      	str	r3, [r1, #4]
   25442:	60cb      	str	r3, [r1, #12]
   25444:	608a      	str	r2, [r1, #8]
   25446:	f7fd fd07 	bl	22e58 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   2544a:	2800      	cmp	r0, #0
   2544c:	da0b      	bge.n	25466 <z_nrf_clock_control_lf_on+0x42>
   2544e:	493e      	ldr	r1, [pc, #248]	; (25548 <z_nrf_clock_control_lf_on+0x124>)
   25450:	483e      	ldr	r0, [pc, #248]	; (2554c <z_nrf_clock_control_lf_on+0x128>)
   25452:	f240 2326 	movw	r3, #550	; 0x226
   25456:	4a3e      	ldr	r2, [pc, #248]	; (25550 <z_nrf_clock_control_lf_on+0x12c>)
   25458:	f013 feaf 	bl	391ba <printk>
   2545c:	f240 2126 	movw	r1, #550	; 0x226
   25460:	483b      	ldr	r0, [pc, #236]	; (25550 <z_nrf_clock_control_lf_on+0x12c>)
   25462:	f014 f901 	bl	39668 <assert_post_action>
	switch (start_mode) {
   25466:	b35e      	cbz	r6, 254c0 <z_nrf_clock_control_lf_on+0x9c>
   25468:	1e73      	subs	r3, r6, #1
   2546a:	2b01      	cmp	r3, #1
   2546c:	d858      	bhi.n	25520 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2546e:	2e01      	cmp	r6, #1
   25470:	d106      	bne.n	25480 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   25472:	4b38      	ldr	r3, [pc, #224]	; (25554 <z_nrf_clock_control_lf_on+0x130>)
   25474:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   25478:	f003 0303 	and.w	r3, r3, #3
   2547c:	2b02      	cmp	r3, #2
   2547e:	d01f      	beq.n	254c0 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   25480:	f017 ffad 	bl	3d3de <k_is_in_isr>
   25484:	4605      	mov	r5, r0
   25486:	b9e8      	cbnz	r0, 254c4 <z_nrf_clock_control_lf_on+0xa0>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   25488:	4b33      	ldr	r3, [pc, #204]	; (25558 <z_nrf_clock_control_lf_on+0x134>)
   2548a:	781b      	ldrb	r3, [r3, #0]
   2548c:	b1d3      	cbz	r3, 254c4 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   2548e:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   25490:	4607      	mov	r7, r0
   25492:	4b30      	ldr	r3, [pc, #192]	; (25554 <z_nrf_clock_control_lf_on+0x130>)
   25494:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   25498:	4c2e      	ldr	r4, [pc, #184]	; (25554 <z_nrf_clock_control_lf_on+0x130>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2549a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2555c <z_nrf_clock_control_lf_on+0x138>
   2549e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   254a2:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   254a6:	03d2      	lsls	r2, r2, #15
   254a8:	d516      	bpl.n	254d8 <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   254aa:	f003 0303 	and.w	r3, r3, #3
   254ae:	2b02      	cmp	r3, #2
   254b0:	d001      	beq.n	254b6 <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   254b2:	2e01      	cmp	r6, #1
   254b4:	d110      	bne.n	254d8 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   254b6:	b375      	cbz	r5, 25516 <z_nrf_clock_control_lf_on+0xf2>
   254b8:	f387 8811 	msr	BASEPRI, r7
   254bc:	f3bf 8f6f 	isb	sy
}
   254c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   254c4:	f04f 0320 	mov.w	r3, #32
   254c8:	f3ef 8711 	mrs	r7, BASEPRI
   254cc:	f383 8811 	msr	BASEPRI, r3
   254d0:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   254d4:	2501      	movs	r5, #1
   254d6:	e7df      	b.n	25498 <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   254d8:	b1c5      	cbz	r5, 2550c <z_nrf_clock_control_lf_on+0xe8>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   254da:	4638      	mov	r0, r7
   254dc:	f000 fa98 	bl	25a10 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   254e0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   254e4:	b2db      	uxtb	r3, r3
   254e6:	2b01      	cmp	r3, #1
   254e8:	d1d9      	bne.n	2549e <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   254ea:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   254ee:	2a00      	cmp	r2, #0
   254f0:	d0d5      	beq.n	2549e <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   254f2:	2200      	movs	r2, #0
   254f4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   254f8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   254fc:	2202      	movs	r2, #2
   254fe:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   25502:	2220      	movs	r2, #32
   25504:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25508:	60a3      	str	r3, [r4, #8]
}
   2550a:	e7c8      	b.n	2549e <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   2550c:	2100      	movs	r1, #0
   2550e:	2021      	movs	r0, #33	; 0x21
   25510:	f010 feb0 	bl	36274 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   25514:	e7e4      	b.n	254e0 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   25516:	2202      	movs	r2, #2
   25518:	4b0e      	ldr	r3, [pc, #56]	; (25554 <z_nrf_clock_control_lf_on+0x130>)
   2551a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2551e:	e7cf      	b.n	254c0 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   25520:	490f      	ldr	r1, [pc, #60]	; (25560 <z_nrf_clock_control_lf_on+0x13c>)
   25522:	480a      	ldr	r0, [pc, #40]	; (2554c <z_nrf_clock_control_lf_on+0x128>)
   25524:	f44f 730e 	mov.w	r3, #568	; 0x238
   25528:	4a09      	ldr	r2, [pc, #36]	; (25550 <z_nrf_clock_control_lf_on+0x12c>)
   2552a:	f013 fe46 	bl	391ba <printk>
}
   2552e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   25532:	f44f 710e 	mov.w	r1, #568	; 0x238
   25536:	4806      	ldr	r0, [pc, #24]	; (25550 <z_nrf_clock_control_lf_on+0x12c>)
   25538:	f014 b896 	b.w	39668 <assert_post_action>
   2553c:	200177d4 	.word	0x200177d4
   25540:	200177c4 	.word	0x200177c4
   25544:	200177fc 	.word	0x200177fc
   25548:	0003f949 	.word	0x0003f949
   2554c:	0003f0e1 	.word	0x0003f0e1
   25550:	0003f8e8 	.word	0x0003f8e8
   25554:	40005000 	.word	0x40005000
   25558:	2001926b 	.word	0x2001926b
   2555c:	e000e100 	.word	0xe000e100
   25560:	000422ae 	.word	0x000422ae

00025564 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   25564:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   25566:	4c06      	ldr	r4, [pc, #24]	; (25580 <sys_clock_isr+0x1c>)
   25568:	4906      	ldr	r1, [pc, #24]	; (25584 <sys_clock_isr+0x20>)
   2556a:	4622      	mov	r2, r4
   2556c:	4806      	ldr	r0, [pc, #24]	; (25588 <sys_clock_isr+0x24>)
   2556e:	2317      	movs	r3, #23
   25570:	f013 fe23 	bl	391ba <printk>
   25574:	4620      	mov	r0, r4
}
   25576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   2557a:	2117      	movs	r1, #23
   2557c:	f014 b874 	b.w	39668 <assert_post_action>
   25580:	0003f972 	.word	0x0003f972
   25584:	000422ae 	.word	0x000422ae
   25588:	0003f0e1 	.word	0x0003f0e1

0002558c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   2558c:	4a04      	ldr	r2, [pc, #16]	; (255a0 <sys_clock_timeout_handler+0x14>)
   2558e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   25590:	1ac8      	subs	r0, r1, r3
   25592:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   25596:	4403      	add	r3, r0
   25598:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2559a:	f011 b9f3 	b.w	36984 <sys_clock_announce>
   2559e:	bf00      	nop
   255a0:	20017848 	.word	0x20017848

000255a4 <set_absolute_alarm>:
{
   255a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   255a8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   255ac:	f04f 0900 	mov.w	r9, #0
   255b0:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   255b2:	f100 0450 	add.w	r4, r0, #80	; 0x50
   255b6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   255ba:	00a4      	lsls	r4, r4, #2
   255bc:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
   255c0:	b2a4      	uxth	r4, r4
   255c2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   255c6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   255ca:	f8df 806c 	ldr.w	r8, [pc, #108]	; 25638 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   255ce:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   255d2:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   255d6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   255d8:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   255dc:	eba3 030a 	sub.w	r3, r3, sl
   255e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   255e4:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   255e8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   255ea:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   255ee:	d102      	bne.n	255f6 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   255f0:	2013      	movs	r0, #19
   255f2:	f017 ff6e 	bl	3d4d2 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   255f6:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   255fa:	1aab      	subs	r3, r5, r2
   255fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   25600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   25604:	bf88      	it	hi
   25606:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25608:	f8c4 9000 	str.w	r9, [r4]
   2560c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2560e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   25612:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   25616:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   2561a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
	} while ((now2 != now) &&
   2561e:	459a      	cmp	sl, r3
   25620:	d006      	beq.n	25630 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   25622:	1aeb      	subs	r3, r5, r3
   25624:	3b02      	subs	r3, #2
   25626:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   2562a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2562e:	d801      	bhi.n	25634 <set_absolute_alarm+0x90>
}
   25630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   25634:	462b      	mov	r3, r5
   25636:	e7cf      	b.n	255d8 <set_absolute_alarm+0x34>
   25638:	40015000 	.word	0x40015000

0002563c <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   2563c:	4b11      	ldr	r3, [pc, #68]	; (25684 <rtc_nrf_isr+0x48>)
 */
void rtc_nrf_isr(const void *arg)
{
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2563e:	2000      	movs	r0, #0
   25640:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
{
   25644:	b510      	push	{r4, lr}
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   25646:	03d2      	lsls	r2, r2, #15
   25648:	d51b      	bpl.n	25682 <rtc_nrf_isr+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2564a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2564e:	b1c2      	cbz	r2, 25682 <rtc_nrf_isr+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25650:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
   25654:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   25658:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2565c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    return p_reg->CC[ch];
   25660:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   25664:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   25668:	1a8b      	subs	r3, r1, r2
   2566a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			uint32_t now;
			z_nrf_rtc_timer_compare_handler_t handler;

			event_clear(chan);
			event_disable(chan);
			cc_val = get_comparator(chan);
   2566e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   25672:	bf98      	it	ls
   25674:	4611      	movls	r1, r2
			 */
			if (counter_sub(now, cc_val) > COUNTER_HALF_SPAN) {
				cc_val = now;
			}

			handler = cc_data[chan].callback;
   25676:	4b04      	ldr	r3, [pc, #16]	; (25688 <rtc_nrf_isr+0x4c>)
   25678:	681c      	ldr	r4, [r3, #0]
			cc_data[chan].callback = NULL;
   2567a:	6018      	str	r0, [r3, #0]
			if (handler) {
   2567c:	b10c      	cbz	r4, 25682 <rtc_nrf_isr+0x46>
				handler(chan, cc_val,
   2567e:	685a      	ldr	r2, [r3, #4]
   25680:	47a0      	blx	r4
					cc_data[chan].user_context);
			}
		}
	}
}
   25682:	bd10      	pop	{r4, pc}
   25684:	40015000 	.word	0x40015000
   25688:	20017840 	.word	0x20017840

0002568c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   2568c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   2568e:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
   25690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   25694:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   25698:	4c0c      	ldr	r4, [pc, #48]	; (256cc <sys_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2569a:	2101      	movs	r1, #1
   2569c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
   256a0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   256a4:	4b0a      	ldr	r3, [pc, #40]	; (256d0 <sys_clock_driver_init+0x44>)
   256a6:	2015      	movs	r0, #21
   256a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   256ac:	462a      	mov	r2, r5
   256ae:	f000 f92b 	bl	25908 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   256b2:	2015      	movs	r0, #21
   256b4:	f000 f90c 	bl	258d0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   256b8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   256ba:	4a06      	ldr	r2, [pc, #24]	; (256d4 <sys_clock_driver_init+0x48>)
   256bc:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   256be:	2002      	movs	r0, #2
   256c0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   256c2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   256c4:	f7ff feae 	bl	25424 <z_nrf_clock_control_lf_on>

	return 0;
}
   256c8:	4628      	mov	r0, r5
   256ca:	bd38      	pop	{r3, r4, r5, pc}
   256cc:	40015000 	.word	0x40015000
   256d0:	e000e100 	.word	0xe000e100
   256d4:	2001783c 	.word	0x2001783c

000256d8 <sys_clock_set_timeout>:
     return p_reg->COUNTER;
   256d8:	4a13      	ldr	r2, [pc, #76]	; (25728 <sys_clock_set_timeout+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   256da:	4914      	ldr	r1, [pc, #80]	; (2572c <sys_clock_set_timeout+0x54>)
{
   256dc:	b410      	push	{r4}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   256de:	f1b0 3fff 	cmp.w	r0, #4294967295
   256e2:	bf14      	ite	ne
   256e4:	4603      	movne	r3, r0
   256e6:	460b      	moveq	r3, r1
   256e8:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);

	uint32_t unannounced = counter_sub(counter(), last_count);
   256ec:	4a10      	ldr	r2, [pc, #64]	; (25730 <sys_clock_set_timeout+0x58>)
   256ee:	6814      	ldr	r4, [r2, #0]
	return (a - b) & COUNTER_MAX;
   256f0:	1b00      	subs	r0, r0, r4
   256f2:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   256f6:	0200      	lsls	r0, r0, #8
   256f8:	d413      	bmi.n	25722 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   256fa:	3b01      	subs	r3, #1
   256fc:	428b      	cmp	r3, r1
   256fe:	bfa8      	it	ge
   25700:	460b      	movge	r3, r1
   25702:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   25706:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
   25708:	480a      	ldr	r0, [pc, #40]	; (25734 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2570a:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
   2570c:	4a0a      	ldr	r2, [pc, #40]	; (25738 <sys_clock_set_timeout+0x60>)
	set_absolute_alarm(chan, cc_value);
   2570e:	428b      	cmp	r3, r1
   25710:	bf94      	ite	ls
   25712:	18e1      	addls	r1, r4, r3
   25714:	1861      	addhi	r1, r4, r1
	cc_data[chan].callback = handler;
   25716:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   25718:	2000      	movs	r0, #0
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}
   2571a:	bc10      	pop	{r4}
	cc_data[chan].user_context = user_data;
   2571c:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   2571e:	f7ff bf41 	b.w	255a4 <set_absolute_alarm>
		ticks = 0;
   25722:	2300      	movs	r3, #0
   25724:	e7ef      	b.n	25706 <sys_clock_set_timeout+0x2e>
   25726:	bf00      	nop
   25728:	40015000 	.word	0x40015000
   2572c:	007fffff 	.word	0x007fffff
   25730:	20017848 	.word	0x20017848
   25734:	0002558d 	.word	0x0002558d
   25738:	20017840 	.word	0x20017840

0002573c <sys_clock_elapsed>:
   2573c:	4b04      	ldr	r3, [pc, #16]	; (25750 <sys_clock_elapsed+0x14>)
   2573e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   25742:	4b04      	ldr	r3, [pc, #16]	; (25754 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   25744:	681b      	ldr	r3, [r3, #0]
   25746:	1ac0      	subs	r0, r0, r3
}
   25748:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2574c:	4770      	bx	lr
   2574e:	bf00      	nop
   25750:	40015000 	.word	0x40015000
   25754:	20017848 	.word	0x20017848

00025758 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   25758:	b538      	push	{r3, r4, r5, lr}
   2575a:	f04f 0320 	mov.w	r3, #32
   2575e:	f3ef 8511 	mrs	r5, BASEPRI
   25762:	f383 8811 	msr	BASEPRI, r3
   25766:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2576a:	481b      	ldr	r0, [pc, #108]	; (257d8 <sys_clock_cycle_get_32+0x80>)
   2576c:	f00e fd42 	bl	341f4 <z_spin_lock_valid>
   25770:	b968      	cbnz	r0, 2578e <sys_clock_cycle_get_32+0x36>
   25772:	2381      	movs	r3, #129	; 0x81
   25774:	4a19      	ldr	r2, [pc, #100]	; (257dc <sys_clock_cycle_get_32+0x84>)
   25776:	491a      	ldr	r1, [pc, #104]	; (257e0 <sys_clock_cycle_get_32+0x88>)
   25778:	481a      	ldr	r0, [pc, #104]	; (257e4 <sys_clock_cycle_get_32+0x8c>)
   2577a:	f013 fd1e 	bl	391ba <printk>
   2577e:	4916      	ldr	r1, [pc, #88]	; (257d8 <sys_clock_cycle_get_32+0x80>)
   25780:	4819      	ldr	r0, [pc, #100]	; (257e8 <sys_clock_cycle_get_32+0x90>)
   25782:	f013 fd1a 	bl	391ba <printk>
   25786:	2181      	movs	r1, #129	; 0x81
   25788:	4814      	ldr	r0, [pc, #80]	; (257dc <sys_clock_cycle_get_32+0x84>)
   2578a:	f013 ff6d 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   2578e:	4812      	ldr	r0, [pc, #72]	; (257d8 <sys_clock_cycle_get_32+0x80>)
   25790:	f00e fd4c 	bl	3422c <z_spin_lock_set_owner>
   25794:	4b15      	ldr	r3, [pc, #84]	; (257ec <sys_clock_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25796:	4810      	ldr	r0, [pc, #64]	; (257d8 <sys_clock_cycle_get_32+0x80>)
   25798:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   2579c:	4b14      	ldr	r3, [pc, #80]	; (257f0 <sys_clock_cycle_get_32+0x98>)
   2579e:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   257a0:	1ae4      	subs	r4, r4, r3
   257a2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   257a6:	441c      	add	r4, r3
   257a8:	f00e fd32 	bl	34210 <z_spin_unlock_valid>
   257ac:	b968      	cbnz	r0, 257ca <sys_clock_cycle_get_32+0x72>
   257ae:	23ac      	movs	r3, #172	; 0xac
   257b0:	4a0a      	ldr	r2, [pc, #40]	; (257dc <sys_clock_cycle_get_32+0x84>)
   257b2:	4910      	ldr	r1, [pc, #64]	; (257f4 <sys_clock_cycle_get_32+0x9c>)
   257b4:	480b      	ldr	r0, [pc, #44]	; (257e4 <sys_clock_cycle_get_32+0x8c>)
   257b6:	f013 fd00 	bl	391ba <printk>
   257ba:	4907      	ldr	r1, [pc, #28]	; (257d8 <sys_clock_cycle_get_32+0x80>)
   257bc:	480e      	ldr	r0, [pc, #56]	; (257f8 <sys_clock_cycle_get_32+0xa0>)
   257be:	f013 fcfc 	bl	391ba <printk>
   257c2:	21ac      	movs	r1, #172	; 0xac
   257c4:	4805      	ldr	r0, [pc, #20]	; (257dc <sys_clock_cycle_get_32+0x84>)
   257c6:	f013 ff4f 	bl	39668 <assert_post_action>
	__asm__ volatile(
   257ca:	f385 8811 	msr	BASEPRI, r5
   257ce:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   257d2:	4620      	mov	r0, r4
   257d4:	bd38      	pop	{r3, r4, r5, pc}
   257d6:	bf00      	nop
   257d8:	2001784c 	.word	0x2001784c
   257dc:	0003f1a1 	.word	0x0003f1a1
   257e0:	0003f1f3 	.word	0x0003f1f3
   257e4:	0003f0e1 	.word	0x0003f0e1
   257e8:	0003f208 	.word	0x0003f208
   257ec:	40015000 	.word	0x40015000
   257f0:	20017848 	.word	0x20017848
   257f4:	0003f1c7 	.word	0x0003f1c7
   257f8:	0003f1de 	.word	0x0003f1de

000257fc <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   257fc:	b508      	push	{r3, lr}
	k_sched_lock();
   257fe:	f00f feaf 	bl	35560 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   25802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   25806:	4801      	ldr	r0, [pc, #4]	; (2580c <before_nse+0x10>)
   25808:	f014 bc0b 	b.w	3a022 <z_arm_save_fp_context>
   2580c:	20017850 	.word	0x20017850

00025810 <after_nse>:

void after_nse(void)
{
   25810:	b508      	push	{r3, lr}
	k_sched_unlock();
   25812:	f00f ff19 	bl	35648 <k_sched_unlock>
	z_arm_restore_fp_context(&context_buffer);
}
   25816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   2581a:	4801      	ldr	r0, [pc, #4]	; (25820 <after_nse+0x10>)
   2581c:	f014 bc02 	b.w	3a024 <z_arm_restore_fp_context>
   25820:	20017850 	.word	0x20017850

00025824 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   25824:	4a09      	ldr	r2, [pc, #36]	; (2584c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   25826:	490a      	ldr	r1, [pc, #40]	; (25850 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   25828:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2582a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   2582c:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   2582e:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   25830:	4908      	ldr	r1, [pc, #32]	; (25854 <arch_swap+0x30>)
   25832:	684b      	ldr	r3, [r1, #4]
   25834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   25838:	604b      	str	r3, [r1, #4]
   2583a:	2300      	movs	r3, #0
   2583c:	f383 8811 	msr	BASEPRI, r3
   25840:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   25844:	6893      	ldr	r3, [r2, #8]
}
   25846:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   25848:	4770      	bx	lr
   2584a:	bf00      	nop
   2584c:	20017f60 	.word	0x20017f60
   25850:	0003ed8c 	.word	0x0003ed8c
   25854:	e000ed00 	.word	0xe000ed00

00025858 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   25858:	4913      	ldr	r1, [pc, #76]	; (258a8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2585a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2585c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   25860:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   25862:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   25866:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2586a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2586c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   25870:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   25874:	4f0d      	ldr	r7, [pc, #52]	; (258ac <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   25876:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2587a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   2587c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2587e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   25880:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   25882:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   25884:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   25886:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2588a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2588e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   25892:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   25896:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   2589a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   2589c:	f014 fbb2 	bl	3a004 <configure_builtin_stack_guard>
    pop {r2, lr}
   258a0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   258a4:	4770      	bx	lr
   258a6:	0000      	.short	0x0000
    ldr r1, =_kernel
   258a8:	20017f60 	.word	0x20017f60
    ldr v4, =_SCS_ICSR
   258ac:	e000ed04 	.word	0xe000ed04

000258b0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   258b0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   258b4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   258b6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   258ba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   258be:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   258c0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   258c4:	2902      	cmp	r1, #2
    beq _oops
   258c6:	d0ff      	beq.n	258c8 <_oops>

000258c8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   258c8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   258ca:	f014 fb9f 	bl	3a00c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   258ce:	bd01      	pop	{r0, pc}

000258d0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   258d0:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
   258d2:	2800      	cmp	r0, #0
   258d4:	db07      	blt.n	258e6 <arch_irq_enable+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   258d6:	2301      	movs	r3, #1
   258d8:	0941      	lsrs	r1, r0, #5
   258da:	4a03      	ldr	r2, [pc, #12]	; (258e8 <arch_irq_enable+0x18>)
   258dc:	f000 001f 	and.w	r0, r0, #31
   258e0:	4083      	lsls	r3, r0
   258e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   258e6:	4770      	bx	lr
   258e8:	e000e100 	.word	0xe000e100

000258ec <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   258ec:	4b05      	ldr	r3, [pc, #20]	; (25904 <arch_irq_is_enabled+0x18>)
   258ee:	0942      	lsrs	r2, r0, #5
   258f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   258f4:	2301      	movs	r3, #1
   258f6:	f000 001f 	and.w	r0, r0, #31
   258fa:	fa03 f000 	lsl.w	r0, r3, r0
}
   258fe:	4010      	ands	r0, r2
   25900:	4770      	bx	lr
   25902:	bf00      	nop
   25904:	e000e100 	.word	0xe000e100

00025908 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   25908:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   2590a:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   2590c:	2d07      	cmp	r5, #7
{
   2590e:	4604      	mov	r4, r0
   25910:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   25912:	d90f      	bls.n	25934 <z_arm_irq_priority_set+0x2c>
   25914:	2358      	movs	r3, #88	; 0x58
   25916:	4a10      	ldr	r2, [pc, #64]	; (25958 <z_arm_irq_priority_set+0x50>)
   25918:	4910      	ldr	r1, [pc, #64]	; (2595c <z_arm_irq_priority_set+0x54>)
   2591a:	4811      	ldr	r0, [pc, #68]	; (25960 <z_arm_irq_priority_set+0x58>)
   2591c:	f013 fc4d 	bl	391ba <printk>
   25920:	4631      	mov	r1, r6
   25922:	4810      	ldr	r0, [pc, #64]	; (25964 <z_arm_irq_priority_set+0x5c>)
   25924:	2307      	movs	r3, #7
   25926:	4622      	mov	r2, r4
   25928:	f013 fc47 	bl	391ba <printk>
   2592c:	2158      	movs	r1, #88	; 0x58
   2592e:	480a      	ldr	r0, [pc, #40]	; (25958 <z_arm_irq_priority_set+0x50>)
   25930:	f013 fe9a 	bl	39668 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   25934:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   25936:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25938:	bfac      	ite	ge
   2593a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2593e:	4b0a      	ldrlt	r3, [pc, #40]	; (25968 <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25940:	ea4f 1545 	mov.w	r5, r5, lsl #5
   25944:	b2ed      	uxtb	r5, r5
   25946:	bfab      	itete	ge
   25948:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2594c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25950:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25954:	541d      	strblt	r5, [r3, r0]
}
   25956:	bd70      	pop	{r4, r5, r6, pc}
   25958:	0003fa0a 	.word	0x0003fa0a
   2595c:	0003fa40 	.word	0x0003fa40
   25960:	0003f0e1 	.word	0x0003f0e1
   25964:	0003fa5b 	.word	0x0003fa5b
   25968:	e000ed14 	.word	0xe000ed14

0002596c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2596c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2596e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   25970:	4b04      	ldr	r3, [pc, #16]	; (25984 <_arch_isr_direct_pm+0x18>)
   25972:	6a18      	ldr	r0, [r3, #32]
   25974:	b118      	cbz	r0, 2597e <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   25976:	2200      	movs	r2, #0
   25978:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   2597a:	f017 fd3d 	bl	3d3f8 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2597e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   25980:	bd08      	pop	{r3, pc}
   25982:	bf00      	nop
   25984:	20017f60 	.word	0x20017f60

00025988 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   25988:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2598c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   2598e:	490b      	ldr	r1, [pc, #44]	; (259bc <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   25990:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   25994:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   25996:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   2599a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2599e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   259a0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   259a4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   259a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   259ac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   259b0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   259b2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   259b4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   259b6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   259b8:	4770      	bx	lr
   259ba:	bf00      	nop
   259bc:	00039299 	.word	0x00039299

000259c0 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   259c0:	4b08      	ldr	r3, [pc, #32]	; (259e4 <arch_switch_to_main_thread+0x24>)
   259c2:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   259c4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   259c6:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   259ca:	4610      	mov	r0, r2
   259cc:	f381 8809 	msr	PSP, r1
   259d0:	2100      	movs	r1, #0
   259d2:	b663      	cpsie	if
   259d4:	f381 8811 	msr	BASEPRI, r1
   259d8:	f3bf 8f6f 	isb	sy
   259dc:	2200      	movs	r2, #0
   259de:	2300      	movs	r3, #0
   259e0:	f013 fc5a 	bl	39298 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   259e4:	20017f60 	.word	0x20017f60

000259e8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   259e8:	4901      	ldr	r1, [pc, #4]	; (259f0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   259ea:	2210      	movs	r2, #16
	str	r2, [r1]
   259ec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   259ee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   259f0:	e000ed10 	.word	0xe000ed10

000259f4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   259f4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   259f6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   259f8:	f380 8811 	msr	BASEPRI, r0
	isb
   259fc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   25a00:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   25a04:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   25a06:	b662      	cpsie	i
	isb
   25a08:	f3bf 8f6f 	isb	sy

	bx	lr
   25a0c:	4770      	bx	lr
   25a0e:	bf00      	nop

00025a10 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   25a10:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   25a12:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   25a14:	f381 8811 	msr	BASEPRI, r1

	wfe
   25a18:	bf20      	wfe

	msr	BASEPRI, r0
   25a1a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   25a1e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   25a20:	4770      	bx	lr
   25a22:	bf00      	nop

00025a24 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   25a24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25a26:	4606      	mov	r6, r0

	if (esf != NULL) {
   25a28:	460c      	mov	r4, r1
   25a2a:	b301      	cbz	r1, 25a6e <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   25a2c:	4b13      	ldr	r3, [pc, #76]	; (25a7c <z_arm_fatal_error+0x58>)
   25a2e:	4d14      	ldr	r5, [pc, #80]	; (25a80 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   25a30:	4814      	ldr	r0, [pc, #80]	; (25a84 <z_arm_fatal_error+0x60>)
   25a32:	1aed      	subs	r5, r5, r3
   25a34:	08ed      	lsrs	r5, r5, #3
   25a36:	01ad      	lsls	r5, r5, #6
   25a38:	f045 0501 	orr.w	r5, r5, #1
   25a3c:	f8ad 5000 	strh.w	r5, [sp]
   25a40:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   25a44:	6809      	ldr	r1, [r1, #0]
   25a46:	f013 fe92 	bl	3976e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   25a4a:	f8ad 5000 	strh.w	r5, [sp]
   25a4e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   25a52:	68e1      	ldr	r1, [r4, #12]
   25a54:	480c      	ldr	r0, [pc, #48]	; (25a88 <z_arm_fatal_error+0x64>)
   25a56:	f013 fe8a 	bl	3976e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   25a5a:	462a      	mov	r2, r5
   25a5c:	69e1      	ldr	r1, [r4, #28]
   25a5e:	480b      	ldr	r0, [pc, #44]	; (25a8c <z_arm_fatal_error+0x68>)
   25a60:	f013 fe58 	bl	39714 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   25a64:	462a      	mov	r2, r5
   25a66:	69a1      	ldr	r1, [r4, #24]
   25a68:	4809      	ldr	r0, [pc, #36]	; (25a90 <z_arm_fatal_error+0x6c>)
   25a6a:	f013 fe53 	bl	39714 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   25a6e:	4621      	mov	r1, r4
   25a70:	4630      	mov	r0, r6
}
   25a72:	b002      	add	sp, #8
   25a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   25a78:	f00d bf30 	b.w	338dc <z_fatal_error>
   25a7c:	0003e468 	.word	0x0003e468
   25a80:	0003e540 	.word	0x0003e540
   25a84:	0003fa9b 	.word	0x0003fa9b
   25a88:	0003faca 	.word	0x0003faca
   25a8c:	0003faf9 	.word	0x0003faf9
   25a90:	0003fb08 	.word	0x0003fb08

00025a94 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   25a94:	bf30      	wfi
    b z_SysNmiOnReset
   25a96:	f7ff bffd 	b.w	25a94 <z_SysNmiOnReset>
   25a9a:	bf00      	nop

00025a9c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   25a9c:	4a0b      	ldr	r2, [pc, #44]	; (25acc <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   25a9e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   25aa0:	4b0b      	ldr	r3, [pc, #44]	; (25ad0 <z_arm_prep_c+0x34>)
   25aa2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   25aa6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   25aa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25aac:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   25ab0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   25ab4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   25ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   25abc:	f00d ff86 	bl	339cc <z_bss_zero>
	z_data_copy();
   25ac0:	f010 fd48 	bl	36554 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   25ac4:	f000 fb0a 	bl	260dc <z_arm_interrupt_init>
	z_cstart();
   25ac8:	f00d ffa4 	bl	33a14 <z_cstart>
   25acc:	00020200 	.word	0x00020200
   25ad0:	e000ed00 	.word	0xe000ed00

00025ad4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   25ad4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   25ad6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   25ad8:	4a0b      	ldr	r2, [pc, #44]	; (25b08 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   25ada:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   25adc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   25ade:	bf1e      	ittt	ne
	movne	r1, #0
   25ae0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   25ae2:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   25ae4:	f017 fc88 	blne	3d3f8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   25ae8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   25aea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   25aee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   25af2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   25af6:	4905      	ldr	r1, [pc, #20]	; (25b0c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   25af8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   25afa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   25afc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   25afe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   25b02:	4903      	ldr	r1, [pc, #12]	; (25b10 <_isr_wrapper+0x3c>)
	bx r1
   25b04:	4708      	bx	r1
   25b06:	0000      	.short	0x0000
	ldr r2, =_kernel
   25b08:	20017f60 	.word	0x20017f60
	ldr r1, =_sw_isr_table
   25b0c:	0003e254 	.word	0x0003e254
	ldr r1, =z_arm_int_exit
   25b10:	0002602d 	.word	0x0002602d

00025b14 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   25b14:	2000      	movs	r0, #0
    msr CONTROL, r0
   25b16:	f380 8814 	msr	CONTROL, r0
    isb
   25b1a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   25b1e:	2000      	movs	r0, #0
    msr MSPLIM, r0
   25b20:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   25b24:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   25b28:	f018 fa7a 	bl	3e020 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   25b2c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   25b2e:	490e      	ldr	r1, [pc, #56]	; (25b68 <__start+0x54>)
    str r0, [r1]
   25b30:	6008      	str	r0, [r1, #0]
    dsb
   25b32:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   25b36:	480d      	ldr	r0, [pc, #52]	; (25b6c <__start+0x58>)
    msr msp, r0
   25b38:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   25b3c:	f000 faa8 	bl	26090 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   25b40:	2020      	movs	r0, #32
    msr BASEPRI, r0
   25b42:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   25b46:	480a      	ldr	r0, [pc, #40]	; (25b70 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   25b48:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   25b4c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   25b4e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   25b52:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   25b56:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   25b58:	4308      	orrs	r0, r1
    msr CONTROL, r0
   25b5a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   25b5e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   25b62:	f7ff ff9b 	bl	25a9c <z_arm_prep_c>
   25b66:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   25b68:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   25b6c:	2001b070 	.word	0x2001b070
    ldr r0, =z_interrupt_stacks
   25b70:	2001b070 	.word	0x2001b070

00025b74 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   25b74:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   25b78:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   25b7c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   25b7e:	4672      	mov	r2, lr
	bl z_arm_fault
   25b80:	f000 f95e 	bl	25e40 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   25b84:	bd01      	pop	{r0, pc}
   25b86:	bf00      	nop

00025b88 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   25b88:	b570      	push	{r4, r5, r6, lr}
   25b8a:	4b28      	ldr	r3, [pc, #160]	; (25c2c <usage_fault.constprop.0+0xa4>)
   25b8c:	4c28      	ldr	r4, [pc, #160]	; (25c30 <usage_fault.constprop.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   25b8e:	4d29      	ldr	r5, [pc, #164]	; (25c34 <usage_fault.constprop.0+0xac>)
   25b90:	1ae4      	subs	r4, r4, r3
   25b92:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   25b94:	01a4      	lsls	r4, r4, #6
   25b96:	f044 0601 	orr.w	r6, r4, #1
   25b9a:	4631      	mov	r1, r6
   25b9c:	4826      	ldr	r0, [pc, #152]	; (25c38 <usage_fault.constprop.0+0xb0>)
   25b9e:	f013 fdac 	bl	396fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   25ba2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25ba4:	019b      	lsls	r3, r3, #6
   25ba6:	d503      	bpl.n	25bb0 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   25ba8:	4631      	mov	r1, r6
   25baa:	4824      	ldr	r0, [pc, #144]	; (25c3c <usage_fault.constprop.0+0xb4>)
   25bac:	f013 fda5 	bl	396fa <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   25bb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25bb2:	01dd      	lsls	r5, r3, #7
   25bb4:	d504      	bpl.n	25bc0 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   25bb6:	4822      	ldr	r0, [pc, #136]	; (25c40 <usage_fault.constprop.0+0xb8>)
   25bb8:	f044 0101 	orr.w	r1, r4, #1
   25bbc:	f013 fd9d 	bl	396fa <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   25bc0:	4e1c      	ldr	r6, [pc, #112]	; (25c34 <usage_fault.constprop.0+0xac>)
   25bc2:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   25bc4:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   25bc8:	d005      	beq.n	25bd6 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   25bca:	481e      	ldr	r0, [pc, #120]	; (25c44 <usage_fault.constprop.0+0xbc>)
   25bcc:	f044 0101 	orr.w	r1, r4, #1
   25bd0:	f013 fd93 	bl	396fa <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   25bd4:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   25bd6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   25bd8:	0318      	lsls	r0, r3, #12
   25bda:	d504      	bpl.n	25be6 <usage_fault.constprop.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   25bdc:	481a      	ldr	r0, [pc, #104]	; (25c48 <usage_fault.constprop.0+0xc0>)
   25bde:	f044 0101 	orr.w	r1, r4, #1
   25be2:	f013 fd8a 	bl	396fa <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   25be6:	4e13      	ldr	r6, [pc, #76]	; (25c34 <usage_fault.constprop.0+0xac>)
   25be8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   25bea:	0359      	lsls	r1, r3, #13
   25bec:	d504      	bpl.n	25bf8 <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   25bee:	4817      	ldr	r0, [pc, #92]	; (25c4c <usage_fault.constprop.0+0xc4>)
   25bf0:	f044 0101 	orr.w	r1, r4, #1
   25bf4:	f013 fd81 	bl	396fa <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   25bf8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   25bfa:	039a      	lsls	r2, r3, #14
   25bfc:	d504      	bpl.n	25c08 <usage_fault.constprop.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   25bfe:	4814      	ldr	r0, [pc, #80]	; (25c50 <usage_fault.constprop.0+0xc8>)
   25c00:	f044 0101 	orr.w	r1, r4, #1
   25c04:	f013 fd79 	bl	396fa <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   25c08:	4e0a      	ldr	r6, [pc, #40]	; (25c34 <usage_fault.constprop.0+0xac>)
   25c0a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   25c0c:	03db      	lsls	r3, r3, #15
   25c0e:	d504      	bpl.n	25c1a <usage_fault.constprop.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   25c10:	4810      	ldr	r0, [pc, #64]	; (25c54 <usage_fault.constprop.0+0xcc>)
   25c12:	f044 0101 	orr.w	r1, r4, #1
   25c16:	f013 fd70 	bl	396fa <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   25c1a:	6ab3      	ldr	r3, [r6, #40]	; 0x28

	return reason;
}
   25c1c:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   25c1e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   25c22:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   25c26:	62b3      	str	r3, [r6, #40]	; 0x28
}
   25c28:	bd70      	pop	{r4, r5, r6, pc}
   25c2a:	bf00      	nop
   25c2c:	0003e468 	.word	0x0003e468
   25c30:	0003e540 	.word	0x0003e540
   25c34:	e000ed00 	.word	0xe000ed00
   25c38:	0003fb36 	.word	0x0003fb36
   25c3c:	0003fb4e 	.word	0x0003fb4e
   25c40:	0003fb61 	.word	0x0003fb61
   25c44:	0003fb7b 	.word	0x0003fb7b
   25c48:	0003fba5 	.word	0x0003fba5
   25c4c:	0003fbc3 	.word	0x0003fbc3
   25c50:	0003fbe8 	.word	0x0003fbe8
   25c54:	0003fc02 	.word	0x0003fc02

00025c58 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   25c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25c5c:	4b2a      	ldr	r3, [pc, #168]	; (25d08 <bus_fault.constprop.0+0xb0>)
   25c5e:	4c2b      	ldr	r4, [pc, #172]	; (25d0c <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   25c60:	4d2b      	ldr	r5, [pc, #172]	; (25d10 <bus_fault.constprop.0+0xb8>)
   25c62:	1ae4      	subs	r4, r4, r3
   25c64:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   25c66:	01a4      	lsls	r4, r4, #6
   25c68:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   25c6c:	4607      	mov	r7, r0
   25c6e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   25c70:	4828      	ldr	r0, [pc, #160]	; (25d14 <bus_fault.constprop.0+0xbc>)
   25c72:	4641      	mov	r1, r8
   25c74:	f013 fd41 	bl	396fa <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   25c78:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25c7a:	04d9      	lsls	r1, r3, #19
   25c7c:	d503      	bpl.n	25c86 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   25c7e:	4641      	mov	r1, r8
   25c80:	4825      	ldr	r0, [pc, #148]	; (25d18 <bus_fault.constprop.0+0xc0>)
   25c82:	f013 fd3a 	bl	396fa <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   25c86:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25c88:	051a      	lsls	r2, r3, #20
   25c8a:	d504      	bpl.n	25c96 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   25c8c:	4823      	ldr	r0, [pc, #140]	; (25d1c <bus_fault.constprop.0+0xc4>)
   25c8e:	f044 0101 	orr.w	r1, r4, #1
   25c92:	f013 fd32 	bl	396fa <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   25c96:	4d1e      	ldr	r5, [pc, #120]	; (25d10 <bus_fault.constprop.0+0xb8>)
   25c98:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25c9a:	059b      	lsls	r3, r3, #22
   25c9c:	d512      	bpl.n	25cc4 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   25c9e:	f044 0801 	orr.w	r8, r4, #1
   25ca2:	4641      	mov	r1, r8
   25ca4:	481e      	ldr	r0, [pc, #120]	; (25d20 <bus_fault.constprop.0+0xc8>)
   25ca6:	f013 fd28 	bl	396fa <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   25caa:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   25cac:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25cae:	0418      	lsls	r0, r3, #16
   25cb0:	d508      	bpl.n	25cc4 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   25cb2:	4642      	mov	r2, r8
   25cb4:	481b      	ldr	r0, [pc, #108]	; (25d24 <bus_fault.constprop.0+0xcc>)
   25cb6:	f013 fd2d 	bl	39714 <log_1>
			if (from_hard_fault != 0) {
   25cba:	b11f      	cbz	r7, 25cc4 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   25cbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25cbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   25cc2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   25cc4:	4d12      	ldr	r5, [pc, #72]	; (25d10 <bus_fault.constprop.0+0xb8>)
   25cc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25cc8:	0559      	lsls	r1, r3, #21
   25cca:	d504      	bpl.n	25cd6 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   25ccc:	4816      	ldr	r0, [pc, #88]	; (25d28 <bus_fault.constprop.0+0xd0>)
   25cce:	f044 0101 	orr.w	r1, r4, #1
   25cd2:	f013 fd12 	bl	396fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   25cd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25cd8:	05da      	lsls	r2, r3, #23
   25cda:	d50d      	bpl.n	25cf8 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   25cdc:	4813      	ldr	r0, [pc, #76]	; (25d2c <bus_fault.constprop.0+0xd4>)
   25cde:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   25ce2:	f013 fd0a 	bl	396fa <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   25ce6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   25ce8:	4a09      	ldr	r2, [pc, #36]	; (25d10 <bus_fault.constprop.0+0xb8>)
   25cea:	6a93      	ldr	r3, [r2, #40]	; 0x28
   25cec:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   25cf0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   25cf2:	7030      	strb	r0, [r6, #0]
}
   25cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   25cf8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25cfa:	049b      	lsls	r3, r3, #18
   25cfc:	d5f3      	bpl.n	25ce6 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   25cfe:	480c      	ldr	r0, [pc, #48]	; (25d30 <bus_fault.constprop.0+0xd8>)
   25d00:	f044 0101 	orr.w	r1, r4, #1
   25d04:	e7ed      	b.n	25ce2 <bus_fault.constprop.0+0x8a>
   25d06:	bf00      	nop
   25d08:	0003e468 	.word	0x0003e468
   25d0c:	0003e540 	.word	0x0003e540
   25d10:	e000ed00 	.word	0xe000ed00
   25d14:	0003fc2d 	.word	0x0003fc2d
   25d18:	0003fc43 	.word	0x0003fc43
   25d1c:	0003fc54 	.word	0x0003fc54
   25d20:	0003fc67 	.word	0x0003fc67
   25d24:	0003fc80 	.word	0x0003fc80
   25d28:	0003fc95 	.word	0x0003fc95
   25d2c:	0003fcb0 	.word	0x0003fcb0
   25d30:	0003fcc8 	.word	0x0003fcc8

00025d34 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   25d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d38:	4b33      	ldr	r3, [pc, #204]	; (25e08 <mem_manage_fault.constprop.0+0xd4>)
   25d3a:	4c34      	ldr	r4, [pc, #208]	; (25e0c <mem_manage_fault.constprop.0+0xd8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   25d3c:	4d34      	ldr	r5, [pc, #208]	; (25e10 <mem_manage_fault.constprop.0+0xdc>)
   25d3e:	1ae4      	subs	r4, r4, r3
   25d40:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   25d42:	01a4      	lsls	r4, r4, #6
   25d44:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   25d48:	4607      	mov	r7, r0
   25d4a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   25d4c:	4831      	ldr	r0, [pc, #196]	; (25e14 <mem_manage_fault.constprop.0+0xe0>)
   25d4e:	4641      	mov	r1, r8
   25d50:	f013 fcd3 	bl	396fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   25d54:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25d56:	06d8      	lsls	r0, r3, #27
   25d58:	d503      	bpl.n	25d62 <mem_manage_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   25d5a:	4641      	mov	r1, r8
   25d5c:	482e      	ldr	r0, [pc, #184]	; (25e18 <mem_manage_fault.constprop.0+0xe4>)
   25d5e:	f013 fccc 	bl	396fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   25d62:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25d64:	0719      	lsls	r1, r3, #28
   25d66:	d504      	bpl.n	25d72 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   25d68:	482c      	ldr	r0, [pc, #176]	; (25e1c <mem_manage_fault.constprop.0+0xe8>)
   25d6a:	f044 0101 	orr.w	r1, r4, #1
   25d6e:	f013 fcc4 	bl	396fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   25d72:	4d27      	ldr	r5, [pc, #156]	; (25e10 <mem_manage_fault.constprop.0+0xdc>)
   25d74:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25d76:	079a      	lsls	r2, r3, #30
   25d78:	d512      	bpl.n	25da0 <mem_manage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   25d7a:	f044 0801 	orr.w	r8, r4, #1
   25d7e:	4641      	mov	r1, r8
   25d80:	4827      	ldr	r0, [pc, #156]	; (25e20 <mem_manage_fault.constprop.0+0xec>)
   25d82:	f013 fcba 	bl	396fa <log_0>
		uint32_t temp = SCB->MMFAR;
   25d86:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   25d88:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25d8a:	061b      	lsls	r3, r3, #24
   25d8c:	d508      	bpl.n	25da0 <mem_manage_fault.constprop.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   25d8e:	4642      	mov	r2, r8
   25d90:	4824      	ldr	r0, [pc, #144]	; (25e24 <mem_manage_fault.constprop.0+0xf0>)
   25d92:	f013 fcbf 	bl	39714 <log_1>
			if (from_hard_fault != 0) {
   25d96:	b11f      	cbz	r7, 25da0 <mem_manage_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   25d98:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   25d9e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   25da0:	4d1b      	ldr	r5, [pc, #108]	; (25e10 <mem_manage_fault.constprop.0+0xdc>)
   25da2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25da4:	07df      	lsls	r7, r3, #31
   25da6:	d504      	bpl.n	25db2 <mem_manage_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   25da8:	481f      	ldr	r0, [pc, #124]	; (25e28 <mem_manage_fault.constprop.0+0xf4>)
   25daa:	f044 0101 	orr.w	r1, r4, #1
   25dae:	f013 fca4 	bl	396fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   25db2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   25db4:	0698      	lsls	r0, r3, #26
   25db6:	d504      	bpl.n	25dc2 <mem_manage_fault.constprop.0+0x8e>
		PR_FAULT_INFO(
   25db8:	481c      	ldr	r0, [pc, #112]	; (25e2c <mem_manage_fault.constprop.0+0xf8>)
   25dba:	f044 0101 	orr.w	r1, r4, #1
   25dbe:	f013 fc9c 	bl	396fa <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   25dc2:	4b13      	ldr	r3, [pc, #76]	; (25e10 <mem_manage_fault.constprop.0+0xdc>)
   25dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   25dc6:	06d1      	lsls	r1, r2, #27
   25dc8:	d402      	bmi.n	25dd0 <mem_manage_fault.constprop.0+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   25dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   25dcc:	0792      	lsls	r2, r2, #30
   25dce:	d511      	bpl.n	25df4 <mem_manage_fault.constprop.0+0xc0>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   25dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   25dd2:	06db      	lsls	r3, r3, #27
   25dd4:	d50e      	bpl.n	25df4 <mem_manage_fault.constprop.0+0xc0>
   25dd6:	4916      	ldr	r1, [pc, #88]	; (25e30 <mem_manage_fault.constprop.0+0xfc>)
   25dd8:	f240 134f 	movw	r3, #335	; 0x14f
   25ddc:	4a15      	ldr	r2, [pc, #84]	; (25e34 <mem_manage_fault.constprop.0+0x100>)
   25dde:	4816      	ldr	r0, [pc, #88]	; (25e38 <mem_manage_fault.constprop.0+0x104>)
   25de0:	f013 f9eb 	bl	391ba <printk>
   25de4:	4815      	ldr	r0, [pc, #84]	; (25e3c <mem_manage_fault.constprop.0+0x108>)
   25de6:	f013 f9e8 	bl	391ba <printk>
   25dea:	f240 114f 	movw	r1, #335	; 0x14f
   25dee:	4811      	ldr	r0, [pc, #68]	; (25e34 <mem_manage_fault.constprop.0+0x100>)
   25df0:	f013 fc3a 	bl	39668 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   25df4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   25df6:	4a06      	ldr	r2, [pc, #24]	; (25e10 <mem_manage_fault.constprop.0+0xdc>)
   25df8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   25dfa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   25dfe:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   25e00:	7030      	strb	r0, [r6, #0]
}
   25e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25e06:	bf00      	nop
   25e08:	0003e468 	.word	0x0003e468
   25e0c:	0003e540 	.word	0x0003e540
   25e10:	e000ed00 	.word	0xe000ed00
   25e14:	0003fcf7 	.word	0x0003fcf7
   25e18:	0003fd0d 	.word	0x0003fd0d
   25e1c:	0003fc54 	.word	0x0003fc54
   25e20:	0003fd40 	.word	0x0003fd40
   25e24:	0003fd58 	.word	0x0003fd58
   25e28:	0003fd6e 	.word	0x0003fd6e
   25e2c:	0003fcc8 	.word	0x0003fcc8
   25e30:	0003fdc7 	.word	0x0003fdc7
   25e34:	0003fd8d 	.word	0x0003fd8d
   25e38:	0003f0e1 	.word	0x0003f0e1
   25e3c:	0003fe11 	.word	0x0003fe11

00025e40 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   25e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   25e44:	4b64      	ldr	r3, [pc, #400]	; (25fd8 <z_arm_fault+0x198>)
{
   25e46:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   25e48:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   25e4c:	4689      	mov	r9, r1
   25e4e:	4616      	mov	r6, r2
   25e50:	2500      	movs	r5, #0
   25e52:	b08b      	sub	sp, #44	; 0x2c
   25e54:	f3c8 0708 	ubfx	r7, r8, #0, #9
   25e58:	f385 8811 	msr	BASEPRI, r5
   25e5c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   25e60:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   25e64:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   25e68:	d117      	bne.n	25e9a <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   25e6a:	07d3      	lsls	r3, r2, #31
   25e6c:	d415      	bmi.n	25e9a <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   25e6e:	0650      	lsls	r0, r2, #25
   25e70:	d403      	bmi.n	25e7a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   25e72:	0711      	lsls	r1, r2, #28
   25e74:	d40e      	bmi.n	25e94 <z_arm_fault+0x54>
			*nested_exc = true;
   25e76:	2501      	movs	r5, #1
   25e78:	e00e      	b.n	25e98 <z_arm_fault+0x58>
   25e7a:	4a58      	ldr	r2, [pc, #352]	; (25fdc <z_arm_fault+0x19c>)
   25e7c:	4b58      	ldr	r3, [pc, #352]	; (25fe0 <z_arm_fault+0x1a0>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   25e7e:	4859      	ldr	r0, [pc, #356]	; (25fe4 <z_arm_fault+0x1a4>)
   25e80:	1a9b      	subs	r3, r3, r2
   25e82:	08db      	lsrs	r3, r3, #3
   25e84:	019b      	lsls	r3, r3, #6
   25e86:	f043 0101 	orr.w	r1, r3, #1
   25e8a:	f013 fc36 	bl	396fa <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   25e8e:	f016 0604 	ands.w	r6, r6, #4
   25e92:	d000      	beq.n	25e96 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
   25e94:	464c      	mov	r4, r9
	*nested_exc = false;
   25e96:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   25e98:	b97c      	cbnz	r4, 25eba <z_arm_fault+0x7a>
   25e9a:	f240 33e1 	movw	r3, #993	; 0x3e1
   25e9e:	4a52      	ldr	r2, [pc, #328]	; (25fe8 <z_arm_fault+0x1a8>)
   25ea0:	4952      	ldr	r1, [pc, #328]	; (25fec <z_arm_fault+0x1ac>)
   25ea2:	4853      	ldr	r0, [pc, #332]	; (25ff0 <z_arm_fault+0x1b0>)
   25ea4:	f013 f989 	bl	391ba <printk>
   25ea8:	4852      	ldr	r0, [pc, #328]	; (25ff4 <z_arm_fault+0x1b4>)
   25eaa:	f013 f986 	bl	391ba <printk>
   25eae:	f240 31e1 	movw	r1, #993	; 0x3e1
   25eb2:	484d      	ldr	r0, [pc, #308]	; (25fe8 <z_arm_fault+0x1a8>)
   25eb4:	f013 fbd8 	bl	39668 <assert_post_action>
   25eb8:	2400      	movs	r4, #0
	*recoverable = false;
   25eba:	2300      	movs	r3, #0
   25ebc:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   25ec0:	1efb      	subs	r3, r7, #3
   25ec2:	2b09      	cmp	r3, #9
   25ec4:	d86e      	bhi.n	25fa4 <z_arm_fault+0x164>
   25ec6:	e8df f003 	tbb	[pc, r3]
   25eca:	5c05      	.short	0x5c05
   25ecc:	6d6d3a60 	.word	0x6d6d3a60
   25ed0:	646d6d6d 	.word	0x646d6d6d
   25ed4:	4b41      	ldr	r3, [pc, #260]	; (25fdc <z_arm_fault+0x19c>)
   25ed6:	4e42      	ldr	r6, [pc, #264]	; (25fe0 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   25ed8:	4847      	ldr	r0, [pc, #284]	; (25ff8 <z_arm_fault+0x1b8>)
   25eda:	1af6      	subs	r6, r6, r3
   25edc:	08f6      	lsrs	r6, r6, #3
   25ede:	01b6      	lsls	r6, r6, #6
   25ee0:	f046 0601 	orr.w	r6, r6, #1
   25ee4:	4631      	mov	r1, r6
   25ee6:	f013 fc08 	bl	396fa <log_0>
	*recoverable = false;
   25eea:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   25eec:	4f3a      	ldr	r7, [pc, #232]	; (25fd8 <z_arm_fault+0x198>)
	*recoverable = false;
   25eee:	f88d 3007 	strb.w	r3, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   25ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25ef4:	079a      	lsls	r2, r3, #30
   25ef6:	d505      	bpl.n	25f04 <z_arm_fault+0xc4>
		PR_EXC("  Bus fault on vector table read");
   25ef8:	4631      	mov	r1, r6
   25efa:	4840      	ldr	r0, [pc, #256]	; (25ffc <z_arm_fault+0x1bc>)
	PR_FAULT_INFO(
   25efc:	f013 fbfd 	bl	396fa <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   25f00:	2300      	movs	r3, #0
   25f02:	e01f      	b.n	25f44 <z_arm_fault+0x104>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   25f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25f06:	005b      	lsls	r3, r3, #1
   25f08:	d5fa      	bpl.n	25f00 <z_arm_fault+0xc0>
		PR_EXC("  Fault escalation (see below)");
   25f0a:	4631      	mov	r1, r6
   25f0c:	483c      	ldr	r0, [pc, #240]	; (26000 <z_arm_fault+0x1c0>)
   25f0e:	f013 fbf4 	bl	396fa <log_0>
		if (SCB_MMFSR != 0) {
   25f12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   25f16:	b12b      	cbz	r3, 25f24 <z_arm_fault+0xe4>
			reason = mem_manage_fault(esf, 1, recoverable);
   25f18:	2001      	movs	r0, #1
   25f1a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   25f1e:	f7ff ff09 	bl	25d34 <mem_manage_fault.constprop.0>
   25f22:	e00e      	b.n	25f42 <z_arm_fault+0x102>
		} else if (SCB_BFSR != 0) {
   25f24:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   25f28:	b12b      	cbz	r3, 25f36 <z_arm_fault+0xf6>
			reason = bus_fault(esf, 1, recoverable);
   25f2a:	2001      	movs	r0, #1
   25f2c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   25f30:	f7ff fe92 	bl	25c58 <bus_fault.constprop.0>
   25f34:	e005      	b.n	25f42 <z_arm_fault+0x102>
		} else if (SCB_UFSR != 0) {
   25f36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   25f38:	b29b      	uxth	r3, r3
   25f3a:	2b00      	cmp	r3, #0
   25f3c:	d0e0      	beq.n	25f00 <z_arm_fault+0xc0>
			reason = usage_fault(esf);
   25f3e:	f7ff fe23 	bl	25b88 <usage_fault.constprop.0>
   25f42:	4603      	mov	r3, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   25f44:	f89d 2007 	ldrb.w	r2, [sp, #7]
   25f48:	b9c2      	cbnz	r2, 25f7c <z_arm_fault+0x13c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   25f4a:	ae02      	add	r6, sp, #8
   25f4c:	f104 0720 	add.w	r7, r4, #32
   25f50:	4632      	mov	r2, r6
   25f52:	6820      	ldr	r0, [r4, #0]
   25f54:	6861      	ldr	r1, [r4, #4]
   25f56:	3408      	adds	r4, #8
   25f58:	c203      	stmia	r2!, {r0, r1}
   25f5a:	42bc      	cmp	r4, r7
   25f5c:	4616      	mov	r6, r2
   25f5e:	d1f7      	bne.n	25f50 <z_arm_fault+0x110>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   25f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25f62:	b39d      	cbz	r5, 25fcc <z_arm_fault+0x18c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   25f64:	f3c2 0108 	ubfx	r1, r2, #0, #9
   25f68:	b921      	cbnz	r1, 25f74 <z_arm_fault+0x134>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   25f6a:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   25f6e:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   25f72:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   25f74:	4618      	mov	r0, r3
   25f76:	a902      	add	r1, sp, #8
   25f78:	f7ff fd54 	bl	25a24 <z_arm_fatal_error>
}
   25f7c:	b00b      	add	sp, #44	; 0x2c
   25f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   25f82:	2000      	movs	r0, #0
   25f84:	f10d 0107 	add.w	r1, sp, #7
   25f88:	e7c9      	b.n	25f1e <z_arm_fault+0xde>
		reason = bus_fault(esf, 0, recoverable);
   25f8a:	2000      	movs	r0, #0
   25f8c:	f10d 0107 	add.w	r1, sp, #7
   25f90:	e7ce      	b.n	25f30 <z_arm_fault+0xf0>
   25f92:	4913      	ldr	r1, [pc, #76]	; (25fe0 <z_arm_fault+0x1a0>)
   25f94:	4b11      	ldr	r3, [pc, #68]	; (25fdc <z_arm_fault+0x19c>)
	PR_FAULT_INFO(
   25f96:	481b      	ldr	r0, [pc, #108]	; (26004 <z_arm_fault+0x1c4>)
   25f98:	1ac9      	subs	r1, r1, r3
   25f9a:	08c9      	lsrs	r1, r1, #3
   25f9c:	0189      	lsls	r1, r1, #6
   25f9e:	f041 0101 	orr.w	r1, r1, #1
   25fa2:	e7ab      	b.n	25efc <z_arm_fault+0xbc>
   25fa4:	4a0d      	ldr	r2, [pc, #52]	; (25fdc <z_arm_fault+0x19c>)
   25fa6:	4b0e      	ldr	r3, [pc, #56]	; (25fe0 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** %s %d) *****",
   25fa8:	4817      	ldr	r0, [pc, #92]	; (26008 <z_arm_fault+0x1c8>)
   25faa:	1a9b      	subs	r3, r3, r2
   25fac:	08db      	lsrs	r3, r3, #3
   25fae:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   25fb2:	ea4f 1383 	mov.w	r3, r3, lsl #6
   25fb6:	4915      	ldr	r1, [pc, #84]	; (2600c <z_arm_fault+0x1cc>)
   25fb8:	f043 0301 	orr.w	r3, r3, #1
   25fbc:	bf18      	it	ne
   25fbe:	4601      	movne	r1, r0
   25fc0:	f1a7 0210 	sub.w	r2, r7, #16
   25fc4:	4812      	ldr	r0, [pc, #72]	; (26010 <z_arm_fault+0x1d0>)
   25fc6:	f013 fbb9 	bl	3973c <log_2>
}
   25fca:	e799      	b.n	25f00 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   25fcc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   25fd0:	f022 0201 	bic.w	r2, r2, #1
   25fd4:	e7cd      	b.n	25f72 <z_arm_fault+0x132>
   25fd6:	bf00      	nop
   25fd8:	e000ed00 	.word	0xe000ed00
   25fdc:	0003e468 	.word	0x0003e468
   25fe0:	0003e540 	.word	0x0003e540
   25fe4:	0003fe75 	.word	0x0003fe75
   25fe8:	0003fd8d 	.word	0x0003fd8d
   25fec:	0003fe98 	.word	0x0003fe98
   25ff0:	0003f0e1 	.word	0x0003f0e1
   25ff4:	0003feab 	.word	0x0003feab
   25ff8:	0003fee9 	.word	0x0003fee9
   25ffc:	0003ff00 	.word	0x0003ff00
   26000:	0003ff21 	.word	0x0003ff21
   26004:	0003ff40 	.word	0x0003ff40
   26008:	0003ff79 	.word	0x0003ff79
   2600c:	0003ff64 	.word	0x0003ff64
   26010:	0003ff92 	.word	0x0003ff92

00026014 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   26014:	4b04      	ldr	r3, [pc, #16]	; (26028 <z_arm_fault_init+0x14>)
   26016:	695a      	ldr	r2, [r3, #20]
   26018:	f042 0210 	orr.w	r2, r2, #16
   2601c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   2601e:	695a      	ldr	r2, [r3, #20]
   26020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   26024:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   26026:	4770      	bx	lr
   26028:	e000ed00 	.word	0xe000ed00

0002602c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2602c:	4b04      	ldr	r3, [pc, #16]	; (26040 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2602e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   26030:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   26032:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   26034:	d003      	beq.n	2603e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   26036:	4903      	ldr	r1, [pc, #12]	; (26044 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   26038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2603c:	600a      	str	r2, [r1, #0]

0002603e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2603e:	4770      	bx	lr
	ldr r3, =_kernel
   26040:	20017f60 	.word	0x20017f60
	ldr r1, =_SCS_ICSR
   26044:	e000ed04 	.word	0xe000ed04

00026048 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   26048:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2604c:	4905      	ldr	r1, [pc, #20]	; (26064 <sys_arch_reboot+0x1c>)
   2604e:	4b06      	ldr	r3, [pc, #24]	; (26068 <sys_arch_reboot+0x20>)
   26050:	68ca      	ldr	r2, [r1, #12]
   26052:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   26056:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   26058:	60cb      	str	r3, [r1, #12]
   2605a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2605e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   26060:	e7fd      	b.n	2605e <sys_arch_reboot+0x16>
   26062:	bf00      	nop
   26064:	e000ed00 	.word	0xe000ed00
   26068:	05fa0004 	.word	0x05fa0004

0002606c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   2606c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   2606e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   26070:	4906      	ldr	r1, [pc, #24]	; (2608c <z_arm_clear_arm_mpu_config+0x20>)
   26072:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   26076:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   2607a:	4293      	cmp	r3, r2
   2607c:	db00      	blt.n	26080 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   2607e:	4770      	bx	lr
  mpu->RNR = rnr;
   26080:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   26084:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   26088:	3301      	adds	r3, #1
   2608a:	e7f6      	b.n	2607a <z_arm_clear_arm_mpu_config+0xe>
   2608c:	e000ed00 	.word	0xe000ed00

00026090 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   26090:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   26092:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   26094:	2400      	movs	r4, #0
   26096:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   2609a:	f7ff ffe7 	bl	2606c <z_arm_clear_arm_mpu_config>
   2609e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   260a0:	f04f 30ff 	mov.w	r0, #4294967295
   260a4:	4a0c      	ldr	r2, [pc, #48]	; (260d8 <z_arm_init_arch_hw_at_boot+0x48>)
   260a6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   260aa:	3301      	adds	r3, #1
   260ac:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   260ae:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   260b2:	d1f8      	bne.n	260a6 <z_arm_init_arch_hw_at_boot+0x16>
   260b4:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   260b6:	f04f 30ff 	mov.w	r0, #4294967295
   260ba:	4a07      	ldr	r2, [pc, #28]	; (260d8 <z_arm_init_arch_hw_at_boot+0x48>)
   260bc:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   260c0:	3301      	adds	r3, #1
   260c2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   260c4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   260c8:	d1f8      	bne.n	260bc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   260ca:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   260cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   260d0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   260d4:	bd10      	pop	{r4, pc}
   260d6:	bf00      	nop
   260d8:	e000e100 	.word	0xe000e100

000260dc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   260dc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   260de:	2120      	movs	r1, #32
   260e0:	4803      	ldr	r0, [pc, #12]	; (260f0 <z_arm_interrupt_init+0x14>)
   260e2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   260e4:	3301      	adds	r3, #1
   260e6:	2b41      	cmp	r3, #65	; 0x41
   260e8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   260ec:	d1f9      	bne.n	260e2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   260ee:	4770      	bx	lr
   260f0:	e000e100 	.word	0xe000e100

000260f4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   260f4:	4b06      	ldr	r3, [pc, #24]	; (26110 <z_impl_k_thread_abort+0x1c>)
   260f6:	689b      	ldr	r3, [r3, #8]
   260f8:	4283      	cmp	r3, r0
   260fa:	d107      	bne.n	2610c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   260fc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   26100:	b123      	cbz	r3, 2610c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   26102:	4a04      	ldr	r2, [pc, #16]	; (26114 <z_impl_k_thread_abort+0x20>)
   26104:	6853      	ldr	r3, [r2, #4]
   26106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2610a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   2610c:	f010 b900 	b.w	36310 <z_thread_abort>
   26110:	20017f60 	.word	0x20017f60
   26114:	e000ed00 	.word	0xe000ed00

00026118 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   26118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2611a:	4c09      	ldr	r4, [pc, #36]	; (26140 <z_arm_configure_static_mpu_regions+0x28>)
   2611c:	4a09      	ldr	r2, [pc, #36]	; (26144 <z_arm_configure_static_mpu_regions+0x2c>)
   2611e:	4623      	mov	r3, r4
   26120:	2101      	movs	r1, #1
   26122:	4809      	ldr	r0, [pc, #36]	; (26148 <z_arm_configure_static_mpu_regions+0x30>)
   26124:	f000 f91e 	bl	26364 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   26128:	2300      	movs	r3, #0
   2612a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   2612c:	4b07      	ldr	r3, [pc, #28]	; (2614c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2612e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   26130:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   26132:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   26134:	9301      	str	r3, [sp, #4]
   26136:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   26138:	f000 f93a 	bl	263b0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   2613c:	b004      	add	sp, #16
   2613e:	bd10      	pop	{r4, pc}
   26140:	20040000 	.word	0x20040000
   26144:	20014500 	.word	0x20014500
   26148:	0003e8b4 	.word	0x0003e8b4
   2614c:	20014be0 	.word	0x20014be0

00026150 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   26150:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   26152:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   26154:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   26156:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   2615a:	f004 021f 	and.w	r2, r4, #31
   2615e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   26160:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   26162:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   26164:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   26168:	4905      	ldr	r1, [pc, #20]	; (26180 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2616a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   2616e:	f043 0301 	orr.w	r3, r3, #1
   26172:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   26176:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   2617a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   2617e:	bd10      	pop	{r4, pc}
   26180:	e000ed00 	.word	0xe000ed00

00026184 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   26184:	280f      	cmp	r0, #15
{
   26186:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   26188:	d90d      	bls.n	261a6 <region_allocate_and_init+0x22>
   2618a:	4b08      	ldr	r3, [pc, #32]	; (261ac <region_allocate_and_init+0x28>)
   2618c:	4a08      	ldr	r2, [pc, #32]	; (261b0 <region_allocate_and_init+0x2c>)

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   2618e:	4601      	mov	r1, r0
   26190:	1ad2      	subs	r2, r2, r3
   26192:	08d2      	lsrs	r2, r2, #3
   26194:	0192      	lsls	r2, r2, #6
   26196:	4807      	ldr	r0, [pc, #28]	; (261b4 <region_allocate_and_init+0x30>)
   26198:	f042 0201 	orr.w	r2, r2, #1
   2619c:	f013 faba 	bl	39714 <log_1>
		return -EINVAL;
   261a0:	f06f 0015 	mvn.w	r0, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   261a4:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   261a6:	f7ff ffd3 	bl	26150 <region_init>
	return index;
   261aa:	e7fb      	b.n	261a4 <region_allocate_and_init+0x20>
   261ac:	0003e468 	.word	0x0003e468
   261b0:	0003e528 	.word	0x0003e528
   261b4:	0003ffa9 	.word	0x0003ffa9

000261b8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   261b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261bc:	4689      	mov	r9, r1
   261be:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   261c0:	4606      	mov	r6, r0
   261c2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   261c6:	4d57      	ldr	r5, [pc, #348]	; (26324 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   261c8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   261ca:	45c8      	cmp	r8, r9
   261cc:	da33      	bge.n	26236 <mpu_configure_regions_and_partition.constprop.0+0x7e>
		if (regions[i].size == 0U) {
   261ce:	f8d6 a004 	ldr.w	sl, [r6, #4]
   261d2:	f1ba 0f00 	cmp.w	sl, #0
   261d6:	d051      	beq.n	2627c <mpu_configure_regions_and_partition.constprop.0+0xc4>
		&&
   261d8:	f1ba 0f1f 	cmp.w	sl, #31
   261dc:	d91e      	bls.n	2621c <mpu_configure_regions_and_partition.constprop.0+0x64>
		&&
   261de:	f01a 0f1f 	tst.w	sl, #31
   261e2:	d11b      	bne.n	2621c <mpu_configure_regions_and_partition.constprop.0+0x64>
		((part->start &
   261e4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   261e8:	f01b 0f1f 	tst.w	fp, #31
   261ec:	d116      	bne.n	2621c <mpu_configure_regions_and_partition.constprop.0+0x64>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   261ee:	4658      	mov	r0, fp
   261f0:	f013 ff19 	bl	3a026 <arm_cmse_mpu_region_get>
   261f4:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   261f6:	eb0a 000b 	add.w	r0, sl, fp
   261fa:	3801      	subs	r0, #1
   261fc:	f013 ff13 	bl	3a026 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   26200:	4287      	cmp	r7, r0
   26202:	d01c      	beq.n	2623e <mpu_configure_regions_and_partition.constprop.0+0x86>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   26204:	f06f 0715 	mvn.w	r7, #21
   26208:	4a47      	ldr	r2, [pc, #284]	; (26328 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   2620a:	4b48      	ldr	r3, [pc, #288]	; (2632c <mpu_configure_regions_and_partition.constprop.0+0x174>)

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   2620c:	4639      	mov	r1, r7
   2620e:	1ad2      	subs	r2, r2, r3
   26210:	08d2      	lsrs	r2, r2, #3
   26212:	0192      	lsls	r2, r2, #6
   26214:	4846      	ldr	r0, [pc, #280]	; (26330 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   26216:	f042 0201 	orr.w	r2, r2, #1
   2621a:	e008      	b.n	2622e <mpu_configure_regions_and_partition.constprop.0+0x76>
			LOG_ERR("Partition %u: sanity check failed.", i);
   2621c:	4641      	mov	r1, r8
   2621e:	4a42      	ldr	r2, [pc, #264]	; (26328 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   26220:	4b42      	ldr	r3, [pc, #264]	; (2632c <mpu_configure_regions_and_partition.constprop.0+0x174>)
   26222:	4844      	ldr	r0, [pc, #272]	; (26334 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   26224:	1ad2      	subs	r2, r2, r3
   26226:	08d2      	lsrs	r2, r2, #3
   26228:	0192      	lsls	r2, r2, #6
   2622a:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   2622e:	f013 fa71 	bl	39714 <log_1>
			return -EINVAL;
   26232:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   26236:	4620      	mov	r0, r4
   26238:	b005      	add	sp, #20
   2623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   2623e:	f117 0f16 	cmn.w	r7, #22
   26242:	d0e1      	beq.n	26208 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   26244:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   26246:	42bb      	cmp	r3, r7
   26248:	dbde      	blt.n	26208 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   2624a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   2624e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
   26252:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   26256:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   2625a:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   2625e:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   26262:	e9d6 3200 	ldrd	r3, r2, [r6]
   26266:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   26268:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   2626a:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   2626e:	d11d      	bne.n	262ac <mpu_configure_regions_and_partition.constprop.0+0xf4>
   26270:	45d3      	cmp	fp, sl
   26272:	d107      	bne.n	26284 <mpu_configure_regions_and_partition.constprop.0+0xcc>
			mpu_configure_region(u_reg_index, &regions[i]);
   26274:	4631      	mov	r1, r6
   26276:	b2f8      	uxtb	r0, r7
   26278:	f013 fede 	bl	3a038 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   2627c:	f108 0801 	add.w	r8, r8, #1
   26280:	360c      	adds	r6, #12
   26282:	e7a2      	b.n	261ca <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   26284:	4631      	mov	r1, r6
	MPU->RNR = index;
   26286:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2628a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
   2628e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   26292:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   26296:	4313      	orrs	r3, r2
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   26298:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   2629c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   2629e:	f013 fecb 	bl	3a038 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   262a2:	f110 0f16 	cmn.w	r0, #22
   262a6:	d0c4      	beq.n	26232 <mpu_configure_regions_and_partition.constprop.0+0x7a>
			reg_index++;
   262a8:	1c44      	adds	r4, r0, #1
   262aa:	e7e7      	b.n	2627c <mpu_configure_regions_and_partition.constprop.0+0xc4>
	MPU->RNR = index;
   262ac:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   262b0:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   262b4:	3b01      	subs	r3, #1
		| (limit & MPU_RLAR_LIMIT_Msk);
   262b6:	f023 031f 	bic.w	r3, r3, #31
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   262ba:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   262be:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   262c0:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   262c2:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   262c4:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   262c6:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   262ca:	d0e8      	beq.n	2629e <mpu_configure_regions_and_partition.constprop.0+0xe6>
				mpu_configure_region(reg_index, &regions[i]);
   262cc:	f013 feb4 	bl	3a038 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   262d0:	f110 0f16 	cmn.w	r0, #22
   262d4:	d0ad      	beq.n	26232 <mpu_configure_regions_and_partition.constprop.0+0x7a>
	MPU->RNR = index;
   262d6:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   262da:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   262de:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   262e2:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   262e6:	f362 0304 	bfi	r3, r2, #0, #5
   262ea:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   262ee:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   262f2:	f89d 2008 	ldrb.w	r2, [sp, #8]
   262f6:	085b      	lsrs	r3, r3, #1
   262f8:	f363 1247 	bfi	r2, r3, #5, #3
   262fc:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   26300:	e9d6 3200 	ldrd	r3, r2, [r6]
   26304:	4413      	add	r3, r2
   26306:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   26308:	f023 031f 	bic.w	r3, r3, #31
   2630c:	445b      	add	r3, fp
   2630e:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   26312:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   26314:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   26318:	4669      	mov	r1, sp
   2631a:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   2631c:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   2631e:	f7ff ff31 	bl	26184 <region_allocate_and_init>
   26322:	e7be      	b.n	262a2 <mpu_configure_regions_and_partition.constprop.0+0xea>
   26324:	e000ed00 	.word	0xe000ed00
   26328:	0003e528 	.word	0x0003e528
   2632c:	0003e468 	.word	0x0003e468
   26330:	0003fff2 	.word	0x0003fff2
   26334:	0003ffcf 	.word	0x0003ffcf

00026338 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   26338:	2205      	movs	r2, #5
   2633a:	4b04      	ldr	r3, [pc, #16]	; (2634c <arm_core_mpu_enable+0x14>)
   2633c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   26340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26344:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   26348:	4770      	bx	lr
   2634a:	bf00      	nop
   2634c:	e000ed00 	.word	0xe000ed00

00026350 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   26350:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   26354:	2200      	movs	r2, #0
   26356:	4b02      	ldr	r3, [pc, #8]	; (26360 <arm_core_mpu_disable+0x10>)
   26358:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2635c:	4770      	bx	lr
   2635e:	bf00      	nop
   26360:	e000ed00 	.word	0xe000ed00

00026364 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   26364:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   26366:	4d0d      	ldr	r5, [pc, #52]	; (2639c <arm_core_mpu_configure_static_mpu_regions+0x38>)
   26368:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   2636a:	782a      	ldrb	r2, [r5, #0]
   2636c:	f7ff ff24 	bl	261b8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   26370:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   26372:	3016      	adds	r0, #22
   26374:	d111      	bne.n	2639a <arm_core_mpu_configure_static_mpu_regions+0x36>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   26376:	f240 1305 	movw	r3, #261	; 0x105
   2637a:	4a09      	ldr	r2, [pc, #36]	; (263a0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   2637c:	4909      	ldr	r1, [pc, #36]	; (263a4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   2637e:	480a      	ldr	r0, [pc, #40]	; (263a8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   26380:	f012 ff1b 	bl	391ba <printk>
   26384:	4621      	mov	r1, r4
   26386:	4809      	ldr	r0, [pc, #36]	; (263ac <arm_core_mpu_configure_static_mpu_regions+0x48>)
   26388:	f012 ff17 	bl	391ba <printk>
			regions_num);
	}
}
   2638c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   26390:	f240 1105 	movw	r1, #261	; 0x105
   26394:	4802      	ldr	r0, [pc, #8]	; (263a0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   26396:	f013 b967 	b.w	39668 <assert_post_action>
}
   2639a:	bd38      	pop	{r3, r4, r5, pc}
   2639c:	200180f3 	.word	0x200180f3
   263a0:	00040015 	.word	0x00040015
   263a4:	000422ae 	.word	0x000422ae
   263a8:	0003f0e1 	.word	0x0003f0e1
   263ac:	0004004c 	.word	0x0004004c

000263b0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   263b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263b4:	4e32      	ldr	r6, [pc, #200]	; (26480 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   263b6:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   263b8:	4605      	mov	r5, r0
   263ba:	f04f 0800 	mov.w	r8, #0
   263be:	46b3      	mov	fp, r6
	MPU->RNR = index;
   263c0:	4f30      	ldr	r7, [pc, #192]	; (26484 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   263c2:	45c8      	cmp	r8, r9
   263c4:	db02      	blt.n	263cc <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   263c6:	b003      	add	sp, #12
   263c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   263cc:	f8d5 a004 	ldr.w	sl, [r5, #4]
   263d0:	f1ba 0f00 	cmp.w	sl, #0
   263d4:	d04f      	beq.n	26476 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   263d6:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   263d8:	4608      	mov	r0, r1
   263da:	9101      	str	r1, [sp, #4]
   263dc:	f013 fe23 	bl	3a026 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   263e0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   263e2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   263e4:	eb0a 0001 	add.w	r0, sl, r1
   263e8:	3801      	subs	r0, #1
   263ea:	f013 fe1c 	bl	3a026 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   263ee:	4284      	cmp	r4, r0
   263f0:	f04f 0214 	mov.w	r2, #20
   263f4:	4b24      	ldr	r3, [pc, #144]	; (26488 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   263f6:	d018      	beq.n	2642a <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   263f8:	fb02 f308 	mul.w	r3, r2, r8
   263fc:	f06f 0215 	mvn.w	r2, #21
   26400:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   26404:	f240 1315 	movw	r3, #277	; 0x115
   26408:	4a20      	ldr	r2, [pc, #128]	; (2648c <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   2640a:	4921      	ldr	r1, [pc, #132]	; (26490 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   2640c:	4821      	ldr	r0, [pc, #132]	; (26494 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   2640e:	f012 fed4 	bl	391ba <printk>
   26412:	4649      	mov	r1, r9
   26414:	4820      	ldr	r0, [pc, #128]	; (26498 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe8>)
   26416:	f012 fed0 	bl	391ba <printk>
   2641a:	f240 1115 	movw	r1, #277	; 0x115
   2641e:	481b      	ldr	r0, [pc, #108]	; (2648c <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
}
   26420:	b003      	add	sp, #12
   26422:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   26426:	f013 b91f 	b.w	39668 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   2642a:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   2642e:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   26430:	d0e8      	beq.n	26404 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   26432:	7819      	ldrb	r1, [r3, #0]
   26434:	42a1      	cmp	r1, r4
   26436:	dde5      	ble.n	26404 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   26438:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   2643c:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
   26440:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   26444:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   26448:	f100 0108 	add.w	r1, r0, #8
   2644c:	7b00      	ldrb	r0, [r0, #12]
   2644e:	f364 0004 	bfi	r0, r4, #0, #5
   26452:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   26454:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   26458:	790c      	ldrb	r4, [r1, #4]
   2645a:	0840      	lsrs	r0, r0, #1
   2645c:	f360 1447 	bfi	r4, r0, #5, #3
   26460:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   26462:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   26466:	f021 011f 	bic.w	r1, r1, #31
   2646a:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   2646c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   26470:	f021 011f 	bic.w	r1, r1, #31
   26474:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   26476:	f108 0801 	add.w	r8, r8, #1
   2647a:	3614      	adds	r6, #20
   2647c:	350c      	adds	r5, #12
   2647e:	e7a0      	b.n	263c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   26480:	200178d8 	.word	0x200178d8
   26484:	e000ed00 	.word	0xe000ed00
   26488:	200180f3 	.word	0x200180f3
   2648c:	00040015 	.word	0x00040015
   26490:	000422ae 	.word	0x000422ae
   26494:	0003f0e1 	.word	0x0003f0e1
   26498:	00040078 	.word	0x00040078

0002649c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   2649c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2649e:	4d22      	ldr	r5, [pc, #136]	; (26528 <z_arm_mpu_init+0x8c>)
   264a0:	682c      	ldr	r4, [r5, #0]
   264a2:	2c10      	cmp	r4, #16
   264a4:	d913      	bls.n	264ce <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   264a6:	f44f 739e 	mov.w	r3, #316	; 0x13c
   264aa:	4a20      	ldr	r2, [pc, #128]	; (2652c <z_arm_mpu_init+0x90>)
   264ac:	4920      	ldr	r1, [pc, #128]	; (26530 <z_arm_mpu_init+0x94>)
   264ae:	4821      	ldr	r0, [pc, #132]	; (26534 <z_arm_mpu_init+0x98>)
   264b0:	f012 fe83 	bl	391ba <printk>
   264b4:	2210      	movs	r2, #16
   264b6:	4621      	mov	r1, r4
   264b8:	481f      	ldr	r0, [pc, #124]	; (26538 <z_arm_mpu_init+0x9c>)
   264ba:	f012 fe7e 	bl	391ba <printk>
   264be:	481b      	ldr	r0, [pc, #108]	; (2652c <z_arm_mpu_init+0x90>)
   264c0:	f44f 719e 	mov.w	r1, #316	; 0x13c
   264c4:	f013 f8d0 	bl	39668 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   264c8:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   264cc:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   264ce:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   264d0:	f7ff ff3e 	bl	26350 <arm_core_mpu_disable>
	MPU->MAIR0 =
   264d4:	4b19      	ldr	r3, [pc, #100]	; (2653c <z_arm_mpu_init+0xa0>)
   264d6:	4a1a      	ldr	r2, [pc, #104]	; (26540 <z_arm_mpu_init+0xa4>)
   264d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   264dc:	4284      	cmp	r4, r0
   264de:	d10c      	bne.n	264fa <z_arm_mpu_init+0x5e>
	static_regions_num = mpu_config.num_regions;
   264e0:	4b18      	ldr	r3, [pc, #96]	; (26544 <z_arm_mpu_init+0xa8>)
   264e2:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   264e4:	f7ff ff28 	bl	26338 <arm_core_mpu_enable>
	__ASSERT(
   264e8:	4b14      	ldr	r3, [pc, #80]	; (2653c <z_arm_mpu_init+0xa0>)
   264ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   264ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
   264f2:	2b10      	cmp	r3, #16
   264f4:	d108      	bne.n	26508 <z_arm_mpu_init+0x6c>
	return 0;
   264f6:	2000      	movs	r0, #0
   264f8:	e7e8      	b.n	264cc <z_arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   264fa:	6869      	ldr	r1, [r5, #4]
   264fc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   26500:	f7ff fe26 	bl	26150 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   26504:	3001      	adds	r0, #1
   26506:	e7e9      	b.n	264dc <z_arm_mpu_init+0x40>
	__ASSERT(
   26508:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
   2650c:	4a07      	ldr	r2, [pc, #28]	; (2652c <z_arm_mpu_init+0x90>)
   2650e:	490e      	ldr	r1, [pc, #56]	; (26548 <z_arm_mpu_init+0xac>)
   26510:	4808      	ldr	r0, [pc, #32]	; (26534 <z_arm_mpu_init+0x98>)
   26512:	f012 fe52 	bl	391ba <printk>
   26516:	480d      	ldr	r0, [pc, #52]	; (2654c <z_arm_mpu_init+0xb0>)
   26518:	f012 fe4f 	bl	391ba <printk>
   2651c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   26520:	4802      	ldr	r0, [pc, #8]	; (2652c <z_arm_mpu_init+0x90>)
   26522:	f013 f8a1 	bl	39668 <assert_post_action>
   26526:	e7e6      	b.n	264f6 <z_arm_mpu_init+0x5a>
   26528:	0003e8c0 	.word	0x0003e8c0
   2652c:	00040015 	.word	0x00040015
   26530:	000422ae 	.word	0x000422ae
   26534:	0003f0e1 	.word	0x0003f0e1
   26538:	000400a7 	.word	0x000400a7
   2653c:	e000ed00 	.word	0xe000ed00
   26540:	0044ffaa 	.word	0x0044ffaa
   26544:	200180f3 	.word	0x200180f3
   26548:	000400db 	.word	0x000400db
   2654c:	0004012c 	.word	0x0004012c

00026550 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   26550:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   26552:	4b0b      	ldr	r3, [pc, #44]	; (26580 <malloc_prepare+0x30>)
   26554:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   26558:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2655c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   26560:	d20c      	bcs.n	2657c <malloc_prepare+0x2c>
   26562:	4908      	ldr	r1, [pc, #32]	; (26584 <malloc_prepare+0x34>)
   26564:	237f      	movs	r3, #127	; 0x7f
   26566:	4a08      	ldr	r2, [pc, #32]	; (26588 <malloc_prepare+0x38>)
   26568:	4808      	ldr	r0, [pc, #32]	; (2658c <malloc_prepare+0x3c>)
   2656a:	f012 fe26 	bl	391ba <printk>
   2656e:	4808      	ldr	r0, [pc, #32]	; (26590 <malloc_prepare+0x40>)
   26570:	f012 fe23 	bl	391ba <printk>
   26574:	217f      	movs	r1, #127	; 0x7f
   26576:	4804      	ldr	r0, [pc, #16]	; (26588 <malloc_prepare+0x38>)
   26578:	f013 f876 	bl	39668 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   2657c:	2000      	movs	r0, #0
   2657e:	bd08      	pop	{r3, pc}
   26580:	2001c8e8 	.word	0x2001c8e8
   26584:	0004017d 	.word	0x0004017d
   26588:	0004014d 	.word	0x0004014d
   2658c:	0003f0e1 	.word	0x0003f0e1
   26590:	000401c4 	.word	0x000401c4

00026594 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   26594:	4b01      	ldr	r3, [pc, #4]	; (2659c <__stdout_hook_install+0x8>)
   26596:	6018      	str	r0, [r3, #0]
}
   26598:	4770      	bx	lr
   2659a:	bf00      	nop
   2659c:	200145e8 	.word	0x200145e8

000265a0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   265a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265a2:	4606      	mov	r6, r0
   265a4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   265a6:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   265a8:	4f06      	ldr	r7, [pc, #24]	; (265c4 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   265aa:	42ac      	cmp	r4, r5
   265ac:	da08      	bge.n	265c0 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   265ae:	683b      	ldr	r3, [r7, #0]
   265b0:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   265b2:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   265b4:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   265b6:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   265ba:	d001      	beq.n	265c0 <z_impl_zephyr_read_stdin+0x20>
   265bc:	280d      	cmp	r0, #13
   265be:	d1f4      	bne.n	265aa <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   265c0:	4620      	mov	r0, r4
   265c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   265c4:	200145e4 	.word	0x200145e4

000265c8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   265c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265ca:	460d      	mov	r5, r1
   265cc:	4f09      	ldr	r7, [pc, #36]	; (265f4 <z_impl_zephyr_write_stdout+0x2c>)
   265ce:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   265d0:	f1c0 0401 	rsb	r4, r0, #1
   265d4:	19a3      	adds	r3, r4, r6
   265d6:	429d      	cmp	r5, r3
   265d8:	dc01      	bgt.n	265de <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   265da:	4628      	mov	r0, r5
   265dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   265de:	7873      	ldrb	r3, [r6, #1]
   265e0:	2b0a      	cmp	r3, #10
   265e2:	d102      	bne.n	265ea <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   265e4:	200d      	movs	r0, #13
   265e6:	683b      	ldr	r3, [r7, #0]
   265e8:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   265ea:	683b      	ldr	r3, [r7, #0]
   265ec:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   265f0:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   265f2:	e7ef      	b.n	265d4 <z_impl_zephyr_write_stdout+0xc>
   265f4:	200145e8 	.word	0x200145e8

000265f8 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   265f8:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   265fa:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   265fc:	4801      	ldr	r0, [pc, #4]	; (26604 <_exit+0xc>)
   265fe:	f7ff ffe3 	bl	265c8 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   26602:	e7fe      	b.n	26602 <_exit+0xa>
   26604:	0004024b 	.word	0x0004024b

00026608 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   26608:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   2660a:	4c07      	ldr	r4, [pc, #28]	; (26628 <_sbrk+0x20>)
   2660c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   2660e:	18c2      	adds	r2, r0, r3
   26610:	4806      	ldr	r0, [pc, #24]	; (2662c <_sbrk+0x24>)
   26612:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   26616:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   2661a:	428a      	cmp	r2, r1
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   2661c:	bf2e      	itee	cs
   2661e:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   26622:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   26624:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   26626:	bd10      	pop	{r4, pc}
   26628:	200178ec 	.word	0x200178ec
   2662c:	2001c8e8 	.word	0x2001c8e8

00026630 <__malloc_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   26630:	f04f 32ff 	mov.w	r2, #4294967295
   26634:	f04f 33ff 	mov.w	r3, #4294967295
   26638:	4801      	ldr	r0, [pc, #4]	; (26640 <__malloc_lock+0x10>)
   2663a:	f00d bf81 	b.w	34540 <z_impl_k_mutex_lock>
   2663e:	bf00      	nop
   26640:	200145d0 	.word	0x200145d0

00026644 <__malloc_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   26644:	4801      	ldr	r0, [pc, #4]	; (2664c <__malloc_unlock+0x8>)
   26646:	f00e b875 	b.w	34734 <z_impl_k_mutex_unlock>
   2664a:	bf00      	nop
   2664c:	200145d0 	.word	0x200145d0

00026650 <board_circuitdojo_feather_nrf9160_init>:

#define GPIO0 DT_LABEL(DT_NODELABEL(gpio0))
#define POWER_LATCH_PIN 31

static int board_circuitdojo_feather_nrf9160_init(const struct device *dev)
{
   26650:	b570      	push	{r4, r5, r6, lr}
   26652:	4814      	ldr	r0, [pc, #80]	; (266a4 <board_circuitdojo_feather_nrf9160_init+0x54>)
   26654:	f00d f912 	bl	3387c <z_impl_device_get_binding>
	ARG_UNUSED(dev);

	/* Get the device binding */
	const struct device *gpio = device_get_binding(GPIO0);
	if (gpio == NULL) {
   26658:	4604      	mov	r4, r0
   2665a:	b300      	cbz	r0, 2669e <board_circuitdojo_feather_nrf9160_init+0x4e>
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2665c:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
   2665e:	6886      	ldr	r6, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   26660:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   26662:	6905      	ldr	r5, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   26664:	2b00      	cmp	r3, #0
   26666:	db0e      	blt.n	26686 <board_circuitdojo_feather_nrf9160_init+0x36>
   26668:	490f      	ldr	r1, [pc, #60]	; (266a8 <board_circuitdojo_feather_nrf9160_init+0x58>)
   2666a:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   2666e:	4a0f      	ldr	r2, [pc, #60]	; (266ac <board_circuitdojo_feather_nrf9160_init+0x5c>)
   26670:	480f      	ldr	r0, [pc, #60]	; (266b0 <board_circuitdojo_feather_nrf9160_init+0x60>)
   26672:	f012 fda2 	bl	391ba <printk>
   26676:	480f      	ldr	r0, [pc, #60]	; (266b4 <board_circuitdojo_feather_nrf9160_init+0x64>)
   26678:	f012 fd9f 	bl	391ba <printk>
   2667c:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   26680:	480a      	ldr	r0, [pc, #40]	; (266ac <board_circuitdojo_feather_nrf9160_init+0x5c>)
   26682:	f012 fff1 	bl	39668 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   26686:	682b      	ldr	r3, [r5, #0]
	}

	return api->pin_configure(port, pin, flags);
   26688:	f44f 6220 	mov.w	r2, #2560	; 0xa00
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2668c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   26690:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   26692:	211f      	movs	r1, #31
   26694:	4620      	mov	r0, r4
   26696:	6833      	ldr	r3, [r6, #0]
   26698:	4798      	blx	r3
	}

	/* Configure latch pin as output. */
	gpio_pin_configure(gpio, POWER_LATCH_PIN, GPIO_OUTPUT_HIGH);

	return 0;
   2669a:	2000      	movs	r0, #0
}
   2669c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2669e:	f06f 0012 	mvn.w	r0, #18
   266a2:	e7fb      	b.n	2669c <board_circuitdojo_feather_nrf9160_init+0x4c>
   266a4:	00040260 	.word	0x00040260
   266a8:	00040291 	.word	0x00040291
   266ac:	00040267 	.word	0x00040267
   266b0:	0003f0e1 	.word	0x0003f0e1
   266b4:	000402cf 	.word	0x000402cf

000266b8 <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
   266b8:	4b08      	ldr	r3, [pc, #32]	; (266dc <registry_find+0x24>)
{
   266ba:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
   266bc:	6859      	ldr	r1, [r3, #4]
   266be:	b111      	cbz	r1, 266c6 <registry_find+0xe>
   266c0:	6819      	ldr	r1, [r3, #0]
   266c2:	4288      	cmp	r0, r1
   266c4:	d007      	beq.n	266d6 <registry_find+0x1e>
   266c6:	68d8      	ldr	r0, [r3, #12]
   266c8:	b130      	cbz	r0, 266d8 <registry_find+0x20>
   266ca:	6899      	ldr	r1, [r3, #8]
		struct registry_entry *ep = &registry[i];
   266cc:	4804      	ldr	r0, [pc, #16]	; (266e0 <registry_find+0x28>)
   266ce:	428a      	cmp	r2, r1
   266d0:	bf18      	it	ne
   266d2:	2000      	movne	r0, #0
   266d4:	4770      	bx	lr
   266d6:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
   266d8:	4770      	bx	lr
   266da:	bf00      	nop
   266dc:	200178f0 	.word	0x200178f0
   266e0:	200178f8 	.word	0x200178f8

000266e4 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   266e4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   266e6:	4804      	ldr	r0, [pc, #16]	; (266f8 <fs_init+0x14>)
   266e8:	f016 fe95 	bl	3d416 <z_impl_k_mutex_init>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   266ec:	4b03      	ldr	r3, [pc, #12]	; (266fc <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   266ee:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   266f0:	e9c3 3300 	strd	r3, r3, [r3]
   266f4:	bd08      	pop	{r3, pc}
   266f6:	bf00      	nop
   266f8:	20017900 	.word	0x20017900
   266fc:	20017914 	.word	0x20017914

00026700 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   26700:	4602      	mov	r2, r0
   26702:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   26704:	4801      	ldr	r0, [pc, #4]	; (2670c <k_mutex_lock.constprop.0.isra.0+0xc>)
   26706:	f00d bf1b 	b.w	34540 <z_impl_k_mutex_lock>
   2670a:	bf00      	nop
   2670c:	20017900 	.word	0x20017900

00026710 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   26710:	4801      	ldr	r0, [pc, #4]	; (26718 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   26712:	f00e b80f 	b.w	34734 <z_impl_k_mutex_unlock>
   26716:	bf00      	nop
   26718:	20017900 	.word	0x20017900

0002671c <fs_register>:
{
   2671c:	b538      	push	{r3, r4, r5, lr}
   2671e:	4604      	mov	r4, r0
   26720:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
   26722:	f04f 30ff 	mov.w	r0, #4294967295
   26726:	f04f 31ff 	mov.w	r1, #4294967295
   2672a:	f7ff ffe9 	bl	26700 <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
   2672e:	4620      	mov	r0, r4
   26730:	f7ff ffc2 	bl	266b8 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   26734:	b108      	cbz	r0, 2673a <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
   26736:	6843      	ldr	r3, [r0, #4]
   26738:	b97b      	cbnz	r3, 2675a <fs_register+0x3e>
		if (ep->fstp == NULL) {
   2673a:	4b0b      	ldr	r3, [pc, #44]	; (26768 <fs_register+0x4c>)
   2673c:	685a      	ldr	r2, [r3, #4]
   2673e:	b112      	cbz	r2, 26746 <fs_register+0x2a>
   26740:	68da      	ldr	r2, [r3, #12]
   26742:	b96a      	cbnz	r2, 26760 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
   26744:	2201      	movs	r2, #1
			ep->type = type;
   26746:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			rv = 0;
   2674a:	2400      	movs	r4, #0
			ep->fstp = fstp;
   2674c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   26750:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
   26752:	f7ff ffdd 	bl	26710 <k_mutex_unlock.constprop.0.isra.0>
}
   26756:	4620      	mov	r0, r4
   26758:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
   2675a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2675e:	e7f8      	b.n	26752 <fs_register+0x36>
	int rv = -ENOSPC;
   26760:	f06f 041b 	mvn.w	r4, #27
   26764:	e7f5      	b.n	26752 <fs_register+0x36>
   26766:	bf00      	nop
   26768:	200178f0 	.word	0x200178f0

0002676c <fs_impl_strip_prefix>:
const char *fs_impl_strip_prefix(const char *path,
				 const struct fs_mount_t *mp)
{
	static const char *const root = "/";

	if ((path == NULL) || (mp == NULL)) {
   2676c:	b138      	cbz	r0, 2677e <fs_impl_strip_prefix+0x12>
   2676e:	b131      	cbz	r1, 2677e <fs_impl_strip_prefix+0x12>
		return path;
	}

	path += mp->mountp_len;
   26770:	698b      	ldr	r3, [r1, #24]
   26772:	4418      	add	r0, r3
	return *path ? path : root;
   26774:	7802      	ldrb	r2, [r0, #0]
   26776:	4b02      	ldr	r3, [pc, #8]	; (26780 <fs_impl_strip_prefix+0x14>)
   26778:	2a00      	cmp	r2, #0
   2677a:	bf08      	it	eq
   2677c:	4618      	moveq	r0, r3
}
   2677e:	4770      	bx	lr
   26780:	000402e1 	.word	0x000402e1

00026784 <littlefs_init>:
	ARG_UNUSED(dev);
	static struct fs_mount_t *partitions[] = {
		DT_INST_FOREACH_STATUS_OKAY(REFERENCE_MOUNT)
	};

	int rc = fs_register(FS_LITTLEFS, &littlefs_fs);
   26784:	2001      	movs	r0, #1
   26786:	4901      	ldr	r1, [pc, #4]	; (2678c <littlefs_init+0x8>)
   26788:	f7ff bfc8 	b.w	2671c <fs_register>
   2678c:	0003e8e8 	.word	0x0003e8e8

00026790 <release_file_data>:
	struct lfs_file_data *fdp = fp->filep;
   26790:	6803      	ldr	r3, [r0, #0]
{
   26792:	b510      	push	{r4, lr}
	if (fdp->config.buffer) {
   26794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
   26796:	4604      	mov	r4, r0
	if (fdp->config.buffer) {
   26798:	b11a      	cbz	r2, 267a2 <release_file_data+0x12>
	k_heap_free(&file_cache_heap, buf);
   2679a:	6e19      	ldr	r1, [r3, #96]	; 0x60
   2679c:	4804      	ldr	r0, [pc, #16]	; (267b0 <release_file_data+0x20>)
   2679e:	f00d fa93 	bl	33cc8 <k_heap_free>
	k_mem_slab_free(&file_data_pool, &fp->filep);
   267a2:	4621      	mov	r1, r4
   267a4:	4803      	ldr	r0, [pc, #12]	; (267b4 <release_file_data+0x24>)
   267a6:	f00d fb89 	bl	33ebc <k_mem_slab_free>
	fp->filep = NULL;
   267aa:	2300      	movs	r3, #0
   267ac:	6023      	str	r3, [r4, #0]
}
   267ae:	bd10      	pop	{r4, pc}
   267b0:	20014a30 	.word	0x20014a30
   267b4:	200149d8 	.word	0x200149d8

000267b8 <lfs_to_errno>:
	if (error >= 0) {
   267b8:	2800      	cmp	r0, #0
   267ba:	da07      	bge.n	267cc <lfs_to_errno+0x14>
	switch (error) {
   267bc:	3054      	adds	r0, #84	; 0x54
   267be:	2852      	cmp	r0, #82	; 0x52
   267c0:	d802      	bhi.n	267c8 <lfs_to_errno+0x10>
   267c2:	4b03      	ldr	r3, [pc, #12]	; (267d0 <lfs_to_errno+0x18>)
   267c4:	5618      	ldrsb	r0, [r3, r0]
   267c6:	4770      	bx	lr
   267c8:	f06f 0004 	mvn.w	r0, #4
}
   267cc:	4770      	bx	lr
   267ce:	bf00      	nop
   267d0:	00040595 	.word	0x00040595

000267d4 <errno_to_lfs>:
	if (error >= 0) {
   267d4:	2800      	cmp	r0, #0
   267d6:	da05      	bge.n	267e4 <errno_to_lfs+0x10>
	switch (error) {
   267d8:	305a      	adds	r0, #90	; 0x5a
   267da:	2858      	cmp	r0, #88	; 0x58
   267dc:	d804      	bhi.n	267e8 <errno_to_lfs+0x14>
   267de:	4b04      	ldr	r3, [pc, #16]	; (267f0 <errno_to_lfs+0x1c>)
   267e0:	5618      	ldrsb	r0, [r3, r0]
   267e2:	4770      	bx	lr
		return LFS_ERR_OK;
   267e4:	2000      	movs	r0, #0
   267e6:	4770      	bx	lr
	switch (error) {
   267e8:	f06f 0004 	mvn.w	r0, #4
}
   267ec:	4770      	bx	lr
   267ee:	bf00      	nop
   267f0:	0004053c 	.word	0x0004053c

000267f4 <littlefs_open>:
	struct fs_littlefs *fs = fp->mp->fs_data;
   267f4:	6843      	ldr	r3, [r0, #4]
{
   267f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct fs_littlefs *fs = fp->mp->fs_data;
   267fa:	691e      	ldr	r6, [r3, #16]
{
   267fc:	4604      	mov	r4, r0
   267fe:	4688      	mov	r8, r1
   26800:	4615      	mov	r5, r2
	int ret = k_mem_slab_alloc(&file_data_pool, &fp->filep, K_NO_WAIT);
   26802:	4601      	mov	r1, r0
   26804:	2200      	movs	r2, #0
   26806:	2300      	movs	r3, #0
   26808:	4823      	ldr	r0, [pc, #140]	; (26898 <littlefs_open+0xa4>)
   2680a:	f00d faeb 	bl	33de4 <k_mem_slab_alloc>
   2680e:	4601      	mov	r1, r0
	if (ret != 0) {
   26810:	2800      	cmp	r0, #0
   26812:	d13e      	bne.n	26892 <littlefs_open+0x9e>
	struct lfs_file_data *fdp = fp->filep;
   26814:	6827      	ldr	r7, [r4, #0]
__ssp_bos_icheck3(memset, void *, int)
   26816:	2264      	movs	r2, #100	; 0x64
   26818:	4638      	mov	r0, r7
   2681a:	f016 ff34 	bl	3d686 <memset>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
   2681e:	f8d6 10d8 	ldr.w	r1, [r6, #216]	; 0xd8
	ret = k_heap_alloc(&file_cache_heap, size, K_NO_WAIT);
   26822:	2200      	movs	r2, #0
   26824:	2300      	movs	r3, #0
   26826:	6a89      	ldr	r1, [r1, #40]	; 0x28
   26828:	481c      	ldr	r0, [pc, #112]	; (2689c <littlefs_open+0xa8>)
   2682a:	f016 fdb2 	bl	3d392 <k_heap_alloc>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
   2682e:	6638      	str	r0, [r7, #96]	; 0x60
	if (fdp->cache_block == NULL) {
   26830:	b360      	cbz	r0, 2688c <littlefs_open+0x98>
	fdp->config.buffer = fdp->cache_block;
   26832:	46b9      	mov	r9, r7
	path = fs_impl_strip_prefix(path, fp->mp);
   26834:	6861      	ldr	r1, [r4, #4]
	fdp->config.buffer = fdp->cache_block;
   26836:	f849 0f54 	str.w	r0, [r9, #84]!
	path = fs_impl_strip_prefix(path, fp->mp);
   2683a:	4640      	mov	r0, r8
   2683c:	f7ff ff96 	bl	2676c <fs_impl_strip_prefix>
   26840:	4680      	mov	r8, r0
	fs_lock(fs);
   26842:	4630      	mov	r0, r6
   26844:	f013 fc86 	bl	3a154 <fs_lock>
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   26848:	0129      	lsls	r1, r5, #4
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   2684a:	01ab      	lsls	r3, r5, #6
   2684c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   26850:	f401 7180 	and.w	r1, r1, #256	; 0x100
   26854:	4319      	orrs	r1, r3
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   26856:	f005 0303 	and.w	r3, r5, #3
	ret = lfs_file_opencfg(&fs->lfs, &fdp->file,
   2685a:	430b      	orrs	r3, r1
   2685c:	4642      	mov	r2, r8
   2685e:	4639      	mov	r1, r7
   26860:	f8cd 9000 	str.w	r9, [sp]
   26864:	f106 0070 	add.w	r0, r6, #112	; 0x70
   26868:	f008 fe36 	bl	2f4d8 <lfs_file_opencfg>
   2686c:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   2686e:	f106 00ec 	add.w	r0, r6, #236	; 0xec
   26872:	f013 fc76 	bl	3a162 <k_mutex_unlock.isra.0>
	if (ret < 0) {
   26876:	2d00      	cmp	r5, #0
   26878:	da02      	bge.n	26880 <littlefs_open+0x8c>
		release_file_data(fp);
   2687a:	4620      	mov	r0, r4
   2687c:	f7ff ff88 	bl	26790 <release_file_data>
	return lfs_to_errno(ret);
   26880:	4628      	mov	r0, r5
}
   26882:	b003      	add	sp, #12
   26884:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return lfs_to_errno(ret);
   26888:	f7ff bf96 	b.w	267b8 <lfs_to_errno>
		ret = -ENOMEM;
   2688c:	f06f 050b 	mvn.w	r5, #11
   26890:	e7f3      	b.n	2687a <littlefs_open+0x86>
}
   26892:	b003      	add	sp, #12
   26894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26898:	200149d8 	.word	0x200149d8
   2689c:	20014a30 	.word	0x20014a30

000268a0 <littlefs_opendir>:
	struct fs_littlefs *fs = dp->mp->fs_data;
   268a0:	6843      	ldr	r3, [r0, #4]
{
   268a2:	b570      	push	{r4, r5, r6, lr}
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
   268a4:	2200      	movs	r2, #0
	struct fs_littlefs *fs = dp->mp->fs_data;
   268a6:	691e      	ldr	r6, [r3, #16]
{
   268a8:	4604      	mov	r4, r0
   268aa:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
   268ac:	2300      	movs	r3, #0
   268ae:	4601      	mov	r1, r0
   268b0:	4814      	ldr	r0, [pc, #80]	; (26904 <littlefs_opendir+0x64>)
   268b2:	f00d fa97 	bl	33de4 <k_mem_slab_alloc>
   268b6:	4601      	mov	r1, r0
   268b8:	bb08      	cbnz	r0, 268fe <littlefs_opendir+0x5e>
   268ba:	2234      	movs	r2, #52	; 0x34
   268bc:	6820      	ldr	r0, [r4, #0]
   268be:	f016 fee2 	bl	3d686 <memset>
	path = fs_impl_strip_prefix(path, dp->mp);
   268c2:	6861      	ldr	r1, [r4, #4]
   268c4:	4628      	mov	r0, r5
   268c6:	f7ff ff51 	bl	2676c <fs_impl_strip_prefix>
   268ca:	4605      	mov	r5, r0
	fs_lock(fs);
   268cc:	4630      	mov	r0, r6
   268ce:	f013 fc41 	bl	3a154 <fs_lock>
	int ret = lfs_dir_open(&fs->lfs, dp->dirp, path);
   268d2:	462a      	mov	r2, r5
   268d4:	6821      	ldr	r1, [r4, #0]
   268d6:	f106 0070 	add.w	r0, r6, #112	; 0x70
   268da:	f007 f913 	bl	2db04 <lfs_dir_open>
   268de:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   268e0:	f106 00ec 	add.w	r0, r6, #236	; 0xec
   268e4:	f013 fc3d 	bl	3a162 <k_mutex_unlock.isra.0>
	if (ret < 0) {
   268e8:	2d00      	cmp	r5, #0
   268ea:	da03      	bge.n	268f4 <littlefs_opendir+0x54>
		k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   268ec:	4621      	mov	r1, r4
   268ee:	4805      	ldr	r0, [pc, #20]	; (26904 <littlefs_opendir+0x64>)
   268f0:	f00d fae4 	bl	33ebc <k_mem_slab_free>
	return lfs_to_errno(ret);
   268f4:	4628      	mov	r0, r5
}
   268f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   268fa:	f7ff bf5d 	b.w	267b8 <lfs_to_errno>
}
   268fe:	f06f 000b 	mvn.w	r0, #11
   26902:	bd70      	pop	{r4, r5, r6, pc}
   26904:	200149f8 	.word	0x200149f8

00026908 <littlefs_closedir>:
{
   26908:	b570      	push	{r4, r5, r6, lr}
   2690a:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   2690c:	6843      	ldr	r3, [r0, #4]
   2690e:	691e      	ldr	r6, [r3, #16]
	fs_lock(fs);
   26910:	4630      	mov	r0, r6
   26912:	f013 fc1f 	bl	3a154 <fs_lock>
	int ret = lfs_dir_close(&fs->lfs, dp->dirp);
   26916:	6821      	ldr	r1, [r4, #0]
   26918:	f106 0070 	add.w	r0, r6, #112	; 0x70
   2691c:	f015 fa47 	bl	3bdae <lfs_dir_close>
   26920:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   26922:	f106 00ec 	add.w	r0, r6, #236	; 0xec
   26926:	f013 fc1c 	bl	3a162 <k_mutex_unlock.isra.0>
	k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   2692a:	4621      	mov	r1, r4
   2692c:	4803      	ldr	r0, [pc, #12]	; (2693c <littlefs_closedir+0x34>)
   2692e:	f00d fac5 	bl	33ebc <k_mem_slab_free>
	return lfs_to_errno(ret);
   26932:	4628      	mov	r0, r5
}
   26934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   26938:	f7ff bf3e 	b.w	267b8 <lfs_to_errno>
   2693c:	200149f8 	.word	0x200149f8

00026940 <littlefs_unmount>:
{
   26940:	b570      	push	{r4, r5, r6, lr}
	fs->area = NULL;
   26942:	2600      	movs	r6, #0
{
   26944:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
   26946:	6904      	ldr	r4, [r0, #16]
	fs_lock(fs);
   26948:	4620      	mov	r0, r4
   2694a:	f013 fc03 	bl	3a154 <fs_lock>
	lfs_unmount(&fs->lfs);
   2694e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   26952:	f015 fa4e 	bl	3bdf2 <lfs_unmount>
	flash_area_close(fs->area);
   26956:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   2695a:	f013 fa55 	bl	39e08 <flash_area_close>
	fs->area = NULL;
   2695e:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
	k_mutex_unlock(&fs->mutex);
   26962:	f104 00ec 	add.w	r0, r4, #236	; 0xec
   26966:	f013 fbfc 	bl	3a162 <k_mutex_unlock.isra.0>
   2696a:	4c08      	ldr	r4, [pc, #32]	; (2698c <littlefs_unmount+0x4c>)
   2696c:	4b08      	ldr	r3, [pc, #32]	; (26990 <littlefs_unmount+0x50>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   2696e:	68e8      	ldr	r0, [r5, #12]
   26970:	1ae4      	subs	r4, r4, r3
   26972:	f7fd fa71 	bl	23e58 <z_log_strdup>
   26976:	08e4      	lsrs	r4, r4, #3
	LOG_INF("%s unmounted", log_strdup(mountp->mnt_point));
   26978:	01a4      	lsls	r4, r4, #6
   2697a:	f044 0403 	orr.w	r4, r4, #3
   2697e:	4601      	mov	r1, r0
   26980:	4622      	mov	r2, r4
   26982:	4804      	ldr	r0, [pc, #16]	; (26994 <littlefs_unmount+0x54>)
   26984:	f012 fec6 	bl	39714 <log_1>
}
   26988:	4630      	mov	r0, r6
   2698a:	bd70      	pop	{r4, r5, r6, pc}
   2698c:	0003e4f0 	.word	0x0003e4f0
   26990:	0003e468 	.word	0x0003e468
   26994:	000402e3 	.word	0x000402e3

00026998 <littlefs_mount>:
{
   26998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int area_id = (uintptr_t)mountp->storage_dev;
   2699c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   269a0:	4aaa      	ldr	r2, [pc, #680]	; (26c4c <littlefs_mount+0x2b4>)
   269a2:	4bab      	ldr	r3, [pc, #684]	; (26c50 <littlefs_mount+0x2b8>)
{
   269a4:	b08b      	sub	sp, #44	; 0x2c
   269a6:	1a9b      	subs	r3, r3, r2
   269a8:	08db      	lsrs	r3, r3, #3
   269aa:	9301      	str	r3, [sp, #4]
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
   269ac:	019e      	lsls	r6, r3, #6
   269ae:	4ba9      	ldr	r3, [pc, #676]	; (26c54 <littlefs_mount+0x2bc>)
   269b0:	af05      	add	r7, sp, #20
{
   269b2:	4681      	mov	r9, r0
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
   269b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   269b6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   269ba:	f046 0303 	orr.w	r3, r6, #3
   269be:	2204      	movs	r2, #4
   269c0:	4639      	mov	r1, r7
   269c2:	48a5      	ldr	r0, [pc, #660]	; (26c58 <littlefs_mount+0x2c0>)
   269c4:	f012 feef 	bl	397a6 <log_n>
	if (fs->area) {
   269c8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   269cc:	2b00      	cmp	r3, #0
   269ce:	f040 8139 	bne.w	26c44 <littlefs_mount+0x2ac>
	k_mutex_init(&fs->mutex);
   269d2:	f104 03ec 	add.w	r3, r4, #236	; 0xec
   269d6:	9303      	str	r3, [sp, #12]
	return z_impl_k_mutex_init(mutex);
   269d8:	4618      	mov	r0, r3
   269da:	f016 fd1c 	bl	3d416 <z_impl_k_mutex_init>
	fs_lock(fs);
   269de:	4620      	mov	r0, r4
   269e0:	f013 fbb8 	bl	3a154 <fs_lock>
	ret = flash_area_open(area_id, &fs->area);
   269e4:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
   269e8:	b2e8      	uxtb	r0, r5
   269ea:	f7fe fa97 	bl	24f1c <flash_area_open>
	if ((ret < 0) || (fs->area == NULL)) {
   269ee:	2800      	cmp	r0, #0
   269f0:	db02      	blt.n	269f8 <littlefs_mount+0x60>
   269f2:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   269f6:	b958      	cbnz	r0, 26a10 <littlefs_mount+0x78>
		LOG_ERR("can't open flash area %d", area_id);
   269f8:	4629      	mov	r1, r5
   269fa:	4898      	ldr	r0, [pc, #608]	; (26c5c <littlefs_mount+0x2c4>)
   269fc:	f046 0201 	orr.w	r2, r6, #1
   26a00:	f012 fe88 	bl	39714 <log_1>
		ret = -ENODEV;
   26a04:	f06f 0512 	mvn.w	r5, #18
		fs->area = NULL;
   26a08:	2300      	movs	r3, #0
   26a0a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
   26a0e:	e0f0      	b.n	26bf2 <littlefs_mount+0x25a>
	dev = flash_area_get_device(fs->area);
   26a10:	f013 fa79 	bl	39f06 <flash_area_get_device>
	if (dev == NULL) {
   26a14:	4603      	mov	r3, r0
   26a16:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
   26a1a:	b943      	cbnz	r3, 26a2e <littlefs_mount+0x96>
   26a1c:	68c0      	ldr	r0, [r0, #12]
   26a1e:	f7fd fa1b 	bl	23e58 <z_log_strdup>
		LOG_ERR("can't get flash device: %s", log_strdup(fs->area->fa_dev_name));
   26a22:	f046 0601 	orr.w	r6, r6, #1
   26a26:	4601      	mov	r1, r0
   26a28:	4632      	mov	r2, r6
   26a2a:	488d      	ldr	r0, [pc, #564]	; (26c60 <littlefs_mount+0x2c8>)
   26a2c:	e7e8      	b.n	26a00 <littlefs_mount+0x68>
	lfs_size_t read_size = lcp->read_size;
   26a2e:	f8d4 b014 	ldr.w	fp, [r4, #20]
	lfs_size_t prog_size = lcp->prog_size;
   26a32:	f8d4 8018 	ldr.w	r8, [r4, #24]
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
   26a36:	f1bb 0f00 	cmp.w	fp, #0
	lfs_size_t block_size = lcp->block_size;
   26a3a:	69e5      	ldr	r5, [r4, #28]
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
   26a3c:	bf08      	it	eq
   26a3e:	f04f 0b10 	moveq.w	fp, #16
		prog_size = CONFIG_FS_LITTLEFS_PROG_SIZE;
   26a42:	f1b8 0f00 	cmp.w	r8, #0
   26a46:	bf08      	it	eq
   26a48:	f04f 0810 	moveq.w	r8, #16
	if (block_size == 0) {
   26a4c:	b9d5      	cbnz	r5, 26a84 <littlefs_mount+0xec>
   26a4e:	9300      	str	r3, [sp, #0]
	struct get_page_ctx ctx = {
   26a50:	e9cd 0505 	strd	r0, r5, [sp, #20]
	const struct device *dev = flash_area_get_device(fa);
   26a54:	f013 fa57 	bl	39f06 <flash_area_get_device>
	flash_page_foreach(dev, get_page_cb, &ctx);
   26a58:	463a      	mov	r2, r7
   26a5a:	4982      	ldr	r1, [pc, #520]	; (26c64 <littlefs_mount+0x2cc>)
   26a5c:	f013 ff60 	bl	3a920 <flash_page_foreach>
	return ctx.max_size;
   26a60:	9d06      	ldr	r5, [sp, #24]
	if (block_size == 0) {
   26a62:	9b00      	ldr	r3, [sp, #0]
   26a64:	b975      	cbnz	r5, 26a84 <littlefs_mount+0xec>
		__ASSERT_NO_MSG(block_size != 0);
   26a66:	f240 2376 	movw	r3, #630	; 0x276
   26a6a:	4a7f      	ldr	r2, [pc, #508]	; (26c68 <littlefs_mount+0x2d0>)
   26a6c:	497f      	ldr	r1, [pc, #508]	; (26c6c <littlefs_mount+0x2d4>)
   26a6e:	4880      	ldr	r0, [pc, #512]	; (26c70 <littlefs_mount+0x2d8>)
   26a70:	f012 fba3 	bl	391ba <printk>
   26a74:	f240 2176 	movw	r1, #630	; 0x276
   26a78:	487b      	ldr	r0, [pc, #492]	; (26c68 <littlefs_mount+0x2d0>)
   26a7a:	f012 fdf5 	bl	39668 <assert_post_action>
		ret = -EINVAL;
   26a7e:	f06f 0515 	mvn.w	r5, #21
   26a82:	e7c1      	b.n	26a08 <littlefs_mount+0x70>
	int32_t block_cycles = lcp->block_cycles;
   26a84:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
	if (block_cycles == 0) {
   26a88:	f1ba 0f00 	cmp.w	sl, #0
   26a8c:	f000 80b8 	beq.w	26c00 <littlefs_mount+0x268>
	if (block_cycles <= 0) {
   26a90:	dc01      	bgt.n	26a96 <littlefs_mount+0xfe>
		block_cycles = -1;
   26a92:	f04f 3aff 	mov.w	sl, #4294967295
	lfs_size_t cache_size = lcp->cache_size;
   26a96:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	lfs_size_t lookahead_size = lcp->lookahead_size;
   26a98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		cache_size = CONFIG_FS_LITTLEFS_CACHE_SIZE;
   26a9a:	2f00      	cmp	r7, #0
   26a9c:	bf08      	it	eq
   26a9e:	2740      	moveq	r7, #64	; 0x40
		lookahead_size = CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE;
   26aa0:	2a00      	cmp	r2, #0
   26aa2:	bf08      	it	eq
   26aa4:	2220      	moveq	r2, #32
   26aa6:	9200      	str	r2, [sp, #0]
	lfs_size_t block_count = fs->area->fa_size / block_size;
   26aa8:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
   26aac:	6818      	ldr	r0, [r3, #0]
   26aae:	6892      	ldr	r2, [r2, #8]
	LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
   26ab0:	f046 0603 	orr.w	r6, r6, #3
	lfs_size_t block_count = fs->area->fa_size / block_size;
   26ab4:	fbb2 f2f5 	udiv	r2, r2, r5
   26ab8:	9202      	str	r2, [sp, #8]
   26aba:	f7fd f9cd 	bl	23e58 <z_log_strdup>
	LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
   26abe:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   26ac2:	9005      	str	r0, [sp, #20]
   26ac4:	685b      	ldr	r3, [r3, #4]
   26ac6:	2205      	movs	r2, #5
   26ac8:	9306      	str	r3, [sp, #24]
   26aca:	9b02      	ldr	r3, [sp, #8]
   26acc:	4869      	ldr	r0, [pc, #420]	; (26c74 <littlefs_mount+0x2dc>)
   26ace:	e9cd 3507 	strd	r3, r5, [sp, #28]
   26ad2:	a905      	add	r1, sp, #20
   26ad4:	4633      	mov	r3, r6
   26ad6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   26ada:	f012 fe64 	bl	397a6 <log_n>
	LOG_INF("sizes: rd %u ; pr %u ; ca %u ; la %u",
   26ade:	9b00      	ldr	r3, [sp, #0]
   26ae0:	2204      	movs	r2, #4
   26ae2:	9308      	str	r3, [sp, #32]
   26ae4:	4864      	ldr	r0, [pc, #400]	; (26c78 <littlefs_mount+0x2e0>)
   26ae6:	4633      	mov	r3, r6
   26ae8:	a905      	add	r1, sp, #20
   26aea:	e9cd b805 	strd	fp, r8, [sp, #20]
   26aee:	9707      	str	r7, [sp, #28]
   26af0:	f012 fe59 	bl	397a6 <log_n>
	__ASSERT((fs->area->fa_size % block_size) == 0,
   26af4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   26af8:	689b      	ldr	r3, [r3, #8]
   26afa:	fbb3 f2f5 	udiv	r2, r3, r5
   26afe:	fb05 3312 	mls	r3, r5, r2, r3
   26b02:	b173      	cbz	r3, 26b22 <littlefs_mount+0x18a>
   26b04:	495d      	ldr	r1, [pc, #372]	; (26c7c <littlefs_mount+0x2e4>)
   26b06:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   26b0a:	4a57      	ldr	r2, [pc, #348]	; (26c68 <littlefs_mount+0x2d0>)
   26b0c:	4858      	ldr	r0, [pc, #352]	; (26c70 <littlefs_mount+0x2d8>)
   26b0e:	f012 fb54 	bl	391ba <printk>
   26b12:	485b      	ldr	r0, [pc, #364]	; (26c80 <littlefs_mount+0x2e8>)
   26b14:	f012 fb51 	bl	391ba <printk>
   26b18:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   26b1c:	4852      	ldr	r0, [pc, #328]	; (26c68 <littlefs_mount+0x2d0>)
   26b1e:	f012 fda3 	bl	39668 <assert_post_action>
	__ASSERT((block_size % prog_size) == 0,
   26b22:	fbb5 f3f8 	udiv	r3, r5, r8
   26b26:	fb08 5313 	mls	r3, r8, r3, r5
   26b2a:	b173      	cbz	r3, 26b4a <littlefs_mount+0x1b2>
   26b2c:	4955      	ldr	r1, [pc, #340]	; (26c84 <littlefs_mount+0x2ec>)
   26b2e:	f240 23a2 	movw	r3, #674	; 0x2a2
   26b32:	4a4d      	ldr	r2, [pc, #308]	; (26c68 <littlefs_mount+0x2d0>)
   26b34:	484e      	ldr	r0, [pc, #312]	; (26c70 <littlefs_mount+0x2d8>)
   26b36:	f012 fb40 	bl	391ba <printk>
   26b3a:	4853      	ldr	r0, [pc, #332]	; (26c88 <littlefs_mount+0x2f0>)
   26b3c:	f012 fb3d 	bl	391ba <printk>
   26b40:	f240 21a2 	movw	r1, #674	; 0x2a2
   26b44:	4848      	ldr	r0, [pc, #288]	; (26c68 <littlefs_mount+0x2d0>)
   26b46:	f012 fd8f 	bl	39668 <assert_post_action>
	__ASSERT((block_size % cache_size) == 0,
   26b4a:	fbb5 f3f7 	udiv	r3, r5, r7
   26b4e:	fb07 5313 	mls	r3, r7, r3, r5
   26b52:	b173      	cbz	r3, 26b72 <littlefs_mount+0x1da>
   26b54:	494d      	ldr	r1, [pc, #308]	; (26c8c <littlefs_mount+0x2f4>)
   26b56:	f44f 7329 	mov.w	r3, #676	; 0x2a4
   26b5a:	4a43      	ldr	r2, [pc, #268]	; (26c68 <littlefs_mount+0x2d0>)
   26b5c:	4844      	ldr	r0, [pc, #272]	; (26c70 <littlefs_mount+0x2d8>)
   26b5e:	f012 fb2c 	bl	391ba <printk>
   26b62:	484b      	ldr	r0, [pc, #300]	; (26c90 <littlefs_mount+0x2f8>)
   26b64:	f012 fb29 	bl	391ba <printk>
   26b68:	f44f 7129 	mov.w	r1, #676	; 0x2a4
   26b6c:	483e      	ldr	r0, [pc, #248]	; (26c68 <littlefs_mount+0x2d0>)
   26b6e:	f012 fd7b 	bl	39668 <assert_post_action>
	lcp->context = (void *)fs->area;
   26b72:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	lcp->cache_size = cache_size;
   26b76:	62a7      	str	r7, [r4, #40]	; 0x28
	lcp->context = (void *)fs->area;
   26b78:	6023      	str	r3, [r4, #0]
	lcp->read = lfs_api_read;
   26b7a:	4b46      	ldr	r3, [pc, #280]	; (26c94 <littlefs_mount+0x2fc>)
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   26b7c:	f104 0770 	add.w	r7, r4, #112	; 0x70
	lcp->read = lfs_api_read;
   26b80:	6063      	str	r3, [r4, #4]
	lcp->prog = lfs_api_prog;
   26b82:	4b45      	ldr	r3, [pc, #276]	; (26c98 <littlefs_mount+0x300>)
	lcp->block_size = block_size;
   26b84:	e9c4 8506 	strd	r8, r5, [r4, #24]
	lcp->prog = lfs_api_prog;
   26b88:	60a3      	str	r3, [r4, #8]
	lcp->erase = lfs_api_erase;
   26b8a:	4b44      	ldr	r3, [pc, #272]	; (26c9c <littlefs_mount+0x304>)
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   26b8c:	4621      	mov	r1, r4
	lcp->erase = lfs_api_erase;
   26b8e:	60e3      	str	r3, [r4, #12]
	lcp->sync = lfs_api_sync;
   26b90:	4b43      	ldr	r3, [pc, #268]	; (26ca0 <littlefs_mount+0x308>)
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   26b92:	4638      	mov	r0, r7
	lcp->read_size = read_size;
   26b94:	e9c4 3b04 	strd	r3, fp, [r4, #16]
	lcp->block_count = block_count;
   26b98:	9b02      	ldr	r3, [sp, #8]
	lcp->block_cycles = block_cycles;
   26b9a:	e9c4 3a08 	strd	r3, sl, [r4, #32]
	lcp->lookahead_size = lookahead_size;
   26b9e:	9b00      	ldr	r3, [sp, #0]
   26ba0:	62e3      	str	r3, [r4, #44]	; 0x2c
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   26ba2:	f007 f87b 	bl	2dc9c <lfs_mount>
	if (ret < 0 &&
   26ba6:	9b01      	ldr	r3, [sp, #4]
   26ba8:	1e05      	subs	r5, r0, #0
   26baa:	ea4f 1683 	mov.w	r6, r3, lsl #6
   26bae:	da3d      	bge.n	26c2c <littlefs_mount+0x294>
   26bb0:	f899 3020 	ldrb.w	r3, [r9, #32]
   26bb4:	07da      	lsls	r2, r3, #31
   26bb6:	d439      	bmi.n	26c2c <littlefs_mount+0x294>
		LOG_WRN("can't mount (LFS %d); formatting", ret);
   26bb8:	4629      	mov	r1, r5
   26bba:	483a      	ldr	r0, [pc, #232]	; (26ca4 <littlefs_mount+0x30c>)
   26bbc:	f046 0202 	orr.w	r2, r6, #2
   26bc0:	f012 fda8 	bl	39714 <log_1>
		if ((mountp->flags & FS_MOUNT_FLAG_READ_ONLY) == 0) {
   26bc4:	f899 3020 	ldrb.w	r3, [r9, #32]
   26bc8:	079b      	lsls	r3, r3, #30
   26bca:	d41c      	bmi.n	26c06 <littlefs_mount+0x26e>
			ret = lfs_format(&fs->lfs, &fs->cfg);
   26bcc:	4621      	mov	r1, r4
   26bce:	4638      	mov	r0, r7
   26bd0:	f008 ff2a 	bl	2fa28 <lfs_format>
			if (ret < 0) {
   26bd4:	1e05      	subs	r5, r0, #0
   26bd6:	da1e      	bge.n	26c16 <littlefs_mount+0x27e>
				LOG_ERR("format failed (LFS %d)", ret);
   26bd8:	4629      	mov	r1, r5
   26bda:	4833      	ldr	r0, [pc, #204]	; (26ca8 <littlefs_mount+0x310>)
   26bdc:	f046 0201 	orr.w	r2, r6, #1
			LOG_ERR("remount after format failed (LFS %d)", ret);
   26be0:	f012 fd98 	bl	39714 <log_1>
			ret = lfs_to_errno(ret);
   26be4:	4628      	mov	r0, r5
   26be6:	f7ff fde7 	bl	267b8 <lfs_to_errno>
   26bea:	4605      	mov	r5, r0
	if (ret < 0) {
   26bec:	2d00      	cmp	r5, #0
   26bee:	f6ff af0b 	blt.w	26a08 <littlefs_mount+0x70>
	k_mutex_unlock(&fs->mutex);
   26bf2:	9803      	ldr	r0, [sp, #12]
   26bf4:	f013 fab5 	bl	3a162 <k_mutex_unlock.isra.0>
}
   26bf8:	4628      	mov	r0, r5
   26bfa:	b00b      	add	sp, #44	; 0x2c
   26bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		block_cycles = CONFIG_FS_LITTLEFS_BLOCK_CYCLES;
   26c00:	f44f 7a00 	mov.w	sl, #512	; 0x200
   26c04:	e747      	b.n	26a96 <littlefs_mount+0xfe>
			LOG_ERR("can not format read-only system");
   26c06:	4829      	ldr	r0, [pc, #164]	; (26cac <littlefs_mount+0x314>)
   26c08:	f046 0101 	orr.w	r1, r6, #1
   26c0c:	f012 fd75 	bl	396fa <log_0>
			ret = -EROFS;
   26c10:	f06f 051d 	mvn.w	r5, #29
   26c14:	e6f8      	b.n	26a08 <littlefs_mount+0x70>
		ret = lfs_mount(&fs->lfs, &fs->cfg);
   26c16:	4621      	mov	r1, r4
   26c18:	4638      	mov	r0, r7
   26c1a:	f007 f83f 	bl	2dc9c <lfs_mount>
		if (ret < 0) {
   26c1e:	1e05      	subs	r5, r0, #0
   26c20:	da04      	bge.n	26c2c <littlefs_mount+0x294>
			LOG_ERR("remount after format failed (LFS %d)", ret);
   26c22:	4629      	mov	r1, r5
   26c24:	4822      	ldr	r0, [pc, #136]	; (26cb0 <littlefs_mount+0x318>)
   26c26:	f046 0201 	orr.w	r2, r6, #1
   26c2a:	e7d9      	b.n	26be0 <littlefs_mount+0x248>
   26c2c:	f8d9 000c 	ldr.w	r0, [r9, #12]
   26c30:	f7fd f912 	bl	23e58 <z_log_strdup>
	LOG_INF("%s mounted", log_strdup(mountp->mnt_point));
   26c34:	f046 0603 	orr.w	r6, r6, #3
   26c38:	4601      	mov	r1, r0
   26c3a:	4632      	mov	r2, r6
   26c3c:	481d      	ldr	r0, [pc, #116]	; (26cb4 <littlefs_mount+0x31c>)
   26c3e:	f012 fd69 	bl	39714 <log_1>
   26c42:	e7d3      	b.n	26bec <littlefs_mount+0x254>
		return -EBUSY;
   26c44:	f06f 050f 	mvn.w	r5, #15
   26c48:	e7d6      	b.n	26bf8 <littlefs_mount+0x260>
   26c4a:	bf00      	nop
   26c4c:	0003e468 	.word	0x0003e468
   26c50:	0003e4f0 	.word	0x0003e4f0
   26c54:	0003e610 	.word	0x0003e610
   26c58:	000402f0 	.word	0x000402f0
   26c5c:	0004031b 	.word	0x0004031b
   26c60:	00040334 	.word	0x00040334
   26c64:	0003a0b3 	.word	0x0003a0b3
   26c68:	0004034f 	.word	0x0004034f
   26c6c:	0004037a 	.word	0x0004037a
   26c70:	0003f0e1 	.word	0x0003f0e1
   26c74:	0004038a 	.word	0x0004038a
   26c78:	000403bd 	.word	0x000403bd
   26c7c:	000403e2 	.word	0x000403e2
   26c80:	00040408 	.word	0x00040408
   26c84:	00040438 	.word	0x00040438
   26c88:	00040456 	.word	0x00040456
   26c8c:	00040482 	.word	0x00040482
   26c90:	000404a1 	.word	0x000404a1
   26c94:	0003a10f 	.word	0x0003a10f
   26c98:	0003a0f3 	.word	0x0003a0f3
   26c9c:	0003a0df 	.word	0x0003a0df
   26ca0:	0003a0af 	.word	0x0003a0af
   26ca4:	000404cb 	.word	0x000404cb
   26ca8:	0004051a 	.word	0x0004051a
   26cac:	000404ec 	.word	0x000404ec
   26cb0:	0004050c 	.word	0x0004050c
   26cb4:	00040531 	.word	0x00040531

00026cb8 <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   26cb8:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   26cba:	4604      	mov	r4, r0
   26cbc:	b970      	cbnz	r0, 26cdc <net_if_flag_set.constprop.0+0x24>
   26cbe:	490d      	ldr	r1, [pc, #52]	; (26cf4 <net_if_flag_set.constprop.0+0x3c>)
   26cc0:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   26cc4:	4a0c      	ldr	r2, [pc, #48]	; (26cf8 <net_if_flag_set.constprop.0+0x40>)
   26cc6:	480d      	ldr	r0, [pc, #52]	; (26cfc <net_if_flag_set.constprop.0+0x44>)
   26cc8:	f012 fa77 	bl	391ba <printk>
   26ccc:	480c      	ldr	r0, [pc, #48]	; (26d00 <net_if_flag_set.constprop.0+0x48>)
   26cce:	f012 fa74 	bl	391ba <printk>
   26cd2:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   26cd6:	4808      	ldr	r0, [pc, #32]	; (26cf8 <net_if_flag_set.constprop.0+0x40>)
   26cd8:	f012 fcc6 	bl	39668 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26cdc:	6823      	ldr	r3, [r4, #0]
   26cde:	330c      	adds	r3, #12
   26ce0:	e8d3 1fef 	ldaex	r1, [r3]
   26ce4:	f041 0101 	orr.w	r1, r1, #1
   26ce8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26cec:	2a00      	cmp	r2, #0
   26cee:	d1f7      	bne.n	26ce0 <net_if_flag_set.constprop.0+0x28>

	atomic_set_bit(iface->if_dev->flags, value);
}
   26cf0:	bd10      	pop	{r4, pc}
   26cf2:	bf00      	nop
   26cf4:	00040621 	.word	0x00040621
   26cf8:	000405f9 	.word	0x000405f9
   26cfc:	0003f0e1 	.word	0x0003f0e1
   26d00:	0003f6c8 	.word	0x0003f6c8

00026d04 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   26d04:	4602      	mov	r2, r0
   26d06:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   26d08:	4801      	ldr	r0, [pc, #4]	; (26d10 <k_mutex_lock.constprop.0.isra.0+0xc>)
   26d0a:	f00d bc19 	b.w	34540 <z_impl_k_mutex_lock>
   26d0e:	bf00      	nop
   26d10:	20014ad8 	.word	0x20014ad8

00026d14 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   26d14:	4801      	ldr	r0, [pc, #4]	; (26d1c <k_mutex_unlock.constprop.0.isra.0+0x8>)
   26d16:	f00d bd0d 	b.w	34734 <z_impl_k_mutex_unlock>
   26d1a:	bf00      	nop
   26d1c:	20014ad8 	.word	0x20014ad8

00026d20 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   26d20:	b538      	push	{r3, r4, r5, lr}
   26d22:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   26d24:	f04f 31ff 	mov.w	r1, #4294967295
   26d28:	f04f 30ff 	mov.w	r0, #4294967295
   26d2c:	f7ff ffea 	bl	26d04 <k_mutex_lock.constprop.0.isra.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   26d30:	2100      	movs	r1, #0
   26d32:	4628      	mov	r0, r5
   26d34:	f013 fb91 	bl	3a45a <net_if_flag_is_set>
   26d38:	4604      	mov	r4, r0
   26d3a:	bb68      	cbnz	r0, 26d98 <net_if_up+0x78>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   26d3c:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   26d3e:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   26d40:	7e9b      	ldrb	r3, [r3, #26]
   26d42:	b12b      	cbz	r3, 26d50 <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   26d44:	f7ff ffb8 	bl	26cb8 <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   26d48:	f7ff ffe4 	bl	26d14 <k_mutex_unlock.constprop.0.isra.0>

	return status;
}
   26d4c:	4620      	mov	r0, r4
   26d4e:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   26d50:	f013 fb7e 	bl	3a450 <net_if_l2>
   26d54:	4604      	mov	r4, r0
   26d56:	b130      	cbz	r0, 26d66 <net_if_up+0x46>
   26d58:	6884      	ldr	r4, [r0, #8]
   26d5a:	b124      	cbz	r4, 26d66 <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   26d5c:	2101      	movs	r1, #1
   26d5e:	4628      	mov	r0, r5
   26d60:	47a0      	blx	r4
	if (status < 0) {
   26d62:	1e04      	subs	r4, r0, #0
   26d64:	dbf0      	blt.n	26d48 <net_if_up+0x28>
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   26d66:	682b      	ldr	r3, [r5, #0]
   26d68:	691b      	ldr	r3, [r3, #16]
   26d6a:	b973      	cbnz	r3, 26d8a <net_if_up+0x6a>
   26d6c:	490c      	ldr	r1, [pc, #48]	; (26da0 <net_if_up+0x80>)
   26d6e:	f640 7399 	movw	r3, #3993	; 0xf99
   26d72:	4a0c      	ldr	r2, [pc, #48]	; (26da4 <net_if_up+0x84>)
   26d74:	480c      	ldr	r0, [pc, #48]	; (26da8 <net_if_up+0x88>)
   26d76:	f012 fa20 	bl	391ba <printk>
   26d7a:	480c      	ldr	r0, [pc, #48]	; (26dac <net_if_up+0x8c>)
   26d7c:	f012 fa1d 	bl	391ba <printk>
   26d80:	f640 7199 	movw	r1, #3993	; 0xf99
   26d84:	4807      	ldr	r0, [pc, #28]	; (26da4 <net_if_up+0x84>)
   26d86:	f012 fc6f 	bl	39668 <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   26d8a:	4628      	mov	r0, r5
   26d8c:	f7ff ff94 	bl	26cb8 <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   26d90:	4628      	mov	r0, r5
   26d92:	f013 fb6b 	bl	3a46c <l2_flags_get.isra.0>
notify:
   26d96:	e7d7      	b.n	26d48 <net_if_up+0x28>
		status = -EALREADY;
   26d98:	f06f 0477 	mvn.w	r4, #119	; 0x77
   26d9c:	e7d4      	b.n	26d48 <net_if_up+0x28>
   26d9e:	bf00      	nop
   26da0:	0004066b 	.word	0x0004066b
   26da4:	00040627 	.word	0x00040627
   26da8:	0003f0e1 	.word	0x0003f0e1
   26dac:	0003f6c8 	.word	0x0003f6c8

00026db0 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   26db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   26db2:	f04f 30ff 	mov.w	r0, #4294967295
   26db6:	f04f 31ff 	mov.w	r1, #4294967295
   26dba:	f7ff ffa3 	bl	26d04 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   26dbe:	4c13      	ldr	r4, [pc, #76]	; (26e0c <net_if_init+0x5c>)
   26dc0:	4d13      	ldr	r5, [pc, #76]	; (26e10 <net_if_init+0x60>)
   26dc2:	4f14      	ldr	r7, [pc, #80]	; (26e14 <net_if_init+0x64>)
   26dc4:	42ac      	cmp	r4, r5
   26dc6:	4626      	mov	r6, r4
   26dc8:	d90e      	bls.n	26de8 <net_if_init+0x38>
   26dca:	4913      	ldr	r1, [pc, #76]	; (26e18 <net_if_init+0x68>)
   26dcc:	f241 03b2 	movw	r3, #4274	; 0x10b2
   26dd0:	463a      	mov	r2, r7
   26dd2:	4812      	ldr	r0, [pc, #72]	; (26e1c <net_if_init+0x6c>)
   26dd4:	f012 f9f1 	bl	391ba <printk>
   26dd8:	4811      	ldr	r0, [pc, #68]	; (26e20 <net_if_init+0x70>)
   26dda:	f012 f9ee 	bl	391ba <printk>
   26dde:	f241 01b2 	movw	r1, #4274	; 0x10b2
   26de2:	4638      	mov	r0, r7
   26de4:	f012 fc40 	bl	39668 <assert_post_action>
   26de8:	42ac      	cmp	r4, r5
   26dea:	d303      	bcc.n	26df4 <net_if_init+0x44>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   26dec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   26df0:	f7ff bf90 	b.w	26d14 <k_mutex_unlock.constprop.0.isra.0>
	return iface->if_dev->dev;
   26df4:	6833      	ldr	r3, [r6, #0]
   26df6:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   26df8:	681b      	ldr	r3, [r3, #0]
   26dfa:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   26dfc:	2b00      	cmp	r3, #0
   26dfe:	d0e1      	beq.n	26dc4 <net_if_init+0x14>
   26e00:	681b      	ldr	r3, [r3, #0]
   26e02:	2b00      	cmp	r3, #0
   26e04:	d0de      	beq.n	26dc4 <net_if_init+0x14>
	api->init(iface);
   26e06:	4630      	mov	r0, r6
   26e08:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   26e0a:	e7db      	b.n	26dc4 <net_if_init+0x14>
   26e0c:	20014bc0 	.word	0x20014bc0
   26e10:	20014bc4 	.word	0x20014bc4
   26e14:	00040627 	.word	0x00040627
   26e18:	00040651 	.word	0x00040651
   26e1c:	0003f0e1 	.word	0x0003f0e1
   26e20:	0003f746 	.word	0x0003f746

00026e24 <net_if_post_init>:

void net_if_post_init(void)
{
   26e24:	b570      	push	{r4, r5, r6, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   26e26:	4c10      	ldr	r4, [pc, #64]	; (26e68 <net_if_post_init+0x44>)
   26e28:	4d10      	ldr	r5, [pc, #64]	; (26e6c <net_if_post_init+0x48>)
   26e2a:	4e11      	ldr	r6, [pc, #68]	; (26e70 <net_if_post_init+0x4c>)
   26e2c:	42ac      	cmp	r4, r5
   26e2e:	d90e      	bls.n	26e4e <net_if_post_init+0x2a>
   26e30:	4910      	ldr	r1, [pc, #64]	; (26e74 <net_if_post_init+0x50>)
   26e32:	f241 03e4 	movw	r3, #4324	; 0x10e4
   26e36:	4632      	mov	r2, r6
   26e38:	480f      	ldr	r0, [pc, #60]	; (26e78 <net_if_post_init+0x54>)
   26e3a:	f012 f9be 	bl	391ba <printk>
   26e3e:	480f      	ldr	r0, [pc, #60]	; (26e7c <net_if_post_init+0x58>)
   26e40:	f012 f9bb 	bl	391ba <printk>
   26e44:	f241 01e4 	movw	r1, #4324	; 0x10e4
   26e48:	4630      	mov	r0, r6
   26e4a:	f012 fc0d 	bl	39668 <assert_post_action>
   26e4e:	42ac      	cmp	r4, r5
   26e50:	d300      	bcc.n	26e54 <net_if_post_init+0x30>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   26e52:	bd70      	pop	{r4, r5, r6, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   26e54:	2103      	movs	r1, #3
   26e56:	4620      	mov	r0, r4
   26e58:	f013 faff 	bl	3a45a <net_if_flag_is_set>
   26e5c:	b910      	cbnz	r0, 26e64 <net_if_post_init+0x40>
			net_if_up(iface);
   26e5e:	4620      	mov	r0, r4
   26e60:	f7ff ff5e 	bl	26d20 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   26e64:	3404      	adds	r4, #4
   26e66:	e7e1      	b.n	26e2c <net_if_post_init+0x8>
   26e68:	20014bc0 	.word	0x20014bc0
   26e6c:	20014bc4 	.word	0x20014bc4
   26e70:	00040627 	.word	0x00040627
   26e74:	00040651 	.word	0x00040651
   26e78:	0003f0e1 	.word	0x0003f0e1
   26e7c:	0003f746 	.word	0x0003f746

00026e80 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   26e80:	7908      	ldrb	r0, [r1, #4]
{
   26e82:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   26e84:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   26e88:	2c07      	cmp	r4, #7
   26e8a:	d826      	bhi.n	26eda <adc_nrfx_channel_setup+0x5a>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   26e8c:	780b      	ldrb	r3, [r1, #0]
   26e8e:	2b09      	cmp	r3, #9
   26e90:	d819      	bhi.n	26ec6 <adc_nrfx_channel_setup+0x46>
   26e92:	e8df f003 	tbb	[pc, r3]
   26e96:	0606      	.short	0x0606
   26e98:	18060606 	.word	0x18060606
   26e9c:	16181405 	.word	0x16181405
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   26ea0:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   26ea2:	784a      	ldrb	r2, [r1, #1]
   26ea4:	2a03      	cmp	r2, #3
   26ea6:	d01b      	beq.n	26ee0 <adc_nrfx_channel_setup+0x60>
   26ea8:	2a04      	cmp	r2, #4
   26eaa:	d033      	beq.n	26f14 <adc_nrfx_channel_setup+0x94>
   26eac:	4936      	ldr	r1, [pc, #216]	; (26f88 <adc_nrfx_channel_setup+0x108>)
   26eae:	4b37      	ldr	r3, [pc, #220]	; (26f8c <adc_nrfx_channel_setup+0x10c>)
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
   26eb0:	4837      	ldr	r0, [pc, #220]	; (26f90 <adc_nrfx_channel_setup+0x110>)
   26eb2:	1ac9      	subs	r1, r1, r3
   26eb4:	08c9      	lsrs	r1, r1, #3
   26eb6:	0189      	lsls	r1, r1, #6
   26eb8:	f041 0101 	orr.w	r1, r1, #1
   26ebc:	e00b      	b.n	26ed6 <adc_nrfx_channel_setup+0x56>
		config.gain = NRF_SAADC_GAIN2;
   26ebe:	2306      	movs	r3, #6
		break;
   26ec0:	e7ef      	b.n	26ea2 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   26ec2:	2307      	movs	r3, #7
		break;
   26ec4:	e7ed      	b.n	26ea2 <adc_nrfx_channel_setup+0x22>
   26ec6:	4930      	ldr	r1, [pc, #192]	; (26f88 <adc_nrfx_channel_setup+0x108>)
   26ec8:	4b30      	ldr	r3, [pc, #192]	; (26f8c <adc_nrfx_channel_setup+0x10c>)
		LOG_ERR("Selected ADC gain is not valid");
   26eca:	4832      	ldr	r0, [pc, #200]	; (26f94 <adc_nrfx_channel_setup+0x114>)
   26ecc:	1ac9      	subs	r1, r1, r3
   26ece:	08c9      	lsrs	r1, r1, #3
   26ed0:	0189      	lsls	r1, r1, #6
   26ed2:	f041 0101 	orr.w	r1, r1, #1
   26ed6:	f012 fc10 	bl	396fa <log_0>
		return -EINVAL;
   26eda:	f06f 0015 	mvn.w	r0, #21
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;

	return 0;
}
   26ede:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   26ee0:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   26ee2:	f244 060a 	movw	r6, #16394	; 0x400a
   26ee6:	884a      	ldrh	r2, [r1, #2]
   26ee8:	42b2      	cmp	r2, r6
   26eea:	d047      	beq.n	26f7c <adc_nrfx_channel_setup+0xfc>
   26eec:	d814      	bhi.n	26f18 <adc_nrfx_channel_setup+0x98>
   26eee:	f244 0603 	movw	r6, #16387	; 0x4003
   26ef2:	42b2      	cmp	r2, r6
   26ef4:	d01e      	beq.n	26f34 <adc_nrfx_channel_setup+0xb4>
   26ef6:	f244 0605 	movw	r6, #16389	; 0x4005
   26efa:	42b2      	cmp	r2, r6
   26efc:	d03c      	beq.n	26f78 <adc_nrfx_channel_setup+0xf8>
   26efe:	2a00      	cmp	r2, #0
   26f00:	d03c      	beq.n	26f7c <adc_nrfx_channel_setup+0xfc>
   26f02:	4921      	ldr	r1, [pc, #132]	; (26f88 <adc_nrfx_channel_setup+0x108>)
   26f04:	4b21      	ldr	r3, [pc, #132]	; (26f8c <adc_nrfx_channel_setup+0x10c>)
		LOG_ERR("Selected ADC acquisition time is not valid");
   26f06:	4824      	ldr	r0, [pc, #144]	; (26f98 <adc_nrfx_channel_setup+0x118>)
   26f08:	1ac9      	subs	r1, r1, r3
   26f0a:	08c9      	lsrs	r1, r1, #3
   26f0c:	0189      	lsls	r1, r1, #6
   26f0e:	f041 0101 	orr.w	r1, r1, #1
   26f12:	e7e0      	b.n	26ed6 <adc_nrfx_channel_setup+0x56>
	nrf_saadc_channel_config_t config = {
   26f14:	2500      	movs	r5, #0
   26f16:	e7e4      	b.n	26ee2 <adc_nrfx_channel_setup+0x62>
	switch (channel_cfg->acquisition_time) {
   26f18:	f244 0614 	movw	r6, #16404	; 0x4014
   26f1c:	42b2      	cmp	r2, r6
   26f1e:	d02f      	beq.n	26f80 <adc_nrfx_channel_setup+0x100>
   26f20:	f244 0628 	movw	r6, #16424	; 0x4028
   26f24:	42b2      	cmp	r2, r6
   26f26:	d02d      	beq.n	26f84 <adc_nrfx_channel_setup+0x104>
   26f28:	f244 060f 	movw	r6, #16399	; 0x400f
   26f2c:	42b2      	cmp	r2, r6
   26f2e:	d1e8      	bne.n	26f02 <adc_nrfx_channel_setup+0x82>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   26f30:	2203      	movs	r2, #3
   26f32:	e000      	b.n	26f36 <adc_nrfx_channel_setup+0xb6>
	nrf_saadc_channel_config_t config = {
   26f34:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   26f36:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   26f3a:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   26f3c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   26f40:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   26f42:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   26f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   26f4a:	0122      	lsls	r2, r4, #4
   26f4c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   26f50:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   26f54:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   26f58:	0123      	lsls	r3, r4, #4
   26f5a:	798a      	ldrb	r2, [r1, #6]
   26f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26f60:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   26f64:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   26f68:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   26f6c:	4b0b      	ldr	r3, [pc, #44]	; (26f9c <adc_nrfx_channel_setup+0x11c>)
   26f6e:	794a      	ldrb	r2, [r1, #5]
   26f70:	4423      	add	r3, r4
   26f72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   26f76:	e7b2      	b.n	26ede <adc_nrfx_channel_setup+0x5e>
	switch (channel_cfg->acquisition_time) {
   26f78:	2201      	movs	r2, #1
   26f7a:	e7dc      	b.n	26f36 <adc_nrfx_channel_setup+0xb6>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   26f7c:	2202      	movs	r2, #2
   26f7e:	e7da      	b.n	26f36 <adc_nrfx_channel_setup+0xb6>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   26f80:	2204      	movs	r2, #4
   26f82:	e7d8      	b.n	26f36 <adc_nrfx_channel_setup+0xb6>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   26f84:	2205      	movs	r2, #5
   26f86:	e7d6      	b.n	26f36 <adc_nrfx_channel_setup+0xb6>
   26f88:	0003e470 	.word	0x0003e470
   26f8c:	0003e468 	.word	0x0003e468
   26f90:	000406bb 	.word	0x000406bb
   26f94:	0004069c 	.word	0x0004069c
   26f98:	000406df 	.word	0x000406df
   26f9c:	20014500 	.word	0x20014500

00026fa0 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   26fa0:	2201      	movs	r2, #1
   26fa2:	4b04      	ldr	r3, [pc, #16]	; (26fb4 <adc_context_start_sampling.isra.0+0x14>)
   26fa4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   26fa8:	b108      	cbz	r0, 26fae <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26faa:	60da      	str	r2, [r3, #12]
}
   26fac:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26fae:	601a      	str	r2, [r3, #0]
   26fb0:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   26fb2:	4770      	bx	lr
   26fb4:	4000e000 	.word	0x4000e000

00026fb8 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   26fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26fba:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   26fbc:	f04f 33ff 	mov.w	r3, #4294967295
   26fc0:	f04f 32ff 	mov.w	r2, #4294967295
   26fc4:	4871      	ldr	r0, [pc, #452]	; (2718c <adc_nrfx_read+0x1d4>)
   26fc6:	f00d fcbd 	bl	34944 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   26fca:	686e      	ldr	r6, [r5, #4]
	if (!selected_channels ||
   26fcc:	1e73      	subs	r3, r6, #1
   26fce:	2bfe      	cmp	r3, #254	; 0xfe
   26fd0:	d90a      	bls.n	26fe8 <adc_nrfx_read+0x30>
   26fd2:	496f      	ldr	r1, [pc, #444]	; (27190 <adc_nrfx_read+0x1d8>)
   26fd4:	4b6f      	ldr	r3, [pc, #444]	; (27194 <adc_nrfx_read+0x1dc>)
		LOG_ERR("Invalid selection of channels");
   26fd6:	4870      	ldr	r0, [pc, #448]	; (27198 <adc_nrfx_read+0x1e0>)
   26fd8:	1ac9      	subs	r1, r1, r3
   26fda:	08c9      	lsrs	r1, r1, #3
   26fdc:	0189      	lsls	r1, r1, #6
   26fde:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR(
   26fe2:	f012 fb8a 	bl	396fa <log_0>
	if (error) {
   26fe6:	e017      	b.n	27018 <adc_nrfx_read+0x60>
   26fe8:	2100      	movs	r1, #0
	active_channels = 0U;
   26fea:	460b      	mov	r3, r1
    p_reg->CH[channel].PSELP = pselp;
   26fec:	486b      	ldr	r0, [pc, #428]	; (2719c <adc_nrfx_read+0x1e4>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   26fee:	4f6c      	ldr	r7, [pc, #432]	; (271a0 <adc_nrfx_read+0x1e8>)
		if (selected_channels & BIT(channel_id)) {
   26ff0:	fa26 f201 	lsr.w	r2, r6, r1
   26ff4:	f012 0201 	ands.w	r2, r2, #1
   26ff8:	d039      	beq.n	2706e <adc_nrfx_read+0xb6>
			if (m_data.positive_inputs[channel_id] == 0U) {
   26ffa:	f817 c001 	ldrb.w	ip, [r7, r1]
   26ffe:	f1bc 0f00 	cmp.w	ip, #0
   27002:	d111      	bne.n	27028 <adc_nrfx_read+0x70>
   27004:	4a62      	ldr	r2, [pc, #392]	; (27190 <adc_nrfx_read+0x1d8>)
   27006:	4b63      	ldr	r3, [pc, #396]	; (27194 <adc_nrfx_read+0x1dc>)
				LOG_ERR("Channel %u not configured",
   27008:	4866      	ldr	r0, [pc, #408]	; (271a4 <adc_nrfx_read+0x1ec>)
   2700a:	1ad2      	subs	r2, r2, r3
   2700c:	08d2      	lsrs	r2, r2, #3
   2700e:	0192      	lsls	r2, r2, #6
   27010:	f042 0201 	orr.w	r2, r2, #1
   27014:	f012 fb7e 	bl	39714 <log_1>
		return -EINVAL;
   27018:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   2701c:	485b      	ldr	r0, [pc, #364]	; (2718c <adc_nrfx_read+0x1d4>)
   2701e:	f00d fc4d 	bl	348bc <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   27022:	4620      	mov	r0, r4
   27024:	b003      	add	sp, #12
   27026:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   27028:	7c6c      	ldrb	r4, [r5, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   2702a:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
   2702e:	3c00      	subs	r4, #0
   27030:	bf18      	it	ne
   27032:	2401      	movne	r4, #1
   27034:	f8de 2518 	ldr.w	r2, [lr, #1304]	; 0x518
			++active_channels;
   27038:	3301      	adds	r3, #1
   2703a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   2703e:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
   27042:	f8ce 2518 	str.w	r2, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   27046:	f101 0251 	add.w	r2, r1, #81	; 0x51
   2704a:	0112      	lsls	r2, r2, #4
   2704c:	f840 c002 	str.w	ip, [r0, r2]
   27050:	b2db      	uxtb	r3, r3
	} while (++channel_id < SAADC_CH_NUM);
   27052:	3101      	adds	r1, #1
   27054:	2908      	cmp	r1, #8
   27056:	d1cb      	bne.n	26ff0 <adc_nrfx_read+0x38>
	error = set_resolution(sequence);
   27058:	7c29      	ldrb	r1, [r5, #16]
	switch (sequence->resolution) {
   2705a:	f1a1 0208 	sub.w	r2, r1, #8
   2705e:	2a06      	cmp	r2, #6
   27060:	d81d      	bhi.n	2709e <adc_nrfx_read+0xe6>
   27062:	e8df f002 	tbb	[pc, r2]
   27066:	1c25      	.short	0x1c25
   27068:	1c091c27 	.word	0x1c091c27
   2706c:	1a          	.byte	0x1a
   2706d:	00          	.byte	0x00
   2706e:	f101 0451 	add.w	r4, r1, #81	; 0x51
   27072:	0124      	lsls	r4, r4, #4
   27074:	5102      	str	r2, [r0, r4]
}
   27076:	e7ec      	b.n	27052 <adc_nrfx_read+0x9a>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   27078:	2202      	movs	r2, #2
    p_reg->RESOLUTION = resolution;
   2707a:	4848      	ldr	r0, [pc, #288]	; (2719c <adc_nrfx_read+0x1e4>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   2707c:	2b01      	cmp	r3, #1
   2707e:	f8c0 25f0 	str.w	r2, [r0, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   27082:	7c69      	ldrb	r1, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   27084:	d918      	bls.n	270b8 <adc_nrfx_read+0x100>
   27086:	b1c9      	cbz	r1, 270bc <adc_nrfx_read+0x104>
   27088:	4941      	ldr	r1, [pc, #260]	; (27190 <adc_nrfx_read+0x1d8>)
   2708a:	4b42      	ldr	r3, [pc, #264]	; (27194 <adc_nrfx_read+0x1dc>)
		LOG_ERR(
   2708c:	4846      	ldr	r0, [pc, #280]	; (271a8 <adc_nrfx_read+0x1f0>)
   2708e:	1ac9      	subs	r1, r1, r3
   27090:	08c9      	lsrs	r1, r1, #3
   27092:	0189      	lsls	r1, r1, #6
   27094:	f041 0101 	orr.w	r1, r1, #1
   27098:	e7a3      	b.n	26fe2 <adc_nrfx_read+0x2a>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   2709a:	2203      	movs	r2, #3
		break;
   2709c:	e7ed      	b.n	2707a <adc_nrfx_read+0xc2>
   2709e:	4a3c      	ldr	r2, [pc, #240]	; (27190 <adc_nrfx_read+0x1d8>)
   270a0:	4b3c      	ldr	r3, [pc, #240]	; (27194 <adc_nrfx_read+0x1dc>)
		LOG_ERR("ADC resolution value %d is not valid",
   270a2:	4842      	ldr	r0, [pc, #264]	; (271ac <adc_nrfx_read+0x1f4>)
   270a4:	1ad2      	subs	r2, r2, r3
   270a6:	08d2      	lsrs	r2, r2, #3
   270a8:	0192      	lsls	r2, r2, #6
   270aa:	f042 0201 	orr.w	r2, r2, #1
   270ae:	e7b1      	b.n	27014 <adc_nrfx_read+0x5c>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   270b0:	2200      	movs	r2, #0
   270b2:	e7e2      	b.n	2707a <adc_nrfx_read+0xc2>
	switch (sequence->resolution) {
   270b4:	2201      	movs	r2, #1
   270b6:	e7e0      	b.n	2707a <adc_nrfx_read+0xc2>
	switch (sequence->oversampling) {
   270b8:	2908      	cmp	r1, #8
   270ba:	d814      	bhi.n	270e6 <adc_nrfx_read+0x12e>
    p_reg->OVERSAMPLE = oversample;
   270bc:	f8c0 15f4 	str.w	r1, [r0, #1524]	; 0x5f4
	if (sequence->options) {
   270c0:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   270c2:	005a      	lsls	r2, r3, #1
	if (sequence->options) {
   270c4:	b9c1      	cbnz	r1, 270f8 <adc_nrfx_read+0x140>
	if (sequence->buffer_size < needed_buffer_size) {
   270c6:	68e9      	ldr	r1, [r5, #12]
   270c8:	4291      	cmp	r1, r2
   270ca:	d219      	bcs.n	27100 <adc_nrfx_read+0x148>
   270cc:	4831      	ldr	r0, [pc, #196]	; (27194 <adc_nrfx_read+0x1dc>)
   270ce:	4b30      	ldr	r3, [pc, #192]	; (27190 <adc_nrfx_read+0x1d8>)
		return -ENOMEM;
   270d0:	f06f 040b 	mvn.w	r4, #11
   270d4:	1a1b      	subs	r3, r3, r0
   270d6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Provided buffer is too small (%u/%u)",
   270d8:	019b      	lsls	r3, r3, #6
   270da:	4835      	ldr	r0, [pc, #212]	; (271b0 <adc_nrfx_read+0x1f8>)
   270dc:	f043 0301 	orr.w	r3, r3, #1
   270e0:	f012 fb2c 	bl	3973c <log_2>
	if (error) {
   270e4:	e79a      	b.n	2701c <adc_nrfx_read+0x64>
   270e6:	4a2a      	ldr	r2, [pc, #168]	; (27190 <adc_nrfx_read+0x1d8>)
   270e8:	4b2a      	ldr	r3, [pc, #168]	; (27194 <adc_nrfx_read+0x1dc>)
		LOG_ERR("Oversampling value %d is not valid",
   270ea:	4832      	ldr	r0, [pc, #200]	; (271b4 <adc_nrfx_read+0x1fc>)
   270ec:	1ad2      	subs	r2, r2, r3
   270ee:	08d2      	lsrs	r2, r2, #3
   270f0:	0192      	lsls	r2, r2, #6
   270f2:	f042 0201 	orr.w	r2, r2, #1
   270f6:	e78d      	b.n	27014 <adc_nrfx_read+0x5c>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   270f8:	8989      	ldrh	r1, [r1, #12]
   270fa:	fb01 2202 	mla	r2, r1, r2, r2
   270fe:	e7e2      	b.n	270c6 <adc_nrfx_read+0x10e>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   27100:	462f      	mov	r7, r5
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   27102:	68a9      	ldr	r1, [r5, #8]
   27104:	4a25      	ldr	r2, [pc, #148]	; (2719c <adc_nrfx_read+0x1e4>)
   27106:	4c2c      	ldr	r4, [pc, #176]	; (271b8 <adc_nrfx_read+0x200>)
   27108:	f8c2 162c 	str.w	r1, [r2, #1580]	; 0x62c
   2710c:	f104 0674 	add.w	r6, r4, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   27110:	f8c2 3630 	str.w	r3, [r2, #1584]	; 0x630
   27114:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   27116:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   27118:	683b      	ldr	r3, [r7, #0]
   2711a:	4627      	mov	r7, r4
   2711c:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   2711e:	2600      	movs	r6, #0

	if (sequence->options) {
   27120:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   27122:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   27124:	b36b      	cbz	r3, 27182 <adc_nrfx_read+0x1ca>
		ctx->options = *sequence->options;
   27126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   27128:	f104 0588 	add.w	r5, r4, #136	; 0x88
   2712c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   27130:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   27132:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   27136:	b320      	cbz	r0, 27182 <adc_nrfx_read+0x1ca>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27138:	e8d7 3fef 	ldaex	r3, [r7]
   2713c:	e8c7 6fe2 	stlex	r2, r6, [r7]
   27140:	2a00      	cmp	r2, #0
   27142:	d1f9      	bne.n	27138 <adc_nrfx_read+0x180>
			return (t * to_hz + off) / from_hz;
   27144:	491d      	ldr	r1, [pc, #116]	; (271bc <adc_nrfx_read+0x204>)
   27146:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2714a:	460f      	mov	r7, r1
   2714c:	4631      	mov	r1, r6
   2714e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   27152:	2300      	movs	r3, #0
   27154:	fbe5 7100 	umlal	r7, r1, r5, r0
   27158:	4a19      	ldr	r2, [pc, #100]	; (271c0 <adc_nrfx_read+0x208>)
   2715a:	4638      	mov	r0, r7
   2715c:	f7fa f83c 	bl	211d8 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   27160:	2200      	movs	r2, #0
   27162:	e9cd 0100 	strd	r0, r1, [sp]
   27166:	2300      	movs	r3, #0
   27168:	f104 0008 	add.w	r0, r4, #8
   2716c:	f00f fd3e 	bl	36bec <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   27170:	f04f 32ff 	mov.w	r2, #4294967295
   27174:	f04f 33ff 	mov.w	r3, #4294967295
   27178:	4812      	ldr	r0, [pc, #72]	; (271c4 <adc_nrfx_read+0x20c>)
   2717a:	f00d fbe3 	bl	34944 <z_impl_k_sem_take>
	return ctx->status;
   2717e:	6f24      	ldr	r4, [r4, #112]	; 0x70
	return error;
   27180:	e74c      	b.n	2701c <adc_nrfx_read+0x64>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   27182:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   27186:	f7ff ff0b 	bl	26fa0 <adc_context_start_sampling.isra.0>
   2718a:	e7f1      	b.n	27170 <adc_nrfx_read+0x1b8>
   2718c:	20014540 	.word	0x20014540
   27190:	0003e470 	.word	0x0003e470
   27194:	0003e468 	.word	0x0003e468
   27198:	0004070a 	.word	0x0004070a
   2719c:	4000e000 	.word	0x4000e000
   271a0:	200145a0 	.word	0x200145a0
   271a4:	00040728 	.word	0x00040728
   271a8:	00040767 	.word	0x00040767
   271ac:	00040742 	.word	0x00040742
   271b0:	000407bc 	.word	0x000407bc
   271b4:	00040799 	.word	0x00040799
   271b8:	20014500 	.word	0x20014500
   271bc:	000f423f 	.word	0x000f423f
   271c0:	000f4240 	.word	0x000f4240
   271c4:	20014558 	.word	0x20014558

000271c8 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   271c8:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   271ca:	2400      	movs	r4, #0
   271cc:	4b0d      	ldr	r3, [pc, #52]	; (27204 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   271ce:	200e      	movs	r0, #14
   271d0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   271d4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   271d8:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   271dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   271e0:	2212      	movs	r2, #18
   271e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   271e6:	f7fe fb73 	bl	258d0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   271ea:	4622      	mov	r2, r4
   271ec:	2101      	movs	r1, #1
   271ee:	200e      	movs	r0, #14
   271f0:	f7fe fb8a 	bl	25908 <z_arm_irq_priority_set>
	return sem->count;
   271f4:	4804      	ldr	r0, [pc, #16]	; (27208 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   271f6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   271f8:	b913      	cbnz	r3, 27200 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   271fa:	3040      	adds	r0, #64	; 0x40
   271fc:	f00d fb5e 	bl	348bc <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   27200:	2000      	movs	r0, #0
   27202:	bd10      	pop	{r4, pc}
   27204:	4000e000 	.word	0x4000e000
   27208:	20014500 	.word	0x20014500

0002720c <saadc_irq_handler>:
{
   2720c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2720e:	4b2e      	ldr	r3, [pc, #184]	; (272c8 <saadc_irq_handler+0xbc>)
   27210:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   27214:	2a00      	cmp	r2, #0
   27216:	d049      	beq.n	272ac <saadc_irq_handler+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27218:	2200      	movs	r2, #0
   2721a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2721e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27222:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   27224:	4c29      	ldr	r4, [pc, #164]	; (272cc <saadc_irq_handler+0xc0>)
   27226:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   27228:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   2722c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   2722e:	4625      	mov	r5, r4
   27230:	b3bb      	cbz	r3, 272a2 <saadc_irq_handler+0x96>
		adc_sequence_callback callback = ctx->options.callback;
   27232:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   27236:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   2723a:	b133      	cbz	r3, 2724a <saadc_irq_handler+0x3e>
			action = callback(dev,
   2723c:	f104 0174 	add.w	r1, r4, #116	; 0x74
   27240:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   27242:	2801      	cmp	r0, #1
   27244:	d014      	beq.n	27270 <saadc_irq_handler+0x64>
   27246:	2802      	cmp	r0, #2
   27248:	d025      	beq.n	27296 <saadc_irq_handler+0x8a>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   2724a:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   2724e:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   27252:	429a      	cmp	r2, r3
   27254:	d91f      	bls.n	27296 <saadc_irq_handler+0x8a>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   27256:	3301      	adds	r3, #1
   27258:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   2725c:	4b1a      	ldr	r3, [pc, #104]	; (272c8 <saadc_irq_handler+0xbc>)
   2725e:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   27262:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   27266:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   27268:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   2726c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   27270:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   27274:	b92b      	cbnz	r3, 27282 <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   27276:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
}
   2727a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2727e:	f7ff be8f 	b.w	26fa0 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   27282:	e8d5 3fef 	ldaex	r3, [r5]
   27286:	1e5a      	subs	r2, r3, #1
   27288:	e8c5 2fe1 	stlex	r1, r2, [r5]
   2728c:	2900      	cmp	r1, #0
   2728e:	d1f8      	bne.n	27282 <saadc_irq_handler+0x76>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   27290:	2b01      	cmp	r3, #1
   27292:	dcf0      	bgt.n	27276 <saadc_irq_handler+0x6a>
   27294:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   27296:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   2729a:	b113      	cbz	r3, 272a2 <saadc_irq_handler+0x96>
	z_impl_k_timer_stop(timer);
   2729c:	480c      	ldr	r0, [pc, #48]	; (272d0 <saadc_irq_handler+0xc4>)
   2729e:	f016 f94a 	bl	3d536 <z_impl_k_timer_stop>
   272a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   272a6:	480b      	ldr	r0, [pc, #44]	; (272d4 <saadc_irq_handler+0xc8>)
   272a8:	f00d bb08 	b.w	348bc <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   272ac:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   272b0:	2900      	cmp	r1, #0
   272b2:	d0ef      	beq.n	27294 <saadc_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   272b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   272b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   272bc:	2201      	movs	r2, #1
   272be:	609a      	str	r2, [r3, #8]
   272c0:	601a      	str	r2, [r3, #0]
   272c2:	605a      	str	r2, [r3, #4]
}
   272c4:	e7e6      	b.n	27294 <saadc_irq_handler+0x88>
   272c6:	bf00      	nop
   272c8:	4000e000 	.word	0x4000e000
   272cc:	20014500 	.word	0x20014500
   272d0:	20014508 	.word	0x20014508
   272d4:	20014558 	.word	0x20014558

000272d8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   272d8:	b570      	push	{r4, r5, r6, lr}
   272da:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   272dc:	460c      	mov	r4, r1
	return port->data;
   272de:	6905      	ldr	r5, [r0, #16]
   272e0:	b961      	cbnz	r1, 272fc <gpio_nrfx_manage_callback+0x24>
   272e2:	4922      	ldr	r1, [pc, #136]	; (2736c <gpio_nrfx_manage_callback+0x94>)
   272e4:	2324      	movs	r3, #36	; 0x24
   272e6:	4a22      	ldr	r2, [pc, #136]	; (27370 <gpio_nrfx_manage_callback+0x98>)
   272e8:	4822      	ldr	r0, [pc, #136]	; (27374 <gpio_nrfx_manage_callback+0x9c>)
   272ea:	f011 ff66 	bl	391ba <printk>
   272ee:	4822      	ldr	r0, [pc, #136]	; (27378 <gpio_nrfx_manage_callback+0xa0>)
   272f0:	f011 ff63 	bl	391ba <printk>
   272f4:	2124      	movs	r1, #36	; 0x24
   272f6:	481e      	ldr	r0, [pc, #120]	; (27370 <gpio_nrfx_manage_callback+0x98>)
   272f8:	f012 f9b6 	bl	39668 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   272fc:	6863      	ldr	r3, [r4, #4]
   272fe:	b963      	cbnz	r3, 2731a <gpio_nrfx_manage_callback+0x42>
   27300:	491e      	ldr	r1, [pc, #120]	; (2737c <gpio_nrfx_manage_callback+0xa4>)
   27302:	2325      	movs	r3, #37	; 0x25
   27304:	4a1a      	ldr	r2, [pc, #104]	; (27370 <gpio_nrfx_manage_callback+0x98>)
   27306:	481b      	ldr	r0, [pc, #108]	; (27374 <gpio_nrfx_manage_callback+0x9c>)
   27308:	f011 ff57 	bl	391ba <printk>
   2730c:	481c      	ldr	r0, [pc, #112]	; (27380 <gpio_nrfx_manage_callback+0xa8>)
   2730e:	f011 ff54 	bl	391ba <printk>
   27312:	2125      	movs	r1, #37	; 0x25
   27314:	4816      	ldr	r0, [pc, #88]	; (27370 <gpio_nrfx_manage_callback+0x98>)
   27316:	f012 f9a7 	bl	39668 <assert_post_action>
	return list->head;
   2731a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   2731c:	b14b      	cbz	r3, 27332 <gpio_nrfx_manage_callback+0x5a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2731e:	42a3      	cmp	r3, r4
   27320:	d113      	bne.n	2734a <gpio_nrfx_manage_callback+0x72>
Z_GENLIST_REMOVE(slist, snode)
   27322:	68aa      	ldr	r2, [r5, #8]
	return node->next;
   27324:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   27326:	4294      	cmp	r4, r2
	list->head = node;
   27328:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   2732a:	d100      	bne.n	2732e <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
   2732c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   2732e:	2300      	movs	r3, #0
   27330:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   27332:	b97e      	cbnz	r6, 27354 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   27334:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   27336:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27338:	429c      	cmp	r4, r3
   2733a:	d106      	bne.n	2734a <gpio_nrfx_manage_callback+0x72>
	return node->next;
   2733c:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   2733e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27340:	68ab      	ldr	r3, [r5, #8]
   27342:	429c      	cmp	r4, r3
   27344:	d1f3      	bne.n	2732e <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
   27346:	60aa      	str	r2, [r5, #8]
}
   27348:	e7f1      	b.n	2732e <gpio_nrfx_manage_callback+0x56>
	return node->next;
   2734a:	461a      	mov	r2, r3
   2734c:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2734e:	2b00      	cmp	r3, #0
   27350:	d1f2      	bne.n	27338 <gpio_nrfx_manage_callback+0x60>
			if (!set) {
   27352:	b13e      	cbz	r6, 27364 <gpio_nrfx_manage_callback+0x8c>
	parent->next = child;
   27354:	686b      	ldr	r3, [r5, #4]
   27356:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   27358:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   2735a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2735c:	2b00      	cmp	r3, #0
   2735e:	d1e9      	bne.n	27334 <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
   27360:	60ac      	str	r4, [r5, #8]
}
   27362:	e7e7      	b.n	27334 <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
   27364:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   27368:	e7e5      	b.n	27336 <gpio_nrfx_manage_callback+0x5e>
   2736a:	bf00      	nop
   2736c:	00040823 	.word	0x00040823
   27370:	000407f6 	.word	0x000407f6
   27374:	0003f0e1 	.word	0x0003f0e1
   27378:	0004082c 	.word	0x0004082c
   2737c:	0004083b 	.word	0x0004083b
   27380:	0004084d 	.word	0x0004084d

00027384 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   27384:	6802      	ldr	r2, [r0, #0]
{
   27386:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   27388:	0953      	lsrs	r3, r2, #5
{
   2738a:	4604      	mov	r4, r0
    switch (port)
   2738c:	d104      	bne.n	27398 <nrf_gpio_pin_port_decode+0x14>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   2738e:	f04f 33ff 	mov.w	r3, #4294967295
   27392:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   27394:	07db      	lsls	r3, r3, #31
   27396:	d40b      	bmi.n	273b0 <nrf_gpio_pin_port_decode+0x2c>
   27398:	490f      	ldr	r1, [pc, #60]	; (273d8 <nrf_gpio_pin_port_decode+0x54>)
   2739a:	4810      	ldr	r0, [pc, #64]	; (273dc <nrf_gpio_pin_port_decode+0x58>)
   2739c:	f44f 7305 	mov.w	r3, #532	; 0x214
   273a0:	4a0f      	ldr	r2, [pc, #60]	; (273e0 <nrf_gpio_pin_port_decode+0x5c>)
   273a2:	f011 ff0a 	bl	391ba <printk>
   273a6:	f44f 7105 	mov.w	r1, #532	; 0x214
   273aa:	480d      	ldr	r0, [pc, #52]	; (273e0 <nrf_gpio_pin_port_decode+0x5c>)
   273ac:	f012 f95c 	bl	39668 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   273b0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   273b2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   273b6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   273b8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   273ba:	d00b      	beq.n	273d4 <nrf_gpio_pin_port_decode+0x50>
            NRFX_ASSERT(0);
   273bc:	4909      	ldr	r1, [pc, #36]	; (273e4 <nrf_gpio_pin_port_decode+0x60>)
   273be:	4807      	ldr	r0, [pc, #28]	; (273dc <nrf_gpio_pin_port_decode+0x58>)
   273c0:	f240 2319 	movw	r3, #537	; 0x219
   273c4:	4a06      	ldr	r2, [pc, #24]	; (273e0 <nrf_gpio_pin_port_decode+0x5c>)
   273c6:	f011 fef8 	bl	391ba <printk>
   273ca:	f240 2119 	movw	r1, #537	; 0x219
   273ce:	4804      	ldr	r0, [pc, #16]	; (273e0 <nrf_gpio_pin_port_decode+0x5c>)
   273d0:	f012 f94a 	bl	39668 <assert_post_action>
}
   273d4:	4804      	ldr	r0, [pc, #16]	; (273e8 <nrf_gpio_pin_port_decode+0x64>)
   273d6:	bd10      	pop	{r4, pc}
   273d8:	00040897 	.word	0x00040897
   273dc:	0003f0e1 	.word	0x0003f0e1
   273e0:	00040864 	.word	0x00040864
   273e4:	000422ae 	.word	0x000422ae
   273e8:	40842500 	.word	0x40842500

000273ec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   273ec:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   273ee:	4b09      	ldr	r3, [pc, #36]	; (27414 <gpio_nrfx_init+0x28>)
   273f0:	781a      	ldrb	r2, [r3, #0]
   273f2:	b96a      	cbnz	r2, 27410 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   273f4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   273f6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   273f8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   273fa:	2105      	movs	r1, #5
   273fc:	f7fe fa84 	bl	25908 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   27400:	2031      	movs	r0, #49	; 0x31
   27402:	f7fe fa65 	bl	258d0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   27406:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2740a:	4b03      	ldr	r3, [pc, #12]	; (27418 <gpio_nrfx_init+0x2c>)
   2740c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   27410:	2000      	movs	r0, #0
   27412:	bd08      	pop	{r3, pc}
   27414:	200180f4 	.word	0x200180f4
   27418:	40031000 	.word	0x40031000

0002741c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2741c:	4b2e      	ldr	r3, [pc, #184]	; (274d8 <gpio_nrfx_config+0xbc>)
{
   2741e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   27420:	4c2e      	ldr	r4, [pc, #184]	; (274dc <gpio_nrfx_config+0xc0>)
   27422:	4013      	ands	r3, r2
   27424:	42a3      	cmp	r3, r4
	return port->config;
   27426:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   27428:	d044      	beq.n	274b4 <gpio_nrfx_config+0x98>
   2742a:	d80e      	bhi.n	2744a <gpio_nrfx_config+0x2e>
   2742c:	2b06      	cmp	r3, #6
   2742e:	d043      	beq.n	274b8 <gpio_nrfx_config+0x9c>
   27430:	d806      	bhi.n	27440 <gpio_nrfx_config+0x24>
   27432:	2b00      	cmp	r3, #0
   27434:	d040      	beq.n	274b8 <gpio_nrfx_config+0x9c>
   27436:	2b02      	cmp	r3, #2
   27438:	d040      	beq.n	274bc <gpio_nrfx_config+0xa0>
   2743a:	f06f 0015 	mvn.w	r0, #21
   2743e:	e037      	b.n	274b0 <gpio_nrfx_config+0x94>
   27440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   27444:	d1f9      	bne.n	2743a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   27446:	2401      	movs	r4, #1
   27448:	e009      	b.n	2745e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2744a:	4c25      	ldr	r4, [pc, #148]	; (274e0 <gpio_nrfx_config+0xc4>)
   2744c:	42a3      	cmp	r3, r4
   2744e:	d037      	beq.n	274c0 <gpio_nrfx_config+0xa4>
   27450:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   27454:	d036      	beq.n	274c4 <gpio_nrfx_config+0xa8>
   27456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   2745a:	d1ee      	bne.n	2743a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   2745c:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   2745e:	06d5      	lsls	r5, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   27460:	bf4c      	ite	mi
   27462:	2603      	movmi	r6, #3
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
   27464:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   27468:	f482 7780 	eor.w	r7, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   2746c:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   2746e:	f3c2 2540 	ubfx	r5, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   27472:	f3c7 2700 	ubfx	r7, r7, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   27476:	d507      	bpl.n	27488 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   27478:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2747a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2747e:	d523      	bpl.n	274c8 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   27480:	2301      	movs	r3, #1
   27482:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   27484:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   27488:	7a03      	ldrb	r3, [r0, #8]
   2748a:	f001 011f 	and.w	r1, r1, #31
   2748e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27492:	a801      	add	r0, sp, #4
   27494:	9101      	str	r1, [sp, #4]
   27496:	f7ff ff75 	bl	27384 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2749a:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2749c:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   274a0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   274a4:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   274a8:	3280      	adds	r2, #128	; 0x80
   274aa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   274ae:	2000      	movs	r0, #0
}
   274b0:	b003      	add	sp, #12
   274b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   274b4:	2407      	movs	r4, #7
   274b6:	e7d2      	b.n	2745e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   274b8:	461c      	mov	r4, r3
   274ba:	e7d0      	b.n	2745e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   274bc:	2404      	movs	r4, #4
   274be:	e7ce      	b.n	2745e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   274c0:	2405      	movs	r4, #5
   274c2:	e7cc      	b.n	2745e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   274c4:	2403      	movs	r4, #3
   274c6:	e7ca      	b.n	2745e <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   274c8:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   274ca:	bf42      	ittt	mi
   274cc:	2301      	movmi	r3, #1
   274ce:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   274d0:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   274d4:	e7d8      	b.n	27488 <gpio_nrfx_config+0x6c>
   274d6:	bf00      	nop
   274d8:	00f00006 	.word	0x00f00006
   274dc:	00100006 	.word	0x00100006
   274e0:	00400002 	.word	0x00400002

000274e4 <gpio_nrfx_pin_interrupt_configure>:
{
   274e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   274e8:	4699      	mov	r9, r3
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   274ea:	6843      	ldr	r3, [r0, #4]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   274ec:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   274f0:	4680      	mov	r8, r0
   274f2:	460f      	mov	r7, r1
	return port->data;
   274f4:	6905      	ldr	r5, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   274f6:	7a1b      	ldrb	r3, [r3, #8]
   274f8:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   274fc:	d122      	bne.n	27544 <gpio_nrfx_pin_interrupt_configure+0x60>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   274fe:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27502:	a801      	add	r0, sp, #4
   27504:	9301      	str	r3, [sp, #4]
   27506:	f7ff ff3d 	bl	27384 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2750a:	9b01      	ldr	r3, [sp, #4]
   2750c:	3380      	adds	r3, #128	; 0x80
   2750e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   27512:	07d8      	lsls	r0, r3, #31
   27514:	f100 80b0 	bmi.w	27678 <gpio_nrfx_pin_interrupt_configure+0x194>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   27518:	2201      	movs	r2, #1
   2751a:	68eb      	ldr	r3, [r5, #12]
   2751c:	40ba      	lsls	r2, r7
   2751e:	4313      	orrs	r3, r2
   27520:	60eb      	str	r3, [r5, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   27522:	696b      	ldr	r3, [r5, #20]
   27524:	4313      	orrs	r3, r2
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   27526:	2201      	movs	r2, #1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   27528:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2752c:	fa02 f207 	lsl.w	r2, r2, r7
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   27530:	616b      	str	r3, [r5, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   27532:	ea6f 0002 	mvn.w	r0, r2
   27536:	69a9      	ldr	r1, [r5, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   27538:	692b      	ldr	r3, [r5, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   2753a:	d110      	bne.n	2755e <gpio_nrfx_pin_interrupt_configure+0x7a>
   2753c:	430a      	orrs	r2, r1
   2753e:	61aa      	str	r2, [r5, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   27540:	4003      	ands	r3, r0
   27542:	e012      	b.n	2756a <gpio_nrfx_pin_interrupt_configure+0x86>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   27544:	2101      	movs	r1, #1
   27546:	40b9      	lsls	r1, r7
   27548:	43ce      	mvns	r6, r1
   2754a:	68eb      	ldr	r3, [r5, #12]
   2754c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   27550:	bf14      	ite	ne
   27552:	430b      	orrne	r3, r1
   27554:	4033      	andeq	r3, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   27556:	60eb      	str	r3, [r5, #12]
   27558:	696b      	ldr	r3, [r5, #20]
   2755a:	4033      	ands	r3, r6
   2755c:	e7e3      	b.n	27526 <gpio_nrfx_pin_interrupt_configure+0x42>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   2755e:	4001      	ands	r1, r0
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   27560:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   27564:	61a9      	str	r1, [r5, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   27566:	d1eb      	bne.n	27540 <gpio_nrfx_pin_interrupt_configure+0x5c>
   27568:	4313      	orrs	r3, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2756a:	2000      	movs	r0, #0
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2756c:	612b      	str	r3, [r5, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   2756e:	4e44      	ldr	r6, [pc, #272]	; (27680 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   27570:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27574:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   27578:	7a1b      	ldrb	r3, [r3, #8]
	return port->data;
   2757a:	f8d8 5010 	ldr.w	r5, [r8, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2757e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
   27582:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   27584:	0083      	lsls	r3, r0, #2
   27586:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2758a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   2758e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   27592:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   27596:	428c      	cmp	r4, r1
   27598:	d15b      	bne.n	27652 <gpio_nrfx_pin_interrupt_configure+0x16e>
		    && (intenset & BIT(i))) {
   2759a:	fa22 f100 	lsr.w	r1, r2, r0
   2759e:	07c9      	lsls	r1, r1, #31
   275a0:	d557      	bpl.n	27652 <gpio_nrfx_pin_interrupt_configure+0x16e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   275a2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   275a6:	f022 0201 	bic.w	r2, r2, #1
   275aa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   275ae:	2301      	movs	r3, #1
   275b0:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   275b2:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   275b6:	b2c0      	uxtb	r0, r0
   275b8:	f004 f892 	bl	2b6e0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   275bc:	2100      	movs	r1, #0
   275be:	4620      	mov	r0, r4
   275c0:	f012 ff95 	bl	3a4ee <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   275c4:	68eb      	ldr	r3, [r5, #12]
   275c6:	40fb      	lsrs	r3, r7
   275c8:	07d9      	lsls	r1, r3, #31
   275ca:	d553      	bpl.n	27674 <gpio_nrfx_pin_interrupt_configure+0x190>
		if (data->trig_edge & BIT(pin)) {
   275cc:	696b      	ldr	r3, [r5, #20]
   275ce:	40fb      	lsrs	r3, r7
   275d0:	07da      	lsls	r2, r3, #31
   275d2:	d545      	bpl.n	27660 <gpio_nrfx_pin_interrupt_configure+0x17c>
				if (data->double_edge & BIT(pin)) {
   275d4:	69ab      	ldr	r3, [r5, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   275d6:	a801      	add	r0, sp, #4
				if (data->double_edge & BIT(pin)) {
   275d8:	40fb      	lsrs	r3, r7
   275da:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   275dc:	bf57      	itett	pl
   275de:	692d      	ldrpl	r5, [r5, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   275e0:	2503      	movmi	r5, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   275e2:	40fd      	lsrpl	r5, r7
   275e4:	f005 0501 	andpl.w	r5, r5, #1
   275e8:	bf5c      	itt	pl
   275ea:	f1c5 0502 	rsbpl	r5, r5, #2
   275ee:	b2ed      	uxtbpl	r5, r5
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   275f0:	f004 f896 	bl	2b720 <nrfx_gpiote_channel_alloc>
   275f4:	4b23      	ldr	r3, [pc, #140]	; (27684 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   275f6:	4298      	cmp	r0, r3
   275f8:	d12f      	bne.n	2765a <gpio_nrfx_pin_interrupt_configure+0x176>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   275fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   275fe:	0224      	lsls	r4, r4, #8
   27600:	008b      	lsls	r3, r1, #2
   27602:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   27606:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2760a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2760e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   27612:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   27616:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   2761a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2761e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   27622:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   27624:	4314      	orrs	r4, r2
    return ((uint32_t)p_reg + event);
   27626:	4a18      	ldr	r2, [pc, #96]	; (27688 <gpio_nrfx_pin_interrupt_configure+0x1a4>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   27628:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    return ((uint32_t)p_reg + event);
   2762c:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2762e:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   27630:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   27634:	6010      	str	r0, [r2, #0]
   27636:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   27638:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2763c:	f042 0201 	orr.w	r2, r2, #1
   27640:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   27644:	2301      	movs	r3, #1
   27646:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   27648:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
   2764c:	b003      	add	sp, #12
   2764e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   27652:	3001      	adds	r0, #1
   27654:	2808      	cmp	r0, #8
   27656:	d195      	bne.n	27584 <gpio_nrfx_pin_interrupt_configure+0xa0>
   27658:	e7b0      	b.n	275bc <gpio_nrfx_pin_interrupt_configure+0xd8>
		return -ENODEV;
   2765a:	f06f 0012 	mvn.w	r0, #18
   2765e:	e7f5      	b.n	2764c <gpio_nrfx_pin_interrupt_configure+0x168>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   27660:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   27662:	4620      	mov	r0, r4
	if ((BIT(pin) & data->int_active_level) != 0U) {
   27664:	40f9      	lsrs	r1, r7
   27666:	f001 0101 	and.w	r1, r1, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2766a:	f1c1 0103 	rsb	r1, r1, #3
   2766e:	b2c9      	uxtb	r1, r1
   27670:	f012 ff3d 	bl	3a4ee <nrf_gpio_cfg_sense_set>
	int res = 0;
   27674:	2000      	movs	r0, #0
   27676:	e7e9      	b.n	2764c <gpio_nrfx_pin_interrupt_configure+0x168>
		return -ENOTSUP;
   27678:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2767c:	e7e6      	b.n	2764c <gpio_nrfx_pin_interrupt_configure+0x168>
   2767e:	bf00      	nop
   27680:	40031000 	.word	0x40031000
   27684:	0bad0000 	.word	0x0bad0000
   27688:	40031100 	.word	0x40031100

0002768c <gpiote_event_handler>:
{
   2768c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27690:	4d52      	ldr	r5, [pc, #328]	; (277dc <gpiote_event_handler+0x150>)
   27692:	f8d5 717c 	ldr.w	r7, [r5, #380]	; 0x17c
	if (port_event) {
   27696:	2f00      	cmp	r7, #0
   27698:	d05f      	beq.n	2775a <gpiote_event_handler+0xce>
	uint32_t out = data->pin_int_en;
   2769a:	4b51      	ldr	r3, [pc, #324]	; (277e0 <gpiote_event_handler+0x154>)
	uint32_t bit = 1U << pin;
   2769c:	f04f 0801 	mov.w	r8, #1
	out &= ~data->trig_edge & ~data->double_edge;
   276a0:	e9d3 2005 	ldrd	r2, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   276a4:	68d9      	ldr	r1, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   276a6:	4302      	orrs	r2, r0
   276a8:	ea21 0902 	bic.w	r9, r1, r2
	uint32_t check_pins = level_pins;
   276ac:	464e      	mov	r6, r9
	uint32_t pin = 0U;
   276ae:	f04f 0a00 	mov.w	sl, #0
    return p_reg->IN;
   276b2:	4a4c      	ldr	r2, [pc, #304]	; (277e4 <gpiote_event_handler+0x158>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   276b4:	691b      	ldr	r3, [r3, #16]
   276b6:	6914      	ldr	r4, [r2, #16]
   276b8:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   276ba:	ea29 0404 	bic.w	r4, r9, r4
	while (check_pins) {
   276be:	bb86      	cbnz	r6, 27722 <gpiote_event_handler+0x96>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   276c0:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   276c4:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   276c8:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   276ca:	2001      	movs	r0, #1
   276cc:	461e      	mov	r6, r3
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   276ce:	4a46      	ldr	r2, [pc, #280]	; (277e8 <gpiote_event_handler+0x15c>)
    return p_reg->INTENSET & mask;
   276d0:	f8d5 1304 	ldr.w	r1, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   276d4:	fa00 fc03 	lsl.w	ip, r0, r3
   276d8:	ea1c 0f01 	tst.w	ip, r1
   276dc:	d00c      	beq.n	276f8 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   276de:	6811      	ldr	r1, [r2, #0]
   276e0:	b151      	cbz	r1, 276f8 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   276e2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   276e6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   276ea:	6016      	str	r6, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   276ec:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   276f0:	fa00 f101 	lsl.w	r1, r0, r1
   276f4:	430c      	orrs	r4, r1
   276f6:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   276f8:	3301      	adds	r3, #1
   276fa:	2b08      	cmp	r3, #8
   276fc:	f102 0204 	add.w	r2, r2, #4
   27700:	d1e6      	bne.n	276d0 <gpiote_event_handler+0x44>
	if (fired_triggers[0]) {
   27702:	bb64      	cbnz	r4, 2775e <gpiote_event_handler+0xd2>
	if (port_event) {
   27704:	b157      	cbz	r7, 2771c <gpiote_event_handler+0x90>
	uint32_t bit = 1U << pin;
   27706:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   27708:	2600      	movs	r6, #0
	uint32_t out = data->pin_int_en;
   2770a:	4f35      	ldr	r7, [pc, #212]	; (277e0 <gpiote_event_handler+0x154>)
   2770c:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2770e:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   27712:	4313      	orrs	r3, r2
   27714:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   27718:	2c00      	cmp	r4, #0
   2771a:	d14c      	bne.n	277b6 <gpiote_event_handler+0x12a>
}
   2771c:	b003      	add	sp, #12
   2771e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   27722:	ea18 0f06 	tst.w	r8, r6
   27726:	d013      	beq.n	27750 <gpiote_event_handler+0xc4>
			if (!(level_pins & bit)) {
   27728:	ea18 0f09 	tst.w	r8, r9
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2772c:	f00a 0b1f 	and.w	fp, sl, #31
			if (!(level_pins & bit)) {
   27730:	d108      	bne.n	27744 <gpiote_event_handler+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27732:	a801      	add	r0, sp, #4
   27734:	f8cd b004 	str.w	fp, [sp, #4]
   27738:	f7ff fe24 	bl	27384 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2773c:	9b01      	ldr	r3, [sp, #4]
   2773e:	3380      	adds	r3, #128	; 0x80
   27740:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   27744:	2100      	movs	r1, #0
   27746:	4658      	mov	r0, fp
   27748:	f012 fed1 	bl	3a4ee <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   2774c:	ea26 0608 	bic.w	r6, r6, r8
		++pin;
   27750:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   27754:	ea4f 0848 	mov.w	r8, r8, lsl #1
   27758:	e7b1      	b.n	276be <gpiote_event_handler+0x32>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   2775a:	463c      	mov	r4, r7
   2775c:	e7b4      	b.n	276c8 <gpiote_event_handler+0x3c>
	gpio_fire_callbacks(list, port, pins);
   2775e:	4b20      	ldr	r3, [pc, #128]	; (277e0 <gpiote_event_handler+0x154>)
   27760:	685d      	ldr	r5, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   27762:	2d00      	cmp	r5, #0
   27764:	d0ce      	beq.n	27704 <gpiote_event_handler+0x78>
	return node->next;
   27766:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   27768:	f8df 9080 	ldr.w	r9, [pc, #128]	; 277ec <gpiote_event_handler+0x160>
			__ASSERT(cb->handler, "No callback handler!");
   2776c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 277f0 <gpiote_event_handler+0x164>
   27770:	f8df a080 	ldr.w	sl, [pc, #128]	; 277f4 <gpiote_event_handler+0x168>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   27774:	2d00      	cmp	r5, #0
   27776:	d0c5      	beq.n	27704 <gpiote_event_handler+0x78>
		if (cb->pin_mask & pins) {
   27778:	68ab      	ldr	r3, [r5, #8]
   2777a:	421c      	tst	r4, r3
   2777c:	d014      	beq.n	277a8 <gpiote_event_handler+0x11c>
			__ASSERT(cb->handler, "No callback handler!");
   2777e:	686b      	ldr	r3, [r5, #4]
   27780:	b963      	cbnz	r3, 2779c <gpiote_event_handler+0x110>
   27782:	4651      	mov	r1, sl
   27784:	2345      	movs	r3, #69	; 0x45
   27786:	4642      	mov	r2, r8
   27788:	481b      	ldr	r0, [pc, #108]	; (277f8 <gpiote_event_handler+0x16c>)
   2778a:	f011 fd16 	bl	391ba <printk>
   2778e:	481b      	ldr	r0, [pc, #108]	; (277fc <gpiote_event_handler+0x170>)
   27790:	f011 fd13 	bl	391ba <printk>
   27794:	2145      	movs	r1, #69	; 0x45
   27796:	4640      	mov	r0, r8
   27798:	f011 ff66 	bl	39668 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   2779c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   277a0:	4629      	mov	r1, r5
   277a2:	4648      	mov	r0, r9
   277a4:	4022      	ands	r2, r4
   277a6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   277a8:	b11e      	cbz	r6, 277b2 <gpiote_event_handler+0x126>
   277aa:	6833      	ldr	r3, [r6, #0]
   277ac:	4635      	mov	r5, r6
   277ae:	461e      	mov	r6, r3
   277b0:	e7e0      	b.n	27774 <gpiote_event_handler+0xe8>
   277b2:	4633      	mov	r3, r6
   277b4:	e7fa      	b.n	277ac <gpiote_event_handler+0x120>
		if (level_pins & bit) {
   277b6:	4225      	tst	r5, r4
   277b8:	d00c      	beq.n	277d4 <gpiote_event_handler+0x148>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   277ba:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   277bc:	f006 001f 	and.w	r0, r6, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   277c0:	40f1      	lsrs	r1, r6
   277c2:	f001 0101 	and.w	r1, r1, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   277c6:	f1c1 0103 	rsb	r1, r1, #3
   277ca:	b2c9      	uxtb	r1, r1
   277cc:	f012 fe8f 	bl	3a4ee <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   277d0:	ea24 0405 	bic.w	r4, r4, r5
		++pin;
   277d4:	3601      	adds	r6, #1
		bit <<= 1;
   277d6:	006d      	lsls	r5, r5, #1
   277d8:	e79e      	b.n	27718 <gpiote_event_handler+0x8c>
   277da:	bf00      	nop
   277dc:	40031000 	.word	0x40031000
   277e0:	20017924 	.word	0x20017924
   277e4:	40842500 	.word	0x40842500
   277e8:	40031100 	.word	0x40031100
   277ec:	0003e1ac 	.word	0x0003e1ac
   277f0:	000407f6 	.word	0x000407f6
   277f4:	00041feb 	.word	0x00041feb
   277f8:	0003f0e1 	.word	0x0003f0e1
   277fc:	0004084d 	.word	0x0004084d

00027800 <i2c_nrfx_twim_configure>:
static int i2c_nrfx_twim_configure(const struct device *dev,
				   uint32_t dev_config)
{
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);

	if (I2C_ADDR_10_BITS & dev_config) {
   27800:	07ca      	lsls	r2, r1, #31
{
   27802:	b508      	push	{r3, lr}
	return dev->config;
   27804:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   27806:	d40f      	bmi.n	27828 <i2c_nrfx_twim_configure+0x28>
		return -EINVAL;
	}

	switch (I2C_SPEED_GET(dev_config)) {
   27808:	f3c1 0242 	ubfx	r2, r1, #1, #3
   2780c:	2a01      	cmp	r2, #1
   2780e:	d00e      	beq.n	2782e <i2c_nrfx_twim_configure+0x2e>
   27810:	2a02      	cmp	r2, #2
   27812:	d015      	beq.n	27840 <i2c_nrfx_twim_configure+0x40>
   27814:	490c      	ldr	r1, [pc, #48]	; (27848 <i2c_nrfx_twim_configure+0x48>)
   27816:	4b0d      	ldr	r3, [pc, #52]	; (2784c <i2c_nrfx_twim_configure+0x4c>)
		break;
	case I2C_SPEED_FAST:
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
		break;
	default:
		LOG_ERR("unsupported speed");
   27818:	480d      	ldr	r0, [pc, #52]	; (27850 <i2c_nrfx_twim_configure+0x50>)
   2781a:	1ac9      	subs	r1, r1, r3
   2781c:	08c9      	lsrs	r1, r1, #3
   2781e:	0189      	lsls	r1, r1, #6
   27820:	f041 0101 	orr.w	r1, r1, #1
   27824:	f011 ff69 	bl	396fa <log_0>
		return -EINVAL;
   27828:	f06f 0015 	mvn.w	r0, #21
   2782c:	e007      	b.n	2783e <i2c_nrfx_twim_configure+0x3e>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   2782e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   27832:	681b      	ldr	r3, [r3, #0]
   27834:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		return -EINVAL;
	}
	get_dev_data(dev)->dev_config = dev_config;
   27838:	6903      	ldr	r3, [r0, #16]

	return 0;
   2783a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   2783c:	6359      	str	r1, [r3, #52]	; 0x34
}
   2783e:	bd08      	pop	{r3, pc}
   27840:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   27844:	681b      	ldr	r3, [r3, #0]
   27846:	e7f5      	b.n	27834 <i2c_nrfx_twim_configure+0x34>
   27848:	0003e4e0 	.word	0x0003e4e0
   2784c:	0003e468 	.word	0x0003e468
   27850:	000408be 	.word	0x000408be

00027854 <twim_1_init>:
#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   27854:	b510      	push	{r4, lr}
   27856:	4604      	mov	r4, r0
   27858:	2200      	movs	r2, #0
   2785a:	2101      	movs	r1, #1
   2785c:	2009      	movs	r0, #9
   2785e:	f7fe f853 	bl	25908 <z_arm_irq_priority_set>
	return dev->config;
   27862:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   27864:	6923      	ldr	r3, [r4, #16]
   27866:	4a0c      	ldr	r2, [pc, #48]	; (27898 <twim_1_init+0x44>)
   27868:	f100 0108 	add.w	r1, r0, #8
   2786c:	f004 fb4e 	bl	2bf0c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   27870:	4b0a      	ldr	r3, [pc, #40]	; (2789c <twim_1_init+0x48>)
   27872:	4298      	cmp	r0, r3
   27874:	d00d      	beq.n	27892 <twim_1_init+0x3e>
   27876:	4b0a      	ldr	r3, [pc, #40]	; (278a0 <twim_1_init+0x4c>)
   27878:	4a0a      	ldr	r2, [pc, #40]	; (278a4 <twim_1_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   2787a:	480b      	ldr	r0, [pc, #44]	; (278a8 <twim_1_init+0x54>)
   2787c:	1ad2      	subs	r2, r2, r3
   2787e:	08d2      	lsrs	r2, r2, #3
   27880:	0192      	lsls	r2, r2, #6
   27882:	6821      	ldr	r1, [r4, #0]
   27884:	f042 0201 	orr.w	r2, r2, #1
   27888:	f011 ff44 	bl	39714 <log_1>
		return -EBUSY;
   2788c:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(1);
   27890:	bd10      	pop	{r4, pc}
	return 0;
   27892:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(1);
   27894:	e7fc      	b.n	27890 <twim_1_init+0x3c>
   27896:	bf00      	nop
   27898:	000278ad 	.word	0x000278ad
   2789c:	0bad0000 	.word	0x0bad0000
   278a0:	0003e468 	.word	0x0003e468
   278a4:	0003e4e0 	.word	0x0003e4e0
   278a8:	000408d0 	.word	0x000408d0

000278ac <event_handler>:
	switch (p_event->type) {
   278ac:	7803      	ldrb	r3, [r0, #0]
   278ae:	2b01      	cmp	r3, #1
   278b0:	d008      	beq.n	278c4 <event_handler+0x18>
   278b2:	2b02      	cmp	r3, #2
   278b4:	d008      	beq.n	278c8 <event_handler+0x1c>
   278b6:	b94b      	cbnz	r3, 278cc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   278b8:	4b05      	ldr	r3, [pc, #20]	; (278d0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   278ba:	630b      	str	r3, [r1, #48]	; 0x30
   278bc:	f101 0018 	add.w	r0, r1, #24
   278c0:	f00c bffc 	b.w	348bc <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   278c4:	4b03      	ldr	r3, [pc, #12]	; (278d4 <event_handler+0x28>)
   278c6:	e7f8      	b.n	278ba <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   278c8:	4b03      	ldr	r3, [pc, #12]	; (278d8 <event_handler+0x2c>)
   278ca:	e7f6      	b.n	278ba <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   278cc:	4b03      	ldr	r3, [pc, #12]	; (278dc <event_handler+0x30>)
   278ce:	e7f4      	b.n	278ba <event_handler+0xe>
   278d0:	0bad0000 	.word	0x0bad0000
   278d4:	0bae0001 	.word	0x0bae0001
   278d8:	0bae0002 	.word	0x0bae0002
   278dc:	0bad0001 	.word	0x0bad0001

000278e0 <i2c_nrfx_twim_transfer>:
{
   278e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   278e4:	4691      	mov	r9, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   278e6:	2214      	movs	r2, #20
{
   278e8:	4698      	mov	r8, r3
	return dev->data;
   278ea:	6905      	ldr	r5, [r0, #16]
{
   278ec:	b08b      	sub	sp, #44	; 0x2c
   278ee:	4606      	mov	r6, r0
   278f0:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   278f2:	eb0d 0002 	add.w	r0, sp, r2
   278f6:	2100      	movs	r1, #0
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   278f8:	f8d5 a03c 	ldr.w	sl, [r5, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   278fc:	8f2f      	ldrh	r7, [r5, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
   278fe:	f015 fec2 	bl	3d686 <memset>
   27902:	f88d 8015 	strb.w	r8, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   27906:	f04f 32ff 	mov.w	r2, #4294967295
   2790a:	f04f 33ff 	mov.w	r3, #4294967295
   2790e:	4628      	mov	r0, r5
   27910:	f00d f818 	bl	34944 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   27914:	6930      	ldr	r0, [r6, #16]
   27916:	3018      	adds	r0, #24
	for (size_t i = 0; i < num_msgs; i++) {
   27918:	f04f 0800 	mov.w	r8, #0
   2791c:	2200      	movs	r2, #0
   2791e:	2300      	movs	r3, #0
   27920:	f00d f810 	bl	34944 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   27924:	6870      	ldr	r0, [r6, #4]
   27926:	f004 fb6b 	bl	2c000 <nrfx_twim_enable>
	uint32_t concat_len = 0;
   2792a:	4645      	mov	r5, r8
		if (res != NRFX_SUCCESS) {
   2792c:	f8df b164 	ldr.w	fp, [pc, #356]	; 27a94 <i2c_nrfx_twim_transfer+0x1b4>
	for (size_t i = 0; i < num_msgs; i++) {
   27930:	45c8      	cmp	r8, r9
   27932:	d301      	bcc.n	27938 <i2c_nrfx_twim_transfer+0x58>
   27934:	2400      	movs	r4, #0
   27936:	e029      	b.n	2798c <i2c_nrfx_twim_transfer+0xac>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   27938:	7a21      	ldrb	r1, [r4, #8]
   2793a:	070b      	lsls	r3, r1, #28
   2793c:	f100 80a7 	bmi.w	27a8e <i2c_nrfx_twim_transfer+0x1ae>
			&& ((msgs[i].flags & I2C_MSG_READ)
   27940:	b177      	cbz	r7, 27960 <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
   27942:	f108 0301 	add.w	r3, r8, #1
   27946:	454b      	cmp	r3, r9
   27948:	d20a      	bcs.n	27960 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   2794a:	0788      	lsls	r0, r1, #30
   2794c:	d408      	bmi.n	27960 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   2794e:	7d23      	ldrb	r3, [r4, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   27950:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   27954:	f002 0201 	and.w	r2, r2, #1
   27958:	f003 0304 	and.w	r3, r3, #4
   2795c:	431a      	orrs	r2, r3
   2795e:	d01f      	beq.n	279a0 <i2c_nrfx_twim_transfer+0xc0>
		if (concat_next || (concat_len != 0)) {
   27960:	b375      	cbz	r5, 279c0 <i2c_nrfx_twim_transfer+0xe0>
		bool concat_next = (concat_buf_size > 0)
   27962:	2300      	movs	r3, #0
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   27964:	6862      	ldr	r2, [r4, #4]
   27966:	1950      	adds	r0, r2, r5
   27968:	42b8      	cmp	r0, r7
   2796a:	d91b      	bls.n	279a4 <i2c_nrfx_twim_transfer+0xc4>
   2796c:	494a      	ldr	r1, [pc, #296]	; (27a98 <i2c_nrfx_twim_transfer+0x1b8>)
   2796e:	4b4b      	ldr	r3, [pc, #300]	; (27a9c <i2c_nrfx_twim_transfer+0x1bc>)
				LOG_ERR("concat-buf overflow: %u + %u > %u",
   27970:	484b      	ldr	r0, [pc, #300]	; (27aa0 <i2c_nrfx_twim_transfer+0x1c0>)
   27972:	1a5b      	subs	r3, r3, r1
   27974:	08db      	lsrs	r3, r3, #3
   27976:	019b      	lsls	r3, r3, #6
   27978:	f043 0301 	orr.w	r3, r3, #1
   2797c:	f8ad 3000 	strh.w	r3, [sp]
   27980:	4629      	mov	r1, r5
   27982:	463b      	mov	r3, r7
   27984:	f011 fef3 	bl	3976e <log_3>
				ret = -ENOSPC;
   27988:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   2798c:	6870      	ldr	r0, [r6, #4]
   2798e:	f004 fb61 	bl	2c054 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   27992:	6930      	ldr	r0, [r6, #16]
	z_impl_k_sem_give(sem);
   27994:	f00c ff92 	bl	348bc <z_impl_k_sem_give>
}
   27998:	4620      	mov	r0, r4
   2799a:	b00b      	add	sp, #44	; 0x2c
   2799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bool concat_next = (concat_buf_size > 0)
   279a0:	2301      	movs	r3, #1
   279a2:	e7df      	b.n	27964 <i2c_nrfx_twim_transfer+0x84>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   279a4:	07c9      	lsls	r1, r1, #31
   279a6:	d406      	bmi.n	279b6 <i2c_nrfx_twim_transfer+0xd6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   279a8:	6821      	ldr	r1, [r4, #0]
   279aa:	eb0a 0005 	add.w	r0, sl, r5
   279ae:	9303      	str	r3, [sp, #12]
   279b0:	f015 fe5c 	bl	3d66c <memcpy>
   279b4:	9b03      	ldr	r3, [sp, #12]
			concat_len += msgs[i].len;
   279b6:	6862      	ldr	r2, [r4, #4]
   279b8:	4415      	add	r5, r2
		if (concat_next) {
   279ba:	2b00      	cmp	r3, #0
   279bc:	d151      	bne.n	27a62 <i2c_nrfx_twim_transfer+0x182>
		if (concat_len == 0) {
   279be:	b9d5      	cbnz	r5, 279f6 <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
   279c0:	2500      	movs	r5, #0
   279c2:	6823      	ldr	r3, [r4, #0]
   279c4:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   279c6:	6863      	ldr	r3, [r4, #4]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   279c8:	7a22      	ldrb	r2, [r4, #8]
			cur_xfer.primary_length = msgs[i].len;
   279ca:	9306      	str	r3, [sp, #24]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   279cc:	f002 0301 	and.w	r3, r2, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   279d0:	f082 0202 	eor.w	r2, r2, #2
   279d4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   279d8:	6870      	ldr	r0, [r6, #4]
   279da:	0152      	lsls	r2, r2, #5
   279dc:	a905      	add	r1, sp, #20
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   279de:	f88d 3014 	strb.w	r3, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   279e2:	f004 fb6f 	bl	2c0c4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   279e6:	4558      	cmp	r0, fp
   279e8:	d009      	beq.n	279fe <i2c_nrfx_twim_transfer+0x11e>
			if (res == NRFX_ERROR_BUSY) {
   279ea:	4b2e      	ldr	r3, [pc, #184]	; (27aa4 <i2c_nrfx_twim_transfer+0x1c4>)
   279ec:	4298      	cmp	r0, r3
   279ee:	d121      	bne.n	27a34 <i2c_nrfx_twim_transfer+0x154>
				ret = -EBUSY;
   279f0:	f06f 040f 	mvn.w	r4, #15
   279f4:	e7ca      	b.n	2798c <i2c_nrfx_twim_transfer+0xac>
			cur_xfer.p_primary_buf = concat_buf;
   279f6:	462b      	mov	r3, r5
   279f8:	f8cd a020 	str.w	sl, [sp, #32]
			cur_xfer.primary_length = concat_len;
   279fc:	e7e4      	b.n	279c8 <i2c_nrfx_twim_transfer+0xe8>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   279fe:	6930      	ldr	r0, [r6, #16]
   27a00:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   27a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   27a06:	2300      	movs	r3, #0
   27a08:	f00c ff9c 	bl	34944 <z_impl_k_sem_take>
		if (ret != 0) {
   27a0c:	b1a8      	cbz	r0, 27a3a <i2c_nrfx_twim_transfer+0x15a>
   27a0e:	4b22      	ldr	r3, [pc, #136]	; (27a98 <i2c_nrfx_twim_transfer+0x1b8>)
   27a10:	4a22      	ldr	r2, [pc, #136]	; (27a9c <i2c_nrfx_twim_transfer+0x1bc>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   27a12:	4641      	mov	r1, r8
   27a14:	1ad2      	subs	r2, r2, r3
   27a16:	08d2      	lsrs	r2, r2, #3
   27a18:	0192      	lsls	r2, r2, #6
   27a1a:	4823      	ldr	r0, [pc, #140]	; (27aa8 <i2c_nrfx_twim_transfer+0x1c8>)
   27a1c:	f042 0201 	orr.w	r2, r2, #1
   27a20:	f011 fe78 	bl	39714 <log_1>
			nrfx_twim_disable(&get_dev_config(dev)->twim);
   27a24:	6870      	ldr	r0, [r6, #4]
   27a26:	f004 fb15 	bl	2c054 <nrfx_twim_disable>
	return dev->config;
   27a2a:	6873      	ldr	r3, [r6, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   27a2c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   27a30:	f004 fe5c 	bl	2c6ec <nrfx_twi_twim_bus_recover>
				ret = -EIO;
   27a34:	f06f 0404 	mvn.w	r4, #4
   27a38:	e7a8      	b.n	2798c <i2c_nrfx_twim_transfer+0xac>
	return dev->data;
   27a3a:	6933      	ldr	r3, [r6, #16]
		res = get_dev_data(dev)->res;
   27a3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   27a3e:	4559      	cmp	r1, fp
   27a40:	d00b      	beq.n	27a5a <i2c_nrfx_twim_transfer+0x17a>
   27a42:	4a15      	ldr	r2, [pc, #84]	; (27a98 <i2c_nrfx_twim_transfer+0x1b8>)
   27a44:	4b15      	ldr	r3, [pc, #84]	; (27a9c <i2c_nrfx_twim_transfer+0x1bc>)
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   27a46:	4819      	ldr	r0, [pc, #100]	; (27aac <i2c_nrfx_twim_transfer+0x1cc>)
   27a48:	1a9b      	subs	r3, r3, r2
   27a4a:	08db      	lsrs	r3, r3, #3
   27a4c:	019b      	lsls	r3, r3, #6
   27a4e:	4642      	mov	r2, r8
   27a50:	f043 0301 	orr.w	r3, r3, #1
   27a54:	f011 fe72 	bl	3973c <log_2>
			break;
   27a58:	e7ec      	b.n	27a34 <i2c_nrfx_twim_transfer+0x154>
		if ((msgs[i].flags & I2C_MSG_READ)
   27a5a:	7a23      	ldrb	r3, [r4, #8]
   27a5c:	07db      	lsls	r3, r3, #31
   27a5e:	d404      	bmi.n	27a6a <i2c_nrfx_twim_transfer+0x18a>
		concat_len = 0;
   27a60:	2500      	movs	r5, #0
	for (size_t i = 0; i < num_msgs; i++) {
   27a62:	f108 0801 	add.w	r8, r8, #1
   27a66:	340c      	adds	r4, #12
   27a68:	e762      	b.n	27930 <i2c_nrfx_twim_transfer+0x50>
		    && cur_xfer.p_primary_buf == concat_buf) {
   27a6a:	9b08      	ldr	r3, [sp, #32]
   27a6c:	459a      	cmp	sl, r3
   27a6e:	d1f7      	bne.n	27a60 <i2c_nrfx_twim_transfer+0x180>
   27a70:	4623      	mov	r3, r4
   27a72:	e007      	b.n	27a84 <i2c_nrfx_twim_transfer+0x1a4>
				concat_len -= msgs[j].len;
   27a74:	1aad      	subs	r5, r5, r2
   27a76:	68d8      	ldr	r0, [r3, #12]
   27a78:	eb0a 0105 	add.w	r1, sl, r5
   27a7c:	9303      	str	r3, [sp, #12]
   27a7e:	f015 fdf5 	bl	3d66c <memcpy>
				j--;
   27a82:	9b03      	ldr	r3, [sp, #12]
			while (concat_len >= msgs[j].len) {
   27a84:	685a      	ldr	r2, [r3, #4]
   27a86:	3b0c      	subs	r3, #12
   27a88:	4295      	cmp	r5, r2
   27a8a:	d2f3      	bcs.n	27a74 <i2c_nrfx_twim_transfer+0x194>
   27a8c:	e7e8      	b.n	27a60 <i2c_nrfx_twim_transfer+0x180>
			ret = -ENOTSUP;
   27a8e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   27a92:	e77b      	b.n	2798c <i2c_nrfx_twim_transfer+0xac>
   27a94:	0bad0000 	.word	0x0bad0000
   27a98:	0003e468 	.word	0x0003e468
   27a9c:	0003e4e0 	.word	0x0003e4e0
   27aa0:	000408f0 	.word	0x000408f0
   27aa4:	0bad000b 	.word	0x0bad000b
   27aa8:	00040912 	.word	0x00040912
   27aac:	0004093c 	.word	0x0004093c

00027ab0 <lis2dh_channel_get>:
	struct lis2dh_data *lis2dh = dev->data;
   27ab0:	2903      	cmp	r1, #3
{
   27ab2:	b570      	push	{r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
   27ab4:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
   27ab6:	d81c      	bhi.n	27af2 <lis2dh_channel_get+0x42>
   27ab8:	4b0f      	ldr	r3, [pc, #60]	; (27af8 <lis2dh_channel_get+0x48>)
   27aba:	5658      	ldrsb	r0, [r3, r1]
   27abc:	4b0f      	ldr	r3, [pc, #60]	; (27afc <lis2dh_channel_get+0x4c>)
   27abe:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
   27ac0:	490f      	ldr	r1, [pc, #60]	; (27b00 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   27ac2:	42b0      	cmp	r0, r6
   27ac4:	f102 0208 	add.w	r2, r2, #8
   27ac8:	dd01      	ble.n	27ace <lis2dh_channel_get+0x1e>
	return 0;
   27aca:	2000      	movs	r0, #0
}
   27acc:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
   27ace:	1d03      	adds	r3, r0, #4
   27ad0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
   27ad4:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
   27ad8:	6925      	ldr	r5, [r4, #16]
   27ada:	111b      	asrs	r3, r3, #4
   27adc:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
   27ade:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
   27ae2:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
   27ae6:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
   27aea:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   27aee:	3001      	adds	r0, #1
   27af0:	e7e7      	b.n	27ac2 <lis2dh_channel_get+0x12>
		return -ENOTSUP;
   27af2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27af6:	e7e9      	b.n	27acc <lis2dh_channel_get+0x1c>
   27af8:	00040b0a 	.word	0x00040b0a
   27afc:	00040b06 	.word	0x00040b06
   27b00:	000f4240 	.word	0x000f4240

00027b04 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
   27b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
   27b08:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   27b0c:	4606      	mov	r6, r0
	struct lis2dh_data *lis2dh = dev->data;
   27b0e:	6907      	ldr	r7, [r0, #16]
{
   27b10:	b089      	sub	sp, #36	; 0x24
	int status;
	uint8_t id;
	uint8_t raw[6];

	lis2dh->bus = device_get_binding(cfg->bus_name);
   27b12:	f8d8 0000 	ldr.w	r0, [r8]
   27b16:	f00b feb1 	bl	3387c <z_impl_device_get_binding>
   27b1a:	4d46      	ldr	r5, [pc, #280]	; (27c34 <lis2dh_init+0x130>)
   27b1c:	4b46      	ldr	r3, [pc, #280]	; (27c38 <lis2dh_init+0x134>)
   27b1e:	6038      	str	r0, [r7, #0]
   27b20:	1aed      	subs	r5, r5, r3
   27b22:	08ed      	lsrs	r5, r5, #3
   27b24:	01ad      	lsls	r5, r5, #6
	if (!lis2dh->bus) {
   27b26:	b960      	cbnz	r0, 27b42 <lis2dh_init+0x3e>
		LOG_ERR("master not found: %s", cfg->bus_name);
   27b28:	f8d8 1000 	ldr.w	r1, [r8]
   27b2c:	4843      	ldr	r0, [pc, #268]	; (27c3c <lis2dh_init+0x138>)
   27b2e:	f045 0201 	orr.w	r2, r5, #1
		LOG_ERR("Failed to read chip id.");
		return status;
	}

	if (id != LIS2DH_CHIP_ID) {
		LOG_ERR("Invalid chip ID: %02x\n", id);
   27b32:	f011 fdef 	bl	39714 <log_1>
		return -EINVAL;
   27b36:	f06f 0415 	mvn.w	r4, #21

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
   27b3a:	4620      	mov	r0, r4
   27b3c:	b009      	add	sp, #36	; 0x24
   27b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	cfg->bus_init(dev);
   27b42:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27b46:	4630      	mov	r0, r6
   27b48:	4798      	blx	r3
	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
   27b4a:	687b      	ldr	r3, [r7, #4]
   27b4c:	210f      	movs	r1, #15
   27b4e:	4630      	mov	r0, r6
   27b50:	689b      	ldr	r3, [r3, #8]
   27b52:	f10d 0203 	add.w	r2, sp, #3
   27b56:	4798      	blx	r3
	if (status < 0) {
   27b58:	1e04      	subs	r4, r0, #0
   27b5a:	da05      	bge.n	27b68 <lis2dh_init+0x64>
		LOG_ERR("Failed to read chip id.");
   27b5c:	4838      	ldr	r0, [pc, #224]	; (27c40 <lis2dh_init+0x13c>)
   27b5e:	f045 0101 	orr.w	r1, r5, #1
		LOG_ERR("Failed to set full scale ctrl register.");
   27b62:	f011 fdca 	bl	396fa <log_0>
		return status;
   27b66:	e7e8      	b.n	27b3a <lis2dh_init+0x36>
	if (id != LIS2DH_CHIP_ID) {
   27b68:	f89d 1003 	ldrb.w	r1, [sp, #3]
   27b6c:	2933      	cmp	r1, #51	; 0x33
   27b6e:	d003      	beq.n	27b78 <lis2dh_init+0x74>
		LOG_ERR("Invalid chip ID: %02x\n", id);
   27b70:	4834      	ldr	r0, [pc, #208]	; (27c44 <lis2dh_init+0x140>)
   27b72:	f045 0201 	orr.w	r2, r5, #1
   27b76:	e7dc      	b.n	27b32 <lis2dh_init+0x2e>
	if (cfg->is_lsm303agr_dev) {
   27b78:	f898 300a 	ldrb.w	r3, [r8, #10]
   27b7c:	b15b      	cbz	r3, 27b96 <lis2dh_init+0x92>
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
   27b7e:	f644 1216 	movw	r2, #18710	; 0x4916
   27b82:	f242 418b 	movw	r1, #9355	; 0x248b
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
   27b86:	f249 202d 	movw	r0, #37421	; 0x922d
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
   27b8a:	4b2f      	ldr	r3, [pc, #188]	; (27c48 <lis2dh_init+0x144>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
   27b8c:	e9c3 1200 	strd	r1, r2, [r3]
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
   27b90:	4a2e      	ldr	r2, [pc, #184]	; (27c4c <lis2dh_init+0x148>)
   27b92:	e9c3 0202 	strd	r0, r2, [r3, #8]
	if (cfg->disc_pull_up) {
   27b96:	f898 300b 	ldrb.w	r3, [r8, #11]
   27b9a:	b163      	cbz	r3, 27bb6 <lis2dh_init+0xb2>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
   27b9c:	687b      	ldr	r3, [r7, #4]
   27b9e:	211e      	movs	r1, #30
   27ba0:	691c      	ldr	r4, [r3, #16]
   27ba2:	2380      	movs	r3, #128	; 0x80
   27ba4:	4630      	mov	r0, r6
   27ba6:	461a      	mov	r2, r3
   27ba8:	47a0      	blx	r4
		if (status < 0) {
   27baa:	1e04      	subs	r4, r0, #0
   27bac:	da03      	bge.n	27bb6 <lis2dh_init+0xb2>
			LOG_ERR("Failed to disconnect SDO/SA0 pull-up.");
   27bae:	4828      	ldr	r0, [pc, #160]	; (27c50 <lis2dh_init+0x14c>)
   27bb0:	f045 0101 	orr.w	r1, r5, #1
   27bb4:	e7d5      	b.n	27b62 <lis2dh_init+0x5e>
	(void)memset(raw, 0, sizeof(raw));
   27bb6:	f04f 0900 	mov.w	r9, #0
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   27bba:	2307      	movs	r3, #7
	(void)memset(raw, 0, sizeof(raw));
   27bbc:	f8cd 9005 	str.w	r9, [sp, #5]
   27bc0:	f88d 9009 	strb.w	r9, [sp, #9]
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   27bc4:	f88d 3004 	strb.w	r3, [sp, #4]
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
   27bc8:	687b      	ldr	r3, [r7, #4]
   27bca:	2120      	movs	r1, #32
   27bcc:	685c      	ldr	r4, [r3, #4]
   27bce:	4630      	mov	r0, r6
   27bd0:	2306      	movs	r3, #6
   27bd2:	aa01      	add	r2, sp, #4
   27bd4:	47a0      	blx	r4
	if (status < 0) {
   27bd6:	1e04      	subs	r4, r0, #0
   27bd8:	da03      	bge.n	27be2 <lis2dh_init+0xde>
		LOG_ERR("Failed to reset ctrl registers.");
   27bda:	481e      	ldr	r0, [pc, #120]	; (27c54 <lis2dh_init+0x150>)
   27bdc:	f045 0101 	orr.w	r1, r5, #1
   27be0:	e7bf      	b.n	27b62 <lis2dh_init+0x5e>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
   27be2:	4b19      	ldr	r3, [pc, #100]	; (27c48 <lis2dh_init+0x144>)
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4,
   27be4:	464a      	mov	r2, r9
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
   27be6:	681b      	ldr	r3, [r3, #0]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4,
   27be8:	2123      	movs	r1, #35	; 0x23
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
   27bea:	613b      	str	r3, [r7, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4,
   27bec:	687b      	ldr	r3, [r7, #4]
   27bee:	4630      	mov	r0, r6
   27bf0:	68db      	ldr	r3, [r3, #12]
   27bf2:	4798      	blx	r3
	if (status < 0) {
   27bf4:	1e04      	subs	r4, r0, #0
   27bf6:	da03      	bge.n	27c00 <lis2dh_init+0xfc>
		LOG_ERR("Failed to set full scale ctrl register.");
   27bf8:	4817      	ldr	r0, [pc, #92]	; (27c58 <lis2dh_init+0x154>)
   27bfa:	f045 0101 	orr.w	r1, r5, #1
   27bfe:	e7b0      	b.n	27b62 <lis2dh_init+0x5e>
	LOG_INF("bus=%s fs=%d, odr=0x%x lp_en=0x%x scale=%d",
   27c00:	f8d8 3000 	ldr.w	r3, [r8]
   27c04:	2202      	movs	r2, #2
   27c06:	9303      	str	r3, [sp, #12]
   27c08:	2304      	movs	r3, #4
   27c0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   27c0e:	693b      	ldr	r3, [r7, #16]
   27c10:	2205      	movs	r2, #5
   27c12:	4812      	ldr	r0, [pc, #72]	; (27c5c <lis2dh_init+0x158>)
   27c14:	9307      	str	r3, [sp, #28]
   27c16:	a903      	add	r1, sp, #12
   27c18:	f045 0303 	orr.w	r3, r5, #3
   27c1c:	f8cd 9018 	str.w	r9, [sp, #24]
   27c20:	f011 fdc1 	bl	397a6 <log_n>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   27c24:	687b      	ldr	r3, [r7, #4]
   27c26:	2247      	movs	r2, #71	; 0x47
   27c28:	2120      	movs	r1, #32
   27c2a:	4630      	mov	r0, r6
   27c2c:	68db      	ldr	r3, [r3, #12]
   27c2e:	4798      	blx	r3
   27c30:	4604      	mov	r4, r0
   27c32:	e782      	b.n	27b3a <lis2dh_init+0x36>
   27c34:	0003e4e8 	.word	0x0003e4e8
   27c38:	0003e468 	.word	0x0003e468
   27c3c:	00040975 	.word	0x00040975
   27c40:	0004098a 	.word	0x0004098a
   27c44:	000409a2 	.word	0x000409a2
   27c48:	2001462c 	.word	0x2001462c
   27c4c:	0001b694 	.word	0x0001b694
   27c50:	000409b9 	.word	0x000409b9
   27c54:	000409df 	.word	0x000409df
   27c58:	000409ff 	.word	0x000409ff
   27c5c:	00040a27 	.word	0x00040a27

00027c60 <lis2dh_sample_fetch>:
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL ||
   27c60:	2938      	cmp	r1, #56	; 0x38
{
   27c62:	b570      	push	{r4, r5, r6, lr}
   27c64:	4604      	mov	r4, r0
	struct lis2dh_data *lis2dh = dev->data;
   27c66:	6905      	ldr	r5, [r0, #16]
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL ||
   27c68:	d00b      	beq.n	27c82 <lis2dh_sample_fetch+0x22>
   27c6a:	2903      	cmp	r1, #3
   27c6c:	d009      	beq.n	27c82 <lis2dh_sample_fetch+0x22>
   27c6e:	4914      	ldr	r1, [pc, #80]	; (27cc0 <lis2dh_sample_fetch+0x60>)
   27c70:	4814      	ldr	r0, [pc, #80]	; (27cc4 <lis2dh_sample_fetch+0x64>)
   27c72:	2358      	movs	r3, #88	; 0x58
   27c74:	4a14      	ldr	r2, [pc, #80]	; (27cc8 <lis2dh_sample_fetch+0x68>)
   27c76:	f011 faa0 	bl	391ba <printk>
   27c7a:	2158      	movs	r1, #88	; 0x58
   27c7c:	4812      	ldr	r0, [pc, #72]	; (27cc8 <lis2dh_sample_fetch+0x68>)
   27c7e:	f011 fcf3 	bl	39668 <assert_post_action>
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   27c82:	686b      	ldr	r3, [r5, #4]
   27c84:	4620      	mov	r0, r4
   27c86:	681e      	ldr	r6, [r3, #0]
   27c88:	2127      	movs	r1, #39	; 0x27
   27c8a:	2307      	movs	r3, #7
   27c8c:	f105 0208 	add.w	r2, r5, #8
   27c90:	47b0      	blx	r6
	if (status < 0) {
   27c92:	1e04      	subs	r4, r0, #0
   27c94:	da0b      	bge.n	27cae <lis2dh_sample_fetch+0x4e>
   27c96:	490d      	ldr	r1, [pc, #52]	; (27ccc <lis2dh_sample_fetch+0x6c>)
   27c98:	4b0d      	ldr	r3, [pc, #52]	; (27cd0 <lis2dh_sample_fetch+0x70>)
		LOG_WRN("Could not read accel axis data");
   27c9a:	480e      	ldr	r0, [pc, #56]	; (27cd4 <lis2dh_sample_fetch+0x74>)
   27c9c:	1ac9      	subs	r1, r1, r3
   27c9e:	08c9      	lsrs	r1, r1, #3
   27ca0:	0189      	lsls	r1, r1, #6
   27ca2:	f041 0102 	orr.w	r1, r1, #2
   27ca6:	f011 fd28 	bl	396fa <log_0>
}
   27caa:	4620      	mov	r0, r4
   27cac:	bd70      	pop	{r4, r5, r6, pc}
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
   27cae:	7a2b      	ldrb	r3, [r5, #8]
	return -ENODATA;
   27cb0:	f013 0f0f 	tst.w	r3, #15
   27cb4:	bf14      	ite	ne
   27cb6:	2400      	movne	r4, #0
   27cb8:	f06f 043c 	mvneq.w	r4, #60	; 0x3c
   27cbc:	e7f5      	b.n	27caa <lis2dh_sample_fetch+0x4a>
   27cbe:	bf00      	nop
   27cc0:	00040a84 	.word	0x00040a84
   27cc4:	0003f0e1 	.word	0x0003f0e1
   27cc8:	00040a52 	.word	0x00040a52
   27ccc:	0003e4e8 	.word	0x0003e4e8
   27cd0:	0003e468 	.word	0x0003e468
   27cd4:	00040abd 	.word	0x00040abd

00027cd8 <lis2dh_i2c_init>:

int lis2dh_i2c_init(const struct device *dev)
{
	struct lis2dh_data *data = dev->data;

	data->hw_tf = &lis2dh_i2c_transfer_fn;
   27cd8:	6903      	ldr	r3, [r0, #16]
   27cda:	4a02      	ldr	r2, [pc, #8]	; (27ce4 <lis2dh_i2c_init+0xc>)

	return 0;
}
   27cdc:	2000      	movs	r0, #0
	data->hw_tf = &lis2dh_i2c_transfer_fn;
   27cde:	605a      	str	r2, [r3, #4]
}
   27ce0:	4770      	bx	lr
   27ce2:	bf00      	nop
   27ce4:	0003e9b8 	.word	0x0003e9b8

00027ce8 <gpio_pin_set.isra.0>:
 *
 * @retval 0 If successful.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   27ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   27cec:	2501      	movs	r5, #1
   27cee:	6843      	ldr	r3, [r0, #4]
   27cf0:	408d      	lsls	r5, r1
   27cf2:	681b      	ldr	r3, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   27cf4:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   27cf6:	421d      	tst	r5, r3
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   27cf8:	4616      	mov	r6, r2
	const struct gpio_driver_data *const data =
   27cfa:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   27cfc:	d10e      	bne.n	27d1c <gpio_pin_set.isra.0+0x34>
   27cfe:	4919      	ldr	r1, [pc, #100]	; (27d64 <gpio_pin_set.isra.0+0x7c>)
   27d00:	f240 43ae 	movw	r3, #1198	; 0x4ae
   27d04:	4a18      	ldr	r2, [pc, #96]	; (27d68 <gpio_pin_set.isra.0+0x80>)
   27d06:	4819      	ldr	r0, [pc, #100]	; (27d6c <gpio_pin_set.isra.0+0x84>)
   27d08:	f011 fa57 	bl	391ba <printk>
   27d0c:	4818      	ldr	r0, [pc, #96]	; (27d70 <gpio_pin_set.isra.0+0x88>)
   27d0e:	f011 fa54 	bl	391ba <printk>
   27d12:	f240 41ae 	movw	r1, #1198	; 0x4ae
   27d16:	4814      	ldr	r0, [pc, #80]	; (27d68 <gpio_pin_set.isra.0+0x80>)
   27d18:	f011 fca6 	bl	39668 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   27d1c:	683b      	ldr	r3, [r7, #0]
   27d1e:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   27d20:	6863      	ldr	r3, [r4, #4]
   27d22:	bf18      	it	ne
   27d24:	f086 0601 	eorne.w	r6, r6, #1
   27d28:	681b      	ldr	r3, [r3, #0]
   27d2a:	421d      	tst	r5, r3
   27d2c:	d10e      	bne.n	27d4c <gpio_pin_set.isra.0+0x64>
   27d2e:	490d      	ldr	r1, [pc, #52]	; (27d64 <gpio_pin_set.isra.0+0x7c>)
   27d30:	f240 4384 	movw	r3, #1156	; 0x484
   27d34:	4a0c      	ldr	r2, [pc, #48]	; (27d68 <gpio_pin_set.isra.0+0x80>)
   27d36:	480d      	ldr	r0, [pc, #52]	; (27d6c <gpio_pin_set.isra.0+0x84>)
   27d38:	f011 fa3f 	bl	391ba <printk>
   27d3c:	480c      	ldr	r0, [pc, #48]	; (27d70 <gpio_pin_set.isra.0+0x88>)
   27d3e:	f011 fa3c 	bl	391ba <printk>
   27d42:	f240 4184 	movw	r1, #1156	; 0x484
   27d46:	4808      	ldr	r0, [pc, #32]	; (27d68 <gpio_pin_set.isra.0+0x80>)
   27d48:	f011 fc8e 	bl	39668 <assert_post_action>
	if (value != 0)	{
   27d4c:	b136      	cbz	r6, 27d5c <gpio_pin_set.isra.0+0x74>
	return api->port_set_bits_raw(port, pins);
   27d4e:	68a3      	ldr	r3, [r4, #8]
   27d50:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   27d52:	4629      	mov	r1, r5
   27d54:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   27d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   27d5a:	4718      	bx	r3
   27d5c:	68a3      	ldr	r3, [r4, #8]
   27d5e:	691b      	ldr	r3, [r3, #16]
   27d60:	e7f7      	b.n	27d52 <gpio_pin_set.isra.0+0x6a>
   27d62:	bf00      	nop
   27d64:	00040291 	.word	0x00040291
   27d68:	00040267 	.word	0x00040267
   27d6c:	0003f0e1 	.word	0x0003f0e1
   27d70:	000402cf 	.word	0x000402cf

00027d74 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   27d74:	b538      	push	{r3, r4, r5, lr}
   27d76:	4604      	mov	r4, r0
   27d78:	2200      	movs	r2, #0
   27d7a:	2101      	movs	r1, #1
   27d7c:	200b      	movs	r0, #11
   27d7e:	f7fd fdc3 	bl	25908 <z_arm_irq_priority_set>
	return dev->data;
   27d82:	6923      	ldr	r3, [r4, #16]
	return dev->config;
   27d84:	6860      	ldr	r0, [r4, #4]
	data->dev = dev;
   27d86:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
   27d88:	4a0d      	ldr	r2, [pc, #52]	; (27dc0 <spi_3_init+0x4c>)
   27d8a:	f100 0110 	add.w	r1, r0, #16
   27d8e:	f003 fe8f 	bl	2bab0 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   27d92:	4b0c      	ldr	r3, [pc, #48]	; (27dc4 <spi_3_init+0x50>)
   27d94:	4298      	cmp	r0, r3
   27d96:	d011      	beq.n	27dbc <spi_3_init+0x48>
   27d98:	4b0b      	ldr	r3, [pc, #44]	; (27dc8 <spi_3_init+0x54>)
   27d9a:	4a0c      	ldr	r2, [pc, #48]	; (27dcc <spi_3_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   27d9c:	6821      	ldr	r1, [r4, #0]
   27d9e:	1ad2      	subs	r2, r2, r3
   27da0:	08d2      	lsrs	r2, r2, #3
   27da2:	0192      	lsls	r2, r2, #6
   27da4:	480a      	ldr	r0, [pc, #40]	; (27dd0 <spi_3_init+0x5c>)
   27da6:	f042 0201 	orr.w	r2, r2, #1
   27daa:	f011 fcb3 	bl	39714 <log_1>
		return -EBUSY;
   27dae:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPIM_DEVICE(3);
   27db2:	6920      	ldr	r0, [r4, #16]
   27db4:	f012 fc87 	bl	3a6c6 <spi_context_unlock_unconditionally>
   27db8:	4628      	mov	r0, r5
   27dba:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   27dbc:	2500      	movs	r5, #0
   27dbe:	e7f8      	b.n	27db2 <spi_3_init+0x3e>
   27dc0:	00027ea5 	.word	0x00027ea5
   27dc4:	0bad0000 	.word	0x0bad0000
   27dc8:	0003e468 	.word	0x0003e468
   27dcc:	0003e560 	.word	0x0003e560
   27dd0:	000408d0 	.word	0x000408d0

00027dd4 <transfer_next_chunk>:
{
   27dd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return dev->data;
   27dd8:	6905      	ldr	r5, [r0, #16]
	return dev->config;
   27dda:	6847      	ldr	r7, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   27ddc:	6d2c      	ldr	r4, [r5, #80]	; 0x50
		return ctx->rx_len;
   27dde:	6dae      	ldr	r6, [r5, #88]	; 0x58
	if (!ctx->tx_len) {
   27de0:	b984      	cbnz	r4, 27e04 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   27de2:	bb36      	cbnz	r6, 27e32 <transfer_next_chunk+0x5e>
	_spi_context_cs_control(ctx, on, false);
   27de4:	2200      	movs	r2, #0
   27de6:	4628      	mov	r0, r5
   27de8:	4611      	mov	r1, r2
   27dea:	f012 fc47 	bl	3a67c <_spi_context_cs_control>
	ctx->sync_status = status;
   27dee:	63ae      	str	r6, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   27df0:	f105 0020 	add.w	r0, r5, #32
   27df4:	f00c fd62 	bl	348bc <z_impl_k_sem_give>
	dev_data->busy = false;
   27df8:	2300      	movs	r3, #0
   27dfa:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   27dfe:	b004      	add	sp, #16
   27e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   27e04:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
	} else if (!ctx->rx_len) {
   27e06:	b986      	cbnz	r6, 27e2a <transfer_next_chunk+0x56>
	return !!(ctx->tx_buf && ctx->tx_len);
   27e08:	b9d9      	cbnz	r1, 27e42 <transfer_next_chunk+0x6e>
		if (chunk_len > dev_config->max_chunk_len) {
   27e0a:	68bb      	ldr	r3, [r7, #8]
   27e0c:	f04f 0800 	mov.w	r8, #0
   27e10:	42a3      	cmp	r3, r4
   27e12:	bf28      	it	cs
   27e14:	4623      	movcs	r3, r4
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   27e16:	4644      	mov	r4, r8
		if (chunk_len > dev_config->max_chunk_len) {
   27e18:	4619      	mov	r1, r3
		xfer.p_rx_buffer = ctx->rx_buf;
   27e1a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   27e1c:	e9cd 8400 	strd	r8, r4, [sp]
		dev_data->chunk_len = chunk_len;
   27e20:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_rx_buffer = ctx->rx_buf;
   27e22:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   27e24:	b342      	cbz	r2, 27e78 <transfer_next_chunk+0xa4>
   27e26:	b33e      	cbz	r6, 27e78 <transfer_next_chunk+0xa4>
   27e28:	e027      	b.n	27e7a <transfer_next_chunk+0xa6>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   27e2a:	42b4      	cmp	r4, r6
   27e2c:	bf28      	it	cs
   27e2e:	4634      	movcs	r4, r6
   27e30:	e7ea      	b.n	27e08 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   27e32:	68bb      	ldr	r3, [r7, #8]
   27e34:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
	return !!(ctx->tx_buf && ctx->tx_len);
   27e36:	42b3      	cmp	r3, r6
   27e38:	bf28      	it	cs
   27e3a:	4633      	movcs	r3, r6
   27e3c:	b9b1      	cbnz	r1, 27e6c <transfer_next_chunk+0x98>
   27e3e:	4634      	mov	r4, r6
   27e40:	e7e3      	b.n	27e0a <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   27e42:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   27e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   27e4a:	d022      	beq.n	27e92 <transfer_next_chunk+0xbe>
			if (chunk_len > sizeof(dev_data->buffer)) {
   27e4c:	2c08      	cmp	r4, #8
   27e4e:	bf28      	it	cs
   27e50:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   27e52:	f105 0865 	add.w	r8, r5, #101	; 0x65
   27e56:	4622      	mov	r2, r4
   27e58:	4640      	mov	r0, r8
   27e5a:	f015 fc07 	bl	3d66c <memcpy>
		if (chunk_len > dev_config->max_chunk_len) {
   27e5e:	68bb      	ldr	r3, [r7, #8]
   27e60:	429c      	cmp	r4, r3
   27e62:	bf28      	it	cs
   27e64:	461c      	movcs	r4, r3
   27e66:	4621      	mov	r1, r4
   27e68:	4623      	mov	r3, r4
   27e6a:	e7d6      	b.n	27e1a <transfer_next_chunk+0x46>
		xfer.p_rx_buffer = ctx->rx_buf;
   27e6c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   27e6e:	e9cd 1400 	strd	r1, r4, [sp]
		dev_data->chunk_len = chunk_len;
   27e72:	662b      	str	r3, [r5, #96]	; 0x60
		xfer.p_rx_buffer = ctx->rx_buf;
   27e74:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   27e76:	b902      	cbnz	r2, 27e7a <transfer_next_chunk+0xa6>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   27e78:	2300      	movs	r3, #0
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   27e7a:	2200      	movs	r2, #0
   27e7c:	4669      	mov	r1, sp
   27e7e:	4638      	mov	r0, r7
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   27e80:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   27e82:	f003 fed9 	bl	2bc38 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   27e86:	4b06      	ldr	r3, [pc, #24]	; (27ea0 <transfer_next_chunk+0xcc>)
   27e88:	4298      	cmp	r0, r3
   27e8a:	d0b8      	beq.n	27dfe <transfer_next_chunk+0x2a>
			error = -EIO;
   27e8c:	f06f 0604 	mvn.w	r6, #4
   27e90:	e7a8      	b.n	27de4 <transfer_next_chunk+0x10>
		if (chunk_len > dev_config->max_chunk_len) {
   27e92:	68bb      	ldr	r3, [r7, #8]
   27e94:	4688      	mov	r8, r1
   27e96:	429c      	cmp	r4, r3
   27e98:	bf28      	it	cs
   27e9a:	461c      	movcs	r4, r3
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   27e9c:	e7e3      	b.n	27e66 <transfer_next_chunk+0x92>
   27e9e:	bf00      	nop
   27ea0:	0bad0000 	.word	0x0bad0000

00027ea4 <event_handler>:
{
   27ea4:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   27ea6:	7803      	ldrb	r3, [r0, #0]
{
   27ea8:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   27eaa:	2b00      	cmp	r3, #0
   27eac:	d14e      	bne.n	27f4c <event_handler+0xa8>
	if (!ctx->tx_len) {
   27eae:	6d0b      	ldr	r3, [r1, #80]	; 0x50
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   27eb0:	6e0a      	ldr	r2, [r1, #96]	; 0x60
   27eb2:	b15b      	cbz	r3, 27ecc <event_handler+0x28>
	if (len > ctx->tx_len) {
   27eb4:	429a      	cmp	r2, r3
   27eb6:	d91d      	bls.n	27ef4 <event_handler+0x50>
   27eb8:	4925      	ldr	r1, [pc, #148]	; (27f50 <event_handler+0xac>)
   27eba:	4b26      	ldr	r3, [pc, #152]	; (27f54 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   27ebc:	4826      	ldr	r0, [pc, #152]	; (27f58 <event_handler+0xb4>)
   27ebe:	1ac9      	subs	r1, r1, r3
   27ec0:	08c9      	lsrs	r1, r1, #3
   27ec2:	0189      	lsls	r1, r1, #6
   27ec4:	f041 0101 	orr.w	r1, r1, #1
   27ec8:	f011 fc17 	bl	396fa <log_0>
	if (!ctx->rx_len) {
   27ecc:	6da3      	ldr	r3, [r4, #88]	; 0x58
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   27ece:	6e22      	ldr	r2, [r4, #96]	; 0x60
   27ed0:	b15b      	cbz	r3, 27eea <event_handler+0x46>
	if (len > ctx->rx_len) {
   27ed2:	429a      	cmp	r2, r3
   27ed4:	d924      	bls.n	27f20 <event_handler+0x7c>
   27ed6:	491e      	ldr	r1, [pc, #120]	; (27f50 <event_handler+0xac>)
   27ed8:	4b1e      	ldr	r3, [pc, #120]	; (27f54 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   27eda:	481f      	ldr	r0, [pc, #124]	; (27f58 <event_handler+0xb4>)
   27edc:	1ac9      	subs	r1, r1, r3
   27ede:	08c9      	lsrs	r1, r1, #3
   27ee0:	0189      	lsls	r1, r1, #6
   27ee2:	f041 0101 	orr.w	r1, r1, #1
   27ee6:	f011 fc08 	bl	396fa <log_0>
		transfer_next_chunk(dev_data->dev);
   27eea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   27eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   27ef0:	f7ff bf70 	b.w	27dd4 <transfer_next_chunk>
	ctx->tx_len -= len;
   27ef4:	1a9b      	subs	r3, r3, r2
   27ef6:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   27ef8:	b963      	cbnz	r3, 27f14 <event_handler+0x70>
		ctx->tx_count--;
   27efa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   27efc:	3b01      	subs	r3, #1
   27efe:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   27f00:	b163      	cbz	r3, 27f1c <event_handler+0x78>
			ctx->current_tx++;
   27f02:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   27f04:	f103 0208 	add.w	r2, r3, #8
   27f08:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   27f0a:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   27f0c:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   27f0e:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   27f10:	650b      	str	r3, [r1, #80]	; 0x50
   27f12:	e7db      	b.n	27ecc <event_handler+0x28>
	} else if (ctx->tx_buf) {
   27f14:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   27f16:	2b00      	cmp	r3, #0
   27f18:	d0d8      	beq.n	27ecc <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   27f1a:	4413      	add	r3, r2
   27f1c:	64e3      	str	r3, [r4, #76]	; 0x4c
   27f1e:	e7d5      	b.n	27ecc <event_handler+0x28>
	ctx->rx_len -= len;
   27f20:	1a9b      	subs	r3, r3, r2
   27f22:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   27f24:	b963      	cbnz	r3, 27f40 <event_handler+0x9c>
		ctx->rx_count--;
   27f26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   27f28:	3b01      	subs	r3, #1
   27f2a:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   27f2c:	b163      	cbz	r3, 27f48 <event_handler+0xa4>
			ctx->current_rx++;
   27f2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   27f30:	f103 0208 	add.w	r2, r3, #8
   27f34:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   27f36:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   27f38:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   27f3a:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   27f3c:	65a3      	str	r3, [r4, #88]	; 0x58
   27f3e:	e7d4      	b.n	27eea <event_handler+0x46>
	} else if (ctx->rx_buf) {
   27f40:	6d63      	ldr	r3, [r4, #84]	; 0x54
   27f42:	2b00      	cmp	r3, #0
   27f44:	d0d1      	beq.n	27eea <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   27f46:	4413      	add	r3, r2
   27f48:	6563      	str	r3, [r4, #84]	; 0x54
   27f4a:	e7ce      	b.n	27eea <event_handler+0x46>
}
   27f4c:	bd10      	pop	{r4, pc}
   27f4e:	bf00      	nop
   27f50:	0003e560 	.word	0x0003e560
   27f54:	0003e468 	.word	0x0003e468
   27f58:	00040b1c 	.word	0x00040b1c

00027f5c <spi_nrfx_transceive>:
{
   27f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f60:	461d      	mov	r5, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   27f62:	888b      	ldrh	r3, [r1, #4]
   27f64:	460f      	mov	r7, r1
   27f66:	0459      	lsls	r1, r3, #17
   27f68:	4681      	mov	r9, r0
   27f6a:	4616      	mov	r6, r2
	return dev->data;
   27f6c:	6904      	ldr	r4, [r0, #16]
{
   27f6e:	b087      	sub	sp, #28
   27f70:	d431      	bmi.n	27fd6 <spi_nrfx_transceive+0x7a>
	return z_impl_k_sem_take(sem, timeout);
   27f72:	f04f 32ff 	mov.w	r2, #4294967295
   27f76:	f04f 33ff 	mov.w	r3, #4294967295
   27f7a:	f104 0008 	add.w	r0, r4, #8
   27f7e:	f00c fce1 	bl	34944 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   27f82:	6067      	str	r7, [r4, #4]
	return dev->data;
   27f84:	f8d9 8010 	ldr.w	r8, [r9, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
   27f88:	f8d8 3000 	ldr.w	r3, [r8]
   27f8c:	429f      	cmp	r7, r3
   27f8e:	f000 8119 	beq.w	281c4 <spi_nrfx_transceive+0x268>
	return dev->config;
   27f92:	f8d9 3004 	ldr.w	r3, [r9, #4]
   27f96:	9302      	str	r3, [sp, #8]
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   27f98:	88bb      	ldrh	r3, [r7, #4]
   27f9a:	07da      	lsls	r2, r3, #31
   27f9c:	d522      	bpl.n	27fe4 <spi_nrfx_transceive+0x88>
   27f9e:	4ab2      	ldr	r2, [pc, #712]	; (28268 <spi_nrfx_transceive+0x30c>)
   27fa0:	4bb2      	ldr	r3, [pc, #712]	; (2826c <spi_nrfx_transceive+0x310>)
		LOG_ERR("Slave mode is not supported on %s",
   27fa2:	f8d9 1000 	ldr.w	r1, [r9]
   27fa6:	1ad2      	subs	r2, r2, r3
   27fa8:	08d2      	lsrs	r2, r2, #3
   27faa:	0192      	lsls	r2, r2, #6
   27fac:	48b0      	ldr	r0, [pc, #704]	; (28270 <spi_nrfx_transceive+0x314>)
   27fae:	f042 0201 	orr.w	r2, r2, #1
   27fb2:	f011 fbaf 	bl	39714 <log_1>
		return -EINVAL;
   27fb6:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   27fba:	6823      	ldr	r3, [r4, #0]
   27fbc:	889b      	ldrh	r3, [r3, #4]
   27fbe:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   27fc2:	d104      	bne.n	27fce <spi_nrfx_transceive+0x72>
		ctx->owner = NULL;
   27fc4:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   27fc6:	f104 0008 	add.w	r0, r4, #8
   27fca:	f00c fc77 	bl	348bc <z_impl_k_sem_give>
}
   27fce:	4628      	mov	r0, r5
   27fd0:	b007      	add	sp, #28
   27fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   27fd6:	6923      	ldr	r3, [r4, #16]
   27fd8:	2b00      	cmp	r3, #0
   27fda:	d1ca      	bne.n	27f72 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   27fdc:	6863      	ldr	r3, [r4, #4]
   27fde:	429f      	cmp	r7, r3
   27fe0:	d1c7      	bne.n	27f72 <spi_nrfx_transceive+0x16>
   27fe2:	e7cf      	b.n	27f84 <spi_nrfx_transceive+0x28>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   27fe4:	0718      	lsls	r0, r3, #28
   27fe6:	d50a      	bpl.n	27ffe <spi_nrfx_transceive+0xa2>
   27fe8:	499f      	ldr	r1, [pc, #636]	; (28268 <spi_nrfx_transceive+0x30c>)
   27fea:	4ba0      	ldr	r3, [pc, #640]	; (2826c <spi_nrfx_transceive+0x310>)
		LOG_ERR("Loopback mode is not supported");
   27fec:	48a1      	ldr	r0, [pc, #644]	; (28274 <spi_nrfx_transceive+0x318>)
   27fee:	1ac9      	subs	r1, r1, r3
   27ff0:	08c9      	lsrs	r1, r1, #3
   27ff2:	0189      	lsls	r1, r1, #6
   27ff4:	f041 0101 	orr.w	r1, r1, #1
   27ff8:	f011 fb7f 	bl	396fa <log_0>
	if (error == 0) {
   27ffc:	e7db      	b.n	27fb6 <spi_nrfx_transceive+0x5a>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   27ffe:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   28002:	d008      	beq.n	28016 <spi_nrfx_transceive+0xba>
   28004:	4998      	ldr	r1, [pc, #608]	; (28268 <spi_nrfx_transceive+0x30c>)
   28006:	4b99      	ldr	r3, [pc, #612]	; (2826c <spi_nrfx_transceive+0x310>)
		LOG_ERR("Only single line mode is supported");
   28008:	489b      	ldr	r0, [pc, #620]	; (28278 <spi_nrfx_transceive+0x31c>)
   2800a:	1ac9      	subs	r1, r1, r3
   2800c:	08c9      	lsrs	r1, r1, #3
   2800e:	0189      	lsls	r1, r1, #6
   28010:	f041 0101 	orr.w	r1, r1, #1
   28014:	e7f0      	b.n	27ff8 <spi_nrfx_transceive+0x9c>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   28016:	f3c3 1245 	ubfx	r2, r3, #5, #6
   2801a:	2a08      	cmp	r2, #8
   2801c:	d008      	beq.n	28030 <spi_nrfx_transceive+0xd4>
   2801e:	4992      	ldr	r1, [pc, #584]	; (28268 <spi_nrfx_transceive+0x30c>)
   28020:	4b92      	ldr	r3, [pc, #584]	; (2826c <spi_nrfx_transceive+0x310>)
		LOG_ERR("Word sizes other than 8 bits"
   28022:	4896      	ldr	r0, [pc, #600]	; (2827c <spi_nrfx_transceive+0x320>)
   28024:	1ac9      	subs	r1, r1, r3
   28026:	08c9      	lsrs	r1, r1, #3
   28028:	0189      	lsls	r1, r1, #6
   2802a:	f041 0101 	orr.w	r1, r1, #1
   2802e:	e7e3      	b.n	27ff8 <spi_nrfx_transceive+0x9c>
	if (spi_cfg->frequency < 125000) {
   28030:	6839      	ldr	r1, [r7, #0]
   28032:	4a93      	ldr	r2, [pc, #588]	; (28280 <spi_nrfx_transceive+0x324>)
   28034:	4291      	cmp	r1, r2
   28036:	d808      	bhi.n	2804a <spi_nrfx_transceive+0xee>
   28038:	498b      	ldr	r1, [pc, #556]	; (28268 <spi_nrfx_transceive+0x30c>)
   2803a:	4b8c      	ldr	r3, [pc, #560]	; (2826c <spi_nrfx_transceive+0x310>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   2803c:	4891      	ldr	r0, [pc, #580]	; (28284 <spi_nrfx_transceive+0x328>)
   2803e:	1ac9      	subs	r1, r1, r3
   28040:	08c9      	lsrs	r1, r1, #3
   28042:	0189      	lsls	r1, r1, #6
   28044:	f041 0101 	orr.w	r1, r1, #1
   28048:	e7d6      	b.n	27ff8 <spi_nrfx_transceive+0x9c>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   2804a:	68ba      	ldr	r2, [r7, #8]
	ctx->config = spi_cfg;
   2804c:	f8c8 7000 	str.w	r7, [r8]
   28050:	2a00      	cmp	r2, #0
   28052:	f000 813b 	beq.w	282cc <spi_nrfx_transceive+0x370>
   28056:	6811      	ldr	r1, [r2, #0]
   28058:	2900      	cmp	r1, #0
   2805a:	f000 8137 	beq.w	282cc <spi_nrfx_transceive+0x370>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   2805e:	43db      	mvns	r3, r3
		__ASSERT(spi_context_cs_active_level(ctx) ==
   28060:	7a52      	ldrb	r2, [r2, #9]
   28062:	f3c3 33c0 	ubfx	r3, r3, #15, #1
   28066:	f002 0201 	and.w	r2, r2, #1
   2806a:	4293      	cmp	r3, r2
   2806c:	d00c      	beq.n	28088 <spi_nrfx_transceive+0x12c>
   2806e:	4986      	ldr	r1, [pc, #536]	; (28288 <spi_nrfx_transceive+0x32c>)
   28070:	23be      	movs	r3, #190	; 0xbe
   28072:	4a86      	ldr	r2, [pc, #536]	; (2828c <spi_nrfx_transceive+0x330>)
   28074:	4886      	ldr	r0, [pc, #536]	; (28290 <spi_nrfx_transceive+0x334>)
   28076:	f011 f8a0 	bl	391ba <printk>
   2807a:	4886      	ldr	r0, [pc, #536]	; (28294 <spi_nrfx_transceive+0x338>)
   2807c:	f011 f89d 	bl	391ba <printk>
   28080:	21be      	movs	r1, #190	; 0xbe
   28082:	4882      	ldr	r0, [pc, #520]	; (2828c <spi_nrfx_transceive+0x330>)
   28084:	f011 faf0 	bl	39668 <assert_post_action>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   28088:	f8d8 3000 	ldr.w	r3, [r8]
   2808c:	689b      	ldr	r3, [r3, #8]
				   ctx->config->cs->gpio_pin,
   2808e:	7a1a      	ldrb	r2, [r3, #8]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   28090:	f8d3 b000 	ldr.w	fp, [r3]
				   ctx->config->cs->gpio_dt_flags |
   28094:	f893 8009 	ldrb.w	r8, [r3, #9]
				   ctx->config->cs->gpio_pin,
   28098:	9200      	str	r2, [sp, #0]
	const struct gpio_driver_api *api =
   2809a:	f8db 3008 	ldr.w	r3, [fp, #8]
   2809e:	9303      	str	r3, [sp, #12]
	const struct gpio_driver_config *const cfg =
   280a0:	f8db 3004 	ldr.w	r3, [fp, #4]
   280a4:	9304      	str	r3, [sp, #16]
	struct gpio_driver_data *data =
   280a6:	f8db 3010 	ldr.w	r3, [fp, #16]
   280aa:	9301      	str	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   280ac:	f008 0330 	and.w	r3, r8, #48	; 0x30
   280b0:	2b30      	cmp	r3, #48	; 0x30
   280b2:	d10e      	bne.n	280d2 <spi_nrfx_transceive+0x176>
   280b4:	4978      	ldr	r1, [pc, #480]	; (28298 <spi_nrfx_transceive+0x33c>)
   280b6:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   280ba:	4a78      	ldr	r2, [pc, #480]	; (2829c <spi_nrfx_transceive+0x340>)
   280bc:	4874      	ldr	r0, [pc, #464]	; (28290 <spi_nrfx_transceive+0x334>)
   280be:	f011 f87c 	bl	391ba <printk>
   280c2:	4877      	ldr	r0, [pc, #476]	; (282a0 <spi_nrfx_transceive+0x344>)
   280c4:	f011 f879 	bl	391ba <printk>
   280c8:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   280cc:	4873      	ldr	r0, [pc, #460]	; (2829c <spi_nrfx_transceive+0x340>)
   280ce:	f011 facb 	bl	39668 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   280d2:	f008 0306 	and.w	r3, r8, #6
   280d6:	2b04      	cmp	r3, #4
   280d8:	d10b      	bne.n	280f2 <spi_nrfx_transceive+0x196>
   280da:	4972      	ldr	r1, [pc, #456]	; (282a4 <spi_nrfx_transceive+0x348>)
   280dc:	486c      	ldr	r0, [pc, #432]	; (28290 <spi_nrfx_transceive+0x334>)
   280de:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   280e2:	4a6e      	ldr	r2, [pc, #440]	; (2829c <spi_nrfx_transceive+0x340>)
   280e4:	f011 f869 	bl	391ba <printk>
   280e8:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   280ec:	486b      	ldr	r0, [pc, #428]	; (2829c <spi_nrfx_transceive+0x340>)
   280ee:	f011 fabb 	bl	39668 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   280f2:	f04f 0a01 	mov.w	sl, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   280f6:	f018 0f01 	tst.w	r8, #1
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   280fa:	bf0c      	ite	eq
   280fc:	f448 58b0 	orreq.w	r8, r8, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   28100:	f488 58d0 	eorne.w	r8, r8, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   28104:	f428 5380 	bic.w	r3, r8, #4096	; 0x1000
   28108:	9305      	str	r3, [sp, #20]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2810a:	9b00      	ldr	r3, [sp, #0]
   2810c:	fa0a fa03 	lsl.w	sl, sl, r3
   28110:	9b04      	ldr	r3, [sp, #16]
   28112:	681b      	ldr	r3, [r3, #0]
   28114:	ea1a 0f03 	tst.w	sl, r3
   28118:	d10e      	bne.n	28138 <spi_nrfx_transceive+0x1dc>
   2811a:	4963      	ldr	r1, [pc, #396]	; (282a8 <spi_nrfx_transceive+0x34c>)
   2811c:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   28120:	4a5e      	ldr	r2, [pc, #376]	; (2829c <spi_nrfx_transceive+0x340>)
   28122:	485b      	ldr	r0, [pc, #364]	; (28290 <spi_nrfx_transceive+0x334>)
   28124:	f011 f849 	bl	391ba <printk>
   28128:	4860      	ldr	r0, [pc, #384]	; (282ac <spi_nrfx_transceive+0x350>)
   2812a:	f011 f846 	bl	391ba <printk>
   2812e:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   28132:	485a      	ldr	r0, [pc, #360]	; (2829c <spi_nrfx_transceive+0x340>)
   28134:	f011 fa98 	bl	39668 <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   28138:	9b01      	ldr	r3, [sp, #4]
   2813a:	9a01      	ldr	r2, [sp, #4]
   2813c:	681b      	ldr	r3, [r3, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2813e:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   28142:	bf14      	ite	ne
   28144:	ea4a 0303 	orrne.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   28148:	ea23 030a 	biceq.w	r3, r3, sl
   2814c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   2814e:	9b03      	ldr	r3, [sp, #12]
   28150:	4658      	mov	r0, fp
   28152:	681b      	ldr	r3, [r3, #0]
   28154:	9a05      	ldr	r2, [sp, #20]
   28156:	9900      	ldr	r1, [sp, #0]
   28158:	4798      	blx	r3
	freq = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   2815a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2815e:	683a      	ldr	r2, [r7, #0]
   28160:	68db      	ldr	r3, [r3, #12]
   28162:	4293      	cmp	r3, r2
   28164:	bf28      	it	cs
   28166:	4613      	movcs	r3, r2
	if (frequency < 250000) {
   28168:	4a51      	ldr	r2, [pc, #324]	; (282b0 <spi_nrfx_transceive+0x354>)
   2816a:	4293      	cmp	r3, r2
   2816c:	f240 80b9 	bls.w	282e2 <spi_nrfx_transceive+0x386>
	} else if (frequency < 500000) {
   28170:	4a50      	ldr	r2, [pc, #320]	; (282b4 <spi_nrfx_transceive+0x358>)
   28172:	4293      	cmp	r3, r2
   28174:	f240 80b8 	bls.w	282e8 <spi_nrfx_transceive+0x38c>
	} else if (frequency < 1000000) {
   28178:	4a4f      	ldr	r2, [pc, #316]	; (282b8 <spi_nrfx_transceive+0x35c>)
   2817a:	4293      	cmp	r3, r2
   2817c:	f240 80b7 	bls.w	282ee <spi_nrfx_transceive+0x392>
	} else if (frequency < 2000000) {
   28180:	4a4e      	ldr	r2, [pc, #312]	; (282bc <spi_nrfx_transceive+0x360>)
   28182:	4293      	cmp	r3, r2
   28184:	f240 80b6 	bls.w	282f4 <spi_nrfx_transceive+0x398>
	} else if (frequency < 4000000) {
   28188:	4a4d      	ldr	r2, [pc, #308]	; (282c0 <spi_nrfx_transceive+0x364>)
   2818a:	4293      	cmp	r3, r2
   2818c:	f240 80b5 	bls.w	282fa <spi_nrfx_transceive+0x39e>
		return NRF_SPIM_FREQ_4M;
   28190:	4a4c      	ldr	r2, [pc, #304]	; (282c4 <spi_nrfx_transceive+0x368>)
   28192:	4293      	cmp	r3, r2
   28194:	bf2c      	ite	cs
   28196:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
   2819a:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
			   get_nrf_spim_mode(spi_cfg->operation),
   2819e:	88b9      	ldrh	r1, [r7, #4]
	nrf_spim_configure(spim->p_reg,
   281a0:	9a02      	ldr	r2, [sp, #8]
   281a2:	f001 0704 	and.w	r7, r1, #4
   281a6:	6810      	ldr	r0, [r2, #0]
	if (operation & SPI_TRANSFER_LSB) {
   281a8:	f3c1 1200 	ubfx	r2, r1, #4, #1
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   281ac:	0789      	lsls	r1, r1, #30
   281ae:	f140 80a7 	bpl.w	28300 <spi_nrfx_transceive+0x3a4>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   281b2:	2f00      	cmp	r7, #0
   281b4:	f000 80aa 	beq.w	2830c <spi_nrfx_transceive+0x3b0>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   281b8:	f042 0206 	orr.w	r2, r2, #6
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   281bc:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
    p_reg->FREQUENCY = (uint32_t)frequency;
   281c0:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
		dev_data->busy = true;
   281c4:	2301      	movs	r3, #1
   281c6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   281ca:	2e00      	cmp	r6, #0
   281cc:	f000 80a1 	beq.w	28312 <spi_nrfx_transceive+0x3b6>
		ctx->current_tx = tx_bufs->buffers;
   281d0:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
   281d2:	6872      	ldr	r2, [r6, #4]
		ctx->tx_len = ctx->current_tx->len / dfs;
   281d4:	685e      	ldr	r6, [r3, #4]
		ctx->tx_count = tx_bufs->count;
   281d6:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   281d8:	681a      	ldr	r2, [r3, #0]
		ctx->current_tx = tx_bufs->buffers;
   281da:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   281dc:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   281de:	6526      	str	r6, [r4, #80]	; 0x50
	if (rx_bufs) {
   281e0:	2d00      	cmp	r5, #0
   281e2:	f000 809a 	beq.w	2831a <spi_nrfx_transceive+0x3be>
		ctx->current_rx = rx_bufs->buffers;
   281e6:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
   281e8:	686a      	ldr	r2, [r5, #4]
		ctx->rx_len = ctx->current_rx->len / dfs;
   281ea:	685d      	ldr	r5, [r3, #4]
		ctx->rx_count = rx_bufs->count;
   281ec:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   281ee:	681a      	ldr	r2, [r3, #0]
		ctx->current_rx = rx_bufs->buffers;
   281f0:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   281f2:	6562      	str	r2, [r4, #84]	; 0x54
	ctx->sync_status = 0;
   281f4:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   281f6:	2101      	movs	r1, #1
   281f8:	4632      	mov	r2, r6
   281fa:	4620      	mov	r0, r4
		ctx->rx_len = ctx->current_rx->len / dfs;
   281fc:	65a5      	str	r5, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   281fe:	63a6      	str	r6, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   28200:	f012 fa3c 	bl	3a67c <_spi_context_cs_control>
		transfer_next_chunk(dev);
   28204:	4648      	mov	r0, r9
   28206:	f7ff fde5 	bl	27dd4 <transfer_next_chunk>
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2820a:	6da5      	ldr	r5, [r4, #88]	; 0x58
   2820c:	6d23      	ldr	r3, [r4, #80]	; 0x50
		     ctx->config->frequency;
   2820e:	4627      	mov	r7, r4
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   28210:	429d      	cmp	r5, r3
   28212:	bf38      	it	cc
   28214:	461d      	movcc	r5, r3
   28216:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   2821a:	435d      	muls	r5, r3
		     ctx->config->frequency;
   2821c:	f857 3b20 	ldr.w	r3, [r7], #32
   28220:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   28224:	681b      	ldr	r3, [r3, #0]
   28226:	4631      	mov	r1, r6
   28228:	fbb5 f5f3 	udiv	r5, r5, r3
   2822c:	f240 30e7 	movw	r0, #999	; 0x3e7
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   28230:	35c8      	adds	r5, #200	; 0xc8
   28232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28236:	2300      	movs	r3, #0
   28238:	fbe5 010c 	umlal	r0, r1, r5, ip
   2823c:	f7f8 ffcc 	bl	211d8 <__aeabi_uldivmod>
   28240:	4602      	mov	r2, r0
   28242:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   28244:	4638      	mov	r0, r7
   28246:	f00c fb7d 	bl	34944 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
   2824a:	2800      	cmp	r0, #0
   2824c:	d069      	beq.n	28322 <spi_nrfx_transceive+0x3c6>
   2824e:	4b07      	ldr	r3, [pc, #28]	; (2826c <spi_nrfx_transceive+0x310>)
   28250:	4905      	ldr	r1, [pc, #20]	; (28268 <spi_nrfx_transceive+0x30c>)
		LOG_ERR("Timeout waiting for transfer complete");
   28252:	481d      	ldr	r0, [pc, #116]	; (282c8 <spi_nrfx_transceive+0x36c>)
   28254:	1ac9      	subs	r1, r1, r3
   28256:	08c9      	lsrs	r1, r1, #3
   28258:	0189      	lsls	r1, r1, #6
   2825a:	f041 0101 	orr.w	r1, r1, #1
   2825e:	f011 fa4c 	bl	396fa <log_0>
		return -ETIMEDOUT;
   28262:	f06f 0573 	mvn.w	r5, #115	; 0x73
   28266:	e6a8      	b.n	27fba <spi_nrfx_transceive+0x5e>
   28268:	0003e560 	.word	0x0003e560
   2826c:	0003e468 	.word	0x0003e468
   28270:	00040b3a 	.word	0x00040b3a
   28274:	00040b5c 	.word	0x00040b5c
   28278:	00040b7b 	.word	0x00040b7b
   2827c:	00040b9e 	.word	0x00040b9e
   28280:	0001e847 	.word	0x0001e847
   28284:	00040bcd 	.word	0x00040bcd
   28288:	00040c2b 	.word	0x00040c2b
   2828c:	00040bfe 	.word	0x00040bfe
   28290:	0003f0e1 	.word	0x0003f0e1
   28294:	00040c7b 	.word	0x00040c7b
   28298:	00040cb0 	.word	0x00040cb0
   2829c:	00040267 	.word	0x00040267
   282a0:	00040ce9 	.word	0x00040ce9
   282a4:	00040d26 	.word	0x00040d26
   282a8:	00040291 	.word	0x00040291
   282ac:	000402cf 	.word	0x000402cf
   282b0:	0003d08f 	.word	0x0003d08f
   282b4:	0007a11f 	.word	0x0007a11f
   282b8:	000f423f 	.word	0x000f423f
   282bc:	001e847f 	.word	0x001e847f
   282c0:	003d08ff 	.word	0x003d08ff
   282c4:	007a1200 	.word	0x007a1200
   282c8:	00040d7f 	.word	0x00040d7f
   282cc:	4b16      	ldr	r3, [pc, #88]	; (28328 <spi_nrfx_transceive+0x3cc>)
   282ce:	4917      	ldr	r1, [pc, #92]	; (2832c <spi_nrfx_transceive+0x3d0>)
		LOG_INF("CS control inhibited (no GPIO device)");
   282d0:	4817      	ldr	r0, [pc, #92]	; (28330 <spi_nrfx_transceive+0x3d4>)
   282d2:	1ac9      	subs	r1, r1, r3
   282d4:	08c9      	lsrs	r1, r1, #3
   282d6:	0189      	lsls	r1, r1, #6
   282d8:	f041 0103 	orr.w	r1, r1, #3
   282dc:	f011 fa0d 	bl	396fa <log_0>
   282e0:	e73b      	b.n	2815a <spi_nrfx_transceive+0x1fe>
		return NRF_SPIM_FREQ_125K;
   282e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   282e6:	e75a      	b.n	2819e <spi_nrfx_transceive+0x242>
		return NRF_SPIM_FREQ_250K;
   282e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   282ec:	e757      	b.n	2819e <spi_nrfx_transceive+0x242>
		return NRF_SPIM_FREQ_500K;
   282ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   282f2:	e754      	b.n	2819e <spi_nrfx_transceive+0x242>
		return NRF_SPIM_FREQ_1M;
   282f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   282f8:	e751      	b.n	2819e <spi_nrfx_transceive+0x242>
		return NRF_SPIM_FREQ_2M;
   282fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   282fe:	e74e      	b.n	2819e <spi_nrfx_transceive+0x242>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   28300:	2f00      	cmp	r7, #0
   28302:	f43f af5b 	beq.w	281bc <spi_nrfx_transceive+0x260>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   28306:	f042 0202 	orr.w	r2, r2, #2
        break;
   2830a:	e757      	b.n	281bc <spi_nrfx_transceive+0x260>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2830c:	f042 0204 	orr.w	r2, r2, #4
        break;
   28310:	e754      	b.n	281bc <spi_nrfx_transceive+0x260>
		ctx->tx_count = 0;
   28312:	e9c4 660f 	strd	r6, r6, [r4, #60]	; 0x3c
		ctx->tx_buf = NULL;
   28316:	64e6      	str	r6, [r4, #76]	; 0x4c
		ctx->tx_len = 0;
   28318:	e761      	b.n	281de <spi_nrfx_transceive+0x282>
		ctx->rx_count = 0;
   2831a:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
		ctx->rx_buf = NULL;
   2831e:	6565      	str	r5, [r4, #84]	; 0x54
		ctx->rx_len = 0;
   28320:	e768      	b.n	281f4 <spi_nrfx_transceive+0x298>
	status = ctx->sync_status;
   28322:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   28324:	e649      	b.n	27fba <spi_nrfx_transceive+0x5e>
   28326:	bf00      	nop
   28328:	0003e468 	.word	0x0003e468
   2832c:	0003e560 	.word	0x0003e560
   28330:	00040d59 	.word	0x00040d59

00028334 <flash_nor_get_parameters>:
flash_nor_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nor_parameters;
}
   28334:	4800      	ldr	r0, [pc, #0]	; (28338 <flash_nor_get_parameters+0x4>)
   28336:	4770      	bx	lr
   28338:	0003ea30 	.word	0x0003ea30

0002833c <spi_nor_erase>:
	return cfg->flash_size;
   2833c:	6843      	ldr	r3, [r0, #4]
{
   2833e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((addr < 0) || ((size + addr) > flash_size)) {
   28342:	1e0f      	subs	r7, r1, #0
{
   28344:	4604      	mov	r4, r0
   28346:	4616      	mov	r6, r2
	return cfg->flash_size;
   28348:	f8d3 a010 	ldr.w	sl, [r3, #16]
	if ((addr < 0) || ((size + addr) > flash_size)) {
   2834c:	f2c0 8082 	blt.w	28454 <spi_nor_erase+0x118>
   28350:	18bb      	adds	r3, r7, r2
   28352:	4553      	cmp	r3, sl
   28354:	d87e      	bhi.n	28454 <spi_nor_erase+0x118>
	if ((size % SPI_NOR_SECTOR_SIZE) != 0) {
   28356:	ea47 0502 	orr.w	r5, r7, r2
   2835a:	f3c5 050b 	ubfx	r5, r5, #0, #12
   2835e:	2d00      	cmp	r5, #0
   28360:	d17b      	bne.n	2845a <spi_nor_erase+0x11e>
	acquire_device(dev);
   28362:	6900      	ldr	r0, [r0, #16]
   28364:	f012 f9d9 	bl	3a71a <acquire_device.isra.0>
	ret = spi_nor_write_protection_set(dev, false);
   28368:	4629      	mov	r1, r5
   2836a:	4620      	mov	r0, r4
   2836c:	f012 fa1d 	bl	3a7aa <spi_nor_write_protection_set>
   28370:	4605      	mov	r5, r0
	while ((size > 0) && (ret == 0)) {
   28372:	2e00      	cmp	r6, #0
   28374:	d164      	bne.n	28440 <spi_nor_erase+0x104>
	int ret2 = spi_nor_write_protection_set(dev, true);
   28376:	2101      	movs	r1, #1
   28378:	4620      	mov	r0, r4
   2837a:	f012 fa16 	bl	3a7aa <spi_nor_write_protection_set>
	if (!ret) {
   2837e:	2d00      	cmp	r5, #0
   28380:	d04a      	beq.n	28418 <spi_nor_erase+0xdc>
   28382:	e056      	b.n	28432 <spi_nor_erase+0xf6>
		if (size == flash_size) {
   28384:	2200      	movs	r2, #0
			const struct jesd216_erase_type *bet = NULL;
   28386:	4690      	mov	r8, r2
   28388:	4b35      	ldr	r3, [pc, #212]	; (28460 <spi_nor_erase+0x124>)
				    && SPI_NOR_IS_ALIGNED(size, etp->exp)
   2838a:	ea47 0c06 	orr.w	ip, r7, r6
				if ((etp->exp != 0)
   2838e:	7859      	ldrb	r1, [r3, #1]
   28390:	b161      	cbz	r1, 283ac <spi_nor_erase+0x70>
				    && SPI_NOR_IS_ALIGNED(addr, etp->exp)
   28392:	fa0b f001 	lsl.w	r0, fp, r1
				    && SPI_NOR_IS_ALIGNED(size, etp->exp)
   28396:	ea3c 0000 	bics.w	r0, ip, r0
   2839a:	d107      	bne.n	283ac <spi_nor_erase+0x70>
				    && ((bet == NULL)
   2839c:	f1b8 0f00 	cmp.w	r8, #0
   283a0:	d03c      	beq.n	2841c <spi_nor_erase+0xe0>
					|| (etp->exp > bet->exp))) {
   283a2:	f898 0001 	ldrb.w	r0, [r8, #1]
   283a6:	4288      	cmp	r0, r1
   283a8:	bf38      	it	cc
   283aa:	4698      	movcc	r8, r3
			for (uint8_t ei = 0; ei < JESD216_NUM_ERASE_TYPES; ++ei) {
   283ac:	3201      	adds	r2, #1
   283ae:	2a04      	cmp	r2, #4
   283b0:	f103 0302 	add.w	r3, r3, #2
   283b4:	d1eb      	bne.n	2838e <spi_nor_erase+0x52>
			if (bet != NULL) {
   283b6:	f1b8 0f00 	cmp.w	r8, #0
   283ba:	d031      	beq.n	28420 <spi_nor_erase+0xe4>
				spi_nor_cmd_addr_write(dev, bet->cmd, addr, NULL, 0);
   283bc:	2300      	movs	r3, #0
   283be:	2281      	movs	r2, #129	; 0x81
   283c0:	f898 1000 	ldrb.w	r1, [r8]
   283c4:	4620      	mov	r0, r4
   283c6:	e9cd 3300 	strd	r3, r3, [sp]
   283ca:	463b      	mov	r3, r7
   283cc:	f012 f9ab 	bl	3a726 <spi_nor_access>
				addr += BIT(bet->exp);
   283d0:	2301      	movs	r3, #1
   283d2:	f898 2001 	ldrb.w	r2, [r8, #1]
		spi_nor_wait_until_ready(dev);
   283d6:	4620      	mov	r0, r4
				addr += BIT(bet->exp);
   283d8:	4093      	lsls	r3, r2
				size -= BIT(bet->exp);
   283da:	1af6      	subs	r6, r6, r3
				addr += BIT(bet->exp);
   283dc:	441f      	add	r7, r3
		spi_nor_wait_until_ready(dev);
   283de:	f012 fa13 	bl	3a808 <spi_nor_wait_until_ready.isra.0>
	while ((size > 0) && (ret == 0)) {
   283e2:	2e00      	cmp	r6, #0
   283e4:	d0c7      	beq.n	28376 <spi_nor_erase+0x3a>
		spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   283e6:	2300      	movs	r3, #0
   283e8:	2280      	movs	r2, #128	; 0x80
   283ea:	2106      	movs	r1, #6
   283ec:	4620      	mov	r0, r4
   283ee:	e9cd 9900 	strd	r9, r9, [sp]
   283f2:	f012 f998 	bl	3a726 <spi_nor_access>
		if (size == flash_size) {
   283f6:	45b2      	cmp	sl, r6
   283f8:	d1c4      	bne.n	28384 <spi_nor_erase+0x48>
			spi_nor_cmd_write(dev, SPI_NOR_CMD_CE);
   283fa:	21c7      	movs	r1, #199	; 0xc7
   283fc:	2300      	movs	r3, #0
   283fe:	2280      	movs	r2, #128	; 0x80
   28400:	4620      	mov	r0, r4
   28402:	e9cd 9900 	strd	r9, r9, [sp]
   28406:	f012 f98e 	bl	3a726 <spi_nor_access>
		spi_nor_wait_until_ready(dev);
   2840a:	4620      	mov	r0, r4
   2840c:	f012 f9fc 	bl	3a808 <spi_nor_wait_until_ready.isra.0>
	int ret2 = spi_nor_write_protection_set(dev, true);
   28410:	2101      	movs	r1, #1
   28412:	4620      	mov	r0, r4
   28414:	f012 f9c9 	bl	3a7aa <spi_nor_write_protection_set>
					|| (etp->exp > bet->exp))) {
   28418:	4605      	mov	r5, r0
   2841a:	e00a      	b.n	28432 <spi_nor_erase+0xf6>
   2841c:	4698      	mov	r8, r3
   2841e:	e7c5      	b.n	283ac <spi_nor_erase+0x70>
		spi_nor_wait_until_ready(dev);
   28420:	4620      	mov	r0, r4
   28422:	f012 f9f1 	bl	3a808 <spi_nor_wait_until_ready.isra.0>
	int ret2 = spi_nor_write_protection_set(dev, true);
   28426:	2101      	movs	r1, #1
   28428:	4620      	mov	r0, r4
   2842a:	f012 f9be 	bl	3a7aa <spi_nor_write_protection_set>
				ret = -EINVAL;
   2842e:	f06f 0515 	mvn.w	r5, #21
	release_device(dev);
   28432:	6920      	ldr	r0, [r4, #16]
   28434:	f012 f96f 	bl	3a716 <release_device.isra.0>
}
   28438:	4628      	mov	r0, r5
   2843a:	b003      	add	sp, #12
   2843c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while ((size > 0) && (ret == 0)) {
   28440:	b918      	cbnz	r0, 2844a <spi_nor_erase+0x10e>
		spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   28442:	4681      	mov	r9, r0
				    && SPI_NOR_IS_ALIGNED(addr, etp->exp)
   28444:	f04f 3bff 	mov.w	fp, #4294967295
   28448:	e7cd      	b.n	283e6 <spi_nor_erase+0xaa>
	int ret2 = spi_nor_write_protection_set(dev, true);
   2844a:	2101      	movs	r1, #1
   2844c:	4620      	mov	r0, r4
   2844e:	f012 f9ac 	bl	3a7aa <spi_nor_write_protection_set>
	if (!ret) {
   28452:	e7ee      	b.n	28432 <spi_nor_erase+0xf6>
		return -ENODEV;
   28454:	f06f 0512 	mvn.w	r5, #18
   28458:	e7ee      	b.n	28438 <spi_nor_erase+0xfc>
		return -EINVAL;
   2845a:	f06f 0515 	mvn.w	r5, #21
   2845e:	e7eb      	b.n	28438 <spi_nor_erase+0xfc>
   28460:	00040e4e 	.word	0x00040e4e

00028464 <spi_nor_init>:
{
   28464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28468:	4604      	mov	r4, r0
   2846a:	b08a      	sub	sp, #40	; 0x28
		k_sem_init(&driver_data->sem, 1, K_SEM_MAX_LIMIT);
   2846c:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2846e:	f04f 32ff 	mov.w	r2, #4294967295
   28472:	2101      	movs	r1, #1
   28474:	f014 ffd6 	bl	3d424 <z_impl_k_sem_init>
	const struct spi_nor_config *cfg = dev->config;
   28478:	6866      	ldr	r6, [r4, #4]
 * @retval false if the SPI bus is not ready for use.
 */
static inline bool spi_is_ready(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
   2847a:	6830      	ldr	r0, [r6, #0]
   2847c:	f014 ff77 	bl	3d36e <z_device_ready>
   28480:	2800      	cmp	r0, #0
   28482:	d044      	beq.n	2850e <spi_nor_init+0xaa>
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spec->config.cs &&
   28484:	68f3      	ldr	r3, [r6, #12]
   28486:	2b00      	cmp	r3, #0
   28488:	d13c      	bne.n	28504 <spi_nor_init+0xa0>
		delay_until_exit_dpd_ok(dev);
   2848a:	6925      	ldr	r5, [r4, #16]
	return z_impl_k_uptime_ticks();
   2848c:	f015 f81f 	bl	3d4ce <z_impl_k_uptime_ticks>
   28490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28494:	fba0 0302 	umull	r0, r3, r0, r2
   28498:	fb02 3101 	mla	r1, r2, r1, r3
	if (since >= 0) {
   2849c:	69aa      	ldr	r2, [r5, #24]
   2849e:	0bc3      	lsrs	r3, r0, #15
   284a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   284a4:	429a      	cmp	r2, r3
   284a6:	d038      	beq.n	2851a <spi_nor_init+0xb6>
		ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_RDPD);
   284a8:	2300      	movs	r3, #0
   284aa:	2280      	movs	r2, #128	; 0x80
   284ac:	21ab      	movs	r1, #171	; 0xab
   284ae:	4620      	mov	r0, r4
   284b0:	e9cd 3300 	strd	r3, r3, [sp]
   284b4:	f012 f937 	bl	3a726 <spi_nor_access>
		if (ret == 0) {
   284b8:	b918      	cbnz	r0, 284c2 <spi_nor_init+0x5e>
	return z_impl_k_sleep(timeout);
   284ba:	2021      	movs	r0, #33	; 0x21
   284bc:	2100      	movs	r1, #0
   284be:	f00d fed9 	bl	36274 <z_impl_k_sleep>
	acquire_device(dev);
   284c2:	6920      	ldr	r0, [r4, #16]
   284c4:	f012 f929 	bl	3a71a <acquire_device.isra.0>
	int ret = spi_nor_cmd_read(dev, SPI_NOR_CMD_RDID, id, SPI_NOR_MAX_ID_LEN);
   284c8:	f04f 0803 	mov.w	r8, #3
   284cc:	2300      	movs	r3, #0
   284ce:	af03      	add	r7, sp, #12
   284d0:	461a      	mov	r2, r3
   284d2:	219f      	movs	r1, #159	; 0x9f
   284d4:	4620      	mov	r0, r4
   284d6:	f8cd 8004 	str.w	r8, [sp, #4]
   284da:	9700      	str	r7, [sp, #0]
   284dc:	f012 f923 	bl	3a726 <spi_nor_access>
   284e0:	4605      	mov	r5, r0
	release_device(dev);
   284e2:	6920      	ldr	r0, [r4, #16]
   284e4:	f012 f917 	bl	3a716 <release_device.isra.0>
	if (rc != 0) {
   284e8:	b1e5      	cbz	r5, 28524 <spi_nor_init+0xc0>
		LOG_ERR("JEDEC ID read failed: %d", rc);
   284ea:	4629      	mov	r1, r5
   284ec:	4a5e      	ldr	r2, [pc, #376]	; (28668 <spi_nor_init+0x204>)
   284ee:	4b5f      	ldr	r3, [pc, #380]	; (2866c <spi_nor_init+0x208>)
   284f0:	485f      	ldr	r0, [pc, #380]	; (28670 <spi_nor_init+0x20c>)
   284f2:	1ad2      	subs	r2, r2, r3
   284f4:	fa22 f208 	lsr.w	r2, r2, r8
   284f8:	0192      	lsls	r2, r2, #6
   284fa:	f042 0201 	orr.w	r2, r2, #1
   284fe:	f011 f909 	bl	39714 <log_1>
		return -ENODEV;
   28502:	e004      	b.n	2850e <spi_nor_init+0xaa>
	    !device_is_ready(spec->config.cs->gpio_dev)) {
   28504:	6818      	ldr	r0, [r3, #0]
   28506:	f014 ff32 	bl	3d36e <z_device_ready>
   2850a:	2800      	cmp	r0, #0
   2850c:	d1bd      	bne.n	2848a <spi_nor_init+0x26>
		return -ENODEV;
   2850e:	f06f 0812 	mvn.w	r8, #18
}
   28512:	4640      	mov	r0, r8
   28514:	b00a      	add	sp, #40	; 0x28
   28516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2851a:	2100      	movs	r1, #0
   2851c:	2021      	movs	r0, #33	; 0x21
   2851e:	f00d fea9 	bl	36274 <z_impl_k_sleep>
   28522:	e7c1      	b.n	284a8 <spi_nor_init+0x44>
	if (memcmp(jedec_id, cfg->jedec_id, sizeof(jedec_id)) != 0) {
   28524:	4642      	mov	r2, r8
   28526:	4638      	mov	r0, r7
   28528:	f106 011c 	add.w	r1, r6, #28
   2852c:	f015 f88e 	bl	3d64c <memcmp>
   28530:	4680      	mov	r8, r0
   28532:	b1e8      	cbz	r0, 28570 <spi_nor_init+0x10c>
   28534:	4a4d      	ldr	r2, [pc, #308]	; (2866c <spi_nor_init+0x208>)
   28536:	4b4c      	ldr	r3, [pc, #304]	; (28668 <spi_nor_init+0x204>)
		LOG_ERR("Device id %02x %02x %02x does not match config %02x %02x %02x",
   28538:	484e      	ldr	r0, [pc, #312]	; (28674 <spi_nor_init+0x210>)
   2853a:	1a9b      	subs	r3, r3, r2
   2853c:	f89d 200c 	ldrb.w	r2, [sp, #12]
   28540:	08db      	lsrs	r3, r3, #3
   28542:	9204      	str	r2, [sp, #16]
   28544:	f89d 200d 	ldrb.w	r2, [sp, #13]
   28548:	019b      	lsls	r3, r3, #6
   2854a:	9205      	str	r2, [sp, #20]
   2854c:	f89d 200e 	ldrb.w	r2, [sp, #14]
   28550:	f043 0301 	orr.w	r3, r3, #1
   28554:	9206      	str	r2, [sp, #24]
   28556:	7f32      	ldrb	r2, [r6, #28]
   28558:	a904      	add	r1, sp, #16
   2855a:	9207      	str	r2, [sp, #28]
   2855c:	7f72      	ldrb	r2, [r6, #29]
		return -EINVAL;
   2855e:	f06f 0815 	mvn.w	r8, #21
		LOG_ERR("Device id %02x %02x %02x does not match config %02x %02x %02x",
   28562:	9208      	str	r2, [sp, #32]
   28564:	7fb2      	ldrb	r2, [r6, #30]
   28566:	9209      	str	r2, [sp, #36]	; 0x24
   28568:	2206      	movs	r2, #6
   2856a:	f011 f91c 	bl	397a6 <log_n>
		return -EINVAL;
   2856e:	e7d0      	b.n	28512 <spi_nor_init+0xae>
	if (cfg->has_lock != 0) {
   28570:	f896 3020 	ldrb.w	r3, [r6, #32]
   28574:	b38b      	cbz	r3, 285da <spi_nor_init+0x176>
		acquire_device(dev);
   28576:	6920      	ldr	r0, [r4, #16]
   28578:	f012 f8cf 	bl	3a71a <acquire_device.isra.0>
	int ret = spi_nor_cmd_read(dev, SPI_NOR_CMD_RDSR, &reg, sizeof(reg));
   2857c:	2301      	movs	r3, #1
   2857e:	af04      	add	r7, sp, #16
   28580:	9301      	str	r3, [sp, #4]
   28582:	4642      	mov	r2, r8
   28584:	4643      	mov	r3, r8
   28586:	2105      	movs	r1, #5
   28588:	4620      	mov	r0, r4
   2858a:	9700      	str	r7, [sp, #0]
   2858c:	f012 f8cb 	bl	3a726 <spi_nor_access>
	if (ret == 0) {
   28590:	1e05      	subs	r5, r0, #0
   28592:	d145      	bne.n	28620 <spi_nor_init+0x1bc>
		ret = reg;
   28594:	f89d 5010 	ldrb.w	r5, [sp, #16]
		if (rc > 0) {
   28598:	b1e5      	cbz	r5, 285d4 <spi_nor_init+0x170>
			rc = spi_nor_wrsr(dev, rc & ~cfg->has_lock);
   2859a:	f896 3020 	ldrb.w	r3, [r6, #32]
	int ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   2859e:	2280      	movs	r2, #128	; 0x80
			rc = spi_nor_wrsr(dev, rc & ~cfg->has_lock);
   285a0:	ea25 0303 	bic.w	r3, r5, r3
   285a4:	f88d 3010 	strb.w	r3, [sp, #16]
	int ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   285a8:	2300      	movs	r3, #0
   285aa:	2106      	movs	r1, #6
   285ac:	4620      	mov	r0, r4
   285ae:	e9cd 3300 	strd	r3, r3, [sp]
   285b2:	f012 f8b8 	bl	3a726 <spi_nor_access>
	if (ret == 0) {
   285b6:	4605      	mov	r5, r0
   285b8:	bb98      	cbnz	r0, 28622 <spi_nor_init+0x1be>
		ret = spi_nor_access(dev, SPI_NOR_CMD_WRSR, NOR_ACCESS_WRITE, 0, &sr,
   285ba:	2101      	movs	r1, #1
   285bc:	4603      	mov	r3, r0
   285be:	2280      	movs	r2, #128	; 0x80
   285c0:	4620      	mov	r0, r4
   285c2:	e9cd 7100 	strd	r7, r1, [sp]
   285c6:	f012 f8ae 	bl	3a726 <spi_nor_access>
   285ca:	4605      	mov	r5, r0
		spi_nor_wait_until_ready(dev);
   285cc:	4620      	mov	r0, r4
   285ce:	f012 f91b 	bl	3a808 <spi_nor_wait_until_ready.isra.0>
		if (rc != 0) {
   285d2:	bb35      	cbnz	r5, 28622 <spi_nor_init+0x1be>
		release_device(dev);
   285d4:	6920      	ldr	r0, [r4, #16]
   285d6:	f012 f89e 	bl	3a716 <release_device.isra.0>
	if (cfg->enter_4byte_addr != 0) {
   285da:	7ff5      	ldrb	r5, [r6, #31]
   285dc:	1e6b      	subs	r3, r5, #1
   285de:	b2db      	uxtb	r3, r3
   285e0:	2bfd      	cmp	r3, #253	; 0xfd
   285e2:	d896      	bhi.n	28512 <spi_nor_init+0xae>
	if ((enter_4byte_addr & 0x03) == 0) {
   285e4:	07aa      	lsls	r2, r5, #30
   285e6:	d03b      	beq.n	28660 <spi_nor_init+0x1fc>
	acquire_device(dev);
   285e8:	6920      	ldr	r0, [r4, #16]
   285ea:	f012 f896 	bl	3a71a <acquire_device.isra.0>
	if ((enter_4byte_addr & 0x02) != 0) {
   285ee:	07ab      	lsls	r3, r5, #30
   285f0:	d421      	bmi.n	28636 <spi_nor_init+0x1d2>
		ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_4BA);
   285f2:	2300      	movs	r3, #0
   285f4:	2280      	movs	r2, #128	; 0x80
   285f6:	21b7      	movs	r1, #183	; 0xb7
   285f8:	4620      	mov	r0, r4
   285fa:	e9cd 3300 	strd	r3, r3, [sp]
   285fe:	f012 f892 	bl	3a726 <spi_nor_access>
	if (ret == 0) {
   28602:	4605      	mov	r5, r0
   28604:	b318      	cbz	r0, 2864e <spi_nor_init+0x1ea>
	release_device(dev);
   28606:	6920      	ldr	r0, [r4, #16]
   28608:	f012 f885 	bl	3a716 <release_device.isra.0>
   2860c:	4a16      	ldr	r2, [pc, #88]	; (28668 <spi_nor_init+0x204>)
   2860e:	4b17      	ldr	r3, [pc, #92]	; (2866c <spi_nor_init+0x208>)
			LOG_ERR("Unable to enter 4-byte mode: %d\n", rc);
   28610:	4629      	mov	r1, r5
   28612:	1ad2      	subs	r2, r2, r3
   28614:	08d2      	lsrs	r2, r2, #3
   28616:	0192      	lsls	r2, r2, #6
   28618:	4817      	ldr	r0, [pc, #92]	; (28678 <spi_nor_init+0x214>)
   2861a:	f042 0201 	orr.w	r2, r2, #1
   2861e:	e76e      	b.n	284fe <spi_nor_init+0x9a>
		if (rc > 0) {
   28620:	dcbb      	bgt.n	2859a <spi_nor_init+0x136>
   28622:	4a11      	ldr	r2, [pc, #68]	; (28668 <spi_nor_init+0x204>)
   28624:	4b11      	ldr	r3, [pc, #68]	; (2866c <spi_nor_init+0x208>)
			LOG_ERR("BP clear failed: %d\n", rc);
   28626:	4629      	mov	r1, r5
   28628:	1ad2      	subs	r2, r2, r3
   2862a:	08d2      	lsrs	r2, r2, #3
   2862c:	0192      	lsls	r2, r2, #6
   2862e:	4813      	ldr	r0, [pc, #76]	; (2867c <spi_nor_init+0x218>)
   28630:	f042 0201 	orr.w	r2, r2, #1
   28634:	e763      	b.n	284fe <spi_nor_init+0x9a>
		ret = spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   28636:	2300      	movs	r3, #0
   28638:	2280      	movs	r2, #128	; 0x80
   2863a:	2106      	movs	r1, #6
   2863c:	4620      	mov	r0, r4
   2863e:	e9cd 3300 	strd	r3, r3, [sp]
   28642:	f012 f870 	bl	3a726 <spi_nor_access>
	if (ret == 0) {
   28646:	4605      	mov	r5, r0
   28648:	2800      	cmp	r0, #0
   2864a:	d0d2      	beq.n	285f2 <spi_nor_init+0x18e>
   2864c:	e7db      	b.n	28606 <spi_nor_init+0x1a2>
		data->flag_access_32bit = true;
   2864e:	6922      	ldr	r2, [r4, #16]
   28650:	7f13      	ldrb	r3, [r2, #28]
   28652:	f043 0301 	orr.w	r3, r3, #1
   28656:	7713      	strb	r3, [r2, #28]
	release_device(dev);
   28658:	6920      	ldr	r0, [r4, #16]
   2865a:	f012 f85c 	bl	3a716 <release_device.isra.0>
		if (rc != 0) {
   2865e:	e758      	b.n	28512 <spi_nor_init+0xae>
		return -ENOTSUP;
   28660:	f06f 0585 	mvn.w	r5, #133	; 0x85
   28664:	e7d2      	b.n	2860c <spi_nor_init+0x1a8>
   28666:	bf00      	nop
   28668:	0003e558 	.word	0x0003e558
   2866c:	0003e468 	.word	0x0003e468
   28670:	00040db9 	.word	0x00040db9
   28674:	00040dd2 	.word	0x00040dd2
   28678:	00040e25 	.word	0x00040e25
   2867c:	00040e10 	.word	0x00040e10

00028680 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   28680:	4b02      	ldr	r3, [pc, #8]	; (2868c <flash_nrf_pages_layout+0xc>)
   28682:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   28684:	2301      	movs	r3, #1
   28686:	6013      	str	r3, [r2, #0]
}
   28688:	4770      	bx	lr
   2868a:	bf00      	nop
   2868c:	20017988 	.word	0x20017988

00028690 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   28690:	4800      	ldr	r0, [pc, #0]	; (28694 <flash_nrf_get_parameters+0x4>)
   28692:	4770      	bx	lr
   28694:	0003ea50 	.word	0x0003ea50

00028698 <flash_nrf_read>:
{
   28698:	b570      	push	{r4, r5, r6, lr}
   2869a:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   2869c:	4619      	mov	r1, r3
   2869e:	4620      	mov	r0, r4
{
   286a0:	4616      	mov	r6, r2
   286a2:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
   286a4:	f012 f929 	bl	3a8fa <is_regular_addr_valid>
   286a8:	b970      	cbnz	r0, 286c8 <flash_nrf_read+0x30>
   286aa:	4a0f      	ldr	r2, [pc, #60]	; (286e8 <flash_nrf_read+0x50>)
   286ac:	4b0f      	ldr	r3, [pc, #60]	; (286ec <flash_nrf_read+0x54>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   286ae:	4810      	ldr	r0, [pc, #64]	; (286f0 <flash_nrf_read+0x58>)
   286b0:	1a9b      	subs	r3, r3, r2
   286b2:	08db      	lsrs	r3, r3, #3
   286b4:	019b      	lsls	r3, r3, #6
   286b6:	462a      	mov	r2, r5
   286b8:	4621      	mov	r1, r4
   286ba:	f043 0301 	orr.w	r3, r3, #1
   286be:	f011 f83d 	bl	3973c <log_2>
		return -EINVAL;
   286c2:	f06f 0015 	mvn.w	r0, #21
}
   286c6:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   286c8:	b15d      	cbz	r5, 286e2 <flash_nrf_read+0x4a>
	if (addr < PM_APP_ADDRESS) {
   286ca:	4b0a      	ldr	r3, [pc, #40]	; (286f4 <flash_nrf_read+0x5c>)
		return spm_request_read(data, addr, len);
   286cc:	462a      	mov	r2, r5
	if (addr < PM_APP_ADDRESS) {
   286ce:	429c      	cmp	r4, r3
		return spm_request_read(data, addr, len);
   286d0:	4621      	mov	r1, r4
   286d2:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   286d4:	dc03      	bgt.n	286de <flash_nrf_read+0x46>
}
   286d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   286da:	f011 bc83 	b.w	39fe4 <spm_request_read>
   286de:	f014 ffc5 	bl	3d66c <memcpy>
		return 0;
   286e2:	2000      	movs	r0, #0
   286e4:	e7ef      	b.n	286c6 <flash_nrf_read+0x2e>
   286e6:	bf00      	nop
   286e8:	0003e468 	.word	0x0003e468
   286ec:	0003e4c8 	.word	0x0003e4c8
   286f0:	00040e56 	.word	0x00040e56
   286f4:	000201ff 	.word	0x000201ff

000286f8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   286f8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   286fa:	2201      	movs	r2, #1
   286fc:	4806      	ldr	r0, [pc, #24]	; (28718 <nrf_flash_init+0x20>)
   286fe:	4611      	mov	r1, r2
   28700:	f014 fe90 	bl	3d424 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   28704:	f013 f8ac 	bl	3b860 <nrfx_nvmc_flash_page_count_get>
   28708:	4c04      	ldr	r4, [pc, #16]	; (2871c <nrf_flash_init+0x24>)
   2870a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2870c:	f013 f8a5 	bl	3b85a <nrfx_nvmc_flash_page_size_get>
   28710:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   28712:	2000      	movs	r0, #0
   28714:	bd10      	pop	{r4, pc}
   28716:	bf00      	nop
   28718:	20017990 	.word	0x20017990
   2871c:	20017988 	.word	0x20017988

00028720 <flash_nrf_erase>:
{
   28720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28722:	460e      	mov	r6, r1
   28724:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28726:	f013 f898 	bl	3b85a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   2872a:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2872c:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   2872e:	4630      	mov	r0, r6
   28730:	f012 f8e3 	bl	3a8fa <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   28734:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   28736:	b380      	cbz	r0, 2879a <flash_nrf_erase+0x7a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   28738:	fbb6 f3f5 	udiv	r3, r6, r5
   2873c:	fb05 6313 	mls	r3, r5, r3, r6
   28740:	b923      	cbnz	r3, 2874c <flash_nrf_erase+0x2c>
   28742:	fbb4 f3f5 	udiv	r3, r4, r5
   28746:	fb05 4313 	mls	r3, r5, r3, r4
   2874a:	b173      	cbz	r3, 2876a <flash_nrf_erase+0x4a>
   2874c:	4a18      	ldr	r2, [pc, #96]	; (287b0 <flash_nrf_erase+0x90>)
   2874e:	4b19      	ldr	r3, [pc, #100]	; (287b4 <flash_nrf_erase+0x94>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   28750:	4631      	mov	r1, r6
   28752:	1a9b      	subs	r3, r3, r2
   28754:	4622      	mov	r2, r4
   28756:	08db      	lsrs	r3, r3, #3
   28758:	019b      	lsls	r3, r3, #6
   2875a:	4817      	ldr	r0, [pc, #92]	; (287b8 <flash_nrf_erase+0x98>)
   2875c:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("invalid address: 0x%08lx:%zu",
   28760:	f010 ffec 	bl	3973c <log_2>
			return -EINVAL;
   28764:	f06f 0015 	mvn.w	r0, #21
   28768:	e002      	b.n	28770 <flash_nrf_erase+0x50>
		if (!n_pages) {
   2876a:	42ac      	cmp	r4, r5
   2876c:	d201      	bcs.n	28772 <flash_nrf_erase+0x52>
			return 0;
   2876e:	2000      	movs	r0, #0
}
   28770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   28772:	f04f 32ff 	mov.w	r2, #4294967295
   28776:	f04f 33ff 	mov.w	r3, #4294967295
   2877a:	4810      	ldr	r0, [pc, #64]	; (287bc <flash_nrf_erase+0x9c>)
   2877c:	f00c f8e2 	bl	34944 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28780:	f013 f86b 	bl	3b85a <nrfx_nvmc_flash_page_size_get>
   28784:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   28786:	4638      	mov	r0, r7
   28788:	f003 f8f6 	bl	2b978 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   2878c:	1b64      	subs	r4, r4, r5
   2878e:	442f      	add	r7, r5
   28790:	d1f9      	bne.n	28786 <flash_nrf_erase+0x66>
	z_impl_k_sem_give(sem);
   28792:	480a      	ldr	r0, [pc, #40]	; (287bc <flash_nrf_erase+0x9c>)
   28794:	f00c f892 	bl	348bc <z_impl_k_sem_give>
}
   28798:	e7e9      	b.n	2876e <flash_nrf_erase+0x4e>
   2879a:	4a05      	ldr	r2, [pc, #20]	; (287b0 <flash_nrf_erase+0x90>)
   2879c:	4b05      	ldr	r3, [pc, #20]	; (287b4 <flash_nrf_erase+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2879e:	4631      	mov	r1, r6
   287a0:	1a9b      	subs	r3, r3, r2
   287a2:	08db      	lsrs	r3, r3, #3
   287a4:	019b      	lsls	r3, r3, #6
   287a6:	4622      	mov	r2, r4
   287a8:	4805      	ldr	r0, [pc, #20]	; (287c0 <flash_nrf_erase+0xa0>)
   287aa:	f043 0301 	orr.w	r3, r3, #1
   287ae:	e7d7      	b.n	28760 <flash_nrf_erase+0x40>
   287b0:	0003e468 	.word	0x0003e468
   287b4:	0003e4c8 	.word	0x0003e4c8
   287b8:	00040e73 	.word	0x00040e73
   287bc:	20017990 	.word	0x20017990
   287c0:	00040e56 	.word	0x00040e56

000287c4 <flash_nrf_write>:
{
   287c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   287c6:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   287c8:	4619      	mov	r1, r3
   287ca:	4630      	mov	r0, r6
{
   287cc:	4617      	mov	r7, r2
   287ce:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   287d0:	f012 f893 	bl	3a8fa <is_regular_addr_valid>
   287d4:	b970      	cbnz	r0, 287f4 <flash_nrf_write+0x30>
   287d6:	4a1e      	ldr	r2, [pc, #120]	; (28850 <flash_nrf_write+0x8c>)
   287d8:	4b1e      	ldr	r3, [pc, #120]	; (28854 <flash_nrf_write+0x90>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   287da:	4631      	mov	r1, r6
   287dc:	1a9b      	subs	r3, r3, r2
   287de:	4622      	mov	r2, r4
   287e0:	08db      	lsrs	r3, r3, #3
   287e2:	019b      	lsls	r3, r3, #6
   287e4:	481c      	ldr	r0, [pc, #112]	; (28858 <flash_nrf_write+0x94>)
   287e6:	f043 0301 	orr.w	r3, r3, #1
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   287ea:	f010 ffa7 	bl	3973c <log_2>
		return -EINVAL;
   287ee:	f06f 0015 	mvn.w	r0, #21
}
   287f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   287f4:	ea46 0504 	orr.w	r5, r6, r4
   287f8:	f015 0503 	ands.w	r5, r5, #3
   287fc:	d00a      	beq.n	28814 <flash_nrf_write+0x50>
   287fe:	4a14      	ldr	r2, [pc, #80]	; (28850 <flash_nrf_write+0x8c>)
   28800:	4b14      	ldr	r3, [pc, #80]	; (28854 <flash_nrf_write+0x90>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   28802:	4631      	mov	r1, r6
   28804:	1a9b      	subs	r3, r3, r2
   28806:	08db      	lsrs	r3, r3, #3
   28808:	019b      	lsls	r3, r3, #6
   2880a:	4622      	mov	r2, r4
   2880c:	4813      	ldr	r0, [pc, #76]	; (2885c <flash_nrf_write+0x98>)
   2880e:	f043 0301 	orr.w	r3, r3, #1
   28812:	e7ea      	b.n	287ea <flash_nrf_write+0x26>
	if (!len) {
   28814:	b1a4      	cbz	r4, 28840 <flash_nrf_write+0x7c>
	return z_impl_k_sem_take(sem, timeout);
   28816:	f04f 32ff 	mov.w	r2, #4294967295
   2881a:	f04f 33ff 	mov.w	r3, #4294967295
   2881e:	4810      	ldr	r0, [pc, #64]	; (28860 <flash_nrf_write+0x9c>)
   28820:	f00c f890 	bl	34944 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   28824:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   28828:	42a5      	cmp	r5, r4
   2882a:	eb05 0006 	add.w	r0, r5, r6
   2882e:	d109      	bne.n	28844 <flash_nrf_write+0x80>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   28830:	4a0c      	ldr	r2, [pc, #48]	; (28864 <flash_nrf_write+0xa0>)
   28832:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   28836:	07db      	lsls	r3, r3, #31
   28838:	d5fb      	bpl.n	28832 <flash_nrf_write+0x6e>
	z_impl_k_sem_give(sem);
   2883a:	4809      	ldr	r0, [pc, #36]	; (28860 <flash_nrf_write+0x9c>)
   2883c:	f00c f83e 	bl	348bc <z_impl_k_sem_give>
	return ret;
   28840:	2000      	movs	r0, #0
   28842:	e7d6      	b.n	287f2 <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   28844:	5979      	ldr	r1, [r7, r5]
   28846:	f003 f8c9 	bl	2b9dc <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2884a:	3504      	adds	r5, #4
}
   2884c:	e7ec      	b.n	28828 <flash_nrf_write+0x64>
   2884e:	bf00      	nop
   28850:	0003e468 	.word	0x0003e468
   28854:	0003e4c8 	.word	0x0003e4c8
   28858:	00040e56 	.word	0x00040e56
   2885c:	00040e92 	.word	0x00040e92
   28860:	20017990 	.word	0x20017990
   28864:	40039000 	.word	0x40039000

00028868 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   28868:	6802      	ldr	r2, [r0, #0]
{
   2886a:	b510      	push	{r4, lr}
    switch (port)
   2886c:	0953      	lsrs	r3, r2, #5
{
   2886e:	4604      	mov	r4, r0
    switch (port)
   28870:	d104      	bne.n	2887c <nrf_gpio_pin_port_decode+0x14>
    return (mask & (1UL << pin_number)) ? true : false;
   28872:	f04f 33ff 	mov.w	r3, #4294967295
   28876:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   28878:	07db      	lsls	r3, r3, #31
   2887a:	d40b      	bmi.n	28894 <nrf_gpio_pin_port_decode+0x2c>
   2887c:	490f      	ldr	r1, [pc, #60]	; (288bc <nrf_gpio_pin_port_decode+0x54>)
   2887e:	4810      	ldr	r0, [pc, #64]	; (288c0 <nrf_gpio_pin_port_decode+0x58>)
   28880:	f44f 7305 	mov.w	r3, #532	; 0x214
   28884:	4a0f      	ldr	r2, [pc, #60]	; (288c4 <nrf_gpio_pin_port_decode+0x5c>)
   28886:	f010 fc98 	bl	391ba <printk>
   2888a:	f44f 7105 	mov.w	r1, #532	; 0x214
   2888e:	480d      	ldr	r0, [pc, #52]	; (288c4 <nrf_gpio_pin_port_decode+0x5c>)
   28890:	f010 feea 	bl	39668 <assert_post_action>
    uint32_t pin_number = *p_pin;
   28894:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   28896:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2889a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2889c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2889e:	d00b      	beq.n	288b8 <nrf_gpio_pin_port_decode+0x50>
            NRFX_ASSERT(0);
   288a0:	4909      	ldr	r1, [pc, #36]	; (288c8 <nrf_gpio_pin_port_decode+0x60>)
   288a2:	4807      	ldr	r0, [pc, #28]	; (288c0 <nrf_gpio_pin_port_decode+0x58>)
   288a4:	f240 2319 	movw	r3, #537	; 0x219
   288a8:	4a06      	ldr	r2, [pc, #24]	; (288c4 <nrf_gpio_pin_port_decode+0x5c>)
   288aa:	f010 fc86 	bl	391ba <printk>
   288ae:	f240 2119 	movw	r1, #537	; 0x219
   288b2:	4804      	ldr	r0, [pc, #16]	; (288c4 <nrf_gpio_pin_port_decode+0x5c>)
   288b4:	f010 fed8 	bl	39668 <assert_post_action>
}
   288b8:	4804      	ldr	r0, [pc, #16]	; (288cc <nrf_gpio_pin_port_decode+0x64>)
   288ba:	bd10      	pop	{r4, pc}
   288bc:	00040897 	.word	0x00040897
   288c0:	0003f0e1 	.word	0x0003f0e1
   288c4:	00040864 	.word	0x00040864
   288c8:	000422ae 	.word	0x000422ae
   288cc:	40842500 	.word	0x40842500

000288d0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   288d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   288d2:	794b      	ldrb	r3, [r1, #5]
   288d4:	2b01      	cmp	r3, #1
   288d6:	d02a      	beq.n	2892e <uarte_nrfx_configure+0x5e>
   288d8:	2b03      	cmp	r3, #3
   288da:	d125      	bne.n	28928 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   288dc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   288de:	798b      	ldrb	r3, [r1, #6]
   288e0:	2b03      	cmp	r3, #3
   288e2:	d121      	bne.n	28928 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   288e4:	79cc      	ldrb	r4, [r1, #7]
   288e6:	b12c      	cbz	r4, 288f4 <uarte_nrfx_configure+0x24>
   288e8:	2c01      	cmp	r4, #1
   288ea:	d11d      	bne.n	28928 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   288ec:	6843      	ldr	r3, [r0, #4]
   288ee:	685b      	ldr	r3, [r3, #4]
   288f0:	079b      	lsls	r3, r3, #30
   288f2:	d019      	beq.n	28928 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   288f4:	790a      	ldrb	r2, [r1, #4]
   288f6:	b112      	cbz	r2, 288fe <uarte_nrfx_configure+0x2e>
   288f8:	2a02      	cmp	r2, #2
   288fa:	d115      	bne.n	28928 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   288fc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   288fe:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   28900:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   28902:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   28906:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   28908:	d065      	beq.n	289d6 <uarte_nrfx_configure+0x106>
   2890a:	d82d      	bhi.n	28968 <uarte_nrfx_configure+0x98>
   2890c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   28910:	d064      	beq.n	289dc <uarte_nrfx_configure+0x10c>
   28912:	d816      	bhi.n	28942 <uarte_nrfx_configure+0x72>
   28914:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   28918:	d062      	beq.n	289e0 <uarte_nrfx_configure+0x110>
   2891a:	d80a      	bhi.n	28932 <uarte_nrfx_configure+0x62>
   2891c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   28920:	d061      	beq.n	289e6 <uarte_nrfx_configure+0x116>
   28922:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   28926:	d061      	beq.n	289ec <uarte_nrfx_configure+0x11c>
		return -ENOTSUP;
   28928:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2892c:	e052      	b.n	289d4 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   2892e:	2600      	movs	r6, #0
   28930:	e7d5      	b.n	288de <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   28932:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   28936:	d05c      	beq.n	289f2 <uarte_nrfx_configure+0x122>
   28938:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2893c:	d1f4      	bne.n	28928 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2893e:	4b37      	ldr	r3, [pc, #220]	; (28a1c <uarte_nrfx_configure+0x14c>)
   28940:	e03c      	b.n	289bc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   28942:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   28946:	d057      	beq.n	289f8 <uarte_nrfx_configure+0x128>
   28948:	d807      	bhi.n	2895a <uarte_nrfx_configure+0x8a>
   2894a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2894e:	d055      	beq.n	289fc <uarte_nrfx_configure+0x12c>
   28950:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   28954:	d1e8      	bne.n	28928 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   28956:	4b32      	ldr	r3, [pc, #200]	; (28a20 <uarte_nrfx_configure+0x150>)
   28958:	e030      	b.n	289bc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2895a:	f647 2712 	movw	r7, #31250	; 0x7a12
   2895e:	42bb      	cmp	r3, r7
   28960:	d1e2      	bne.n	28928 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   28962:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   28966:	e029      	b.n	289bc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   28968:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2896c:	d048      	beq.n	28a00 <uarte_nrfx_configure+0x130>
   2896e:	d813      	bhi.n	28998 <uarte_nrfx_configure+0xc8>
   28970:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   28974:	d047      	beq.n	28a06 <uarte_nrfx_configure+0x136>
   28976:	d809      	bhi.n	2898c <uarte_nrfx_configure+0xbc>
   28978:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   2897c:	42bb      	cmp	r3, r7
   2897e:	d044      	beq.n	28a0a <uarte_nrfx_configure+0x13a>
   28980:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   28984:	d1d0      	bne.n	28928 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   28986:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2898a:	e017      	b.n	289bc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2898c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   28990:	d1ca      	bne.n	28928 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   28992:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   28996:	e011      	b.n	289bc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   28998:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2899c:	d038      	beq.n	28a10 <uarte_nrfx_configure+0x140>
   2899e:	d808      	bhi.n	289b2 <uarte_nrfx_configure+0xe2>
   289a0:	4f20      	ldr	r7, [pc, #128]	; (28a24 <uarte_nrfx_configure+0x154>)
   289a2:	42bb      	cmp	r3, r7
   289a4:	d037      	beq.n	28a16 <uarte_nrfx_configure+0x146>
   289a6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   289aa:	d1bd      	bne.n	28928 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   289ac:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   289b0:	e004      	b.n	289bc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   289b2:	4f1d      	ldr	r7, [pc, #116]	; (28a28 <uarte_nrfx_configure+0x158>)
   289b4:	42bb      	cmp	r3, r7
   289b6:	d1b7      	bne.n	28928 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   289b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   289bc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   289c0:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   289c2:	4334      	orrs	r4, r6
   289c4:	4322      	orrs	r2, r4
   289c6:	3304      	adds	r3, #4
   289c8:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   289ca:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   289ce:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   289d2:	2000      	movs	r0, #0
}
   289d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   289d6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   289da:	e7ef      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   289dc:	4b13      	ldr	r3, [pc, #76]	; (28a2c <uarte_nrfx_configure+0x15c>)
   289de:	e7ed      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   289e0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   289e4:	e7ea      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   289e6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   289ea:	e7e7      	b.n	289bc <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   289ec:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   289f0:	e7e4      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   289f2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   289f6:	e7e1      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   289f8:	4b0d      	ldr	r3, [pc, #52]	; (28a30 <uarte_nrfx_configure+0x160>)
   289fa:	e7df      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   289fc:	4b0d      	ldr	r3, [pc, #52]	; (28a34 <uarte_nrfx_configure+0x164>)
   289fe:	e7dd      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   28a00:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   28a04:	e7da      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   28a06:	4b0c      	ldr	r3, [pc, #48]	; (28a38 <uarte_nrfx_configure+0x168>)
   28a08:	e7d8      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   28a0a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   28a0e:	e7d5      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   28a10:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   28a14:	e7d2      	b.n	289bc <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   28a16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   28a1a:	e7cf      	b.n	289bc <uarte_nrfx_configure+0xec>
   28a1c:	0013b000 	.word	0x0013b000
   28a20:	004ea000 	.word	0x004ea000
   28a24:	0003d090 	.word	0x0003d090
   28a28:	000f4240 	.word	0x000f4240
   28a2c:	00275000 	.word	0x00275000
   28a30:	0075c000 	.word	0x0075c000
   28a34:	003af000 	.word	0x003af000
   28a38:	013a9000 	.word	0x013a9000

00028a3c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   28a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a3e:	4605      	mov	r5, r0
   28a40:	460f      	mov	r7, r1
	return dev->data;
   28a42:	6906      	ldr	r6, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   28a44:	f014 fccb 	bl	3d3de <k_is_in_isr>
   28a48:	b9b0      	cbnz	r0, 28a78 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   28a4a:	4b28      	ldr	r3, [pc, #160]	; (28aec <uarte_nrfx_poll_out+0xb0>)
   28a4c:	781b      	ldrb	r3, [r3, #0]
   28a4e:	b19b      	cbz	r3, 28a78 <uarte_nrfx_poll_out+0x3c>
{
   28a50:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   28a52:	6868      	ldr	r0, [r5, #4]
   28a54:	f012 f8d7 	bl	3ac06 <is_tx_ready.isra.0>
   28a58:	2800      	cmp	r0, #0
   28a5a:	d134      	bne.n	28ac6 <uarte_nrfx_poll_out+0x8a>
   28a5c:	2001      	movs	r0, #1
   28a5e:	f012 fef7 	bl	3b850 <nrfx_busy_wait>
   28a62:	3c01      	subs	r4, #1
   28a64:	d1f5      	bne.n	28a52 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   28a66:	2100      	movs	r1, #0
   28a68:	2021      	movs	r0, #33	; 0x21
   28a6a:	f00d fc03 	bl	36274 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   28a6e:	e7ef      	b.n	28a50 <uarte_nrfx_poll_out+0x14>
   28a70:	f384 8811 	msr	BASEPRI, r4
   28a74:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   28a78:	f04f 0320 	mov.w	r3, #32
   28a7c:	f3ef 8411 	mrs	r4, BASEPRI
   28a80:	f383 8811 	msr	BASEPRI, r3
   28a84:	f3bf 8f6f 	isb	sy
	int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   28a88:	6869      	ldr	r1, [r5, #4]
   28a8a:	4608      	mov	r0, r1
   28a8c:	f012 f8bb 	bl	3ac06 <is_tx_ready.isra.0>
   28a90:	2800      	cmp	r0, #0
   28a92:	d0ed      	beq.n	28a70 <uarte_nrfx_poll_out+0x34>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
   28a94:	68f3      	ldr	r3, [r6, #12]
   28a96:	b153      	cbz	r3, 28aae <uarte_nrfx_poll_out+0x72>
   28a98:	68da      	ldr	r2, [r3, #12]
   28a9a:	b142      	cbz	r2, 28aae <uarte_nrfx_poll_out+0x72>
					data->async->tx_amount < 0) {
   28a9c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
				if (data->async && data->async->tx_size &&
   28aa0:	2a00      	cmp	r2, #0
   28aa2:	da04      	bge.n	28aae <uarte_nrfx_poll_out+0x72>
	return config->uarte_regs;
   28aa4:	680a      	ldr	r2, [r1, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   28aa6:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   28aaa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   28aae:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   28ab0:	2201      	movs	r2, #1
   28ab2:	4628      	mov	r0, r5
	data->char_out = c;
   28ab4:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   28ab8:	f011 ff6d 	bl	3a996 <tx_start>
	__asm__ volatile(
   28abc:	f384 8811 	msr	BASEPRI, r4
   28ac0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   28ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   28ac6:	f04f 0320 	mov.w	r3, #32
   28aca:	f3ef 8411 	mrs	r4, BASEPRI
   28ace:	f383 8811 	msr	BASEPRI, r3
   28ad2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   28ad6:	6868      	ldr	r0, [r5, #4]
   28ad8:	f012 f895 	bl	3ac06 <is_tx_ready.isra.0>
   28adc:	2800      	cmp	r0, #0
   28ade:	d1e6      	bne.n	28aae <uarte_nrfx_poll_out+0x72>
	__asm__ volatile(
   28ae0:	f384 8811 	msr	BASEPRI, r4
   28ae4:	f3bf 8f6f 	isb	sy
}
   28ae8:	e7bd      	b.n	28a66 <uarte_nrfx_poll_out+0x2a>
   28aea:	bf00      	nop
   28aec:	2001926b 	.word	0x2001926b

00028af0 <uarte_nrfx_rx_enable>:
{
   28af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28af4:	4690      	mov	r8, r2
	return dev->config;
   28af6:	6842      	ldr	r2, [r0, #4]
{
   28af8:	4689      	mov	r9, r1
	return config->uarte_regs;
   28afa:	6817      	ldr	r7, [r2, #0]
{
   28afc:	4604      	mov	r4, r0
    return p_reg->PSEL.RXD;
   28afe:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
	return dev->data;
   28b02:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
   28b06:	3101      	adds	r1, #1
   28b08:	d112      	bne.n	28b30 <uarte_nrfx_rx_enable+0x40>
		__ASSERT(false, "TX only UARTE instance");
   28b0a:	f240 3325 	movw	r3, #805	; 0x325
   28b0e:	4a3f      	ldr	r2, [pc, #252]	; (28c0c <uarte_nrfx_rx_enable+0x11c>)
   28b10:	493f      	ldr	r1, [pc, #252]	; (28c10 <uarte_nrfx_rx_enable+0x120>)
   28b12:	4840      	ldr	r0, [pc, #256]	; (28c14 <uarte_nrfx_rx_enable+0x124>)
   28b14:	f010 fb51 	bl	391ba <printk>
   28b18:	483f      	ldr	r0, [pc, #252]	; (28c18 <uarte_nrfx_rx_enable+0x128>)
   28b1a:	f010 fb4e 	bl	391ba <printk>
   28b1e:	483b      	ldr	r0, [pc, #236]	; (28c0c <uarte_nrfx_rx_enable+0x11c>)
   28b20:	f240 3125 	movw	r1, #805	; 0x325
   28b24:	f010 fda0 	bl	39668 <assert_post_action>
		return -ENOTSUP;
   28b28:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   28b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		MAX(timeout / RX_TIMEOUT_DIV,
   28b30:	2b09      	cmp	r3, #9
   28b32:	bfc8      	it	gt
   28b34:	2105      	movgt	r1, #5
	data->async->rx_timeout = timeout;
   28b36:	f8da 600c 	ldr.w	r6, [sl, #12]
   28b3a:	66f3      	str	r3, [r6, #108]	; 0x6c
		MAX(timeout / RX_TIMEOUT_DIV,
   28b3c:	bfcc      	ite	gt
   28b3e:	fb93 f3f1 	sdivgt	r3, r3, r1
   28b42:	2301      	movle	r3, #1
	data->async->rx_timeout_slab =
   28b44:	6733      	str	r3, [r6, #112]	; 0x70
	data->async->rx_offset = 0;
   28b46:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
   28b48:	e9c6 3316 	strd	r3, r3, [r6, #88]	; 0x58
	data->async->rx_next_buf_len = 0;
   28b4c:	6633      	str	r3, [r6, #96]	; 0x60
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28b4e:	6853      	ldr	r3, [r2, #4]
	data->async->rx_buf_len = len;
   28b50:	e9c6 9814 	strd	r9, r8, [r6, #80]	; 0x50
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28b54:	06da      	lsls	r2, r3, #27
   28b56:	d526      	bpl.n	28ba6 <uarte_nrfx_rx_enable+0xb6>
		if (data->async->rx_flush_cnt) {
   28b58:	f896 50c1 	ldrb.w	r5, [r6, #193]	; 0xc1
   28b5c:	b31d      	cbz	r5, 28ba6 <uarte_nrfx_rx_enable+0xb6>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   28b5e:	4545      	cmp	r5, r8
   28b60:	bf28      	it	cs
   28b62:	4645      	movcs	r5, r8
   28b64:	4648      	mov	r0, r9
   28b66:	462a      	mov	r2, r5
   28b68:	f106 01bc 	add.w	r1, r6, #188	; 0xbc
   28b6c:	f014 fd7e 	bl	3d66c <memcpy>
			if (!len) {
   28b70:	ebb8 0805 	subs.w	r8, r8, r5
			buf += cpy_len;
   28b74:	44a9      	add	r9, r5
			if (!len) {
   28b76:	d116      	bne.n	28ba6 <uarte_nrfx_rx_enable+0xb6>
				data->async->rx_flush_cnt -= cpy_len;
   28b78:	f8da 200c 	ldr.w	r2, [sl, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   28b7c:	4629      	mov	r1, r5
				data->async->rx_flush_cnt -= cpy_len;
   28b7e:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   28b82:	4620      	mov	r0, r4
				data->async->rx_flush_cnt -= cpy_len;
   28b84:	1b5b      	subs	r3, r3, r5
   28b86:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
   28b8a:	f011 ff31 	bl	3a9f0 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   28b8e:	f8da 100c 	ldr.w	r1, [sl, #12]
   28b92:	4620      	mov	r0, r4
   28b94:	2201      	movs	r2, #1
   28b96:	3150      	adds	r1, #80	; 0x50
   28b98:	f011 ff43 	bl	3aa22 <notify_rx_buf_release>
				notify_rx_disable(dev);
   28b9c:	4620      	mov	r0, r4
   28b9e:	f011 ff5a 	bl	3aa56 <notify_rx_disable>
				return 0;
   28ba2:	2000      	movs	r0, #0
   28ba4:	e7c2      	b.n	28b2c <uarte_nrfx_rx_enable+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28ba6:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   28ba8:	f8c7 9534 	str.w	r9, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   28bac:	f8c7 8538 	str.w	r8, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28bb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   28bb4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
	data->async->rx_enabled = true;
   28bb8:	2201      	movs	r2, #1
   28bba:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   28bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
   28bc2:	f8da 300c 	ldr.w	r3, [sl, #12]
   28bc6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28bca:	6863      	ldr	r3, [r4, #4]
   28bcc:	685b      	ldr	r3, [r3, #4]
   28bce:	06db      	lsls	r3, r3, #27
   28bd0:	d519      	bpl.n	28c06 <uarte_nrfx_rx_enable+0x116>
	__asm__ volatile(
   28bd2:	f04f 0320 	mov.w	r3, #32
   28bd6:	f3ef 8111 	mrs	r1, BASEPRI
   28bda:	f383 8811 	msr	BASEPRI, r3
   28bde:	f3bf 8f6f 	isb	sy
	if (data->async) {
   28be2:	6923      	ldr	r3, [r4, #16]
   28be4:	68db      	ldr	r3, [r3, #12]
   28be6:	b12b      	cbz	r3, 28bf4 <uarte_nrfx_rx_enable+0x104>
		data->async->low_power_mask |= mask;
   28be8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   28bec:	f042 0202 	orr.w	r2, r2, #2
   28bf0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   28bf4:	2208      	movs	r2, #8
	return config->uarte_regs;
   28bf6:	6863      	ldr	r3, [r4, #4]
   28bf8:	681b      	ldr	r3, [r3, #0]
   28bfa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   28bfe:	f381 8811 	msr	BASEPRI, r1
   28c02:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28c06:	2301      	movs	r3, #1
   28c08:	603b      	str	r3, [r7, #0]
	return 0;
   28c0a:	e7ca      	b.n	28ba2 <uarte_nrfx_rx_enable+0xb2>
   28c0c:	00040eba 	.word	0x00040eba
   28c10:	000422ae 	.word	0x000422ae
   28c14:	0003f0e1 	.word	0x0003f0e1
   28c18:	00040eee 	.word	0x00040eee

00028c1c <uarte_instance_init.constprop.0>:
	return config->uarte_regs;
   28c1c:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   28c1e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	return config->uarte_regs;
   28c22:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   28c24:	2300      	movs	r3, #0
	return dev->data;
   28c26:	6907      	ldr	r7, [r0, #16]
   28c28:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   28c2c:	680b      	ldr	r3, [r1, #0]
   28c2e:	6038      	str	r0, [r7, #0]
static int uarte_instance_init(const struct device *dev,
   28c30:	4606      	mov	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28c32:	a801      	add	r0, sp, #4
   28c34:	460d      	mov	r5, r1
   28c36:	9301      	str	r3, [sp, #4]
   28c38:	f7ff fe16 	bl	28868 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28c3c:	2301      	movs	r3, #1
   28c3e:	9a01      	ldr	r2, [sp, #4]
   28c40:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   28c42:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   28c44:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28c46:	a801      	add	r0, sp, #4
   28c48:	9301      	str	r3, [sp, #4]
   28c4a:	f7ff fe0d 	bl	28868 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   28c4e:	2203      	movs	r2, #3
   28c50:	9b01      	ldr	r3, [sp, #4]
   28c52:	3380      	adds	r3, #128	; 0x80
   28c54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   28c58:	686b      	ldr	r3, [r5, #4]
   28c5a:	1c59      	adds	r1, r3, #1
   28c5c:	d008      	beq.n	28c70 <uarte_instance_init.constprop.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28c5e:	a801      	add	r0, sp, #4
   28c60:	9301      	str	r3, [sp, #4]
   28c62:	f7ff fe01 	bl	28868 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   28c66:	220c      	movs	r2, #12
   28c68:	9b01      	ldr	r3, [sp, #4]
   28c6a:	3380      	adds	r3, #128	; 0x80
   28c6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   28c70:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   28c74:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   28c78:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   28c7c:	68ab      	ldr	r3, [r5, #8]
   28c7e:	1c5a      	adds	r2, r3, #1
   28c80:	d008      	beq.n	28c94 <uarte_instance_init.constprop.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28c82:	a801      	add	r0, sp, #4
   28c84:	9301      	str	r3, [sp, #4]
   28c86:	f7ff fdef 	bl	28868 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   28c8a:	220c      	movs	r2, #12
   28c8c:	9b01      	ldr	r3, [sp, #4]
   28c8e:	3380      	adds	r3, #128	; 0x80
   28c90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   28c94:	68eb      	ldr	r3, [r5, #12]
   28c96:	1c58      	adds	r0, r3, #1
   28c98:	d011      	beq.n	28cbe <uarte_instance_init.constprop.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28c9a:	a801      	add	r0, sp, #4
   28c9c:	9301      	str	r3, [sp, #4]
   28c9e:	f7ff fde3 	bl	28868 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28ca2:	2301      	movs	r3, #1
   28ca4:	9a01      	ldr	r2, [sp, #4]
   28ca6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   28ca8:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   28caa:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28cac:	a801      	add	r0, sp, #4
   28cae:	9301      	str	r3, [sp, #4]
   28cb0:	f7ff fdda 	bl	28868 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   28cb4:	2203      	movs	r2, #3
   28cb6:	9b01      	ldr	r3, [sp, #4]
   28cb8:	3380      	adds	r3, #128	; 0x80
   28cba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   28cbe:	6931      	ldr	r1, [r6, #16]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   28cc0:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   28cc4:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   28cc6:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   28cca:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   28ccc:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   28cd0:	f7ff fdfe 	bl	288d0 <uarte_nrfx_configure>
	if (err) {
   28cd4:	4680      	mov	r8, r0
   28cd6:	b9b0      	cbnz	r0, 28d06 <uarte_instance_init.constprop.0+0xea>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   28cd8:	6873      	ldr	r3, [r6, #4]
   28cda:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   28cdc:	0719      	lsls	r1, r3, #28
   28cde:	d542      	bpl.n	28d66 <uarte_instance_init.constprop.0+0x14a>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   28ce0:	f107 0016 	add.w	r0, r7, #22
   28ce4:	f002 fcd0 	bl	2b688 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   28ce8:	4b52      	ldr	r3, [pc, #328]	; (28e34 <uarte_instance_init.constprop.0+0x218>)
   28cea:	4298      	cmp	r0, r3
   28cec:	d00f      	beq.n	28d0e <uarte_instance_init.constprop.0+0xf2>
   28cee:	4b52      	ldr	r3, [pc, #328]	; (28e38 <uarte_instance_init.constprop.0+0x21c>)
   28cf0:	4952      	ldr	r1, [pc, #328]	; (28e3c <uarte_instance_init.constprop.0+0x220>)
		LOG_ERR("Failed to allocate PPI Channel");
   28cf2:	4853      	ldr	r0, [pc, #332]	; (28e40 <uarte_instance_init.constprop.0+0x224>)
   28cf4:	1ac9      	subs	r1, r1, r3
   28cf6:	08c9      	lsrs	r1, r1, #3
   28cf8:	0189      	lsls	r1, r1, #6
   28cfa:	f041 0101 	orr.w	r1, r1, #1
   28cfe:	f010 fcfc 	bl	396fa <log_0>
		return -EIO;
   28d02:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   28d06:	4640      	mov	r0, r8
   28d08:	b002      	add	sp, #8
   28d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   28d0e:	f514 7a90 	adds.w	sl, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   28d12:	f897 9016 	ldrb.w	r9, [r7, #22]
   28d16:	d10b      	bne.n	28d30 <uarte_instance_init.constprop.0+0x114>
   28d18:	494a      	ldr	r1, [pc, #296]	; (28e44 <uarte_instance_init.constprop.0+0x228>)
   28d1a:	484b      	ldr	r0, [pc, #300]	; (28e48 <uarte_instance_init.constprop.0+0x22c>)
   28d1c:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   28d20:	4a4a      	ldr	r2, [pc, #296]	; (28e4c <uarte_instance_init.constprop.0+0x230>)
   28d22:	f010 fa4a 	bl	391ba <printk>
   28d26:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
   28d2a:	4848      	ldr	r0, [pc, #288]	; (28e4c <uarte_instance_init.constprop.0+0x230>)
   28d2c:	f010 fc9c 	bl	39668 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   28d30:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   28d34:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   28d38:	f8ca 9080 	str.w	r9, [sl, #128]	; 0x80
    NRFX_ASSERT(tep);
   28d3c:	d10b      	bne.n	28d56 <uarte_instance_init.constprop.0+0x13a>
   28d3e:	4944      	ldr	r1, [pc, #272]	; (28e50 <uarte_instance_init.constprop.0+0x234>)
   28d40:	4841      	ldr	r0, [pc, #260]	; (28e48 <uarte_instance_init.constprop.0+0x22c>)
   28d42:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   28d46:	4a41      	ldr	r2, [pc, #260]	; (28e4c <uarte_instance_init.constprop.0+0x230>)
   28d48:	f010 fa37 	bl	391ba <printk>
   28d4c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   28d50:	483e      	ldr	r0, [pc, #248]	; (28e4c <uarte_instance_init.constprop.0+0x230>)
   28d52:	f010 fc89 	bl	39668 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   28d56:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   28d58:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   28d5c:	7dba      	ldrb	r2, [r7, #22]
   28d5e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   28d60:	4a3c      	ldr	r2, [pc, #240]	; (28e54 <uarte_instance_init.constprop.0+0x238>)
   28d62:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   28d66:	68fb      	ldr	r3, [r7, #12]
	return dev->config;
   28d68:	6872      	ldr	r2, [r6, #4]
	if (data->async) {
   28d6a:	2b00      	cmp	r3, #0
   28d6c:	d04e      	beq.n	28e0c <uarte_instance_init.constprop.0+0x1f0>
	return config->uarte_regs;
   28d6e:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENSET = mask;
   28d70:	2204      	movs	r2, #4
	return dev->data;
   28d72:	6935      	ldr	r5, [r6, #16]
   28d74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   28d78:	2201      	movs	r2, #1
   28d7a:	68e8      	ldr	r0, [r5, #12]
   28d7c:	4936      	ldr	r1, [pc, #216]	; (28e58 <uarte_instance_init.constprop.0+0x23c>)
   28d7e:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
   28d82:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   28d86:	2108      	movs	r1, #8
   28d88:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28d8c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   28d90:	b1a1      	cbz	r1, 28dbc <uarte_instance_init.constprop.0+0x1a0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28d92:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28d94:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   28d98:	b91a      	cbnz	r2, 28da2 <uarte_instance_init.constprop.0+0x186>
   28d9a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   28d9e:	2a00      	cmp	r2, #0
   28da0:	d0f8      	beq.n	28d94 <uarte_instance_init.constprop.0+0x178>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28da2:	2200      	movs	r2, #0
   28da4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   28da8:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   28dac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   28db0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   28db4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   28db8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   28dbc:	2200      	movs	r2, #0
   28dbe:	4927      	ldr	r1, [pc, #156]	; (28e5c <uarte_instance_init.constprop.0+0x240>)
   28dc0:	3078      	adds	r0, #120	; 0x78
   28dc2:	f014 fbac 	bl	3d51e <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   28dc6:	68eb      	ldr	r3, [r5, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   28dc8:	68e8      	ldr	r0, [r5, #12]
	timer->user_data = user_data;
   28dca:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
   28dce:	2200      	movs	r2, #0
   28dd0:	4923      	ldr	r1, [pc, #140]	; (28e60 <uarte_instance_init.constprop.0+0x244>)
   28dd2:	3018      	adds	r0, #24
   28dd4:	f014 fba3 	bl	3d51e <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   28dd8:	68eb      	ldr	r3, [r5, #12]
   28dda:	64dd      	str	r5, [r3, #76]	; 0x4c
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   28ddc:	6873      	ldr	r3, [r6, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   28dde:	3714      	adds	r7, #20
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   28de0:	685b      	ldr	r3, [r3, #4]
   28de2:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   28de4:	bf5c      	itt	pl
   28de6:	f44f 7280 	movpl.w	r2, #256	; 0x100
   28dea:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   28dee:	06db      	lsls	r3, r3, #27
   28df0:	bf44      	itt	mi
   28df2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   28df6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   28dfa:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   28dfc:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   28e00:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28e04:	2301      	movs	r3, #1
   28e06:	60a3      	str	r3, [r4, #8]
   28e08:	60e3      	str	r3, [r4, #12]
	return 0;
   28e0a:	e77c      	b.n	28d06 <uarte_instance_init.constprop.0+0xea>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   28e0c:	2208      	movs	r2, #8
   28e0e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   28e12:	686a      	ldr	r2, [r5, #4]
   28e14:	3201      	adds	r2, #1
   28e16:	d0e1      	beq.n	28ddc <uarte_instance_init.constprop.0+0x1c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28e18:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   28e1c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   28e20:	f107 0315 	add.w	r3, r7, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   28e24:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   28e28:	2301      	movs	r3, #1
   28e2a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28e2e:	6023      	str	r3, [r4, #0]
}
   28e30:	e7d4      	b.n	28ddc <uarte_instance_init.constprop.0+0x1c0>
   28e32:	bf00      	nop
   28e34:	0bad0000 	.word	0x0bad0000
   28e38:	0003e468 	.word	0x0003e468
   28e3c:	0003e568 	.word	0x0003e568
   28e40:	00040f07 	.word	0x00040f07
   28e44:	00040f5e 	.word	0x00040f5e
   28e48:	0003f0e1 	.word	0x0003f0e1
   28e4c:	00040f26 	.word	0x00040f26
   28e50:	00040f62 	.word	0x00040f62
   28e54:	40017000 	.word	0x40017000
   28e58:	000a0210 	.word	0x000a0210
   28e5c:	0003aceb 	.word	0x0003aceb
   28e60:	0003b0d1 	.word	0x0003b0d1

00028e64 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   28e64:	b530      	push	{r4, r5, lr}
   28e66:	b085      	sub	sp, #20
   28e68:	466c      	mov	r4, sp
   28e6a:	4605      	mov	r5, r0
   28e6c:	4b08      	ldr	r3, [pc, #32]	; (28e90 <uarte_2_init+0x2c>)
   28e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28e74:	2200      	movs	r2, #0
   28e76:	2101      	movs	r1, #1
   28e78:	200a      	movs	r0, #10
   28e7a:	f7fc fd45 	bl	25908 <z_arm_irq_priority_set>
   28e7e:	200a      	movs	r0, #10
   28e80:	f7fc fd26 	bl	258d0 <arch_irq_enable>
   28e84:	4621      	mov	r1, r4
   28e86:	4628      	mov	r0, r5
   28e88:	f7ff fec8 	bl	28c1c <uarte_instance_init.constprop.0>
   28e8c:	b005      	add	sp, #20
   28e8e:	bd30      	pop	{r4, r5, pc}
   28e90:	0003e620 	.word	0x0003e620

00028e94 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   28e94:	b530      	push	{r4, r5, lr}
   28e96:	b085      	sub	sp, #20
   28e98:	466c      	mov	r4, sp
   28e9a:	4605      	mov	r5, r0
   28e9c:	4b08      	ldr	r3, [pc, #32]	; (28ec0 <uarte_0_init+0x2c>)
   28e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28ea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28ea4:	2200      	movs	r2, #0
   28ea6:	2101      	movs	r1, #1
   28ea8:	2008      	movs	r0, #8
   28eaa:	f7fc fd2d 	bl	25908 <z_arm_irq_priority_set>
   28eae:	2008      	movs	r0, #8
   28eb0:	f7fc fd0e 	bl	258d0 <arch_irq_enable>
   28eb4:	4621      	mov	r1, r4
   28eb6:	4628      	mov	r0, r5
   28eb8:	f7ff feb0 	bl	28c1c <uarte_instance_init.constprop.0>
   28ebc:	b005      	add	sp, #20
   28ebe:	bd30      	pop	{r4, r5, pc}
   28ec0:	0003e630 	.word	0x0003e630

00028ec4 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   28ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28ec6:	460f      	mov	r7, r1
   28ec8:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   28eca:	b948      	cbnz	r0, 28ee0 <entropy_cc3xx_rng_get_entropy+0x1c>
   28ecc:	4918      	ldr	r1, [pc, #96]	; (28f30 <entropy_cc3xx_rng_get_entropy+0x6c>)
   28ece:	4819      	ldr	r0, [pc, #100]	; (28f34 <entropy_cc3xx_rng_get_entropy+0x70>)
   28ed0:	2324      	movs	r3, #36	; 0x24
   28ed2:	4a19      	ldr	r2, [pc, #100]	; (28f38 <entropy_cc3xx_rng_get_entropy+0x74>)
   28ed4:	f010 f971 	bl	391ba <printk>
   28ed8:	2124      	movs	r1, #36	; 0x24
   28eda:	4817      	ldr	r0, [pc, #92]	; (28f38 <entropy_cc3xx_rng_get_entropy+0x74>)
   28edc:	f010 fbc4 	bl	39668 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   28ee0:	b94f      	cbnz	r7, 28ef6 <entropy_cc3xx_rng_get_entropy+0x32>
   28ee2:	4916      	ldr	r1, [pc, #88]	; (28f3c <entropy_cc3xx_rng_get_entropy+0x78>)
   28ee4:	4813      	ldr	r0, [pc, #76]	; (28f34 <entropy_cc3xx_rng_get_entropy+0x70>)
   28ee6:	2325      	movs	r3, #37	; 0x25
   28ee8:	4a13      	ldr	r2, [pc, #76]	; (28f38 <entropy_cc3xx_rng_get_entropy+0x74>)
   28eea:	f010 f966 	bl	391ba <printk>
   28eee:	2125      	movs	r1, #37	; 0x25
   28ef0:	4811      	ldr	r0, [pc, #68]	; (28f38 <entropy_cc3xx_rng_get_entropy+0x74>)
   28ef2:	f010 fbb9 	bl	39668 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   28ef6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   28efa:	2400      	movs	r4, #0
   28efc:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   28f00:	42a6      	cmp	r6, r4
   28f02:	d801      	bhi.n	28f08 <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   28f04:	b003      	add	sp, #12
   28f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   28f08:	1b33      	subs	r3, r6, r4
   28f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28f0e:	bf38      	it	cc
   28f10:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   28f12:	aa01      	add	r2, sp, #4
   28f14:	4629      	mov	r1, r5
   28f16:	1938      	adds	r0, r7, r4
   28f18:	f011 f858 	bl	39fcc <spm_request_random_number>
		if (olen != chunk_size) {
   28f1c:	9b01      	ldr	r3, [sp, #4]
   28f1e:	42ab      	cmp	r3, r5
   28f20:	d103      	bne.n	28f2a <entropy_cc3xx_rng_get_entropy+0x66>
		if (res != 0) {
   28f22:	2800      	cmp	r0, #0
   28f24:	d1ee      	bne.n	28f04 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   28f26:	442c      	add	r4, r5
   28f28:	e7ea      	b.n	28f00 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   28f2a:	f06f 0015 	mvn.w	r0, #21
   28f2e:	e7e9      	b.n	28f04 <entropy_cc3xx_rng_get_entropy+0x40>
   28f30:	00040fad 	.word	0x00040fad
   28f34:	0003f0e1 	.word	0x0003f0e1
   28f38:	00040f7d 	.word	0x00040f7d
   28f3c:	00040fc0 	.word	0x00040fc0

00028f40 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   28f40:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   28f42:	4d16      	ldr	r5, [pc, #88]	; (28f9c <_nrf_modem_lib_init+0x5c>)
   28f44:	4c16      	ldr	r4, [pc, #88]	; (28fa0 <_nrf_modem_lib_init+0x60>)
   28f46:	782b      	ldrb	r3, [r5, #0]
   28f48:	b933      	cbnz	r3, 28f58 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   28f4a:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   28f4e:	4815      	ldr	r0, [pc, #84]	; (28fa4 <_nrf_modem_lib_init+0x64>)
   28f50:	f014 fa61 	bl	3d416 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   28f54:	2301      	movs	r3, #1
   28f56:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   28f58:	2200      	movs	r2, #0
   28f5a:	202a      	movs	r0, #42	; 0x2a
   28f5c:	4611      	mov	r1, r2
   28f5e:	f7fc fcd3 	bl	25908 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   28f62:	2100      	movs	r1, #0
   28f64:	4810      	ldr	r0, [pc, #64]	; (28fa8 <_nrf_modem_lib_init+0x68>)
   28f66:	f00a fba9 	bl	336bc <nrf_modem_init>
   28f6a:	4b10      	ldr	r3, [pc, #64]	; (28fac <_nrf_modem_lib_init+0x6c>)
   28f6c:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   28f6e:	f04f 32ff 	mov.w	r2, #4294967295
   28f72:	f04f 33ff 	mov.w	r3, #4294967295
   28f76:	480b      	ldr	r0, [pc, #44]	; (28fa4 <_nrf_modem_lib_init+0x64>)
   28f78:	f00b fae2 	bl	34540 <z_impl_k_mutex_lock>
	return list->head;
   28f7c:	6820      	ldr	r0, [r4, #0]

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   28f7e:	b138      	cbz	r0, 28f90 <_nrf_modem_lib_init+0x50>
	return node->next;
   28f80:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   28f82:	3004      	adds	r0, #4
   28f84:	f00b fc9a 	bl	348bc <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   28f88:	b114      	cbz	r4, 28f90 <_nrf_modem_lib_init+0x50>
   28f8a:	4620      	mov	r0, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   28f8c:	6824      	ldr	r4, [r4, #0]
   28f8e:	e7f8      	b.n	28f82 <_nrf_modem_lib_init+0x42>
	return z_impl_k_mutex_unlock(mutex);
   28f90:	4804      	ldr	r0, [pc, #16]	; (28fa4 <_nrf_modem_lib_init+0x64>)
   28f92:	f00b fbcf 	bl	34734 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   28f96:	2000      	movs	r0, #0
   28f98:	bd38      	pop	{r3, r4, r5, pc}
   28f9a:	bf00      	nop
   28f9c:	200180f5 	.word	0x200180f5
   28fa0:	200179cc 	.word	0x200179cc
   28fa4:	200179b8 	.word	0x200179b8
   28fa8:	0003eaac 	.word	0x0003eaac
   28fac:	200179b4 	.word	0x200179b4

00028fb0 <nrf_modem_lib_shutdown_wait>:

void nrf_modem_lib_shutdown_wait(void)
{
   28fb0:	b530      	push	{r4, r5, lr}
   28fb2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   28fb4:	2201      	movs	r2, #1
   28fb6:	2100      	movs	r1, #0
   28fb8:	a802      	add	r0, sp, #8
   28fba:	f014 fa33 	bl	3d424 <z_impl_k_sem_init>
   28fbe:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   28fc0:	f04f 33ff 	mov.w	r3, #4294967295
   28fc4:	f04f 32ff 	mov.w	r2, #4294967295
   28fc8:	481c      	ldr	r0, [pc, #112]	; (2903c <nrf_modem_lib_shutdown_wait+0x8c>)
   28fca:	f00b fab9 	bl	34540 <z_impl_k_mutex_lock>
	parent->next = child;
   28fce:	2300      	movs	r3, #0
	return list->tail;
   28fd0:	4c1b      	ldr	r4, [pc, #108]	; (29040 <nrf_modem_lib_shutdown_wait+0x90>)
	parent->next = child;
   28fd2:	9301      	str	r3, [sp, #4]
	return list->tail;
   28fd4:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   28fd6:	bb2b      	cbnz	r3, 29024 <nrf_modem_lib_shutdown_wait+0x74>
	list->head = node;
   28fd8:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   28fdc:	4817      	ldr	r0, [pc, #92]	; (2903c <nrf_modem_lib_shutdown_wait+0x8c>)
   28fde:	f00b fba9 	bl	34734 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   28fe2:	f04f 32ff 	mov.w	r2, #4294967295
   28fe6:	f04f 33ff 	mov.w	r3, #4294967295
   28fea:	a802      	add	r0, sp, #8
   28fec:	f00b fcaa 	bl	34944 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   28ff0:	f04f 32ff 	mov.w	r2, #4294967295
   28ff4:	f04f 33ff 	mov.w	r3, #4294967295
   28ff8:	4810      	ldr	r0, [pc, #64]	; (2903c <nrf_modem_lib_shutdown_wait+0x8c>)
   28ffa:	f00b faa1 	bl	34540 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28ffe:	2200      	movs	r2, #0
	return list->head;
   29000:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29002:	b153      	cbz	r3, 2901a <nrf_modem_lib_shutdown_wait+0x6a>
   29004:	42ab      	cmp	r3, r5
   29006:	d115      	bne.n	29034 <nrf_modem_lib_shutdown_wait+0x84>
	return node->next;
   29008:	9901      	ldr	r1, [sp, #4]
	return list->tail;
   2900a:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   2900c:	b96a      	cbnz	r2, 2902a <nrf_modem_lib_shutdown_wait+0x7a>
   2900e:	4298      	cmp	r0, r3
	list->head = node;
   29010:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   29012:	d100      	bne.n	29016 <nrf_modem_lib_shutdown_wait+0x66>
	list->tail = node;
   29014:	6061      	str	r1, [r4, #4]
	parent->next = child;
   29016:	2300      	movs	r3, #0
   29018:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   2901a:	4808      	ldr	r0, [pc, #32]	; (2903c <nrf_modem_lib_shutdown_wait+0x8c>)
   2901c:	f00b fb8a 	bl	34734 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   29020:	b009      	add	sp, #36	; 0x24
   29022:	bd30      	pop	{r4, r5, pc}
   29024:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29026:	6065      	str	r5, [r4, #4]
}
   29028:	e7d8      	b.n	28fdc <nrf_modem_lib_shutdown_wait+0x2c>
Z_GENLIST_REMOVE(slist, snode)
   2902a:	4298      	cmp	r0, r3
	parent->next = child;
   2902c:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2902e:	bf08      	it	eq
   29030:	6062      	streq	r2, [r4, #4]
}
   29032:	e7f0      	b.n	29016 <nrf_modem_lib_shutdown_wait+0x66>
	return node->next;
   29034:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29036:	681b      	ldr	r3, [r3, #0]
   29038:	e7e3      	b.n	29002 <nrf_modem_lib_shutdown_wait+0x52>
   2903a:	bf00      	nop
   2903c:	200179b8 	.word	0x200179b8
   29040:	200179cc 	.word	0x200179cc

00029044 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   29044:	4b10      	ldr	r3, [pc, #64]	; (29088 <thread_monitor_entry_get+0x44>)
{
   29046:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   29048:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2904a:	4b10      	ldr	r3, [pc, #64]	; (2908c <thread_monitor_entry_get+0x48>)
{
   2904c:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   2904e:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
   29050:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   29052:	4618      	mov	r0, r3
   29054:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   29056:	3d01      	subs	r5, #1
   29058:	d00e      	beq.n	29078 <thread_monitor_entry_get+0x34>
		if (entry->id == id) {
   2905a:	6804      	ldr	r4, [r0, #0]
   2905c:	428c      	cmp	r4, r1
   2905e:	d00f      	beq.n	29080 <thread_monitor_entry_get+0x3c>
		} else if (entry->id == 0) {
   29060:	b17c      	cbz	r4, 29082 <thread_monitor_entry_get+0x3e>
		entry_age = rpc_event_cnt - entry->cnt;
   29062:	6844      	ldr	r4, [r0, #4]
   29064:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   29066:	42b4      	cmp	r4, r6
   29068:	bfc8      	it	gt
   2906a:	4603      	movgt	r3, r0
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   2906c:	f100 0008 	add.w	r0, r0, #8
		if (entry_age > oldest_entry_age) {
   29070:	bfc8      	it	gt
   29072:	4626      	movgt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   29074:	42b8      	cmp	r0, r7
   29076:	d2ee      	bcs.n	29056 <thread_monitor_entry_get+0x12>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   29078:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   2907a:	3a01      	subs	r2, #1
	new_entry->id = id;
   2907c:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   2907e:	605a      	str	r2, [r3, #4]
}
   29080:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29082:	4603      	mov	r3, r0
   29084:	e7f8      	b.n	29078 <thread_monitor_entry_get+0x34>
   29086:	bf00      	nop
   29088:	20017a04 	.word	0x20017a04
   2908c:	20017a10 	.word	0x20017a10

00029090 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   29090:	4668      	mov	r0, sp
   29092:	f020 0107 	bic.w	r1, r0, #7
   29096:	468d      	mov	sp, r1
   29098:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2909a:	4b0d      	ldr	r3, [pc, #52]	; (290d0 <rpc_proxy_irq_handler+0x40>)
   2909c:	e8d3 1fef 	ldaex	r1, [r3]
   290a0:	3101      	adds	r1, #1
   290a2:	e8c3 1fe2 	stlex	r2, r1, [r3]
   290a6:	2a00      	cmp	r2, #0
   290a8:	d1f8      	bne.n	2909c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_os_application_irq_handler();
   290aa:	f006 ff89 	bl	2ffc0 <nrf_modem_os_application_irq_handler>
	return list->head;
   290ae:	4b09      	ldr	r3, [pc, #36]	; (290d4 <rpc_proxy_irq_handler+0x44>)
   290b0:	681c      	ldr	r4, [r3, #0]

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   290b2:	b93c      	cbnz	r4, 290c4 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   290b4:	f7fc fc5a 	bl	2596c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   290b8:	f7fc ffb8 	bl	2602c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   290bc:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   290c0:	4685      	mov	sp, r0
   290c2:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   290c4:	1d20      	adds	r0, r4, #4
   290c6:	f00b fbf9 	bl	348bc <z_impl_k_sem_give>
	return node->next;
   290ca:	6824      	ldr	r4, [r4, #0]
   290cc:	e7f1      	b.n	290b2 <rpc_proxy_irq_handler+0x22>
   290ce:	bf00      	nop
   290d0:	20017a04 	.word	0x20017a04
   290d4:	20017a08 	.word	0x20017a08

000290d8 <nrf_modem_os_timedwait>:
{
   290d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   290dc:	460d      	mov	r5, r1
   290de:	b088      	sub	sp, #32
	return z_impl_k_uptime_ticks();
   290e0:	f014 f9f5 	bl	3d4ce <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   290e4:	682b      	ldr	r3, [r5, #0]
   290e6:	4604      	mov	r4, r0
   290e8:	2b00      	cmp	r3, #0
   290ea:	460f      	mov	r7, r1
   290ec:	d103      	bne.n	290f6 <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   290ee:	f00c ff75 	bl	35fdc <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   290f2:	203c      	movs	r0, #60	; 0x3c
   290f4:	e08d      	b.n	29212 <nrf_modem_os_timedwait+0x13a>
		*timeout = SYS_FOREVER_MS;
   290f6:	bfbc      	itt	lt
   290f8:	f04f 33ff 	movlt.w	r3, #4294967295
   290fc:	602b      	strlt	r3, [r5, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   290fe:	2201      	movs	r2, #1
   29100:	2100      	movs	r1, #0
   29102:	a802      	add	r0, sp, #8
   29104:	f014 f98e 	bl	3d424 <z_impl_k_sem_init>
   29108:	f10d 0804 	add.w	r8, sp, #4
	__asm__ volatile(
   2910c:	f04f 0320 	mov.w	r3, #32
   29110:	f3ef 8a11 	mrs	sl, BASEPRI
   29114:	f383 8811 	msr	BASEPRI, r3
   29118:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2911c:	f00d f8e2 	bl	362e4 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   29120:	f7ff ff90 	bl	29044 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   29124:	f8df 9114 	ldr.w	r9, [pc, #276]	; 2923c <nrf_modem_os_timedwait+0x164>
   29128:	6842      	ldr	r2, [r0, #4]
   2912a:	f8d9 3000 	ldr.w	r3, [r9]
   2912e:	429a      	cmp	r2, r3
   29130:	d169      	bne.n	29206 <nrf_modem_os_timedwait+0x12e>
	parent->next = child;
   29132:	2300      	movs	r3, #0
	return list->tail;
   29134:	4e42      	ldr	r6, [pc, #264]	; (29240 <nrf_modem_os_timedwait+0x168>)
	parent->next = child;
   29136:	9301      	str	r3, [sp, #4]
	return list->tail;
   29138:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_APPEND(slist, snode)
   2913a:	2b00      	cmp	r3, #0
   2913c:	d16c      	bne.n	29218 <nrf_modem_os_timedwait+0x140>
	list->head = node;
   2913e:	e9c6 8800 	strd	r8, r8, [r6]
	__asm__ volatile(
   29142:	f38a 8811 	msr	BASEPRI, sl
   29146:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2914a:	682b      	ldr	r3, [r5, #0]
   2914c:	1c5a      	adds	r2, r3, #1
   2914e:	d068      	beq.n	29222 <nrf_modem_os_timedwait+0x14a>
   29150:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   29154:	f240 30e7 	movw	r0, #999	; 0x3e7
   29158:	2100      	movs	r1, #0
   2915a:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   2915e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29162:	2300      	movs	r3, #0
   29164:	fbcc 010e 	smlal	r0, r1, ip, lr
   29168:	f7f8 f836 	bl	211d8 <__aeabi_uldivmod>
   2916c:	4602      	mov	r2, r0
   2916e:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   29170:	a802      	add	r0, sp, #8
   29172:	f00b fbe7 	bl	34944 <z_impl_k_sem_take>
	__asm__ volatile(
   29176:	f04f 0320 	mov.w	r3, #32
   2917a:	f3ef 8a11 	mrs	sl, BASEPRI
   2917e:	f383 8811 	msr	BASEPRI, r3
   29182:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29186:	2200      	movs	r2, #0
	return list->head;
   29188:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2918a:	b15b      	cbz	r3, 291a4 <nrf_modem_os_timedwait+0xcc>
   2918c:	4543      	cmp	r3, r8
   2918e:	d151      	bne.n	29234 <nrf_modem_os_timedwait+0x15c>
	return node->next;
   29190:	9901      	ldr	r1, [sp, #4]
	return list->tail;
   29192:	6870      	ldr	r0, [r6, #4]
Z_GENLIST_REMOVE(slist, snode)
   29194:	2a00      	cmp	r2, #0
   29196:	d148      	bne.n	2922a <nrf_modem_os_timedwait+0x152>
   29198:	4298      	cmp	r0, r3
	list->head = node;
   2919a:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2919c:	d100      	bne.n	291a0 <nrf_modem_os_timedwait+0xc8>
	list->tail = node;
   2919e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   291a0:	2300      	movs	r3, #0
   291a2:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   291a4:	f00d f89e 	bl	362e4 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   291a8:	f7ff ff4c 	bl	29044 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   291ac:	f8d9 3000 	ldr.w	r3, [r9]
   291b0:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   291b2:	f38a 8811 	msr	BASEPRI, sl
   291b6:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   291ba:	f8d5 8000 	ldr.w	r8, [r5]
   291be:	f1b8 3fff 	cmp.w	r8, #4294967295
   291c2:	d025      	beq.n	29210 <nrf_modem_os_timedwait+0x138>
   291c4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	return z_impl_k_uptime_ticks();
   291c8:	f014 f981 	bl	3d4ce <z_impl_k_uptime_ticks>
   291cc:	fba4 3206 	umull	r3, r2, r4, r6
   291d0:	fb06 2207 	mla	r2, r6, r7, r2
   291d4:	0bdb      	lsrs	r3, r3, #15
   291d6:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   291da:	eb13 0308 	adds.w	r3, r3, r8
   291de:	ea4f 74e8 	mov.w	r4, r8, asr #31
   291e2:	eb44 34d2 	adc.w	r4, r4, r2, lsr #15
   291e6:	fba0 2006 	umull	r2, r0, r0, r6
   291ea:	fb06 0101 	mla	r1, r6, r1, r0
   291ee:	0bd2      	lsrs	r2, r2, #15
   291f0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   291f4:	1a9b      	subs	r3, r3, r2
   291f6:	eb64 34d1 	sbc.w	r4, r4, r1, lsr #15
	*timeout = remaining > 0 ? remaining : 0;
   291fa:	2c00      	cmp	r4, #0
   291fc:	bfb8      	it	lt
   291fe:	2300      	movlt	r3, #0
   29200:	602b      	str	r3, [r5, #0]
	if (*timeout == 0) {
   29202:	b92b      	cbnz	r3, 29210 <nrf_modem_os_timedwait+0x138>
   29204:	e775      	b.n	290f2 <nrf_modem_os_timedwait+0x1a>
	entry->cnt = rpc_event_cnt;
   29206:	6043      	str	r3, [r0, #4]
   29208:	f38a 8811 	msr	BASEPRI, sl
   2920c:	f3bf 8f6f 	isb	sy
		return 0;
   29210:	2000      	movs	r0, #0
}
   29212:	b008      	add	sp, #32
   29214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29218:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   2921c:	f8c6 8004 	str.w	r8, [r6, #4]
   29220:	e78f      	b.n	29142 <nrf_modem_os_timedwait+0x6a>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   29222:	f04f 32ff 	mov.w	r2, #4294967295
   29226:	4613      	mov	r3, r2
   29228:	e7a2      	b.n	29170 <nrf_modem_os_timedwait+0x98>
Z_GENLIST_REMOVE(slist, snode)
   2922a:	4298      	cmp	r0, r3
	parent->next = child;
   2922c:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2922e:	bf08      	it	eq
   29230:	6072      	streq	r2, [r6, #4]
}
   29232:	e7b5      	b.n	291a0 <nrf_modem_os_timedwait+0xc8>
	return node->next;
   29234:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29236:	681b      	ldr	r3, [r3, #0]
   29238:	e7a7      	b.n	2918a <nrf_modem_os_timedwait+0xb2>
   2923a:	bf00      	nop
   2923c:	20017a04 	.word	0x20017a04
   29240:	20017a08 	.word	0x20017a08

00029244 <nrf_modem_os_errno_set>:
	switch (err_code) {
   29244:	283d      	cmp	r0, #61	; 0x3d
{
   29246:	b510      	push	{r4, lr}
   29248:	4604      	mov	r4, r0
	switch (err_code) {
   2924a:	f300 80a1 	bgt.w	29390 <nrf_modem_os_errno_set+0x14c>
   2924e:	2800      	cmp	r0, #0
   29250:	dc1e      	bgt.n	29290 <nrf_modem_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by nrf_modem_lib!", err_code);
   29252:	f240 1369 	movw	r3, #361	; 0x169
   29256:	4abc      	ldr	r2, [pc, #752]	; (29548 <nrf_modem_os_errno_set+0x304>)
   29258:	49bc      	ldr	r1, [pc, #752]	; (2954c <nrf_modem_os_errno_set+0x308>)
   2925a:	48bd      	ldr	r0, [pc, #756]	; (29550 <nrf_modem_os_errno_set+0x30c>)
   2925c:	f00f ffad 	bl	391ba <printk>
   29260:	4621      	mov	r1, r4
   29262:	48bc      	ldr	r0, [pc, #752]	; (29554 <nrf_modem_os_errno_set+0x310>)
   29264:	f00f ffa9 	bl	391ba <printk>
   29268:	f240 1169 	movw	r1, #361	; 0x169
   2926c:	48b6      	ldr	r0, [pc, #728]	; (29548 <nrf_modem_os_errno_set+0x304>)
   2926e:	f010 f9fb 	bl	39668 <assert_post_action>
   29272:	4bb9      	ldr	r3, [pc, #740]	; (29558 <nrf_modem_os_errno_set+0x314>)
   29274:	4ab9      	ldr	r2, [pc, #740]	; (2955c <nrf_modem_os_errno_set+0x318>)
		LOG_ERR("Untranslated errno %d set by nrf_modem_lib!", err_code);
   29276:	4621      	mov	r1, r4
   29278:	1ad2      	subs	r2, r2, r3
   2927a:	08d2      	lsrs	r2, r2, #3
   2927c:	0192      	lsls	r2, r2, #6
   2927e:	48b8      	ldr	r0, [pc, #736]	; (29560 <nrf_modem_os_errno_set+0x31c>)
   29280:	f042 0201 	orr.w	r2, r2, #1
   29284:	f010 fa46 	bl	39714 <log_1>
		errno = 0xBAADBAAD;
   29288:	f010 ff0f 	bl	3a0aa <__errno>
   2928c:	4bb5      	ldr	r3, [pc, #724]	; (29564 <nrf_modem_os_errno_set+0x320>)
   2928e:	e0c0      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
	switch (err_code) {
   29290:	1e43      	subs	r3, r0, #1
   29292:	2b3c      	cmp	r3, #60	; 0x3c
   29294:	d8dd      	bhi.n	29252 <nrf_modem_os_errno_set+0xe>
   29296:	a201      	add	r2, pc, #4	; (adr r2, 2929c <nrf_modem_os_errno_set+0x58>)
   29298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2929c:	0002940d 	.word	0x0002940d
   292a0:	00029417 	.word	0x00029417
   292a4:	00029253 	.word	0x00029253
   292a8:	00029253 	.word	0x00029253
   292ac:	0002941f 	.word	0x0002941f
   292b0:	00029253 	.word	0x00029253
   292b4:	00029253 	.word	0x00029253
   292b8:	00029427 	.word	0x00029427
   292bc:	0002942f 	.word	0x0002942f
   292c0:	00029253 	.word	0x00029253
   292c4:	00029253 	.word	0x00029253
   292c8:	00029437 	.word	0x00029437
   292cc:	0002943f 	.word	0x0002943f
   292d0:	00029447 	.word	0x00029447
   292d4:	00029253 	.word	0x00029253
   292d8:	00029253 	.word	0x00029253
   292dc:	00029253 	.word	0x00029253
   292e0:	00029253 	.word	0x00029253
   292e4:	00029253 	.word	0x00029253
   292e8:	00029253 	.word	0x00029253
   292ec:	00029253 	.word	0x00029253
   292f0:	0002944f 	.word	0x0002944f
   292f4:	00029253 	.word	0x00029253
   292f8:	00029457 	.word	0x00029457
   292fc:	00029253 	.word	0x00029253
   29300:	00029253 	.word	0x00029253
   29304:	00029253 	.word	0x00029253
   29308:	00029253 	.word	0x00029253
   2930c:	00029253 	.word	0x00029253
   29310:	00029253 	.word	0x00029253
   29314:	00029253 	.word	0x00029253
   29318:	00029253 	.word	0x00029253
   2931c:	00029253 	.word	0x00029253
   29320:	00029253 	.word	0x00029253
   29324:	0002945f 	.word	0x0002945f
   29328:	00029253 	.word	0x00029253
   2932c:	00029467 	.word	0x00029467
   29330:	00029253 	.word	0x00029253
   29334:	00029253 	.word	0x00029253
   29338:	00029537 	.word	0x00029537
   2933c:	0002946f 	.word	0x0002946f
   29340:	00029477 	.word	0x00029477
   29344:	0002947f 	.word	0x0002947f
   29348:	00029487 	.word	0x00029487
   2934c:	0002948f 	.word	0x0002948f
   29350:	00029253 	.word	0x00029253
   29354:	00029497 	.word	0x00029497
   29358:	0002949f 	.word	0x0002949f
   2935c:	00029253 	.word	0x00029253
   29360:	000294a7 	.word	0x000294a7
   29364:	000294af 	.word	0x000294af
   29368:	000294b7 	.word	0x000294b7
   2936c:	0002953f 	.word	0x0002953f
   29370:	000294bf 	.word	0x000294bf
   29374:	00029253 	.word	0x00029253
   29378:	000294c7 	.word	0x000294c7
   2937c:	000294cf 	.word	0x000294cf
   29380:	00029253 	.word	0x00029253
   29384:	00029253 	.word	0x00029253
   29388:	000294d7 	.word	0x000294d7
   2938c:	000294df 	.word	0x000294df
   29390:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   29394:	2b18      	cmp	r3, #24
   29396:	f63f af5c 	bhi.w	29252 <nrf_modem_os_errno_set+0xe>
   2939a:	2b18      	cmp	r3, #24
   2939c:	f63f af59 	bhi.w	29252 <nrf_modem_os_errno_set+0xe>
   293a0:	a201      	add	r2, pc, #4	; (adr r2, 293a8 <nrf_modem_os_errno_set+0x164>)
   293a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   293a6:	bf00      	nop
   293a8:	000294e7 	.word	0x000294e7
   293ac:	00029253 	.word	0x00029253
   293b0:	00029253 	.word	0x00029253
   293b4:	00029253 	.word	0x00029253
   293b8:	00029253 	.word	0x00029253
   293bc:	00029253 	.word	0x00029253
   293c0:	00029253 	.word	0x00029253
   293c4:	000294ef 	.word	0x000294ef
   293c8:	00029253 	.word	0x00029253
   293cc:	000294ff 	.word	0x000294ff
   293d0:	000294f7 	.word	0x000294f7
   293d4:	00029253 	.word	0x00029253
   293d8:	00029253 	.word	0x00029253
   293dc:	00029253 	.word	0x00029253
   293e0:	00029253 	.word	0x00029253
   293e4:	00029253 	.word	0x00029253
   293e8:	00029253 	.word	0x00029253
   293ec:	00029253 	.word	0x00029253
   293f0:	00029253 	.word	0x00029253
   293f4:	00029253 	.word	0x00029253
   293f8:	00029507 	.word	0x00029507
   293fc:	0002950f 	.word	0x0002950f
   29400:	00029519 	.word	0x00029519
   29404:	00029523 	.word	0x00029523
   29408:	0002952d 	.word	0x0002952d
		errno = EPERM;
   2940c:	f010 fe4d 	bl	3a0aa <__errno>
   29410:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   29412:	6003      	str	r3, [r0, #0]
}
   29414:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   29416:	f010 fe48 	bl	3a0aa <__errno>
   2941a:	2302      	movs	r3, #2
   2941c:	e7f9      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EIO;
   2941e:	f010 fe44 	bl	3a0aa <__errno>
   29422:	2305      	movs	r3, #5
   29424:	e7f5      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ENOEXEC;
   29426:	f010 fe40 	bl	3a0aa <__errno>
   2942a:	2308      	movs	r3, #8
   2942c:	e7f1      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EBADF;
   2942e:	f010 fe3c 	bl	3a0aa <__errno>
   29432:	2309      	movs	r3, #9
   29434:	e7ed      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ENOMEM;
   29436:	f010 fe38 	bl	3a0aa <__errno>
   2943a:	230c      	movs	r3, #12
   2943c:	e7e9      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EACCES;
   2943e:	f010 fe34 	bl	3a0aa <__errno>
   29442:	230d      	movs	r3, #13
   29444:	e7e5      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EFAULT;
   29446:	f010 fe30 	bl	3a0aa <__errno>
   2944a:	230e      	movs	r3, #14
   2944c:	e7e1      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EINVAL;
   2944e:	f010 fe2c 	bl	3a0aa <__errno>
   29452:	2316      	movs	r3, #22
   29454:	e7dd      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EMFILE;
   29456:	f010 fe28 	bl	3a0aa <__errno>
   2945a:	2318      	movs	r3, #24
   2945c:	e7d9      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EAGAIN;
   2945e:	f010 fe24 	bl	3a0aa <__errno>
   29462:	230b      	movs	r3, #11
   29464:	e7d5      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EDOM;
   29466:	f010 fe20 	bl	3a0aa <__errno>
   2946a:	2321      	movs	r3, #33	; 0x21
   2946c:	e7d1      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EPROTOTYPE;
   2946e:	f010 fe1c 	bl	3a0aa <__errno>
   29472:	236b      	movs	r3, #107	; 0x6b
   29474:	e7cd      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ENOPROTOOPT;
   29476:	f010 fe18 	bl	3a0aa <__errno>
   2947a:	236d      	movs	r3, #109	; 0x6d
   2947c:	e7c9      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EPROTONOSUPPORT;
   2947e:	f010 fe14 	bl	3a0aa <__errno>
   29482:	237b      	movs	r3, #123	; 0x7b
   29484:	e7c5      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ESOCKTNOSUPPORT;
   29486:	f010 fe10 	bl	3a0aa <__errno>
   2948a:	237c      	movs	r3, #124	; 0x7c
   2948c:	e7c1      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EOPNOTSUPP;
   2948e:	f010 fe0c 	bl	3a0aa <__errno>
   29492:	235f      	movs	r3, #95	; 0x5f
   29494:	e7bd      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EAFNOSUPPORT;
   29496:	f010 fe08 	bl	3a0aa <__errno>
   2949a:	236a      	movs	r3, #106	; 0x6a
   2949c:	e7b9      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EADDRINUSE;
   2949e:	f010 fe04 	bl	3a0aa <__errno>
   294a2:	2370      	movs	r3, #112	; 0x70
   294a4:	e7b5      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ENETDOWN;
   294a6:	f010 fe00 	bl	3a0aa <__errno>
   294aa:	2373      	movs	r3, #115	; 0x73
   294ac:	e7b1      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ENETUNREACH;
   294ae:	f010 fdfc 	bl	3a0aa <__errno>
   294b2:	2372      	movs	r3, #114	; 0x72
   294b4:	e7ad      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ENETRESET;
   294b6:	f010 fdf8 	bl	3a0aa <__errno>
   294ba:	237e      	movs	r3, #126	; 0x7e
   294bc:	e7a9      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNRESET;
   294be:	f010 fdf4 	bl	3a0aa <__errno>
   294c2:	2368      	movs	r3, #104	; 0x68
   294c4:	e7a5      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EISCONN;
   294c6:	f010 fdf0 	bl	3a0aa <__errno>
   294ca:	237f      	movs	r3, #127	; 0x7f
   294cc:	e7a1      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ENOTCONN;
   294ce:	f010 fdec 	bl	3a0aa <__errno>
   294d2:	2380      	movs	r3, #128	; 0x80
   294d4:	e79d      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ETIMEDOUT;
   294d6:	f010 fde8 	bl	3a0aa <__errno>
   294da:	2374      	movs	r3, #116	; 0x74
   294dc:	e799      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNREFUSED;
   294de:	f010 fde4 	bl	3a0aa <__errno>
   294e2:	236f      	movs	r3, #111	; 0x6f
   294e4:	e795      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ENOBUFS;
   294e6:	f010 fde0 	bl	3a0aa <__errno>
   294ea:	2369      	movs	r3, #105	; 0x69
   294ec:	e791      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EHOSTDOWN;
   294ee:	f010 fddc 	bl	3a0aa <__errno>
   294f2:	2375      	movs	r3, #117	; 0x75
   294f4:	e78d      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EINPROGRESS;
   294f6:	f010 fdd8 	bl	3a0aa <__errno>
   294fa:	2377      	movs	r3, #119	; 0x77
   294fc:	e789      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EALREADY;
   294fe:	f010 fdd4 	bl	3a0aa <__errno>
   29502:	2378      	movs	r3, #120	; 0x78
   29504:	e785      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ECANCELED;
   29506:	f010 fdd0 	bl	3a0aa <__errno>
   2950a:	238c      	movs	r3, #140	; 0x8c
   2950c:	e781      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ENOKEY;
   2950e:	f010 fdcc 	bl	3a0aa <__errno>
   29512:	f240 73d1 	movw	r3, #2001	; 0x7d1
   29516:	e77c      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYEXPIRED;
   29518:	f010 fdc7 	bl	3a0aa <__errno>
   2951c:	f240 73d2 	movw	r3, #2002	; 0x7d2
   29520:	e777      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYREVOKED;
   29522:	f010 fdc2 	bl	3a0aa <__errno>
   29526:	f240 73d3 	movw	r3, #2003	; 0x7d3
   2952a:	e772      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYREJECTED;
   2952c:	f010 fdbd 	bl	3a0aa <__errno>
   29530:	f240 73d4 	movw	r3, #2004	; 0x7d4
   29534:	e76d      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = EMSGSIZE;
   29536:	f010 fdb8 	bl	3a0aa <__errno>
   2953a:	237a      	movs	r3, #122	; 0x7a
   2953c:	e769      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNABORTED;
   2953e:	f010 fdb4 	bl	3a0aa <__errno>
   29542:	2371      	movs	r3, #113	; 0x71
   29544:	e765      	b.n	29412 <nrf_modem_os_errno_set+0x1ce>
   29546:	bf00      	nop
   29548:	00040fe4 	.word	0x00040fe4
   2954c:	000422ae 	.word	0x000422ae
   29550:	0003f0e1 	.word	0x0003f0e1
   29554:	00041015 	.word	0x00041015
   29558:	0003e468 	.word	0x0003e468
   2955c:	0003e538 	.word	0x0003e538
   29560:	00041043 	.word	0x00041043
   29564:	baadbaad 	.word	0xbaadbaad

00029568 <nrf_modem_os_sem_init>:
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   29568:	6803      	ldr	r3, [r0, #0]
{
   2956a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2956e:	4604      	mov	r4, r0
   29570:	460e      	mov	r6, r1
   29572:	4617      	mov	r7, r2
   29574:	4d16      	ldr	r5, [pc, #88]	; (295d0 <nrf_modem_os_sem_init+0x68>)
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   29576:	b12b      	cbz	r3, 29584 <nrf_modem_os_sem_init+0x1c>
   29578:	42ab      	cmp	r3, r5
   2957a:	d303      	bcc.n	29584 <nrf_modem_os_sem_init+0x1c>
   2957c:	f105 0230 	add.w	r2, r5, #48	; 0x30
   29580:	4293      	cmp	r3, r2
   29582:	d31e      	bcc.n	295c2 <nrf_modem_os_sem_init+0x5a>
	__ASSERT(used < NRF_MODEM_OS_SEM_MAX,
   29584:	f8df 804c 	ldr.w	r8, [pc, #76]	; 295d4 <nrf_modem_os_sem_init+0x6c>
   29588:	f898 3000 	ldrb.w	r3, [r8]
   2958c:	2b01      	cmp	r3, #1
   2958e:	d90e      	bls.n	295ae <nrf_modem_os_sem_init+0x46>
   29590:	4911      	ldr	r1, [pc, #68]	; (295d8 <nrf_modem_os_sem_init+0x70>)
   29592:	f240 1381 	movw	r3, #385	; 0x181
   29596:	4a11      	ldr	r2, [pc, #68]	; (295dc <nrf_modem_os_sem_init+0x74>)
   29598:	4811      	ldr	r0, [pc, #68]	; (295e0 <nrf_modem_os_sem_init+0x78>)
   2959a:	f00f fe0e 	bl	391ba <printk>
   2959e:	4811      	ldr	r0, [pc, #68]	; (295e4 <nrf_modem_os_sem_init+0x7c>)
   295a0:	f00f fe0b 	bl	391ba <printk>
   295a4:	f240 1181 	movw	r1, #385	; 0x181
   295a8:	480c      	ldr	r0, [pc, #48]	; (295dc <nrf_modem_os_sem_init+0x74>)
   295aa:	f010 f85d 	bl	39668 <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   295ae:	f898 3000 	ldrb.w	r3, [r8]
   295b2:	1c5a      	adds	r2, r3, #1
   295b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   295b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   295bc:	f888 2000 	strb.w	r2, [r8]
   295c0:	6025      	str	r5, [r4, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   295c2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   295c4:	463a      	mov	r2, r7
   295c6:	4631      	mov	r1, r6
}
   295c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   295cc:	f013 bf2a 	b.w	3d424 <z_impl_k_sem_init>
   295d0:	200179d4 	.word	0x200179d4
   295d4:	200180f6 	.word	0x200180f6
   295d8:	0004106f 	.word	0x0004106f
   295dc:	00040fe4 	.word	0x00040fe4
   295e0:	0003f0e1 	.word	0x0003f0e1
   295e4:	00041078 	.word	0x00041078

000295e8 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   295e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   295ec:	4b01      	ldr	r3, [pc, #4]	; (295f4 <nrf_modem_os_application_irq_set+0xc>)
   295ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   295f2:	4770      	bx	lr
   295f4:	e000e100 	.word	0xe000e100

000295f8 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   295f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   295fc:	4b01      	ldr	r3, [pc, #4]	; (29604 <nrf_modem_os_application_irq_clear+0xc>)
   295fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   29602:	4770      	bx	lr
   29604:	e000e100 	.word	0xe000e100

00029608 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29608:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   2960c:	4b01      	ldr	r3, [pc, #4]	; (29614 <nrf_modem_os_trace_irq_set+0xc>)
   2960e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   29612:	4770      	bx	lr
   29614:	e000e100 	.word	0xe000e100

00029618 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29618:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   2961c:	4b01      	ldr	r3, [pc, #4]	; (29624 <nrf_modem_os_trace_irq_clear+0xc>)
   2961e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   29622:	4770      	bx	lr
   29624:	e000e100 	.word	0xe000e100

00029628 <nrf_modem_os_alloc>:
	}
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   29628:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   2962a:	2200      	movs	r2, #0
   2962c:	2300      	movs	r3, #0
   2962e:	4801      	ldr	r0, [pc, #4]	; (29634 <nrf_modem_os_alloc+0xc>)
   29630:	f013 beaf 	b.w	3d392 <k_heap_alloc>
   29634:	20014a48 	.word	0x20014a48

00029638 <nrf_modem_os_free>:
#endif
	return addr;
}

void nrf_modem_os_free(void *mem)
{
   29638:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   2963a:	4801      	ldr	r0, [pc, #4]	; (29640 <nrf_modem_os_free+0x8>)
   2963c:	f00a bb44 	b.w	33cc8 <k_heap_free>
   29640:	20014a48 	.word	0x20014a48

00029644 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   29644:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   29646:	2200      	movs	r2, #0
   29648:	2300      	movs	r3, #0
   2964a:	4801      	ldr	r0, [pc, #4]	; (29650 <nrf_modem_os_shm_tx_alloc+0xc>)
   2964c:	f013 bea1 	b.w	3d392 <k_heap_alloc>
   29650:	20017a68 	.word	0x20017a68

00029654 <nrf_modem_os_shm_tx_free>:
#endif
	return addr;
}

void nrf_modem_os_shm_tx_free(void *mem)
{
   29654:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   29656:	4801      	ldr	r0, [pc, #4]	; (2965c <nrf_modem_os_shm_tx_free+0x8>)
   29658:	f00a bb36 	b.w	33cc8 <k_heap_free>
   2965c:	20017a68 	.word	0x20017a68

00029660 <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   29660:	b510      	push	{r4, lr}
	list->head = NULL;
   29662:	2400      	movs	r4, #0
   29664:	4b0c      	ldr	r3, [pc, #48]	; (29698 <nrf_modem_os_init+0x38>)
	list->tail = NULL;
   29666:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2966a:	4b0c      	ldr	r3, [pc, #48]	; (2969c <nrf_modem_os_init+0x3c>)
   2966c:	e8d3 2fef 	ldaex	r2, [r3]
   29670:	e8c3 4fe1 	stlex	r1, r4, [r3]
   29674:	2900      	cmp	r1, #0
   29676:	d1f9      	bne.n	2966c <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   29678:	f011 fd4e 	bl	3b118 <read_task_create>

	/* Configure and enable modem tracing over UART and RTT. */
	trace_uart_init();
	trace_rtt_init();
	trace_task_create();
   2967c:	f011 fd41 	bl	3b102 <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   29680:	4b07      	ldr	r3, [pc, #28]	; (296a0 <nrf_modem_os_init+0x40>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   29682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   29686:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   29688:	4b06      	ldr	r3, [pc, #24]	; (296a4 <nrf_modem_os_init+0x44>)
	k_heap_init(&shmem_heap,
   2968a:	4907      	ldr	r1, [pc, #28]	; (296a8 <nrf_modem_os_init+0x48>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   2968c:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   2968e:	4807      	ldr	r0, [pc, #28]	; (296ac <nrf_modem_os_init+0x4c>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   29690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   29694:	f013 be75 	b.w	3d382 <k_heap_init>
   29698:	20017a08 	.word	0x20017a08
   2969c:	20017a04 	.word	0x20017a04
   296a0:	20017a60 	.word	0x20017a60
   296a4:	20017a64 	.word	0x20017a64
   296a8:	200104e8 	.word	0x200104e8
   296ac:	20017a68 	.word	0x20017a68

000296b0 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   296b0:	f240 2302 	movw	r3, #514	; 0x202
   296b4:	4298      	cmp	r0, r3
   296b6:	f000 80c7 	beq.w	29848 <z_to_nrf_optname+0x198>
   296ba:	dc07      	bgt.n	296cc <z_to_nrf_optname+0x1c>
   296bc:	2801      	cmp	r0, #1
   296be:	d067      	beq.n	29790 <z_to_nrf_optname+0xe0>
   296c0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   296c4:	d034      	beq.n	29730 <z_to_nrf_optname+0x80>
   296c6:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   296ca:	4770      	bx	lr
	switch (z_in_level) {
   296cc:	f240 2303 	movw	r3, #515	; 0x203
   296d0:	4298      	cmp	r0, r3
   296d2:	d1f8      	bne.n	296c6 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   296d4:	1e4b      	subs	r3, r1, #1
   296d6:	2b13      	cmp	r3, #19
   296d8:	d8f5      	bhi.n	296c6 <z_to_nrf_optname+0x16>
   296da:	a001      	add	r0, pc, #4	; (adr r0, 296e0 <z_to_nrf_optname+0x30>)
   296dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   296e0:	0002976f 	.word	0x0002976f
   296e4:	0002976f 	.word	0x0002976f
   296e8:	0002976f 	.word	0x0002976f
   296ec:	0002976f 	.word	0x0002976f
   296f0:	0002976f 	.word	0x0002976f
   296f4:	0002976f 	.word	0x0002976f
   296f8:	0002976f 	.word	0x0002976f
   296fc:	000296c7 	.word	0x000296c7
   29700:	000296c7 	.word	0x000296c7
   29704:	000296c7 	.word	0x000296c7
   29708:	000296c7 	.word	0x000296c7
   2970c:	000296c7 	.word	0x000296c7
   29710:	000296c7 	.word	0x000296c7
   29714:	000296c7 	.word	0x000296c7
   29718:	000296c7 	.word	0x000296c7
   2971c:	000296c7 	.word	0x000296c7
   29720:	000296c7 	.word	0x000296c7
   29724:	000296c7 	.word	0x000296c7
   29728:	000296c7 	.word	0x000296c7
   2972c:	0002976f 	.word	0x0002976f
		switch (z_in_optname) {
   29730:	3901      	subs	r1, #1
   29732:	290b      	cmp	r1, #11
   29734:	d8c7      	bhi.n	296c6 <z_to_nrf_optname+0x16>
   29736:	a301      	add	r3, pc, #4	; (adr r3, 2973c <z_to_nrf_optname+0x8c>)
   29738:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2973c:	0002976d 	.word	0x0002976d
   29740:	00029841 	.word	0x00029841
   29744:	00029775 	.word	0x00029775
   29748:	00029779 	.word	0x00029779
   2974c:	0002977d 	.word	0x0002977d
   29750:	00029781 	.word	0x00029781
   29754:	000296c7 	.word	0x000296c7
   29758:	000296c7 	.word	0x000296c7
   2975c:	000296c7 	.word	0x000296c7
   29760:	00029785 	.word	0x00029785
   29764:	00029789 	.word	0x00029789
   29768:	0002978d 	.word	0x0002978d
   2976c:	2102      	movs	r1, #2
	int retval = 0;
   2976e:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   29770:	6011      	str	r1, [r2, #0]
   29772:	4770      	bx	lr
			break;
   29774:	2106      	movs	r1, #6
   29776:	e7fa      	b.n	2976e <z_to_nrf_optname+0xbe>
			break;
   29778:	2107      	movs	r1, #7
   2977a:	e7f8      	b.n	2976e <z_to_nrf_optname+0xbe>
   2977c:	2104      	movs	r1, #4
   2977e:	e7f6      	b.n	2976e <z_to_nrf_optname+0xbe>
			break;
   29780:	2101      	movs	r1, #1
   29782:	e7f4      	b.n	2976e <z_to_nrf_optname+0xbe>
			break;
   29784:	2103      	movs	r1, #3
   29786:	e7f2      	b.n	2976e <z_to_nrf_optname+0xbe>
			break;
   29788:	2109      	movs	r1, #9
   2978a:	e7f0      	b.n	2976e <z_to_nrf_optname+0xbe>
			break;
   2978c:	2108      	movs	r1, #8
   2978e:	e7ee      	b.n	2976e <z_to_nrf_optname+0xbe>
		switch (z_in_optname) {
   29790:	2937      	cmp	r1, #55	; 0x37
   29792:	dc98      	bgt.n	296c6 <z_to_nrf_optname+0x16>
   29794:	2913      	cmp	r1, #19
   29796:	dc04      	bgt.n	297a2 <z_to_nrf_optname+0xf2>
   29798:	2902      	cmp	r1, #2
   2979a:	d053      	beq.n	29844 <z_to_nrf_optname+0x194>
   2979c:	2904      	cmp	r1, #4
   2979e:	d192      	bne.n	296c6 <z_to_nrf_optname+0x16>
   297a0:	e7e5      	b.n	2976e <z_to_nrf_optname+0xbe>
   297a2:	f1a1 0314 	sub.w	r3, r1, #20
   297a6:	2b23      	cmp	r3, #35	; 0x23
   297a8:	d88d      	bhi.n	296c6 <z_to_nrf_optname+0x16>
   297aa:	a001      	add	r0, pc, #4	; (adr r0, 297b0 <z_to_nrf_optname+0x100>)
   297ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   297b0:	0002976f 	.word	0x0002976f
   297b4:	0002976f 	.word	0x0002976f
   297b8:	000296c7 	.word	0x000296c7
   297bc:	000296c7 	.word	0x000296c7
   297c0:	000296c7 	.word	0x000296c7
   297c4:	0002976f 	.word	0x0002976f
   297c8:	000296c7 	.word	0x000296c7
   297cc:	000296c7 	.word	0x000296c7
   297d0:	000296c7 	.word	0x000296c7
   297d4:	000296c7 	.word	0x000296c7
   297d8:	0002976f 	.word	0x0002976f
   297dc:	0002976f 	.word	0x0002976f
   297e0:	0002976f 	.word	0x0002976f
   297e4:	000296c7 	.word	0x000296c7
   297e8:	000296c7 	.word	0x000296c7
   297ec:	000296c7 	.word	0x000296c7
   297f0:	000296c7 	.word	0x000296c7
   297f4:	000296c7 	.word	0x000296c7
   297f8:	000296c7 	.word	0x000296c7
   297fc:	000296c7 	.word	0x000296c7
   29800:	000296c7 	.word	0x000296c7
   29804:	000296c7 	.word	0x000296c7
   29808:	000296c7 	.word	0x000296c7
   2980c:	000296c7 	.word	0x000296c7
   29810:	000296c7 	.word	0x000296c7
   29814:	000296c7 	.word	0x000296c7
   29818:	000296c7 	.word	0x000296c7
   2981c:	000296c7 	.word	0x000296c7
   29820:	000296c7 	.word	0x000296c7
   29824:	000296c7 	.word	0x000296c7
   29828:	0002976f 	.word	0x0002976f
   2982c:	0002976f 	.word	0x0002976f
   29830:	0002976f 	.word	0x0002976f
   29834:	0002976f 	.word	0x0002976f
   29838:	0002976f 	.word	0x0002976f
   2983c:	0002976f 	.word	0x0002976f
   29840:	2105      	movs	r1, #5
   29842:	e794      	b.n	2976e <z_to_nrf_optname+0xbe>
   29844:	2128      	movs	r1, #40	; 0x28
   29846:	e792      	b.n	2976e <z_to_nrf_optname+0xbe>
		switch (z_in_optname) {
   29848:	2902      	cmp	r1, #2
   2984a:	d090      	beq.n	2976e <z_to_nrf_optname+0xbe>
   2984c:	2903      	cmp	r1, #3
   2984e:	d08e      	beq.n	2976e <z_to_nrf_optname+0xbe>
   29850:	2901      	cmp	r1, #1
   29852:	e7a4      	b.n	2979e <z_to_nrf_optname+0xee>

00029854 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   29854:	f04f 32ff 	mov.w	r2, #4294967295
   29858:	4b05      	ldr	r3, [pc, #20]	; (29870 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   2985a:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   2985c:	601a      	str	r2, [r3, #0]
   2985e:	609a      	str	r2, [r3, #8]
   29860:	611a      	str	r2, [r3, #16]
   29862:	619a      	str	r2, [r3, #24]
   29864:	621a      	str	r2, [r3, #32]
   29866:	629a      	str	r2, [r3, #40]	; 0x28
   29868:	631a      	str	r2, [r3, #48]	; 0x30
   2986a:	639a      	str	r2, [r3, #56]	; 0x38
}
   2986c:	4770      	bx	lr
   2986e:	bf00      	nop
   29870:	20017a88 	.word	0x20017a88

00029874 <nrf91_socket_offload_ioctl>:
{
   29874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   29878:	f5a1 7481 	sub.w	r4, r1, #258	; 0x102
{
   2987c:	4603      	mov	r3, r0
   2987e:	b093      	sub	sp, #76	; 0x4c
	int sd = OBJ_TO_SD(obj);
   29880:	6800      	ldr	r0, [r0, #0]
	switch (request) {
   29882:	2c03      	cmp	r4, #3
   29884:	d87c      	bhi.n	29980 <nrf91_socket_offload_ioctl+0x10c>
   29886:	e8df f004 	tbb	[pc, r4]
   2988a:	9902      	.short	0x9902
   2988c:	7708      	.short	0x7708
		return -EXDEV;
   2988e:	f06f 0411 	mvn.w	r4, #17
}
   29892:	4620      	mov	r0, r4
   29894:	b013      	add	sp, #76	; 0x4c
   29896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   2989a:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   2989e:	e9d2 9800 	ldrd	r9, r8, [r2]
	int retval = 0;
   298a2:	4654      	mov	r4, sl
   298a4:	464d      	mov	r5, r9
	for (int i = 0; i < nfds; i++) {
   298a6:	464f      	mov	r7, r9
		tmp[i].events = 0;
   298a8:	46d3      	mov	fp, sl
		timeout = va_arg(args, int);
   298aa:	6893      	ldr	r3, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   298ac:	2100      	movs	r1, #0
   298ae:	2240      	movs	r2, #64	; 0x40
   298b0:	a802      	add	r0, sp, #8
		timeout = va_arg(args, int);
   298b2:	9301      	str	r3, [sp, #4]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   298b4:	f013 fee7 	bl	3d686 <memset>
			obj = z_get_fd_obj(fds[i].fd,
   298b8:	4942      	ldr	r1, [pc, #264]	; (299c4 <nrf91_socket_offload_ioctl+0x150>)
   298ba:	ae02      	add	r6, sp, #8
	for (int i = 0; i < nfds; i++) {
   298bc:	45d0      	cmp	r8, sl
   298be:	dc34      	bgt.n	2992a <nrf91_socket_offload_ioctl+0xb6>
	if (retval > 0) {
   298c0:	2c00      	cmp	r4, #0
   298c2:	dce6      	bgt.n	29892 <nrf91_socket_offload_ioctl+0x1e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   298c4:	4641      	mov	r1, r8
   298c6:	9a01      	ldr	r2, [sp, #4]
   298c8:	a802      	add	r0, sp, #8
   298ca:	f013 fd1c 	bl	3d306 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   298ce:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   298d0:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   298d2:	4598      	cmp	r8, r3
   298d4:	dddd      	ble.n	29892 <nrf91_socket_offload_ioctl+0x1e>
		if (fds[i].fd < 0) {
   298d6:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   298da:	2a00      	cmp	r2, #0
   298dc:	db22      	blt.n	29924 <nrf91_socket_offload_ioctl+0xb0>
		if (tmp[i].revents & NRF_POLLIN) {
   298de:	aa02      	add	r2, sp, #8
   298e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   298e4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
   298e8:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   298ea:	bf42      	ittt	mi
   298ec:	88e9      	ldrhmi	r1, [r5, #6]
   298ee:	f041 0101 	orrmi.w	r1, r1, #1
   298f2:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   298f4:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   298f6:	bf42      	ittt	mi
   298f8:	88e9      	ldrhmi	r1, [r5, #6]
   298fa:	f041 0104 	orrmi.w	r1, r1, #4
   298fe:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   29900:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   29902:	bf42      	ittt	mi
   29904:	88e9      	ldrhmi	r1, [r5, #6]
   29906:	f041 0108 	orrmi.w	r1, r1, #8
   2990a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   2990c:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   2990e:	bf42      	ittt	mi
   29910:	88e9      	ldrhmi	r1, [r5, #6]
   29912:	f041 0120 	orrmi.w	r1, r1, #32
   29916:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   29918:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   2991a:	bf42      	ittt	mi
   2991c:	88ea      	ldrhmi	r2, [r5, #6]
   2991e:	f042 0210 	orrmi.w	r2, r2, #16
   29922:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   29924:	3301      	adds	r3, #1
   29926:	3508      	adds	r5, #8
   29928:	e7d3      	b.n	298d2 <nrf91_socket_offload_ioctl+0x5e>
		if (fds[i].fd < 0) {
   2992a:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   2992c:	f8a6 b004 	strh.w	fp, [r6, #4]
		if (fds[i].fd < 0) {
   29930:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   29932:	f8a7 b006 	strh.w	fp, [r7, #6]
		if (fds[i].fd < 0) {
   29936:	da05      	bge.n	29944 <nrf91_socket_offload_ioctl+0xd0>
			tmp[i].fd = fds[i].fd;
   29938:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   2993a:	f10a 0a01 	add.w	sl, sl, #1
   2993e:	3608      	adds	r6, #8
   29940:	3708      	adds	r7, #8
   29942:	e7bb      	b.n	298bc <nrf91_socket_offload_ioctl+0x48>
			obj = z_get_fd_obj(fds[i].fd,
   29944:	2286      	movs	r2, #134	; 0x86
   29946:	f7f8 ff3d 	bl	227c4 <z_get_fd_obj>
			if (obj != NULL) {
   2994a:	491e      	ldr	r1, [pc, #120]	; (299c4 <nrf91_socket_offload_ioctl+0x150>)
   2994c:	b180      	cbz	r0, 29970 <nrf91_socket_offload_ioctl+0xfc>
				tmp[i].fd = OBJ_TO_SD(obj);
   2994e:	6802      	ldr	r2, [r0, #0]
   29950:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   29952:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
   29956:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   29958:	bf42      	ittt	mi
   2995a:	88b2      	ldrhmi	r2, [r6, #4]
   2995c:	f042 0201 	orrmi.w	r2, r2, #1
   29960:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   29962:	0743      	lsls	r3, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   29964:	bf42      	ittt	mi
   29966:	88b2      	ldrhmi	r2, [r6, #4]
   29968:	f042 0202 	orrmi.w	r2, r2, #2
   2996c:	80b2      	strhmi	r2, [r6, #4]
   2996e:	e7e4      	b.n	2993a <nrf91_socket_offload_ioctl+0xc6>
				fds[i].revents = POLLNVAL;
   29970:	2220      	movs	r2, #32
				retval++;
   29972:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   29974:	80fa      	strh	r2, [r7, #6]
				retval++;
   29976:	e7ec      	b.n	29952 <nrf91_socket_offload_ioctl+0xde>
		ctx->lock = va_arg(args, struct k_mutex *);
   29978:	6812      	ldr	r2, [r2, #0]
		return 0;
   2997a:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   2997c:	605a      	str	r2, [r3, #4]
		return 0;
   2997e:	e788      	b.n	29892 <nrf91_socket_offload_ioctl+0x1e>
	switch (cmd) {
   29980:	2903      	cmp	r1, #3
   29982:	d00c      	beq.n	2999e <nrf91_socket_offload_ioctl+0x12a>
   29984:	2904      	cmp	r1, #4
   29986:	d112      	bne.n	299ae <nrf91_socket_offload_ioctl+0x13a>
		flags = va_arg(args, int);
   29988:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   2998a:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   2998e:	d10e      	bne.n	299ae <nrf91_socket_offload_ioctl+0x13a>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   29990:	2101      	movs	r1, #1
   29992:	1392      	asrs	r2, r2, #14
}
   29994:	b013      	add	sp, #76	; 0x4c
   29996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   2999a:	f013 bcb6 	b.w	3d30a <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   2999e:	2200      	movs	r2, #0
   299a0:	2102      	movs	r1, #2
   299a2:	f013 fcb2 	bl	3d30a <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   299a6:	0384      	lsls	r4, r0, #14
   299a8:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
		break;
   299ac:	e771      	b.n	29892 <nrf91_socket_offload_ioctl+0x1e>
	errno = EINVAL;
   299ae:	f010 fb7c 	bl	3a0aa <__errno>
   299b2:	2316      	movs	r3, #22
	return retval;
   299b4:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   299b8:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   299ba:	e76a      	b.n	29892 <nrf91_socket_offload_ioctl+0x1e>
	switch (request) {
   299bc:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   299c0:	e767      	b.n	29892 <nrf91_socket_offload_ioctl+0x1e>
   299c2:	bf00      	nop
   299c4:	0003ead8 	.word	0x0003ead8

000299c8 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   299c8:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   299ca:	4b03      	ldr	r3, [pc, #12]	; (299d8 <nrf91_socket_iface_init+0x10>)
   299cc:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   299ce:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   299d0:	4802      	ldr	r0, [pc, #8]	; (299dc <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   299d2:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   299d4:	f7fb ba00 	b.w	24dd8 <socket_offload_dns_register>
   299d8:	20017a84 	.word	0x20017a84
   299dc:	0003ead0 	.word	0x0003ead0

000299e0 <nrf91_socket_offload_getaddrinfo>:
{
   299e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   299e4:	4614      	mov	r4, r2
   299e6:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   299e8:	2100      	movs	r1, #0
{
   299ea:	b092      	sub	sp, #72	; 0x48
   299ec:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   299ee:	2220      	movs	r2, #32
   299f0:	a802      	add	r0, sp, #8
{
   299f2:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   299f4:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   299f6:	f013 fe46 	bl	3d686 <memset>
	if (hints != NULL) {
   299fa:	b16c      	cbz	r4, 29a18 <nrf91_socket_offload_getaddrinfo+0x38>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   299fc:	4620      	mov	r0, r4
   299fe:	a902      	add	r1, sp, #8
   29a00:	f011 fc41 	bl	3b286 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   29a04:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   29a08:	f000 8112 	beq.w	29c30 <nrf91_socket_offload_getaddrinfo+0x250>
		} else if (error == -EAFNOSUPPORT) {
   29a0c:	306a      	adds	r0, #106	; 0x6a
   29a0e:	f000 8112 	beq.w	29c36 <nrf91_socket_offload_getaddrinfo+0x256>
		if (hints->ai_next != NULL) {
   29a12:	6820      	ldr	r0, [r4, #0]
   29a14:	bb10      	cbnz	r0, 29a5c <nrf91_socket_offload_getaddrinfo+0x7c>
		nrf_hints_ptr = &nrf_hints;
   29a16:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   29a18:	f04f 32ff 	mov.w	r2, #4294967295
   29a1c:	f04f 33ff 	mov.w	r3, #4294967295
   29a20:	4886      	ldr	r0, [pc, #536]	; (29c3c <nrf91_socket_offload_getaddrinfo+0x25c>)
   29a22:	f011 fd2f 	bl	3b484 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   29a26:	4628      	mov	r0, r5
   29a28:	4622      	mov	r2, r4
   29a2a:	4631      	mov	r1, r6
   29a2c:	ab01      	add	r3, sp, #4
   29a2e:	f013 fc66 	bl	3d2fe <nrf_getaddrinfo>
	if (retval != 0) {
   29a32:	4605      	mov	r5, r0
   29a34:	b320      	cbz	r0, 29a80 <nrf91_socket_offload_getaddrinfo+0xa0>
	switch (nrf_error) {
   29a36:	282f      	cmp	r0, #47	; 0x2f
   29a38:	f000 80f1 	beq.w	29c1e <nrf91_socket_offload_getaddrinfo+0x23e>
   29a3c:	dc14      	bgt.n	29a68 <nrf91_socket_offload_getaddrinfo+0x88>
   29a3e:	280c      	cmp	r0, #12
   29a40:	f000 80f0 	beq.w	29c24 <nrf91_socket_offload_getaddrinfo+0x244>
   29a44:	2823      	cmp	r0, #35	; 0x23
   29a46:	f000 80f0 	beq.w	29c2a <nrf91_socket_offload_getaddrinfo+0x24a>
		return DNS_EAI_SYSTEM;
   29a4a:	f06f 050a 	mvn.w	r5, #10
	k_mutex_unlock(&getaddrinfo_lock);
   29a4e:	487b      	ldr	r0, [pc, #492]	; (29c3c <nrf91_socket_offload_getaddrinfo+0x25c>)
   29a50:	f011 fd1a 	bl	3b488 <k_mutex_unlock.isra.0>
}
   29a54:	4628      	mov	r0, r5
   29a56:	b012      	add	sp, #72	; 0x48
   29a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   29a5c:	ac0a      	add	r4, sp, #40	; 0x28
   29a5e:	4621      	mov	r1, r4
   29a60:	f011 fc11 	bl	3b286 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   29a64:	9409      	str	r4, [sp, #36]	; 0x24
   29a66:	e7d6      	b.n	29a16 <nrf91_socket_offload_getaddrinfo+0x36>
	switch (nrf_error) {
   29a68:	2833      	cmp	r0, #51	; 0x33
   29a6a:	d004      	beq.n	29a76 <nrf91_socket_offload_getaddrinfo+0x96>
   29a6c:	2873      	cmp	r0, #115	; 0x73
   29a6e:	d1ec      	bne.n	29a4a <nrf91_socket_offload_getaddrinfo+0x6a>
		return DNS_EAI_INPROGRESS;
   29a70:	f06f 0563 	mvn.w	r5, #99	; 0x63
   29a74:	e7eb      	b.n	29a4e <nrf91_socket_offload_getaddrinfo+0x6e>
		errno = ENETUNREACH;
   29a76:	f010 fb18 	bl	3a0aa <__errno>
   29a7a:	2372      	movs	r3, #114	; 0x72
   29a7c:	6003      	str	r3, [r0, #0]
   29a7e:	e7e4      	b.n	29a4a <nrf91_socket_offload_getaddrinfo+0x6a>
	struct zsock_addrinfo *latest_z_res = NULL;
   29a80:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   29a82:	4681      	mov	r9, r0
   29a84:	4682      	mov	sl, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   29a86:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   29a88:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   29a8a:	b91e      	cbnz	r6, 29a94 <nrf91_socket_offload_getaddrinfo+0xb4>
	nrf_freeaddrinfo(nrf_res);
   29a8c:	9801      	ldr	r0, [sp, #4]
   29a8e:	f013 fc38 	bl	3d302 <nrf_freeaddrinfo>
   29a92:	e7dc      	b.n	29a4e <nrf91_socket_offload_getaddrinfo+0x6e>
					k_malloc(sizeof(struct zsock_addrinfo));
   29a94:	2050      	movs	r0, #80	; 0x50
   29a96:	f013 fdb2 	bl	3d5fe <k_malloc>
		if (next_z_res == NULL) {
   29a9a:	4604      	mov	r4, r0
   29a9c:	2800      	cmp	r0, #0
   29a9e:	f000 80b8 	beq.w	29c12 <nrf91_socket_offload_getaddrinfo+0x232>
	z_out->ai_socktype = nrf_in->ai_socktype;
   29aa2:	68b3      	ldr	r3, [r6, #8]
	z_out->ai_next = NULL;
   29aa4:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   29aa8:	60c3      	str	r3, [r0, #12]
	family = nrf_to_z_family(nrf_in->ai_family);
   29aaa:	6873      	ldr	r3, [r6, #4]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   29aac:	f8c0 901c 	str.w	r9, [r0, #28]
	switch (nrf_family) {
   29ab0:	2b0a      	cmp	r3, #10
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   29ab2:	f8c0 9004 	str.w	r9, [r0, #4]
	switch (nrf_family) {
   29ab6:	dc2c      	bgt.n	29b12 <nrf91_socket_offload_getaddrinfo+0x132>
   29ab8:	2b00      	cmp	r3, #0
   29aba:	db42      	blt.n	29b42 <nrf91_socket_offload_getaddrinfo+0x162>
   29abc:	2b0a      	cmp	r3, #10
   29abe:	d840      	bhi.n	29b42 <nrf91_socket_offload_getaddrinfo+0x162>
   29ac0:	e8df f003 	tbb	[pc, r3]
   29ac4:	3f064d31 	.word	0x3f064d31
   29ac8:	3f3f4a3f 	.word	0x3f3f4a3f
   29acc:	3f3f      	.short	0x3f3f
   29ace:	4f          	.byte	0x4f
   29acf:	00          	.byte	0x00
	z_out->ai_family = family;
   29ad0:	2201      	movs	r2, #1
   29ad2:	6082      	str	r2, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29ad4:	68f2      	ldr	r2, [r6, #12]
	switch (proto) {
   29ad6:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   29ada:	d15d      	bne.n	29b98 <nrf91_socket_offload_getaddrinfo+0x1b8>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29adc:	f240 1311 	movw	r3, #273	; 0x111
   29ae0:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   29ae2:	2008      	movs	r0, #8
   29ae4:	f013 fd8b 	bl	3d5fe <k_malloc>
   29ae8:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   29aea:	2800      	cmp	r0, #0
   29aec:	f000 808e 	beq.w	29c0c <nrf91_socket_offload_getaddrinfo+0x22c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   29af0:	2308      	movs	r3, #8
   29af2:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   29af4:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   29af6:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   29af8:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   29afa:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   29afc:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   29afe:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   29b00:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   29b02:	f1b8 0f00 	cmp.w	r8, #0
   29b06:	f040 8087 	bne.w	29c18 <nrf91_socket_offload_getaddrinfo+0x238>
			*res = next_z_res;
   29b0a:	603c      	str	r4, [r7, #0]
					k_malloc(sizeof(struct zsock_addrinfo));
   29b0c:	46a0      	mov	r8, r4
		next_nrf_res = next_nrf_res->ai_next;
   29b0e:	69f6      	ldr	r6, [r6, #28]
   29b10:	e7bb      	b.n	29a8a <nrf91_socket_offload_getaddrinfo+0xaa>
	switch (nrf_family) {
   29b12:	2b66      	cmp	r3, #102	; 0x66
   29b14:	d115      	bne.n	29b42 <nrf91_socket_offload_getaddrinfo+0x162>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29b16:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   29b18:	6083      	str	r3, [r0, #8]
	switch (proto) {
   29b1a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   29b1e:	d135      	bne.n	29b8c <nrf91_socket_offload_getaddrinfo+0x1ac>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29b20:	f240 1311 	movw	r3, #273	; 0x111
   29b24:	e036      	b.n	29b94 <nrf91_socket_offload_getaddrinfo+0x1b4>
	z_out->ai_family = family;
   29b26:	f8c0 a008 	str.w	sl, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29b2a:	68f2      	ldr	r2, [r6, #12]
	switch (proto) {
   29b2c:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   29b30:	d0f6      	beq.n	29b20 <nrf91_socket_offload_getaddrinfo+0x140>
   29b32:	dc3c      	bgt.n	29bae <nrf91_socket_offload_getaddrinfo+0x1ce>
   29b34:	2a02      	cmp	r2, #2
   29b36:	d14a      	bne.n	29bce <nrf91_socket_offload_getaddrinfo+0x1ee>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29b38:	2211      	movs	r2, #17
   29b3a:	6122      	str	r2, [r4, #16]
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   29b3c:	2b0a      	cmp	r3, #10
   29b3e:	d019      	beq.n	29b74 <nrf91_socket_offload_getaddrinfo+0x194>
   29b40:	e05c      	b.n	29bfc <nrf91_socket_offload_getaddrinfo+0x21c>
			k_free(next_z_res);
   29b42:	4620      	mov	r0, r4
   29b44:	f013 fd54 	bl	3d5f0 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   29b48:	f06f 0508 	mvn.w	r5, #8
		nrf91_socket_offload_freeaddrinfo(*res);
   29b4c:	6838      	ldr	r0, [r7, #0]
   29b4e:	f011 fb8d 	bl	3b26c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   29b52:	2300      	movs	r3, #0
   29b54:	603b      	str	r3, [r7, #0]
   29b56:	e799      	b.n	29a8c <nrf91_socket_offload_getaddrinfo+0xac>
	z_out->ai_family = family;
   29b58:	2203      	movs	r2, #3
   29b5a:	60a2      	str	r2, [r4, #8]
   29b5c:	e7e5      	b.n	29b2a <nrf91_socket_offload_getaddrinfo+0x14a>
   29b5e:	2206      	movs	r2, #6
   29b60:	e7fb      	b.n	29b5a <nrf91_socket_offload_getaddrinfo+0x17a>
   29b62:	2202      	movs	r2, #2
   29b64:	6082      	str	r2, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29b66:	68f2      	ldr	r2, [r6, #12]
	switch (proto) {
   29b68:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   29b6c:	d1e1      	bne.n	29b32 <nrf91_socket_offload_getaddrinfo+0x152>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29b6e:	f240 1311 	movw	r3, #273	; 0x111
   29b72:	6103      	str	r3, [r0, #16]
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   29b74:	2018      	movs	r0, #24
   29b76:	f013 fd42 	bl	3d5fe <k_malloc>
   29b7a:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   29b7c:	2800      	cmp	r0, #0
   29b7e:	d045      	beq.n	29c0c <nrf91_socket_offload_getaddrinfo+0x22c>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   29b80:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   29b82:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   29b84:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   29b86:	f011 fbaa 	bl	3b2de <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   29b8a:	e7ba      	b.n	29b02 <nrf91_socket_offload_getaddrinfo+0x122>
	switch (proto) {
   29b8c:	dc31      	bgt.n	29bf2 <nrf91_socket_offload_getaddrinfo+0x212>
   29b8e:	2a02      	cmp	r2, #2
   29b90:	d11d      	bne.n	29bce <nrf91_socket_offload_getaddrinfo+0x1ee>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29b92:	2311      	movs	r3, #17
   29b94:	6123      	str	r3, [r4, #16]
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   29b96:	e031      	b.n	29bfc <nrf91_socket_offload_getaddrinfo+0x21c>
	switch (proto) {
   29b98:	dc03      	bgt.n	29ba2 <nrf91_socket_offload_getaddrinfo+0x1c2>
   29b9a:	2a02      	cmp	r2, #2
   29b9c:	d117      	bne.n	29bce <nrf91_socket_offload_getaddrinfo+0x1ee>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29b9e:	2311      	movs	r3, #17
   29ba0:	e79e      	b.n	29ae0 <nrf91_socket_offload_getaddrinfo+0x100>
	switch (proto) {
   29ba2:	f240 2102 	movw	r1, #514	; 0x202
   29ba6:	428a      	cmp	r2, r1
   29ba8:	d105      	bne.n	29bb6 <nrf91_socket_offload_getaddrinfo+0x1d6>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29baa:	6102      	str	r2, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   29bac:	e799      	b.n	29ae2 <nrf91_socket_offload_getaddrinfo+0x102>
	switch (proto) {
   29bae:	f240 2102 	movw	r1, #514	; 0x202
   29bb2:	428a      	cmp	r2, r1
   29bb4:	d0c1      	beq.n	29b3a <nrf91_socket_offload_getaddrinfo+0x15a>
   29bb6:	f240 2103 	movw	r1, #515	; 0x203
   29bba:	428a      	cmp	r2, r1
   29bbc:	d003      	beq.n	29bc6 <nrf91_socket_offload_getaddrinfo+0x1e6>
   29bbe:	f240 2101 	movw	r1, #513	; 0x201
   29bc2:	428a      	cmp	r2, r1
   29bc4:	d109      	bne.n	29bda <nrf91_socket_offload_getaddrinfo+0x1fa>
	if (nrf_in->ai_family == NRF_AF_INET) {
   29bc6:	2b02      	cmp	r3, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29bc8:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   29bca:	d1b7      	bne.n	29b3c <nrf91_socket_offload_getaddrinfo+0x15c>
   29bcc:	e789      	b.n	29ae2 <nrf91_socket_offload_getaddrinfo+0x102>
	switch (proto) {
   29bce:	2a02      	cmp	r2, #2
   29bd0:	dc09      	bgt.n	29be6 <nrf91_socket_offload_getaddrinfo+0x206>
   29bd2:	2a00      	cmp	r2, #0
   29bd4:	d0f7      	beq.n	29bc6 <nrf91_socket_offload_getaddrinfo+0x1e6>
   29bd6:	2a01      	cmp	r2, #1
   29bd8:	d016      	beq.n	29c08 <nrf91_socket_offload_getaddrinfo+0x228>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29bda:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   29bde:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   29be0:	2300      	movs	r3, #0
   29be2:	61a3      	str	r3, [r4, #24]
		if (error == -ENOMEM) {
   29be4:	e00a      	b.n	29bfc <nrf91_socket_offload_getaddrinfo+0x21c>
	switch (proto) {
   29be6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   29bea:	d1f6      	bne.n	29bda <nrf91_socket_offload_getaddrinfo+0x1fa>
   29bec:	f44f 7281 	mov.w	r2, #258	; 0x102
   29bf0:	e7e9      	b.n	29bc6 <nrf91_socket_offload_getaddrinfo+0x1e6>
   29bf2:	f240 2102 	movw	r1, #514	; 0x202
   29bf6:	428a      	cmp	r2, r1
   29bf8:	d1dd      	bne.n	29bb6 <nrf91_socket_offload_getaddrinfo+0x1d6>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29bfa:	6102      	str	r2, [r0, #16]
			k_free(next_z_res);
   29bfc:	4620      	mov	r0, r4
   29bfe:	f013 fcf7 	bl	3d5f0 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   29c02:	f06f 0506 	mvn.w	r5, #6
   29c06:	e7a1      	b.n	29b4c <nrf91_socket_offload_getaddrinfo+0x16c>
	switch (proto) {
   29c08:	2206      	movs	r2, #6
   29c0a:	e7dc      	b.n	29bc6 <nrf91_socket_offload_getaddrinfo+0x1e6>
			k_free(next_z_res);
   29c0c:	4620      	mov	r0, r4
   29c0e:	f013 fcef 	bl	3d5f0 <k_free>
					k_malloc(sizeof(struct zsock_addrinfo));
   29c12:	f06f 0509 	mvn.w	r5, #9
   29c16:	e799      	b.n	29b4c <nrf91_socket_offload_getaddrinfo+0x16c>
			latest_z_res->ai_next = next_z_res;
   29c18:	f8c8 4000 	str.w	r4, [r8]
   29c1c:	e776      	b.n	29b0c <nrf91_socket_offload_getaddrinfo+0x12c>
		return DNS_EAI_NONAME;
   29c1e:	f06f 0501 	mvn.w	r5, #1
   29c22:	e714      	b.n	29a4e <nrf91_socket_offload_getaddrinfo+0x6e>
	switch (nrf_error) {
   29c24:	f06f 0509 	mvn.w	r5, #9
   29c28:	e711      	b.n	29a4e <nrf91_socket_offload_getaddrinfo+0x6e>
		return DNS_EAI_AGAIN;
   29c2a:	f06f 0502 	mvn.w	r5, #2
   29c2e:	e70e      	b.n	29a4e <nrf91_socket_offload_getaddrinfo+0x6e>
			return DNS_EAI_SOCKTYPE;
   29c30:	f06f 0506 	mvn.w	r5, #6
   29c34:	e70e      	b.n	29a54 <nrf91_socket_offload_getaddrinfo+0x74>
			return DNS_EAI_ADDRFAMILY;
   29c36:	f06f 0508 	mvn.w	r5, #8
   29c3a:	e70b      	b.n	29a54 <nrf91_socket_offload_getaddrinfo+0x74>
   29c3c:	20014ab0 	.word	0x20014ab0

00029c40 <nrf91_socket_offload_sendmsg>:
{
   29c40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29c44:	4607      	mov	r7, r0
   29c46:	4690      	mov	r8, r2
	if (msg == NULL) {
   29c48:	460c      	mov	r4, r1
   29c4a:	b379      	cbz	r1, 29cac <nrf91_socket_offload_sendmsg+0x6c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   29c4c:	2300      	movs	r3, #0
	ssize_t len = 0;
   29c4e:	461a      	mov	r2, r3
   29c50:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   29c52:	4283      	cmp	r3, r0
   29c54:	d134      	bne.n	29cc0 <nrf91_socket_offload_sendmsg+0x80>
	if (len <= sizeof(buf)) {
   29c56:	2a80      	cmp	r2, #128	; 0x80
   29c58:	d871      	bhi.n	29d3e <nrf91_socket_offload_sendmsg+0xfe>
		for (i = 0; i < msg->msg_iovlen; i++) {
   29c5a:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   29c5c:	f04f 32ff 	mov.w	r2, #4294967295
   29c60:	f04f 33ff 	mov.w	r3, #4294967295
   29c64:	4838      	ldr	r0, [pc, #224]	; (29d48 <nrf91_socket_offload_sendmsg+0x108>)
   29c66:	f011 fc0d 	bl	3b484 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   29c6a:	46a9      	mov	r9, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   29c6c:	4e37      	ldr	r6, [pc, #220]	; (29d4c <nrf91_socket_offload_sendmsg+0x10c>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   29c6e:	68e3      	ldr	r3, [r4, #12]
   29c70:	429d      	cmp	r5, r3
   29c72:	d32c      	bcc.n	29cce <nrf91_socket_offload_sendmsg+0x8e>
		offset = 0;
   29c74:	2600      	movs	r6, #0
		ret = 0;
   29c76:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   29c78:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 29d4c <nrf91_socket_offload_sendmsg+0x10c>
		while ((offset < len) && (ret >= 0)) {
   29c7c:	45b1      	cmp	r9, r6
   29c7e:	dd11      	ble.n	29ca4 <nrf91_socket_offload_sendmsg+0x64>
   29c80:	b985      	cbnz	r5, 29ca4 <nrf91_socket_offload_sendmsg+0x64>
			ret = nrf91_socket_offload_sendto(obj,
   29c82:	6863      	ldr	r3, [r4, #4]
   29c84:	4638      	mov	r0, r7
   29c86:	9301      	str	r3, [sp, #4]
   29c88:	6823      	ldr	r3, [r4, #0]
   29c8a:	eba9 0206 	sub.w	r2, r9, r6
   29c8e:	9300      	str	r3, [sp, #0]
   29c90:	eb0a 0106 	add.w	r1, sl, r6
   29c94:	4643      	mov	r3, r8
   29c96:	f011 fb4f 	bl	3b338 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   29c9a:	1e05      	subs	r5, r0, #0
   29c9c:	ddee      	ble.n	29c7c <nrf91_socket_offload_sendmsg+0x3c>
				offset += ret;
   29c9e:	442e      	add	r6, r5
		while ((offset < len) && (ret >= 0)) {
   29ca0:	45b1      	cmp	r9, r6
   29ca2:	dcee      	bgt.n	29c82 <nrf91_socket_offload_sendmsg+0x42>
		k_mutex_unlock(&sendmsg_lock);
   29ca4:	4828      	ldr	r0, [pc, #160]	; (29d48 <nrf91_socket_offload_sendmsg+0x108>)
   29ca6:	f011 fbef 	bl	3b488 <k_mutex_unlock.isra.0>
		return ret;
   29caa:	e005      	b.n	29cb8 <nrf91_socket_offload_sendmsg+0x78>
		errno = EINVAL;
   29cac:	f010 f9fd 	bl	3a0aa <__errno>
   29cb0:	2316      	movs	r3, #22
		return -1;
   29cb2:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   29cb6:	6003      	str	r3, [r0, #0]
}
   29cb8:	4628      	mov	r0, r5
   29cba:	b002      	add	sp, #8
   29cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   29cc0:	68a1      	ldr	r1, [r4, #8]
   29cc2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   29cc6:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   29cc8:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   29cca:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   29ccc:	e7c1      	b.n	29c52 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   29cce:	68a3      	ldr	r3, [r4, #8]
   29cd0:	eb06 0009 	add.w	r0, r6, r9
   29cd4:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
   29cd8:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   29cdc:	6852      	ldr	r2, [r2, #4]
   29cde:	f013 fcc5 	bl	3d66c <memcpy>
			len += msg->msg_iov[i].iov_len;
   29ce2:	68a3      	ldr	r3, [r4, #8]
   29ce4:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   29ce8:	4453      	add	r3, sl
   29cea:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   29cec:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   29cee:	4499      	add	r9, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   29cf0:	e7bd      	b.n	29c6e <nrf91_socket_offload_sendmsg+0x2e>
		if (msg->msg_iov[i].iov_len == 0) {
   29cf2:	68a3      	ldr	r3, [r4, #8]
   29cf4:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   29cf8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   29cfc:	685b      	ldr	r3, [r3, #4]
   29cfe:	b13b      	cbz	r3, 29d10 <nrf91_socket_offload_sendmsg+0xd0>
		offset = 0;
   29d00:	f04f 0900 	mov.w	r9, #0
		while (offset < msg->msg_iov[i].iov_len) {
   29d04:	68a3      	ldr	r3, [r4, #8]
   29d06:	eb03 020a 	add.w	r2, r3, sl
   29d0a:	6852      	ldr	r2, [r2, #4]
   29d0c:	4591      	cmp	r9, r2
   29d0e:	d304      	bcc.n	29d1a <nrf91_socket_offload_sendmsg+0xda>
	for (i = 0; i < msg->msg_iovlen; i++) {
   29d10:	3601      	adds	r6, #1
   29d12:	68e3      	ldr	r3, [r4, #12]
   29d14:	429e      	cmp	r6, r3
   29d16:	d3ec      	bcc.n	29cf2 <nrf91_socket_offload_sendmsg+0xb2>
   29d18:	e7ce      	b.n	29cb8 <nrf91_socket_offload_sendmsg+0x78>
			ret = nrf91_socket_offload_sendto(obj,
   29d1a:	f853 100a 	ldr.w	r1, [r3, sl]
   29d1e:	6863      	ldr	r3, [r4, #4]
   29d20:	4449      	add	r1, r9
   29d22:	9301      	str	r3, [sp, #4]
   29d24:	6823      	ldr	r3, [r4, #0]
   29d26:	4638      	mov	r0, r7
   29d28:	9300      	str	r3, [sp, #0]
   29d2a:	eba2 0209 	sub.w	r2, r2, r9
   29d2e:	4643      	mov	r3, r8
   29d30:	f011 fb02 	bl	3b338 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   29d34:	1e01      	subs	r1, r0, #0
   29d36:	db05      	blt.n	29d44 <nrf91_socket_offload_sendmsg+0x104>
			offset += ret;
   29d38:	4489      	add	r9, r1
			len += ret;
   29d3a:	440d      	add	r5, r1
   29d3c:	e7e2      	b.n	29d04 <nrf91_socket_offload_sendmsg+0xc4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   29d3e:	2600      	movs	r6, #0
	len = 0;
   29d40:	4635      	mov	r5, r6
   29d42:	e7e6      	b.n	29d12 <nrf91_socket_offload_sendmsg+0xd2>
			ret = nrf91_socket_offload_sendto(obj,
   29d44:	460d      	mov	r5, r1
   29d46:	e7b7      	b.n	29cb8 <nrf91_socket_offload_sendmsg+0x78>
   29d48:	20014b14 	.word	0x20014b14
   29d4c:	200180f7 	.word	0x200180f7

00029d50 <allocate_ctx>:
{
   29d50:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   29d52:	f04f 32ff 	mov.w	r2, #4294967295
   29d56:	f04f 33ff 	mov.w	r3, #4294967295
{
   29d5a:	4605      	mov	r5, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   29d5c:	480b      	ldr	r0, [pc, #44]	; (29d8c <allocate_ctx+0x3c>)
   29d5e:	f011 fb91 	bl	3b484 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   29d62:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   29d64:	4a0a      	ldr	r2, [pc, #40]	; (29d90 <allocate_ctx+0x40>)
   29d66:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   29d6a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   29d6e:	3101      	adds	r1, #1
   29d70:	d106      	bne.n	29d80 <allocate_ctx+0x30>
			ctx->nrf_fd = nrf_fd;
   29d72:	f842 5033 	str.w	r5, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   29d76:	4805      	ldr	r0, [pc, #20]	; (29d8c <allocate_ctx+0x3c>)
   29d78:	f011 fb86 	bl	3b488 <k_mutex_unlock.isra.0>
}
   29d7c:	4620      	mov	r0, r4
   29d7e:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   29d80:	3301      	adds	r3, #1
   29d82:	2b08      	cmp	r3, #8
   29d84:	d1ef      	bne.n	29d66 <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   29d86:	2400      	movs	r4, #0
   29d88:	e7f5      	b.n	29d76 <allocate_ctx+0x26>
   29d8a:	bf00      	nop
   29d8c:	20014a74 	.word	0x20014a74
   29d90:	20017a88 	.word	0x20017a88

00029d94 <release_ctx>:
{
   29d94:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   29d96:	4d09      	ldr	r5, [pc, #36]	; (29dbc <release_ctx+0x28>)
{
   29d98:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   29d9a:	f04f 32ff 	mov.w	r2, #4294967295
   29d9e:	4628      	mov	r0, r5
   29da0:	f04f 33ff 	mov.w	r3, #4294967295
   29da4:	f011 fb6e 	bl	3b484 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   29da8:	2300      	movs	r3, #0
   29daa:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_unlock(&ctx_lock);
   29dae:	4628      	mov	r0, r5
	ctx->lock = NULL;
   29db0:	e9c4 2300 	strd	r2, r3, [r4]
}
   29db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   29db8:	f011 bb66 	b.w	3b488 <k_mutex_unlock.isra.0>
   29dbc:	20014a74 	.word	0x20014a74

00029dc0 <nrf91_socket_offload_accept>:
{
   29dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29dc4:	b08b      	sub	sp, #44	; 0x2c
   29dc6:	4607      	mov	r7, r0
   29dc8:	460c      	mov	r4, r1
   29dca:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   29dcc:	f7f8 fd2c 	bl	22828 <z_reserve_fd>
   29dd0:	4606      	mov	r6, r0
	if (fd < 0) {
   29dd2:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   29dd4:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   29dd6:	db1e      	blt.n	29e16 <nrf91_socket_offload_accept+0x56>
	if ((addr != NULL) && (addrlen != NULL)) {
   29dd8:	b304      	cbz	r4, 29e1c <nrf91_socket_offload_accept+0x5c>
   29dda:	b315      	cbz	r5, 29e22 <nrf91_socket_offload_accept+0x62>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   29ddc:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   29dde:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   29de0:	2b08      	cmp	r3, #8
   29de2:	bf14      	ite	ne
   29de4:	2324      	movne	r3, #36	; 0x24
   29de6:	2310      	moveq	r3, #16
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   29de8:	f10d 0904 	add.w	r9, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   29dec:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   29dee:	4649      	mov	r1, r9
   29df0:	f013 fa29 	bl	3d246 <nrf_accept>
	if (new_sd < 0) {
   29df4:	f1b0 0800 	subs.w	r8, r0, #0
   29df8:	db0d      	blt.n	29e16 <nrf91_socket_offload_accept+0x56>
	ctx = allocate_ctx(new_sd);
   29dfa:	f7ff ffa9 	bl	29d50 <allocate_ctx>
	if (ctx == NULL) {
   29dfe:	4607      	mov	r7, r0
   29e00:	b990      	cbnz	r0, 29e28 <nrf91_socket_offload_accept+0x68>
		errno = ENOMEM;
   29e02:	f010 f952 	bl	3a0aa <__errno>
   29e06:	230c      	movs	r3, #12
   29e08:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   29e0a:	4640      	mov	r0, r8
   29e0c:	f013 f9b8 	bl	3d180 <nrf_close>
	z_free_fd(fd);
   29e10:	4630      	mov	r0, r6
   29e12:	f7f8 fd57 	bl	228c4 <z_free_fd>
		return -1;
   29e16:	f04f 36ff 	mov.w	r6, #4294967295
   29e1a:	e019      	b.n	29e50 <nrf91_socket_offload_accept+0x90>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   29e1c:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   29e1e:	46a1      	mov	r9, r4
   29e20:	e7e5      	b.n	29dee <nrf91_socket_offload_accept+0x2e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   29e22:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   29e24:	46a9      	mov	r9, r5
   29e26:	e7e2      	b.n	29dee <nrf91_socket_offload_accept+0x2e>
	if ((addr != NULL) && (addrlen != NULL)) {
   29e28:	b16c      	cbz	r4, 29e46 <nrf91_socket_offload_accept+0x86>
   29e2a:	b165      	cbz	r5, 29e46 <nrf91_socket_offload_accept+0x86>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   29e2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   29e30:	2b02      	cmp	r3, #2
   29e32:	d111      	bne.n	29e58 <nrf91_socket_offload_accept+0x98>
			*addrlen = sizeof(struct sockaddr_in);
   29e34:	2308      	movs	r3, #8
   29e36:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   29e38:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   29e3c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   29e3e:	2301      	movs	r3, #1
   29e40:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   29e42:	9b04      	ldr	r3, [sp, #16]
   29e44:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   29e46:	4639      	mov	r1, r7
   29e48:	4630      	mov	r0, r6
   29e4a:	4a0b      	ldr	r2, [pc, #44]	; (29e78 <nrf91_socket_offload_accept+0xb8>)
   29e4c:	f7f8 fd22 	bl	22894 <z_finalize_fd>
}
   29e50:	4630      	mov	r0, r6
   29e52:	b00b      	add	sp, #44	; 0x2c
   29e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   29e58:	2b0a      	cmp	r3, #10
   29e5a:	d106      	bne.n	29e6a <nrf91_socket_offload_accept+0xaa>
			*addrlen = sizeof(struct sockaddr_in6);
   29e5c:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   29e5e:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   29e60:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   29e62:	a901      	add	r1, sp, #4
   29e64:	f011 fa3b 	bl	3b2de <nrf_to_z_ipv6>
   29e68:	e7ed      	b.n	29e46 <nrf91_socket_offload_accept+0x86>
		nrf_close(new_sd);
   29e6a:	4640      	mov	r0, r8
   29e6c:	f013 f988 	bl	3d180 <nrf_close>
		release_ctx(ctx);
   29e70:	4638      	mov	r0, r7
   29e72:	f7ff ff8f 	bl	29d94 <release_ctx>
   29e76:	e7cb      	b.n	29e10 <nrf91_socket_offload_accept+0x50>
   29e78:	0003ead8 	.word	0x0003ead8

00029e7c <nrf91_socket_create>:
{
   29e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29e7e:	4606      	mov	r6, r0
   29e80:	460d      	mov	r5, r1
   29e82:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   29e84:	f7f8 fcd0 	bl	22828 <z_reserve_fd>
	if (fd < 0) {
   29e88:	1e04      	subs	r4, r0, #0
   29e8a:	db0d      	blt.n	29ea8 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   29e8c:	b2b0      	uxth	r0, r6
   29e8e:	f011 f961 	bl	3b154 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   29e92:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   29e96:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   29e98:	d10a      	bne.n	29eb0 <nrf91_socket_create+0x34>
		errno = EAFNOSUPPORT;
   29e9a:	f010 f906 	bl	3a0aa <__errno>
   29e9e:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   29ea0:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   29ea2:	4620      	mov	r0, r4
   29ea4:	f7f8 fd0e 	bl	228c4 <z_free_fd>
		return -1;
   29ea8:	f04f 34ff 	mov.w	r4, #4294967295
}
   29eac:	4620      	mov	r0, r4
   29eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (socktype) {
   29eb0:	2d03      	cmp	r5, #3
   29eb2:	d003      	beq.n	29ebc <nrf91_socket_create+0x40>
   29eb4:	2d04      	cmp	r5, #4
   29eb6:	bf08      	it	eq
   29eb8:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   29ebc:	4638      	mov	r0, r7
   29ebe:	f011 f966 	bl	3b18e <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   29ec2:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   29ec6:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   29ec8:	d103      	bne.n	29ed2 <nrf91_socket_create+0x56>
		errno = EPROTONOSUPPORT;
   29eca:	f010 f8ee 	bl	3a0aa <__errno>
   29ece:	237b      	movs	r3, #123	; 0x7b
   29ed0:	e7e6      	b.n	29ea0 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   29ed2:	4629      	mov	r1, r5
   29ed4:	4630      	mov	r0, r6
   29ed6:	f013 f942 	bl	3d15e <nrf_socket>
	if (sd < 0) {
   29eda:	1e05      	subs	r5, r0, #0
   29edc:	dbe1      	blt.n	29ea2 <nrf91_socket_create+0x26>
	ctx = allocate_ctx(sd);
   29ede:	f7ff ff37 	bl	29d50 <allocate_ctx>
	if (ctx == NULL) {
   29ee2:	4601      	mov	r1, r0
   29ee4:	b938      	cbnz	r0, 29ef6 <nrf91_socket_create+0x7a>
		errno = ENOMEM;
   29ee6:	f010 f8e0 	bl	3a0aa <__errno>
   29eea:	230c      	movs	r3, #12
   29eec:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   29eee:	4628      	mov	r0, r5
   29ef0:	f013 f946 	bl	3d180 <nrf_close>
		z_free_fd(fd);
   29ef4:	e7d5      	b.n	29ea2 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, ctx,
   29ef6:	4620      	mov	r0, r4
   29ef8:	4a01      	ldr	r2, [pc, #4]	; (29f00 <nrf91_socket_create+0x84>)
   29efa:	f7f8 fccb 	bl	22894 <z_finalize_fd>
	return fd;
   29efe:	e7d5      	b.n	29eac <nrf91_socket_create+0x30>
   29f00:	0003ead8 	.word	0x0003ead8

00029f04 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   29f04:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   29f06:	f240 2201 	movw	r2, #513	; 0x201
   29f0a:	2102      	movs	r1, #2
   29f0c:	2066      	movs	r0, #102	; 0x66
   29f0e:	f7fa fdfd 	bl	24b0c <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   29f12:	4b05      	ldr	r3, [pc, #20]	; (29f28 <open_socket+0x24>)
   29f14:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   29f16:	3001      	adds	r0, #1
   29f18:	d104      	bne.n	29f24 <open_socket+0x20>
		return -errno;
   29f1a:	f010 f8c6 	bl	3a0aa <__errno>
   29f1e:	6800      	ldr	r0, [r0, #0]
   29f20:	4240      	negs	r0, r0
	}

	return 0;
}
   29f22:	bd08      	pop	{r3, pc}
	return 0;
   29f24:	2000      	movs	r0, #0
   29f26:	e7fc      	b.n	29f22 <open_socket+0x1e>
   29f28:	20017af0 	.word	0x20017af0

00029f2c <complete_cmd>:
	return 0;
}

/* Clear the current command safely */
static void complete_cmd(void)
{
   29f2c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   29f2e:	4c08      	ldr	r4, [pc, #32]	; (29f50 <complete_cmd+0x24>)
   29f30:	f04f 32ff 	mov.w	r2, #4294967295
   29f34:	f04f 33ff 	mov.w	r3, #4294967295
   29f38:	4620      	mov	r0, r4
   29f3a:	f00a fb01 	bl	34540 <z_impl_k_mutex_lock>
	k_mutex_lock(&current_cmd_mutex, K_FOREVER);
	current_cmd.cmd = NULL;
   29f3e:	2200      	movs	r2, #0
   29f40:	4b04      	ldr	r3, [pc, #16]	; (29f54 <complete_cmd+0x28>)
	k_mutex_unlock(&current_cmd_mutex);
   29f42:	4620      	mov	r0, r4
}
   29f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	current_cmd.cmd = NULL;
   29f48:	601a      	str	r2, [r3, #0]
	k_mutex_unlock(&current_cmd_mutex);
   29f4a:	f011 bb60 	b.w	3b60e <k_mutex_unlock.isra.0>
   29f4e:	bf00      	nop
   29f50:	20014a88 	.word	0x20014a88
   29f54:	20017ad0 	.word	0x20017ad0

00029f58 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   29f58:	b530      	push	{r4, r5, lr}
   29f5a:	b089      	sub	sp, #36	; 0x24
	k_mutex_lock(&at_cmd_init_mutex, K_FOREVER);
	static bool initialized;
	if (initialized) {
   29f5c:	4d1e      	ldr	r5, [pc, #120]	; (29fd8 <at_cmd_driver_init+0x80>)
   29f5e:	f04f 33ff 	mov.w	r3, #4294967295
   29f62:	f04f 32ff 	mov.w	r2, #4294967295
   29f66:	481d      	ldr	r0, [pc, #116]	; (29fdc <at_cmd_driver_init+0x84>)
   29f68:	f00a faea 	bl	34540 <z_impl_k_mutex_lock>
   29f6c:	782b      	ldrb	r3, [r5, #0]
   29f6e:	b123      	cbz	r3, 29f7a <at_cmd_driver_init+0x22>
				     THREAD_PRIORITY, 0, K_NO_WAIT);
	k_thread_name_set(socket_tid, "at_cmd_socket_thread");

	LOG_DBG("Common AT socket processing thread created");
	initialized = true;
	k_mutex_unlock(&at_cmd_init_mutex);
   29f70:	481a      	ldr	r0, [pc, #104]	; (29fdc <at_cmd_driver_init+0x84>)
   29f72:	f011 fb4c 	bl	3b60e <k_mutex_unlock.isra.0>
		return 0;
   29f76:	2400      	movs	r4, #0
   29f78:	e011      	b.n	29f9e <at_cmd_driver_init+0x46>
	err = open_socket();
   29f7a:	f7ff ffc3 	bl	29f04 <open_socket>
	if (err) {
   29f7e:	4604      	mov	r4, r0
   29f80:	b180      	cbz	r0, 29fa4 <at_cmd_driver_init+0x4c>
   29f82:	4b17      	ldr	r3, [pc, #92]	; (29fe0 <at_cmd_driver_init+0x88>)
   29f84:	4a17      	ldr	r2, [pc, #92]	; (29fe4 <at_cmd_driver_init+0x8c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   29f86:	4601      	mov	r1, r0
   29f88:	1ad2      	subs	r2, r2, r3
   29f8a:	08d2      	lsrs	r2, r2, #3
   29f8c:	0192      	lsls	r2, r2, #6
   29f8e:	4816      	ldr	r0, [pc, #88]	; (29fe8 <at_cmd_driver_init+0x90>)
   29f90:	f042 0201 	orr.w	r2, r2, #1
   29f94:	f00f fbbe 	bl	39714 <log_1>
		k_mutex_unlock(&at_cmd_init_mutex);
   29f98:	4810      	ldr	r0, [pc, #64]	; (29fdc <at_cmd_driver_init+0x84>)
   29f9a:	f011 fb38 	bl	3b60e <k_mutex_unlock.isra.0>
	return 0;
}
   29f9e:	4620      	mov	r0, r4
   29fa0:	b009      	add	sp, #36	; 0x24
   29fa2:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   29fa4:	2200      	movs	r2, #0
   29fa6:	2300      	movs	r3, #0
   29fa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   29fac:	230a      	movs	r3, #10
   29fae:	e9cd 0000 	strd	r0, r0, [sp]
   29fb2:	e9cd 0302 	strd	r0, r3, [sp, #8]
   29fb6:	9004      	str	r0, [sp, #16]
   29fb8:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
   29fbc:	4b0b      	ldr	r3, [pc, #44]	; (29fec <at_cmd_driver_init+0x94>)
   29fbe:	490c      	ldr	r1, [pc, #48]	; (29ff0 <at_cmd_driver_init+0x98>)
   29fc0:	480c      	ldr	r0, [pc, #48]	; (29ff4 <at_cmd_driver_init+0x9c>)
   29fc2:	f00a f83f 	bl	34044 <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   29fc6:	4b0c      	ldr	r3, [pc, #48]	; (29ff8 <at_cmd_driver_init+0xa0>)
   29fc8:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread, str);
   29fca:	490c      	ldr	r1, [pc, #48]	; (29ffc <at_cmd_driver_init+0xa4>)
   29fcc:	f013 fa0d 	bl	3d3ea <z_impl_k_thread_name_set>
	initialized = true;
   29fd0:	2301      	movs	r3, #1
   29fd2:	702b      	strb	r3, [r5, #0]
   29fd4:	e7cc      	b.n	29f70 <at_cmd_driver_init+0x18>
   29fd6:	bf00      	nop
   29fd8:	20018c03 	.word	0x20018c03
   29fdc:	20014a60 	.word	0x20014a60
   29fe0:	0003e468 	.word	0x0003e468
   29fe4:	0003e480 	.word	0x0003e480
   29fe8:	000410b9 	.word	0x000410b9
   29fec:	0002a0fd 	.word	0x0002a0fd
   29ff0:	20019570 	.word	0x20019570
   29ff4:	20015388 	.word	0x20015388
   29ff8:	20017aec 	.word	0x20017aec
   29ffc:	000410db 	.word	0x000410db

0002a000 <load_cmd_and_write>:
{
   2a000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a004:	b085      	sub	sp, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2a006:	f04f 33ff 	mov.w	r3, #4294967295
   2a00a:	f04f 32ff 	mov.w	r2, #4294967295
   2a00e:	4832      	ldr	r0, [pc, #200]	; (2a0d8 <load_cmd_and_write+0xd8>)
   2a010:	f00a fa96 	bl	34540 <z_impl_k_mutex_lock>
   2a014:	4d31      	ldr	r5, [pc, #196]	; (2a0dc <load_cmd_and_write+0xdc>)
   2a016:	4b32      	ldr	r3, [pc, #200]	; (2a0e0 <load_cmd_and_write+0xe0>)
		if (current_cmd.cmd != NULL ||
   2a018:	4c32      	ldr	r4, [pc, #200]	; (2a0e4 <load_cmd_and_write+0xe4>)
   2a01a:	1aed      	subs	r5, r5, r3
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a01c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 2a0e8 <load_cmd_and_write+0xe8>
   2a020:	08ed      	lsrs	r5, r5, #3
   2a022:	6823      	ldr	r3, [r4, #0]
   2a024:	2b00      	cmp	r3, #0
   2a026:	d151      	bne.n	2a0cc <load_cmd_and_write+0xcc>
   2a028:	2200      	movs	r2, #0
   2a02a:	2300      	movs	r3, #0
   2a02c:	4621      	mov	r1, r4
   2a02e:	4640      	mov	r0, r8
   2a030:	f00a f9d8 	bl	343e4 <z_impl_k_msgq_get>
   2a034:	4606      	mov	r6, r0
   2a036:	2800      	cmp	r0, #0
   2a038:	d148      	bne.n	2a0cc <load_cmd_and_write+0xcc>
		ret = at_write(current_cmd.cmd);
   2a03a:	f8d4 9000 	ldr.w	r9, [r4]
	int bytes_to_send = strlen(cmd);
   2a03e:	4648      	mov	r0, r9
   2a040:	f7f7 fb15 	bl	2166e <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a044:	4b29      	ldr	r3, [pc, #164]	; (2a0ec <load_cmd_and_write+0xec>)
	int bytes_to_send = strlen(cmd);
   2a046:	4607      	mov	r7, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a048:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2a04a:	4649      	mov	r1, r9
   2a04c:	4633      	mov	r3, r6
   2a04e:	463a      	mov	r2, r7
   2a050:	e9cd 6600 	strd	r6, r6, [sp]
   2a054:	f00f fe58 	bl	39d08 <z_impl_zsock_sendto>
   2a058:	4601      	mov	r1, r0
	if (bytes_sent == -1) {
   2a05a:	1c48      	adds	r0, r1, #1
   2a05c:	d127      	bne.n	2a0ae <load_cmd_and_write+0xae>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   2a05e:	f010 f824 	bl	3a0aa <__errno>
   2a062:	01ae      	lsls	r6, r5, #6
   2a064:	f046 0601 	orr.w	r6, r6, #1
   2a068:	6801      	ldr	r1, [r0, #0]
   2a06a:	4632      	mov	r2, r6
   2a06c:	4820      	ldr	r0, [pc, #128]	; (2a0f0 <load_cmd_and_write+0xf0>)
   2a06e:	f00f fb51 	bl	39714 <log_1>
		return -errno;
   2a072:	f010 f81a 	bl	3a0aa <__errno>
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   2a076:	7c23      	ldrb	r3, [r4, #16]
		return -errno;
   2a078:	6806      	ldr	r6, [r0, #0]
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   2a07a:	07d9      	lsls	r1, r3, #31
		return -errno;
   2a07c:	f1c6 0600 	rsb	r6, r6, #0
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   2a080:	d502      	bpl.n	2a088 <load_cmd_and_write+0x88>
			k_free(current_cmd.cmd);
   2a082:	6820      	ldr	r0, [r4, #0]
   2a084:	f013 fab4 	bl	3d5f0 <k_free>
		if (ret != 0) {
   2a088:	b306      	cbz	r6, 2a0cc <load_cmd_and_write+0xcc>
			resp.state = AT_CMD_ERROR_WRITE;
   2a08a:	2305      	movs	r3, #5
   2a08c:	f88d 300c 	strb.w	r3, [sp, #12]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a090:	7c23      	ldrb	r3, [r4, #16]
			resp.code = ret;
   2a092:	9602      	str	r6, [sp, #8]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a094:	079b      	lsls	r3, r3, #30
   2a096:	d507      	bpl.n	2a0a8 <load_cmd_and_write+0xa8>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a098:	f04f 32ff 	mov.w	r2, #4294967295
   2a09c:	f04f 33ff 	mov.w	r3, #4294967295
   2a0a0:	4814      	ldr	r0, [pc, #80]	; (2a0f4 <load_cmd_and_write+0xf4>)
   2a0a2:	a902      	add	r1, sp, #8
   2a0a4:	f00a f8f6 	bl	34294 <z_impl_k_msgq_put>
			complete_cmd();
   2a0a8:	f7ff ff40 	bl	29f2c <complete_cmd>
	} while (ret != 0);
   2a0ac:	e7b9      	b.n	2a022 <load_cmd_and_write+0x22>
	if (bytes_sent != bytes_to_send) {
   2a0ae:	428f      	cmp	r7, r1
   2a0b0:	d006      	beq.n	2a0c0 <load_cmd_and_write+0xc0>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   2a0b2:	01ab      	lsls	r3, r5, #6
   2a0b4:	463a      	mov	r2, r7
   2a0b6:	4810      	ldr	r0, [pc, #64]	; (2a0f8 <load_cmd_and_write+0xf8>)
   2a0b8:	f043 0302 	orr.w	r3, r3, #2
   2a0bc:	f00f fb3e 	bl	3973c <log_2>
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   2a0c0:	7c23      	ldrb	r3, [r4, #16]
   2a0c2:	07da      	lsls	r2, r3, #31
   2a0c4:	d502      	bpl.n	2a0cc <load_cmd_and_write+0xcc>
			k_free(current_cmd.cmd);
   2a0c6:	6820      	ldr	r0, [r4, #0]
   2a0c8:	f013 fa92 	bl	3d5f0 <k_free>
	k_mutex_unlock(&current_cmd_mutex);
   2a0cc:	4802      	ldr	r0, [pc, #8]	; (2a0d8 <load_cmd_and_write+0xd8>)
   2a0ce:	f011 fa9e 	bl	3b60e <k_mutex_unlock.isra.0>
}
   2a0d2:	b005      	add	sp, #20
   2a0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a0d8:	20014a88 	.word	0x20014a88
   2a0dc:	0003e480 	.word	0x0003e480
   2a0e0:	0003e468 	.word	0x0003e468
   2a0e4:	20017ad0 	.word	0x20017ad0
   2a0e8:	20014b28 	.word	0x20014b28
   2a0ec:	20017af0 	.word	0x20017af0
   2a0f0:	000410f0 	.word	0x000410f0
   2a0f4:	20014b5c 	.word	0x20014b5c
   2a0f8:	00041113 	.word	0x00041113

0002a0fc <socket_thread_fn>:
{
   2a0fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a100:	4b83      	ldr	r3, [pc, #524]	; (2a310 <socket_thread_fn+0x214>)
   2a102:	4e84      	ldr	r6, [pc, #528]	; (2a314 <socket_thread_fn+0x218>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a104:	f8df 8210 	ldr.w	r8, [pc, #528]	; 2a318 <socket_thread_fn+0x21c>
   2a108:	1af6      	subs	r6, r6, r3
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2a10a:	4f84      	ldr	r7, [pc, #528]	; (2a31c <socket_thread_fn+0x220>)
   2a10c:	08f6      	lsrs	r6, r6, #3
		load_cmd_and_write();
   2a10e:	f7ff ff77 	bl	2a000 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a112:	f8d8 0000 	ldr.w	r0, [r8]
   2a116:	2500      	movs	r5, #0
   2a118:	f640 228c 	movw	r2, #2700	; 0xa8c
   2a11c:	462b      	mov	r3, r5
   2a11e:	e9cd 5500 	strd	r5, r5, [sp]
   2a122:	497e      	ldr	r1, [pc, #504]	; (2a31c <socket_thread_fn+0x220>)
   2a124:	f00f fe20 	bl	39d68 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   2a128:	4c7d      	ldr	r4, [pc, #500]	; (2a320 <socket_thread_fn+0x224>)
		if (bytes_read < 0) {
   2a12a:	f1b0 0900 	subs.w	r9, r0, #0
		ret.code  = 0;
   2a12e:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   2a130:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   2a132:	da6c      	bge.n	2a20e <socket_thread_fn+0x112>
			if (errno == EHOSTDOWN) {
   2a134:	f00f ffb9 	bl	3a0aa <__errno>
   2a138:	6803      	ldr	r3, [r0, #0]
   2a13a:	2b75      	cmp	r3, #117	; 0x75
   2a13c:	d122      	bne.n	2a184 <socket_thread_fn+0x88>
   2a13e:	2301      	movs	r3, #1
   2a140:	4c78      	ldr	r4, [pc, #480]	; (2a324 <socket_thread_fn+0x228>)
   2a142:	e8d4 2fef 	ldaex	r2, [r4]
   2a146:	e8c4 3fe1 	stlex	r1, r3, [r4]
   2a14a:	2900      	cmp	r1, #0
   2a14c:	d1f9      	bne.n	2a142 <socket_thread_fn+0x46>
				close(common_socket_fd);
   2a14e:	f8d8 0000 	ldr.w	r0, [r8]
	return z_impl_zsock_close(sock);
   2a152:	f00f fd8e 	bl	39c72 <z_impl_zsock_close>
				nrf_modem_lib_shutdown_wait();
   2a156:	f7fe ff2b 	bl	28fb0 <nrf_modem_lib_shutdown_wait>
   2a15a:	e8d4 3fef 	ldaex	r3, [r4]
   2a15e:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2a162:	2a00      	cmp	r2, #0
   2a164:	d1f9      	bne.n	2a15a <socket_thread_fn+0x5e>
				if (open_socket() != 0) {
   2a166:	f7ff fecd 	bl	29f04 <open_socket>
   2a16a:	2800      	cmp	r0, #0
   2a16c:	d0cf      	beq.n	2a10e <socket_thread_fn+0x12>
					LOG_ERR("Failed to open AT socket "
   2a16e:	f00f ff9c 	bl	3a0aa <__errno>
   2a172:	01b4      	lsls	r4, r6, #6
   2a174:	f044 0401 	orr.w	r4, r4, #1
   2a178:	6801      	ldr	r1, [r0, #0]
   2a17a:	4622      	mov	r2, r4
   2a17c:	486a      	ldr	r0, [pc, #424]	; (2a328 <socket_thread_fn+0x22c>)
   2a17e:	f00f fac9 	bl	39714 <log_1>
   2a182:	e7c4      	b.n	2a10e <socket_thread_fn+0x12>
				LOG_ERR("AT socket recv failed with err %d",
   2a184:	f00f ff91 	bl	3a0aa <__errno>
   2a188:	01b5      	lsls	r5, r6, #6
   2a18a:	f045 0901 	orr.w	r9, r5, #1
   2a18e:	6801      	ldr	r1, [r0, #0]
   2a190:	464a      	mov	r2, r9
   2a192:	4866      	ldr	r0, [pc, #408]	; (2a32c <socket_thread_fn+0x230>)
   2a194:	f00f fabe 	bl	39714 <log_1>
			if ((close(common_socket_fd) == 0) &&
   2a198:	f8d8 0000 	ldr.w	r0, [r8]
   2a19c:	f00f fd69 	bl	39c72 <z_impl_zsock_close>
   2a1a0:	bb28      	cbnz	r0, 2a1ee <socket_thread_fn+0xf2>
			    (open_socket() == 0)) {
   2a1a2:	f7ff feaf 	bl	29f04 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   2a1a6:	bb10      	cbnz	r0, 2a1ee <socket_thread_fn+0xf2>
				LOG_INF("AT socket recovered");
   2a1a8:	4861      	ldr	r0, [pc, #388]	; (2a330 <socket_thread_fn+0x234>)
   2a1aa:	f045 0103 	orr.w	r1, r5, #3
   2a1ae:	f00f faa4 	bl	396fa <log_0>
				ret.state = AT_CMD_ERROR_READ;
   2a1b2:	2306      	movs	r3, #6
   2a1b4:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   2a1b6:	f00f ff78 	bl	3a0aa <__errno>
   2a1ba:	6803      	ldr	r3, [r0, #0]
   2a1bc:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   2a1be:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   2a1c0:	4b5c      	ldr	r3, [pc, #368]	; (2a334 <socket_thread_fn+0x238>)
		    ret.state != AT_CMD_NOTIFICATION) {
   2a1c2:	7922      	ldrb	r2, [r4, #4]
		if (current_cmd.cmd != NULL &&
   2a1c4:	6819      	ldr	r1, [r3, #0]
   2a1c6:	b161      	cbz	r1, 2a1e2 <socket_thread_fn+0xe6>
   2a1c8:	7c1b      	ldrb	r3, [r3, #16]
   2a1ca:	079b      	lsls	r3, r3, #30
   2a1cc:	d509      	bpl.n	2a1e2 <socket_thread_fn+0xe6>
		    current_cmd.flags & AT_CMD_SYNC &&
   2a1ce:	2a07      	cmp	r2, #7
   2a1d0:	d09d      	beq.n	2a10e <socket_thread_fn+0x12>
   2a1d2:	f04f 32ff 	mov.w	r2, #4294967295
   2a1d6:	f04f 33ff 	mov.w	r3, #4294967295
   2a1da:	4951      	ldr	r1, [pc, #324]	; (2a320 <socket_thread_fn+0x224>)
   2a1dc:	4856      	ldr	r0, [pc, #344]	; (2a338 <socket_thread_fn+0x23c>)
   2a1de:	f00a f859 	bl	34294 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   2a1e2:	7923      	ldrb	r3, [r4, #4]
   2a1e4:	2b07      	cmp	r3, #7
   2a1e6:	d092      	beq.n	2a10e <socket_thread_fn+0x12>
			complete_cmd();
   2a1e8:	f7ff fea0 	bl	29f2c <complete_cmd>
   2a1ec:	e78f      	b.n	2a10e <socket_thread_fn+0x12>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   2a1ee:	f00f ff5c 	bl	3a0aa <__errno>
   2a1f2:	f045 0501 	orr.w	r5, r5, #1
   2a1f6:	6801      	ldr	r1, [r0, #0]
   2a1f8:	462a      	mov	r2, r5
   2a1fa:	4850      	ldr	r0, [pc, #320]	; (2a33c <socket_thread_fn+0x240>)
   2a1fc:	f00f fa8a 	bl	39714 <log_1>
			close(common_socket_fd);
   2a200:	f8d8 0000 	ldr.w	r0, [r8]
}
   2a204:	b003      	add	sp, #12
   2a206:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a20a:	f00f bd32 	b.w	39c72 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   2a20e:	d10a      	bne.n	2a226 <socket_thread_fn+0x12a>
			LOG_ERR("AT message empty");
   2a210:	01b1      	lsls	r1, r6, #6
   2a212:	484b      	ldr	r0, [pc, #300]	; (2a340 <socket_thread_fn+0x244>)
   2a214:	f041 0101 	orr.w	r1, r1, #1
   2a218:	f00f fa6f 	bl	396fa <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2a21c:	2306      	movs	r3, #6
   2a21e:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   2a220:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   2a224:	e7cb      	b.n	2a1be <socket_thread_fn+0xc2>
		} else if (buf[bytes_read - 1] != '\0') {
   2a226:	eb07 0309 	add.w	r3, r7, r9
   2a22a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2a22e:	b153      	cbz	r3, 2a246 <socket_thread_fn+0x14a>
			LOG_ERR("AT message too large for reception buffer or "
   2a230:	01b1      	lsls	r1, r6, #6
   2a232:	4844      	ldr	r0, [pc, #272]	; (2a344 <socket_thread_fn+0x248>)
   2a234:	f041 0101 	orr.w	r1, r1, #1
   2a238:	f00f fa5f 	bl	396fa <log_0>
			ret.state = AT_CMD_ERROR_READ;
   2a23c:	2306      	movs	r3, #6
   2a23e:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   2a240:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2a244:	e7bb      	b.n	2a1be <socket_thread_fn+0xc2>
	ret->state = AT_CMD_NOTIFICATION;
   2a246:	2307      	movs	r3, #7
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a248:	483f      	ldr	r0, [pc, #252]	; (2a348 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   2a24a:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a24c:	f7f7 fa0f 	bl	2166e <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2a250:	f1a9 0505 	sub.w	r5, r9, #5
   2a254:	443d      	add	r5, r7
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a256:	4602      	mov	r2, r0
   2a258:	493b      	ldr	r1, [pc, #236]	; (2a348 <socket_thread_fn+0x24c>)
   2a25a:	4628      	mov	r0, r5
   2a25c:	f013 fb72 	bl	3d944 <strncmp>
		if (match) {
   2a260:	b930      	cbnz	r0, 2a270 <socket_thread_fn+0x174>
			ret->state = AT_CMD_OK;
   2a262:	7120      	strb	r0, [r4, #4]
		buf[new_len++] = '\0';
   2a264:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   2a266:	1bea      	subs	r2, r5, r7
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a268:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   2a26a:	3201      	adds	r2, #1
   2a26c:	702b      	strb	r3, [r5, #0]
   2a26e:	e029      	b.n	2a2c4 <socket_thread_fn+0x1c8>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2a270:	4638      	mov	r0, r7
   2a272:	4936      	ldr	r1, [pc, #216]	; (2a34c <socket_thread_fn+0x250>)
   2a274:	f013 fba7 	bl	3d9c6 <strstr>
		if (tmpstr) {
   2a278:	4605      	mov	r5, r0
   2a27a:	b128      	cbz	r0, 2a288 <socket_thread_fn+0x18c>
			ret->state = AT_CMD_ERROR_CMS;
   2a27c:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CME_STR) - 1]);
   2a27e:	4834      	ldr	r0, [pc, #208]	; (2a350 <socket_thread_fn+0x254>)
			ret->state = AT_CMD_ERROR_CME;
   2a280:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CME_STR) - 1]);
   2a282:	f013 f9d1 	bl	3d628 <atoi>
	if (match) {
   2a286:	e7ed      	b.n	2a264 <socket_thread_fn+0x168>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2a288:	4932      	ldr	r1, [pc, #200]	; (2a354 <socket_thread_fn+0x258>)
   2a28a:	4824      	ldr	r0, [pc, #144]	; (2a31c <socket_thread_fn+0x220>)
   2a28c:	f013 fb9b 	bl	3d9c6 <strstr>
		if (tmpstr) {
   2a290:	4605      	mov	r5, r0
   2a292:	b108      	cbz	r0, 2a298 <socket_thread_fn+0x19c>
			ret->state = AT_CMD_ERROR_CME;
   2a294:	2303      	movs	r3, #3
   2a296:	e7f2      	b.n	2a27e <socket_thread_fn+0x182>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2a298:	482f      	ldr	r0, [pc, #188]	; (2a358 <socket_thread_fn+0x25c>)
   2a29a:	f7f7 f9e8 	bl	2166e <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   2a29e:	f1a9 0908 	sub.w	r9, r9, #8
   2a2a2:	eb09 0507 	add.w	r5, r9, r7
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2a2a6:	4602      	mov	r2, r0
   2a2a8:	492b      	ldr	r1, [pc, #172]	; (2a358 <socket_thread_fn+0x25c>)
   2a2aa:	4628      	mov	r0, r5
   2a2ac:	f013 fb4a 	bl	3d944 <strncmp>
		if (match) {
   2a2b0:	b920      	cbnz	r0, 2a2bc <socket_thread_fn+0x1c0>
			ret->state = AT_CMD_ERROR;
   2a2b2:	2301      	movs	r3, #1
   2a2b4:	f06f 0007 	mvn.w	r0, #7
   2a2b8:	7123      	strb	r3, [r4, #4]
	if (match) {
   2a2ba:	e7d3      	b.n	2a264 <socket_thread_fn+0x168>
		new_len = strlen(buf) + 1;
   2a2bc:	4638      	mov	r0, r7
   2a2be:	f7f7 f9d6 	bl	2166e <strlen>
   2a2c2:	1c42      	adds	r2, r0, #1
		if (current_cmd.cmd != NULL &&
   2a2c4:	4d1b      	ldr	r5, [pc, #108]	; (2a334 <socket_thread_fn+0x238>)
		    ret.state != AT_CMD_NOTIFICATION) {
   2a2c6:	7923      	ldrb	r3, [r4, #4]
		if (current_cmd.cmd != NULL &&
   2a2c8:	6829      	ldr	r1, [r5, #0]
   2a2ca:	b1e1      	cbz	r1, 2a306 <socket_thread_fn+0x20a>
		    current_cmd.resp != NULL &&
   2a2cc:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   2a2ce:	b1d0      	cbz	r0, 2a306 <socket_thread_fn+0x20a>
		    current_cmd.resp != NULL &&
   2a2d0:	2b07      	cmp	r3, #7
   2a2d2:	d109      	bne.n	2a2e8 <socket_thread_fn+0x1ec>
		    notification_handler != NULL) {
   2a2d4:	4b21      	ldr	r3, [pc, #132]	; (2a35c <socket_thread_fn+0x260>)
   2a2d6:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   2a2d8:	b91b      	cbnz	r3, 2a2e2 <socket_thread_fn+0x1e6>
		} else if (current_cmd.callback != NULL) {
   2a2da:	68ab      	ldr	r3, [r5, #8]
   2a2dc:	2b00      	cmp	r3, #0
   2a2de:	f43f af6f 	beq.w	2a1c0 <socket_thread_fn+0xc4>
			current_cmd.callback(buf);
   2a2e2:	4638      	mov	r0, r7
   2a2e4:	4798      	blx	r3
   2a2e6:	e76b      	b.n	2a1c0 <socket_thread_fn+0xc4>
			if (current_cmd.resp_size < payload_len) {
   2a2e8:	68eb      	ldr	r3, [r5, #12]
   2a2ea:	429a      	cmp	r2, r3
   2a2ec:	d908      	bls.n	2a300 <socket_thread_fn+0x204>
				LOG_ERR("Response buffer not large enough");
   2a2ee:	01b1      	lsls	r1, r6, #6
   2a2f0:	481b      	ldr	r0, [pc, #108]	; (2a360 <socket_thread_fn+0x264>)
   2a2f2:	f041 0101 	orr.w	r1, r1, #1
   2a2f6:	f00f fa00 	bl	396fa <log_0>
				ret.code  = -EMSGSIZE;
   2a2fa:	f06f 0379 	mvn.w	r3, #121	; 0x79
   2a2fe:	e75e      	b.n	2a1be <socket_thread_fn+0xc2>
   2a300:	4639      	mov	r1, r7
   2a302:	f013 f9b3 	bl	3d66c <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   2a306:	7923      	ldrb	r3, [r4, #4]
   2a308:	2b07      	cmp	r3, #7
   2a30a:	d1e6      	bne.n	2a2da <socket_thread_fn+0x1de>
   2a30c:	e7e2      	b.n	2a2d4 <socket_thread_fn+0x1d8>
   2a30e:	bf00      	nop
   2a310:	0003e468 	.word	0x0003e468
   2a314:	0003e480 	.word	0x0003e480
   2a318:	20017af0 	.word	0x20017af0
   2a31c:	20018177 	.word	0x20018177
   2a320:	20017ac8 	.word	0x20017ac8
   2a324:	20017ae4 	.word	0x20017ae4
   2a328:	00041145 	.word	0x00041145
   2a32c:	00041180 	.word	0x00041180
   2a330:	000411a2 	.word	0x000411a2
   2a334:	20017ad0 	.word	0x20017ad0
   2a338:	20014b5c 	.word	0x20014b5c
   2a33c:	000411b6 	.word	0x000411b6
   2a340:	000411ed 	.word	0x000411ed
   2a344:	000411fe 	.word	0x000411fe
   2a348:	00041249 	.word	0x00041249
   2a34c:	0004124e 	.word	0x0004124e
   2a350:	20018182 	.word	0x20018182
   2a354:	0004125a 	.word	0x0004125a
   2a358:	00041266 	.word	0x00041266
   2a35c:	20017ae8 	.word	0x20017ae8
   2a360:	0004126e 	.word	0x0004126e

0002a364 <at_cmd_write>:
{
   2a364:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a366:	4605      	mov	r5, r0
   2a368:	460f      	mov	r7, r1
   2a36a:	4616      	mov	r6, r2
   2a36c:	461c      	mov	r4, r3
   2a36e:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a370:	4b3c      	ldr	r3, [pc, #240]	; (2a464 <at_cmd_write+0x100>)
   2a372:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   2a376:	2b01      	cmp	r3, #1
   2a378:	d071      	beq.n	2a45e <at_cmd_write+0xfa>
	return z_impl_k_current_get();
   2a37a:	f00b ffb3 	bl	362e4 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   2a37e:	4b3a      	ldr	r3, [pc, #232]	; (2a468 <at_cmd_write+0x104>)
   2a380:	681b      	ldr	r3, [r3, #0]
   2a382:	4283      	cmp	r3, r0
   2a384:	d10e      	bne.n	2a3a4 <at_cmd_write+0x40>
   2a386:	4939      	ldr	r1, [pc, #228]	; (2a46c <at_cmd_write+0x108>)
   2a388:	f240 1389 	movw	r3, #393	; 0x189
   2a38c:	4a38      	ldr	r2, [pc, #224]	; (2a470 <at_cmd_write+0x10c>)
   2a38e:	4839      	ldr	r0, [pc, #228]	; (2a474 <at_cmd_write+0x110>)
   2a390:	f00e ff13 	bl	391ba <printk>
   2a394:	4838      	ldr	r0, [pc, #224]	; (2a478 <at_cmd_write+0x114>)
   2a396:	f00e ff10 	bl	391ba <printk>
   2a39a:	f240 1189 	movw	r1, #393	; 0x189
   2a39e:	4834      	ldr	r0, [pc, #208]	; (2a470 <at_cmd_write+0x10c>)
   2a3a0:	f00f f962 	bl	39668 <assert_post_action>
	if (cmd == NULL) {
   2a3a4:	b165      	cbz	r5, 2a3c0 <at_cmd_write+0x5c>
   2a3a6:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   2a3a8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2a3ac:	b9d3      	cbnz	r3, 2a3e4 <at_cmd_write+0x80>
   2a3ae:	4933      	ldr	r1, [pc, #204]	; (2a47c <at_cmd_write+0x118>)
   2a3b0:	4b33      	ldr	r3, [pc, #204]	; (2a480 <at_cmd_write+0x11c>)
		LOG_ERR("Invalid command");
   2a3b2:	4834      	ldr	r0, [pc, #208]	; (2a484 <at_cmd_write+0x120>)
   2a3b4:	1ac9      	subs	r1, r1, r3
   2a3b6:	08c9      	lsrs	r1, r1, #3
   2a3b8:	0189      	lsls	r1, r1, #6
   2a3ba:	f041 0101 	orr.w	r1, r1, #1
   2a3be:	e007      	b.n	2a3d0 <at_cmd_write+0x6c>
   2a3c0:	492e      	ldr	r1, [pc, #184]	; (2a47c <at_cmd_write+0x118>)
   2a3c2:	4b2f      	ldr	r3, [pc, #188]	; (2a480 <at_cmd_write+0x11c>)
		LOG_ERR("cmd is NULL");
   2a3c4:	4830      	ldr	r0, [pc, #192]	; (2a488 <at_cmd_write+0x124>)
   2a3c6:	1ac9      	subs	r1, r1, r3
   2a3c8:	08c9      	lsrs	r1, r1, #3
   2a3ca:	0189      	lsls	r1, r1, #6
   2a3cc:	f041 0101 	orr.w	r1, r1, #1
   2a3d0:	f00f f993 	bl	396fa <log_0>
		if (state) {
   2a3d4:	b91c      	cbnz	r4, 2a3de <at_cmd_write+0x7a>
		return -EINVAL;
   2a3d6:	f06f 0015 	mvn.w	r0, #21
}
   2a3da:	b009      	add	sp, #36	; 0x24
   2a3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   2a3de:	2304      	movs	r3, #4
   2a3e0:	7023      	strb	r3, [r4, #0]
   2a3e2:	e7f8      	b.n	2a3d6 <at_cmd_write+0x72>
		if (*c > ' ') {
   2a3e4:	2b20      	cmp	r3, #32
   2a3e6:	d9df      	bls.n	2a3a8 <at_cmd_write+0x44>
	command.callback = NULL;
   2a3e8:	2300      	movs	r3, #0
   2a3ea:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   2a3ec:	2302      	movs	r3, #2
	command.resp = buf;
   2a3ee:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   2a3f2:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   2a3f4:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   2a3f8:	f04f 32ff 	mov.w	r2, #4294967295
   2a3fc:	f04f 33ff 	mov.w	r3, #4294967295
   2a400:	4822      	ldr	r0, [pc, #136]	; (2a48c <at_cmd_write+0x128>)
   2a402:	f00a f89d 	bl	34540 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a406:	f04f 32ff 	mov.w	r2, #4294967295
   2a40a:	a903      	add	r1, sp, #12
   2a40c:	f04f 33ff 	mov.w	r3, #4294967295
   2a410:	481f      	ldr	r0, [pc, #124]	; (2a490 <at_cmd_write+0x12c>)
   2a412:	f009 ff3f 	bl	34294 <z_impl_k_msgq_put>
   2a416:	4601      	mov	r1, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   2a418:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   2a41a:	b170      	cbz	r0, 2a43a <at_cmd_write+0xd6>
   2a41c:	4a17      	ldr	r2, [pc, #92]	; (2a47c <at_cmd_write+0x118>)
   2a41e:	4b18      	ldr	r3, [pc, #96]	; (2a480 <at_cmd_write+0x11c>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   2a420:	481c      	ldr	r0, [pc, #112]	; (2a494 <at_cmd_write+0x130>)
   2a422:	1ad2      	subs	r2, r2, r3
   2a424:	08d2      	lsrs	r2, r2, #3
   2a426:	0192      	lsls	r2, r2, #6
   2a428:	f042 0201 	orr.w	r2, r2, #1
   2a42c:	f00f f972 	bl	39714 <log_1>
		if (state) {
   2a430:	b10c      	cbz	r4, 2a436 <at_cmd_write+0xd2>
			*state = AT_CMD_ERROR_QUEUE;
   2a432:	2304      	movs	r3, #4
		*state = ret.state;
   2a434:	7023      	strb	r3, [r4, #0]
	return ret.code;
   2a436:	9801      	ldr	r0, [sp, #4]
   2a438:	e7cf      	b.n	2a3da <at_cmd_write+0x76>
	load_cmd_and_write();
   2a43a:	f7ff fde1 	bl	2a000 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a43e:	f04f 32ff 	mov.w	r2, #4294967295
   2a442:	f04f 33ff 	mov.w	r3, #4294967295
   2a446:	4814      	ldr	r0, [pc, #80]	; (2a498 <at_cmd_write+0x134>)
   2a448:	a901      	add	r1, sp, #4
   2a44a:	f009 ffcb 	bl	343e4 <z_impl_k_msgq_get>
	k_mutex_unlock(&response_sync_get);
   2a44e:	480f      	ldr	r0, [pc, #60]	; (2a48c <at_cmd_write+0x128>)
   2a450:	f011 f8dd 	bl	3b60e <k_mutex_unlock.isra.0>
	if (state) {
   2a454:	2c00      	cmp	r4, #0
   2a456:	d0ee      	beq.n	2a436 <at_cmd_write+0xd2>
		*state = ret.state;
   2a458:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2a45c:	e7ea      	b.n	2a434 <at_cmd_write+0xd0>
		return -EHOSTDOWN;
   2a45e:	f06f 0074 	mvn.w	r0, #116	; 0x74
   2a462:	e7ba      	b.n	2a3da <at_cmd_write+0x76>
   2a464:	20017ae4 	.word	0x20017ae4
   2a468:	20017aec 	.word	0x20017aec
   2a46c:	000412cf 	.word	0x000412cf
   2a470:	000412ab 	.word	0x000412ab
   2a474:	0003f0e1 	.word	0x0003f0e1
   2a478:	000412ed 	.word	0x000412ed
   2a47c:	0003e480 	.word	0x0003e480
   2a480:	0003e468 	.word	0x0003e468
   2a484:	0004129b 	.word	0x0004129b
   2a488:	0004128f 	.word	0x0004128f
   2a48c:	20014aec 	.word	0x20014aec
   2a490:	20014b28 	.word	0x20014b28
   2a494:	0004131d 	.word	0x0004131d
   2a498:	20014b5c 	.word	0x20014b5c

0002a49c <at_cmd_set_notification_handler>:
{
   2a49c:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   2a49e:	4d09      	ldr	r5, [pc, #36]	; (2a4c4 <at_cmd_set_notification_handler+0x28>)
{
   2a4a0:	4604      	mov	r4, r0
	if (notification_handler != NULL && handler != notification_handler) {
   2a4a2:	6829      	ldr	r1, [r5, #0]
   2a4a4:	b159      	cbz	r1, 2a4be <at_cmd_set_notification_handler+0x22>
   2a4a6:	4281      	cmp	r1, r0
   2a4a8:	d009      	beq.n	2a4be <at_cmd_set_notification_handler+0x22>
   2a4aa:	4a07      	ldr	r2, [pc, #28]	; (2a4c8 <at_cmd_set_notification_handler+0x2c>)
   2a4ac:	4b07      	ldr	r3, [pc, #28]	; (2a4cc <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   2a4ae:	4808      	ldr	r0, [pc, #32]	; (2a4d0 <at_cmd_set_notification_handler+0x34>)
   2a4b0:	1ad2      	subs	r2, r2, r3
   2a4b2:	08d2      	lsrs	r2, r2, #3
   2a4b4:	0192      	lsls	r2, r2, #6
   2a4b6:	f042 0202 	orr.w	r2, r2, #2
   2a4ba:	f00f f92b 	bl	39714 <log_1>
	notification_handler = handler;
   2a4be:	602c      	str	r4, [r5, #0]
}
   2a4c0:	bd38      	pop	{r3, r4, r5, pc}
   2a4c2:	bf00      	nop
   2a4c4:	20017ae8 	.word	0x20017ae8
   2a4c8:	0003e480 	.word	0x0003e480
   2a4cc:	0003e468 	.word	0x0003e468
   2a4d0:	0004133d 	.word	0x0004133d

0002a4d4 <module_init>:

static int module_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	if (initialized) {
   2a4d4:	4a0c      	ldr	r2, [pc, #48]	; (2a508 <module_init+0x34>)
{
   2a4d6:	b508      	push	{r3, lr}
	if (initialized) {
   2a4d8:	7813      	ldrb	r3, [r2, #0]
   2a4da:	b15b      	cbz	r3, 2a4f4 <module_init+0x20>
   2a4dc:	490b      	ldr	r1, [pc, #44]	; (2a50c <module_init+0x38>)
   2a4de:	4b0c      	ldr	r3, [pc, #48]	; (2a510 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   2a4e0:	480c      	ldr	r0, [pc, #48]	; (2a514 <module_init+0x40>)
   2a4e2:	1ac9      	subs	r1, r1, r3
   2a4e4:	08c9      	lsrs	r1, r1, #3
   2a4e6:	0189      	lsls	r1, r1, #6
   2a4e8:	f041 0102 	orr.w	r1, r1, #2
   2a4ec:	f00f f905 	bl	396fa <log_0>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   2a4f0:	2000      	movs	r0, #0
   2a4f2:	bd08      	pop	{r3, pc}
	initialized = true;
   2a4f4:	2101      	movs	r1, #1
   2a4f6:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   2a4f8:	4a07      	ldr	r2, [pc, #28]	; (2a518 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   2a4fa:	4808      	ldr	r0, [pc, #32]	; (2a51c <module_init+0x48>)
	list->tail = NULL;
   2a4fc:	e9c2 3300 	strd	r3, r3, [r2]
   2a500:	f7ff ffcc 	bl	2a49c <at_cmd_set_notification_handler>
	return 0;
   2a504:	e7f4      	b.n	2a4f0 <module_init+0x1c>
   2a506:	bf00      	nop
   2a508:	20018c04 	.word	0x20018c04
   2a50c:	0003e488 	.word	0x0003e488
   2a510:	0003e468 	.word	0x0003e468
   2a514:	0004136d 	.word	0x0004136d
   2a518:	20017af4 	.word	0x20017af4
   2a51c:	0002a52d 	.word	0x0002a52d

0002a520 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2a520:	4801      	ldr	r0, [pc, #4]	; (2a528 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   2a522:	f00a b907 	b.w	34734 <z_impl_k_mutex_unlock>
   2a526:	bf00      	nop
   2a528:	20014ac4 	.word	0x20014ac4

0002a52c <notif_dispatch>:
{
   2a52c:	b538      	push	{r3, r4, r5, lr}
   2a52e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2a530:	f04f 33ff 	mov.w	r3, #4294967295
   2a534:	f04f 32ff 	mov.w	r2, #4294967295
   2a538:	480b      	ldr	r0, [pc, #44]	; (2a568 <notif_dispatch+0x3c>)
   2a53a:	f00a f801 	bl	34540 <z_impl_k_mutex_lock>
	return list->head;
   2a53e:	4b0b      	ldr	r3, [pc, #44]	; (2a56c <notif_dispatch+0x40>)
   2a540:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2a542:	b10b      	cbz	r3, 2a548 <notif_dispatch+0x1c>
	return node->next;
   2a544:	681c      	ldr	r4, [r3, #0]
   2a546:	b91b      	cbnz	r3, 2a550 <notif_dispatch+0x24>
}
   2a548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   2a54c:	f7ff bfe8 	b.w	2a520 <k_mutex_unlock.constprop.0.isra.0>
		curr->handler(curr->ctx, response);
   2a550:	4629      	mov	r1, r5
   2a552:	689a      	ldr	r2, [r3, #8]
   2a554:	6858      	ldr	r0, [r3, #4]
   2a556:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2a558:	b11c      	cbz	r4, 2a562 <notif_dispatch+0x36>
   2a55a:	6822      	ldr	r2, [r4, #0]
   2a55c:	4623      	mov	r3, r4
   2a55e:	4614      	mov	r4, r2
   2a560:	e7f1      	b.n	2a546 <notif_dispatch+0x1a>
   2a562:	4622      	mov	r2, r4
   2a564:	e7fa      	b.n	2a55c <notif_dispatch+0x30>
   2a566:	bf00      	nop
   2a568:	20014ac4 	.word	0x20014ac4
   2a56c:	20017af4 	.word	0x20017af4

0002a570 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   2a570:	4b06      	ldr	r3, [pc, #24]	; (2a58c <is_valid_notification_char+0x1c>)
   2a572:	5c1b      	ldrb	r3, [r3, r0]
   2a574:	f003 0303 	and.w	r3, r3, #3
   2a578:	2b02      	cmp	r3, #2
   2a57a:	bf08      	it	eq
   2a57c:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   2a57e:	3841      	subs	r0, #65	; 0x41
   2a580:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   2a582:	2819      	cmp	r0, #25
   2a584:	bf8c      	ite	hi
   2a586:	2000      	movhi	r0, #0
   2a588:	2001      	movls	r0, #1
   2a58a:	4770      	bx	lr
   2a58c:	000431d6 	.word	0x000431d6

0002a590 <is_separator>:
 * @retval true  If character is ':' or ','
 * @retval false In all other cases
 */
static inline bool is_separator(char chr)
{
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2a590:	f1a0 032c 	sub.w	r3, r0, #44	; 0x2c
   2a594:	b2db      	uxtb	r3, r3
   2a596:	2b11      	cmp	r3, #17
   2a598:	bf9d      	ittte	ls
   2a59a:	4803      	ldrls	r0, [pc, #12]	; (2a5a8 <is_separator+0x18>)
   2a59c:	40d8      	lsrls	r0, r3
   2a59e:	f000 0001 	andls.w	r0, r0, #1
{
   2a5a2:	2000      	movhi	r0, #0
	    (chr == AT_CMD_SEPARATOR)) {
		return true;
	}

	return false;
}
   2a5a4:	4770      	bx	lr
   2a5a6:	bf00      	nop
   2a5a8:	00024001 	.word	0x00024001

0002a5ac <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   2a5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   2a5b0:	6804      	ldr	r4, [r0, #0]
{
   2a5b2:	b0a3      	sub	sp, #140	; 0x8c
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a5b4:	7823      	ldrb	r3, [r4, #0]
   2a5b6:	4680      	mov	r8, r0
   2a5b8:	460e      	mov	r6, r1
   2a5ba:	4615      	mov	r5, r2
	const char *tmpstr = *str;
   2a5bc:	9400      	str	r4, [sp, #0]
   2a5be:	2b00      	cmp	r3, #0
   2a5c0:	f000 80cd 	beq.w	2a75e <at_parse_process_element+0x1b2>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2a5c4:	4b67      	ldr	r3, [pc, #412]	; (2a764 <at_parse_process_element+0x1b8>)
   2a5c6:	781b      	ldrb	r3, [r3, #0]
   2a5c8:	2b06      	cmp	r3, #6
   2a5ca:	d113      	bne.n	2a5f4 <at_parse_process_element+0x48>
		const char *start_ptr = tmpstr++;

		while (is_valid_notification_char(*tmpstr)) {
   2a5cc:	2000      	movs	r0, #0
		const char *start_ptr = tmpstr++;
   2a5ce:	1c62      	adds	r2, r4, #1
   2a5d0:	9200      	str	r2, [sp, #0]
		while (is_valid_notification_char(*tmpstr)) {
   2a5d2:	4611      	mov	r1, r2
   2a5d4:	4607      	mov	r7, r0
   2a5d6:	f812 0b01 	ldrb.w	r0, [r2], #1
   2a5da:	f7ff ffc9 	bl	2a570 <is_valid_notification_char>
   2a5de:	2800      	cmp	r0, #0
   2a5e0:	d1f7      	bne.n	2a5d2 <at_parse_process_element+0x26>
   2a5e2:	b107      	cbz	r7, 2a5e6 <at_parse_process_element+0x3a>
   2a5e4:	9100      	str	r1, [sp, #0]
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2a5e6:	1b0b      	subs	r3, r1, r4

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2a5e8:	4622      	mov	r2, r4
   2a5ea:	4631      	mov	r1, r6
   2a5ec:	4628      	mov	r0, r5
   2a5ee:	f011 f879 	bl	3b6e4 <at_params_string_put>
   2a5f2:	e046      	b.n	2a682 <at_parse_process_element+0xd6>
	} else if (state == COMMAND) {
   2a5f4:	3b01      	subs	r3, #1
   2a5f6:	2b08      	cmp	r3, #8
   2a5f8:	d843      	bhi.n	2a682 <at_parse_process_element+0xd6>
   2a5fa:	e8df f003 	tbb	[pc, r3]
   2a5fe:	4964      	.short	0x4964
   2a600:	420da05a 	.word	0x420da05a
   2a604:	3f1c      	.short	0x3f1c
   2a606:	05          	.byte	0x05
   2a607:	00          	.byte	0x00
   2a608:	4622      	mov	r2, r4
	if (state == NOTIFICATION) {
   2a60a:	2100      	movs	r1, #0
   2a60c:	4613      	mov	r3, r2
   2a60e:	f812 0b01 	ldrb.w	r0, [r2], #1
   2a612:	b160      	cbz	r0, 2a62e <at_parse_process_element+0x82>
   2a614:	2101      	movs	r1, #1
   2a616:	e7f9      	b.n	2a60c <at_parse_process_element+0x60>
   2a618:	4622      	mov	r2, r4
   2a61a:	2100      	movs	r1, #0
		while (isxdigit((int)*tmpstr)) {
   2a61c:	4f52      	ldr	r7, [pc, #328]	; (2a768 <at_parse_process_element+0x1bc>)
   2a61e:	4613      	mov	r3, r2
   2a620:	f812 0b01 	ldrb.w	r0, [r2], #1
   2a624:	5c38      	ldrb	r0, [r7, r0]
   2a626:	f010 0f44 	tst.w	r0, #68	; 0x44
   2a62a:	f040 8096 	bne.w	2a75a <at_parse_process_element+0x1ae>
   2a62e:	b101      	cbz	r1, 2a632 <at_parse_process_element+0x86>
   2a630:	9300      	str	r3, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   2a632:	1b1b      	subs	r3, r3, r4
   2a634:	e7d8      	b.n	2a5e8 <at_parse_process_element+0x3c>
		skip_command_prefix(&tmpstr);
   2a636:	4668      	mov	r0, sp
   2a638:	f010 fff4 	bl	3b624 <skip_command_prefix>
		while (is_valid_command_char(*tmpstr)) {
   2a63c:	2200      	movs	r2, #0
   2a63e:	9b00      	ldr	r3, [sp, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   2a640:	4849      	ldr	r0, [pc, #292]	; (2a768 <at_parse_process_element+0x1bc>)
   2a642:	461f      	mov	r7, r3
   2a644:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a648:	5c41      	ldrb	r1, [r0, r1]
   2a64a:	0749      	lsls	r1, r1, #29
   2a64c:	d110      	bne.n	2a670 <at_parse_process_element+0xc4>
   2a64e:	b102      	cbz	r2, 2a652 <at_parse_process_element+0xa6>
   2a650:	9700      	str	r7, [sp, #0]
		at_params_string_put(list, index, start_ptr,
   2a652:	1b3b      	subs	r3, r7, r4
   2a654:	4622      	mov	r2, r4
   2a656:	4631      	mov	r1, r6
   2a658:	4628      	mov	r0, r5
   2a65a:	f011 f843 	bl	3b6e4 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2a65e:	783b      	ldrb	r3, [r7, #0]
   2a660:	2b3d      	cmp	r3, #61	; 0x3d
   2a662:	d107      	bne.n	2a674 <at_parse_process_element+0xc8>
   2a664:	787b      	ldrb	r3, [r7, #1]
   2a666:	2b3f      	cmp	r3, #63	; 0x3f
   2a668:	d10b      	bne.n	2a682 <at_parse_process_element+0xd6>
			tmpstr += 2;
   2a66a:	3702      	adds	r7, #2
		tmpstr++;
   2a66c:	9700      	str	r7, [sp, #0]
   2a66e:	e008      	b.n	2a682 <at_parse_process_element+0xd6>
   2a670:	2201      	movs	r2, #1
   2a672:	e7e6      	b.n	2a642 <at_parse_process_element+0x96>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   2a674:	2b3f      	cmp	r3, #63	; 0x3f
   2a676:	d104      	bne.n	2a682 <at_parse_process_element+0xd6>
			tmpstr++;
   2a678:	3701      	adds	r7, #1
   2a67a:	e7f7      	b.n	2a66c <at_parse_process_element+0xc0>
		at_params_empty_put(list, index);
   2a67c:	4628      	mov	r0, r5
   2a67e:	f011 f803 	bl	3b688 <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2a682:	2000      	movs	r0, #0
	*str = tmpstr;
   2a684:	9b00      	ldr	r3, [sp, #0]
   2a686:	f8c8 3000 	str.w	r3, [r8]
}
   2a68a:	b023      	add	sp, #140	; 0x8c
   2a68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (state == NOTIFICATION) {
   2a690:	4627      	mov	r7, r4
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2a692:	783a      	ldrb	r2, [r7, #0]
   2a694:	4610      	mov	r0, r2
   2a696:	f010 ffbc 	bl	3b612 <is_lfcr>
   2a69a:	463b      	mov	r3, r7
			tmpstr++;
   2a69c:	3701      	adds	r7, #1
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2a69e:	b908      	cbnz	r0, 2a6a4 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a6a0:	2a00      	cmp	r2, #0
   2a6a2:	d1f6      	bne.n	2a692 <at_parse_process_element+0xe6>
		at_params_string_put(list, index, start_ptr,
   2a6a4:	4622      	mov	r2, r4
   2a6a6:	4631      	mov	r1, r6
   2a6a8:	4628      	mov	r0, r5
   2a6aa:	1b1b      	subs	r3, r3, r4
   2a6ac:	f011 f81a 	bl	3b6e4 <at_params_string_put>
   2a6b0:	e7dc      	b.n	2a66c <at_parse_process_element+0xc0>
	if (state == NOTIFICATION) {
   2a6b2:	4627      	mov	r7, r4
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   2a6b4:	783a      	ldrb	r2, [r7, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   2a6b6:	463b      	mov	r3, r7
   2a6b8:	2a22      	cmp	r2, #34	; 0x22
			tmpstr++;
   2a6ba:	f107 0701 	add.w	r7, r7, #1
   2a6be:	d0f1      	beq.n	2a6a4 <at_parse_process_element+0xf8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a6c0:	2a00      	cmp	r2, #0
   2a6c2:	d1f7      	bne.n	2a6b4 <at_parse_process_element+0x108>
   2a6c4:	e7ee      	b.n	2a6a4 <at_parse_process_element+0xf8>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2a6c6:	4620      	mov	r0, r4
   2a6c8:	220a      	movs	r2, #10
   2a6ca:	a901      	add	r1, sp, #4
   2a6cc:	f00d fe92 	bl	383f4 <strtoul>
   2a6d0:	2401      	movs	r4, #1
		tmpstr = next;
   2a6d2:	9b01      	ldr	r3, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2a6d4:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2a6d6:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2a6d8:	9b00      	ldr	r3, [sp, #0]
   2a6da:	7818      	ldrb	r0, [r3, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   2a6dc:	2829      	cmp	r0, #41	; 0x29
   2a6de:	d023      	beq.n	2a728 <at_parse_process_element+0x17c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a6e0:	b310      	cbz	r0, 2a728 <at_parse_process_element+0x17c>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2a6e2:	f103 0901 	add.w	r9, r3, #1
			if (is_separator(*tmpstr)) {
   2a6e6:	f7ff ff53 	bl	2a590 <is_separator>
				tmparray[i++] =
   2a6ea:	f8cd 9000 	str.w	r9, [sp]
			if (is_separator(*tmpstr)) {
   2a6ee:	b908      	cbnz	r0, 2a6f4 <at_parse_process_element+0x148>
					tmpstr = next;
   2a6f0:	4627      	mov	r7, r4
   2a6f2:	e017      	b.n	2a724 <at_parse_process_element+0x178>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2a6f4:	220a      	movs	r2, #10
   2a6f6:	a901      	add	r1, sp, #4
   2a6f8:	4648      	mov	r0, r9
   2a6fa:	f00d fe7b 	bl	383f4 <strtoul>
				tmparray[i++] =
   2a6fe:	ab22      	add	r3, sp, #136	; 0x88
   2a700:	1c67      	adds	r7, r4, #1
   2a702:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2a706:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   2a70a:	4648      	mov	r0, r9
   2a70c:	f7f6 ffaf 	bl	2166e <strlen>
   2a710:	4604      	mov	r4, r0
   2a712:	9801      	ldr	r0, [sp, #4]
   2a714:	f7f6 ffab 	bl	2166e <strlen>
   2a718:	4284      	cmp	r4, r0
   2a71a:	d006      	beq.n	2a72a <at_parse_process_element+0x17e>
					tmpstr = next;
   2a71c:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2a71e:	2f20      	cmp	r7, #32
					tmpstr = next;
   2a720:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2a722:	d002      	beq.n	2a72a <at_parse_process_element+0x17e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2a724:	463c      	mov	r4, r7
   2a726:	e7d7      	b.n	2a6d8 <at_parse_process_element+0x12c>
   2a728:	4627      	mov	r7, r4
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   2a72a:	00bb      	lsls	r3, r7, #2
   2a72c:	4631      	mov	r1, r6
   2a72e:	4628      	mov	r0, r5
   2a730:	aa02      	add	r2, sp, #8
   2a732:	f010 fffd 	bl	3b730 <at_params_array_put>
		tmpstr++;
   2a736:	9b00      	ldr	r3, [sp, #0]
   2a738:	3301      	adds	r3, #1
   2a73a:	9300      	str	r3, [sp, #0]
   2a73c:	e7a1      	b.n	2a682 <at_parse_process_element+0xd6>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   2a73e:	220a      	movs	r2, #10
   2a740:	4620      	mov	r0, r4
   2a742:	a902      	add	r1, sp, #8
   2a744:	f00d fdda 	bl	382fc <strtoll>
   2a748:	460b      	mov	r3, r1
		tmpstr = next;
   2a74a:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   2a74c:	4602      	mov	r2, r0
		tmpstr = next;
   2a74e:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   2a750:	4628      	mov	r0, r5
   2a752:	4631      	mov	r1, r6
   2a754:	f010 ffaf 	bl	3b6b6 <at_params_int_put>
   2a758:	e793      	b.n	2a682 <at_parse_process_element+0xd6>
   2a75a:	2101      	movs	r1, #1
   2a75c:	e75f      	b.n	2a61e <at_parse_process_element+0x72>
		return -1;
   2a75e:	f04f 30ff 	mov.w	r0, #4294967295
   2a762:	e792      	b.n	2a68a <at_parse_process_element+0xde>
   2a764:	20018c06 	.word	0x20018c06
   2a768:	000431d6 	.word	0x000431d6

0002a76c <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   2a76c:	b510      	push	{r4, lr}
   2a76e:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   2a770:	f7f6 ff7d 	bl	2166e <strlen>
   2a774:	2801      	cmp	r0, #1
   2a776:	d921      	bls.n	2a7bc <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2a778:	7823      	ldrb	r3, [r4, #0]
   2a77a:	4912      	ldr	r1, [pc, #72]	; (2a7c4 <is_command+0x58>)
   2a77c:	5cca      	ldrb	r2, [r1, r3]
   2a77e:	f002 0203 	and.w	r2, r2, #3
   2a782:	2a02      	cmp	r2, #2
   2a784:	bf08      	it	eq
   2a786:	3b20      	subeq	r3, #32
   2a788:	2b41      	cmp	r3, #65	; 0x41
   2a78a:	d117      	bne.n	2a7bc <is_command+0x50>
   2a78c:	7863      	ldrb	r3, [r4, #1]
   2a78e:	5cca      	ldrb	r2, [r1, r3]
   2a790:	f002 0203 	and.w	r2, r2, #3
   2a794:	2a02      	cmp	r2, #2
   2a796:	bf08      	it	eq
   2a798:	3b20      	subeq	r3, #32
   2a79a:	2b54      	cmp	r3, #84	; 0x54
   2a79c:	d10e      	bne.n	2a7bc <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2a79e:	78a2      	ldrb	r2, [r4, #2]
   2a7a0:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2a7a4:	2b23      	cmp	r3, #35	; 0x23
   2a7a6:	d00b      	beq.n	2a7c0 <is_command+0x54>
   2a7a8:	2a25      	cmp	r2, #37	; 0x25
   2a7aa:	d009      	beq.n	2a7c0 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2a7ac:	4610      	mov	r0, r2
   2a7ae:	f010 ff30 	bl	3b612 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   2a7b2:	b910      	cbnz	r0, 2a7ba <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a7b4:	fab2 f082 	clz	r0, r2
   2a7b8:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2a7ba:	bd10      	pop	{r4, pc}
		return false;
   2a7bc:	2000      	movs	r0, #0
   2a7be:	e7fc      	b.n	2a7ba <is_command+0x4e>
		return true;
   2a7c0:	2001      	movs	r0, #1
   2a7c2:	e7fa      	b.n	2a7ba <is_command+0x4e>
   2a7c4:	000431d6 	.word	0x000431d6

0002a7c8 <at_parse_detect_type>:
{
   2a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a7ca:	4606      	mov	r6, r0
	const char *tmpstr = *str;
   2a7cc:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2a7ce:	4f65      	ldr	r7, [pc, #404]	; (2a964 <at_parse_detect_type+0x19c>)
   2a7d0:	2900      	cmp	r1, #0
   2a7d2:	d137      	bne.n	2a844 <at_parse_detect_type+0x7c>
   2a7d4:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2a7d6:	4d64      	ldr	r5, [pc, #400]	; (2a968 <at_parse_detect_type+0x1a0>)
   2a7d8:	2b2b      	cmp	r3, #43	; 0x2b
   2a7da:	d001      	beq.n	2a7e0 <at_parse_detect_type+0x18>
   2a7dc:	2b25      	cmp	r3, #37	; 0x25
   2a7de:	d170      	bne.n	2a8c2 <at_parse_detect_type+0xfa>
	state = new_state;
   2a7e0:	2306      	movs	r3, #6
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2a7e2:	2205      	movs	r2, #5
   2a7e4:	4620      	mov	r0, r4
   2a7e6:	4961      	ldr	r1, [pc, #388]	; (2a96c <at_parse_detect_type+0x1a4>)
	state = new_state;
   2a7e8:	702b      	strb	r3, [r5, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2a7ea:	f013 f8ab 	bl	3d944 <strncmp>
   2a7ee:	b920      	cbnz	r0, 2a7fa <at_parse_detect_type+0x32>
			retval = true;
   2a7f0:	2301      	movs	r3, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   2a7f2:	703b      	strb	r3, [r7, #0]
	return 0;
   2a7f4:	2000      	movs	r0, #0
	*str = tmpstr;
   2a7f6:	6034      	str	r4, [r6, #0]
	return 0;
   2a7f8:	e062      	b.n	2a8c0 <at_parse_detect_type+0xf8>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2a7fa:	2205      	movs	r2, #5
   2a7fc:	4620      	mov	r0, r4
   2a7fe:	495c      	ldr	r1, [pc, #368]	; (2a970 <at_parse_detect_type+0x1a8>)
   2a800:	f013 f8a0 	bl	3d944 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2a804:	2800      	cmp	r0, #0
   2a806:	d0f3      	beq.n	2a7f0 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   2a808:	220b      	movs	r2, #11
   2a80a:	4620      	mov	r0, r4
   2a80c:	4959      	ldr	r1, [pc, #356]	; (2a974 <at_parse_detect_type+0x1ac>)
   2a80e:	f013 f899 	bl	3d944 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2a812:	2800      	cmp	r0, #0
   2a814:	d0ec      	beq.n	2a7f0 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   2a816:	220a      	movs	r2, #10
   2a818:	4620      	mov	r0, r4
   2a81a:	4957      	ldr	r1, [pc, #348]	; (2a978 <at_parse_detect_type+0x1b0>)
   2a81c:	f013 f892 	bl	3d944 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   2a820:	2800      	cmp	r0, #0
   2a822:	d0e5      	beq.n	2a7f0 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   2a824:	220b      	movs	r2, #11
   2a826:	4620      	mov	r0, r4
   2a828:	4954      	ldr	r1, [pc, #336]	; (2a97c <at_parse_detect_type+0x1b4>)
   2a82a:	f013 f88b 	bl	3d944 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   2a82e:	2800      	cmp	r0, #0
   2a830:	d0de      	beq.n	2a7f0 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   2a832:	2207      	movs	r2, #7
   2a834:	4620      	mov	r0, r4
   2a836:	4952      	ldr	r1, [pc, #328]	; (2a980 <at_parse_detect_type+0x1b8>)
   2a838:	f013 f884 	bl	3d944 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   2a83c:	fab0 f380 	clz	r3, r0
   2a840:	095b      	lsrs	r3, r3, #5
   2a842:	e7d6      	b.n	2a7f2 <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   2a844:	783b      	ldrb	r3, [r7, #0]
   2a846:	2b00      	cmp	r3, #0
   2a848:	d13d      	bne.n	2a8c6 <at_parse_detect_type+0xfe>
	} else if ((index > 0) && is_clac(tmpstr)) {
   2a84a:	2900      	cmp	r1, #0
   2a84c:	dd51      	ble.n	2a8f2 <at_parse_detect_type+0x12a>
   2a84e:	4622      	mov	r2, r4
   2a850:	4615      	mov	r5, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   2a852:	f812 0b01 	ldrb.w	r0, [r2], #1
   2a856:	f010 fedc 	bl	3b612 <is_lfcr>
   2a85a:	2800      	cmp	r0, #0
   2a85c:	d1f8      	bne.n	2a850 <at_parse_detect_type+0x88>
		str++;
	}

	if (strlen(str) < 4) {
   2a85e:	4628      	mov	r0, r5
   2a860:	f7f6 ff05 	bl	2166e <strlen>
   2a864:	2803      	cmp	r0, #3
   2a866:	d932      	bls.n	2a8ce <at_parse_detect_type+0x106>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   2a868:	782b      	ldrb	r3, [r5, #0]
   2a86a:	4a46      	ldr	r2, [pc, #280]	; (2a984 <at_parse_detect_type+0x1bc>)
   2a86c:	5cd1      	ldrb	r1, [r2, r3]
   2a86e:	f001 0103 	and.w	r1, r1, #3
   2a872:	2902      	cmp	r1, #2
   2a874:	bf08      	it	eq
   2a876:	3b20      	subeq	r3, #32
   2a878:	2b41      	cmp	r3, #65	; 0x41
   2a87a:	d128      	bne.n	2a8ce <at_parse_detect_type+0x106>
   2a87c:	786b      	ldrb	r3, [r5, #1]
   2a87e:	5cd1      	ldrb	r1, [r2, r3]
   2a880:	f001 0103 	and.w	r1, r1, #3
   2a884:	2902      	cmp	r1, #2
   2a886:	bf08      	it	eq
   2a888:	3b20      	subeq	r3, #32
   2a88a:	2b54      	cmp	r3, #84	; 0x54
   2a88c:	d11f      	bne.n	2a8ce <at_parse_detect_type+0x106>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   2a88e:	78ab      	ldrb	r3, [r5, #2]
   2a890:	5cd1      	ldrb	r1, [r2, r3]
   2a892:	f001 0103 	and.w	r1, r1, #3
   2a896:	2902      	cmp	r1, #2
   2a898:	bf08      	it	eq
   2a89a:	3b20      	subeq	r3, #32
   2a89c:	2b2b      	cmp	r3, #43	; 0x2b
   2a89e:	d00a      	beq.n	2a8b6 <at_parse_detect_type+0xee>
   2a8a0:	2b25      	cmp	r3, #37	; 0x25
   2a8a2:	d114      	bne.n	2a8ce <at_parse_detect_type+0x106>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   2a8a4:	78eb      	ldrb	r3, [r5, #3]
   2a8a6:	5cd2      	ldrb	r2, [r2, r3]
   2a8a8:	f002 0203 	and.w	r2, r2, #3
   2a8ac:	2a02      	cmp	r2, #2
   2a8ae:	bf08      	it	eq
   2a8b0:	3b20      	subeq	r3, #32
   2a8b2:	2b58      	cmp	r3, #88	; 0x58
   2a8b4:	d00b      	beq.n	2a8ce <at_parse_detect_type+0x106>
	state = new_state;
   2a8b6:	2209      	movs	r2, #9
		return -2;
   2a8b8:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   2a8bc:	4b2a      	ldr	r3, [pc, #168]	; (2a968 <at_parse_detect_type+0x1a0>)
   2a8be:	701a      	strb	r2, [r3, #0]
}
   2a8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (set_type_string) {
   2a8c2:	783b      	ldrb	r3, [r7, #0]
   2a8c4:	b153      	cbz	r3, 2a8dc <at_parse_detect_type+0x114>
	state = new_state;
   2a8c6:	2202      	movs	r2, #2
   2a8c8:	4b27      	ldr	r3, [pc, #156]	; (2a968 <at_parse_detect_type+0x1a0>)
   2a8ca:	701a      	strb	r2, [r3, #0]
}
   2a8cc:	e792      	b.n	2a7f4 <at_parse_detect_type+0x2c>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   2a8ce:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2a8d0:	2b2b      	cmp	r3, #43	; 0x2b
   2a8d2:	d10c      	bne.n	2a8ee <at_parse_detect_type+0x126>
		return -1;
   2a8d4:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   2a8d8:	6034      	str	r4, [r6, #0]
   2a8da:	e7f1      	b.n	2a8c0 <at_parse_detect_type+0xf8>
	} else if ((index == 0) && is_command(tmpstr)) {
   2a8dc:	4620      	mov	r0, r4
   2a8de:	f7ff ff45 	bl	2a76c <is_command>
   2a8e2:	b110      	cbz	r0, 2a8ea <at_parse_detect_type+0x122>
	state = new_state;
   2a8e4:	2307      	movs	r3, #7
   2a8e6:	702b      	strb	r3, [r5, #0]
}
   2a8e8:	e784      	b.n	2a7f4 <at_parse_detect_type+0x2c>
	state = new_state;
   2a8ea:	2302      	movs	r3, #2
   2a8ec:	e7fb      	b.n	2a8e6 <at_parse_detect_type+0x11e>
   2a8ee:	2b25      	cmp	r3, #37	; 0x25
   2a8f0:	d0f0      	beq.n	2a8d4 <at_parse_detect_type+0x10c>
	} else if (is_number(*tmpstr)) {
   2a8f2:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   2a8f4:	4b23      	ldr	r3, [pc, #140]	; (2a984 <at_parse_detect_type+0x1bc>)
   2a8f6:	5c9b      	ldrb	r3, [r3, r2]
   2a8f8:	075b      	lsls	r3, r3, #29
   2a8fa:	d40a      	bmi.n	2a912 <at_parse_detect_type+0x14a>
   2a8fc:	2a2d      	cmp	r2, #45	; 0x2d
   2a8fe:	d008      	beq.n	2a912 <at_parse_detect_type+0x14a>
   2a900:	2a2b      	cmp	r2, #43	; 0x2b
   2a902:	d006      	beq.n	2a912 <at_parse_detect_type+0x14a>
	if (chr == '"') {
   2a904:	2a22      	cmp	r2, #34	; 0x22
   2a906:	d107      	bne.n	2a918 <at_parse_detect_type+0x150>
	state = new_state;
   2a908:	2203      	movs	r2, #3
   2a90a:	4b17      	ldr	r3, [pc, #92]	; (2a968 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   2a90c:	3401      	adds	r4, #1
	state = new_state;
   2a90e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2a910:	e770      	b.n	2a7f4 <at_parse_detect_type+0x2c>
	state = new_state;
   2a912:	2204      	movs	r2, #4
   2a914:	4b14      	ldr	r3, [pc, #80]	; (2a968 <at_parse_detect_type+0x1a0>)
   2a916:	e7d8      	b.n	2a8ca <at_parse_detect_type+0x102>
	if (chr == '(') {
   2a918:	2a28      	cmp	r2, #40	; 0x28
   2a91a:	d104      	bne.n	2a926 <at_parse_detect_type+0x15e>
   2a91c:	2201      	movs	r2, #1
   2a91e:	4b12      	ldr	r3, [pc, #72]	; (2a968 <at_parse_detect_type+0x1a0>)
		tmpstr++;
   2a920:	4414      	add	r4, r2
	state = new_state;
   2a922:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2a924:	e766      	b.n	2a7f4 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   2a926:	4610      	mov	r0, r2
   2a928:	f010 fe73 	bl	3b612 <is_lfcr>
   2a92c:	b188      	cbz	r0, 2a952 <at_parse_detect_type+0x18a>
   2a92e:	490e      	ldr	r1, [pc, #56]	; (2a968 <at_parse_detect_type+0x1a0>)
   2a930:	780b      	ldrb	r3, [r1, #0]
   2a932:	2b04      	cmp	r3, #4
   2a934:	d10a      	bne.n	2a94c <at_parse_detect_type+0x184>
   2a936:	4622      	mov	r2, r4
   2a938:	4614      	mov	r4, r2
		while (is_lfcr(*tmpstr)) {
   2a93a:	f812 0b01 	ldrb.w	r0, [r2], #1
   2a93e:	f010 fe68 	bl	3b612 <is_lfcr>
   2a942:	2800      	cmp	r0, #0
   2a944:	d1f8      	bne.n	2a938 <at_parse_detect_type+0x170>
	state = new_state;
   2a946:	2305      	movs	r3, #5
   2a948:	700b      	strb	r3, [r1, #0]
}
   2a94a:	e753      	b.n	2a7f4 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   2a94c:	2b08      	cmp	r3, #8
   2a94e:	f43f af51 	beq.w	2a7f4 <at_parse_detect_type+0x2c>
	} else if (is_separator(*tmpstr)) {
   2a952:	4610      	mov	r0, r2
   2a954:	f7ff fe1c 	bl	2a590 <is_separator>
   2a958:	2800      	cmp	r0, #0
   2a95a:	d0bb      	beq.n	2a8d4 <at_parse_detect_type+0x10c>
	state = new_state;
   2a95c:	2208      	movs	r2, #8
   2a95e:	4b02      	ldr	r3, [pc, #8]	; (2a968 <at_parse_detect_type+0x1a0>)
   2a960:	e7b3      	b.n	2a8ca <at_parse_detect_type+0x102>
   2a962:	bf00      	nop
   2a964:	20018c05 	.word	0x20018c05
   2a968:	20018c06 	.word	0x20018c06
   2a96c:	00041399 	.word	0x00041399
   2a970:	0004139f 	.word	0x0004139f
   2a974:	000413a5 	.word	0x000413a5
   2a978:	000413b1 	.word	0x000413b1
   2a97c:	000413bc 	.word	0x000413bc
   2a980:	000413c8 	.word	0x000413c8
   2a984:	000431d6 	.word	0x000431d6

0002a988 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   2a988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a98c:	4689      	mov	r9, r1
   2a98e:	4616      	mov	r6, r2
   2a990:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   2a992:	4680      	mov	r8, r0
   2a994:	2800      	cmp	r0, #0
   2a996:	f000 8081 	beq.w	2aa9c <at_parser_max_params_from_str+0x114>
   2a99a:	2a00      	cmp	r2, #0
   2a99c:	d07e      	beq.n	2aa9c <at_parser_max_params_from_str+0x114>
   2a99e:	6853      	ldr	r3, [r2, #4]
   2a9a0:	2b00      	cmp	r3, #0
   2a9a2:	d07b      	beq.n	2aa9c <at_parser_max_params_from_str+0x114>
	state = IDLE;
   2a9a4:	2500      	movs	r5, #0
	int index = 0;
   2a9a6:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   2a9a8:	4610      	mov	r0, r2
   2a9aa:	f000 f8eb 	bl	2ab84 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   2a9ae:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   2a9b0:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2aaa4 <at_parser_max_params_from_str+0x11c>
	max_params_count = MIN(max_params_count, list->param_count);
   2a9b4:	429f      	cmp	r7, r3
   2a9b6:	bf28      	it	cs
   2a9b8:	461f      	movcs	r7, r3
	state = IDLE;
   2a9ba:	4b3b      	ldr	r3, [pc, #236]	; (2aaa8 <at_parser_max_params_from_str+0x120>)
	const char *str = *at_params_str;
   2a9bc:	f8cd 8004 	str.w	r8, [sp, #4]
	state = IDLE;
   2a9c0:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   2a9c2:	4b3a      	ldr	r3, [pc, #232]	; (2aaac <at_parser_max_params_from_str+0x124>)
   2a9c4:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   2a9c6:	9b01      	ldr	r3, [sp, #4]
   2a9c8:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2a9ca:	2a00      	cmp	r2, #0
   2a9cc:	d04c      	beq.n	2aa68 <at_parser_max_params_from_str+0xe0>
   2a9ce:	42a7      	cmp	r7, r4
   2a9d0:	d94a      	bls.n	2aa68 <at_parser_max_params_from_str+0xe0>
		if (isspace((int)*str)) {
   2a9d2:	f81a 2002 	ldrb.w	r2, [sl, r2]
		ret = at_parse_detect_type(&str, index);
   2a9d6:	4621      	mov	r1, r4
		if (isspace((int)*str)) {
   2a9d8:	0712      	lsls	r2, r2, #28
			str++;
   2a9da:	bf48      	it	mi
   2a9dc:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   2a9de:	a801      	add	r0, sp, #4
			str++;
   2a9e0:	bf48      	it	mi
   2a9e2:	9301      	strmi	r3, [sp, #4]
		ret = at_parse_detect_type(&str, index);
   2a9e4:	f7ff fef0 	bl	2a7c8 <at_parse_detect_type>
		if (ret == -1) {
   2a9e8:	1c43      	adds	r3, r0, #1
   2a9ea:	d03d      	beq.n	2aa68 <at_parser_max_params_from_str+0xe0>
		if (ret == -2) {
   2a9ec:	3002      	adds	r0, #2
			index = 0;
   2a9ee:	bf08      	it	eq
   2a9f0:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   2a9f2:	4632      	mov	r2, r6
   2a9f4:	4621      	mov	r1, r4
   2a9f6:	a801      	add	r0, sp, #4
			str = *at_params_str;
   2a9f8:	bf08      	it	eq
   2a9fa:	f8cd 8004 	streq.w	r8, [sp, #4]
		if (at_parse_process_element(&str, index, list) == -1) {
   2a9fe:	f7ff fdd5 	bl	2a5ac <at_parse_process_element>
   2aa02:	1c41      	adds	r1, r0, #1
   2aa04:	d030      	beq.n	2aa68 <at_parser_max_params_from_str+0xe0>
		if (is_separator(*str)) {
   2aa06:	9a01      	ldr	r2, [sp, #4]
   2aa08:	7810      	ldrb	r0, [r2, #0]
   2aa0a:	f7ff fdc1 	bl	2a590 <is_separator>
   2aa0e:	b1b0      	cbz	r0, 2aa3e <at_parser_max_params_from_str+0xb6>
			if (is_lfcr(*(str + 1))) {
   2aa10:	7850      	ldrb	r0, [r2, #1]
   2aa12:	f010 fdfe 	bl	3b612 <is_lfcr>
   2aa16:	b178      	cbz	r0, 2aa38 <at_parser_max_params_from_str+0xb0>
				index++;
   2aa18:	3401      	adds	r4, #1
				if (index == max_params) {
   2aa1a:	42bc      	cmp	r4, r7
   2aa1c:	d039      	beq.n	2aa92 <at_parser_max_params_from_str+0x10a>
				if (at_parse_detect_type(&str, index) == -1) {
   2aa1e:	4621      	mov	r1, r4
   2aa20:	a801      	add	r0, sp, #4
   2aa22:	f7ff fed1 	bl	2a7c8 <at_parse_detect_type>
   2aa26:	1c42      	adds	r2, r0, #1
   2aa28:	d01e      	beq.n	2aa68 <at_parser_max_params_from_str+0xe0>
				if (at_parse_process_element(&str, index,
   2aa2a:	4632      	mov	r2, r6
   2aa2c:	4621      	mov	r1, r4
   2aa2e:	a801      	add	r0, sp, #4
   2aa30:	f7ff fdbc 	bl	2a5ac <at_parse_process_element>
   2aa34:	1c43      	adds	r3, r0, #1
   2aa36:	d017      	beq.n	2aa68 <at_parser_max_params_from_str+0xe0>
			str++;
   2aa38:	9b01      	ldr	r3, [sp, #4]
   2aa3a:	3301      	adds	r3, #1
   2aa3c:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   2aa3e:	9a01      	ldr	r2, [sp, #4]
   2aa40:	7810      	ldrb	r0, [r2, #0]
   2aa42:	f010 fde6 	bl	3b612 <is_lfcr>
   2aa46:	b1f8      	cbz	r0, 2aa88 <at_parser_max_params_from_str+0x100>
   2aa48:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   2aa4a:	7811      	ldrb	r1, [r2, #0]
   2aa4c:	4693      	mov	fp, r2
   2aa4e:	4608      	mov	r0, r1
   2aa50:	3201      	adds	r2, #1
   2aa52:	f010 fdde 	bl	3b612 <is_lfcr>
   2aa56:	2800      	cmp	r0, #0
   2aa58:	d1f7      	bne.n	2aa4a <at_parser_max_params_from_str+0xc2>
   2aa5a:	b119      	cbz	r1, 2aa64 <at_parser_max_params_from_str+0xdc>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2aa5c:	292b      	cmp	r1, #43	; 0x2b
   2aa5e:	d001      	beq.n	2aa64 <at_parser_max_params_from_str+0xdc>
   2aa60:	2925      	cmp	r1, #37	; 0x25
   2aa62:	d111      	bne.n	2aa88 <at_parser_max_params_from_str+0x100>
				str += i;
   2aa64:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   2aa68:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   2aa6a:	b9a5      	cbnz	r5, 2aa96 <at_parser_max_params_from_str+0x10e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2aa6c:	781a      	ldrb	r2, [r3, #0]
	return 0;
   2aa6e:	2a00      	cmp	r2, #0
   2aa70:	bf14      	ite	ne
   2aa72:	f06f 000a 	mvnne.w	r0, #10
   2aa76:	2000      	moveq	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2aa78:	f1b9 0f00 	cmp.w	r9, #0
   2aa7c:	d001      	beq.n	2aa82 <at_parser_max_params_from_str+0xfa>
		*next_param_str = (char *)at_params_str;
   2aa7e:	f8c9 3000 	str.w	r3, [r9]
	}

	return err;
}
   2aa82:	b003      	add	sp, #12
   2aa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   2aa88:	3401      	adds	r4, #1
			oversized = true;
   2aa8a:	42bc      	cmp	r4, r7
   2aa8c:	bf08      	it	eq
   2aa8e:	2501      	moveq	r5, #1
   2aa90:	e799      	b.n	2a9c6 <at_parser_max_params_from_str+0x3e>
					oversized = true;
   2aa92:	4605      	mov	r5, r0
   2aa94:	e7e8      	b.n	2aa68 <at_parser_max_params_from_str+0xe0>
		return -E2BIG;
   2aa96:	f06f 0006 	mvn.w	r0, #6
   2aa9a:	e7ed      	b.n	2aa78 <at_parser_max_params_from_str+0xf0>
		return -EINVAL;
   2aa9c:	f06f 0015 	mvn.w	r0, #21
   2aaa0:	e7ef      	b.n	2aa82 <at_parser_max_params_from_str+0xfa>
   2aaa2:	bf00      	nop
   2aaa4:	000431d6 	.word	0x000431d6
   2aaa8:	20018c06 	.word	0x20018c06
   2aaac:	20018c05 	.word	0x20018c05

0002aab0 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   2aab0:	b538      	push	{r3, r4, r5, lr}
   2aab2:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   2aab4:	4604      	mov	r4, r0
   2aab6:	b960      	cbnz	r0, 2aad2 <at_params_get+0x22>
   2aab8:	490a      	ldr	r1, [pc, #40]	; (2aae4 <at_params_get+0x34>)
   2aaba:	232b      	movs	r3, #43	; 0x2b
   2aabc:	4a0a      	ldr	r2, [pc, #40]	; (2aae8 <at_params_get+0x38>)
   2aabe:	480b      	ldr	r0, [pc, #44]	; (2aaec <at_params_get+0x3c>)
   2aac0:	f00e fb7b 	bl	391ba <printk>
   2aac4:	480a      	ldr	r0, [pc, #40]	; (2aaf0 <at_params_get+0x40>)
   2aac6:	f00e fb78 	bl	391ba <printk>
   2aaca:	212b      	movs	r1, #43	; 0x2b
   2aacc:	4806      	ldr	r0, [pc, #24]	; (2aae8 <at_params_get+0x38>)
   2aace:	f00e fdcb 	bl	39668 <assert_post_action>

	if (index >= list->param_count) {
   2aad2:	6823      	ldr	r3, [r4, #0]
   2aad4:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2aad6:	bf8a      	itet	hi
   2aad8:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   2aada:	2000      	movls	r0, #0
	return &param[index];
   2aadc:	eb00 1005 	addhi.w	r0, r0, r5, lsl #4
}
   2aae0:	bd38      	pop	{r3, r4, r5, pc}
   2aae2:	bf00      	nop
   2aae4:	000413fe 	.word	0x000413fe
   2aae8:	000413d0 	.word	0x000413d0
   2aaec:	0003f0e1 	.word	0x0003f0e1
   2aaf0:	00041412 	.word	0x00041412

0002aaf4 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   2aaf4:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2aaf6:	4604      	mov	r4, r0
   2aaf8:	b960      	cbnz	r0, 2ab14 <at_param_size+0x20>
   2aafa:	490c      	ldr	r1, [pc, #48]	; (2ab2c <at_param_size+0x38>)
   2aafc:	2339      	movs	r3, #57	; 0x39
   2aafe:	4a0c      	ldr	r2, [pc, #48]	; (2ab30 <at_param_size+0x3c>)
   2ab00:	480c      	ldr	r0, [pc, #48]	; (2ab34 <at_param_size+0x40>)
   2ab02:	f00e fb5a 	bl	391ba <printk>
   2ab06:	480c      	ldr	r0, [pc, #48]	; (2ab38 <at_param_size+0x44>)
   2ab08:	f00e fb57 	bl	391ba <printk>
   2ab0c:	2139      	movs	r1, #57	; 0x39
   2ab0e:	4808      	ldr	r0, [pc, #32]	; (2ab30 <at_param_size+0x3c>)
   2ab10:	f00e fdaa 	bl	39668 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2ab14:	7823      	ldrb	r3, [r4, #0]
   2ab16:	2b01      	cmp	r3, #1
   2ab18:	d004      	beq.n	2ab24 <at_param_size+0x30>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2ab1a:	3b02      	subs	r3, #2
   2ab1c:	2b01      	cmp	r3, #1
   2ab1e:	d803      	bhi.n	2ab28 <at_param_size+0x34>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   2ab20:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   2ab22:	bd10      	pop	{r4, pc}
		return sizeof(uint64_t);
   2ab24:	2008      	movs	r0, #8
   2ab26:	e7fc      	b.n	2ab22 <at_param_size+0x2e>
	return 0;
   2ab28:	2000      	movs	r0, #0
   2ab2a:	e7fa      	b.n	2ab22 <at_param_size+0x2e>
   2ab2c:	00041433 	.word	0x00041433
   2ab30:	000413d0 	.word	0x000413d0
   2ab34:	0003f0e1 	.word	0x0003f0e1
   2ab38:	00041448 	.word	0x00041448

0002ab3c <at_param_clear>:
{
   2ab3c:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2ab3e:	4604      	mov	r4, r0
   2ab40:	b960      	cbnz	r0, 2ab5c <at_param_clear+0x20>
   2ab42:	490c      	ldr	r1, [pc, #48]	; (2ab74 <at_param_clear+0x38>)
   2ab44:	231d      	movs	r3, #29
   2ab46:	4a0c      	ldr	r2, [pc, #48]	; (2ab78 <at_param_clear+0x3c>)
   2ab48:	480c      	ldr	r0, [pc, #48]	; (2ab7c <at_param_clear+0x40>)
   2ab4a:	f00e fb36 	bl	391ba <printk>
   2ab4e:	480c      	ldr	r0, [pc, #48]	; (2ab80 <at_param_clear+0x44>)
   2ab50:	f00e fb33 	bl	391ba <printk>
   2ab54:	211d      	movs	r1, #29
   2ab56:	4808      	ldr	r0, [pc, #32]	; (2ab78 <at_param_clear+0x3c>)
   2ab58:	f00e fd86 	bl	39668 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2ab5c:	7823      	ldrb	r3, [r4, #0]
   2ab5e:	3b02      	subs	r3, #2
   2ab60:	2b01      	cmp	r3, #1
   2ab62:	d802      	bhi.n	2ab6a <at_param_clear+0x2e>
		k_free(param->value.str_val);
   2ab64:	68a0      	ldr	r0, [r4, #8]
   2ab66:	f012 fd43 	bl	3d5f0 <k_free>
	param->value.int_val = 0;
   2ab6a:	2200      	movs	r2, #0
   2ab6c:	2300      	movs	r3, #0
   2ab6e:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   2ab72:	bd10      	pop	{r4, pc}
   2ab74:	00041433 	.word	0x00041433
   2ab78:	000413d0 	.word	0x000413d0
   2ab7c:	0003f0e1 	.word	0x0003f0e1
   2ab80:	00041448 	.word	0x00041448

0002ab84 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   2ab84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (list == NULL || list->params == NULL) {
   2ab88:	4604      	mov	r4, r0
   2ab8a:	b150      	cbz	r0, 2aba2 <at_params_list_clear+0x1e>
   2ab8c:	6843      	ldr	r3, [r0, #4]
   2ab8e:	b143      	cbz	r3, 2aba2 <at_params_list_clear+0x1e>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2ab90:	2600      	movs	r6, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2ab92:	4f12      	ldr	r7, [pc, #72]	; (2abdc <at_params_list_clear+0x58>)
   2ab94:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2abe0 <at_params_list_clear+0x5c>
   2ab98:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2abe4 <at_params_list_clear+0x60>
	for (size_t i = 0; i < list->param_count; ++i) {
   2ab9c:	6823      	ldr	r3, [r4, #0]
   2ab9e:	429e      	cmp	r6, r3
   2aba0:	d301      	bcc.n	2aba6 <at_params_list_clear+0x22>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2aba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		at_param_clear(&params[i]);
   2aba6:	6865      	ldr	r5, [r4, #4]
   2aba8:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   2abac:	4628      	mov	r0, r5
   2abae:	f7ff ffc5 	bl	2ab3c <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2abb2:	b965      	cbnz	r5, 2abce <at_params_list_clear+0x4a>
   2abb4:	4641      	mov	r1, r8
   2abb6:	2314      	movs	r3, #20
   2abb8:	463a      	mov	r2, r7
   2abba:	4648      	mov	r0, r9
   2abbc:	f00e fafd 	bl	391ba <printk>
   2abc0:	4809      	ldr	r0, [pc, #36]	; (2abe8 <at_params_list_clear+0x64>)
   2abc2:	f00e fafa 	bl	391ba <printk>
   2abc6:	2114      	movs	r1, #20
   2abc8:	4638      	mov	r0, r7
   2abca:	f00e fd4d 	bl	39668 <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   2abce:	2210      	movs	r2, #16
   2abd0:	2100      	movs	r1, #0
   2abd2:	4628      	mov	r0, r5
   2abd4:	f012 fd57 	bl	3d686 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   2abd8:	3601      	adds	r6, #1
   2abda:	e7df      	b.n	2ab9c <at_params_list_clear+0x18>
   2abdc:	000413d0 	.word	0x000413d0
   2abe0:	00041433 	.word	0x00041433
   2abe4:	0003f0e1 	.word	0x0003f0e1
   2abe8:	00041448 	.word	0x00041448

0002abec <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   2abec:	b530      	push	{r4, r5, lr}
	int err;
	char buf[AT_CEREG_RESPONSE_MAX_LEN] = {0};
   2abee:	2400      	movs	r4, #0
{
   2abf0:	4605      	mov	r5, r0
   2abf2:	b097      	sub	sp, #92	; 0x5c
	char buf[AT_CEREG_RESPONSE_MAX_LEN] = {0};
   2abf4:	224c      	movs	r2, #76	; 0x4c
   2abf6:	4621      	mov	r1, r4
   2abf8:	a803      	add	r0, sp, #12
   2abfa:	9402      	str	r4, [sp, #8]
   2abfc:	f012 fd43 	bl	3d686 <memset>

	if (status == NULL) {
   2ac00:	2d00      	cmp	r5, #0
   2ac02:	d03c      	beq.n	2ac7e <lte_lc_nw_reg_status_get+0x92>
		return -EINVAL;
	}

	/* Enable network registration status with level 5 */
	err = at_cmd_write(AT_CEREG_5, NULL, 0, NULL);
   2ac04:	4623      	mov	r3, r4
   2ac06:	4622      	mov	r2, r4
   2ac08:	4621      	mov	r1, r4
   2ac0a:	481e      	ldr	r0, [pc, #120]	; (2ac84 <lte_lc_nw_reg_status_get+0x98>)
   2ac0c:	f7ff fbaa 	bl	2a364 <at_cmd_write>
	if (err) {
   2ac10:	4604      	mov	r4, r0
   2ac12:	b168      	cbz	r0, 2ac30 <lte_lc_nw_reg_status_get+0x44>
   2ac14:	4a1c      	ldr	r2, [pc, #112]	; (2ac88 <lte_lc_nw_reg_status_get+0x9c>)
   2ac16:	4b1d      	ldr	r3, [pc, #116]	; (2ac8c <lte_lc_nw_reg_status_get+0xa0>)
		LOG_ERR("Could not set CEREG level 5, error: %d", err);
   2ac18:	4601      	mov	r1, r0
   2ac1a:	1ad2      	subs	r2, r2, r3
   2ac1c:	08d2      	lsrs	r2, r2, #3
   2ac1e:	0192      	lsls	r2, r2, #6
   2ac20:	481b      	ldr	r0, [pc, #108]	; (2ac90 <lte_lc_nw_reg_status_get+0xa4>)
   2ac22:	f042 0201 	orr.w	r2, r2, #1
		return err;
	}

	err = parse_cereg(buf, false, status, NULL, NULL, NULL);
	if (err) {
		LOG_ERR("Could not parse registration status, err: %d", err);
   2ac26:	f00e fd75 	bl	39714 <log_1>
		return err;
	}

	return err;
}
   2ac2a:	4620      	mov	r0, r4
   2ac2c:	b017      	add	sp, #92	; 0x5c
   2ac2e:	bd30      	pop	{r4, r5, pc}
	err = at_cmd_write(AT_CEREG_READ, buf, sizeof(buf), NULL);
   2ac30:	4603      	mov	r3, r0
   2ac32:	2250      	movs	r2, #80	; 0x50
   2ac34:	4817      	ldr	r0, [pc, #92]	; (2ac94 <lte_lc_nw_reg_status_get+0xa8>)
   2ac36:	a902      	add	r1, sp, #8
   2ac38:	f7ff fb94 	bl	2a364 <at_cmd_write>
	if (err) {
   2ac3c:	4604      	mov	r4, r0
   2ac3e:	b148      	cbz	r0, 2ac54 <lte_lc_nw_reg_status_get+0x68>
   2ac40:	4a11      	ldr	r2, [pc, #68]	; (2ac88 <lte_lc_nw_reg_status_get+0x9c>)
   2ac42:	4b12      	ldr	r3, [pc, #72]	; (2ac8c <lte_lc_nw_reg_status_get+0xa0>)
		LOG_ERR("Could not get CEREG response, error: %d", err);
   2ac44:	4601      	mov	r1, r0
   2ac46:	1ad2      	subs	r2, r2, r3
   2ac48:	08d2      	lsrs	r2, r2, #3
   2ac4a:	0192      	lsls	r2, r2, #6
   2ac4c:	4812      	ldr	r0, [pc, #72]	; (2ac98 <lte_lc_nw_reg_status_get+0xac>)
   2ac4e:	f042 0201 	orr.w	r2, r2, #1
   2ac52:	e7e8      	b.n	2ac26 <lte_lc_nw_reg_status_get+0x3a>
	err = parse_cereg(buf, false, status, NULL, NULL, NULL);
   2ac54:	4603      	mov	r3, r0
   2ac56:	4601      	mov	r1, r0
   2ac58:	e9cd 0000 	strd	r0, r0, [sp]
   2ac5c:	462a      	mov	r2, r5
   2ac5e:	a802      	add	r0, sp, #8
   2ac60:	f000 f8d6 	bl	2ae10 <parse_cereg>
	if (err) {
   2ac64:	4604      	mov	r4, r0
   2ac66:	2800      	cmp	r0, #0
   2ac68:	d0df      	beq.n	2ac2a <lte_lc_nw_reg_status_get+0x3e>
   2ac6a:	4a07      	ldr	r2, [pc, #28]	; (2ac88 <lte_lc_nw_reg_status_get+0x9c>)
   2ac6c:	4b07      	ldr	r3, [pc, #28]	; (2ac8c <lte_lc_nw_reg_status_get+0xa0>)
		LOG_ERR("Could not parse registration status, err: %d", err);
   2ac6e:	4601      	mov	r1, r0
   2ac70:	1ad2      	subs	r2, r2, r3
   2ac72:	08d2      	lsrs	r2, r2, #3
   2ac74:	0192      	lsls	r2, r2, #6
   2ac76:	4809      	ldr	r0, [pc, #36]	; (2ac9c <lte_lc_nw_reg_status_get+0xb0>)
   2ac78:	f042 0201 	orr.w	r2, r2, #1
   2ac7c:	e7d3      	b.n	2ac26 <lte_lc_nw_reg_status_get+0x3a>
		return -EINVAL;
   2ac7e:	f06f 0415 	mvn.w	r4, #21
   2ac82:	e7d2      	b.n	2ac2a <lte_lc_nw_reg_status_get+0x3e>
   2ac84:	00041464 	.word	0x00041464
   2ac88:	0003e500 	.word	0x0003e500
   2ac8c:	0003e468 	.word	0x0003e468
   2ac90:	00041539 	.word	0x00041539
   2ac94:	0004148e 	.word	0x0004148e
   2ac98:	00041498 	.word	0x00041498
   2ac9c:	00041560 	.word	0x00041560

0002aca0 <response_is_valid>:
 *
 * @return True if the provided buffer and check are equal, false otherwise.
 */
bool response_is_valid(const char *response, size_t response_len,
			      const char *check)
{
   2aca0:	b570      	push	{r4, r5, r6, lr}
   2aca2:	460e      	mov	r6, r1
   2aca4:	4614      	mov	r4, r2
	if ((response == NULL) || (check == NULL)) {
   2aca6:	4605      	mov	r5, r0
   2aca8:	b100      	cbz	r0, 2acac <response_is_valid+0xc>
   2acaa:	b95a      	cbnz	r2, 2acc4 <response_is_valid+0x24>
   2acac:	490c      	ldr	r1, [pc, #48]	; (2ace0 <response_is_valid+0x40>)
   2acae:	4b0d      	ldr	r3, [pc, #52]	; (2ace4 <response_is_valid+0x44>)
		LOG_ERR("Invalid pointer provided");
   2acb0:	480d      	ldr	r0, [pc, #52]	; (2ace8 <response_is_valid+0x48>)
   2acb2:	1ac9      	subs	r1, r1, r3
   2acb4:	08c9      	lsrs	r1, r1, #3
   2acb6:	0189      	lsls	r1, r1, #6
   2acb8:	f041 0101 	orr.w	r1, r1, #1
   2acbc:	f00e fd1d 	bl	396fa <log_0>
		return false;
   2acc0:	2000      	movs	r0, #0
	    (memcmp(response, check, response_len) != 0)) {
		return false;
	}

	return true;
}
   2acc2:	bd70      	pop	{r4, r5, r6, pc}
	if ((response_len < strlen(check)) ||
   2acc4:	4610      	mov	r0, r2
   2acc6:	f7f6 fcd2 	bl	2166e <strlen>
   2acca:	4286      	cmp	r6, r0
   2accc:	d3f8      	bcc.n	2acc0 <response_is_valid+0x20>
	    (memcmp(response, check, response_len) != 0)) {
   2acce:	4632      	mov	r2, r6
   2acd0:	4621      	mov	r1, r4
   2acd2:	4628      	mov	r0, r5
   2acd4:	f012 fcba 	bl	3d64c <memcmp>
	if ((response_len < strlen(check)) ||
   2acd8:	fab0 f080 	clz	r0, r0
   2acdc:	0940      	lsrs	r0, r0, #5
   2acde:	e7f0      	b.n	2acc2 <response_is_valid+0x22>
   2ace0:	0003e508 	.word	0x0003e508
   2ace4:	0003e468 	.word	0x0003e468
   2ace8:	00041601 	.word	0x00041601

0002acec <parse_psm>:
	int err;
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
				    AT_CEREG_READ_TAU_INDEX;
	size_t active_time_idx = is_notif ? AT_CEREG_ACTIVE_TIME_INDEX :
					    AT_CEREG_READ_ACTIVE_TIME_INDEX;
	char timer_str[9] = {0};
   2acec:	2300      	movs	r3, #0
{
   2acee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2acf2:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   2acf4:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2acf8:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   2acfc:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   2acfe:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2ad00:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   2ad02:	9302      	str	r3, [sp, #8]
{
   2ad04:	4615      	mov	r5, r2
	 */
	static const uint32_t t3412_lookup[8] = {600, 3600, 36000, 2, 30, 60,
					      1152000, 0};

	/* Parse periodic TAU string */
	err = at_params_string_get(at_params,
   2ad06:	bf0c      	ite	eq
   2ad08:	2109      	moveq	r1, #9
   2ad0a:	2108      	movne	r1, #8
   2ad0c:	446b      	add	r3, sp
   2ad0e:	aa03      	add	r2, sp, #12
{
   2ad10:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2ad12:	bf0c      	ite	eq
   2ad14:	2708      	moveq	r7, #8
   2ad16:	2707      	movne	r7, #7
	err = at_params_string_get(at_params,
   2ad18:	f010 fd4d 	bl	3b7b6 <at_params_string_get>
				   tau_idx,
				   timer_str,
				   &timer_str_len);
	if (err) {
   2ad1c:	4604      	mov	r4, r0
   2ad1e:	b170      	cbz	r0, 2ad3e <parse_psm+0x52>
   2ad20:	4a34      	ldr	r2, [pc, #208]	; (2adf4 <parse_psm+0x108>)
   2ad22:	4b35      	ldr	r3, [pc, #212]	; (2adf8 <parse_psm+0x10c>)
	err = at_params_string_get(at_params,
				   active_time_idx,
				   timer_str,
				   &timer_str_len);
	if (err) {
		LOG_ERR("Could not get TAU, error: %d", err);
   2ad24:	4621      	mov	r1, r4
   2ad26:	1ad2      	subs	r2, r2, r3
   2ad28:	08d2      	lsrs	r2, r2, #3
   2ad2a:	0192      	lsls	r2, r2, #6
   2ad2c:	4833      	ldr	r0, [pc, #204]	; (2adfc <parse_psm+0x110>)
   2ad2e:	f042 0201 	orr.w	r2, r2, #1
   2ad32:	f00e fcef 	bl	39714 <log_1>

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   2ad36:	4620      	mov	r0, r4
   2ad38:	b006      	add	sp, #24
   2ad3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   2ad3e:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2ad40:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2ad42:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2ad46:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2ad48:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2ad4a:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2ad4c:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2ad50:	f00d fb50 	bl	383f4 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   2ad54:	2807      	cmp	r0, #7
   2ad56:	d90c      	bls.n	2ad72 <parse_psm+0x86>
   2ad58:	4926      	ldr	r1, [pc, #152]	; (2adf4 <parse_psm+0x108>)
   2ad5a:	4b27      	ldr	r3, [pc, #156]	; (2adf8 <parse_psm+0x10c>)
		LOG_ERR("Unable to parse periodic TAU string");
   2ad5c:	4828      	ldr	r0, [pc, #160]	; (2ae00 <parse_psm+0x114>)
   2ad5e:	1ac9      	subs	r1, r1, r3
   2ad60:	08c9      	lsrs	r1, r1, #3
   2ad62:	0189      	lsls	r1, r1, #6
   2ad64:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to parse active time string");
   2ad68:	f00e fcc7 	bl	396fa <log_0>
		return err;
   2ad6c:	f06f 0415 	mvn.w	r4, #21
   2ad70:	e7e1      	b.n	2ad36 <parse_psm+0x4a>
	timer_unit = t3412_lookup[lut_idx];
   2ad72:	4b24      	ldr	r3, [pc, #144]	; (2ae04 <parse_psm+0x118>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2ad74:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   2ad76:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2ad7a:	4621      	mov	r1, r4
   2ad7c:	f10d 000f 	add.w	r0, sp, #15
   2ad80:	f00d fb38 	bl	383f4 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2ad84:	f1b8 0f00 	cmp.w	r8, #0
   2ad88:	d021      	beq.n	2adce <parse_psm+0xe2>
   2ad8a:	fb08 f000 	mul.w	r0, r8, r0
   2ad8e:	6028      	str	r0, [r5, #0]
	err = at_params_string_get(at_params,
   2ad90:	4639      	mov	r1, r7
   2ad92:	4630      	mov	r0, r6
   2ad94:	ab02      	add	r3, sp, #8
   2ad96:	aa03      	add	r2, sp, #12
   2ad98:	f010 fd0d 	bl	3b7b6 <at_params_string_get>
	if (err) {
   2ad9c:	4604      	mov	r4, r0
   2ad9e:	2800      	cmp	r0, #0
   2ada0:	d1be      	bne.n	2ad20 <parse_psm+0x34>
	memcpy(unit_str, timer_str, unit_str_len);
   2ada2:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2ada4:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2ada6:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2adaa:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2adac:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2adae:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2adb0:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2adb4:	f00d fb1e 	bl	383f4 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   2adb8:	2807      	cmp	r0, #7
   2adba:	d90b      	bls.n	2add4 <parse_psm+0xe8>
   2adbc:	490d      	ldr	r1, [pc, #52]	; (2adf4 <parse_psm+0x108>)
   2adbe:	4b0e      	ldr	r3, [pc, #56]	; (2adf8 <parse_psm+0x10c>)
		LOG_ERR("Unable to parse active time string");
   2adc0:	4811      	ldr	r0, [pc, #68]	; (2ae08 <parse_psm+0x11c>)
   2adc2:	1ac9      	subs	r1, r1, r3
   2adc4:	08c9      	lsrs	r1, r1, #3
   2adc6:	0189      	lsls	r1, r1, #6
   2adc8:	f041 0101 	orr.w	r1, r1, #1
   2adcc:	e7cc      	b.n	2ad68 <parse_psm+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2adce:	f04f 30ff 	mov.w	r0, #4294967295
   2add2:	e7dc      	b.n	2ad8e <parse_psm+0xa2>
	timer_unit = t3324_lookup[lut_idx];
   2add4:	4b0d      	ldr	r3, [pc, #52]	; (2ae0c <parse_psm+0x120>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2add6:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   2add8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2addc:	4621      	mov	r1, r4
   2adde:	f10d 000f 	add.w	r0, sp, #15
   2ade2:	f00d fb07 	bl	383f4 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2ade6:	b116      	cbz	r6, 2adee <parse_psm+0x102>
   2ade8:	4370      	muls	r0, r6
   2adea:	6068      	str	r0, [r5, #4]
	return 0;
   2adec:	e7a3      	b.n	2ad36 <parse_psm+0x4a>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2adee:	f04f 30ff 	mov.w	r0, #4294967295
   2adf2:	e7fa      	b.n	2adea <parse_psm+0xfe>
   2adf4:	0003e508 	.word	0x0003e508
   2adf8:	0003e468 	.word	0x0003e468
   2adfc:	00041728 	.word	0x00041728
   2ae00:	00041745 	.word	0x00041745
   2ae04:	0003eb30 	.word	0x0003eb30
   2ae08:	00041769 	.word	0x00041769
   2ae0c:	0003eb10 	.word	0x0003eb10

0002ae10 <parse_cereg>:
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode,
		struct lte_lc_psm_cfg *psm_cfg)
{
   2ae10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ae14:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2ae16:	2300      	movs	r3, #0
{
   2ae18:	b08a      	sub	sp, #40	; 0x28
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2ae1a:	9303      	str	r3, [sp, #12]
   2ae1c:	f8ad 3010 	strh.w	r3, [sp, #16]
   2ae20:	f88d 3012 	strb.w	r3, [sp, #18]
{
   2ae24:	4617      	mov	r7, r2
   2ae26:	e9dd a812 	ldrd	sl, r8, [sp, #72]	; 0x48
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   2ae2a:	2207      	movs	r2, #7
   2ae2c:	2309      	movs	r3, #9
{
   2ae2e:	4605      	mov	r5, r0
   2ae30:	4689      	mov	r9, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   2ae32:	a805      	add	r0, sp, #20
   2ae34:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   2ae36:	e9cd 2300 	strd	r2, r3, [sp]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   2ae3a:	f010 fc04 	bl	3b646 <at_params_list_init>
	if (err) {
   2ae3e:	4604      	mov	r4, r0
   2ae40:	b170      	cbz	r0, 2ae60 <parse_cereg+0x50>
   2ae42:	4a87      	ldr	r2, [pc, #540]	; (2b060 <parse_cereg+0x250>)
   2ae44:	4b87      	ldr	r3, [pc, #540]	; (2b064 <parse_cereg+0x254>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   2ae46:	4601      	mov	r1, r0
   2ae48:	1ad2      	subs	r2, r2, r3
   2ae4a:	08d2      	lsrs	r2, r2, #3
   2ae4c:	0192      	lsls	r2, r2, #6
   2ae4e:	4886      	ldr	r0, [pc, #536]	; (2b068 <parse_cereg+0x258>)
   2ae50:	f042 0201 	orr.w	r2, r2, #1
   2ae54:	f00e fc5e 	bl	39714 <log_1>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2ae58:	4620      	mov	r0, r4
   2ae5a:	b00a      	add	sp, #40	; 0x28
   2ae5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   2ae60:	4601      	mov	r1, r0
   2ae62:	aa05      	add	r2, sp, #20
   2ae64:	4628      	mov	r0, r5
   2ae66:	f010 fbeb 	bl	3b640 <at_parser_params_from_str>
	if (err) {
   2ae6a:	4604      	mov	r4, r0
   2ae6c:	b170      	cbz	r0, 2ae8c <parse_cereg+0x7c>
   2ae6e:	4a7c      	ldr	r2, [pc, #496]	; (2b060 <parse_cereg+0x250>)
   2ae70:	4b7c      	ldr	r3, [pc, #496]	; (2b064 <parse_cereg+0x254>)
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   2ae72:	4601      	mov	r1, r0
   2ae74:	1ad2      	subs	r2, r2, r3
   2ae76:	08d2      	lsrs	r2, r2, #3
   2ae78:	0192      	lsls	r2, r2, #6
   2ae7a:	487c      	ldr	r0, [pc, #496]	; (2b06c <parse_cereg+0x25c>)
   2ae7c:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Could not get response prefix, error: %d", err);
   2ae80:	f00e fc48 	bl	39714 <log_1>
	at_params_list_free(&resp_list);
   2ae84:	a805      	add	r0, sp, #20
   2ae86:	f010 fbf1 	bl	3b66c <at_params_list_free>
	return err;
   2ae8a:	e7e5      	b.n	2ae58 <parse_cereg+0x48>
	err = at_params_string_get(&resp_list,
   2ae8c:	4601      	mov	r1, r0
   2ae8e:	466b      	mov	r3, sp
   2ae90:	aa03      	add	r2, sp, #12
   2ae92:	a805      	add	r0, sp, #20
   2ae94:	f010 fc8f 	bl	3b7b6 <at_params_string_get>
	if (err) {
   2ae98:	4604      	mov	r4, r0
   2ae9a:	b148      	cbz	r0, 2aeb0 <parse_cereg+0xa0>
   2ae9c:	4a70      	ldr	r2, [pc, #448]	; (2b060 <parse_cereg+0x250>)
   2ae9e:	4b71      	ldr	r3, [pc, #452]	; (2b064 <parse_cereg+0x254>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   2aea0:	4601      	mov	r1, r0
   2aea2:	1ad2      	subs	r2, r2, r3
   2aea4:	08d2      	lsrs	r2, r2, #3
   2aea6:	0192      	lsls	r2, r2, #6
   2aea8:	4871      	ldr	r0, [pc, #452]	; (2b070 <parse_cereg+0x260>)
   2aeaa:	f042 0201 	orr.w	r2, r2, #1
   2aeae:	e7e7      	b.n	2ae80 <parse_cereg+0x70>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2aeb0:	4a70      	ldr	r2, [pc, #448]	; (2b074 <parse_cereg+0x264>)
   2aeb2:	9900      	ldr	r1, [sp, #0]
   2aeb4:	a803      	add	r0, sp, #12
   2aeb6:	f7ff fef3 	bl	2aca0 <response_is_valid>
   2aeba:	2800      	cmp	r0, #0
   2aebc:	d0e2      	beq.n	2ae84 <parse_cereg+0x74>
	err = at_params_int_get(list, reg_status_index, &reg_status);
   2aebe:	aa07      	add	r2, sp, #28
   2aec0:	f1c9 0102 	rsb	r1, r9, #2
   2aec4:	a805      	add	r0, sp, #20
   2aec6:	f010 fc59 	bl	3b77c <at_params_int_get>
	if (err) {
   2aeca:	1e05      	subs	r5, r0, #0
   2aecc:	d16e      	bne.n	2afac <parse_cereg+0x19c>
	switch (reg_status) {
   2aece:	9d07      	ldr	r5, [sp, #28]
   2aed0:	2d08      	cmp	r5, #8
   2aed2:	d05b      	beq.n	2af8c <parse_cereg+0x17c>
   2aed4:	dc1b      	bgt.n	2af0e <parse_cereg+0xfe>
   2aed6:	2d05      	cmp	r5, #5
   2aed8:	d932      	bls.n	2af40 <parse_cereg+0x130>
   2aeda:	4b62      	ldr	r3, [pc, #392]	; (2b064 <parse_cereg+0x254>)
   2aedc:	4a60      	ldr	r2, [pc, #384]	; (2b060 <parse_cereg+0x250>)
		LOG_ERR("Invalid network registration status: %d", reg_status);
   2aede:	4629      	mov	r1, r5
   2aee0:	1ad2      	subs	r2, r2, r3
   2aee2:	08d2      	lsrs	r2, r2, #3
   2aee4:	0192      	lsls	r2, r2, #6
   2aee6:	4864      	ldr	r0, [pc, #400]	; (2b078 <parse_cereg+0x268>)
   2aee8:	f042 0201 	orr.w	r2, r2, #1
   2aeec:	f00e fc12 	bl	39714 <log_1>
		return -EINVAL;
   2aef0:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   2aef4:	4629      	mov	r1, r5
   2aef6:	4a5a      	ldr	r2, [pc, #360]	; (2b060 <parse_cereg+0x250>)
   2aef8:	4b5a      	ldr	r3, [pc, #360]	; (2b064 <parse_cereg+0x254>)
   2aefa:	4860      	ldr	r0, [pc, #384]	; (2b07c <parse_cereg+0x26c>)
   2aefc:	1ad2      	subs	r2, r2, r3
   2aefe:	08d2      	lsrs	r2, r2, #3
   2af00:	0192      	lsls	r2, r2, #6
   2af02:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   2af06:	f00e fc05 	bl	39714 <log_1>
			goto clean_exit;
   2af0a:	462c      	mov	r4, r5
   2af0c:	e7ba      	b.n	2ae84 <parse_cereg+0x74>
	switch (reg_status) {
   2af0e:	2d5a      	cmp	r5, #90	; 0x5a
   2af10:	d1e3      	bne.n	2aeda <parse_cereg+0xca>
	if (reg_status) {
   2af12:	b107      	cbz	r7, 2af16 <parse_cereg+0x106>
		*reg_status = status;
   2af14:	703d      	strb	r5, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2af16:	2e00      	cmp	r6, #0
   2af18:	f040 8096 	bne.w	2b048 <parse_cereg+0x238>
	if (lte_mode) {
   2af1c:	f1ba 0f00 	cmp.w	sl, #0
   2af20:	d039      	beq.n	2af96 <parse_cereg+0x186>
		cell->tac = UINT32_MAX;
   2af22:	255a      	movs	r5, #90	; 0x5a
		err = at_params_int_get(&resp_list,
   2af24:	aa02      	add	r2, sp, #8
   2af26:	f1c9 0105 	rsb	r1, r9, #5
   2af2a:	a805      	add	r0, sp, #20
   2af2c:	f010 fc26 	bl	3b77c <at_params_int_get>
		if (err) {
   2af30:	2800      	cmp	r0, #0
   2af32:	f040 8092 	bne.w	2b05a <parse_cereg+0x24a>
			*lte_mode = mode;
   2af36:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   2af3a:	f88a 3000 	strb.w	r3, [sl]
   2af3e:	e005      	b.n	2af4c <parse_cereg+0x13c>
	if (reg_status) {
   2af40:	bb17      	cbnz	r7, 2af88 <parse_cereg+0x178>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2af42:	2e00      	cmp	r6, #0
   2af44:	d139      	bne.n	2afba <parse_cereg+0x1aa>
	if (lte_mode) {
   2af46:	f1ba 0f00 	cmp.w	sl, #0
   2af4a:	d1eb      	bne.n	2af24 <parse_cereg+0x114>
	if (psm_cfg && ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2af4c:	f1b8 0f00 	cmp.w	r8, #0
   2af50:	d098      	beq.n	2ae84 <parse_cereg+0x74>
   2af52:	f025 0504 	bic.w	r5, r5, #4
   2af56:	2d01      	cmp	r5, #1
   2af58:	d121      	bne.n	2af9e <parse_cereg+0x18e>
	     (at_params_valid_count_get(&resp_list) > AT_CEREG_TAU_INDEX)) {
   2af5a:	a805      	add	r0, sp, #20
   2af5c:	f010 fc52 	bl	3b804 <at_params_valid_count_get>
	    (status == LTE_LC_NW_REG_REGISTERED_ROAMING)) &&
   2af60:	2808      	cmp	r0, #8
   2af62:	d91c      	bls.n	2af9e <parse_cereg+0x18e>
		err = parse_psm(&resp_list, is_notif, psm_cfg);
   2af64:	4642      	mov	r2, r8
   2af66:	4649      	mov	r1, r9
   2af68:	a805      	add	r0, sp, #20
   2af6a:	f7ff febf 	bl	2acec <parse_psm>
		if (err) {
   2af6e:	4605      	mov	r5, r0
   2af70:	2800      	cmp	r0, #0
   2af72:	d087      	beq.n	2ae84 <parse_cereg+0x74>
   2af74:	4a3a      	ldr	r2, [pc, #232]	; (2b060 <parse_cereg+0x250>)
   2af76:	4b3b      	ldr	r3, [pc, #236]	; (2b064 <parse_cereg+0x254>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   2af78:	4601      	mov	r1, r0
   2af7a:	1ad2      	subs	r2, r2, r3
   2af7c:	08d2      	lsrs	r2, r2, #3
   2af7e:	0192      	lsls	r2, r2, #6
   2af80:	483f      	ldr	r0, [pc, #252]	; (2b080 <parse_cereg+0x270>)
   2af82:	f042 0201 	orr.w	r2, r2, #1
   2af86:	e7be      	b.n	2af06 <parse_cereg+0xf6>
		*reg_status = status;
   2af88:	703d      	strb	r5, [r7, #0]
   2af8a:	e7da      	b.n	2af42 <parse_cereg+0x132>
	if (reg_status) {
   2af8c:	b967      	cbnz	r7, 2afa8 <parse_cereg+0x198>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2af8e:	b9a6      	cbnz	r6, 2afba <parse_cereg+0x1aa>
	if (lte_mode) {
   2af90:	f1ba 0f00 	cmp.w	sl, #0
   2af94:	d1c6      	bne.n	2af24 <parse_cereg+0x114>
	if (psm_cfg && ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2af96:	f1b8 0f00 	cmp.w	r8, #0
   2af9a:	f43f af73 	beq.w	2ae84 <parse_cereg+0x74>
		psm_cfg->tau = -1;
   2af9e:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
   2afa2:	e9c8 3300 	strd	r3, r3, [r8]
   2afa6:	e76d      	b.n	2ae84 <parse_cereg+0x74>
		*reg_status = status;
   2afa8:	703d      	strb	r5, [r7, #0]
   2afaa:	e7f0      	b.n	2af8e <parse_cereg+0x17e>
	if (status < 0) {
   2afac:	dba2      	blt.n	2aef4 <parse_cereg+0xe4>
	if (reg_status) {
   2afae:	b107      	cbz	r7, 2afb2 <parse_cereg+0x1a2>
		*reg_status = status;
   2afb0:	703d      	strb	r5, [r7, #0]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2afb2:	2e00      	cmp	r6, #0
   2afb4:	d0c7      	beq.n	2af46 <parse_cereg+0x136>
   2afb6:	2d5a      	cmp	r5, #90	; 0x5a
   2afb8:	d046      	beq.n	2b048 <parse_cereg+0x238>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   2afba:	a805      	add	r0, sp, #20
   2afbc:	f010 fc22 	bl	3b804 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2afc0:	2803      	cmp	r0, #3
   2afc2:	d946      	bls.n	2b052 <parse_cereg+0x242>
		err = at_params_string_get(
   2afc4:	ab01      	add	r3, sp, #4
   2afc6:	aa07      	add	r2, sp, #28
   2afc8:	f1c9 0103 	rsb	r1, r9, #3
   2afcc:	a805      	add	r0, sp, #20
   2afce:	f010 fbf2 	bl	3b7b6 <at_params_string_get>
		if (err) {
   2afd2:	4607      	mov	r7, r0
   2afd4:	b160      	cbz	r0, 2aff0 <parse_cereg+0x1e0>
   2afd6:	4a22      	ldr	r2, [pc, #136]	; (2b060 <parse_cereg+0x250>)
   2afd8:	4b22      	ldr	r3, [pc, #136]	; (2b064 <parse_cereg+0x254>)
			LOG_ERR("Could not get tracking area code, error: %d", err);
   2afda:	4601      	mov	r1, r0
   2afdc:	1ad2      	subs	r2, r2, r3
   2afde:	08d2      	lsrs	r2, r2, #3
   2afe0:	0192      	lsls	r2, r2, #6
   2afe2:	4828      	ldr	r0, [pc, #160]	; (2b084 <parse_cereg+0x274>)
   2afe4:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Could not get cell ID, error: %d", err);
   2afe8:	f00e fb94 	bl	39714 <log_1>
			goto clean_exit;
   2afec:	463c      	mov	r4, r7
   2afee:	e749      	b.n	2ae84 <parse_cereg+0x74>
		str_buf[len] = '\0';
   2aff0:	9b01      	ldr	r3, [sp, #4]
		cell->tac = strtoul(str_buf, NULL, 16);
   2aff2:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   2aff4:	3328      	adds	r3, #40	; 0x28
   2aff6:	446b      	add	r3, sp
   2aff8:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   2affc:	2210      	movs	r2, #16
   2affe:	a807      	add	r0, sp, #28
   2b000:	f00d f9f8 	bl	383f4 <strtoul>
		len = sizeof(str_buf) - 1;
   2b004:	2309      	movs	r3, #9
		cell->tac = strtoul(str_buf, NULL, 16);
   2b006:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   2b008:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   2b00a:	aa07      	add	r2, sp, #28
   2b00c:	ab01      	add	r3, sp, #4
   2b00e:	f1c9 0104 	rsb	r1, r9, #4
   2b012:	a805      	add	r0, sp, #20
   2b014:	f010 fbcf 	bl	3b7b6 <at_params_string_get>
		if (err) {
   2b018:	4607      	mov	r7, r0
   2b01a:	b148      	cbz	r0, 2b030 <parse_cereg+0x220>
   2b01c:	4a10      	ldr	r2, [pc, #64]	; (2b060 <parse_cereg+0x250>)
   2b01e:	4b11      	ldr	r3, [pc, #68]	; (2b064 <parse_cereg+0x254>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   2b020:	4601      	mov	r1, r0
   2b022:	1ad2      	subs	r2, r2, r3
   2b024:	08d2      	lsrs	r2, r2, #3
   2b026:	0192      	lsls	r2, r2, #6
   2b028:	4817      	ldr	r0, [pc, #92]	; (2b088 <parse_cereg+0x278>)
   2b02a:	f042 0201 	orr.w	r2, r2, #1
   2b02e:	e7db      	b.n	2afe8 <parse_cereg+0x1d8>
		str_buf[len] = '\0';
   2b030:	9b01      	ldr	r3, [sp, #4]
		cell->id = strtoul(str_buf, NULL, 16);
   2b032:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   2b034:	3328      	adds	r3, #40	; 0x28
   2b036:	446b      	add	r3, sp
   2b038:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   2b03c:	2210      	movs	r2, #16
   2b03e:	a807      	add	r0, sp, #28
   2b040:	f00d f9d8 	bl	383f4 <strtoul>
   2b044:	60b0      	str	r0, [r6, #8]
   2b046:	e77e      	b.n	2af46 <parse_cereg+0x136>
		cell->tac = UINT32_MAX;
   2b048:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
   2b04c:	e9c6 3302 	strd	r3, r3, [r6, #8]
   2b050:	e764      	b.n	2af1c <parse_cereg+0x10c>
		cell->tac = UINT32_MAX;
   2b052:	f04f 30ff 	mov.w	r0, #4294967295
   2b056:	60f0      	str	r0, [r6, #12]
		cell->id = UINT32_MAX;
   2b058:	e7f4      	b.n	2b044 <parse_cereg+0x234>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   2b05a:	2300      	movs	r3, #0
   2b05c:	e76d      	b.n	2af3a <parse_cereg+0x12a>
   2b05e:	bf00      	nop
   2b060:	0003e508 	.word	0x0003e508
   2b064:	0003e468 	.word	0x0003e468
   2b068:	000414c0 	.word	0x000414c0
   2b06c:	000414e9 	.word	0x000414e9
   2b070:	0004178c 	.word	0x0004178c
   2b074:	0004158d 	.word	0x0004158d
   2b078:	000417b5 	.word	0x000417b5
   2b07c:	000417dd 	.word	0x000417dd
   2b080:	00041857 	.word	0x00041857
   2b084:	0004180a 	.word	0x0004180a
   2b088:	00041836 	.word	0x00041836

0002b08c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2b08c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   2b08e:	f7f9 f87d 	bl	2418c <z_impl_log_panic>
   2b092:	4b06      	ldr	r3, [pc, #24]	; (2b0ac <k_sys_fatal_error_handler+0x20>)
   2b094:	4906      	ldr	r1, [pc, #24]	; (2b0b0 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2b096:	4807      	ldr	r0, [pc, #28]	; (2b0b4 <k_sys_fatal_error_handler+0x28>)
   2b098:	1ac9      	subs	r1, r1, r3
   2b09a:	08c9      	lsrs	r1, r1, #3
   2b09c:	0189      	lsls	r1, r1, #6
   2b09e:	f041 0101 	orr.w	r1, r1, #1
   2b0a2:	f00e fb2a 	bl	396fa <log_0>
		sys_arch_reboot(0);
   2b0a6:	2000      	movs	r0, #0
   2b0a8:	f7fa ffce 	bl	26048 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2b0ac:	0003e468 	.word	0x0003e468
   2b0b0:	0003e4c0 	.word	0x0003e4c0
   2b0b4:	00041a5b 	.word	0x00041a5b

0002b0b8 <date_time_init>:
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   2b0b8:	b510      	push	{r4, lr}
	k_work_init_delayable(&time_work, date_time_handler);
   2b0ba:	4c06      	ldr	r4, [pc, #24]	; (2b0d4 <date_time_init+0x1c>)
   2b0bc:	4906      	ldr	r1, [pc, #24]	; (2b0d8 <date_time_init+0x20>)
   2b0be:	4620      	mov	r0, r4
   2b0c0:	f009 ff72 	bl	34fa8 <k_work_init_delayable>
	k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   2b0c4:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   2b0c8:	2300      	movs	r3, #0
   2b0ca:	4620      	mov	r0, r4
   2b0cc:	f00a f814 	bl	350f8 <k_work_schedule>

	return 0;
}
   2b0d0:	2000      	movs	r0, #0
   2b0d2:	bd10      	pop	{r4, pc}
   2b0d4:	20015498 	.word	0x20015498
   2b0d8:	0002b0f1 	.word	0x0002b0f1

0002b0dc <date_time_notify_event.constprop.0>:
	if (app_evt_handler != NULL) {
   2b0dc:	4b02      	ldr	r3, [pc, #8]	; (2b0e8 <date_time_notify_event.constprop.0+0xc>)
   2b0de:	681b      	ldr	r3, [r3, #0]
   2b0e0:	b10b      	cbz	r3, 2b0e6 <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   2b0e2:	4802      	ldr	r0, [pc, #8]	; (2b0ec <date_time_notify_event.constprop.0+0x10>)
   2b0e4:	4718      	bx	r3
}
   2b0e6:	4770      	bx	lr
   2b0e8:	20017b4c 	.word	0x20017b4c
   2b0ec:	20018c07 	.word	0x20018c07

0002b0f0 <date_time_handler>:
{
   2b0f0:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   2b0f2:	4805      	ldr	r0, [pc, #20]	; (2b108 <date_time_handler+0x18>)
   2b0f4:	f009 fbe2 	bl	348bc <z_impl_k_sem_give>
}
   2b0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   2b0fc:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   2b100:	2300      	movs	r3, #0
   2b102:	4802      	ldr	r0, [pc, #8]	; (2b10c <date_time_handler+0x1c>)
   2b104:	f009 bff8 	b.w	350f8 <k_work_schedule>
   2b108:	20014ba8 	.word	0x20014ba8
   2b10c:	20015498 	.word	0x20015498

0002b110 <new_date_time_get>:
{
   2b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b114:	4b8b      	ldr	r3, [pc, #556]	; (2b344 <new_date_time_get+0x234>)
   2b116:	4d8c      	ldr	r5, [pc, #560]	; (2b348 <new_date_time_get+0x238>)
	if (time_aux.last_date_time_update == 0 ||
   2b118:	4c8c      	ldr	r4, [pc, #560]	; (2b34c <new_date_time_get+0x23c>)
   2b11a:	1aed      	subs	r5, r5, r3
{
   2b11c:	b095      	sub	sp, #84	; 0x54
   2b11e:	08ed      	lsrs	r5, r5, #3
	return z_impl_k_sem_take(sem, timeout);
   2b120:	f04f 32ff 	mov.w	r2, #4294967295
   2b124:	f04f 33ff 	mov.w	r3, #4294967295
   2b128:	4889      	ldr	r0, [pc, #548]	; (2b350 <new_date_time_get+0x240>)
   2b12a:	f009 fc0b 	bl	34944 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   2b12e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2b132:	4313      	orrs	r3, r2
   2b134:	d014      	beq.n	2b160 <new_date_time_get+0x50>
   2b136:	e9d4 3200 	ldrd	r3, r2, [r4]
   2b13a:	4313      	orrs	r3, r2
   2b13c:	d010      	beq.n	2b160 <new_date_time_get+0x50>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   2b13e:	f010 fb78 	bl	3b832 <k_uptime_get>
   2b142:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2b146:	1ac0      	subs	r0, r0, r3
   2b148:	4b82      	ldr	r3, [pc, #520]	; (2b354 <new_date_time_get+0x244>)
   2b14a:	eb61 0102 	sbc.w	r1, r1, r2
   2b14e:	4283      	cmp	r3, r0
   2b150:	f04f 0300 	mov.w	r3, #0
   2b154:	418b      	sbcs	r3, r1
   2b156:	db03      	blt.n	2b160 <new_date_time_get+0x50>
			initial_valid_time = true;
   2b158:	2201      	movs	r2, #1
   2b15a:	4b7f      	ldr	r3, [pc, #508]	; (2b358 <new_date_time_get+0x248>)
		evt.type = DATE_TIME_NOT_OBTAINED;
   2b15c:	701a      	strb	r2, [r3, #0]
   2b15e:	e0eb      	b.n	2b338 <new_date_time_get+0x228>
	err = lte_lc_nw_reg_status_get(&reg_status);
   2b160:	a80b      	add	r0, sp, #44	; 0x2c
   2b162:	f7ff fd43 	bl	2abec <lte_lc_nw_reg_status_get>
	if (err) {
   2b166:	4601      	mov	r1, r0
   2b168:	2800      	cmp	r0, #0
   2b16a:	d062      	beq.n	2b232 <new_date_time_get+0x122>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   2b16c:	01aa      	lsls	r2, r5, #6
   2b16e:	487b      	ldr	r0, [pc, #492]	; (2b35c <new_date_time_get+0x24c>)
   2b170:	f042 0202 	orr.w	r2, r2, #2
   2b174:	f00e face 	bl	39714 <log_1>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   2b178:	2300      	movs	r3, #0
   2b17a:	2221      	movs	r2, #33	; 0x21
   2b17c:	4878      	ldr	r0, [pc, #480]	; (2b360 <new_date_time_get+0x250>)
   2b17e:	a902      	add	r1, sp, #8
   2b180:	f7ff f8f0 	bl	2a364 <at_cmd_write>
	if (err) {
   2b184:	2800      	cmp	r0, #0
   2b186:	f040 80da 	bne.w	2b33e <new_date_time_get+0x22e>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   2b18a:	2620      	movs	r6, #32
   2b18c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
			buf[i] = ' ';
   2b190:	4630      	mov	r0, r6
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2b192:	4974      	ldr	r1, [pc, #464]	; (2b364 <new_date_time_get+0x254>)
   2b194:	aa02      	add	r2, sp, #8
   2b196:	f812 3b01 	ldrb.w	r3, [r2], #1
   2b19a:	3b2c      	subs	r3, #44	; 0x2c
   2b19c:	b2db      	uxtb	r3, r3
   2b19e:	2b0e      	cmp	r3, #14
   2b1a0:	d805      	bhi.n	2b1ae <new_date_time_get+0x9e>
   2b1a2:	fa41 f303 	asr.w	r3, r1, r3
   2b1a6:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   2b1a8:	bf58      	it	pl
   2b1aa:	f802 0c01 	strbpl.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   2b1ae:	3e01      	subs	r6, #1
   2b1b0:	d1f1      	bne.n	2b196 <new_date_time_get+0x86>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2b1b2:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   2b1b4:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2b1b6:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   2b1b8:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2b1ba:	f00d f801 	bl	381c0 <strtol>
   2b1be:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2b1c0:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2b1c2:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2b1c4:	a901      	add	r1, sp, #4
   2b1c6:	9801      	ldr	r0, [sp, #4]
   2b1c8:	f00c fffa 	bl	381c0 <strtol>
   2b1cc:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2b1ce:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2b1d0:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2b1d2:	a901      	add	r1, sp, #4
   2b1d4:	9801      	ldr	r0, [sp, #4]
   2b1d6:	f00c fff3 	bl	381c0 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2b1da:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2b1dc:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2b1de:	a901      	add	r1, sp, #4
   2b1e0:	9801      	ldr	r0, [sp, #4]
   2b1e2:	f00c ffed 	bl	381c0 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2b1e6:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2b1e8:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2b1ea:	a901      	add	r1, sp, #4
   2b1ec:	9801      	ldr	r0, [sp, #4]
   2b1ee:	f00c ffe7 	bl	381c0 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2b1f2:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2b1f4:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2b1f6:	a901      	add	r1, sp, #4
   2b1f8:	9801      	ldr	r0, [sp, #4]
   2b1fa:	f00c ffe1 	bl	381c0 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2b1fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2b200:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2b202:	2b73      	cmp	r3, #115	; 0x73
   2b204:	f000 809b 	beq.w	2b33e <new_date_time_get+0x22e>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2b208:	a80b      	add	r0, sp, #44	; 0x2c
   2b20a:	f7f7 febf 	bl	22f8c <timeutil_timegm64>
   2b20e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b212:	fba0 0302 	umull	r0, r3, r0, r2
   2b216:	fb02 3301 	mla	r3, r2, r1, r3
   2b21a:	e9c4 0300 	strd	r0, r3, [r4]
	time_aux.last_date_time_update = k_uptime_get();
   2b21e:	f010 fb08 	bl	3b832 <k_uptime_get>
			initial_valid_time = true;
   2b222:	2201      	movs	r2, #1
   2b224:	4b4c      	ldr	r3, [pc, #304]	; (2b358 <new_date_time_get+0x248>)
	time_aux.last_date_time_update = k_uptime_get();
   2b226:	e9c4 0102 	strd	r0, r1, [r4, #8]
			initial_valid_time = true;
   2b22a:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   2b22c:	4b4e      	ldr	r3, [pc, #312]	; (2b368 <new_date_time_get+0x258>)
   2b22e:	701e      	strb	r6, [r3, #0]
			date_time_notify_event(&evt);
   2b230:	e082      	b.n	2b338 <new_date_time_get+0x228>
	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   2b232:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2b236:	2b08      	cmp	r3, #8
   2b238:	d003      	beq.n	2b242 <new_date_time_get+0x132>
   2b23a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2b23e:	2b01      	cmp	r3, #1
   2b240:	d19a      	bne.n	2b178 <new_date_time_get+0x68>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2b242:	f04f 0905 	mov.w	r9, #5
		hints.ai_family = AF_INET;
   2b246:	f04f 0b01 	mov.w	fp, #1
   2b24a:	4e48      	ldr	r6, [pc, #288]	; (2b36c <new_date_time_get+0x25c>)
   2b24c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 2b370 <new_date_time_get+0x260>
	err = sntp_query(&sntp_ctx, timeout, time);
   2b250:	f8df a120 	ldr.w	sl, [pc, #288]	; 2b374 <new_date_time_get+0x264>
	hints.ai_protocol = 0;
   2b254:	2300      	movs	r3, #0
   2b256:	2202      	movs	r2, #2
   2b258:	e9c8 2303 	strd	r2, r3, [r8, #12]
	if (server->addrlen == 0) {
   2b25c:	69b3      	ldr	r3, [r6, #24]
		hints.ai_family = AF_INET;
   2b25e:	f8c8 b008 	str.w	fp, [r8, #8]
	if (server->addrlen == 0) {
   2b262:	bb9b      	cbnz	r3, 2b2cc <new_date_time_get+0x1bc>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   2b264:	4944      	ldr	r1, [pc, #272]	; (2b378 <new_date_time_get+0x268>)
   2b266:	4642      	mov	r2, r8
   2b268:	f856 0c04 	ldr.w	r0, [r6, #-4]
   2b26c:	ab02      	add	r3, sp, #8
   2b26e:	f00e fce9 	bl	39c44 <zsock_getaddrinfo>
		if (err) {
   2b272:	4601      	mov	r1, r0
   2b274:	b188      	cbz	r0, 2b29a <new_date_time_get+0x18a>
			LOG_WRN("getaddrinfo, error: %d", err);
   2b276:	01aa      	lsls	r2, r5, #6
   2b278:	4840      	ldr	r0, [pc, #256]	; (2b37c <new_date_time_get+0x26c>)
   2b27a:	f042 0202 	orr.w	r2, r2, #2
   2b27e:	f00e fa49 	bl	39714 <log_1>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2b282:	f1b9 0901 	subs.w	r9, r9, #1
   2b286:	f106 0620 	add.w	r6, r6, #32
   2b28a:	d1e3      	bne.n	2b254 <new_date_time_get+0x144>
	LOG_WRN("Not getting time from any NTP server");
   2b28c:	01a9      	lsls	r1, r5, #6
   2b28e:	483c      	ldr	r0, [pc, #240]	; (2b380 <new_date_time_get+0x270>)
   2b290:	f041 0102 	orr.w	r1, r1, #2
   2b294:	f00e fa31 	bl	396fa <log_0>
		if (err == 0) {
   2b298:	e76e      	b.n	2b178 <new_date_time_get+0x68>
		if (addrinfo->ai_addrlen > sizeof(server->addr)) {
   2b29a:	9f02      	ldr	r7, [sp, #8]
   2b29c:	6979      	ldr	r1, [r7, #20]
   2b29e:	2918      	cmp	r1, #24
   2b2a0:	d90a      	bls.n	2b2b8 <new_date_time_get+0x1a8>
			LOG_WRN("getaddrinfo, addrlen: %d > %d",
   2b2a2:	01ab      	lsls	r3, r5, #6
   2b2a4:	2218      	movs	r2, #24
   2b2a6:	4837      	ldr	r0, [pc, #220]	; (2b384 <new_date_time_get+0x274>)
   2b2a8:	f043 0302 	orr.w	r3, r3, #2
   2b2ac:	f00e fa46 	bl	3973c <log_2>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   2b2b0:	9802      	ldr	r0, [sp, #8]
   2b2b2:	f00e fcc9 	bl	39c48 <zsock_freeaddrinfo>
		if (err) {
   2b2b6:	e7e4      	b.n	2b282 <new_date_time_get+0x172>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b2b8:	460a      	mov	r2, r1
   2b2ba:	4630      	mov	r0, r6
   2b2bc:	69b9      	ldr	r1, [r7, #24]
   2b2be:	f012 f9d5 	bl	3d66c <memcpy>
		server->addrlen = addrinfo->ai_addrlen;
   2b2c2:	697a      	ldr	r2, [r7, #20]
   2b2c4:	4638      	mov	r0, r7
   2b2c6:	61b2      	str	r2, [r6, #24]
   2b2c8:	f00e fcbe 	bl	39c48 <zsock_freeaddrinfo>
	err = sntp_init(&sntp_ctx, &server->addr, server->addrlen);
   2b2cc:	4631      	mov	r1, r6
   2b2ce:	69b2      	ldr	r2, [r6, #24]
   2b2d0:	a80b      	add	r0, sp, #44	; 0x2c
   2b2d2:	f00e fc83 	bl	39bdc <sntp_init>
	if (err) {
   2b2d6:	4601      	mov	r1, r0
   2b2d8:	b148      	cbz	r0, 2b2ee <new_date_time_get+0x1de>
		LOG_WRN("sntp_init, error: %d", err);
   2b2da:	01aa      	lsls	r2, r5, #6
   2b2dc:	482a      	ldr	r0, [pc, #168]	; (2b388 <new_date_time_get+0x278>)
   2b2de:	f042 0202 	orr.w	r2, r2, #2
		LOG_WRN("sntp_query, error: %d", err);
   2b2e2:	f00e fa17 	bl	39714 <log_1>
	sntp_close(&sntp_ctx);
   2b2e6:	a80b      	add	r0, sp, #44	; 0x2c
   2b2e8:	f00e fca7 	bl	39c3a <sntp_close>
		if (err) {
   2b2ec:	e7c9      	b.n	2b282 <new_date_time_get+0x172>
	err = sntp_query(&sntp_ctx, timeout, time);
   2b2ee:	f241 3188 	movw	r1, #5000	; 0x1388
   2b2f2:	4a20      	ldr	r2, [pc, #128]	; (2b374 <new_date_time_get+0x264>)
   2b2f4:	a80b      	add	r0, sp, #44	; 0x2c
   2b2f6:	f7f9 fb77 	bl	249e8 <sntp_query>
	if (err) {
   2b2fa:	4601      	mov	r1, r0
   2b2fc:	b120      	cbz	r0, 2b308 <new_date_time_get+0x1f8>
		LOG_WRN("sntp_query, error: %d", err);
   2b2fe:	01aa      	lsls	r2, r5, #6
   2b300:	4822      	ldr	r0, [pc, #136]	; (2b38c <new_date_time_get+0x27c>)
   2b302:	f042 0202 	orr.w	r2, r2, #2
   2b306:	e7ec      	b.n	2b2e2 <new_date_time_get+0x1d2>
	sntp_close(&sntp_ctx);
   2b308:	a80b      	add	r0, sp, #44	; 0x2c
   2b30a:	f00e fc96 	bl	39c3a <sntp_close>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   2b30e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2b312:	f8da 3000 	ldr.w	r3, [sl]
   2b316:	f8da 0004 	ldr.w	r0, [sl, #4]
   2b31a:	fba3 3201 	umull	r3, r2, r3, r1
   2b31e:	fb01 2200 	mla	r2, r1, r0, r2
   2b322:	e9c4 3200 	strd	r3, r2, [r4]
		time_aux.last_date_time_update = k_uptime_get();
   2b326:	f010 fa84 	bl	3b832 <k_uptime_get>
			initial_valid_time = true;
   2b32a:	2301      	movs	r3, #1
   2b32c:	4a0a      	ldr	r2, [pc, #40]	; (2b358 <new_date_time_get+0x248>)
		time_aux.last_date_time_update = k_uptime_get();
   2b32e:	e9c4 0102 	strd	r0, r1, [r4, #8]
			initial_valid_time = true;
   2b332:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   2b334:	4a0c      	ldr	r2, [pc, #48]	; (2b368 <new_date_time_get+0x258>)
   2b336:	7013      	strb	r3, [r2, #0]
		date_time_notify_event(&evt);
   2b338:	f7ff fed0 	bl	2b0dc <date_time_notify_event.constprop.0>
   2b33c:	e6f0      	b.n	2b120 <new_date_time_get+0x10>
		evt.type = DATE_TIME_NOT_OBTAINED;
   2b33e:	2203      	movs	r2, #3
   2b340:	4b09      	ldr	r3, [pc, #36]	; (2b368 <new_date_time_get+0x258>)
   2b342:	e70b      	b.n	2b15c <new_date_time_get+0x4c>
   2b344:	0003e468 	.word	0x0003e468
   2b348:	0003e498 	.word	0x0003e498
   2b34c:	20015488 	.word	0x20015488
   2b350:	20014ba8 	.word	0x20014ba8
   2b354:	0036ee80 	.word	0x0036ee80
   2b358:	20018c08 	.word	0x20018c08
   2b35c:	00041a78 	.word	0x00041a78
   2b360:	00041902 	.word	0x00041902
   2b364:	ffffbff6 	.word	0xffffbff6
   2b368:	20018c07 	.word	0x20018c07
   2b36c:	200146f0 	.word	0x200146f0
   2b370:	20017afc 	.word	0x20017afc
   2b374:	200154c8 	.word	0x200154c8
   2b378:	00041ab2 	.word	0x00041ab2
   2b37c:	00041ab6 	.word	0x00041ab6
   2b380:	00041b16 	.word	0x00041b16
   2b384:	00041acd 	.word	0x00041acd
   2b388:	00041aeb 	.word	0x00041aeb
   2b38c:	00041b00 	.word	0x00041b00

0002b390 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   2b390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2b394:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   2b396:	4c20      	ldr	r4, [pc, #128]	; (2b418 <check_ext_api_requests+0x88>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   2b398:	4e20      	ldr	r6, [pc, #128]	; (2b41c <check_ext_api_requests+0x8c>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2b39a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   2b39e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2b420 <__kernel_ram_size>
{
   2b3a2:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2b3a4:	45a8      	cmp	r8, r5
   2b3a6:	d803      	bhi.n	2b3b0 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   2b3a8:	2000      	movs	r0, #0
   2b3aa:	b005      	add	sp, #20
   2b3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   2b3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b3b2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2b3b6:	681f      	ldr	r7, [r3, #0]
   2b3b8:	ab01      	add	r3, sp, #4
   2b3ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2b3be:	220c      	movs	r2, #12
   2b3c0:	4619      	mov	r1, r3
   2b3c2:	4638      	mov	r0, r7
   2b3c4:	f012 f942 	bl	3d64c <memcmp>
   2b3c8:	b988      	cbnz	r0, 2b3ee <check_ext_api_requests+0x5e>
   2b3ca:	b187      	cbz	r7, 2b3ee <check_ext_api_requests+0x5e>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2b3cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   2b3ce:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2b3d0:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   2b3d2:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2b3d4:	4291      	cmp	r1, r2
   2b3d6:	d10a      	bne.n	2b3ee <check_ext_api_requests+0x5e>
		&&  (ext_api->ext_api_version >= req_min_version)
   2b3d8:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2b3da:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   2b3dc:	4291      	cmp	r1, r2
   2b3de:	d806      	bhi.n	2b3ee <check_ext_api_requests+0x5e>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   2b3e0:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2b3e2:	4291      	cmp	r1, r2
   2b3e4:	d903      	bls.n	2b3ee <check_ext_api_requests+0x5e>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   2b3e6:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2b3e8:	695b      	ldr	r3, [r3, #20]
   2b3ea:	439a      	bics	r2, r3
   2b3ec:	d00a      	beq.n	2b404 <check_ext_api_requests+0x74>
		} else if (ext_api_req->required) {
   2b3ee:	6a27      	ldr	r7, [r4, #32]
   2b3f0:	b167      	cbz	r7, 2b40c <check_ext_api_requests+0x7c>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   2b3f2:	480c      	ldr	r0, [pc, #48]	; (2b424 <__kernel_ram_size+0x4>)
   2b3f4:	f00d fee1 	bl	391ba <printk>
			k_panic();
   2b3f8:	4040      	eors	r0, r0
   2b3fa:	f380 8811 	msr	BASEPRI, r0
   2b3fe:	f04f 0004 	mov.w	r0, #4
   2b402:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2b404:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2b406:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2b408:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2b40a:	e7cb      	b.n	2b3a4 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   2b40c:	4648      	mov	r0, r9
   2b40e:	f00d fed4 	bl	391ba <printk>
			*ext_api_req->ext_api = NULL;
   2b412:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b414:	601f      	str	r7, [r3, #0]
   2b416:	e7f5      	b.n	2b404 <check_ext_api_requests+0x74>
   2b418:	0002043c 	.word	0x0002043c
   2b41c:	0003e640 	.word	0x0003e640
   2b420:	00041c10 	.word	0x00041c10
   2b424:	00041be7 	.word	0x00041be7

0002b428 <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   2b428:	4b01      	ldr	r3, [pc, #4]	; (2b430 <SystemInit+0x8>)
   2b42a:	4a02      	ldr	r2, [pc, #8]	; (2b434 <SystemInit+0xc>)
   2b42c:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   2b42e:	4770      	bx	lr
   2b430:	2001478c 	.word	0x2001478c
   2b434:	03d09000 	.word	0x03d09000

0002b438 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   2b438:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   2b43a:	4604      	mov	r4, r0
   2b43c:	b948      	cbnz	r0, 2b452 <nrfx_clock_init+0x1a>
   2b43e:	490a      	ldr	r1, [pc, #40]	; (2b468 <nrfx_clock_init+0x30>)
   2b440:	480a      	ldr	r0, [pc, #40]	; (2b46c <nrfx_clock_init+0x34>)
   2b442:	23b5      	movs	r3, #181	; 0xb5
   2b444:	4a0a      	ldr	r2, [pc, #40]	; (2b470 <nrfx_clock_init+0x38>)
   2b446:	f00d feb8 	bl	391ba <printk>
   2b44a:	21b5      	movs	r1, #181	; 0xb5
   2b44c:	4808      	ldr	r0, [pc, #32]	; (2b470 <nrfx_clock_init+0x38>)
   2b44e:	f00e f90b 	bl	39668 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2b452:	4b08      	ldr	r3, [pc, #32]	; (2b474 <nrfx_clock_init+0x3c>)
   2b454:	791a      	ldrb	r2, [r3, #4]
   2b456:	b922      	cbnz	r2, 2b462 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2b458:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   2b45a:	4807      	ldr	r0, [pc, #28]	; (2b478 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   2b45c:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   2b45e:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2b460:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2b462:	4806      	ldr	r0, [pc, #24]	; (2b47c <nrfx_clock_init+0x44>)
    return err_code;
   2b464:	e7fc      	b.n	2b460 <nrfx_clock_init+0x28>
   2b466:	bf00      	nop
   2b468:	00041c8d 	.word	0x00041c8d
   2b46c:	0003f0e1 	.word	0x0003f0e1
   2b470:	00041c50 	.word	0x00041c50
   2b474:	20017b50 	.word	0x20017b50
   2b478:	0bad0000 	.word	0x0bad0000
   2b47c:	0bad000c 	.word	0x0bad000c

0002b480 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2b480:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2b482:	4b0b      	ldr	r3, [pc, #44]	; (2b4b0 <nrfx_clock_enable+0x30>)
   2b484:	791b      	ldrb	r3, [r3, #4]
   2b486:	b94b      	cbnz	r3, 2b49c <nrfx_clock_enable+0x1c>
   2b488:	490a      	ldr	r1, [pc, #40]	; (2b4b4 <nrfx_clock_enable+0x34>)
   2b48a:	480b      	ldr	r0, [pc, #44]	; (2b4b8 <nrfx_clock_enable+0x38>)
   2b48c:	23ce      	movs	r3, #206	; 0xce
   2b48e:	4a0b      	ldr	r2, [pc, #44]	; (2b4bc <nrfx_clock_enable+0x3c>)
   2b490:	f00d fe93 	bl	391ba <printk>
   2b494:	21ce      	movs	r1, #206	; 0xce
   2b496:	4809      	ldr	r0, [pc, #36]	; (2b4bc <nrfx_clock_enable+0x3c>)
   2b498:	f00e f8e6 	bl	39668 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2b49c:	2005      	movs	r0, #5
   2b49e:	f7fa fa25 	bl	258ec <arch_irq_is_enabled>
   2b4a2:	b920      	cbnz	r0, 2b4ae <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2b4a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2b4a8:	2005      	movs	r0, #5
   2b4aa:	f7fa ba11 	b.w	258d0 <arch_irq_enable>
   2b4ae:	bd08      	pop	{r3, pc}
   2b4b0:	20017b50 	.word	0x20017b50
   2b4b4:	00041c9b 	.word	0x00041c9b
   2b4b8:	0003f0e1 	.word	0x0003f0e1
   2b4bc:	00041c50 	.word	0x00041c50

0002b4c0 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2b4c0:	4b22      	ldr	r3, [pc, #136]	; (2b54c <nrfx_clock_start+0x8c>)
{
   2b4c2:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2b4c4:	791b      	ldrb	r3, [r3, #4]
{
   2b4c6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2b4c8:	b95b      	cbnz	r3, 2b4e2 <nrfx_clock_start+0x22>
   2b4ca:	4921      	ldr	r1, [pc, #132]	; (2b550 <nrfx_clock_start+0x90>)
   2b4cc:	4821      	ldr	r0, [pc, #132]	; (2b554 <nrfx_clock_start+0x94>)
   2b4ce:	f44f 7385 	mov.w	r3, #266	; 0x10a
   2b4d2:	4a21      	ldr	r2, [pc, #132]	; (2b558 <nrfx_clock_start+0x98>)
   2b4d4:	f00d fe71 	bl	391ba <printk>
   2b4d8:	f44f 7185 	mov.w	r1, #266	; 0x10a
   2b4dc:	481e      	ldr	r0, [pc, #120]	; (2b558 <nrfx_clock_start+0x98>)
   2b4de:	f00e f8c3 	bl	39668 <assert_post_action>
    switch (domain)
   2b4e2:	b17c      	cbz	r4, 2b504 <nrfx_clock_start+0x44>
   2b4e4:	2c01      	cmp	r4, #1
   2b4e6:	d027      	beq.n	2b538 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2b4e8:	491c      	ldr	r1, [pc, #112]	; (2b55c <nrfx_clock_start+0x9c>)
   2b4ea:	481a      	ldr	r0, [pc, #104]	; (2b554 <nrfx_clock_start+0x94>)
   2b4ec:	f44f 739e 	mov.w	r3, #316	; 0x13c
   2b4f0:	4a19      	ldr	r2, [pc, #100]	; (2b558 <nrfx_clock_start+0x98>)
   2b4f2:	f00d fe62 	bl	391ba <printk>
            break;
    }
}
   2b4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   2b4fa:	f44f 719e 	mov.w	r1, #316	; 0x13c
   2b4fe:	4816      	ldr	r0, [pc, #88]	; (2b558 <nrfx_clock_start+0x98>)
   2b500:	f00e b8b2 	b.w	39668 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2b504:	4b16      	ldr	r3, [pc, #88]	; (2b560 <nrfx_clock_start+0xa0>)
   2b506:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2b50a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2b50e:	03c9      	lsls	r1, r1, #15
   2b510:	d510      	bpl.n	2b534 <nrfx_clock_start+0x74>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2b512:	f002 0203 	and.w	r2, r2, #3
   2b516:	2a02      	cmp	r2, #2
   2b518:	d10c      	bne.n	2b534 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2b51a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b51e:	2200      	movs	r2, #0
   2b520:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2b524:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   2b528:	2202      	movs	r2, #2
   2b52a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b52e:	2201      	movs	r2, #1
   2b530:	609a      	str	r2, [r3, #8]
}
   2b532:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   2b534:	2201      	movs	r2, #1
   2b536:	e7f0      	b.n	2b51a <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b538:	2200      	movs	r2, #0
   2b53a:	4b09      	ldr	r3, [pc, #36]	; (2b560 <nrfx_clock_start+0xa0>)
   2b53c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2b540:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2b544:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b548:	601c      	str	r4, [r3, #0]
}
   2b54a:	e7f2      	b.n	2b532 <nrfx_clock_start+0x72>
   2b54c:	20017b50 	.word	0x20017b50
   2b550:	00041c9b 	.word	0x00041c9b
   2b554:	0003f0e1 	.word	0x0003f0e1
   2b558:	00041c50 	.word	0x00041c50
   2b55c:	000422ae 	.word	0x000422ae
   2b560:	40005000 	.word	0x40005000

0002b564 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   2b564:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2b566:	4b28      	ldr	r3, [pc, #160]	; (2b608 <nrfx_clock_stop+0xa4>)
{
   2b568:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2b56a:	791b      	ldrb	r3, [r3, #4]
   2b56c:	b95b      	cbnz	r3, 2b586 <nrfx_clock_stop+0x22>
   2b56e:	4927      	ldr	r1, [pc, #156]	; (2b60c <nrfx_clock_stop+0xa8>)
   2b570:	4827      	ldr	r0, [pc, #156]	; (2b610 <nrfx_clock_stop+0xac>)
   2b572:	f240 1343 	movw	r3, #323	; 0x143
   2b576:	4a27      	ldr	r2, [pc, #156]	; (2b614 <nrfx_clock_stop+0xb0>)
   2b578:	f00d fe1f 	bl	391ba <printk>
   2b57c:	f240 1143 	movw	r1, #323	; 0x143
   2b580:	4824      	ldr	r0, [pc, #144]	; (2b614 <nrfx_clock_stop+0xb0>)
   2b582:	f00e f871 	bl	39668 <assert_post_action>
    switch (domain)
   2b586:	b17c      	cbz	r4, 2b5a8 <nrfx_clock_stop+0x44>
   2b588:	2c01      	cmp	r4, #1
   2b58a:	d023      	beq.n	2b5d4 <nrfx_clock_stop+0x70>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2b58c:	f240 135f 	movw	r3, #351	; 0x15f
   2b590:	4921      	ldr	r1, [pc, #132]	; (2b618 <nrfx_clock_stop+0xb4>)
   2b592:	481f      	ldr	r0, [pc, #124]	; (2b610 <nrfx_clock_stop+0xac>)
   2b594:	4a1f      	ldr	r2, [pc, #124]	; (2b614 <nrfx_clock_stop+0xb0>)
   2b596:	f00d fe10 	bl	391ba <printk>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2b59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            NRFX_ASSERT(0);
   2b59e:	f240 115f 	movw	r1, #351	; 0x15f
   2b5a2:	481c      	ldr	r0, [pc, #112]	; (2b614 <nrfx_clock_stop+0xb0>)
   2b5a4:	f00e b860 	b.w	39668 <assert_post_action>
    p_reg->INTENCLR = mask;
   2b5a8:	2302      	movs	r3, #2
   2b5aa:	4d1c      	ldr	r5, [pc, #112]	; (2b61c <nrfx_clock_stop+0xb8>)
   2b5ac:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b5b0:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
   2b5b4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b5b8:	2301      	movs	r3, #1
   2b5ba:	f242 7410 	movw	r4, #10000	; 0x2710
   2b5be:	60eb      	str	r3, [r5, #12]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2b5c0:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
   2b5c4:	03db      	lsls	r3, r3, #15
   2b5c6:	d51e      	bpl.n	2b606 <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   2b5c8:	2001      	movs	r0, #1
   2b5ca:	f010 f941 	bl	3b850 <nrfx_busy_wait>
   2b5ce:	3c01      	subs	r4, #1
   2b5d0:	d1f6      	bne.n	2b5c0 <nrfx_clock_stop+0x5c>
   2b5d2:	e018      	b.n	2b606 <nrfx_clock_stop+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b5d4:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   2b5d6:	4d11      	ldr	r5, [pc, #68]	; (2b61c <nrfx_clock_stop+0xb8>)
   2b5d8:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b5dc:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   2b5e0:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b5e4:	606c      	str	r4, [r5, #4]
   2b5e6:	f242 7410 	movw	r4, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2b5ea:	f8d5 340c 	ldr.w	r3, [r5, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2b5ee:	f8d5 240c 	ldr.w	r2, [r5, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2b5f2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2b5f6:	03d2      	lsls	r2, r2, #15
   2b5f8:	d505      	bpl.n	2b606 <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2b5fa:	b123      	cbz	r3, 2b606 <nrfx_clock_stop+0xa2>
   2b5fc:	2001      	movs	r0, #1
   2b5fe:	f010 f927 	bl	3b850 <nrfx_busy_wait>
   2b602:	3c01      	subs	r4, #1
   2b604:	d1f1      	bne.n	2b5ea <nrfx_clock_stop+0x86>
}
   2b606:	bd38      	pop	{r3, r4, r5, pc}
   2b608:	20017b50 	.word	0x20017b50
   2b60c:	00041c9b 	.word	0x00041c9b
   2b610:	0003f0e1 	.word	0x0003f0e1
   2b614:	00041c50 	.word	0x00041c50
   2b618:	000422ae 	.word	0x000422ae
   2b61c:	40005000 	.word	0x40005000

0002b620 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2b620:	4b17      	ldr	r3, [pc, #92]	; (2b680 <nrfx_power_clock_irq_handler+0x60>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2b622:	b510      	push	{r4, lr}
   2b624:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2b628:	b152      	cbz	r2, 2b640 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b62a:	2000      	movs	r0, #0
   2b62c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   2b630:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   2b634:	2201      	movs	r2, #1
   2b636:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2b63a:	4b12      	ldr	r3, [pc, #72]	; (2b684 <nrfx_power_clock_irq_handler+0x64>)
   2b63c:	681b      	ldr	r3, [r3, #0]
   2b63e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2b640:	4b0f      	ldr	r3, [pc, #60]	; (2b680 <nrfx_power_clock_irq_handler+0x60>)
   2b642:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2b646:	b18a      	cbz	r2, 2b66c <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b648:	2200      	movs	r2, #0
   2b64a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2b64e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2b652:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2b656:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2b65a:	f002 0203 	and.w	r2, r2, #3
   2b65e:	2a01      	cmp	r2, #1
   2b660:	f04f 0102 	mov.w	r1, #2
   2b664:	d103      	bne.n	2b66e <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2b666:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2b66a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   2b66c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   2b66e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2b672:	4b04      	ldr	r3, [pc, #16]	; (2b684 <nrfx_power_clock_irq_handler+0x64>)
   2b674:	2001      	movs	r0, #1
}
   2b676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2b67a:	681b      	ldr	r3, [r3, #0]
   2b67c:	4718      	bx	r3
   2b67e:	bf00      	nop
   2b680:	40005000 	.word	0x40005000
   2b684:	20017b50 	.word	0x20017b50

0002b688 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   2b688:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   2b68a:	f04f 0320 	mov.w	r3, #32
   2b68e:	f3ef 8611 	mrs	r6, BASEPRI
   2b692:	f383 8811 	msr	BASEPRI, r3
   2b696:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   2b69a:	490e      	ldr	r1, [pc, #56]	; (2b6d4 <nrfx_dppi_channel_alloc+0x4c>)
   2b69c:	680c      	ldr	r4, [r1, #0]
   2b69e:	43e3      	mvns	r3, r4
   2b6a0:	b29b      	uxth	r3, r3
    uint8_t channel = 0;

    if (!remaining_channels)
   2b6a2:	b1a3      	cbz	r3, 2b6ce <nrfx_dppi_channel_alloc+0x46>
   2b6a4:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   2b6a6:	b2d5      	uxtb	r5, r2
   2b6a8:	fa23 fc05 	lsr.w	ip, r3, r5
   2b6ac:	f01c 0f01 	tst.w	ip, #1
   2b6b0:	4617      	mov	r7, r2
   2b6b2:	f102 0201 	add.w	r2, r2, #1
   2b6b6:	d0f6      	beq.n	2b6a6 <nrfx_dppi_channel_alloc+0x1e>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   2b6b8:	2301      	movs	r3, #1
   2b6ba:	40ab      	lsls	r3, r5
   2b6bc:	4323      	orrs	r3, r4
        *p_channel = channel;
   2b6be:	7007      	strb	r7, [r0, #0]

        err_code = NRFX_SUCCESS;
   2b6c0:	4805      	ldr	r0, [pc, #20]	; (2b6d8 <nrfx_dppi_channel_alloc+0x50>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
   2b6c2:	600b      	str	r3, [r1, #0]
	__asm__ volatile(
   2b6c4:	f386 8811 	msr	BASEPRI, r6
   2b6c8:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
   2b6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
   2b6ce:	4803      	ldr	r0, [pc, #12]	; (2b6dc <nrfx_dppi_channel_alloc+0x54>)
   2b6d0:	e7f8      	b.n	2b6c4 <nrfx_dppi_channel_alloc+0x3c>
   2b6d2:	bf00      	nop
   2b6d4:	20017b58 	.word	0x20017b58
   2b6d8:	0bad0000 	.word	0x0bad0000
   2b6dc:	0bad0002 	.word	0x0bad0002

0002b6e0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   2b6e0:	2301      	movs	r3, #1
   2b6e2:	fa03 f000 	lsl.w	r0, r3, r0
   2b6e6:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   2b6e8:	b193      	cbz	r3, 2b710 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   2b6ea:	f04f 0320 	mov.w	r3, #32
   2b6ee:	f3ef 8111 	mrs	r1, BASEPRI
   2b6f2:	f383 8811 	msr	BASEPRI, r3
   2b6f6:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   2b6fa:	4a06      	ldr	r2, [pc, #24]	; (2b714 <nrfx_gpiote_channel_free+0x34>)
   2b6fc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   2b6fe:	ea23 0300 	bic.w	r3, r3, r0
   2b702:	64d3      	str	r3, [r2, #76]	; 0x4c
	__asm__ volatile(
   2b704:	f381 8811 	msr	BASEPRI, r1
   2b708:	f3bf 8f6f 	isb	sy
   2b70c:	4802      	ldr	r0, [pc, #8]	; (2b718 <nrfx_gpiote_channel_free+0x38>)
   2b70e:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   2b710:	4802      	ldr	r0, [pc, #8]	; (2b71c <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2b712:	4770      	bx	lr
   2b714:	20017b5c 	.word	0x20017b5c
   2b718:	0bad0000 	.word	0x0bad0000
   2b71c:	0bad0004 	.word	0x0bad0004

0002b720 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   2b720:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b722:	2100      	movs	r1, #0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   2b724:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   2b726:	2701      	movs	r7, #1
   2b728:	4e12      	ldr	r6, [pc, #72]	; (2b774 <nrfx_gpiote_channel_alloc+0x54>)
	__asm__ volatile(
   2b72a:	f04f 0320 	mov.w	r3, #32
   2b72e:	f3ef 8511 	mrs	r5, BASEPRI
   2b732:	f383 8811 	msr	BASEPRI, r3
   2b736:	f3bf 8f6f 	isb	sy

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   2b73a:	b2cc      	uxtb	r4, r1
    return m_cb.allocated_channels_mask & (1UL << index);
   2b73c:	fa07 f304 	lsl.w	r3, r7, r4
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   2b740:	fa22 f404 	lsr.w	r4, r2, r4
   2b744:	07e4      	lsls	r4, r4, #31
   2b746:	d409      	bmi.n	2b75c <nrfx_gpiote_channel_alloc+0x3c>
	__asm__ volatile(
   2b748:	f385 8811 	msr	BASEPRI, r5
   2b74c:	f3bf 8f6f 	isb	sy
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   2b750:	439a      	bics	r2, r3
   2b752:	f101 0101 	add.w	r1, r1, #1
   2b756:	d1e8      	bne.n	2b72a <nrfx_gpiote_channel_alloc+0xa>
   2b758:	4807      	ldr	r0, [pc, #28]	; (2b778 <nrfx_gpiote_channel_alloc+0x58>)

        mask &= ~(1UL << ch_idx);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2b75a:	e00a      	b.n	2b772 <nrfx_gpiote_channel_alloc+0x52>
    return m_cb.allocated_channels_mask & (1UL << index);
   2b75c:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   2b75e:	4223      	tst	r3, r4
   2b760:	d1f2      	bne.n	2b748 <nrfx_gpiote_channel_alloc+0x28>
    m_cb.allocated_channels_mask |= (1UL << index);
   2b762:	4323      	orrs	r3, r4
   2b764:	64f3      	str	r3, [r6, #76]	; 0x4c
            *p_channel = ch_idx;
   2b766:	7001      	strb	r1, [r0, #0]
   2b768:	f385 8811 	msr	BASEPRI, r5
   2b76c:	f3bf 8f6f 	isb	sy
   2b770:	4802      	ldr	r0, [pc, #8]	; (2b77c <nrfx_gpiote_channel_alloc+0x5c>)
}
   2b772:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b774:	20017b5c 	.word	0x20017b5c
   2b778:	0bad0002 	.word	0x0bad0002
   2b77c:	0bad0000 	.word	0x0bad0000

0002b780 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   2b780:	b570      	push	{r4, r5, r6, lr}
   2b782:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   2b784:	460d      	mov	r5, r1
   2b786:	b949      	cbnz	r1, 2b79c <nrfx_ipc_init+0x1c>
   2b788:	490b      	ldr	r1, [pc, #44]	; (2b7b8 <nrfx_ipc_init+0x38>)
   2b78a:	480c      	ldr	r0, [pc, #48]	; (2b7bc <nrfx_ipc_init+0x3c>)
   2b78c:	2334      	movs	r3, #52	; 0x34
   2b78e:	4a0c      	ldr	r2, [pc, #48]	; (2b7c0 <nrfx_ipc_init+0x40>)
   2b790:	f00d fd13 	bl	391ba <printk>
   2b794:	2134      	movs	r1, #52	; 0x34
   2b796:	480a      	ldr	r0, [pc, #40]	; (2b7c0 <nrfx_ipc_init+0x40>)
   2b798:	f00d ff66 	bl	39668 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2b79c:	4c09      	ldr	r4, [pc, #36]	; (2b7c4 <nrfx_ipc_init+0x44>)
   2b79e:	7923      	ldrb	r3, [r4, #4]
   2b7a0:	b943      	cbnz	r3, 2b7b4 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   2b7a2:	202a      	movs	r0, #42	; 0x2a
   2b7a4:	f7fa f894 	bl	258d0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2b7a8:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   2b7aa:	4807      	ldr	r0, [pc, #28]	; (2b7c8 <nrfx_ipc_init+0x48>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2b7ac:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   2b7ae:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   2b7b0:	60a6      	str	r6, [r4, #8]
}
   2b7b2:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2b7b4:	4805      	ldr	r0, [pc, #20]	; (2b7cc <nrfx_ipc_init+0x4c>)
   2b7b6:	e7fc      	b.n	2b7b2 <nrfx_ipc_init+0x32>
   2b7b8:	00041fef 	.word	0x00041fef
   2b7bc:	0003f0e1 	.word	0x0003f0e1
   2b7c0:	00041cb9 	.word	0x00041cb9
   2b7c4:	20017bac 	.word	0x20017bac
   2b7c8:	0bad0000 	.word	0x0bad0000
   2b7cc:	0bad000c 	.word	0x0bad000c

0002b7d0 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   2b7d0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   2b7d2:	4604      	mov	r4, r0
   2b7d4:	b948      	cbnz	r0, 2b7ea <nrfx_ipc_config_load+0x1a>
   2b7d6:	491a      	ldr	r1, [pc, #104]	; (2b840 <nrfx_ipc_config_load+0x70>)
   2b7d8:	481a      	ldr	r0, [pc, #104]	; (2b844 <nrfx_ipc_config_load+0x74>)
   2b7da:	2346      	movs	r3, #70	; 0x46
   2b7dc:	4a1a      	ldr	r2, [pc, #104]	; (2b848 <nrfx_ipc_config_load+0x78>)
   2b7de:	f00d fcec 	bl	391ba <printk>
   2b7e2:	2146      	movs	r1, #70	; 0x46
   2b7e4:	4818      	ldr	r0, [pc, #96]	; (2b848 <nrfx_ipc_config_load+0x78>)
   2b7e6:	f00d ff3f 	bl	39668 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2b7ea:	4b18      	ldr	r3, [pc, #96]	; (2b84c <nrfx_ipc_config_load+0x7c>)
   2b7ec:	791b      	ldrb	r3, [r3, #4]
   2b7ee:	2b01      	cmp	r3, #1
   2b7f0:	d009      	beq.n	2b806 <nrfx_ipc_config_load+0x36>
   2b7f2:	4917      	ldr	r1, [pc, #92]	; (2b850 <nrfx_ipc_config_load+0x80>)
   2b7f4:	4813      	ldr	r0, [pc, #76]	; (2b844 <nrfx_ipc_config_load+0x74>)
   2b7f6:	2347      	movs	r3, #71	; 0x47
   2b7f8:	4a13      	ldr	r2, [pc, #76]	; (2b848 <nrfx_ipc_config_load+0x78>)
   2b7fa:	f00d fcde 	bl	391ba <printk>
   2b7fe:	2147      	movs	r1, #71	; 0x47
   2b800:	4811      	ldr	r0, [pc, #68]	; (2b848 <nrfx_ipc_config_load+0x78>)
   2b802:	f00d ff31 	bl	39668 <assert_post_action>
{
   2b806:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   2b808:	4a12      	ldr	r2, [pc, #72]	; (2b854 <nrfx_ipc_config_load+0x84>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   2b80a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   2b80e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2b812:	3301      	adds	r3, #1
   2b814:	2b08      	cmp	r3, #8
   2b816:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   2b81a:	d1f6      	bne.n	2b80a <nrfx_ipc_config_load+0x3a>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   2b81c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2b81e:	4a0d      	ldr	r2, [pc, #52]	; (2b854 <nrfx_ipc_config_load+0x84>)
   2b820:	f104 011c 	add.w	r1, r4, #28
   2b824:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   2b828:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2b82c:	3301      	adds	r3, #1
   2b82e:	2b08      	cmp	r3, #8
   2b830:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   2b834:	d1f6      	bne.n	2b824 <nrfx_ipc_config_load+0x54>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   2b836:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   2b838:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2b83c:	bd38      	pop	{r3, r4, r5, pc}
   2b83e:	bf00      	nop
   2b840:	00041cf4 	.word	0x00041cf4
   2b844:	0003f0e1 	.word	0x0003f0e1
   2b848:	00041cb9 	.word	0x00041cb9
   2b84c:	20017bac 	.word	0x20017bac
   2b850:	00041cfd 	.word	0x00041cfd
   2b854:	4002a000 	.word	0x4002a000

0002b858 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   2b858:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2b85a:	4c1b      	ldr	r4, [pc, #108]	; (2b8c8 <nrfx_ipc_uninit+0x70>)
   2b85c:	7923      	ldrb	r3, [r4, #4]
   2b85e:	2b01      	cmp	r3, #1
   2b860:	d009      	beq.n	2b876 <nrfx_ipc_uninit+0x1e>
   2b862:	491a      	ldr	r1, [pc, #104]	; (2b8cc <nrfx_ipc_uninit+0x74>)
   2b864:	481a      	ldr	r0, [pc, #104]	; (2b8d0 <nrfx_ipc_uninit+0x78>)
   2b866:	2359      	movs	r3, #89	; 0x59
   2b868:	4a1a      	ldr	r2, [pc, #104]	; (2b8d4 <nrfx_ipc_uninit+0x7c>)
   2b86a:	f00d fca6 	bl	391ba <printk>
   2b86e:	2159      	movs	r1, #89	; 0x59
   2b870:	4818      	ldr	r0, [pc, #96]	; (2b8d4 <nrfx_ipc_uninit+0x7c>)
   2b872:	f00d fef9 	bl	39668 <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   2b876:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   2b878:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   2b87c:	4a16      	ldr	r2, [pc, #88]	; (2b8d8 <nrfx_ipc_uninit+0x80>)
   2b87e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   2b882:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   2b886:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   2b88a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   2b88e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   2b892:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   2b896:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   2b89a:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2b89e:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   2b8a2:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   2b8a6:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   2b8aa:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   2b8ae:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   2b8b2:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   2b8b6:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   2b8ba:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   2b8be:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   2b8c2:	7123      	strb	r3, [r4, #4]
}
   2b8c4:	bd10      	pop	{r4, pc}
   2b8c6:	bf00      	nop
   2b8c8:	20017bac 	.word	0x20017bac
   2b8cc:	00041cfd 	.word	0x00041cfd
   2b8d0:	0003f0e1 	.word	0x0003f0e1
   2b8d4:	00041cb9 	.word	0x00041cb9
   2b8d8:	4002a000 	.word	0x4002a000

0002b8dc <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   2b8dc:	4b1a      	ldr	r3, [pc, #104]	; (2b948 <nrfx_ipc_irq_handler+0x6c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   2b8de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b8e2:	f8d3 530c 	ldr.w	r5, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   2b8e6:	4e19      	ldr	r6, [pc, #100]	; (2b94c <nrfx_ipc_irq_handler+0x70>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   2b8e8:	462c      	mov	r4, r5
   2b8ea:	4f19      	ldr	r7, [pc, #100]	; (2b950 <nrfx_ipc_irq_handler+0x74>)
   2b8ec:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2b954 <nrfx_ipc_irq_handler+0x78>
    while (bitmask)
   2b8f0:	b934      	cbnz	r4, 2b900 <nrfx_ipc_irq_handler+0x24>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   2b8f2:	4b19      	ldr	r3, [pc, #100]	; (2b958 <nrfx_ipc_irq_handler+0x7c>)
   2b8f4:	4628      	mov	r0, r5
}
   2b8f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   2b8fa:	681a      	ldr	r2, [r3, #0]
   2b8fc:	6899      	ldr	r1, [r3, #8]
   2b8fe:	4710      	bx	r2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   2b900:	fa94 f3a4 	rbit	r3, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   2b904:	b1e3      	cbz	r3, 2b940 <nrfx_ipc_irq_handler+0x64>
  {
    return 32U;
  }
  return __builtin_clz(value);
   2b906:	fab3 f283 	clz	r2, r3
        bitmask &= ~(1UL << event_idx);
   2b90a:	2301      	movs	r3, #1
   2b90c:	2a07      	cmp	r2, #7
   2b90e:	fa03 f302 	lsl.w	r3, r3, r2
   2b912:	4691      	mov	r9, r2
   2b914:	ea24 0403 	bic.w	r4, r4, r3
   2b918:	dd0b      	ble.n	2b932 <nrfx_ipc_irq_handler+0x56>
   2b91a:	4639      	mov	r1, r7
   2b91c:	4640      	mov	r0, r8
   2b91e:	f240 13e7 	movw	r3, #487	; 0x1e7
   2b922:	4632      	mov	r2, r6
   2b924:	f00d fc49 	bl	391ba <printk>
   2b928:	f240 11e7 	movw	r1, #487	; 0x1e7
   2b92c:	4630      	mov	r0, r6
   2b92e:	f00d fe9b 	bl	39668 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b932:	4a0a      	ldr	r2, [pc, #40]	; (2b95c <nrfx_ipc_irq_handler+0x80>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   2b934:	ea4f 0389 	mov.w	r3, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2b938:	441a      	add	r2, r3
   2b93a:	2300      	movs	r3, #0
   2b93c:	6013      	str	r3, [r2, #0]
}
   2b93e:	e7d7      	b.n	2b8f0 <nrfx_ipc_irq_handler+0x14>
    return 32U;
   2b940:	f04f 0920 	mov.w	r9, #32
   2b944:	e7e9      	b.n	2b91a <nrfx_ipc_irq_handler+0x3e>
   2b946:	bf00      	nop
   2b948:	4002a000 	.word	0x4002a000
   2b94c:	00041d2a 	.word	0x00041d2a
   2b950:	00041d5c 	.word	0x00041d5c
   2b954:	0003f0e1 	.word	0x0003f0e1
   2b958:	20017bac 	.word	0x20017bac
   2b95c:	4002a100 	.word	0x4002a100

0002b960 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   2b960:	4a04      	ldr	r2, [pc, #16]	; (2b974 <nvmc_word_write+0x14>)
   2b962:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   2b966:	07db      	lsls	r3, r3, #31
   2b968:	d5fb      	bpl.n	2b962 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   2b96a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   2b96c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   2b970:	4770      	bx	lr
   2b972:	bf00      	nop
   2b974:	40039000 	.word	0x40039000

0002b978 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2b978:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   2b97c:	b510      	push	{r4, lr}
   2b97e:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2b980:	d30b      	bcc.n	2b99a <nrfx_nvmc_page_erase+0x22>
    NRFX_ASSERT(is_valid_address(addr, false));
   2b982:	4910      	ldr	r1, [pc, #64]	; (2b9c4 <nrfx_nvmc_page_erase+0x4c>)
   2b984:	4810      	ldr	r0, [pc, #64]	; (2b9c8 <nrfx_nvmc_page_erase+0x50>)
   2b986:	f44f 7383 	mov.w	r3, #262	; 0x106
   2b98a:	4a10      	ldr	r2, [pc, #64]	; (2b9cc <nrfx_nvmc_page_erase+0x54>)
   2b98c:	f00d fc15 	bl	391ba <printk>
   2b990:	f44f 7183 	mov.w	r1, #262	; 0x106
   2b994:	480d      	ldr	r0, [pc, #52]	; (2b9cc <nrfx_nvmc_page_erase+0x54>)
   2b996:	f00d fe67 	bl	39668 <assert_post_action>
    return !(addr % flash_page_size_get());
   2b99a:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   2b99e:	b97b      	cbnz	r3, 2b9c0 <nrfx_nvmc_page_erase+0x48>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   2b9a0:	2202      	movs	r2, #2
   2b9a2:	4b0b      	ldr	r3, [pc, #44]	; (2b9d0 <nrfx_nvmc_page_erase+0x58>)
   2b9a4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   2b9a8:	f04f 32ff 	mov.w	r2, #4294967295
   2b9ac:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2b9ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2b9b2:	07d2      	lsls	r2, r2, #31
   2b9b4:	d5fb      	bpl.n	2b9ae <nrfx_nvmc_page_erase+0x36>
    p_reg->CONFIGNS = (uint32_t)mode;
   2b9b6:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2b9b8:	4806      	ldr	r0, [pc, #24]	; (2b9d4 <nrfx_nvmc_page_erase+0x5c>)
   2b9ba:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   2b9be:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   2b9c0:	4805      	ldr	r0, [pc, #20]	; (2b9d8 <nrfx_nvmc_page_erase+0x60>)
   2b9c2:	e7fc      	b.n	2b9be <nrfx_nvmc_page_erase+0x46>
   2b9c4:	00041dc2 	.word	0x00041dc2
   2b9c8:	0003f0e1 	.word	0x0003f0e1
   2b9cc:	00041d66 	.word	0x00041d66
   2b9d0:	40039000 	.word	0x40039000
   2b9d4:	0bad0000 	.word	0x0bad0000
   2b9d8:	0bad000a 	.word	0x0bad000a

0002b9dc <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2b9dc:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   2b9e0:	b570      	push	{r4, r5, r6, lr}
   2b9e2:	4604      	mov	r4, r0
   2b9e4:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2b9e6:	d30b      	bcc.n	2ba00 <nrfx_nvmc_word_write+0x24>
    NRFX_ASSERT(is_valid_address(addr, true));
   2b9e8:	4912      	ldr	r1, [pc, #72]	; (2ba34 <nrfx_nvmc_word_write+0x58>)
   2b9ea:	4813      	ldr	r0, [pc, #76]	; (2ba38 <nrfx_nvmc_word_write+0x5c>)
   2b9ec:	f44f 73ca 	mov.w	r3, #404	; 0x194
   2b9f0:	4a12      	ldr	r2, [pc, #72]	; (2ba3c <nrfx_nvmc_word_write+0x60>)
   2b9f2:	f00d fbe2 	bl	391ba <printk>
   2b9f6:	f44f 71ca 	mov.w	r1, #404	; 0x194
   2b9fa:	4810      	ldr	r0, [pc, #64]	; (2ba3c <nrfx_nvmc_word_write+0x60>)
   2b9fc:	f00d fe34 	bl	39668 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   2ba00:	07a3      	lsls	r3, r4, #30
   2ba02:	d00b      	beq.n	2ba1c <nrfx_nvmc_word_write+0x40>
   2ba04:	490e      	ldr	r1, [pc, #56]	; (2ba40 <nrfx_nvmc_word_write+0x64>)
   2ba06:	480c      	ldr	r0, [pc, #48]	; (2ba38 <nrfx_nvmc_word_write+0x5c>)
   2ba08:	f240 1395 	movw	r3, #405	; 0x195
   2ba0c:	4a0b      	ldr	r2, [pc, #44]	; (2ba3c <nrfx_nvmc_word_write+0x60>)
   2ba0e:	f00d fbd4 	bl	391ba <printk>
   2ba12:	f240 1195 	movw	r1, #405	; 0x195
   2ba16:	4809      	ldr	r0, [pc, #36]	; (2ba3c <nrfx_nvmc_word_write+0x60>)
   2ba18:	f00d fe26 	bl	39668 <assert_post_action>
   2ba1c:	2301      	movs	r3, #1
   2ba1e:	4e09      	ldr	r6, [pc, #36]	; (2ba44 <nrfx_nvmc_word_write+0x68>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   2ba20:	4629      	mov	r1, r5
   2ba22:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584
   2ba26:	4620      	mov	r0, r4
   2ba28:	f7ff ff9a 	bl	2b960 <nvmc_word_write>
   2ba2c:	2300      	movs	r3, #0
   2ba2e:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   2ba32:	bd70      	pop	{r4, r5, r6, pc}
   2ba34:	00041ddc 	.word	0x00041ddc
   2ba38:	0003f0e1 	.word	0x0003f0e1
   2ba3c:	00041d66 	.word	0x00041d66
   2ba40:	00041df6 	.word	0x00041df6
   2ba44:	40039000 	.word	0x40039000

0002ba48 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ba48:	6802      	ldr	r2, [r0, #0]
{
   2ba4a:	b510      	push	{r4, lr}
    switch (port)
   2ba4c:	0953      	lsrs	r3, r2, #5
{
   2ba4e:	4604      	mov	r4, r0
    switch (port)
   2ba50:	d104      	bne.n	2ba5c <nrf_gpio_pin_port_decode+0x14>
    return (mask & (1UL << pin_number)) ? true : false;
   2ba52:	f04f 33ff 	mov.w	r3, #4294967295
   2ba56:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ba58:	07db      	lsls	r3, r3, #31
   2ba5a:	d40b      	bmi.n	2ba74 <nrf_gpio_pin_port_decode+0x2c>
   2ba5c:	490f      	ldr	r1, [pc, #60]	; (2ba9c <nrf_gpio_pin_port_decode+0x54>)
   2ba5e:	4810      	ldr	r0, [pc, #64]	; (2baa0 <nrf_gpio_pin_port_decode+0x58>)
   2ba60:	f44f 7305 	mov.w	r3, #532	; 0x214
   2ba64:	4a0f      	ldr	r2, [pc, #60]	; (2baa4 <nrf_gpio_pin_port_decode+0x5c>)
   2ba66:	f00d fba8 	bl	391ba <printk>
   2ba6a:	f44f 7105 	mov.w	r1, #532	; 0x214
   2ba6e:	480d      	ldr	r0, [pc, #52]	; (2baa4 <nrf_gpio_pin_port_decode+0x5c>)
   2ba70:	f00d fdfa 	bl	39668 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2ba74:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2ba76:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ba7a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2ba7c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ba7e:	d00b      	beq.n	2ba98 <nrf_gpio_pin_port_decode+0x50>
            NRFX_ASSERT(0);
   2ba80:	4909      	ldr	r1, [pc, #36]	; (2baa8 <nrf_gpio_pin_port_decode+0x60>)
   2ba82:	4807      	ldr	r0, [pc, #28]	; (2baa0 <nrf_gpio_pin_port_decode+0x58>)
   2ba84:	f240 2319 	movw	r3, #537	; 0x219
   2ba88:	4a06      	ldr	r2, [pc, #24]	; (2baa4 <nrf_gpio_pin_port_decode+0x5c>)
   2ba8a:	f00d fb96 	bl	391ba <printk>
   2ba8e:	f240 2119 	movw	r1, #537	; 0x219
   2ba92:	4804      	ldr	r0, [pc, #16]	; (2baa4 <nrf_gpio_pin_port_decode+0x5c>)
   2ba94:	f00d fde8 	bl	39668 <assert_post_action>
}
   2ba98:	4804      	ldr	r0, [pc, #16]	; (2baac <nrf_gpio_pin_port_decode+0x64>)
   2ba9a:	bd10      	pop	{r4, pc}
   2ba9c:	00040897 	.word	0x00040897
   2baa0:	0003f0e1 	.word	0x0003f0e1
   2baa4:	00040864 	.word	0x00040864
   2baa8:	000422ae 	.word	0x000422ae
   2baac:	40842500 	.word	0x40842500

0002bab0 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   2bab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bab4:	4681      	mov	r9, r0
   2bab6:	4692      	mov	sl, r2
   2bab8:	461f      	mov	r7, r3
    NRFX_ASSERT(p_config);
   2baba:	460c      	mov	r4, r1
   2babc:	b959      	cbnz	r1, 2bad6 <nrfx_spim_init+0x26>
   2babe:	4958      	ldr	r1, [pc, #352]	; (2bc20 <nrfx_spim_init+0x170>)
   2bac0:	4858      	ldr	r0, [pc, #352]	; (2bc24 <nrfx_spim_init+0x174>)
   2bac2:	f44f 7383 	mov.w	r3, #262	; 0x106
   2bac6:	4a58      	ldr	r2, [pc, #352]	; (2bc28 <nrfx_spim_init+0x178>)
   2bac8:	f00d fb77 	bl	391ba <printk>
   2bacc:	f44f 7183 	mov.w	r1, #262	; 0x106
   2bad0:	4855      	ldr	r0, [pc, #340]	; (2bc28 <nrfx_spim_init+0x178>)
   2bad2:	f00d fdc9 	bl	39668 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2bad6:	2124      	movs	r1, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2bad8:	f899 8004 	ldrb.w	r8, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2badc:	4d53      	ldr	r5, [pc, #332]	; (2bc2c <nrfx_spim_init+0x17c>)
   2bade:	fb01 f108 	mul.w	r1, r1, r8
   2bae2:	186b      	adds	r3, r5, r1
   2bae4:	7f1a      	ldrb	r2, [r3, #28]
   2bae6:	2a00      	cmp	r2, #0
   2bae8:	f040 8098 	bne.w	2bc1c <nrfx_spim_init+0x16c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   2baec:	f8d9 6000 	ldr.w	r6, [r9]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   2baf0:	f845 a001 	str.w	sl, [r5, r1]
    p_cb->p_context = p_context;
   2baf4:	605f      	str	r7, [r3, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   2baf6:	7b23      	ldrb	r3, [r4, #12]
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   2baf8:	7820      	ldrb	r0, [r4, #0]
    if (p_config->mode <= NRF_SPIM_MODE_1)
   2bafa:	2b01      	cmp	r3, #1
   2bafc:	d87c      	bhi.n	2bbf8 <nrfx_spim_init+0x148>
        nrf_gpio_pin_clear(p_config->sck_pin);
   2bafe:	f00f feb2 	bl	3b866 <nrf_gpio_pin_clear>
    pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M) ? NRF_GPIO_PIN_H0H1 : NRF_GPIO_PIN_S0S1;
#else
    pin_drive = NRF_GPIO_PIN_S0S1;
#endif

    nrf_gpio_cfg(p_config->sck_pin,
   2bb02:	7823      	ldrb	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bb04:	a801      	add	r0, sp, #4
   2bb06:	9301      	str	r3, [sp, #4]
   2bb08:	f7ff ff9e 	bl	2ba48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2bb0c:	2201      	movs	r2, #1
   2bb0e:	9b01      	ldr	r3, [sp, #4]
   2bb10:	3380      	adds	r3, #128	; 0x80
   2bb12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 pin_drive,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2bb16:	7867      	ldrb	r7, [r4, #1]
   2bb18:	2fff      	cmp	r7, #255	; 0xff
   2bb1a:	d070      	beq.n	2bbfe <nrfx_spim_init+0x14e>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   2bb1c:	4638      	mov	r0, r7
   2bb1e:	f00f fea2 	bl	3b866 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bb22:	a801      	add	r0, sp, #4
   2bb24:	9701      	str	r7, [sp, #4]
   2bb26:	f7ff ff8f 	bl	2ba48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2bb2a:	2203      	movs	r2, #3
   2bb2c:	9b01      	ldr	r3, [sp, #4]
   2bb2e:	3380      	adds	r3, #128	; 0x80
   2bb30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   2bb34:	f894 a002 	ldrb.w	sl, [r4, #2]
   2bb38:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   2bb3c:	d062      	beq.n	2bc04 <nrfx_spim_init+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bb3e:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg(miso_pin,
                     NRF_GPIO_PIN_DIR_INPUT,
                     NRF_GPIO_PIN_INPUT_CONNECT,
                     p_config->miso_pull,
   2bb40:	f894 b00e 	ldrb.w	fp, [r4, #14]
   2bb44:	f8cd a004 	str.w	sl, [sp, #4]
   2bb48:	f7ff ff7e 	bl	2ba48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2bb4c:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2bb4e:	ea4f 028b 	mov.w	r2, fp, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   2bb52:	3380      	adds	r3, #128	; 0x80
   2bb54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   2bb58:	2324      	movs	r3, #36	; 0x24
   2bb5a:	fb03 5308 	mla	r3, r3, r8, r5
   2bb5e:	78e0      	ldrb	r0, [r4, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2bb60:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
   2bb62:	77d8      	strb	r0, [r3, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2bb64:	d013      	beq.n	2bb8e <nrfx_spim_init+0xde>
    {
        if (p_config->ss_active_high)
   2bb66:	7923      	ldrb	r3, [r4, #4]
   2bb68:	2b00      	cmp	r3, #0
   2bb6a:	d04e      	beq.n	2bc0a <nrfx_spim_init+0x15a>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
   2bb6c:	f00f fe7b 	bl	3b866 <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg(p_config->ss_pin,
   2bb70:	78e3      	ldrb	r3, [r4, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bb72:	a801      	add	r0, sp, #4
   2bb74:	9301      	str	r3, [sp, #4]
   2bb76:	f7ff ff67 	bl	2ba48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2bb7a:	2203      	movs	r2, #3
   2bb7c:	9b01      	ldr	r3, [sp, #4]
   2bb7e:	3380      	adds	r3, #128	; 0x80
   2bb80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   2bb84:	2324      	movs	r3, #36	; 0x24
   2bb86:	fb03 5308 	mla	r3, r3, r8, r5
   2bb8a:	7922      	ldrb	r2, [r4, #4]
   2bb8c:	779a      	strb	r2, [r3, #30]

    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   2bb8e:	7823      	ldrb	r3, [r4, #0]
    p_reg->PSEL.SCK  = sck_pin;
   2bb90:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   2bb94:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   2bb96:	f8c6 750c 	str.w	r7, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   2bb9a:	f8c6 a510 	str.w	sl, [r6, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   2bb9e:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   2bba2:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   2bba4:	7b22      	ldrb	r2, [r4, #12]
   2bba6:	3b00      	subs	r3, #0
   2bba8:	bf18      	it	ne
   2bbaa:	2301      	movne	r3, #1
    switch (spi_mode)
   2bbac:	2a02      	cmp	r2, #2
   2bbae:	d02f      	beq.n	2bc10 <nrfx_spim_init+0x160>
   2bbb0:	2a03      	cmp	r2, #3
   2bbb2:	d030      	beq.n	2bc16 <nrfx_spim_init+0x166>
   2bbb4:	2a01      	cmp	r2, #1
   2bbb6:	d101      	bne.n	2bbbc <nrfx_spim_init+0x10c>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   2bbb8:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   2bbbc:	f8c6 3554 	str.w	r3, [r6, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   2bbc0:	79a3      	ldrb	r3, [r4, #6]
   2bbc2:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   2bbc6:	2307      	movs	r3, #7
   2bbc8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   2bbcc:	2324      	movs	r3, #36	; 0x24
   2bbce:	fb03 f308 	mul.w	r3, r3, r8
   2bbd2:	58eb      	ldr	r3, [r5, r3]
   2bbd4:	b12b      	cbz	r3, 2bbe2 <nrfx_spim_init+0x132>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2bbd6:	f8d9 0000 	ldr.w	r0, [r9]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2bbda:	f340 3007 	sbfx	r0, r0, #12, #8
   2bbde:	f7f9 fe77 	bl	258d0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   2bbe2:	2324      	movs	r3, #36	; 0x24
   2bbe4:	fb03 5508 	mla	r5, r3, r8, r5
   2bbe8:	2300      	movs	r3, #0
   2bbea:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2bbec:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2bbee:	4810      	ldr	r0, [pc, #64]	; (2bc30 <nrfx_spim_init+0x180>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2bbf0:	772b      	strb	r3, [r5, #28]
}
   2bbf2:	b003      	add	sp, #12
   2bbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   2bbf8:	f00f fe41 	bl	3b87e <nrf_gpio_pin_set>
   2bbfc:	e781      	b.n	2bb02 <nrfx_spim_init+0x52>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   2bbfe:	f04f 37ff 	mov.w	r7, #4294967295
   2bc02:	e797      	b.n	2bb34 <nrfx_spim_init+0x84>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   2bc04:	f04f 3aff 	mov.w	sl, #4294967295
   2bc08:	e7a6      	b.n	2bb58 <nrfx_spim_init+0xa8>
            nrf_gpio_pin_set(p_config->ss_pin);
   2bc0a:	f00f fe38 	bl	3b87e <nrf_gpio_pin_set>
   2bc0e:	e7af      	b.n	2bb70 <nrfx_spim_init+0xc0>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2bc10:	f043 0304 	orr.w	r3, r3, #4
        break;
   2bc14:	e7d2      	b.n	2bbbc <nrfx_spim_init+0x10c>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2bc16:	f043 0306 	orr.w	r3, r3, #6
        break;
   2bc1a:	e7cf      	b.n	2bbbc <nrfx_spim_init+0x10c>
        return err_code;
   2bc1c:	4805      	ldr	r0, [pc, #20]	; (2bc34 <nrfx_spim_init+0x184>)
   2bc1e:	e7e8      	b.n	2bbf2 <nrfx_spim_init+0x142>
   2bc20:	00041cf4 	.word	0x00041cf4
   2bc24:	0003f0e1 	.word	0x0003f0e1
   2bc28:	00041e1f 	.word	0x00041e1f
   2bc2c:	20017bb8 	.word	0x20017bb8
   2bc30:	0bad0000 	.word	0x0bad0000
   2bc34:	0bad0005 	.word	0x0bad0005

0002bc38 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2bc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2bc3c:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2bc3e:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2bc40:	4d70      	ldr	r5, [pc, #448]	; (2be04 <nrfx_spim_xfer+0x1cc>)
{
   2bc42:	4680      	mov	r8, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2bc44:	fb03 5307 	mla	r3, r3, r7, r5
   2bc48:	7f1b      	ldrb	r3, [r3, #28]
{
   2bc4a:	460c      	mov	r4, r1
   2bc4c:	4616      	mov	r6, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2bc4e:	b95b      	cbnz	r3, 2bc68 <nrfx_spim_xfer+0x30>
   2bc50:	496d      	ldr	r1, [pc, #436]	; (2be08 <nrfx_spim_xfer+0x1d0>)
   2bc52:	486e      	ldr	r0, [pc, #440]	; (2be0c <nrfx_spim_xfer+0x1d4>)
   2bc54:	f240 23d5 	movw	r3, #725	; 0x2d5
   2bc58:	4a6d      	ldr	r2, [pc, #436]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bc5a:	f00d faae 	bl	391ba <printk>
   2bc5e:	f240 21d5 	movw	r1, #725	; 0x2d5
   2bc62:	486b      	ldr	r0, [pc, #428]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bc64:	f00d fd00 	bl	39668 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   2bc68:	6823      	ldr	r3, [r4, #0]
   2bc6a:	b96b      	cbnz	r3, 2bc88 <nrfx_spim_xfer+0x50>
   2bc6c:	6863      	ldr	r3, [r4, #4]
   2bc6e:	b15b      	cbz	r3, 2bc88 <nrfx_spim_xfer+0x50>
   2bc70:	4968      	ldr	r1, [pc, #416]	; (2be14 <nrfx_spim_xfer+0x1dc>)
   2bc72:	4866      	ldr	r0, [pc, #408]	; (2be0c <nrfx_spim_xfer+0x1d4>)
   2bc74:	f240 23d6 	movw	r3, #726	; 0x2d6
   2bc78:	4a65      	ldr	r2, [pc, #404]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bc7a:	f00d fa9e 	bl	391ba <printk>
   2bc7e:	f240 21d6 	movw	r1, #726	; 0x2d6
   2bc82:	4863      	ldr	r0, [pc, #396]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bc84:	f00d fcf0 	bl	39668 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   2bc88:	68a3      	ldr	r3, [r4, #8]
   2bc8a:	b96b      	cbnz	r3, 2bca8 <nrfx_spim_xfer+0x70>
   2bc8c:	68e3      	ldr	r3, [r4, #12]
   2bc8e:	b15b      	cbz	r3, 2bca8 <nrfx_spim_xfer+0x70>
   2bc90:	4961      	ldr	r1, [pc, #388]	; (2be18 <nrfx_spim_xfer+0x1e0>)
   2bc92:	485e      	ldr	r0, [pc, #376]	; (2be0c <nrfx_spim_xfer+0x1d4>)
   2bc94:	f240 23d7 	movw	r3, #727	; 0x2d7
   2bc98:	4a5d      	ldr	r2, [pc, #372]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bc9a:	f00d fa8e 	bl	391ba <printk>
   2bc9e:	f240 21d7 	movw	r1, #727	; 0x2d7
   2bca2:	485b      	ldr	r0, [pc, #364]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bca4:	f00d fce0 	bl	39668 <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2bca8:	f898 3004 	ldrb.w	r3, [r8, #4]
   2bcac:	b93b      	cbnz	r3, 2bcbe <nrfx_spim_xfer+0x86>
   2bcae:	68e3      	ldr	r3, [r4, #12]
   2bcb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2bcb4:	d203      	bcs.n	2bcbe <nrfx_spim_xfer+0x86>
   2bcb6:	6863      	ldr	r3, [r4, #4]
   2bcb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2bcbc:	d30b      	bcc.n	2bcd6 <nrfx_spim_xfer+0x9e>
   2bcbe:	4957      	ldr	r1, [pc, #348]	; (2be1c <nrfx_spim_xfer+0x1e4>)
   2bcc0:	4852      	ldr	r0, [pc, #328]	; (2be0c <nrfx_spim_xfer+0x1d4>)
   2bcc2:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   2bcc6:	4a52      	ldr	r2, [pc, #328]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bcc8:	f00d fa77 	bl	391ba <printk>
   2bccc:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   2bcd0:	484f      	ldr	r0, [pc, #316]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bcd2:	f00d fcc9 	bl	39668 <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   2bcd6:	f016 0908 	ands.w	r9, r6, #8
   2bcda:	d011      	beq.n	2bd00 <nrfx_spim_xfer+0xc8>
   2bcdc:	2324      	movs	r3, #36	; 0x24
   2bcde:	fb03 5307 	mla	r3, r3, r7, r5
   2bce2:	7fdb      	ldrb	r3, [r3, #31]
   2bce4:	2bff      	cmp	r3, #255	; 0xff
   2bce6:	d00b      	beq.n	2bd00 <nrfx_spim_xfer+0xc8>
   2bce8:	494d      	ldr	r1, [pc, #308]	; (2be20 <nrfx_spim_xfer+0x1e8>)
   2bcea:	4848      	ldr	r0, [pc, #288]	; (2be0c <nrfx_spim_xfer+0x1d4>)
   2bcec:	f240 23db 	movw	r3, #731	; 0x2db
   2bcf0:	4a47      	ldr	r2, [pc, #284]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bcf2:	f00d fa62 	bl	391ba <printk>
   2bcf6:	f240 21db 	movw	r1, #731	; 0x2db
   2bcfa:	4845      	ldr	r0, [pc, #276]	; (2be10 <nrfx_spim_xfer+0x1d8>)
   2bcfc:	f00d fcb4 	bl	39668 <assert_post_action>
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   2bd00:	2324      	movs	r3, #36	; 0x24
   2bd02:	437b      	muls	r3, r7
   2bd04:	18ea      	adds	r2, r5, r3
   2bd06:	7f51      	ldrb	r1, [r2, #29]
   2bd08:	2900      	cmp	r1, #0
   2bd0a:	d179      	bne.n	2be00 <nrfx_spim_xfer+0x1c8>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   2bd0c:	58eb      	ldr	r3, [r5, r3]
   2bd0e:	b123      	cbz	r3, 2bd1a <nrfx_spim_xfer+0xe2>
   2bd10:	f016 0f14 	tst.w	r6, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   2bd14:	bf04      	itt	eq
   2bd16:	2301      	moveq	r3, #1
   2bd18:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   2bd1a:	f04f 0c24 	mov.w	ip, #36	; 0x24
   2bd1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2bd22:	fb0c 5c07 	mla	ip, ip, r7, r5
   2bd26:	f10c 0e0c 	add.w	lr, ip, #12
   2bd2a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2bd2e:	f89c 001f 	ldrb.w	r0, [ip, #31]
   2bd32:	28ff      	cmp	r0, #255	; 0xff
   2bd34:	d004      	beq.n	2bd40 <nrfx_spim_xfer+0x108>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   2bd36:	f89c 301e 	ldrb.w	r3, [ip, #30]
   2bd3a:	b1cb      	cbz	r3, 2bd70 <nrfx_spim_xfer+0x138>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
   2bd3c:	f00f fd9f 	bl	3b87e <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2bd40:	6821      	ldr	r1, [r4, #0]
                nrf_gpio_pin_clear(p_cb->ss_pin);
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   2bd42:	f8d8 3000 	ldr.w	r3, [r8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2bd46:	b121      	cbz	r1, 2bd52 <nrfx_spim_xfer+0x11a>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2bd48:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   2bd4c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2bd50:	d106      	bne.n	2bd60 <nrfx_spim_xfer+0x128>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2bd52:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2bd54:	b17a      	cbz	r2, 2bd76 <nrfx_spim_xfer+0x13e>
   2bd56:	f002 4060 	and.w	r0, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2bd5a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   2bd5e:	d00a      	beq.n	2bd76 <nrfx_spim_xfer+0x13e>
        p_cb->transfer_in_progress = false;
   2bd60:	2324      	movs	r3, #36	; 0x24
   2bd62:	2200      	movs	r2, #0
   2bd64:	fb03 5307 	mla	r3, r3, r7, r5
        return err_code;
   2bd68:	482e      	ldr	r0, [pc, #184]	; (2be24 <nrfx_spim_xfer+0x1ec>)
        p_cb->transfer_in_progress = false;
   2bd6a:	775a      	strb	r2, [r3, #29]
}
   2bd6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
   2bd70:	f00f fd79 	bl	3b866 <nrf_gpio_pin_clear>
   2bd74:	e7e4      	b.n	2bd40 <nrfx_spim_xfer+0x108>
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   2bd76:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2bd78:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2bd7c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   2bd80:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2bd82:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2bd86:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   2bd88:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2bd8c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2bd90:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   2bd94:	f016 0201 	ands.w	r2, r6, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   2bd98:	bf18      	it	ne
   2bd9a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   2bd9c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   2bda0:	f016 0202 	ands.w	r2, r6, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   2bda4:	bf18      	it	ne
   2bda6:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   2bda8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2bdac:	2224      	movs	r2, #36	; 0x24
   2bdae:	f1b9 0f00 	cmp.w	r9, #0
   2bdb2:	d00a      	beq.n	2bdca <nrfx_spim_xfer+0x192>
    if (!p_cb->handler)
   2bdb4:	437a      	muls	r2, r7
   2bdb6:	58aa      	ldr	r2, [r5, r2]
   2bdb8:	b9ca      	cbnz	r2, 2bdee <nrfx_spim_xfer+0x1b6>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2bdba:	2324      	movs	r3, #36	; 0x24
   2bdbc:	fb03 5507 	mla	r5, r3, r7, r5
   2bdc0:	7fe8      	ldrb	r0, [r5, #31]
   2bdc2:	28ff      	cmp	r0, #255	; 0xff
   2bdc4:	d10b      	bne.n	2bdde <nrfx_spim_xfer+0x1a6>
    return err_code;
   2bdc6:	4818      	ldr	r0, [pc, #96]	; (2be28 <nrfx_spim_xfer+0x1f0>)
   2bdc8:	e7d0      	b.n	2bd6c <nrfx_spim_xfer+0x134>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2bdca:	2101      	movs	r1, #1
    if (!p_cb->handler)
   2bdcc:	437a      	muls	r2, r7
   2bdce:	6119      	str	r1, [r3, #16]
   2bdd0:	58aa      	ldr	r2, [r5, r2]
   2bdd2:	b962      	cbnz	r2, 2bdee <nrfx_spim_xfer+0x1b6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2bdd4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2bdd8:	2a00      	cmp	r2, #0
   2bdda:	d0fb      	beq.n	2bdd4 <nrfx_spim_xfer+0x19c>
   2bddc:	e7ed      	b.n	2bdba <nrfx_spim_xfer+0x182>
                if (p_cb->ss_active_high)
   2bdde:	7fab      	ldrb	r3, [r5, #30]
   2bde0:	b113      	cbz	r3, 2bde8 <nrfx_spim_xfer+0x1b0>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   2bde2:	f00f fd40 	bl	3b866 <nrf_gpio_pin_clear>
   2bde6:	e7ee      	b.n	2bdc6 <nrfx_spim_xfer+0x18e>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   2bde8:	f00f fd49 	bl	3b87e <nrf_gpio_pin_set>
   2bdec:	e7eb      	b.n	2bdc6 <nrfx_spim_xfer+0x18e>
    if (!enable)
   2bdee:	2240      	movs	r2, #64	; 0x40
   2bdf0:	f016 0f04 	tst.w	r6, #4
    p_reg->INTENCLR = mask;
   2bdf4:	bf14      	ite	ne
   2bdf6:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   2bdfa:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
}
   2bdfe:	e7e2      	b.n	2bdc6 <nrfx_spim_xfer+0x18e>
        return err_code;
   2be00:	480a      	ldr	r0, [pc, #40]	; (2be2c <nrfx_spim_xfer+0x1f4>)
   2be02:	e7b3      	b.n	2bd6c <nrfx_spim_xfer+0x134>
   2be04:	20017bb8 	.word	0x20017bb8
   2be08:	00041e5b 	.word	0x00041e5b
   2be0c:	0003f0e1 	.word	0x0003f0e1
   2be10:	00041e1f 	.word	0x00041e1f
   2be14:	00041e87 	.word	0x00041e87
   2be18:	00041ece 	.word	0x00041ece
   2be1c:	00041f15 	.word	0x00041f15
   2be20:	00041fb9 	.word	0x00041fb9
   2be24:	0bad000a 	.word	0x0bad000a
   2be28:	0bad0000 	.word	0x0bad0000
   2be2c:	0bad000b 	.word	0x0bad000b

0002be30 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2be30:	4b16      	ldr	r3, [pc, #88]	; (2be8c <nrfx_spim_3_irq_handler+0x5c>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   2be32:	b510      	push	{r4, lr}
   2be34:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2be38:	b332      	cbz	r2, 2be88 <nrfx_spim_3_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2be3a:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   2be3c:	4c14      	ldr	r4, [pc, #80]	; (2be90 <nrfx_spim_3_irq_handler+0x60>)
   2be3e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2be42:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   2be46:	6823      	ldr	r3, [r4, #0]
   2be48:	b95b      	cbnz	r3, 2be62 <nrfx_spim_3_irq_handler+0x32>
   2be4a:	4912      	ldr	r1, [pc, #72]	; (2be94 <nrfx_spim_3_irq_handler+0x64>)
   2be4c:	4812      	ldr	r0, [pc, #72]	; (2be98 <nrfx_spim_3_irq_handler+0x68>)
   2be4e:	f240 333e 	movw	r3, #830	; 0x33e
   2be52:	4a12      	ldr	r2, [pc, #72]	; (2be9c <nrfx_spim_3_irq_handler+0x6c>)
   2be54:	f00d f9b1 	bl	391ba <printk>
   2be58:	f240 313e 	movw	r1, #830	; 0x33e
   2be5c:	480f      	ldr	r0, [pc, #60]	; (2be9c <nrfx_spim_3_irq_handler+0x6c>)
   2be5e:	f00d fc03 	bl	39668 <assert_post_action>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2be62:	7fe0      	ldrb	r0, [r4, #31]
   2be64:	28ff      	cmp	r0, #255	; 0xff
   2be66:	d003      	beq.n	2be70 <nrfx_spim_3_irq_handler+0x40>
            if (p_cb->ss_active_high)
   2be68:	7fa3      	ldrb	r3, [r4, #30]
   2be6a:	b153      	cbz	r3, 2be82 <nrfx_spim_3_irq_handler+0x52>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   2be6c:	f00f fcfb 	bl	3b866 <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   2be70:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   2be72:	7223      	strb	r3, [r4, #8]
    p_cb->transfer_in_progress = false;
   2be74:	7763      	strb	r3, [r4, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2be76:	480a      	ldr	r0, [pc, #40]	; (2bea0 <nrfx_spim_3_irq_handler+0x70>)
   2be78:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   2be7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2be80:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   2be82:	f00f fcfc 	bl	3b87e <nrf_gpio_pin_set>
   2be86:	e7f3      	b.n	2be70 <nrfx_spim_3_irq_handler+0x40>
}
   2be88:	bd10      	pop	{r4, pc}
   2be8a:	bf00      	nop
   2be8c:	4000b000 	.word	0x4000b000
   2be90:	20017bb8 	.word	0x20017bb8
   2be94:	00041fe9 	.word	0x00041fe9
   2be98:	0003f0e1 	.word	0x0003f0e1
   2be9c:	00041e1f 	.word	0x00041e1f
   2bea0:	20017bc0 	.word	0x20017bc0

0002bea4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2bea4:	6802      	ldr	r2, [r0, #0]
{
   2bea6:	b510      	push	{r4, lr}
    switch (port)
   2bea8:	0953      	lsrs	r3, r2, #5
{
   2beaa:	4604      	mov	r4, r0
    switch (port)
   2beac:	d104      	bne.n	2beb8 <nrf_gpio_pin_port_decode+0x14>
    return (mask & (1UL << pin_number)) ? true : false;
   2beae:	f04f 33ff 	mov.w	r3, #4294967295
   2beb2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2beb4:	07db      	lsls	r3, r3, #31
   2beb6:	d40b      	bmi.n	2bed0 <nrf_gpio_pin_port_decode+0x2c>
   2beb8:	490f      	ldr	r1, [pc, #60]	; (2bef8 <nrf_gpio_pin_port_decode+0x54>)
   2beba:	4810      	ldr	r0, [pc, #64]	; (2befc <nrf_gpio_pin_port_decode+0x58>)
   2bebc:	f44f 7305 	mov.w	r3, #532	; 0x214
   2bec0:	4a0f      	ldr	r2, [pc, #60]	; (2bf00 <nrf_gpio_pin_port_decode+0x5c>)
   2bec2:	f00d f97a 	bl	391ba <printk>
   2bec6:	f44f 7105 	mov.w	r1, #532	; 0x214
   2beca:	480d      	ldr	r0, [pc, #52]	; (2bf00 <nrf_gpio_pin_port_decode+0x5c>)
   2becc:	f00d fbcc 	bl	39668 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2bed0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2bed2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2bed6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2bed8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2beda:	d00b      	beq.n	2bef4 <nrf_gpio_pin_port_decode+0x50>
            NRFX_ASSERT(0);
   2bedc:	4909      	ldr	r1, [pc, #36]	; (2bf04 <nrf_gpio_pin_port_decode+0x60>)
   2bede:	4807      	ldr	r0, [pc, #28]	; (2befc <nrf_gpio_pin_port_decode+0x58>)
   2bee0:	f240 2319 	movw	r3, #537	; 0x219
   2bee4:	4a06      	ldr	r2, [pc, #24]	; (2bf00 <nrf_gpio_pin_port_decode+0x5c>)
   2bee6:	f00d f968 	bl	391ba <printk>
   2beea:	f240 2119 	movw	r1, #537	; 0x219
   2beee:	4804      	ldr	r0, [pc, #16]	; (2bf00 <nrf_gpio_pin_port_decode+0x5c>)
   2bef0:	f00d fbba 	bl	39668 <assert_post_action>
}
   2bef4:	4804      	ldr	r0, [pc, #16]	; (2bf08 <nrf_gpio_pin_port_decode+0x64>)
   2bef6:	bd10      	pop	{r4, pc}
   2bef8:	00040897 	.word	0x00040897
   2befc:	0003f0e1 	.word	0x0003f0e1
   2bf00:	00040864 	.word	0x00040864
   2bf04:	000422ae 	.word	0x000422ae
   2bf08:	40842500 	.word	0x40842500

0002bf0c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   2bf0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2bf10:	4606      	mov	r6, r0
   2bf12:	4691      	mov	r9, r2
   2bf14:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   2bf16:	460c      	mov	r4, r1
   2bf18:	b959      	cbnz	r1, 2bf32 <nrfx_twim_init+0x26>
   2bf1a:	4932      	ldr	r1, [pc, #200]	; (2bfe4 <nrfx_twim_init+0xd8>)
   2bf1c:	4832      	ldr	r0, [pc, #200]	; (2bfe8 <nrfx_twim_init+0xdc>)
   2bf1e:	f44f 7383 	mov.w	r3, #262	; 0x106
   2bf22:	4a32      	ldr	r2, [pc, #200]	; (2bfec <nrfx_twim_init+0xe0>)
   2bf24:	f00d f949 	bl	391ba <printk>
   2bf28:	f44f 7183 	mov.w	r1, #262	; 0x106
   2bf2c:	482f      	ldr	r0, [pc, #188]	; (2bfec <nrfx_twim_init+0xe0>)
   2bf2e:	f00d fb9b 	bl	39668 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   2bf32:	e9d4 2300 	ldrd	r2, r3, [r4]
   2bf36:	429a      	cmp	r2, r3
   2bf38:	d10b      	bne.n	2bf52 <nrfx_twim_init+0x46>
   2bf3a:	492d      	ldr	r1, [pc, #180]	; (2bff0 <nrfx_twim_init+0xe4>)
   2bf3c:	482a      	ldr	r0, [pc, #168]	; (2bfe8 <nrfx_twim_init+0xdc>)
   2bf3e:	f240 1307 	movw	r3, #263	; 0x107
   2bf42:	4a2a      	ldr	r2, [pc, #168]	; (2bfec <nrfx_twim_init+0xe0>)
   2bf44:	f00d f939 	bl	391ba <printk>
   2bf48:	f240 1107 	movw	r1, #263	; 0x107
   2bf4c:	4827      	ldr	r0, [pc, #156]	; (2bfec <nrfx_twim_init+0xe0>)
   2bf4e:	f00d fb8b 	bl	39668 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2bf52:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2bf54:	f896 a004 	ldrb.w	sl, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2bf58:	4d26      	ldr	r5, [pc, #152]	; (2bff4 <nrfx_twim_init+0xe8>)
   2bf5a:	fb07 f70a 	mul.w	r7, r7, sl
   2bf5e:	19e9      	adds	r1, r5, r7
   2bf60:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   2bf64:	2b00      	cmp	r3, #0
   2bf66:	d13b      	bne.n	2bfe0 <nrfx_twim_init+0xd4>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   2bf68:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
   2bf6a:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
   2bf6e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2bf72:	7b63      	ldrb	r3, [r4, #13]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bf74:	a801      	add	r0, sp, #4
   2bf76:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
   2bf7a:	6823      	ldr	r3, [r4, #0]
    p_cb->p_context       = p_context;
   2bf7c:	f8c1 8004 	str.w	r8, [r1, #4]
    p_cb->handler         = event_handler;
   2bf80:	f845 9007 	str.w	r9, [r5, r7]
#if NRFX_CHECK(NRFX_TWIM_NRF52_ANOMALY_109_WORKAROUND_ENABLED)
    p_cb->bus_frequency   = (nrf_twim_frequency_t)p_config->frequency;
#endif

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2bf84:	f8d6 8000 	ldr.w	r8, [r6]
    reg->PIN_CNF[pin_number] = cnf;
   2bf88:	f240 690c 	movw	r9, #1548	; 0x60c
   2bf8c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bf8e:	f7ff ff89 	bl	2bea4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2bf92:	9b01      	ldr	r3, [sp, #4]
   2bf94:	3380      	adds	r3, #128	; 0x80
   2bf96:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
   2bf9a:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2bf9c:	a801      	add	r0, sp, #4
   2bf9e:	9301      	str	r3, [sp, #4]
   2bfa0:	f7ff ff80 	bl	2bea4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2bfa4:	9b01      	ldr	r3, [sp, #4]
   2bfa6:	3380      	adds	r3, #128	; 0x80
   2bfa8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   2bfac:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
   2bfb0:	f8c8 2508 	str.w	r2, [r8, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   2bfb4:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   2bfb8:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   2bfba:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524

    if (p_cb->handler)
   2bfbe:	59eb      	ldr	r3, [r5, r7]
   2bfc0:	b123      	cbz	r3, 2bfcc <nrfx_twim_init+0xc0>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2bfc2:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   2bfc4:	f340 3007 	sbfx	r0, r0, #12, #8
   2bfc8:	f7f9 fc82 	bl	258d0 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2bfcc:	2334      	movs	r3, #52	; 0x34
   2bfce:	fb03 550a 	mla	r5, r3, sl, r5
   2bfd2:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2bfd4:	4808      	ldr	r0, [pc, #32]	; (2bff8 <nrfx_twim_init+0xec>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2bfd6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   2bfda:	b002      	add	sp, #8
   2bfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   2bfe0:	4806      	ldr	r0, [pc, #24]	; (2bffc <nrfx_twim_init+0xf0>)
   2bfe2:	e7fa      	b.n	2bfda <nrfx_twim_init+0xce>
   2bfe4:	00041cf4 	.word	0x00041cf4
   2bfe8:	0003f0e1 	.word	0x0003f0e1
   2bfec:	00041ff7 	.word	0x00041ff7
   2bff0:	00042033 	.word	0x00042033
   2bff4:	20017bdc 	.word	0x20017bdc
   2bff8:	0bad0000 	.word	0x0bad0000
   2bffc:	0bad0005 	.word	0x0bad0005

0002c000 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2c000:	2334      	movs	r3, #52	; 0x34
{
   2c002:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2c004:	4c0f      	ldr	r4, [pc, #60]	; (2c044 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2c006:	7906      	ldrb	r6, [r0, #4]
{
   2c008:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2c00a:	fb03 4306 	mla	r3, r3, r6, r4
   2c00e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   2c012:	2b01      	cmp	r3, #1
   2c014:	d00b      	beq.n	2c02e <nrfx_twim_enable+0x2e>
   2c016:	490c      	ldr	r1, [pc, #48]	; (2c048 <nrfx_twim_enable+0x48>)
   2c018:	480c      	ldr	r0, [pc, #48]	; (2c04c <nrfx_twim_enable+0x4c>)
   2c01a:	f44f 73b5 	mov.w	r3, #362	; 0x16a
   2c01e:	4a0c      	ldr	r2, [pc, #48]	; (2c050 <nrfx_twim_enable+0x50>)
   2c020:	f00d f8cb 	bl	391ba <printk>
   2c024:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   2c028:	4809      	ldr	r0, [pc, #36]	; (2c050 <nrfx_twim_enable+0x50>)
   2c02a:	f00d fb1d 	bl	39668 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2c02e:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   2c030:	682b      	ldr	r3, [r5, #0]
   2c032:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2c036:	2334      	movs	r3, #52	; 0x34
   2c038:	fb03 4406 	mla	r4, r3, r6, r4
   2c03c:	2302      	movs	r3, #2
   2c03e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   2c042:	bd70      	pop	{r4, r5, r6, pc}
   2c044:	20017bdc 	.word	0x20017bdc
   2c048:	00042052 	.word	0x00042052
   2c04c:	0003f0e1 	.word	0x0003f0e1
   2c050:	00041ff7 	.word	0x00041ff7

0002c054 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2c054:	2334      	movs	r3, #52	; 0x34
{
   2c056:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2c058:	4c15      	ldr	r4, [pc, #84]	; (2c0b0 <nrfx_twim_disable+0x5c>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2c05a:	7906      	ldrb	r6, [r0, #4]
{
   2c05c:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2c05e:	fb03 4306 	mla	r3, r3, r6, r4
   2c062:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   2c066:	b95b      	cbnz	r3, 2c080 <nrfx_twim_disable+0x2c>
   2c068:	4912      	ldr	r1, [pc, #72]	; (2c0b4 <nrfx_twim_disable+0x60>)
   2c06a:	4813      	ldr	r0, [pc, #76]	; (2c0b8 <nrfx_twim_disable+0x64>)
   2c06c:	f240 1375 	movw	r3, #373	; 0x175
   2c070:	4a12      	ldr	r2, [pc, #72]	; (2c0bc <nrfx_twim_disable+0x68>)
   2c072:	f00d f8a2 	bl	391ba <printk>
   2c076:	f240 1175 	movw	r1, #373	; 0x175
   2c07a:	4810      	ldr	r0, [pc, #64]	; (2c0bc <nrfx_twim_disable+0x68>)
   2c07c:	f00d faf4 	bl	39668 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   2c080:	2334      	movs	r3, #52	; 0x34
   2c082:	2100      	movs	r1, #0
   2c084:	fb03 4306 	mla	r3, r3, r6, r4
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2c088:	682a      	ldr	r2, [r5, #0]
    p_reg->INTENCLR = mask;
   2c08a:	480d      	ldr	r0, [pc, #52]	; (2c0c0 <nrfx_twim_disable+0x6c>)
    p_cb->int_mask = 0;
   2c08c:	6099      	str	r1, [r3, #8]
   2c08e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   2c092:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   2c096:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   2c09a:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2c09e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2c0a2:	2201      	movs	r2, #1
    p_cb->busy = false;
   2c0a4:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2c0a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   2c0ac:	bd70      	pop	{r4, r5, r6, pc}
   2c0ae:	bf00      	nop
   2c0b0:	20017bdc 	.word	0x20017bdc
   2c0b4:	00041e5b 	.word	0x00041e5b
   2c0b8:	0003f0e1 	.word	0x0003f0e1
   2c0bc:	00041ff7 	.word	0x00041ff7
   2c0c0:	019c0202 	.word	0x019c0202

0002c0c4 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2c0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2c0c8:	7903      	ldrb	r3, [r0, #4]
{
   2c0ca:	4604      	mov	r4, r0
   2c0cc:	460d      	mov	r5, r1
   2c0ce:	4616      	mov	r6, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2c0d0:	b93b      	cbnz	r3, 2c0e2 <nrfx_twim_xfer+0x1e>
   2c0d2:	684b      	ldr	r3, [r1, #4]
   2c0d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2c0d8:	d203      	bcs.n	2c0e2 <nrfx_twim_xfer+0x1e>
   2c0da:	688b      	ldr	r3, [r1, #8]
   2c0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2c0e0:	d30b      	bcc.n	2c0fa <nrfx_twim_xfer+0x36>
   2c0e2:	49b5      	ldr	r1, [pc, #724]	; (2c3b8 <nrfx_twim_xfer+0x2f4>)
   2c0e4:	48b5      	ldr	r0, [pc, #724]	; (2c3bc <nrfx_twim_xfer+0x2f8>)
   2c0e6:	f240 238a 	movw	r3, #650	; 0x28a
   2c0ea:	4ab5      	ldr	r2, [pc, #724]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c0ec:	f00d f865 	bl	391ba <printk>
   2c0f0:	f240 218a 	movw	r1, #650	; 0x28a
   2c0f4:	48b2      	ldr	r0, [pc, #712]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c0f6:	f00d fab7 	bl	39668 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2c0fa:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2c0fc:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2c100:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 2c3c4 <nrfx_twim_xfer+0x300>
   2c104:	fb07 f709 	mul.w	r7, r7, r9
   2c108:	f858 3007 	ldr.w	r3, [r8, r7]
   2c10c:	bb13      	cbnz	r3, 2c154 <nrfx_twim_xfer+0x90>
   2c10e:	782b      	ldrb	r3, [r5, #0]
   2c110:	2b02      	cmp	r3, #2
   2c112:	d00f      	beq.n	2c134 <nrfx_twim_xfer+0x70>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   2c114:	782b      	ldrb	r3, [r5, #0]
   2c116:	2b03      	cmp	r3, #3
   2c118:	d11c      	bne.n	2c154 <nrfx_twim_xfer+0x90>
   2c11a:	f240 2393 	movw	r3, #659	; 0x293
   2c11e:	4aa8      	ldr	r2, [pc, #672]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c120:	49a9      	ldr	r1, [pc, #676]	; (2c3c8 <nrfx_twim_xfer+0x304>)
   2c122:	48a6      	ldr	r0, [pc, #664]	; (2c3bc <nrfx_twim_xfer+0x2f8>)
   2c124:	f00d f849 	bl	391ba <printk>
   2c128:	f240 2193 	movw	r1, #659	; 0x293
   2c12c:	48a4      	ldr	r0, [pc, #656]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c12e:	f00d fa9b 	bl	39668 <assert_post_action>
   2c132:	e00f      	b.n	2c154 <nrfx_twim_xfer+0x90>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2c134:	f240 2392 	movw	r3, #658	; 0x292
   2c138:	4aa1      	ldr	r2, [pc, #644]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c13a:	49a4      	ldr	r1, [pc, #656]	; (2c3cc <nrfx_twim_xfer+0x308>)
   2c13c:	489f      	ldr	r0, [pc, #636]	; (2c3bc <nrfx_twim_xfer+0x2f8>)
   2c13e:	f00d f83c 	bl	391ba <printk>
   2c142:	f240 2192 	movw	r1, #658	; 0x292
   2c146:	489e      	ldr	r0, [pc, #632]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c148:	f00d fa8e 	bl	39668 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   2c14c:	f858 3007 	ldr.w	r3, [r8, r7]
   2c150:	2b00      	cmp	r3, #0
   2c152:	d0df      	beq.n	2c114 <nrfx_twim_xfer+0x50>
    p_cb->error = false;
   2c154:	2334      	movs	r3, #52	; 0x34
   2c156:	2200      	movs	r2, #0
   2c158:	fb03 8309 	mla	r3, r3, r9, r8
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   2c15c:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
   2c15e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   2c162:	686b      	ldr	r3, [r5, #4]
   2c164:	b14b      	cbz	r3, 2c17a <nrfx_twim_xfer+0xb6>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2c166:	68eb      	ldr	r3, [r5, #12]
   2c168:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   2c16c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2c170:	d003      	beq.n	2c17a <nrfx_twim_xfer+0xb6>
        return err_code;
   2c172:	4f97      	ldr	r7, [pc, #604]	; (2c3d0 <nrfx_twim_xfer+0x30c>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2c174:	4638      	mov	r0, r7
   2c176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   2c17a:	2734      	movs	r7, #52	; 0x34
   2c17c:	fb07 8709 	mla	r7, r7, r9, r8
    p_reg->INTENCLR = mask;
   2c180:	4b94      	ldr	r3, [pc, #592]	; (2c3d4 <nrfx_twim_xfer+0x310>)
   2c182:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   2c186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   2c18a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   2c18e:	b123      	cbz	r3, 2c19a <nrfx_twim_xfer+0xd6>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2c190:	68bb      	ldr	r3, [r7, #8]
        return err_code;
   2c192:	4f91      	ldr	r7, [pc, #580]	; (2c3d8 <nrfx_twim_xfer+0x314>)
    p_reg->INTENSET = mask;
   2c194:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   2c198:	e7ec      	b.n	2c174 <nrfx_twim_xfer+0xb0>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   2c19a:	f016 0f14 	tst.w	r6, #20
   2c19e:	bf0c      	ite	eq
   2c1a0:	2301      	moveq	r3, #1
   2c1a2:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   2c1a4:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   2c1a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   2c1aa:	f107 0c0c 	add.w	ip, r7, #12
   2c1ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2c1b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2c1b6:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
   2c1ba:	623e      	str	r6, [r7, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   2c1bc:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   2c1c0:	f3c6 1300 	ubfx	r3, r6, #4, #1
   2c1c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   2c1c8:	786b      	ldrb	r3, [r5, #1]
   2c1ca:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c1ce:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   2c1d2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2c1d6:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   2c1da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2c1de:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   2c1e2:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   2c1e6:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   2c1ea:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   2c1ee:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   2c1f2:	bf18      	it	ne
   2c1f4:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   2c1f6:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   2c1fa:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   2c1fe:	bf18      	it	ne
   2c200:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   2c202:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   2c206:	782b      	ldrb	r3, [r5, #0]
   2c208:	2b03      	cmp	r3, #3
   2c20a:	f200 8102 	bhi.w	2c412 <nrfx_twim_xfer+0x34e>
   2c20e:	e8df f013 	tbh	[pc, r3, lsl #1]
   2c212:	00b9      	.short	0x00b9
   2c214:	009b00ed 	.word	0x009b00ed
   2c218:	0004      	.short	0x0004
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   2c21a:	06f2      	lsls	r2, r6, #27
   2c21c:	d50b      	bpl.n	2c236 <nrfx_twim_xfer+0x172>
   2c21e:	496f      	ldr	r1, [pc, #444]	; (2c3dc <nrfx_twim_xfer+0x318>)
   2c220:	4866      	ldr	r0, [pc, #408]	; (2c3bc <nrfx_twim_xfer+0x2f8>)
   2c222:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   2c226:	4a66      	ldr	r2, [pc, #408]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c228:	f00c ffc7 	bl	391ba <printk>
   2c22c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   2c230:	4863      	ldr	r0, [pc, #396]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c232:	f00d fa19 	bl	39668 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   2c236:	0733      	lsls	r3, r6, #28
   2c238:	d50b      	bpl.n	2c252 <nrfx_twim_xfer+0x18e>
   2c23a:	4969      	ldr	r1, [pc, #420]	; (2c3e0 <nrfx_twim_xfer+0x31c>)
   2c23c:	485f      	ldr	r0, [pc, #380]	; (2c3bc <nrfx_twim_xfer+0x2f8>)
   2c23e:	f240 13cf 	movw	r3, #463	; 0x1cf
   2c242:	4a5f      	ldr	r2, [pc, #380]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c244:	f00c ffb9 	bl	391ba <printk>
   2c248:	f240 11cf 	movw	r1, #463	; 0x1cf
   2c24c:	485c      	ldr	r0, [pc, #368]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c24e:	f00d fa0b 	bl	39668 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   2c252:	0777      	lsls	r7, r6, #29
   2c254:	d50b      	bpl.n	2c26e <nrfx_twim_xfer+0x1aa>
   2c256:	4963      	ldr	r1, [pc, #396]	; (2c3e4 <nrfx_twim_xfer+0x320>)
   2c258:	4858      	ldr	r0, [pc, #352]	; (2c3bc <nrfx_twim_xfer+0x2f8>)
   2c25a:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   2c25e:	4a58      	ldr	r2, [pc, #352]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c260:	f00c ffab 	bl	391ba <printk>
   2c264:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   2c268:	4855      	ldr	r0, [pc, #340]	; (2c3c0 <nrfx_twim_xfer+0x2fc>)
   2c26a:	f00d f9fd 	bl	39668 <assert_post_action>
   2c26e:	692b      	ldr	r3, [r5, #16]
   2c270:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2c274:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2c278:	f47f af7b 	bne.w	2c172 <nrfx_twim_xfer+0xae>
    p_reg->SHORTS = mask;
   2c27c:	f44f 7280 	mov.w	r2, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2c280:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   2c282:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2c286:	686a      	ldr	r2, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2c288:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2c28c:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c290:	2200      	movs	r2, #0
   2c292:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   2c296:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c29a:	2101      	movs	r1, #1
   2c29c:	6221      	str	r1, [r4, #32]
   2c29e:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c2a0:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   2c2a4:	2900      	cmp	r1, #0
   2c2a6:	d0fb      	beq.n	2c2a0 <nrfx_twim_xfer+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c2a8:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   2c2ac:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   2c2b0:	68aa      	ldr	r2, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2c2b2:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2c2b6:	2334      	movs	r3, #52	; 0x34
    p_reg->TXD.MAXCNT = length;
   2c2b8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
   2c2bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   2c2c0:	fb03 8309 	mla	r3, r3, r9, r8
   2c2c4:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   2c2c6:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   2c2c8:	4f47      	ldr	r7, [pc, #284]	; (2c3e8 <nrfx_twim_xfer+0x324>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   2c2ca:	0730      	lsls	r0, r6, #28
   2c2cc:	d407      	bmi.n	2c2de <nrfx_twim_xfer+0x21a>
   2c2ce:	782a      	ldrb	r2, [r5, #0]
   2c2d0:	2a03      	cmp	r2, #3
   2c2d2:	d004      	beq.n	2c2de <nrfx_twim_xfer+0x21a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c2d4:	2201      	movs	r2, #1
   2c2d6:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   2c2d8:	686b      	ldr	r3, [r5, #4]
   2c2da:	b903      	cbnz	r3, 2c2de <nrfx_twim_xfer+0x21a>
   2c2dc:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   2c2de:	2334      	movs	r3, #52	; 0x34
   2c2e0:	fb03 f309 	mul.w	r3, r3, r9
   2c2e4:	f858 1003 	ldr.w	r1, [r8, r3]
   2c2e8:	eb08 0203 	add.w	r2, r8, r3
   2c2ec:	2900      	cmp	r1, #0
   2c2ee:	f040 8093 	bne.w	2c418 <nrfx_twim_xfer+0x354>
   2c2f2:	2001      	movs	r0, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c2f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   2c2f8:	2b00      	cmp	r3, #0
   2c2fa:	f000 80a5 	beq.w	2c448 <nrfx_twim_xfer+0x384>
   2c2fe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2c302:	2b00      	cmp	r3, #0
   2c304:	f040 80a3 	bne.w	2c44e <nrfx_twim_xfer+0x38a>
   2c308:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2c30c:	2b00      	cmp	r3, #0
   2c30e:	f000 80b2 	beq.w	2c476 <nrfx_twim_xfer+0x3b2>
                transmission_finished = true;
   2c312:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c314:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   2c318:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c31c:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   2c320:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   2c324:	2d00      	cmp	r5, #0
   2c326:	f000 809d 	beq.w	2c464 <nrfx_twim_xfer+0x3a0>
   2c32a:	f412 7f00 	tst.w	r2, #512	; 0x200
   2c32e:	f402 7280 	and.w	r2, r2, #256	; 0x100
   2c332:	f040 809a 	bne.w	2c46a <nrfx_twim_xfer+0x3a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c336:	6220      	str	r0, [r4, #32]
   2c338:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   2c33a:	2a00      	cmp	r2, #0
   2c33c:	d0da      	beq.n	2c2f4 <nrfx_twim_xfer+0x230>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c33e:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
   2c342:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   2c346:	e7d5      	b.n	2c2f4 <nrfx_twim_xfer+0x230>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2c348:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2c34a:	68ea      	ldr	r2, [r5, #12]
   2c34c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2c350:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   2c354:	692b      	ldr	r3, [r5, #16]
   2c356:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2c35a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2c35e:	f47f af08 	bne.w	2c172 <nrfx_twim_xfer+0xae>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   2c362:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2c364:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   2c368:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   2c36c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   2c370:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2c374:	2334      	movs	r3, #52	; 0x34
   2c376:	2202      	movs	r2, #2
   2c378:	fb03 8309 	mla	r3, r3, r9, r8
   2c37c:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c37e:	2301      	movs	r3, #1
   2c380:	6223      	str	r3, [r4, #32]
   2c382:	e7a0      	b.n	2c2c6 <nrfx_twim_xfer+0x202>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2c384:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2c386:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   2c388:	f016 0f20 	tst.w	r6, #32
   2c38c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2c390:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   2c394:	f04f 0334 	mov.w	r3, #52	; 0x34
   2c398:	d008      	beq.n	2c3ac <nrfx_twim_xfer+0x2e8>
    p_reg->SHORTS = mask;
   2c39a:	f44f 7280 	mov.w	r2, #256	; 0x100
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2c39e:	fb03 8309 	mla	r3, r3, r9, r8
   2c3a2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   2c3a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   2c3aa:	e7e7      	b.n	2c37c <nrfx_twim_xfer+0x2b8>
   2c3ac:	f44f 7200 	mov.w	r2, #512	; 0x200
   2c3b0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2c3b4:	e7df      	b.n	2c376 <nrfx_twim_xfer+0x2b2>
   2c3b6:	bf00      	nop
   2c3b8:	0004207c 	.word	0x0004207c
   2c3bc:	0003f0e1 	.word	0x0003f0e1
   2c3c0:	00041ff7 	.word	0x00041ff7
   2c3c4:	20017bdc 	.word	0x20017bdc
   2c3c8:	00042177 	.word	0x00042177
   2c3cc:	00042127 	.word	0x00042127
   2c3d0:	0bad000a 	.word	0x0bad000a
   2c3d4:	019c0202 	.word	0x019c0202
   2c3d8:	0bad000b 	.word	0x0bad000b
   2c3dc:	000421c7 	.word	0x000421c7
   2c3e0:	000421dd 	.word	0x000421dd
   2c3e4:	000421f3 	.word	0x000421f3
   2c3e8:	0bad0000 	.word	0x0bad0000
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2c3ec:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2c3ee:	68ea      	ldr	r2, [r5, #12]
   2c3f0:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2c3f4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   2c3f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2c3fc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2c400:	2334      	movs	r3, #52	; 0x34
   2c402:	2202      	movs	r2, #2
   2c404:	fb03 8309 	mla	r3, r3, r9, r8
   2c408:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c40a:	2301      	movs	r3, #1
   2c40c:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   2c40e:	2300      	movs	r3, #0
   2c410:	e75a      	b.n	2c2c8 <nrfx_twim_xfer+0x204>
    switch (p_xfer_desc->type)
   2c412:	2308      	movs	r3, #8
   2c414:	4f2d      	ldr	r7, [pc, #180]	; (2c4cc <nrfx_twim_xfer+0x408>)
   2c416:	e758      	b.n	2c2ca <nrfx_twim_xfer+0x206>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   2c418:	0771      	lsls	r1, r6, #29
            p_cb->int_mask = 0;
   2c41a:	bf44      	itt	mi
   2c41c:	2300      	movmi	r3, #0
   2c41e:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   2c420:	0672      	lsls	r2, r6, #25
   2c422:	d406      	bmi.n	2c432 <nrfx_twim_xfer+0x36e>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   2c424:	2334      	movs	r3, #52	; 0x34
   2c426:	fb03 8309 	mla	r3, r3, r9, r8
   2c42a:	689a      	ldr	r2, [r3, #8]
   2c42c:	f042 0202 	orr.w	r2, r2, #2
   2c430:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   2c432:	2334      	movs	r3, #52	; 0x34
   2c434:	fb03 8309 	mla	r3, r3, r9, r8
   2c438:	689a      	ldr	r2, [r3, #8]
   2c43a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2c43e:	609a      	str	r2, [r3, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2c440:	689b      	ldr	r3, [r3, #8]
    p_reg->INTENSET = mask;
   2c442:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2c446:	e695      	b.n	2c174 <nrfx_twim_xfer+0xb0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c448:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2c44c:	b123      	cbz	r3, 2c458 <nrfx_twim_xfer+0x394>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c44e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   2c452:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c456:	e757      	b.n	2c308 <nrfx_twim_xfer+0x244>
   2c458:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2c45c:	2a00      	cmp	r2, #0
   2c45e:	f43f af49 	beq.w	2c2f4 <nrfx_twim_xfer+0x230>
   2c462:	e757      	b.n	2c314 <nrfx_twim_xfer+0x250>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c464:	6220      	str	r0, [r4, #32]
   2c466:	6160      	str	r0, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   2c468:	e744      	b.n	2c2f4 <nrfx_twim_xfer+0x230>
   2c46a:	2a00      	cmp	r2, #0
   2c46c:	f47f af67 	bne.w	2c33e <nrfx_twim_xfer+0x27a>
        } while (!transmission_finished);
   2c470:	2b00      	cmp	r3, #0
   2c472:	f43f af3f 	beq.w	2c2f4 <nrfx_twim_xfer+0x230>
        p_cb->busy = false;
   2c476:	2134      	movs	r1, #52	; 0x34
   2c478:	2000      	movs	r0, #0
   2c47a:	fb01 8209 	mla	r2, r1, r9, r8
    uint32_t error_source = p_reg->ERRORSRC;
   2c47e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   2c482:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   2c486:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   2c48a:	b18b      	cbz	r3, 2c4b0 <nrfx_twim_xfer+0x3ec>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   2c48c:	4a10      	ldr	r2, [pc, #64]	; (2c4d0 <nrfx_twim_xfer+0x40c>)
   2c48e:	f013 0f01 	tst.w	r3, #1
   2c492:	4f10      	ldr	r7, [pc, #64]	; (2c4d4 <nrfx_twim_xfer+0x410>)
   2c494:	bf18      	it	ne
   2c496:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   2c498:	f013 0f02 	tst.w	r3, #2
   2c49c:	f102 0201 	add.w	r2, r2, #1
   2c4a0:	bf18      	it	ne
   2c4a2:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   2c4a4:	f013 0f04 	tst.w	r3, #4
   2c4a8:	4b0b      	ldr	r3, [pc, #44]	; (2c4d8 <nrfx_twim_xfer+0x414>)
   2c4aa:	bf18      	it	ne
   2c4ac:	461f      	movne	r7, r3
   2c4ae:	e661      	b.n	2c174 <nrfx_twim_xfer+0xb0>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   2c4b0:	0673      	lsls	r3, r6, #25
   2c4b2:	f53f ae5f 	bmi.w	2c174 <nrfx_twim_xfer+0xb0>
                !xfer_completeness_check(p_twim, p_cb))
   2c4b6:	4620      	mov	r0, r4
   2c4b8:	fb09 8101 	mla	r1, r9, r1, r8
   2c4bc:	f00f f9eb 	bl	3b896 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   2c4c0:	4b04      	ldr	r3, [pc, #16]	; (2c4d4 <nrfx_twim_xfer+0x410>)
   2c4c2:	2800      	cmp	r0, #0
   2c4c4:	bf08      	it	eq
   2c4c6:	461f      	moveq	r7, r3
   2c4c8:	e654      	b.n	2c174 <nrfx_twim_xfer+0xb0>
   2c4ca:	bf00      	nop
   2c4cc:	0bad0004 	.word	0x0bad0004
   2c4d0:	0bae0000 	.word	0x0bae0000
   2c4d4:	0bad0001 	.word	0x0bad0001
   2c4d8:	0bae0002 	.word	0x0bae0002

0002c4dc <nrfx_twim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
   2c4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   2c4de:	4c61      	ldr	r4, [pc, #388]	; (2c664 <nrfx_twim_1_irq_handler+0x188>)
{
   2c4e0:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   2c4e2:	6823      	ldr	r3, [r4, #0]
   2c4e4:	b95b      	cbnz	r3, 2c4fe <nrfx_twim_1_irq_handler+0x22>
   2c4e6:	4960      	ldr	r1, [pc, #384]	; (2c668 <nrfx_twim_1_irq_handler+0x18c>)
   2c4e8:	4860      	ldr	r0, [pc, #384]	; (2c66c <nrfx_twim_1_irq_handler+0x190>)
   2c4ea:	f240 23cd 	movw	r3, #717	; 0x2cd
   2c4ee:	4a60      	ldr	r2, [pc, #384]	; (2c670 <nrfx_twim_1_irq_handler+0x194>)
   2c4f0:	f00c fe63 	bl	391ba <printk>
   2c4f4:	f240 21cd 	movw	r1, #717	; 0x2cd
   2c4f8:	485d      	ldr	r0, [pc, #372]	; (2c670 <nrfx_twim_1_irq_handler+0x194>)
   2c4fa:	f00d f8b5 	bl	39668 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c4fe:	4d5d      	ldr	r5, [pc, #372]	; (2c674 <nrfx_twim_1_irq_handler+0x198>)
   2c500:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2c504:	b1fb      	cbz	r3, 2c546 <nrfx_twim_1_irq_handler+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c506:	2300      	movs	r3, #0
   2c508:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   2c50c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c510:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2c514:	b9bb      	cbnz	r3, 2c546 <nrfx_twim_1_irq_handler+0x6a>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   2c516:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2c518:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2c51c:	2302      	movs	r3, #2
   2c51e:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2c520:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   2c522:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c526:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   2c52a:	b11b      	cbz	r3, 2c534 <nrfx_twim_1_irq_handler+0x58>
    return p_reg->SHORTS;
   2c52c:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   2c530:	059e      	lsls	r6, r3, #22
   2c532:	d403      	bmi.n	2c53c <nrfx_twim_1_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c534:	2201      	movs	r2, #1
   2c536:	4b4f      	ldr	r3, [pc, #316]	; (2c674 <nrfx_twim_1_irq_handler+0x198>)
   2c538:	621a      	str	r2, [r3, #32]
   2c53a:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   2c53c:	2301      	movs	r3, #1
   2c53e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
}
   2c542:	b007      	add	sp, #28
   2c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c546:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2c54a:	2b00      	cmp	r3, #0
   2c54c:	d05a      	beq.n	2c604 <nrfx_twim_1_irq_handler+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c54e:	2300      	movs	r3, #0
   2c550:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   2c554:	6a27      	ldr	r7, [r4, #32]
   2c556:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   2c55a:	067d      	lsls	r5, r7, #25
   2c55c:	d40a      	bmi.n	2c574 <nrfx_twim_1_irq_handler+0x98>
   2c55e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2c562:	b93b      	cbnz	r3, 2c574 <nrfx_twim_1_irq_handler+0x98>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   2c564:	493f      	ldr	r1, [pc, #252]	; (2c664 <nrfx_twim_1_irq_handler+0x188>)
   2c566:	4843      	ldr	r0, [pc, #268]	; (2c674 <nrfx_twim_1_irq_handler+0x198>)
   2c568:	f00f f995 	bl	3b896 <xfer_completeness_check>
   2c56c:	f080 0001 	eor.w	r0, r0, #1
   2c570:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   2c574:	f017 0704 	ands.w	r7, r7, #4
            if (!p_cb->repeated || p_cb->error)
   2c578:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   2c57c:	d120      	bne.n	2c5c0 <nrfx_twim_1_irq_handler+0xe4>
            event.xfer_desc = p_cb->xfer_desc;
   2c57e:	4e3e      	ldr	r6, [pc, #248]	; (2c678 <nrfx_twim_1_irq_handler+0x19c>)
   2c580:	ad01      	add	r5, sp, #4
   2c582:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2c584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c586:	6833      	ldr	r3, [r6, #0]
   2c588:	602b      	str	r3, [r5, #0]
   2c58a:	4b3a      	ldr	r3, [pc, #232]	; (2c674 <nrfx_twim_1_irq_handler+0x198>)
   2c58c:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   2c590:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   2c594:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   2c598:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   2c59c:	f1bc 0f00 	cmp.w	ip, #0
   2c5a0:	d002      	beq.n	2c5a8 <nrfx_twim_1_irq_handler+0xcc>
   2c5a2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   2c5a6:	b15a      	cbz	r2, 2c5c0 <nrfx_twim_1_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   2c5a8:	2200      	movs	r2, #0
   2c5aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   2c5ae:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   2c5b0:	4a32      	ldr	r2, [pc, #200]	; (2c67c <nrfx_twim_1_irq_handler+0x1a0>)
   2c5b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   2c5b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   2c5ba:	4b31      	ldr	r3, [pc, #196]	; (2c680 <nrfx_twim_1_irq_handler+0x1a4>)
   2c5bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   2c5c0:	4a2c      	ldr	r2, [pc, #176]	; (2c674 <nrfx_twim_1_irq_handler+0x198>)
   2c5c2:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   2c5c6:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   2c5c8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   2c5cc:	d443      	bmi.n	2c656 <nrfx_twim_1_irq_handler+0x17a>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   2c5ce:	0759      	lsls	r1, r3, #29
   2c5d0:	d443      	bmi.n	2c65a <nrfx_twim_1_irq_handler+0x17e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   2c5d2:	07da      	lsls	r2, r3, #31
   2c5d4:	d443      	bmi.n	2c65e <nrfx_twim_1_irq_handler+0x182>
    else if (p_cb->error)
   2c5d6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2c5da:	009b      	lsls	r3, r3, #2
   2c5dc:	b2db      	uxtb	r3, r3
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   2c5de:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   2c5e2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2c5e6:	b90b      	cbnz	r3, 2c5ec <nrfx_twim_1_irq_handler+0x110>
        p_cb->busy = false;
   2c5e8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   2c5ec:	6a23      	ldr	r3, [r4, #32]
   2c5ee:	075b      	lsls	r3, r3, #29
   2c5f0:	d503      	bpl.n	2c5fa <nrfx_twim_1_irq_handler+0x11e>
   2c5f2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2c5f6:	2b00      	cmp	r3, #0
   2c5f8:	d0a3      	beq.n	2c542 <nrfx_twim_1_irq_handler+0x66>
        p_cb->handler(&event, p_cb->p_context);
   2c5fa:	e9d4 3100 	ldrd	r3, r1, [r4]
   2c5fe:	4668      	mov	r0, sp
   2c600:	4798      	blx	r3
}
   2c602:	e79e      	b.n	2c542 <nrfx_twim_1_irq_handler+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c604:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   2c608:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   2c60c:	7b23      	ldrb	r3, [r4, #12]
   2c60e:	b983      	cbnz	r3, 2c632 <nrfx_twim_1_irq_handler+0x156>
            event.xfer_desc = p_cb->xfer_desc;
   2c610:	4f19      	ldr	r7, [pc, #100]	; (2c678 <nrfx_twim_1_irq_handler+0x19c>)
   2c612:	ae01      	add	r6, sp, #4
   2c614:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2c616:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2c618:	683b      	ldr	r3, [r7, #0]
   2c61a:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   2c61c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2c620:	2b00      	cmp	r3, #0
   2c622:	d1cd      	bne.n	2c5c0 <nrfx_twim_1_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   2c624:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   2c628:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2c62a:	4b14      	ldr	r3, [pc, #80]	; (2c67c <nrfx_twim_1_irq_handler+0x1a0>)
   2c62c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   2c630:	e7c1      	b.n	2c5b6 <nrfx_twim_1_irq_handler+0xda>
    p_reg->SHORTS = mask;
   2c632:	f44f 7300 	mov.w	r3, #512	; 0x200
   2c636:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   2c63a:	f240 2302 	movw	r3, #514	; 0x202
   2c63e:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2c640:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   2c644:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2c648:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   2c64a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c64e:	2301      	movs	r3, #1
   2c650:	60ab      	str	r3, [r5, #8]
   2c652:	622b      	str	r3, [r5, #32]
            return;
   2c654:	e775      	b.n	2c542 <nrfx_twim_1_irq_handler+0x66>
   2c656:	2301      	movs	r3, #1
   2c658:	e7c1      	b.n	2c5de <nrfx_twim_1_irq_handler+0x102>
   2c65a:	2302      	movs	r3, #2
   2c65c:	e7bf      	b.n	2c5de <nrfx_twim_1_irq_handler+0x102>
   2c65e:	2303      	movs	r3, #3
   2c660:	e7bd      	b.n	2c5de <nrfx_twim_1_irq_handler+0x102>
   2c662:	bf00      	nop
   2c664:	20017bdc 	.word	0x20017bdc
   2c668:	00041fe9 	.word	0x00041fe9
   2c66c:	0003f0e1 	.word	0x0003f0e1
   2c670:	00041ff7 	.word	0x00041ff7
   2c674:	40009000 	.word	0x40009000
   2c678:	20017be8 	.word	0x20017be8
   2c67c:	019c0202 	.word	0x019c0202
   2c680:	e000e100 	.word	0xe000e100

0002c684 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2c684:	6802      	ldr	r2, [r0, #0]
{
   2c686:	b510      	push	{r4, lr}
    switch (port)
   2c688:	0953      	lsrs	r3, r2, #5
{
   2c68a:	4604      	mov	r4, r0
    switch (port)
   2c68c:	d104      	bne.n	2c698 <nrf_gpio_pin_port_decode+0x14>
    return (mask & (1UL << pin_number)) ? true : false;
   2c68e:	f04f 33ff 	mov.w	r3, #4294967295
   2c692:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2c694:	07db      	lsls	r3, r3, #31
   2c696:	d40b      	bmi.n	2c6b0 <nrf_gpio_pin_port_decode+0x2c>
   2c698:	490f      	ldr	r1, [pc, #60]	; (2c6d8 <nrf_gpio_pin_port_decode+0x54>)
   2c69a:	4810      	ldr	r0, [pc, #64]	; (2c6dc <nrf_gpio_pin_port_decode+0x58>)
   2c69c:	f44f 7305 	mov.w	r3, #532	; 0x214
   2c6a0:	4a0f      	ldr	r2, [pc, #60]	; (2c6e0 <nrf_gpio_pin_port_decode+0x5c>)
   2c6a2:	f00c fd8a 	bl	391ba <printk>
   2c6a6:	f44f 7105 	mov.w	r1, #532	; 0x214
   2c6aa:	480d      	ldr	r0, [pc, #52]	; (2c6e0 <nrf_gpio_pin_port_decode+0x5c>)
   2c6ac:	f00c ffdc 	bl	39668 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2c6b0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2c6b2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2c6b6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2c6b8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2c6ba:	d00b      	beq.n	2c6d4 <nrf_gpio_pin_port_decode+0x50>
            NRFX_ASSERT(0);
   2c6bc:	4909      	ldr	r1, [pc, #36]	; (2c6e4 <nrf_gpio_pin_port_decode+0x60>)
   2c6be:	4807      	ldr	r0, [pc, #28]	; (2c6dc <nrf_gpio_pin_port_decode+0x58>)
   2c6c0:	f240 2319 	movw	r3, #537	; 0x219
   2c6c4:	4a06      	ldr	r2, [pc, #24]	; (2c6e0 <nrf_gpio_pin_port_decode+0x5c>)
   2c6c6:	f00c fd78 	bl	391ba <printk>
   2c6ca:	f240 2119 	movw	r1, #537	; 0x219
   2c6ce:	4804      	ldr	r0, [pc, #16]	; (2c6e0 <nrf_gpio_pin_port_decode+0x5c>)
   2c6d0:	f00c ffca 	bl	39668 <assert_post_action>
}
   2c6d4:	4804      	ldr	r0, [pc, #16]	; (2c6e8 <nrf_gpio_pin_port_decode+0x64>)
   2c6d6:	bd10      	pop	{r4, pc}
   2c6d8:	00040897 	.word	0x00040897
   2c6dc:	0003f0e1 	.word	0x0003f0e1
   2c6e0:	00040864 	.word	0x00040864
   2c6e4:	000422ae 	.word	0x000422ae
   2c6e8:	40842500 	.word	0x40842500

0002c6ec <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   2c6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c6ee:	460c      	mov	r4, r1
   2c6f0:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   2c6f2:	f00f f900 	bl	3b8f6 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   2c6f6:	4620      	mov	r0, r4
   2c6f8:	f00f f8fd 	bl	3b8f6 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c6fc:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   2c6fe:	f240 650d 	movw	r5, #1549	; 0x60d
   2c702:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c704:	f7ff ffbe 	bl	2c684 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2c708:	9b01      	ldr	r3, [sp, #4]
   2c70a:	9401      	str	r4, [sp, #4]
   2c70c:	3380      	adds	r3, #128	; 0x80
   2c70e:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c712:	a801      	add	r0, sp, #4
   2c714:	f7ff ffb6 	bl	2c684 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2c718:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2c71a:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   2c71c:	3380      	adds	r3, #128	; 0x80
   2c71e:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   2c722:	2004      	movs	r0, #4
   2c724:	f00f f894 	bl	3b850 <nrfx_busy_wait>
   2c728:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c72a:	a801      	add	r0, sp, #4
   2c72c:	9401      	str	r4, [sp, #4]
   2c72e:	f7ff ffa9 	bl	2c684 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2c732:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   2c734:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2c736:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   2c738:	07db      	lsls	r3, r3, #31
   2c73a:	d414      	bmi.n	2c766 <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c73c:	a801      	add	r0, sp, #4
   2c73e:	9601      	str	r6, [sp, #4]
   2c740:	f7ff ffa0 	bl	2c684 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2c744:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
   2c746:	3d01      	subs	r5, #1
   2c748:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   2c74c:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   2c74e:	2004      	movs	r0, #4
   2c750:	f00f f87e 	bl	3b850 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   2c754:	4630      	mov	r0, r6
   2c756:	f00f f8ce 	bl	3b8f6 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   2c75a:	2004      	movs	r0, #4
   2c75c:	f00f f878 	bl	3b850 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   2c760:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   2c764:	d1e1      	bne.n	2c72a <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c766:	a801      	add	r0, sp, #4
   2c768:	9401      	str	r4, [sp, #4]
   2c76a:	f7ff ff8b 	bl	2c684 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2c76e:	2301      	movs	r3, #1
   2c770:	9a01      	ldr	r2, [sp, #4]
   2c772:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2c774:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   2c776:	2004      	movs	r0, #4
   2c778:	f00f f86a 	bl	3b850 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   2c77c:	4620      	mov	r0, r4
   2c77e:	f00f f8ba 	bl	3b8f6 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   2c782:	2004      	movs	r0, #4
   2c784:	f00f f864 	bl	3b850 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c788:	a801      	add	r0, sp, #4
   2c78a:	9401      	str	r4, [sp, #4]
   2c78c:	f7ff ff7a 	bl	2c684 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2c790:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   2c792:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   2c794:	4803      	ldr	r0, [pc, #12]	; (2c7a4 <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2c796:	40d3      	lsrs	r3, r2
   2c798:	f003 0301 	and.w	r3, r3, #1
   2c79c:	1ac0      	subs	r0, r0, r3
   2c79e:	b003      	add	sp, #12
   2c7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c7a2:	bf00      	nop
   2c7a4:	0bad0001 	.word	0x0bad0001

0002c7a8 <lfs_dir_traverse_filter>:
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
   2c7a8:	4a16      	ldr	r2, [pc, #88]	; (2c804 <lfs_dir_traverse_filter+0x5c>)
   2c7aa:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
        lfs_tag_t tag, const void *buffer) {
   2c7ae:	b530      	push	{r4, r5, lr}
            : LFS_MKTAG(0x700, 0x3ff, 0);
   2c7b0:	4c15      	ldr	r4, [pc, #84]	; (2c808 <lfs_dir_traverse_filter+0x60>)
   2c7b2:	bf18      	it	ne
   2c7b4:	4614      	movne	r4, r2

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
   2c7b6:	6803      	ldr	r3, [r0, #0]
   2c7b8:	ea83 0501 	eor.w	r5, r3, r1
   2c7bc:	4225      	tst	r5, r4
   2c7be:	d01f      	beq.n	2c800 <lfs_dir_traverse_filter+0x58>
    return ((int32_t)(tag << 22) >> 22) == -1;
   2c7c0:	f343 0409 	sbfx	r4, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
   2c7c4:	3401      	adds	r4, #1
   2c7c6:	d01b      	beq.n	2c800 <lfs_dir_traverse_filter+0x58>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
   2c7c8:	ea01 0402 	and.w	r4, r1, r2
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
   2c7cc:	4a0f      	ldr	r2, [pc, #60]	; (2c80c <lfs_dir_traverse_filter+0x64>)
   2c7ce:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   2c7d0:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
   2c7d4:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
   2c7d8:	4294      	cmp	r4, r2
   2c7da:	d011      	beq.n	2c800 <lfs_dir_traverse_filter+0x58>
    return (tag & 0x70000000) >> 20;
   2c7dc:	0d0a      	lsrs	r2, r1, #20
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   2c7de:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
   2c7e2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   2c7e6:	d109      	bne.n	2c7fc <lfs_dir_traverse_filter+0x54>
   2c7e8:	f3c3 2489 	ubfx	r4, r3, #10, #10
   2c7ec:	f3c1 2189 	ubfx	r1, r1, #10, #10
   2c7f0:	428c      	cmp	r4, r1
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   2c7f2:	bf22      	ittt	cs
   2c7f4:	b252      	sxtbcs	r2, r2
   2c7f6:	eb03 2382 	addcs.w	r3, r3, r2, lsl #10
   2c7fa:	6003      	strcs	r3, [r0, #0]
    }

    return false;
   2c7fc:	2000      	movs	r0, #0
}
   2c7fe:	bd30      	pop	{r4, r5, pc}
        return true;
   2c800:	2001      	movs	r0, #1
   2c802:	e7fc      	b.n	2c7fe <lfs_dir_traverse_filter+0x56>
   2c804:	7ffffc00 	.word	0x7ffffc00
   2c808:	700ffc00 	.word	0x700ffc00
   2c80c:	000ffc00 	.word	0x000ffc00

0002c810 <lfs_fs_preporphans>:
    }

    return 0;
}

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
   2c810:	b538      	push	{r3, r4, r5, lr}
    return tag & 0x000003ff;
   2c812:	6b03      	ldr	r3, [r0, #48]	; 0x30
static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
   2c814:	4605      	mov	r5, r0
    return tag & 0x000003ff;
   2c816:	f3c3 0309 	ubfx	r3, r3, #0, #10
static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
   2c81a:	460c      	mov	r4, r1
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
   2c81c:	b96b      	cbnz	r3, 2c83a <lfs_fs_preporphans+0x2a>
   2c81e:	2900      	cmp	r1, #0
   2c820:	da0b      	bge.n	2c83a <lfs_fs_preporphans+0x2a>
   2c822:	490c      	ldr	r1, [pc, #48]	; (2c854 <lfs_fs_preporphans+0x44>)
   2c824:	480c      	ldr	r0, [pc, #48]	; (2c858 <lfs_fs_preporphans+0x48>)
   2c826:	f241 0303 	movw	r3, #4099	; 0x1003
   2c82a:	4a0c      	ldr	r2, [pc, #48]	; (2c85c <lfs_fs_preporphans+0x4c>)
   2c82c:	f00c fcc5 	bl	391ba <printk>
   2c830:	f241 0103 	movw	r1, #4099	; 0x1003
   2c834:	4809      	ldr	r0, [pc, #36]	; (2c85c <lfs_fs_preporphans+0x4c>)
   2c836:	f00c ff17 	bl	39668 <assert_post_action>
    lfs->gstate.tag += orphans;
   2c83a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2c83c:	441c      	add	r4, r3
    return tag & 0x000003ff;
   2c83e:	f3c4 0309 	ubfx	r3, r4, #0, #10
    return lfs_tag_size(a->tag);
   2c842:	3b00      	subs	r3, #0
   2c844:	bf18      	it	ne
   2c846:	2301      	movne	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   2c848:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   2c84c:	ea44 74c3 	orr.w	r4, r4, r3, lsl #31
   2c850:	632c      	str	r4, [r5, #48]	; 0x30
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}
   2c852:	bd38      	pop	{r3, r4, r5, pc}
   2c854:	0004222f 	.word	0x0004222f
   2c858:	0003f0e1 	.word	0x0003f0e1
   2c85c:	00042209 	.word	0x00042209

0002c860 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   2c860:	b538      	push	{r3, r4, r5, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
   2c862:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   2c864:	4605      	mov	r5, r0
    LFS_ASSERT(block < lfs->cfg->block_count);
   2c866:	6a1b      	ldr	r3, [r3, #32]
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   2c868:	460c      	mov	r4, r1
    LFS_ASSERT(block < lfs->cfg->block_count);
   2c86a:	428b      	cmp	r3, r1
   2c86c:	d809      	bhi.n	2c882 <lfs_bd_erase+0x22>
   2c86e:	490e      	ldr	r1, [pc, #56]	; (2c8a8 <lfs_bd_erase+0x48>)
   2c870:	480e      	ldr	r0, [pc, #56]	; (2c8ac <lfs_bd_erase+0x4c>)
   2c872:	23e9      	movs	r3, #233	; 0xe9
   2c874:	4a0e      	ldr	r2, [pc, #56]	; (2c8b0 <lfs_bd_erase+0x50>)
   2c876:	f00c fca0 	bl	391ba <printk>
   2c87a:	21e9      	movs	r1, #233	; 0xe9
   2c87c:	480c      	ldr	r0, [pc, #48]	; (2c8b0 <lfs_bd_erase+0x50>)
   2c87e:	f00c fef3 	bl	39668 <assert_post_action>
    int err = lfs->cfg->erase(lfs->cfg, block);
   2c882:	6ea8      	ldr	r0, [r5, #104]	; 0x68
   2c884:	4621      	mov	r1, r4
   2c886:	68c3      	ldr	r3, [r0, #12]
   2c888:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
   2c88a:	1e04      	subs	r4, r0, #0
   2c88c:	dd09      	ble.n	2c8a2 <lfs_bd_erase+0x42>
   2c88e:	4909      	ldr	r1, [pc, #36]	; (2c8b4 <lfs_bd_erase+0x54>)
   2c890:	4806      	ldr	r0, [pc, #24]	; (2c8ac <lfs_bd_erase+0x4c>)
   2c892:	23eb      	movs	r3, #235	; 0xeb
   2c894:	4a06      	ldr	r2, [pc, #24]	; (2c8b0 <lfs_bd_erase+0x50>)
   2c896:	f00c fc90 	bl	391ba <printk>
   2c89a:	21eb      	movs	r1, #235	; 0xeb
   2c89c:	4804      	ldr	r0, [pc, #16]	; (2c8b0 <lfs_bd_erase+0x50>)
   2c89e:	f00c fee3 	bl	39668 <assert_post_action>
}
   2c8a2:	4620      	mov	r0, r4
   2c8a4:	bd38      	pop	{r3, r4, r5, pc}
   2c8a6:	bf00      	nop
   2c8a8:	000424e7 	.word	0x000424e7
   2c8ac:	0003f0e1 	.word	0x0003f0e1
   2c8b0:	00042209 	.word	0x00042209
   2c8b4:	00042261 	.word	0x00042261

0002c8b8 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
   2c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c8bc:	4690      	mov	r8, r2
    if (block >= lfs->cfg->block_count ||
   2c8be:	6e82      	ldr	r2, [r0, #104]	; 0x68
        void *buffer, lfs_size_t size) {
   2c8c0:	b087      	sub	sp, #28
   2c8c2:	4689      	mov	r9, r1
   2c8c4:	e9dd 4b11 	ldrd	r4, fp, [sp, #68]	; 0x44
    if (block >= lfs->cfg->block_count ||
   2c8c8:	9910      	ldr	r1, [sp, #64]	; 0x40
        void *buffer, lfs_size_t size) {
   2c8ca:	9304      	str	r3, [sp, #16]
    if (block >= lfs->cfg->block_count ||
   2c8cc:	6a13      	ldr	r3, [r2, #32]
        void *buffer, lfs_size_t size) {
   2c8ce:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
   2c8d0:	428b      	cmp	r3, r1
        void *buffer, lfs_size_t size) {
   2c8d2:	9002      	str	r0, [sp, #8]
    if (block >= lfs->cfg->block_count ||
   2c8d4:	f240 80bf 	bls.w	2ca56 <lfs_bd_read+0x19e>
   2c8d8:	69d2      	ldr	r2, [r2, #28]
            off+size > lfs->cfg->block_size) {
   2c8da:	19a3      	adds	r3, r4, r6
    if (block >= lfs->cfg->block_count ||
   2c8dc:	4293      	cmp	r3, r2
   2c8de:	f200 80ba 	bhi.w	2ca56 <lfs_bd_read+0x19e>
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
   2c8e2:	9b04      	ldr	r3, [sp, #16]
   2c8e4:	3b01      	subs	r3, #1
   2c8e6:	9305      	str	r3, [sp, #20]
    while (size > 0) {
   2c8e8:	2e00      	cmp	r6, #0
   2c8ea:	f040 8092 	bne.w	2ca12 <lfs_bd_read+0x15a>
   2c8ee:	e0b0      	b.n	2ca52 <lfs_bd_read+0x19a>
            diff = lfs_min(diff, pcache->off-off);
   2c8f0:	1b2d      	subs	r5, r5, r4
    return (a < b) ? a : b;
   2c8f2:	42b5      	cmp	r5, r6
   2c8f4:	bf28      	it	cs
   2c8f6:	4635      	movcs	r5, r6
        if (block == rcache->block &&
   2c8f8:	f8d8 3000 	ldr.w	r3, [r8]
   2c8fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2c8fe:	429a      	cmp	r2, r3
   2c900:	d11c      	bne.n	2c93c <lfs_bd_read+0x84>
                off < rcache->off + rcache->size) {
   2c902:	e9d8 1301 	ldrd	r1, r3, [r8, #4]
   2c906:	440b      	add	r3, r1
        if (block == rcache->block &&
   2c908:	42a3      	cmp	r3, r4
   2c90a:	d917      	bls.n	2c93c <lfs_bd_read+0x84>
            if (off >= rcache->off) {
   2c90c:	42a1      	cmp	r1, r4
   2c90e:	d811      	bhi.n	2c934 <lfs_bd_read+0x7c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   2c910:	1b1b      	subs	r3, r3, r4
   2c912:	429d      	cmp	r5, r3
   2c914:	bf28      	it	cs
   2c916:	461d      	movcs	r5, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   2c918:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2c91c:	1a61      	subs	r1, r4, r1
   2c91e:	4658      	mov	r0, fp
   2c920:	462a      	mov	r2, r5
   2c922:	4419      	add	r1, r3
   2c924:	f010 fea2 	bl	3d66c <memcpy>
                data += diff;
   2c928:	44ab      	add	fp, r5
                off += diff;
   2c92a:	442c      	add	r4, r5
                size -= diff;
   2c92c:	1b76      	subs	r6, r6, r5
                continue;
   2c92e:	e7db      	b.n	2c8e8 <lfs_bd_read+0x30>
   2c930:	4635      	mov	r5, r6
   2c932:	e7e1      	b.n	2c8f8 <lfs_bd_read+0x40>
            diff = lfs_min(diff, rcache->off-off);
   2c934:	1b09      	subs	r1, r1, r4
   2c936:	428d      	cmp	r5, r1
   2c938:	bf28      	it	cs
   2c93a:	460d      	movcs	r5, r1
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
   2c93c:	9b02      	ldr	r3, [sp, #8]
   2c93e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   2c940:	9b04      	ldr	r3, [sp, #16]
   2c942:	42b3      	cmp	r3, r6
   2c944:	d81f      	bhi.n	2c986 <lfs_bd_read+0xce>
   2c946:	6943      	ldr	r3, [r0, #20]
   2c948:	fbb4 f2f3 	udiv	r2, r4, r3
   2c94c:	fb03 4212 	mls	r2, r3, r2, r4
   2c950:	b9ca      	cbnz	r2, 2c986 <lfs_bd_read+0xce>
   2c952:	42b3      	cmp	r3, r6
   2c954:	d817      	bhi.n	2c986 <lfs_bd_read+0xce>
    return a - (a % alignment);
   2c956:	fbb5 faf3 	udiv	sl, r5, r3
   2c95a:	fb03 531a 	mls	r3, r3, sl, r5
   2c95e:	eba5 0a03 	sub.w	sl, r5, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
   2c962:	f8cd a000 	str.w	sl, [sp]
   2c966:	6847      	ldr	r7, [r0, #4]
   2c968:	9303      	str	r3, [sp, #12]
   2c96a:	4622      	mov	r2, r4
   2c96c:	465b      	mov	r3, fp
   2c96e:	9910      	ldr	r1, [sp, #64]	; 0x40
   2c970:	47b8      	blx	r7
            if (err) {
   2c972:	4607      	mov	r7, r0
   2c974:	2800      	cmp	r0, #0
   2c976:	d147      	bne.n	2ca08 <lfs_bd_read+0x150>
            size -= diff;
   2c978:	9b03      	ldr	r3, [sp, #12]
            data += diff;
   2c97a:	44d3      	add	fp, sl
            off += diff;
   2c97c:	4454      	add	r4, sl
            size -= diff;
   2c97e:	eba3 0a05 	sub.w	sl, r3, r5
   2c982:	4456      	add	r6, sl
            continue;
   2c984:	e7b0      	b.n	2c8e8 <lfs_bd_read+0x30>
        LFS_ASSERT(block < lfs->cfg->block_count);
   2c986:	6a03      	ldr	r3, [r0, #32]
   2c988:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2c98a:	429a      	cmp	r2, r3
   2c98c:	d309      	bcc.n	2c9a2 <lfs_bd_read+0xea>
   2c98e:	4933      	ldr	r1, [pc, #204]	; (2ca5c <lfs_bd_read+0x1a4>)
   2c990:	4833      	ldr	r0, [pc, #204]	; (2ca60 <lfs_bd_read+0x1a8>)
   2c992:	235a      	movs	r3, #90	; 0x5a
   2c994:	4a33      	ldr	r2, [pc, #204]	; (2ca64 <lfs_bd_read+0x1ac>)
   2c996:	f00c fc10 	bl	391ba <printk>
   2c99a:	215a      	movs	r1, #90	; 0x5a
   2c99c:	4831      	ldr	r0, [pc, #196]	; (2ca64 <lfs_bd_read+0x1ac>)
   2c99e:	f00c fe63 	bl	39668 <assert_post_action>
        rcache->block = block;
   2c9a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    return lfs_aligndown(a + alignment-1, alignment);
   2c9a4:	9d05      	ldr	r5, [sp, #20]
   2c9a6:	f8c8 3000 	str.w	r3, [r8]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   2c9aa:	9b02      	ldr	r3, [sp, #8]
   2c9ac:	6e98      	ldr	r0, [r3, #104]	; 0x68
   2c9ae:	6941      	ldr	r1, [r0, #20]
   2c9b0:	440d      	add	r5, r1
   2c9b2:	4425      	add	r5, r4
    return a - (a % alignment);
   2c9b4:	fbb5 f7f1 	udiv	r7, r5, r1
   2c9b8:	fbb4 f3f1 	udiv	r3, r4, r1
   2c9bc:	fb01 4313 	mls	r3, r1, r3, r4
   2c9c0:	fb01 5117 	mls	r1, r1, r7, r5
   2c9c4:	1a6d      	subs	r5, r5, r1
    return (a < b) ? a : b;
   2c9c6:	69c1      	ldr	r1, [r0, #28]
    return a - (a % alignment);
   2c9c8:	1ae2      	subs	r2, r4, r3
        rcache->size = lfs_min(
   2c9ca:	1b1b      	subs	r3, r3, r4
   2c9cc:	428d      	cmp	r5, r1
   2c9ce:	bf94      	ite	ls
   2c9d0:	195b      	addls	r3, r3, r5
   2c9d2:	185b      	addhi	r3, r3, r1
    return (a < b) ? a : b;
   2c9d4:	6a81      	ldr	r1, [r0, #40]	; 0x28
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   2c9d6:	f8c8 2004 	str.w	r2, [r8, #4]
   2c9da:	428b      	cmp	r3, r1
   2c9dc:	bf28      	it	cs
   2c9de:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
   2c9e0:	f8c8 3008 	str.w	r3, [r8, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
   2c9e4:	9300      	str	r3, [sp, #0]
   2c9e6:	6845      	ldr	r5, [r0, #4]
   2c9e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2c9ec:	9910      	ldr	r1, [sp, #64]	; 0x40
   2c9ee:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
   2c9f0:	1e07      	subs	r7, r0, #0
   2c9f2:	dd0d      	ble.n	2ca10 <lfs_bd_read+0x158>
   2c9f4:	491c      	ldr	r1, [pc, #112]	; (2ca68 <lfs_bd_read+0x1b0>)
   2c9f6:	481a      	ldr	r0, [pc, #104]	; (2ca60 <lfs_bd_read+0x1a8>)
   2c9f8:	2365      	movs	r3, #101	; 0x65
   2c9fa:	4a1a      	ldr	r2, [pc, #104]	; (2ca64 <lfs_bd_read+0x1ac>)
   2c9fc:	f00c fbdd 	bl	391ba <printk>
   2ca00:	2165      	movs	r1, #101	; 0x65
   2ca02:	4818      	ldr	r0, [pc, #96]	; (2ca64 <lfs_bd_read+0x1ac>)
   2ca04:	f00c fe30 	bl	39668 <assert_post_action>
}
   2ca08:	4638      	mov	r0, r7
   2ca0a:	b007      	add	sp, #28
   2ca0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err) {
   2ca10:	d1fa      	bne.n	2ca08 <lfs_bd_read+0x150>
        if (pcache && block == pcache->block &&
   2ca12:	f1b9 0f00 	cmp.w	r9, #0
   2ca16:	d08b      	beq.n	2c930 <lfs_bd_read+0x78>
   2ca18:	f8d9 3000 	ldr.w	r3, [r9]
   2ca1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2ca1e:	429a      	cmp	r2, r3
   2ca20:	d186      	bne.n	2c930 <lfs_bd_read+0x78>
                off < pcache->off + pcache->size) {
   2ca22:	e9d9 5701 	ldrd	r5, r7, [r9, #4]
   2ca26:	442f      	add	r7, r5
        if (pcache && block == pcache->block &&
   2ca28:	42a7      	cmp	r7, r4
   2ca2a:	d981      	bls.n	2c930 <lfs_bd_read+0x78>
            if (off >= pcache->off) {
   2ca2c:	42a5      	cmp	r5, r4
   2ca2e:	f63f af5f 	bhi.w	2c8f0 <lfs_bd_read+0x38>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   2ca32:	1b3f      	subs	r7, r7, r4
   2ca34:	42b7      	cmp	r7, r6
   2ca36:	bf28      	it	cs
   2ca38:	4637      	movcs	r7, r6
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   2ca3a:	f8d9 100c 	ldr.w	r1, [r9, #12]
   2ca3e:	1b65      	subs	r5, r4, r5
   2ca40:	4658      	mov	r0, fp
   2ca42:	463a      	mov	r2, r7
   2ca44:	4429      	add	r1, r5
   2ca46:	f010 fe11 	bl	3d66c <memcpy>
    while (size > 0) {
   2ca4a:	1bf6      	subs	r6, r6, r7
                data += diff;
   2ca4c:	44bb      	add	fp, r7
                off += diff;
   2ca4e:	443c      	add	r4, r7
    while (size > 0) {
   2ca50:	d1e2      	bne.n	2ca18 <lfs_bd_read+0x160>
    return 0;
   2ca52:	2700      	movs	r7, #0
   2ca54:	e7d8      	b.n	2ca08 <lfs_bd_read+0x150>
        return LFS_ERR_CORRUPT;
   2ca56:	f06f 0753 	mvn.w	r7, #83	; 0x53
   2ca5a:	e7d5      	b.n	2ca08 <lfs_bd_read+0x150>
   2ca5c:	000424e7 	.word	0x000424e7
   2ca60:	0003f0e1 	.word	0x0003f0e1
   2ca64:	00042209 	.word	0x00042209
   2ca68:	00042261 	.word	0x00042261

0002ca6c <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   2ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca70:	b095      	sub	sp, #84	; 0x54
   2ca72:	4615      	mov	r5, r2
   2ca74:	9309      	str	r3, [sp, #36]	; 0x24
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   2ca76:	6813      	ldr	r3, [r2, #0]
   2ca78:	6e82      	ldr	r2, [r0, #104]	; 0x68
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   2ca7a:	4607      	mov	r7, r0
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   2ca7c:	6a12      	ldr	r2, [r2, #32]
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   2ca7e:	460c      	mov	r4, r1
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   2ca80:	4293      	cmp	r3, r2
   2ca82:	f080 81fa 	bcs.w	2ce7a <lfs_dir_fetchmatch+0x40e>
   2ca86:	6869      	ldr	r1, [r5, #4]
   2ca88:	428a      	cmp	r2, r1
   2ca8a:	f240 81f6 	bls.w	2ce7a <lfs_dir_fetchmatch+0x40e>
    uint32_t revs[2] = {0, 0};
   2ca8e:	2100      	movs	r1, #0
        int err = lfs_bd_read(lfs,
   2ca90:	f04f 0804 	mov.w	r8, #4
   2ca94:	aa0c      	add	r2, sp, #48	; 0x30
   2ca96:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2ca9a:	9300      	str	r3, [sp, #0]
   2ca9c:	4602      	mov	r2, r0
   2ca9e:	4643      	mov	r3, r8
   2caa0:	f8cd 800c 	str.w	r8, [sp, #12]
    uint32_t revs[2] = {0, 0};
   2caa4:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
        int err = lfs_bd_read(lfs,
   2caa8:	f7ff ff06 	bl	2c8b8 <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   2caac:	4606      	mov	r6, r0
   2caae:	b118      	cbz	r0, 2cab8 <lfs_dir_fetchmatch+0x4c>
   2cab0:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2cab4:	f040 819a 	bne.w	2cdec <lfs_dir_fetchmatch+0x380>
        int err = lfs_bd_read(lfs,
   2cab8:	f8cd 800c 	str.w	r8, [sp, #12]
   2cabc:	f04f 0800 	mov.w	r8, #0
   2cac0:	ab0d      	add	r3, sp, #52	; 0x34
   2cac2:	9302      	str	r3, [sp, #8]
   2cac4:	f8cd 8004 	str.w	r8, [sp, #4]
   2cac8:	686b      	ldr	r3, [r5, #4]
   2caca:	463a      	mov	r2, r7
   2cacc:	9300      	str	r3, [sp, #0]
   2cace:	4641      	mov	r1, r8
   2cad0:	2304      	movs	r3, #4
   2cad2:	4638      	mov	r0, r7
   2cad4:	f7ff fef0 	bl	2c8b8 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
   2cad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if (err && err != LFS_ERR_CORRUPT) {
   2cada:	4606      	mov	r6, r0
   2cadc:	2800      	cmp	r0, #0
   2cade:	d046      	beq.n	2cb6e <lfs_dir_fetchmatch+0x102>
   2cae0:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2cae4:	f040 8182 	bne.w	2cdec <lfs_dir_fetchmatch+0x380>
   2cae8:	4641      	mov	r1, r8
    dir->pair[0] = pair[(r+0)%2];
   2caea:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    lfs_stag_t besttag = -1;
   2caee:	f04f 36ff 	mov.w	r6, #4294967295
    dir->pair[0] = pair[(r+0)%2];
   2caf2:	6023      	str	r3, [r4, #0]
    dir->pair[1] = pair[(r+1)%2];
   2caf4:	f081 0301 	eor.w	r3, r1, #1
   2caf8:	9308      	str	r3, [sp, #32]
   2cafa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   2cafe:	6063      	str	r3, [r4, #4]
    dir->rev = revs[(r+0)%2];
   2cb00:	ab14      	add	r3, sp, #80	; 0x50
   2cb02:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2cb06:	f851 3c20 	ldr.w	r3, [r1, #-32]
   2cb0a:	60a3      	str	r3, [r4, #8]
    dir->off = 0; // nonzero = found some commits
   2cb0c:	2300      	movs	r3, #0
   2cb0e:	60e3      	str	r3, [r4, #12]
   2cb10:	2302      	movs	r3, #2
   2cb12:	9307      	str	r3, [sp, #28]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
   2cb14:	f04f 35ff 	mov.w	r5, #4294967295
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   2cb18:	2204      	movs	r2, #4
   2cb1a:	4628      	mov	r0, r5
   2cb1c:	f104 0108 	add.w	r1, r4, #8
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
   2cb20:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   2cb24:	f002 ffe2 	bl	2faec <lfs_crc>
        bool tempsplit = false;
   2cb28:	2300      	movs	r3, #0
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   2cb2a:	46b0      	mov	r8, r6
        lfs_tag_t ptag = 0xffffffff;
   2cb2c:	46aa      	mov	sl, r5
        lfs_off_t off = 0;
   2cb2e:	469b      	mov	fp, r3
        uint16_t tempcount = 0;
   2cb30:	e9cd 3305 	strd	r3, r3, [sp, #20]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   2cb34:	9004      	str	r0, [sp, #16]
            off += lfs_tag_dsize(ptag);
   2cb36:	4650      	mov	r0, sl
   2cb38:	f00e ff04 	bl	3b944 <lfs_tag_dsize>
            int err = lfs_bd_read(lfs,
   2cb3c:	2204      	movs	r2, #4
            off += lfs_tag_dsize(ptag);
   2cb3e:	4483      	add	fp, r0
            int err = lfs_bd_read(lfs,
   2cb40:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
                    NULL, &lfs->rcache, lfs->cfg->block_size,
   2cb44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
            int err = lfs_bd_read(lfs,
   2cb46:	e9cd b901 	strd	fp, r9, [sp, #4]
   2cb4a:	9203      	str	r2, [sp, #12]
   2cb4c:	6822      	ldr	r2, [r4, #0]
   2cb4e:	2100      	movs	r1, #0
   2cb50:	9200      	str	r2, [sp, #0]
   2cb52:	4638      	mov	r0, r7
   2cb54:	463a      	mov	r2, r7
   2cb56:	69db      	ldr	r3, [r3, #28]
   2cb58:	f7ff feae 	bl	2c8b8 <lfs_bd_read>
            if (err) {
   2cb5c:	4605      	mov	r5, r0
   2cb5e:	b180      	cbz	r0, 2cb82 <lfs_dir_fetchmatch+0x116>
                if (err == LFS_ERR_CORRUPT) {
   2cb60:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2cb64:	f040 8141 	bne.w	2cdea <lfs_dir_fetchmatch+0x37e>
                    dir->erased = false;
   2cb68:	2300      	movs	r3, #0
                        dir->erased = false;
   2cb6a:	75a3      	strb	r3, [r4, #22]
                        break;
   2cb6c:	e02c      	b.n	2cbc8 <lfs_dir_fetchmatch+0x15c>
}

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
    return (int)(unsigned)(a - b);
   2cb6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2cb70:	1a9b      	subs	r3, r3, r2
        if (err != LFS_ERR_CORRUPT &&
   2cb72:	2b00      	cmp	r3, #0
   2cb74:	bfd4      	ite	le
   2cb76:	2100      	movle	r1, #0
   2cb78:	2101      	movgt	r1, #1
   2cb7a:	e7b6      	b.n	2caea <lfs_dir_fetchmatch+0x7e>
   2cb7c:	2301      	movs	r3, #1
   2cb7e:	9307      	str	r3, [sp, #28]
   2cb80:	e7c8      	b.n	2cb14 <lfs_dir_fetchmatch+0xa8>
            crc = lfs_crc(crc, &tag, sizeof(tag));
   2cb82:	4649      	mov	r1, r9
   2cb84:	2204      	movs	r2, #4
   2cb86:	9804      	ldr	r0, [sp, #16]
   2cb88:	f002 ffb0 	bl	2faec <lfs_crc>
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
   2cb8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2cb8e:	9004      	str	r0, [sp, #16]
   2cb90:	ba1b      	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
   2cb92:	ea83 090a 	eor.w	r9, r3, sl
            if (!lfs_tag_isvalid(tag)) {
   2cb96:	f1b9 0f00 	cmp.w	r9, #0
            tag = lfs_frombe32(tag) ^ ptag;
   2cb9a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
            if (!lfs_tag_isvalid(tag)) {
   2cb9e:	da3c      	bge.n	2cc1a <lfs_dir_fetchmatch+0x1ae>
    return (tag & 0x70000000) >> 20;
   2cba0:	ea4f 5a1a 	mov.w	sl, sl, lsr #20
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   2cba4:	f40a 6ae0 	and.w	sl, sl, #1792	; 0x700
   2cba8:	f5ba 6fa0 	cmp.w	sl, #1280	; 0x500
                        dir->off % lfs->cfg->prog_size == 0);
   2cbac:	68e3      	ldr	r3, [r4, #12]
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   2cbae:	d108      	bne.n	2cbc2 <lfs_dir_fetchmatch+0x156>
                        dir->off % lfs->cfg->prog_size == 0);
   2cbb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2cbb2:	6992      	ldr	r2, [r2, #24]
   2cbb4:	fbb3 f1f2 	udiv	r1, r3, r2
   2cbb8:	fb02 3311 	mls	r3, r2, r1, r3
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   2cbbc:	fab3 f583 	clz	r5, r3
   2cbc0:	096d      	lsrs	r5, r5, #5
   2cbc2:	f005 0501 	and.w	r5, r5, #1
   2cbc6:	75a5      	strb	r5, [r4, #22]
        if (dir->off > 0) {
   2cbc8:	68e3      	ldr	r3, [r4, #12]
   2cbca:	2b00      	cmp	r3, #0
   2cbcc:	f000 8133 	beq.w	2ce36 <lfs_dir_fetchmatch+0x3ca>
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
   2cbd0:	4621      	mov	r1, r4
   2cbd2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   2cbd6:	f00e fecd 	bl	3b974 <lfs_gstate_hasmovehere>
   2cbda:	2800      	cmp	r0, #0
   2cbdc:	f000 811d 	beq.w	2ce1a <lfs_dir_fetchmatch+0x3ae>
    return (tag & 0x000ffc00) >> 10;
   2cbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cbe2:	f3c6 2289 	ubfx	r2, r6, #10, #10
   2cbe6:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
   2cbea:	429a      	cmp	r2, r3
   2cbec:	f040 8102 	bne.w	2cdf4 <lfs_dir_fetchmatch+0x388>
            if (id) {
   2cbf0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   2cbf2:	f046 4300 	orr.w	r3, r6, #2147483648	; 0x80000000
            if (id) {
   2cbf6:	b13a      	cbz	r2, 2cc08 <lfs_dir_fetchmatch+0x19c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   2cbf8:	8aa1      	ldrh	r1, [r4, #20]
   2cbfa:	f3c3 2289 	ubfx	r2, r3, #10, #10
    return (a < b) ? a : b;
   2cbfe:	428a      	cmp	r2, r1
   2cc00:	bf28      	it	cs
   2cc02:	460a      	movcs	r2, r1
   2cc04:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2cc06:	800a      	strh	r2, [r1, #0]
            } else if (lfs_tag_id(besttag) < dir->count) {
   2cc08:	8aa2      	ldrh	r2, [r4, #20]
   2cc0a:	f3c3 2389 	ubfx	r3, r3, #10, #10
                return LFS_ERR_NOENT;
   2cc0e:	429a      	cmp	r2, r3
   2cc10:	bf94      	ite	ls
   2cc12:	2600      	movls	r6, #0
   2cc14:	f06f 0601 	mvnhi.w	r6, #1
   2cc18:	e0e8      	b.n	2cdec <lfs_dir_fetchmatch+0x380>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
   2cc1a:	4648      	mov	r0, r9
   2cc1c:	f00e fe92 	bl	3b944 <lfs_tag_dsize>
   2cc20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2cc22:	4458      	add	r0, fp
   2cc24:	69db      	ldr	r3, [r3, #28]
   2cc26:	4298      	cmp	r0, r3
   2cc28:	d89e      	bhi.n	2cb68 <lfs_dir_fetchmatch+0xfc>
    return (tag & 0x70000000) >> 20;
   2cc2a:	ea4f 5219 	mov.w	r2, r9, lsr #20
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
   2cc2e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2cc32:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
                err = lfs_bd_read(lfs,
   2cc36:	6821      	ldr	r1, [r4, #0]
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
   2cc38:	f040 8082 	bne.w	2cd40 <lfs_dir_fetchmatch+0x2d4>
                err = lfs_bd_read(lfs,
   2cc3c:	2204      	movs	r2, #4
   2cc3e:	9203      	str	r2, [sp, #12]
   2cc40:	aa10      	add	r2, sp, #64	; 0x40
   2cc42:	9202      	str	r2, [sp, #8]
   2cc44:	f10b 0204 	add.w	r2, fp, #4
   2cc48:	e9cd 1200 	strd	r1, r2, [sp]
   2cc4c:	4638      	mov	r0, r7
   2cc4e:	4629      	mov	r1, r5
   2cc50:	463a      	mov	r2, r7
   2cc52:	f7ff fe31 	bl	2c8b8 <lfs_bd_read>
                if (err) {
   2cc56:	4605      	mov	r5, r0
   2cc58:	b130      	cbz	r0, 2cc68 <lfs_dir_fetchmatch+0x1fc>
                    if (err == LFS_ERR_CORRUPT) {
   2cc5a:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2cc5e:	f040 80c4 	bne.w	2cdea <lfs_dir_fetchmatch+0x37e>
                        dir->erased = false;
   2cc62:	f04f 0300 	mov.w	r3, #0
   2cc66:	e780      	b.n	2cb6a <lfs_dir_fetchmatch+0xfe>
                if (crc != dcrc) {
   2cc68:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2cc6a:	9a04      	ldr	r2, [sp, #16]
   2cc6c:	4293      	cmp	r3, r2
   2cc6e:	d1f8      	bne.n	2cc62 <lfs_dir_fetchmatch+0x1f6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
   2cc70:	980b      	ldr	r0, [sp, #44]	; 0x2c
    return (tag & 0x0ff00000) >> 20;
   2cc72:	0d03      	lsrs	r3, r0, #20
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
   2cc74:	ea89 79c3 	eor.w	r9, r9, r3, lsl #31
                lfs->seed ^= crc;
   2cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cc7a:	4053      	eors	r3, r2
   2cc7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                dir->off = off + lfs_tag_dsize(tag);
   2cc7e:	f00e fe61 	bl	3b944 <lfs_tag_dsize>
                dir->count = tempcount;
   2cc82:	9b05      	ldr	r3, [sp, #20]
                crc = 0xffffffff;
   2cc84:	f04f 32ff 	mov.w	r2, #4294967295
                dir->count = tempcount;
   2cc88:	82a3      	strh	r3, [r4, #20]
                dir->tail[0] = temptail[0];
   2cc8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                dir->off = off + lfs_tag_dsize(tag);
   2cc8c:	4458      	add	r0, fp
                dir->tail[0] = temptail[0];
   2cc8e:	61a3      	str	r3, [r4, #24]
                dir->tail[1] = temptail[1];
   2cc90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                dir->etag = ptag;
   2cc92:	e9c4 0903 	strd	r0, r9, [r4, #12]
                dir->tail[1] = temptail[1];
   2cc96:	61e3      	str	r3, [r4, #28]
                dir->split = tempsplit;
   2cc98:	9b06      	ldr	r3, [sp, #24]
                crc = 0xffffffff;
   2cc9a:	9204      	str	r2, [sp, #16]
                dir->split = tempsplit;
   2cc9c:	75e3      	strb	r3, [r4, #23]
                continue;
   2cc9e:	4643      	mov	r3, r8
   2cca0:	4646      	mov	r6, r8
   2cca2:	46ca      	mov	sl, r9
   2cca4:	4698      	mov	r8, r3
   2cca6:	e746      	b.n	2cb36 <lfs_dir_fetchmatch+0xca>
                crc = lfs_crc(crc, &dat, 1);
   2cca8:	2201      	movs	r2, #1
   2ccaa:	9804      	ldr	r0, [sp, #16]
   2ccac:	a910      	add	r1, sp, #64	; 0x40
   2ccae:	f002 ff1d 	bl	2faec <lfs_crc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   2ccb2:	f10a 0a01 	add.w	sl, sl, #1
                crc = lfs_crc(crc, &dat, 1);
   2ccb6:	9004      	str	r0, [sp, #16]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   2ccb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2ccba:	f00e fe43 	bl	3b944 <lfs_tag_dsize>
   2ccbe:	4550      	cmp	r0, sl
                err = lfs_bd_read(lfs,
   2ccc0:	6823      	ldr	r3, [r4, #0]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   2ccc2:	d917      	bls.n	2ccf4 <lfs_dir_fetchmatch+0x288>
                err = lfs_bd_read(lfs,
   2ccc4:	2101      	movs	r1, #1
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   2ccc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
                err = lfs_bd_read(lfs,
   2ccc8:	9103      	str	r1, [sp, #12]
   2ccca:	a910      	add	r1, sp, #64	; 0x40
   2cccc:	9102      	str	r1, [sp, #8]
   2ccce:	eb0b 010a 	add.w	r1, fp, sl
   2ccd2:	e9cd 3100 	strd	r3, r1, [sp]
   2ccd6:	4638      	mov	r0, r7
   2ccd8:	69d3      	ldr	r3, [r2, #28]
   2ccda:	2100      	movs	r1, #0
   2ccdc:	463a      	mov	r2, r7
   2ccde:	f7ff fdeb 	bl	2c8b8 <lfs_bd_read>
                if (err) {
   2cce2:	4605      	mov	r5, r0
   2cce4:	2800      	cmp	r0, #0
   2cce6:	d0df      	beq.n	2cca8 <lfs_dir_fetchmatch+0x23c>
                    if (err == LFS_ERR_CORRUPT) {
   2cce8:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2ccec:	d17d      	bne.n	2cdea <lfs_dir_fetchmatch+0x37e>
                        dir->erased = false;
   2ccee:	f04f 0300 	mov.w	r3, #0
   2ccf2:	75a3      	strb	r3, [r4, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   2ccf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                err = lfs_bd_read(lfs,
   2ccf6:	6820      	ldr	r0, [r4, #0]
    return (tag & 0x70000000) >> 20;
   2ccf8:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   2ccfa:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
   2ccfe:	d122      	bne.n	2cd46 <lfs_dir_fetchmatch+0x2da>
                if (lfs_tag_id(tag) >= tempcount) {
   2cd00:	9a05      	ldr	r2, [sp, #20]
    return (tag & 0x000ffc00) >> 10;
   2cd02:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
   2cd06:	4293      	cmp	r3, r2
   2cd08:	d301      	bcc.n	2cd0e <lfs_dir_fetchmatch+0x2a2>
                    tempcount = lfs_tag_id(tag) + 1;
   2cd0a:	3301      	adds	r3, #1
   2cd0c:	9305      	str	r3, [sp, #20]
            if ((fmask & tag) == (fmask & ftag)) {
   2cd0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   2cd10:	990b      	ldr	r1, [sp, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
   2cd12:	6823      	ldr	r3, [r4, #0]
            if ((fmask & tag) == (fmask & ftag)) {
   2cd14:	ea81 0a02 	eor.w	sl, r1, r2
   2cd18:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2cd1a:	ea1a 0a02 	ands.w	sl, sl, r2
   2cd1e:	d14e      	bne.n	2cdbe <lfs_dir_fetchmatch+0x352>
                int res = cb(data, tag, &(struct lfs_diskoff){
   2cd20:	9310      	str	r3, [sp, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag)});
   2cd22:	f10b 0304 	add.w	r3, fp, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
   2cd26:	9311      	str	r3, [sp, #68]	; 0x44
   2cd28:	aa10      	add	r2, sp, #64	; 0x40
   2cd2a:	e9dd 3020 	ldrd	r3, r0, [sp, #128]	; 0x80
   2cd2e:	4798      	blx	r3
                if (res < 0) {
   2cd30:	1e05      	subs	r5, r0, #0
   2cd32:	da41      	bge.n	2cdb8 <lfs_dir_fetchmatch+0x34c>
                    if (res == LFS_ERR_CORRUPT) {
   2cd34:	f115 0f54 	cmn.w	r5, #84	; 0x54
   2cd38:	d157      	bne.n	2cdea <lfs_dir_fetchmatch+0x37e>
                        dir->erased = false;
   2cd3a:	f884 a016 	strb.w	sl, [r4, #22]
                        break;
   2cd3e:	e743      	b.n	2cbc8 <lfs_dir_fetchmatch+0x15c>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   2cd40:	f04f 0a04 	mov.w	sl, #4
   2cd44:	e7b8      	b.n	2ccb8 <lfs_dir_fetchmatch+0x24c>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
   2cd46:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   2cd4a:	d11d      	bne.n	2cd88 <lfs_dir_fetchmatch+0x31c>
                tempcount += lfs_tag_splice(tag);
   2cd4c:	9805      	ldr	r0, [sp, #20]
    return (int8_t)lfs_tag_chunk(tag);
   2cd4e:	b251      	sxtb	r1, r2
                tempcount += lfs_tag_splice(tag);
   2cd50:	fa40 f282 	sxtab	r2, r0, r2
   2cd54:	b292      	uxth	r2, r2
   2cd56:	9205      	str	r2, [sp, #20]
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   2cd58:	4a49      	ldr	r2, [pc, #292]	; (2ce80 <lfs_dir_fetchmatch+0x414>)
   2cd5a:	ea08 0202 	and.w	r2, r8, r2
   2cd5e:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
   2cd62:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   2cd66:	4293      	cmp	r3, r2
   2cd68:	d102      	bne.n	2cd70 <lfs_dir_fetchmatch+0x304>
                    tempbesttag |= 0x80000000;
   2cd6a:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
   2cd6e:	e7ce      	b.n	2cd0e <lfs_dir_fetchmatch+0x2a2>
                } else if (tempbesttag != -1 &&
   2cd70:	f1b8 3fff 	cmp.w	r8, #4294967295
   2cd74:	d0cb      	beq.n	2cd0e <lfs_dir_fetchmatch+0x2a2>
   2cd76:	f3c8 2289 	ubfx	r2, r8, #10, #10
   2cd7a:	f3c3 2389 	ubfx	r3, r3, #10, #10
   2cd7e:	429a      	cmp	r2, r3
   2cd80:	d3c5      	bcc.n	2cd0e <lfs_dir_fetchmatch+0x2a2>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   2cd82:	eb08 2881 	add.w	r8, r8, r1, lsl #10
   2cd86:	e7c2      	b.n	2cd0e <lfs_dir_fetchmatch+0x2a2>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
   2cd88:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
   2cd8c:	d1bf      	bne.n	2cd0e <lfs_dir_fetchmatch+0x2a2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
   2cd8e:	f002 0301 	and.w	r3, r2, #1
                err = lfs_bd_read(lfs,
   2cd92:	2208      	movs	r2, #8
                tempsplit = (lfs_tag_chunk(tag) & 1);
   2cd94:	9306      	str	r3, [sp, #24]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   2cd96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                err = lfs_bd_read(lfs,
   2cd98:	9203      	str	r2, [sp, #12]
   2cd9a:	aa0e      	add	r2, sp, #56	; 0x38
   2cd9c:	9202      	str	r2, [sp, #8]
   2cd9e:	f10b 0204 	add.w	r2, fp, #4
   2cda2:	e9cd 0200 	strd	r0, r2, [sp]
   2cda6:	2100      	movs	r1, #0
   2cda8:	463a      	mov	r2, r7
   2cdaa:	4638      	mov	r0, r7
   2cdac:	69db      	ldr	r3, [r3, #28]
   2cdae:	f7ff fd83 	bl	2c8b8 <lfs_bd_read>
                    if (err == LFS_ERR_CORRUPT) {
   2cdb2:	3054      	adds	r0, #84	; 0x54
   2cdb4:	d1ab      	bne.n	2cd0e <lfs_dir_fetchmatch+0x2a2>
   2cdb6:	e6d7      	b.n	2cb68 <lfs_dir_fetchmatch+0xfc>
                    tempbesttag = tag;
   2cdb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                if (res == LFS_CMP_EQ) {
   2cdba:	d103      	bne.n	2cdc4 <lfs_dir_fetchmatch+0x358>
                    tempbesttag = tag;
   2cdbc:	4698      	mov	r8, r3
   2cdbe:	4643      	mov	r3, r8
   2cdc0:	46b0      	mov	r8, r6
   2cdc2:	e76d      	b.n	2cca0 <lfs_dir_fetchmatch+0x234>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
   2cdc4:	4a2f      	ldr	r2, [pc, #188]	; (2ce84 <lfs_dir_fetchmatch+0x418>)
   2cdc6:	ea88 0103 	eor.w	r1, r8, r3
   2cdca:	400a      	ands	r2, r1
   2cdcc:	b152      	cbz	r2, 2cde4 <lfs_dir_fetchmatch+0x378>
                } else if (res == LFS_CMP_GT &&
   2cdce:	2d02      	cmp	r5, #2
   2cdd0:	d1f5      	bne.n	2cdbe <lfs_dir_fetchmatch+0x352>
   2cdd2:	f3c8 2289 	ubfx	r2, r8, #10, #10
   2cdd6:	f3c3 2189 	ubfx	r1, r3, #10, #10
   2cdda:	428a      	cmp	r2, r1
   2cddc:	d3ef      	bcc.n	2cdbe <lfs_dir_fetchmatch+0x352>
                    tempbesttag = tag | 0x80000000;
   2cdde:	f043 4800 	orr.w	r8, r3, #2147483648	; 0x80000000
   2cde2:	e7ec      	b.n	2cdbe <lfs_dir_fetchmatch+0x352>
                    tempbesttag = -1;
   2cde4:	f04f 38ff 	mov.w	r8, #4294967295
   2cde8:	e7e9      	b.n	2cdbe <lfs_dir_fetchmatch+0x352>
                return err;
   2cdea:	462e      	mov	r6, r5
}
   2cdec:	4630      	mov	r0, r6
   2cdee:	b015      	add	sp, #84	; 0x54
   2cdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                } else if (besttag != -1 &&
   2cdf4:	1c71      	adds	r1, r6, #1
   2cdf6:	d10c      	bne.n	2ce12 <lfs_dir_fetchmatch+0x3a6>
            if (id) {
   2cdf8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2cdfa:	b13b      	cbz	r3, 2ce0c <lfs_dir_fetchmatch+0x3a0>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   2cdfc:	f240 32ff 	movw	r2, #1023	; 0x3ff
   2ce00:	8aa3      	ldrh	r3, [r4, #20]
   2ce02:	4293      	cmp	r3, r2
   2ce04:	bf28      	it	cs
   2ce06:	4613      	movcs	r3, r2
   2ce08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2ce0a:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
   2ce0c:	f04f 33ff 	mov.w	r3, #4294967295
   2ce10:	e6fa      	b.n	2cc08 <lfs_dir_fetchmatch+0x19c>
                } else if (besttag != -1 &&
   2ce12:	429a      	cmp	r2, r3
                    besttag -= LFS_MKTAG(0, 1, 0);
   2ce14:	bf88      	it	hi
   2ce16:	f5a6 6680 	subhi.w	r6, r6, #1024	; 0x400
            if (id) {
   2ce1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   2ce1c:	4633      	mov	r3, r6
            if (id) {
   2ce1e:	b13a      	cbz	r2, 2ce30 <lfs_dir_fetchmatch+0x3c4>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   2ce20:	8aa1      	ldrh	r1, [r4, #20]
   2ce22:	f3c6 2289 	ubfx	r2, r6, #10, #10
   2ce26:	428a      	cmp	r2, r1
   2ce28:	bf28      	it	cs
   2ce2a:	460a      	movcs	r2, r1
   2ce2c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2ce2e:	800a      	strh	r2, [r1, #0]
            if (lfs_tag_isvalid(besttag)) {
   2ce30:	2e00      	cmp	r6, #0
   2ce32:	dadb      	bge.n	2cdec <lfs_dir_fetchmatch+0x380>
   2ce34:	e6e8      	b.n	2cc08 <lfs_dir_fetchmatch+0x19c>
        dir->rev = revs[(r+1)%2];
   2ce36:	9808      	ldr	r0, [sp, #32]
   2ce38:	ab14      	add	r3, sp, #80	; 0x50
   2ce3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   2ce3e:	f853 3c20 	ldr.w	r3, [r3, #-32]
    pair[0] = pair[1];
   2ce42:	e9d4 2100 	ldrd	r2, r1, [r4]
        dir->rev = revs[(r+1)%2];
   2ce46:	60a3      	str	r3, [r4, #8]
    for (int i = 0; i < 2; i++) {
   2ce48:	9b07      	ldr	r3, [sp, #28]
    pair[1] = t;
   2ce4a:	e9c4 1200 	strd	r1, r2, [r4]
    for (int i = 0; i < 2; i++) {
   2ce4e:	2b01      	cmp	r3, #1
   2ce50:	f47f ae94 	bne.w	2cb7c <lfs_dir_fetchmatch+0x110>
   2ce54:	480c      	ldr	r0, [pc, #48]	; (2ce88 <lfs_dir_fetchmatch+0x41c>)
   2ce56:	4b0d      	ldr	r3, [pc, #52]	; (2ce8c <lfs_dir_fetchmatch+0x420>)
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
   2ce58:	9213      	str	r2, [sp, #76]	; 0x4c
   2ce5a:	1a1b      	subs	r3, r3, r0
   2ce5c:	480c      	ldr	r0, [pc, #48]	; (2ce90 <lfs_dir_fetchmatch+0x424>)
   2ce5e:	08db      	lsrs	r3, r3, #3
   2ce60:	9010      	str	r0, [sp, #64]	; 0x40
   2ce62:	f240 30e5 	movw	r0, #997	; 0x3e5
   2ce66:	019b      	lsls	r3, r3, #6
   2ce68:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   2ce6c:	2204      	movs	r2, #4
   2ce6e:	4809      	ldr	r0, [pc, #36]	; (2ce94 <lfs_dir_fetchmatch+0x428>)
   2ce70:	f043 0301 	orr.w	r3, r3, #1
   2ce74:	a910      	add	r1, sp, #64	; 0x40
   2ce76:	f00c fc96 	bl	397a6 <log_n>
        return LFS_ERR_CORRUPT;
   2ce7a:	f06f 0653 	mvn.w	r6, #83	; 0x53
   2ce7e:	e7b5      	b.n	2cdec <lfs_dir_fetchmatch+0x380>
   2ce80:	000ffc00 	.word	0x000ffc00
   2ce84:	7ffffc00 	.word	0x7ffffc00
   2ce88:	0003e468 	.word	0x0003e468
   2ce8c:	0003e4f0 	.word	0x0003e4f0
   2ce90:	00042209 	.word	0x00042209
   2ce94:	0004226a 	.word	0x0004226a

0002ce98 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
   2ce98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    parent->tail[1] = 1;
   2ce9c:	2301      	movs	r3, #1
   2ce9e:	2400      	movs	r4, #0
        lfs_mdir_t *parent) {
   2cea0:	4605      	mov	r5, r0
   2cea2:	460e      	mov	r6, r1
   2cea4:	4692      	mov	sl, r2
    parent->tail[1] = 1;
   2cea6:	e9c2 4306 	strd	r4, r3, [r2, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   2ceaa:	4f17      	ldr	r7, [pc, #92]	; (2cf08 <lfs_fs_parent+0x70>)
   2ceac:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2cf0c <lfs_fs_parent+0x74>
   2ceb0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2cf10 <lfs_fs_parent+0x78>
        lfs_mdir_t *parent) {
   2ceb4:	b088      	sub	sp, #32
    while (!lfs_pair_isnull(parent->tail)) {
   2ceb6:	f10a 0218 	add.w	r2, sl, #24
   2ceba:	4610      	mov	r0, r2
   2cebc:	f00e fd27 	bl	3b90e <lfs_pair_isnull>
   2cec0:	b110      	cbz	r0, 2cec8 <lfs_fs_parent+0x30>
    return LFS_ERR_NOENT;
   2cec2:	f06f 0001 	mvn.w	r0, #1
   2cec6:	e018      	b.n	2cefa <lfs_fs_parent+0x62>
        if (cycle >= lfs->cfg->block_count/2) {
   2cec8:	6eab      	ldr	r3, [r5, #104]	; 0x68
   2ceca:	6a1b      	ldr	r3, [r3, #32]
   2cecc:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   2ced0:	d216      	bcs.n	2cf00 <lfs_fs_parent+0x68>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   2ced2:	6833      	ldr	r3, [r6, #0]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   2ced4:	4651      	mov	r1, sl
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   2ced6:	9306      	str	r3, [sp, #24]
   2ced8:	6873      	ldr	r3, [r6, #4]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   2ceda:	e9cd 8000 	strd	r8, r0, [sp]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   2cede:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   2cee0:	ab05      	add	r3, sp, #20
   2cee2:	e9cd 7302 	strd	r7, r3, [sp, #8]
   2cee6:	4628      	mov	r0, r5
   2cee8:	464b      	mov	r3, r9
        cycle += 1;
   2ceea:	3401      	adds	r4, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   2ceec:	9505      	str	r5, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   2ceee:	f7ff fdbd 	bl	2ca6c <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
   2cef2:	2800      	cmp	r0, #0
   2cef4:	d0df      	beq.n	2ceb6 <lfs_fs_parent+0x1e>
   2cef6:	1c83      	adds	r3, r0, #2
   2cef8:	d0dd      	beq.n	2ceb6 <lfs_fs_parent+0x1e>
}
   2cefa:	b008      	add	sp, #32
   2cefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return LFS_ERR_CORRUPT;
   2cf00:	f06f 0053 	mvn.w	r0, #83	; 0x53
   2cf04:	e7f9      	b.n	2cefa <lfs_fs_parent+0x62>
   2cf06:	bf00      	nop
   2cf08:	0003ba0f 	.word	0x0003ba0f
   2cf0c:	20000008 	.word	0x20000008
   2cf10:	7ff003ff 	.word	0x7ff003ff

0002cf14 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   2cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf18:	4607      	mov	r7, r0
   2cf1a:	4688      	mov	r8, r1
   2cf1c:	4691      	mov	r9, r2
   2cf1e:	b093      	sub	sp, #76	; 0x4c
   2cf20:	461e      	mov	r6, r3
   2cf22:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
   2cf26:	f9bd b088 	ldrsh.w	fp, [sp, #136]	; 0x88
   2cf2a:	930c      	str	r3, [sp, #48]	; 0x30
   2cf2c:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
   2cf30:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
   2cf34:	930d      	str	r3, [sp, #52]	; 0x34
    return (tag & 0x000ffc00) >> 10;
   2cf36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2cf38:	f3c3 238f 	ubfx	r3, r3, #10, #16
   2cf3c:	930b      	str	r3, [sp, #44]	; 0x2c
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
   2cf3e:	ea4f 238b 	mov.w	r3, fp, lsl #10
   2cf42:	930a      	str	r3, [sp, #40]	; 0x28
        if (off+lfs_tag_dsize(ptag) < dir->off) {
   2cf44:	4630      	mov	r0, r6
   2cf46:	f00e fcfd 	bl	3b944 <lfs_tag_dsize>
   2cf4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2cf4e:	eb00 0409 	add.w	r4, r0, r9
   2cf52:	429c      	cmp	r4, r3
   2cf54:	d253      	bcs.n	2cffe <lfs_dir_traverse+0xea>
            int err = lfs_bd_read(lfs,
   2cf56:	2304      	movs	r3, #4
   2cf58:	9303      	str	r3, [sp, #12]
   2cf5a:	ab0f      	add	r3, sp, #60	; 0x3c
   2cf5c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2cf60:	f8d8 3000 	ldr.w	r3, [r8]
   2cf64:	463a      	mov	r2, r7
   2cf66:	9300      	str	r3, [sp, #0]
   2cf68:	2100      	movs	r1, #0
   2cf6a:	2304      	movs	r3, #4
   2cf6c:	4638      	mov	r0, r7
   2cf6e:	f7ff fca3 	bl	2c8b8 <lfs_bd_read>
            if (err) {
   2cf72:	2800      	cmp	r0, #0
   2cf74:	d140      	bne.n	2cff8 <lfs_dir_traverse+0xe4>
    return __builtin_bswap32(a);
   2cf76:	46a1      	mov	r9, r4
   2cf78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            buffer = &disk;
   2cf7a:	ad10      	add	r5, sp, #64	; 0x40
   2cf7c:	ba1b      	rev	r3, r3
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
   2cf7e:	4073      	eors	r3, r6
   2cf80:	f043 4600 	orr.w	r6, r3, #2147483648	; 0x80000000
            disk.block = dir->pair[0];
   2cf84:	f8d8 3000 	ldr.w	r3, [r8]
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
   2cf88:	960f      	str	r6, [sp, #60]	; 0x3c
            disk.block = dir->pair[0];
   2cf8a:	9310      	str	r3, [sp, #64]	; 0x40
            disk.off = off+sizeof(lfs_tag_t);
   2cf8c:	1d23      	adds	r3, r4, #4
   2cf8e:	9311      	str	r3, [sp, #68]	; 0x44
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
   2cf90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2cf92:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2cf94:	405c      	eors	r4, r3
   2cf96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2cf98:	401c      	ands	r4, r3
   2cf9a:	4b43      	ldr	r3, [pc, #268]	; (2d0a8 <lfs_dir_traverse+0x194>)
   2cf9c:	401c      	ands	r4, r3
   2cf9e:	d1d1      	bne.n	2cf44 <lfs_dir_traverse+0x30>
        if (lfs_tag_id(tmask) != 0) {
   2cfa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2cfa2:	2b00      	cmp	r3, #0
   2cfa4:	d139      	bne.n	2d01a <lfs_dir_traverse+0x106>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
   2cfa6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    return (tag & 0x7ff00000) >> 20;
   2cfa8:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
   2cfac:	2b00      	cmp	r3, #0
   2cfae:	d0c9      	beq.n	2cf44 <lfs_dir_traverse+0x30>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
   2cfb0:	f240 1201 	movw	r2, #257	; 0x101
   2cfb4:	4293      	cmp	r3, r2
   2cfb6:	d151      	bne.n	2d05c <lfs_dir_traverse+0x148>
    return tag & 0x000003ff;
   2cfb8:	f3c1 0309 	ubfx	r3, r1, #0, #10
            uint16_t fromid = lfs_tag_size(tag);
   2cfbc:	461a      	mov	r2, r3
    return (tag & 0x000ffc00) >> 10;
   2cfbe:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    fromid, fromid+1, toid-fromid+diff,
   2cfc2:	1ac9      	subs	r1, r1, r3
            int err = lfs_dir_traverse(lfs,
   2cfc4:	3301      	adds	r3, #1
   2cfc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2cfca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   2cfce:	4b37      	ldr	r3, [pc, #220]	; (2d0ac <lfs_dir_traverse+0x198>)
   2cfd0:	9824      	ldr	r0, [sp, #144]	; 0x90
   2cfd2:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2cfd6:	2200      	movs	r2, #0
   2cfd8:	9008      	str	r0, [sp, #32]
   2cfda:	4459      	add	r1, fp
   2cfdc:	9823      	ldr	r0, [sp, #140]	; 0x8c
   2cfde:	b209      	sxth	r1, r1
   2cfe0:	9007      	str	r0, [sp, #28]
   2cfe2:	9106      	str	r1, [sp, #24]
   2cfe4:	f04f 33ff 	mov.w	r3, #4294967295
   2cfe8:	4629      	mov	r1, r5
   2cfea:	4638      	mov	r0, r7
   2cfec:	e9cd 2200 	strd	r2, r2, [sp]
   2cff0:	f7ff ff90 	bl	2cf14 <lfs_dir_traverse>
            if (err) {
   2cff4:	2800      	cmp	r0, #0
   2cff6:	d0a5      	beq.n	2cf44 <lfs_dir_traverse+0x30>
}
   2cff8:	b013      	add	sp, #76	; 0x4c
   2cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (attrcount > 0) {
   2cffe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2d000:	2b00      	cmp	r3, #0
   2d002:	dd4f      	ble.n	2d0a4 <lfs_dir_traverse+0x190>
            tag = attrs[0].tag;
   2d004:	f8da 3000 	ldr.w	r3, [sl]
            buffer = attrs[0].buffer;
   2d008:	f8da 5004 	ldr.w	r5, [sl, #4]
            tag = attrs[0].tag;
   2d00c:	930f      	str	r3, [sp, #60]	; 0x3c
            attrcount -= 1;
   2d00e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
            attrs += 1;
   2d010:	f10a 0a08 	add.w	sl, sl, #8
            attrcount -= 1;
   2d014:	3b01      	subs	r3, #1
   2d016:	931d      	str	r3, [sp, #116]	; 0x74
   2d018:	e7ba      	b.n	2cf90 <lfs_dir_traverse+0x7c>
            int filter = lfs_dir_traverse(lfs,
   2d01a:	ab0f      	add	r3, sp, #60	; 0x3c
   2d01c:	9308      	str	r3, [sp, #32]
   2d01e:	4b24      	ldr	r3, [pc, #144]	; (2d0b0 <lfs_dir_traverse+0x19c>)
   2d020:	464a      	mov	r2, r9
   2d022:	e9cd 4306 	strd	r4, r3, [sp, #24]
   2d026:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2d028:	4641      	mov	r1, r8
   2d02a:	e9cd a300 	strd	sl, r3, [sp]
   2d02e:	4638      	mov	r0, r7
   2d030:	4633      	mov	r3, r6
   2d032:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2d036:	e9cd 4402 	strd	r4, r4, [sp, #8]
   2d03a:	f7ff ff6b 	bl	2cf14 <lfs_dir_traverse>
            if (filter < 0) {
   2d03e:	2800      	cmp	r0, #0
   2d040:	dbda      	blt.n	2cff8 <lfs_dir_traverse+0xe4>
            if (filter) {
   2d042:	f47f af7f 	bne.w	2cf44 <lfs_dir_traverse+0x30>
    return (tag & 0x000ffc00) >> 10;
   2d046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
   2d048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
   2d04a:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
   2d04e:	429a      	cmp	r2, r3
   2d050:	f63f af78 	bhi.w	2cf44 <lfs_dir_traverse+0x30>
   2d054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2d056:	429a      	cmp	r2, r3
   2d058:	d8a5      	bhi.n	2cfa6 <lfs_dir_traverse+0x92>
   2d05a:	e773      	b.n	2cf44 <lfs_dir_traverse+0x30>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
   2d05c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2d060:	d119      	bne.n	2d096 <lfs_dir_traverse+0x182>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   2d062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    return tag & 0x000003ff;
   2d064:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   2d068:	4294      	cmp	r4, r2
   2d06a:	f4bf af6b 	bcs.w	2cf44 <lfs_dir_traverse+0x30>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
   2d06e:	68a9      	ldr	r1, [r5, #8]
   2d070:	f3c3 2389 	ubfx	r3, r3, #10, #10
   2d074:	445b      	add	r3, fp
   2d076:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
   2d07a:	782b      	ldrb	r3, [r5, #0]
   2d07c:	686a      	ldr	r2, [r5, #4]
   2d07e:	f503 7340 	add.w	r3, r3, #768	; 0x300
   2d082:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
   2d086:	e9dd 3023 	ldrd	r3, r0, [sp, #140]	; 0x8c
   2d08a:	4798      	blx	r3
                if (err) {
   2d08c:	350c      	adds	r5, #12
   2d08e:	2800      	cmp	r0, #0
   2d090:	d1b2      	bne.n	2cff8 <lfs_dir_traverse+0xe4>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   2d092:	3401      	adds	r4, #1
   2d094:	e7e5      	b.n	2d062 <lfs_dir_traverse+0x14e>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
   2d096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d098:	462a      	mov	r2, r5
   2d09a:	4419      	add	r1, r3
   2d09c:	e9dd 3023 	ldrd	r3, r0, [sp, #140]	; 0x8c
   2d0a0:	4798      	blx	r3
   2d0a2:	e7a7      	b.n	2cff4 <lfs_dir_traverse+0xe0>
            return 0;
   2d0a4:	2000      	movs	r0, #0
   2d0a6:	e7a7      	b.n	2cff8 <lfs_dir_traverse+0xe4>
   2d0a8:	7ff00000 	.word	0x7ff00000
   2d0ac:	600ffc00 	.word	0x600ffc00
   2d0b0:	0002c7a9 	.word	0x0002c7a9

0002d0b4 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
   2d0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d0b8:	4606      	mov	r6, r0
   2d0ba:	b087      	sub	sp, #28
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   2d0bc:	303c      	adds	r0, #60	; 0x3c
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
   2d0be:	4691      	mov	r9, r2
   2d0c0:	460f      	mov	r7, r1
   2d0c2:	469a      	mov	sl, r3
    lfs_tag_t ntag = dir->etag;
   2d0c4:	e9d1 8303 	ldrd	r8, r3, [r1, #12]
   2d0c8:	9305      	str	r3, [sp, #20]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   2d0ca:	f00e fc53 	bl	3b974 <lfs_gstate_hasmovehere>
    return (tag & 0x000ffc00) >> 10;
   2d0ce:	f3c9 2b89 	ubfx	fp, r9, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   2d0d2:	4604      	mov	r4, r0
   2d0d4:	b158      	cbz	r0, 2d0ee <lfs_dir_getslice+0x3a>
   2d0d6:	f1bb 0f00 	cmp.w	fp, #0
   2d0da:	d078      	beq.n	2d1ce <lfs_dir_getslice+0x11a>
    return (tag & 0x000ffc00) >> 10;
   2d0dc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        gdiff -= LFS_MKTAG(0, 1, 0);
   2d0de:	4c3d      	ldr	r4, [pc, #244]	; (2d1d4 <lfs_dir_getslice+0x120>)
            lfs_tag_id(gmask) != 0 &&
   2d0e0:	f3c3 2289 	ubfx	r2, r3, #10, #10
   2d0e4:	f3ca 2389 	ubfx	r3, sl, #10, #10
        gdiff -= LFS_MKTAG(0, 1, 0);
   2d0e8:	429a      	cmp	r2, r3
   2d0ea:	bf88      	it	hi
   2d0ec:	2400      	movhi	r4, #0
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
   2d0ee:	9d05      	ldr	r5, [sp, #20]
   2d0f0:	4628      	mov	r0, r5
   2d0f2:	f00e fc27 	bl	3b944 <lfs_tag_dsize>
   2d0f6:	1d03      	adds	r3, r0, #4
   2d0f8:	4543      	cmp	r3, r8
   2d0fa:	d834      	bhi.n	2d166 <lfs_dir_getslice+0xb2>
        int err = lfs_bd_read(lfs,
   2d0fc:	2304      	movs	r3, #4
        off -= lfs_tag_dsize(ntag);
   2d0fe:	eba8 0800 	sub.w	r8, r8, r0
        int err = lfs_bd_read(lfs,
   2d102:	9303      	str	r3, [sp, #12]
   2d104:	ab05      	add	r3, sp, #20
   2d106:	e9cd 8301 	strd	r8, r3, [sp, #4]
   2d10a:	683b      	ldr	r3, [r7, #0]
   2d10c:	4632      	mov	r2, r6
   2d10e:	9300      	str	r3, [sp, #0]
   2d110:	2100      	movs	r1, #0
   2d112:	2304      	movs	r3, #4
   2d114:	4630      	mov	r0, r6
   2d116:	f7ff fbcf 	bl	2c8b8 <lfs_bd_read>
        if (err) {
   2d11a:	bb30      	cbnz	r0, 2d16a <lfs_dir_getslice+0xb6>
   2d11c:	9b05      	ldr	r3, [sp, #20]
   2d11e:	ba1b      	rev	r3, r3
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
   2d120:	406b      	eors	r3, r5
   2d122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2d126:	9305      	str	r3, [sp, #20]
        if (lfs_tag_id(gmask) != 0 &&
   2d128:	f1bb 0f00 	cmp.w	fp, #0
   2d12c:	d023      	beq.n	2d176 <lfs_dir_getslice+0xc2>
    return (tag & 0x70000000) >> 20;
   2d12e:	0d2a      	lsrs	r2, r5, #20
        if (lfs_tag_id(gmask) != 0 &&
   2d130:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
   2d134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2d138:	d11d      	bne.n	2d176 <lfs_dir_getslice+0xc2>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
   2d13a:	ebaa 0304 	sub.w	r3, sl, r4
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   2d13e:	f3c3 2089 	ubfx	r0, r3, #10, #10
   2d142:	f3c5 2189 	ubfx	r1, r5, #10, #10
   2d146:	4288      	cmp	r0, r1
   2d148:	d315      	bcc.n	2d176 <lfs_dir_getslice+0xc2>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
   2d14a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2d14e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   2d152:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   2d156:	f023 0303 	bic.w	r3, r3, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
   2d15a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   2d15e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2d162:	42ab      	cmp	r3, r5
   2d164:	d104      	bne.n	2d170 <lfs_dir_getslice+0xbc>
                return LFS_ERR_NOENT;
   2d166:	f06f 0001 	mvn.w	r0, #1
}
   2d16a:	b007      	add	sp, #28
   2d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   2d170:	b252      	sxtb	r2, r2
   2d172:	eb04 2482 	add.w	r4, r4, r2, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
   2d176:	ebaa 0104 	sub.w	r1, sl, r4
   2d17a:	4069      	eors	r1, r5
   2d17c:	ea11 0109 	ands.w	r1, r1, r9
   2d180:	d1b5      	bne.n	2d0ee <lfs_dir_getslice+0x3a>
    return ((int32_t)(tag << 22) >> 22) == -1;
   2d182:	f345 0309 	sbfx	r3, r5, #0, #10
            if (lfs_tag_isdelete(tag)) {
   2d186:	3301      	adds	r3, #1
   2d188:	d0ed      	beq.n	2d166 <lfs_dir_getslice+0xb2>
    return (a < b) ? a : b;
   2d18a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    return tag & 0x000003ff;
   2d18c:	f3c5 0909 	ubfx	r9, r5, #0, #10
   2d190:	4599      	cmp	r9, r3
   2d192:	bf28      	it	cs
   2d194:	4699      	movcs	r9, r3
            err = lfs_bd_read(lfs,
   2d196:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d198:	f8cd 900c 	str.w	r9, [sp, #12]
   2d19c:	9302      	str	r3, [sp, #8]
   2d19e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d1a0:	4632      	mov	r2, r6
   2d1a2:	3304      	adds	r3, #4
   2d1a4:	4443      	add	r3, r8
   2d1a6:	9301      	str	r3, [sp, #4]
   2d1a8:	683b      	ldr	r3, [r7, #0]
   2d1aa:	4630      	mov	r0, r6
   2d1ac:	9300      	str	r3, [sp, #0]
   2d1ae:	464b      	mov	r3, r9
   2d1b0:	f7ff fb82 	bl	2c8b8 <lfs_bd_read>
            if (err) {
   2d1b4:	2800      	cmp	r0, #0
   2d1b6:	d1d8      	bne.n	2d16a <lfs_dir_getslice+0xb6>
__ssp_bos_icheck3(memset, void *, int)
   2d1b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d1ba:	4601      	mov	r1, r0
   2d1bc:	eba3 0209 	sub.w	r2, r3, r9
   2d1c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d1c2:	eb03 0009 	add.w	r0, r3, r9
   2d1c6:	f010 fa5e 	bl	3d686 <memset>
            return tag + gdiff;
   2d1ca:	1960      	adds	r0, r4, r5
   2d1cc:	e7cd      	b.n	2d16a <lfs_dir_getslice+0xb6>
    lfs_stag_t gdiff = 0;
   2d1ce:	465c      	mov	r4, fp
   2d1d0:	e78d      	b.n	2d0ee <lfs_dir_getslice+0x3a>
   2d1d2:	bf00      	nop
   2d1d4:	fffffc00 	.word	0xfffffc00

0002d1d8 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
   2d1d8:	b530      	push	{r4, r5, lr}
   2d1da:	b087      	sub	sp, #28
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
   2d1dc:	ad03      	add	r5, sp, #12
        lfs_gstate_t *gstate) {
   2d1de:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
   2d1e0:	4b08      	ldr	r3, [pc, #32]	; (2d204 <lfs_dir_getgstate+0x2c>)
   2d1e2:	4a09      	ldr	r2, [pc, #36]	; (2d208 <lfs_dir_getgstate+0x30>)
   2d1e4:	9500      	str	r5, [sp, #0]
   2d1e6:	f00e fc66 	bl	3bab6 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
   2d1ea:	2800      	cmp	r0, #0
   2d1ec:	da04      	bge.n	2d1f8 <lfs_dir_getgstate+0x20>
   2d1ee:	1c83      	adds	r3, r0, #2
   2d1f0:	d100      	bne.n	2d1f4 <lfs_dir_getgstate+0x1c>
    return 0;
   2d1f2:	2000      	movs	r0, #0
}
   2d1f4:	b007      	add	sp, #28
   2d1f6:	bd30      	pop	{r4, r5, pc}
        lfs_gstate_xor(gstate, &temp);
   2d1f8:	4629      	mov	r1, r5
   2d1fa:	4620      	mov	r0, r4
   2d1fc:	f00e fbac 	bl	3b958 <lfs_gstate_xor>
   2d200:	e7f7      	b.n	2d1f2 <lfs_dir_getgstate+0x1a>
   2d202:	bf00      	nop
   2d204:	7ff0000c 	.word	0x7ff0000c
   2d208:	7ff00000 	.word	0x7ff00000

0002d20c <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
   2d20c:	b5f0      	push	{r4, r5, r6, r7, lr}
        strcpy(info->name, "/");
   2d20e:	f103 0c08 	add.w	ip, r3, #8
        uint16_t id, struct lfs_info *info) {
   2d212:	461c      	mov	r4, r3
    if (id == 0x3ff) {
   2d214:	f240 33ff 	movw	r3, #1023	; 0x3ff
   2d218:	429a      	cmp	r2, r3
        uint16_t id, struct lfs_info *info) {
   2d21a:	4605      	mov	r5, r0
   2d21c:	460e      	mov	r6, r1
   2d21e:	b085      	sub	sp, #20
    if (id == 0x3ff) {
   2d220:	d107      	bne.n	2d232 <lfs_dir_getinfo+0x26>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2d222:	4b1a      	ldr	r3, [pc, #104]	; (2d28c <lfs_dir_getinfo+0x80>)
   2d224:	881b      	ldrh	r3, [r3, #0]
   2d226:	8123      	strh	r3, [r4, #8]
        info->type = LFS_TYPE_DIR;
   2d228:	2302      	movs	r3, #2
   2d22a:	7023      	strb	r3, [r4, #0]
        return 0;
   2d22c:	2000      	movs	r0, #0
}
   2d22e:	b005      	add	sp, #20
   2d230:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
   2d232:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   2d234:	0297      	lsls	r7, r2, #10
   2d236:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
   2d238:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   2d23c:	f8cd c000 	str.w	ip, [sp]
   2d240:	4a13      	ldr	r2, [pc, #76]	; (2d290 <lfs_dir_getinfo+0x84>)
   2d242:	f00e fc38 	bl	3bab6 <lfs_dir_get>
    if (tag < 0) {
   2d246:	2800      	cmp	r0, #0
   2d248:	dbf1      	blt.n	2d22e <lfs_dir_getinfo+0x22>
    return (tag & 0x7ff00000) >> 20;
   2d24a:	0d00      	lsrs	r0, r0, #20
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   2d24c:	ab02      	add	r3, sp, #8
    info->type = lfs_tag_type3(tag);
   2d24e:	7020      	strb	r0, [r4, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   2d250:	9300      	str	r3, [sp, #0]
   2d252:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
   2d256:	4631      	mov	r1, r6
   2d258:	4628      	mov	r0, r5
   2d25a:	4a0e      	ldr	r2, [pc, #56]	; (2d294 <lfs_dir_getinfo+0x88>)
   2d25c:	f043 0308 	orr.w	r3, r3, #8
   2d260:	f00e fc29 	bl	3bab6 <lfs_dir_get>
    if (tag < 0) {
   2d264:	2800      	cmp	r0, #0
   2d266:	dbe2      	blt.n	2d22e <lfs_dir_getinfo+0x22>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   2d268:	f240 2302 	movw	r3, #514	; 0x202
   2d26c:	ebb3 5f10 	cmp.w	r3, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
   2d270:	ea4f 5210 	mov.w	r2, r0, lsr #20
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   2d274:	d102      	bne.n	2d27c <lfs_dir_getinfo+0x70>
        info->size = ctz.size;
   2d276:	9b03      	ldr	r3, [sp, #12]
   2d278:	6063      	str	r3, [r4, #4]
   2d27a:	e7d7      	b.n	2d22c <lfs_dir_getinfo+0x20>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   2d27c:	f240 2301 	movw	r3, #513	; 0x201
   2d280:	429a      	cmp	r2, r3
   2d282:	d1d3      	bne.n	2d22c <lfs_dir_getinfo+0x20>
    return tag & 0x000003ff;
   2d284:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
   2d288:	6060      	str	r0, [r4, #4]
   2d28a:	e7cf      	b.n	2d22c <lfs_dir_getinfo+0x20>
   2d28c:	000402e1 	.word	0x000402e1
   2d290:	780ffc00 	.word	0x780ffc00
   2d294:	700ffc00 	.word	0x700ffc00

0002d298 <lfs_dir_find>:
        const char **path, uint16_t *id) {
   2d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d29c:	b08d      	sub	sp, #52	; 0x34
   2d29e:	4681      	mov	r9, r0
   2d2a0:	4688      	mov	r8, r1
    const char *name = *path;
   2d2a2:	6816      	ldr	r6, [r2, #0]
        const char **path, uint16_t *id) {
   2d2a4:	9206      	str	r2, [sp, #24]
    if (id) {
   2d2a6:	9305      	str	r3, [sp, #20]
   2d2a8:	b11b      	cbz	r3, 2d2b2 <lfs_dir_find+0x1a>
        *id = 0x3ff;
   2d2aa:	f240 33ff 	movw	r3, #1023	; 0x3ff
   2d2ae:	9a05      	ldr	r2, [sp, #20]
   2d2b0:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
   2d2b2:	f8d9 3020 	ldr.w	r3, [r9, #32]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
   2d2b6:	4c44      	ldr	r4, [pc, #272]	; (2d3c8 <lfs_dir_find+0x130>)
    dir->tail[0] = lfs->root[0];
   2d2b8:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
   2d2bc:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   2d2c0:	f8c8 301c 	str.w	r3, [r8, #28]
        name += strspn(name, "/");
   2d2c4:	4630      	mov	r0, r6
   2d2c6:	4941      	ldr	r1, [pc, #260]	; (2d3cc <lfs_dir_find+0x134>)
   2d2c8:	f010 fb6d 	bl	3d9a6 <strspn>
   2d2cc:	1835      	adds	r5, r6, r0
        lfs_size_t namelen = strcspn(name, "/");
   2d2ce:	4628      	mov	r0, r5
   2d2d0:	493e      	ldr	r1, [pc, #248]	; (2d3cc <lfs_dir_find+0x134>)
   2d2d2:	f010 fb26 	bl	3d922 <strcspn>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   2d2d6:	2801      	cmp	r0, #1
        lfs_size_t namelen = strcspn(name, "/");
   2d2d8:	4607      	mov	r7, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   2d2da:	eb05 0600 	add.w	r6, r5, r0
   2d2de:	d123      	bne.n	2d328 <lfs_dir_find+0x90>
   2d2e0:	4602      	mov	r2, r0
   2d2e2:	493b      	ldr	r1, [pc, #236]	; (2d3d0 <lfs_dir_find+0x138>)
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
   2d2e4:	4628      	mov	r0, r5
   2d2e6:	f010 f9b1 	bl	3d64c <memcmp>
   2d2ea:	2800      	cmp	r0, #0
   2d2ec:	d0ea      	beq.n	2d2c4 <lfs_dir_find+0x2c>
        const char *suffix = name + namelen;
   2d2ee:	46b2      	mov	sl, r6
        int depth = 1;
   2d2f0:	f04f 0b01 	mov.w	fp, #1
            suffix += strspn(suffix, "/");
   2d2f4:	4650      	mov	r0, sl
   2d2f6:	4935      	ldr	r1, [pc, #212]	; (2d3cc <lfs_dir_find+0x134>)
   2d2f8:	f010 fb55 	bl	3d9a6 <strspn>
   2d2fc:	4482      	add	sl, r0
            sufflen = strcspn(suffix, "/");
   2d2fe:	4650      	mov	r0, sl
   2d300:	4932      	ldr	r1, [pc, #200]	; (2d3cc <lfs_dir_find+0x134>)
   2d302:	f010 fb0e 	bl	3d922 <strcspn>
            if (sufflen == 0) {
   2d306:	4602      	mov	r2, r0
   2d308:	b1b8      	cbz	r0, 2d33a <lfs_dir_find+0xa2>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
   2d30a:	2802      	cmp	r0, #2
   2d30c:	d111      	bne.n	2d332 <lfs_dir_find+0x9a>
   2d30e:	9007      	str	r0, [sp, #28]
   2d310:	4930      	ldr	r1, [pc, #192]	; (2d3d4 <lfs_dir_find+0x13c>)
   2d312:	4650      	mov	r0, sl
   2d314:	f010 f99a 	bl	3d64c <memcmp>
   2d318:	9a07      	ldr	r2, [sp, #28]
   2d31a:	b950      	cbnz	r0, 2d332 <lfs_dir_find+0x9a>
                if (depth == 0) {
   2d31c:	f1bb 0b01 	subs.w	fp, fp, #1
   2d320:	d109      	bne.n	2d336 <lfs_dir_find+0x9e>
                    name = suffix + sufflen;
   2d322:	f10a 0602 	add.w	r6, sl, #2
                    goto nextname;
   2d326:	e7cd      	b.n	2d2c4 <lfs_dir_find+0x2c>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   2d328:	2802      	cmp	r0, #2
   2d32a:	d1e0      	bne.n	2d2ee <lfs_dir_find+0x56>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
   2d32c:	4602      	mov	r2, r0
   2d32e:	4929      	ldr	r1, [pc, #164]	; (2d3d4 <lfs_dir_find+0x13c>)
   2d330:	e7d8      	b.n	2d2e4 <lfs_dir_find+0x4c>
                depth += 1;
   2d332:	f10b 0b01 	add.w	fp, fp, #1
            suffix += sufflen;
   2d336:	4492      	add	sl, r2
            suffix += strspn(suffix, "/");
   2d338:	e7dc      	b.n	2d2f4 <lfs_dir_find+0x5c>
        if (name[0] == '\0') {
   2d33a:	782b      	ldrb	r3, [r5, #0]
   2d33c:	2b00      	cmp	r3, #0
   2d33e:	d03c      	beq.n	2d3ba <lfs_dir_find+0x122>
        *path = name;
   2d340:	9b06      	ldr	r3, [sp, #24]
   2d342:	601d      	str	r5, [r3, #0]
    return (tag & 0x7ff00000) >> 20;
   2d344:	0d23      	lsrs	r3, r4, #20
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   2d346:	2b02      	cmp	r3, #2
   2d348:	d13b      	bne.n	2d3c2 <lfs_dir_find+0x12a>
        if (lfs_tag_id(tag) != 0x3ff) {
   2d34a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   2d34e:	f3c4 2489 	ubfx	r4, r4, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
   2d352:	429c      	cmp	r4, r3
   2d354:	f108 0a18 	add.w	sl, r8, #24
   2d358:	d123      	bne.n	2d3a2 <lfs_dir_find+0x10a>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   2d35a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
                    (strchr(name, '/') == NULL) ? id : NULL,
   2d35e:	212f      	movs	r1, #47	; 0x2f
   2d360:	4628      	mov	r0, r5
   2d362:	f010 fad1 	bl	3d908 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   2d366:	2800      	cmp	r0, #0
   2d368:	9b05      	ldr	r3, [sp, #20]
   2d36a:	bf18      	it	ne
   2d36c:	2300      	movne	r3, #0
   2d36e:	4a1a      	ldr	r2, [pc, #104]	; (2d3d8 <lfs_dir_find+0x140>)
   2d370:	4641      	mov	r1, r8
   2d372:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2d376:	4648      	mov	r0, r9
   2d378:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
   2d37c:	4652      	mov	r2, sl
   2d37e:	f8cd b00c 	str.w	fp, [sp, #12]
   2d382:	9700      	str	r7, [sp, #0]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
   2d384:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
   2d388:	970b      	str	r7, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   2d38a:	f7ff fb6f 	bl	2ca6c <lfs_dir_fetchmatch>
            if (tag < 0) {
   2d38e:	1e04      	subs	r4, r0, #0
   2d390:	db13      	blt.n	2d3ba <lfs_dir_find+0x122>
            if (tag) {
   2d392:	d197      	bne.n	2d2c4 <lfs_dir_find+0x2c>
            if (!dir->split) {
   2d394:	f898 3017 	ldrb.w	r3, [r8, #23]
   2d398:	2b00      	cmp	r3, #0
   2d39a:	d1e0      	bne.n	2d35e <lfs_dir_find+0xc6>
                return LFS_ERR_NOENT;
   2d39c:	f06f 0401 	mvn.w	r4, #1
   2d3a0:	e00b      	b.n	2d3ba <lfs_dir_find+0x122>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   2d3a2:	4b0e      	ldr	r3, [pc, #56]	; (2d3dc <lfs_dir_find+0x144>)
   2d3a4:	4641      	mov	r1, r8
   2d3a6:	ea43 2384 	orr.w	r3, r3, r4, lsl #10
   2d3aa:	4648      	mov	r0, r9
   2d3ac:	4a0c      	ldr	r2, [pc, #48]	; (2d3e0 <lfs_dir_find+0x148>)
   2d3ae:	f8cd a000 	str.w	sl, [sp]
   2d3b2:	f00e fb80 	bl	3bab6 <lfs_dir_get>
            if (res < 0) {
   2d3b6:	1e04      	subs	r4, r0, #0
   2d3b8:	dacf      	bge.n	2d35a <lfs_dir_find+0xc2>
}
   2d3ba:	4620      	mov	r0, r4
   2d3bc:	b00d      	add	sp, #52	; 0x34
   2d3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOTDIR;
   2d3c2:	f06f 0413 	mvn.w	r4, #19
   2d3c6:	e7f8      	b.n	2d3ba <lfs_dir_find+0x122>
   2d3c8:	002ffc00 	.word	0x002ffc00
   2d3cc:	000402e1 	.word	0x000402e1
   2d3d0:	00042295 	.word	0x00042295
   2d3d4:	00042294 	.word	0x00042294
   2d3d8:	0003bb2d 	.word	0x0003bb2d
   2d3dc:	20000008 	.word	0x20000008
   2d3e0:	700ffc00 	.word	0x700ffc00

0002d3e4 <lfs_dir_getread.constprop.0>:
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   2d3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d3e8:	4698      	mov	r8, r3
   2d3ea:	b085      	sub	sp, #20
    if (off+size > lfs->cfg->block_size) {
   2d3ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   2d3ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2d3f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if (off+size > lfs->cfg->block_size) {
   2d3f2:	69db      	ldr	r3, [r3, #28]
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   2d3f4:	4615      	mov	r5, r2
    if (off+size > lfs->cfg->block_size) {
   2d3f6:	19a2      	adds	r2, r4, r6
   2d3f8:	429a      	cmp	r2, r3
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   2d3fa:	4607      	mov	r7, r0
   2d3fc:	468b      	mov	fp, r1
    if (off+size > lfs->cfg->block_size) {
   2d3fe:	d84c      	bhi.n	2d49a <lfs_dir_getread.constprop.0+0xb6>
        rcache->block = LFS_BLOCK_INLINE;
   2d400:	f06f 0a01 	mvn.w	sl, #1
    while (size > 0) {
   2d404:	2e00      	cmp	r6, #0
   2d406:	d046      	beq.n	2d496 <lfs_dir_getread.constprop.0+0xb2>
    return lfs_aligndown(a + alignment-1, alignment);
   2d408:	f108 39ff 	add.w	r9, r8, #4294967295
        if (rcache->block == LFS_BLOCK_INLINE &&
   2d40c:	682b      	ldr	r3, [r5, #0]
   2d40e:	68e8      	ldr	r0, [r5, #12]
   2d410:	3302      	adds	r3, #2
   2d412:	d118      	bne.n	2d446 <lfs_dir_getread.constprop.0+0x62>
                off < rcache->off + rcache->size) {
   2d414:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
   2d418:	440b      	add	r3, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
   2d41a:	42a3      	cmp	r3, r4
   2d41c:	d913      	bls.n	2d446 <lfs_dir_getread.constprop.0+0x62>
            if (off >= rcache->off) {
   2d41e:	42a1      	cmp	r1, r4
   2d420:	d811      	bhi.n	2d446 <lfs_dir_getread.constprop.0+0x62>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   2d422:	eba3 0904 	sub.w	r9, r3, r4
    return (a < b) ? a : b;
   2d426:	45b1      	cmp	r9, r6
   2d428:	bf28      	it	cs
   2d42a:	46b1      	movcs	r9, r6
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   2d42c:	1a61      	subs	r1, r4, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d42e:	4401      	add	r1, r0
   2d430:	464a      	mov	r2, r9
   2d432:	9810      	ldr	r0, [sp, #64]	; 0x40
   2d434:	f010 f91a 	bl	3d66c <memcpy>
                data += diff;
   2d438:	9b10      	ldr	r3, [sp, #64]	; 0x40
                off += diff;
   2d43a:	444c      	add	r4, r9
                data += diff;
   2d43c:	444b      	add	r3, r9
   2d43e:	9310      	str	r3, [sp, #64]	; 0x40
                size -= diff;
   2d440:	eba6 0609 	sub.w	r6, r6, r9
                continue;
   2d444:	e7de      	b.n	2d404 <lfs_dir_getread.constprop.0+0x20>
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   2d446:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
        rcache->block = LFS_BLOCK_INLINE;
   2d44a:	f8c5 a000 	str.w	sl, [r5]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   2d44e:	f8dc 1014 	ldr.w	r1, [ip, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   2d452:	eb09 0301 	add.w	r3, r9, r1
   2d456:	4423      	add	r3, r4
    return a - (a % alignment);
   2d458:	fbb3 fef1 	udiv	lr, r3, r1
   2d45c:	fbb4 f2f1 	udiv	r2, r4, r1
   2d460:	fb01 4212 	mls	r2, r1, r2, r4
   2d464:	fb01 311e 	mls	r1, r1, lr, r3
   2d468:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
   2d46a:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
    return a - (a % alignment);
   2d46e:	1aa2      	subs	r2, r4, r2
    return (a < b) ? a : b;
   2d470:	428b      	cmp	r3, r1
   2d472:	bf28      	it	cs
   2d474:	460b      	movcs	r3, r1
   2d476:	606a      	str	r2, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   2d478:	60ab      	str	r3, [r5, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   2d47a:	4659      	mov	r1, fp
   2d47c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   2d480:	9200      	str	r2, [sp, #0]
   2d482:	4638      	mov	r0, r7
   2d484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d486:	4a06      	ldr	r2, [pc, #24]	; (2d4a0 <lfs_dir_getread.constprop.0+0xbc>)
   2d488:	f7ff fe14 	bl	2d0b4 <lfs_dir_getslice>
        if (err < 0) {
   2d48c:	2800      	cmp	r0, #0
   2d48e:	dabd      	bge.n	2d40c <lfs_dir_getread.constprop.0+0x28>
}
   2d490:	b005      	add	sp, #20
   2d492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
   2d496:	4630      	mov	r0, r6
   2d498:	e7fa      	b.n	2d490 <lfs_dir_getread.constprop.0+0xac>
        return LFS_ERR_CORRUPT;
   2d49a:	f06f 0053 	mvn.w	r0, #83	; 0x53
   2d49e:	e7f7      	b.n	2d490 <lfs_dir_getread.constprop.0+0xac>
   2d4a0:	fff7fc00 	.word	0xfff7fc00

0002d4a4 <lfs_init>:
    LFS_ASSERT(lfs->cfg->read_size != 0);
   2d4a4:	694b      	ldr	r3, [r1, #20]
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   2d4a6:	b510      	push	{r4, lr}
   2d4a8:	4604      	mov	r4, r0
    lfs->cfg = cfg;
   2d4aa:	6681      	str	r1, [r0, #104]	; 0x68
    LFS_ASSERT(lfs->cfg->read_size != 0);
   2d4ac:	b95b      	cbnz	r3, 2d4c6 <lfs_init+0x22>
   2d4ae:	499f      	ldr	r1, [pc, #636]	; (2d72c <lfs_init+0x288>)
   2d4b0:	489f      	ldr	r0, [pc, #636]	; (2d730 <lfs_init+0x28c>)
   2d4b2:	f640 538d 	movw	r3, #3469	; 0xd8d
   2d4b6:	4a9f      	ldr	r2, [pc, #636]	; (2d734 <lfs_init+0x290>)
   2d4b8:	f00b fe7f 	bl	391ba <printk>
   2d4bc:	f640 518d 	movw	r1, #3469	; 0xd8d
   2d4c0:	489c      	ldr	r0, [pc, #624]	; (2d734 <lfs_init+0x290>)
   2d4c2:	f00c f8d1 	bl	39668 <assert_post_action>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
   2d4c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d4c8:	699b      	ldr	r3, [r3, #24]
   2d4ca:	b95b      	cbnz	r3, 2d4e4 <lfs_init+0x40>
   2d4cc:	499a      	ldr	r1, [pc, #616]	; (2d738 <lfs_init+0x294>)
   2d4ce:	4898      	ldr	r0, [pc, #608]	; (2d730 <lfs_init+0x28c>)
   2d4d0:	f640 538e 	movw	r3, #3470	; 0xd8e
   2d4d4:	4a97      	ldr	r2, [pc, #604]	; (2d734 <lfs_init+0x290>)
   2d4d6:	f00b fe70 	bl	391ba <printk>
   2d4da:	f640 518e 	movw	r1, #3470	; 0xd8e
   2d4de:	4895      	ldr	r0, [pc, #596]	; (2d734 <lfs_init+0x290>)
   2d4e0:	f00c f8c2 	bl	39668 <assert_post_action>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
   2d4e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2d4e8:	b95b      	cbnz	r3, 2d502 <lfs_init+0x5e>
   2d4ea:	4994      	ldr	r1, [pc, #592]	; (2d73c <lfs_init+0x298>)
   2d4ec:	4890      	ldr	r0, [pc, #576]	; (2d730 <lfs_init+0x28c>)
   2d4ee:	f640 538f 	movw	r3, #3471	; 0xd8f
   2d4f2:	4a90      	ldr	r2, [pc, #576]	; (2d734 <lfs_init+0x290>)
   2d4f4:	f00b fe61 	bl	391ba <printk>
   2d4f8:	f640 518f 	movw	r1, #3471	; 0xd8f
   2d4fc:	488d      	ldr	r0, [pc, #564]	; (2d734 <lfs_init+0x290>)
   2d4fe:	f00c f8b3 	bl	39668 <assert_post_action>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
   2d502:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2d504:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2d506:	6952      	ldr	r2, [r2, #20]
   2d508:	fbb3 f1f2 	udiv	r1, r3, r2
   2d50c:	fb02 3311 	mls	r3, r2, r1, r3
   2d510:	b15b      	cbz	r3, 2d52a <lfs_init+0x86>
   2d512:	498b      	ldr	r1, [pc, #556]	; (2d740 <lfs_init+0x29c>)
   2d514:	4886      	ldr	r0, [pc, #536]	; (2d730 <lfs_init+0x28c>)
   2d516:	f640 5393 	movw	r3, #3475	; 0xd93
   2d51a:	4a86      	ldr	r2, [pc, #536]	; (2d734 <lfs_init+0x290>)
   2d51c:	f00b fe4d 	bl	391ba <printk>
   2d520:	f640 5193 	movw	r1, #3475	; 0xd93
   2d524:	4883      	ldr	r0, [pc, #524]	; (2d734 <lfs_init+0x290>)
   2d526:	f00c f89f 	bl	39668 <assert_post_action>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
   2d52a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2d52c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2d52e:	6992      	ldr	r2, [r2, #24]
   2d530:	fbb3 f1f2 	udiv	r1, r3, r2
   2d534:	fb02 3311 	mls	r3, r2, r1, r3
   2d538:	b15b      	cbz	r3, 2d552 <lfs_init+0xae>
   2d53a:	4982      	ldr	r1, [pc, #520]	; (2d744 <lfs_init+0x2a0>)
   2d53c:	487c      	ldr	r0, [pc, #496]	; (2d730 <lfs_init+0x28c>)
   2d53e:	f640 5394 	movw	r3, #3476	; 0xd94
   2d542:	4a7c      	ldr	r2, [pc, #496]	; (2d734 <lfs_init+0x290>)
   2d544:	f00b fe39 	bl	391ba <printk>
   2d548:	f640 5194 	movw	r1, #3476	; 0xd94
   2d54c:	4879      	ldr	r0, [pc, #484]	; (2d734 <lfs_init+0x290>)
   2d54e:	f00c f88b 	bl	39668 <assert_post_action>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
   2d552:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2d554:	69d3      	ldr	r3, [r2, #28]
   2d556:	6a92      	ldr	r2, [r2, #40]	; 0x28
   2d558:	fbb3 f1f2 	udiv	r1, r3, r2
   2d55c:	fb02 3311 	mls	r3, r2, r1, r3
   2d560:	b15b      	cbz	r3, 2d57a <lfs_init+0xd6>
   2d562:	4979      	ldr	r1, [pc, #484]	; (2d748 <lfs_init+0x2a4>)
   2d564:	4872      	ldr	r0, [pc, #456]	; (2d730 <lfs_init+0x28c>)
   2d566:	f640 5395 	movw	r3, #3477	; 0xd95
   2d56a:	4a72      	ldr	r2, [pc, #456]	; (2d734 <lfs_init+0x290>)
   2d56c:	f00b fe25 	bl	391ba <printk>
   2d570:	f640 5195 	movw	r1, #3477	; 0xd95
   2d574:	486f      	ldr	r0, [pc, #444]	; (2d734 <lfs_init+0x290>)
   2d576:	f00c f877 	bl	39668 <assert_post_action>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
   2d57a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d57c:	69da      	ldr	r2, [r3, #28]
   2d57e:	f04f 33ff 	mov.w	r3, #4294967295
   2d582:	f1a2 0108 	sub.w	r1, r2, #8
   2d586:	fbb3 f3f1 	udiv	r3, r3, r1
    return 32 - __builtin_clz(a-1);
   2d58a:	3b01      	subs	r3, #1
   2d58c:	fab3 f383 	clz	r3, r3
   2d590:	f1c3 0320 	rsb	r3, r3, #32
   2d594:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   2d598:	d20b      	bcs.n	2d5b2 <lfs_init+0x10e>
   2d59a:	496c      	ldr	r1, [pc, #432]	; (2d74c <lfs_init+0x2a8>)
   2d59c:	4864      	ldr	r0, [pc, #400]	; (2d730 <lfs_init+0x28c>)
   2d59e:	f640 5398 	movw	r3, #3480	; 0xd98
   2d5a2:	4a64      	ldr	r2, [pc, #400]	; (2d734 <lfs_init+0x290>)
   2d5a4:	f00b fe09 	bl	391ba <printk>
   2d5a8:	f640 5198 	movw	r1, #3480	; 0xd98
   2d5ac:	4861      	ldr	r0, [pc, #388]	; (2d734 <lfs_init+0x290>)
   2d5ae:	f00c f85b 	bl	39668 <assert_post_action>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
   2d5b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d5b6:	b95b      	cbnz	r3, 2d5d0 <lfs_init+0x12c>
   2d5b8:	4965      	ldr	r1, [pc, #404]	; (2d750 <lfs_init+0x2ac>)
   2d5ba:	485d      	ldr	r0, [pc, #372]	; (2d730 <lfs_init+0x28c>)
   2d5bc:	f640 53a1 	movw	r3, #3489	; 0xda1
   2d5c0:	4a5c      	ldr	r2, [pc, #368]	; (2d734 <lfs_init+0x290>)
   2d5c2:	f00b fdfa 	bl	391ba <printk>
   2d5c6:	f640 51a1 	movw	r1, #3489	; 0xda1
   2d5ca:	485a      	ldr	r0, [pc, #360]	; (2d734 <lfs_init+0x290>)
   2d5cc:	f00c f84c 	bl	39668 <assert_post_action>
    if (lfs->cfg->read_buffer) {
   2d5d0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d5d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2d5d4:	2a00      	cmp	r2, #0
   2d5d6:	f000 808d 	beq.w	2d6f4 <lfs_init+0x250>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
   2d5da:	60e2      	str	r2, [r4, #12]
    if (lfs->cfg->prog_buffer) {
   2d5dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d5de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2d5e0:	2a00      	cmp	r2, #0
   2d5e2:	f000 8094 	beq.w	2d70e <lfs_init+0x26a>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
   2d5e6:	61e2      	str	r2, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
   2d5e8:	4621      	mov	r1, r4
   2d5ea:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2d5ec:	f00e fb5a 	bl	3bca4 <lfs_cache_zero.isra.0>
    lfs_cache_zero(lfs, &lfs->pcache);
   2d5f0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2d5f2:	f104 0110 	add.w	r1, r4, #16
   2d5f6:	f00e fb55 	bl	3bca4 <lfs_cache_zero.isra.0>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
   2d5fa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d5fe:	b95b      	cbnz	r3, 2d618 <lfs_init+0x174>
   2d600:	4954      	ldr	r1, [pc, #336]	; (2d754 <lfs_init+0x2b0>)
   2d602:	484b      	ldr	r0, [pc, #300]	; (2d730 <lfs_init+0x28c>)
   2d604:	f640 53bf 	movw	r3, #3519	; 0xdbf
   2d608:	4a4a      	ldr	r2, [pc, #296]	; (2d734 <lfs_init+0x290>)
   2d60a:	f00b fdd6 	bl	391ba <printk>
   2d60e:	f640 51bf 	movw	r1, #3519	; 0xdbf
   2d612:	4848      	ldr	r0, [pc, #288]	; (2d734 <lfs_init+0x290>)
   2d614:	f00c f828 	bl	39668 <assert_post_action>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
   2d618:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d61c:	0752      	lsls	r2, r2, #29
   2d61e:	d102      	bne.n	2d626 <lfs_init+0x182>
   2d620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2d622:	079b      	lsls	r3, r3, #30
   2d624:	d00b      	beq.n	2d63e <lfs_init+0x19a>
   2d626:	494c      	ldr	r1, [pc, #304]	; (2d758 <lfs_init+0x2b4>)
   2d628:	4841      	ldr	r0, [pc, #260]	; (2d730 <lfs_init+0x28c>)
   2d62a:	f44f 635c 	mov.w	r3, #3520	; 0xdc0
   2d62e:	4a41      	ldr	r2, [pc, #260]	; (2d734 <lfs_init+0x290>)
   2d630:	f00b fdc3 	bl	391ba <printk>
   2d634:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
   2d638:	483e      	ldr	r0, [pc, #248]	; (2d734 <lfs_init+0x290>)
   2d63a:	f00c f815 	bl	39668 <assert_post_action>
    if (lfs->cfg->lookahead_buffer) {
   2d63e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2d642:	2a00      	cmp	r2, #0
   2d644:	d06b      	beq.n	2d71e <lfs_init+0x27a>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
   2d646:	6662      	str	r2, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
   2d648:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2d64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   2d64c:	2bff      	cmp	r3, #255	; 0xff
   2d64e:	d90b      	bls.n	2d668 <lfs_init+0x1c4>
   2d650:	4942      	ldr	r1, [pc, #264]	; (2d75c <lfs_init+0x2b8>)
   2d652:	4837      	ldr	r0, [pc, #220]	; (2d730 <lfs_init+0x28c>)
   2d654:	f640 53cd 	movw	r3, #3533	; 0xdcd
   2d658:	4a36      	ldr	r2, [pc, #216]	; (2d734 <lfs_init+0x290>)
   2d65a:	f00b fdae 	bl	391ba <printk>
   2d65e:	f640 51cd 	movw	r1, #3533	; 0xdcd
   2d662:	4834      	ldr	r0, [pc, #208]	; (2d734 <lfs_init+0x290>)
   2d664:	f00c f800 	bl	39668 <assert_post_action>
    lfs->name_max = lfs->cfg->name_max;
   2d668:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2d66a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
        lfs->name_max = LFS_NAME_MAX;
   2d66c:	2b00      	cmp	r3, #0
   2d66e:	bf08      	it	eq
   2d670:	23ff      	moveq	r3, #255	; 0xff
   2d672:	66e3      	str	r3, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
   2d674:	6c13      	ldr	r3, [r2, #64]	; 0x40
   2d676:	2b00      	cmp	r3, #0
   2d678:	da0b      	bge.n	2d692 <lfs_init+0x1ee>
   2d67a:	4939      	ldr	r1, [pc, #228]	; (2d760 <lfs_init+0x2bc>)
   2d67c:	482c      	ldr	r0, [pc, #176]	; (2d730 <lfs_init+0x28c>)
   2d67e:	f640 53d3 	movw	r3, #3539	; 0xdd3
   2d682:	4a2c      	ldr	r2, [pc, #176]	; (2d734 <lfs_init+0x290>)
   2d684:	f00b fd99 	bl	391ba <printk>
   2d688:	f640 51d3 	movw	r1, #3539	; 0xdd3
   2d68c:	4829      	ldr	r0, [pc, #164]	; (2d734 <lfs_init+0x290>)
   2d68e:	f00b ffeb 	bl	39668 <assert_post_action>
    lfs->file_max = lfs->cfg->file_max;
   2d692:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2d694:	6c13      	ldr	r3, [r2, #64]	; 0x40
        lfs->file_max = LFS_FILE_MAX;
   2d696:	2b00      	cmp	r3, #0
   2d698:	bf08      	it	eq
   2d69a:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
   2d69e:	6723      	str	r3, [r4, #112]	; 0x70
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
   2d6a0:	f240 33fe 	movw	r3, #1022	; 0x3fe
   2d6a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
   2d6a6:	429a      	cmp	r2, r3
   2d6a8:	d90b      	bls.n	2d6c2 <lfs_init+0x21e>
   2d6aa:	492e      	ldr	r1, [pc, #184]	; (2d764 <lfs_init+0x2c0>)
   2d6ac:	4820      	ldr	r0, [pc, #128]	; (2d730 <lfs_init+0x28c>)
   2d6ae:	f640 53d9 	movw	r3, #3545	; 0xdd9
   2d6b2:	4a20      	ldr	r2, [pc, #128]	; (2d734 <lfs_init+0x290>)
   2d6b4:	f00b fd81 	bl	391ba <printk>
   2d6b8:	f640 51d9 	movw	r1, #3545	; 0xdd9
   2d6bc:	481d      	ldr	r0, [pc, #116]	; (2d734 <lfs_init+0x290>)
   2d6be:	f00b ffd3 	bl	39668 <assert_post_action>
        lfs->attr_max = LFS_ATTR_MAX;
   2d6c2:	f240 32fe 	movw	r2, #1022	; 0x3fe
    lfs->attr_max = lfs->cfg->attr_max;
   2d6c6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    lfs->mlist = NULL;
   2d6c8:	2000      	movs	r0, #0
    lfs->attr_max = lfs->cfg->attr_max;
   2d6ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    lfs->seed = 0;
   2d6cc:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
        lfs->attr_max = LFS_ATTR_MAX;
   2d6d0:	2b00      	cmp	r3, #0
   2d6d2:	bf08      	it	eq
   2d6d4:	4613      	moveq	r3, r2
   2d6d6:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = LFS_BLOCK_NULL;
   2d6d8:	f04f 33ff 	mov.w	r3, #4294967295
    lfs->gdisk = (lfs_gstate_t){0};
   2d6dc:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
    lfs->root[1] = LFS_BLOCK_NULL;
   2d6e0:	e9c4 3308 	strd	r3, r3, [r4, #32]
    lfs->gstate = (lfs_gstate_t){0};
   2d6e4:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
    lfs->gdelta = (lfs_gstate_t){0};
   2d6e8:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
    lfs->gdisk = (lfs_gstate_t){0};
   2d6ec:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
   2d6ee:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
   2d6f0:	6520      	str	r0, [r4, #80]	; 0x50
}
   2d6f2:	bd10      	pop	{r4, pc}

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
   2d6f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
   2d6f6:	f009 ff5d 	bl	375b4 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   2d6fa:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
   2d6fc:	2800      	cmp	r0, #0
   2d6fe:	f47f af6d 	bne.w	2d5dc <lfs_init+0x138>
    lfs_deinit(lfs);
   2d702:	4620      	mov	r0, r4
   2d704:	f00e f96d 	bl	3b9e2 <lfs_deinit>
    return err;
   2d708:	f06f 000b 	mvn.w	r0, #11
   2d70c:	e7f1      	b.n	2d6f2 <lfs_init+0x24e>
   2d70e:	6a98      	ldr	r0, [r3, #40]	; 0x28
   2d710:	f009 ff50 	bl	375b4 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   2d714:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
   2d716:	2800      	cmp	r0, #0
   2d718:	f47f af66 	bne.w	2d5e8 <lfs_init+0x144>
   2d71c:	e7f1      	b.n	2d702 <lfs_init+0x25e>
   2d71e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   2d720:	f009 ff48 	bl	375b4 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
   2d724:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
   2d726:	2800      	cmp	r0, #0
   2d728:	d18e      	bne.n	2d648 <lfs_init+0x1a4>
   2d72a:	e7ea      	b.n	2d702 <lfs_init+0x25e>
   2d72c:	00042297 	.word	0x00042297
   2d730:	0003f0e1 	.word	0x0003f0e1
   2d734:	00042209 	.word	0x00042209
   2d738:	000422b0 	.word	0x000422b0
   2d73c:	000422c9 	.word	0x000422c9
   2d740:	000422e3 	.word	0x000422e3
   2d744:	00042313 	.word	0x00042313
   2d748:	00042343 	.word	0x00042343
   2d74c:	00042374 	.word	0x00042374
   2d750:	000423c0 	.word	0x000423c0
   2d754:	000423dc 	.word	0x000423dc
   2d758:	000423f9 	.word	0x000423f9
   2d75c:	0004244d 	.word	0x0004244d
   2d760:	00042467 	.word	0x00042467
   2d764:	00042488 	.word	0x00042488

0002d768 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   2d768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d76c:	4699      	mov	r9, r3
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   2d76e:	680b      	ldr	r3, [r1, #0]
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   2d770:	4690      	mov	r8, r2
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   2d772:	1cda      	adds	r2, r3, #3
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   2d774:	4607      	mov	r7, r0
   2d776:	460c      	mov	r4, r1
   2d778:	b085      	sub	sp, #20
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   2d77a:	d904      	bls.n	2d786 <lfs_bd_flush+0x1e>
    return 0;
   2d77c:	2600      	movs	r6, #0
}
   2d77e:	4630      	mov	r0, r6
   2d780:	b005      	add	sp, #20
   2d782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
   2d786:	6e82      	ldr	r2, [r0, #104]	; 0x68
   2d788:	6a12      	ldr	r2, [r2, #32]
   2d78a:	4293      	cmp	r3, r2
   2d78c:	d309      	bcc.n	2d7a2 <lfs_bd_flush+0x3a>
   2d78e:	4922      	ldr	r1, [pc, #136]	; (2d818 <lfs_bd_flush+0xb0>)
   2d790:	4822      	ldr	r0, [pc, #136]	; (2d81c <lfs_bd_flush+0xb4>)
   2d792:	238e      	movs	r3, #142	; 0x8e
   2d794:	4a22      	ldr	r2, [pc, #136]	; (2d820 <lfs_bd_flush+0xb8>)
   2d796:	f00b fd10 	bl	391ba <printk>
   2d79a:	218e      	movs	r1, #142	; 0x8e
   2d79c:	4820      	ldr	r0, [pc, #128]	; (2d820 <lfs_bd_flush+0xb8>)
   2d79e:	f00b ff63 	bl	39668 <assert_post_action>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
   2d7a2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    return lfs_aligndown(a + alignment-1, alignment);
   2d7a4:	68a5      	ldr	r5, [r4, #8]
   2d7a6:	6982      	ldr	r2, [r0, #24]
   2d7a8:	4415      	add	r5, r2
   2d7aa:	3d01      	subs	r5, #1
    return a - (a % alignment);
   2d7ac:	fbb5 f3f2 	udiv	r3, r5, r2
   2d7b0:	fb02 5313 	mls	r3, r2, r3, r5
   2d7b4:	1aed      	subs	r5, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
   2d7b6:	9500      	str	r5, [sp, #0]
   2d7b8:	6886      	ldr	r6, [r0, #8]
   2d7ba:	68e3      	ldr	r3, [r4, #12]
   2d7bc:	e9d4 1200 	ldrd	r1, r2, [r4]
   2d7c0:	47b0      	blx	r6
        LFS_ASSERT(err <= 0);
   2d7c2:	1e06      	subs	r6, r0, #0
   2d7c4:	dd0a      	ble.n	2d7dc <lfs_bd_flush+0x74>
   2d7c6:	2392      	movs	r3, #146	; 0x92
   2d7c8:	4a15      	ldr	r2, [pc, #84]	; (2d820 <lfs_bd_flush+0xb8>)
   2d7ca:	4916      	ldr	r1, [pc, #88]	; (2d824 <lfs_bd_flush+0xbc>)
   2d7cc:	4813      	ldr	r0, [pc, #76]	; (2d81c <lfs_bd_flush+0xb4>)
   2d7ce:	f00b fcf4 	bl	391ba <printk>
   2d7d2:	2192      	movs	r1, #146	; 0x92
   2d7d4:	4812      	ldr	r0, [pc, #72]	; (2d820 <lfs_bd_flush+0xb8>)
   2d7d6:	f00b ff47 	bl	39668 <assert_post_action>
        if (err) {
   2d7da:	e7d0      	b.n	2d77e <lfs_bd_flush+0x16>
   2d7dc:	d1cf      	bne.n	2d77e <lfs_bd_flush+0x16>
        if (validate) {
   2d7de:	f1b9 0f00 	cmp.w	r9, #0
   2d7e2:	d104      	bne.n	2d7ee <lfs_bd_flush+0x86>
        lfs_cache_zero(lfs, pcache);
   2d7e4:	4621      	mov	r1, r4
   2d7e6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   2d7e8:	f00e fa5c 	bl	3bca4 <lfs_cache_zero.isra.0>
   2d7ec:	e7c6      	b.n	2d77c <lfs_bd_flush+0x14>
    rcache->block = LFS_BLOCK_NULL;
   2d7ee:	f04f 33ff 	mov.w	r3, #4294967295
   2d7f2:	f8c8 3000 	str.w	r3, [r8]
            int res = lfs_bd_cmp(lfs,
   2d7f6:	9502      	str	r5, [sp, #8]
   2d7f8:	68e3      	ldr	r3, [r4, #12]
   2d7fa:	462a      	mov	r2, r5
   2d7fc:	9301      	str	r3, [sp, #4]
   2d7fe:	6863      	ldr	r3, [r4, #4]
   2d800:	4641      	mov	r1, r8
   2d802:	9300      	str	r3, [sp, #0]
   2d804:	4638      	mov	r0, r7
   2d806:	6823      	ldr	r3, [r4, #0]
   2d808:	f00e f961 	bl	3bace <lfs_bd_cmp.constprop.0>
            if (res < 0) {
   2d80c:	1e06      	subs	r6, r0, #0
   2d80e:	dbb6      	blt.n	2d77e <lfs_bd_flush+0x16>
            if (res != LFS_CMP_EQ) {
   2d810:	d0e8      	beq.n	2d7e4 <lfs_bd_flush+0x7c>
                return LFS_ERR_CORRUPT;
   2d812:	f06f 0653 	mvn.w	r6, #83	; 0x53
   2d816:	e7b2      	b.n	2d77e <lfs_bd_flush+0x16>
   2d818:	000424a3 	.word	0x000424a3
   2d81c:	0003f0e1 	.word	0x0003f0e1
   2d820:	00042209 	.word	0x00042209
   2d824:	00042261 	.word	0x00042261

0002d828 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
   2d828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d82c:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
   2d830:	f118 0f02 	cmn.w	r8, #2
        const void *buffer, lfs_size_t size) {
   2d834:	4606      	mov	r6, r0
   2d836:	460c      	mov	r4, r1
   2d838:	4692      	mov	sl, r2
   2d83a:	469b      	mov	fp, r3
   2d83c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
   2d83e:	d00d      	beq.n	2d85c <lfs_bd_prog+0x34>
   2d840:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2d842:	6a1b      	ldr	r3, [r3, #32]
   2d844:	4543      	cmp	r3, r8
   2d846:	d809      	bhi.n	2d85c <lfs_bd_prog+0x34>
   2d848:	4933      	ldr	r1, [pc, #204]	; (2d918 <lfs_bd_prog+0xf0>)
   2d84a:	4834      	ldr	r0, [pc, #208]	; (2d91c <lfs_bd_prog+0xf4>)
   2d84c:	23bf      	movs	r3, #191	; 0xbf
   2d84e:	4a34      	ldr	r2, [pc, #208]	; (2d920 <lfs_bd_prog+0xf8>)
   2d850:	f00b fcb3 	bl	391ba <printk>
   2d854:	21bf      	movs	r1, #191	; 0xbf
   2d856:	4832      	ldr	r0, [pc, #200]	; (2d920 <lfs_bd_prog+0xf8>)
   2d858:	f00b ff06 	bl	39668 <assert_post_action>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
   2d85c:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   2d85e:	19eb      	adds	r3, r5, r7
   2d860:	69d2      	ldr	r2, [r2, #28]
   2d862:	4293      	cmp	r3, r2
   2d864:	d909      	bls.n	2d87a <lfs_bd_prog+0x52>
   2d866:	492f      	ldr	r1, [pc, #188]	; (2d924 <lfs_bd_prog+0xfc>)
   2d868:	482c      	ldr	r0, [pc, #176]	; (2d91c <lfs_bd_prog+0xf4>)
   2d86a:	23c0      	movs	r3, #192	; 0xc0
   2d86c:	4a2c      	ldr	r2, [pc, #176]	; (2d920 <lfs_bd_prog+0xf8>)
   2d86e:	f00b fca4 	bl	391ba <printk>
   2d872:	21c0      	movs	r1, #192	; 0xc0
   2d874:	482a      	ldr	r0, [pc, #168]	; (2d920 <lfs_bd_prog+0xf8>)
   2d876:	f00b fef7 	bl	39668 <assert_post_action>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
   2d87a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2d920 <lfs_bd_prog+0xf8>
    while (size > 0) {
   2d87e:	b9cf      	cbnz	r7, 2d8b4 <lfs_bd_prog+0x8c>
    return 0;
   2d880:	4638      	mov	r0, r7
   2d882:	e046      	b.n	2d912 <lfs_bd_prog+0xea>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
   2d884:	3301      	adds	r3, #1
   2d886:	d009      	beq.n	2d89c <lfs_bd_prog+0x74>
   2d888:	4927      	ldr	r1, [pc, #156]	; (2d928 <lfs_bd_prog+0x100>)
   2d88a:	4824      	ldr	r0, [pc, #144]	; (2d91c <lfs_bd_prog+0xf4>)
   2d88c:	23dd      	movs	r3, #221	; 0xdd
   2d88e:	464a      	mov	r2, r9
   2d890:	f00b fc93 	bl	391ba <printk>
   2d894:	21dd      	movs	r1, #221	; 0xdd
   2d896:	4648      	mov	r0, r9
   2d898:	f00b fee6 	bl	39668 <assert_post_action>
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   2d89c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
        pcache->block = block;
   2d89e:	f8c4 8000 	str.w	r8, [r4]
   2d8a2:	699a      	ldr	r2, [r3, #24]
   2d8a4:	fbb5 f3f2 	udiv	r3, r5, r2
   2d8a8:	fb02 5313 	mls	r3, r2, r3, r5
   2d8ac:	1aeb      	subs	r3, r5, r3
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   2d8ae:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
   2d8b0:	2300      	movs	r3, #0
   2d8b2:	60a3      	str	r3, [r4, #8]
        if (block == pcache->block &&
   2d8b4:	6823      	ldr	r3, [r4, #0]
   2d8b6:	4543      	cmp	r3, r8
   2d8b8:	d1e4      	bne.n	2d884 <lfs_bd_prog+0x5c>
                off >= pcache->off &&
   2d8ba:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
   2d8bc:	42a8      	cmp	r0, r5
   2d8be:	d8e1      	bhi.n	2d884 <lfs_bd_prog+0x5c>
                off < pcache->off + lfs->cfg->cache_size) {
   2d8c0:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   2d8c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   2d8c4:	4402      	add	r2, r0
                off >= pcache->off &&
   2d8c6:	42aa      	cmp	r2, r5
   2d8c8:	d9dc      	bls.n	2d884 <lfs_bd_prog+0x5c>
            lfs_size_t diff = lfs_min(size,
   2d8ca:	1b52      	subs	r2, r2, r5
    return (a < b) ? a : b;
   2d8cc:	42ba      	cmp	r2, r7
   2d8ce:	bf28      	it	cs
   2d8d0:	463a      	movcs	r2, r7
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
   2d8d2:	68e3      	ldr	r3, [r4, #12]
   2d8d4:	1a28      	subs	r0, r5, r0
   2d8d6:	4418      	add	r0, r3
   2d8d8:	990e      	ldr	r1, [sp, #56]	; 0x38
   2d8da:	9201      	str	r2, [sp, #4]
   2d8dc:	f00f fec6 	bl	3d66c <memcpy>
            data += diff;
   2d8e0:	9a01      	ldr	r2, [sp, #4]
   2d8e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            off += diff;
   2d8e4:	4415      	add	r5, r2
            data += diff;
   2d8e6:	4413      	add	r3, r2
   2d8e8:	930e      	str	r3, [sp, #56]	; 0x38
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   2d8ea:	6863      	ldr	r3, [r4, #4]
            size -= diff;
   2d8ec:	1abf      	subs	r7, r7, r2
    return (a > b) ? a : b;
   2d8ee:	68a2      	ldr	r2, [r4, #8]
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   2d8f0:	1aeb      	subs	r3, r5, r3
   2d8f2:	4293      	cmp	r3, r2
   2d8f4:	bf38      	it	cc
   2d8f6:	4613      	movcc	r3, r2
            if (pcache->size == lfs->cfg->cache_size) {
   2d8f8:	6eb2      	ldr	r2, [r6, #104]	; 0x68
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   2d8fa:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
   2d8fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
   2d8fe:	429a      	cmp	r2, r3
   2d900:	d1bd      	bne.n	2d87e <lfs_bd_prog+0x56>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   2d902:	465b      	mov	r3, fp
   2d904:	4652      	mov	r2, sl
   2d906:	4621      	mov	r1, r4
   2d908:	4630      	mov	r0, r6
   2d90a:	f7ff ff2d 	bl	2d768 <lfs_bd_flush>
                if (err) {
   2d90e:	2800      	cmp	r0, #0
   2d910:	d0b5      	beq.n	2d87e <lfs_bd_prog+0x56>
}
   2d912:	b003      	add	sp, #12
   2d914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d918:	000424c9 	.word	0x000424c9
   2d91c:	0003f0e1 	.word	0x0003f0e1
   2d920:	00042209 	.word	0x00042209
   2d924:	00042505 	.word	0x00042505
   2d928:	00042528 	.word	0x00042528

0002d92c <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   2d92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const lfs_off_t off1 = commit->off;
   2d930:	684b      	ldr	r3, [r1, #4]
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   2d932:	b08d      	sub	sp, #52	; 0x34
    const lfs_off_t off1 = commit->off;
   2d934:	9305      	str	r3, [sp, #20]
    const uint32_t crc1 = commit->crc;
   2d936:	68cb      	ldr	r3, [r1, #12]
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   2d938:	4680      	mov	r8, r0
    const uint32_t crc1 = commit->crc;
   2d93a:	9306      	str	r3, [sp, #24]
            lfs->cfg->prog_size);
   2d93c:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   2d93e:	460d      	mov	r5, r1
            lfs->cfg->prog_size);
   2d940:	699a      	ldr	r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   2d942:	9b05      	ldr	r3, [sp, #20]
    return (a < b) ? a : b;
   2d944:	f240 3bfe 	movw	fp, #1022	; 0x3fe
    return lfs_aligndown(a + alignment-1, alignment);
   2d948:	18d7      	adds	r7, r2, r3
   2d94a:	3707      	adds	r7, #7
    return a - (a % alignment);
   2d94c:	fbb7 f3f2 	udiv	r3, r7, r2
   2d950:	fb02 7313 	mls	r3, r2, r3, r7
   2d954:	1aff      	subs	r7, r7, r3
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
   2d956:	f1a7 0308 	sub.w	r3, r7, #8
   2d95a:	9307      	str	r3, [sp, #28]
    while (commit->off < end) {
   2d95c:	686b      	ldr	r3, [r5, #4]
   2d95e:	42bb      	cmp	r3, r7
   2d960:	d31f      	bcc.n	2d9a2 <lfs_dir_commitcrc+0x76>
    rcache->block = LFS_BLOCK_NULL;
   2d962:	4641      	mov	r1, r8
   2d964:	f04f 33ff 	mov.w	r3, #4294967295
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   2d968:	4642      	mov	r2, r8
    rcache->block = LFS_BLOCK_NULL;
   2d96a:	f841 3b10 	str.w	r3, [r1], #16
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   2d96e:	4640      	mov	r0, r8
   2d970:	2300      	movs	r3, #0
   2d972:	f7ff fef9 	bl	2d768 <lfs_bd_flush>
    if (err) {
   2d976:	4604      	mov	r4, r0
   2d978:	b978      	cbnz	r0, 2d99a <lfs_dir_commitcrc+0x6e>
    err = lfs->cfg->sync(lfs->cfg);
   2d97a:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
   2d97e:	6903      	ldr	r3, [r0, #16]
   2d980:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
   2d982:	1e04      	subs	r4, r0, #0
   2d984:	dd6f      	ble.n	2da66 <lfs_dir_commitcrc+0x13a>
   2d986:	495c      	ldr	r1, [pc, #368]	; (2daf8 <lfs_dir_commitcrc+0x1cc>)
   2d988:	485c      	ldr	r0, [pc, #368]	; (2dafc <lfs_dir_commitcrc+0x1d0>)
   2d98a:	23b6      	movs	r3, #182	; 0xb6
   2d98c:	4a5c      	ldr	r2, [pc, #368]	; (2db00 <lfs_dir_commitcrc+0x1d4>)
   2d98e:	f00b fc14 	bl	391ba <printk>
   2d992:	21b6      	movs	r1, #182	; 0xb6
   2d994:	485a      	ldr	r0, [pc, #360]	; (2db00 <lfs_dir_commitcrc+0x1d4>)
   2d996:	f00b fe67 	bl	39668 <assert_post_action>
}
   2d99a:	4620      	mov	r0, r4
   2d99c:	b00d      	add	sp, #52	; 0x34
   2d99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
   2d9a2:	f103 0a04 	add.w	sl, r3, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   2d9a6:	eba7 030a 	sub.w	r3, r7, sl
   2d9aa:	455b      	cmp	r3, fp
   2d9ac:	bf94      	ite	ls
   2d9ae:	eb0a 0603 	addls.w	r6, sl, r3
   2d9b2:	eb0a 060b 	addhi.w	r6, sl, fp
        if (noff < end) {
   2d9b6:	42be      	cmp	r6, r7
   2d9b8:	d203      	bcs.n	2d9c2 <lfs_dir_commitcrc+0x96>
    return (a < b) ? a : b;
   2d9ba:	9b07      	ldr	r3, [sp, #28]
   2d9bc:	429e      	cmp	r6, r3
   2d9be:	bf28      	it	cs
   2d9c0:	461e      	movcs	r6, r3
        lfs_tag_t tag = 0xffffffff;
   2d9c2:	f04f 33ff 	mov.w	r3, #4294967295
   2d9c6:	9309      	str	r3, [sp, #36]	; 0x24
        int err = lfs_bd_read(lfs,
   2d9c8:	2304      	movs	r3, #4
   2d9ca:	aa09      	add	r2, sp, #36	; 0x24
   2d9cc:	e9cd 6201 	strd	r6, r2, [sp, #4]
   2d9d0:	9303      	str	r3, [sp, #12]
   2d9d2:	682a      	ldr	r2, [r5, #0]
   2d9d4:	2100      	movs	r1, #0
   2d9d6:	9200      	str	r2, [sp, #0]
   2d9d8:	4640      	mov	r0, r8
   2d9da:	4642      	mov	r2, r8
   2d9dc:	f7fe ff6c 	bl	2c8b8 <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   2d9e0:	4604      	mov	r4, r0
   2d9e2:	b110      	cbz	r0, 2d9ea <lfs_dir_commitcrc+0xbe>
   2d9e4:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2d9e8:	d1d7      	bne.n	2d99a <lfs_dir_commitcrc+0x6e>
    return __builtin_bswap32(a);
   2d9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   2d9ec:	eba6 060a 	sub.w	r6, r6, sl
   2d9f0:	ba1b      	rev	r3, r3
        bool reset = ~lfs_frombe32(tag) >> 31;
   2d9f2:	ea6f 0903 	mvn.w	r9, r3
   2d9f6:	ea4f 73d9 	mov.w	r3, r9, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   2d9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   2d9fe:	ea46 5603 	orr.w	r6, r6, r3, lsl #20
   2da02:	f446 267f 	orr.w	r6, r6, #1044480	; 0xff000
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   2da06:	68ab      	ldr	r3, [r5, #8]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   2da08:	f446 6640 	orr.w	r6, r6, #3072	; 0xc00
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   2da0c:	ac0a      	add	r4, sp, #40	; 0x28
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   2da0e:	9609      	str	r6, [sp, #36]	; 0x24
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   2da10:	405e      	eors	r6, r3
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   2da12:	4621      	mov	r1, r4
   2da14:	2204      	movs	r2, #4
   2da16:	68e8      	ldr	r0, [r5, #12]
   2da18:	ba36      	rev	r6, r6
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   2da1a:	960a      	str	r6, [sp, #40]	; 0x28
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   2da1c:	f002 f866 	bl	2faec <lfs_crc>
        err = lfs_bd_prog(lfs,
   2da20:	2308      	movs	r3, #8
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   2da22:	60e8      	str	r0, [r5, #12]
        err = lfs_bd_prog(lfs,
   2da24:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2da28:	686b      	ldr	r3, [r5, #4]
        footer[1] = lfs_tole32(commit->crc);
   2da2a:	900b      	str	r0, [sp, #44]	; 0x2c
        err = lfs_bd_prog(lfs,
   2da2c:	9301      	str	r3, [sp, #4]
   2da2e:	682b      	ldr	r3, [r5, #0]
   2da30:	4642      	mov	r2, r8
   2da32:	9300      	str	r3, [sp, #0]
   2da34:	4640      	mov	r0, r8
   2da36:	2300      	movs	r3, #0
   2da38:	f108 0110 	add.w	r1, r8, #16
   2da3c:	f7ff fef4 	bl	2d828 <lfs_bd_prog>
        if (err) {
   2da40:	4604      	mov	r4, r0
   2da42:	2800      	cmp	r0, #0
   2da44:	d1a9      	bne.n	2d99a <lfs_dir_commitcrc+0x6e>
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   2da46:	9909      	ldr	r1, [sp, #36]	; 0x24
   2da48:	686b      	ldr	r3, [r5, #4]
    return tag & 0x000003ff;
   2da4a:	f3c1 0209 	ubfx	r2, r1, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   2da4e:	3204      	adds	r2, #4
   2da50:	4413      	add	r3, r2
   2da52:	606b      	str	r3, [r5, #4]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   2da54:	f04f 33ff 	mov.w	r3, #4294967295
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   2da58:	f009 4900 	and.w	r9, r9, #2147483648	; 0x80000000
   2da5c:	ea89 0101 	eor.w	r1, r9, r1
   2da60:	60a9      	str	r1, [r5, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   2da62:	60eb      	str	r3, [r5, #12]
   2da64:	e77a      	b.n	2d95c <lfs_dir_commitcrc+0x30>
    if (err) {
   2da66:	d198      	bne.n	2d99a <lfs_dir_commitcrc+0x6e>
    lfs_off_t noff = off1 + sizeof(uint32_t);
   2da68:	9b05      	ldr	r3, [sp, #20]
    lfs_off_t off = commit->begin;
   2da6a:	692e      	ldr	r6, [r5, #16]
    lfs_off_t noff = off1 + sizeof(uint32_t);
   2da6c:	f103 0a04 	add.w	sl, r3, #4
    while (off < end) {
   2da70:	42be      	cmp	r6, r7
   2da72:	d292      	bcs.n	2d99a <lfs_dir_commitcrc+0x6e>
        uint32_t crc = 0xffffffff;
   2da74:	f04f 39ff 	mov.w	r9, #4294967295
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   2da78:	f10a 0b04 	add.w	fp, sl, #4
   2da7c:	e01b      	b.n	2dab6 <lfs_dir_commitcrc+0x18a>
            if (i == off1 && crc != crc1) {
   2da7e:	9b05      	ldr	r3, [sp, #20]
   2da80:	429e      	cmp	r6, r3
   2da82:	d102      	bne.n	2da8a <lfs_dir_commitcrc+0x15e>
   2da84:	9b06      	ldr	r3, [sp, #24]
   2da86:	4599      	cmp	r9, r3
   2da88:	d12e      	bne.n	2dae8 <lfs_dir_commitcrc+0x1bc>
            err = lfs_bd_read(lfs,
   2da8a:	2301      	movs	r3, #1
   2da8c:	9303      	str	r3, [sp, #12]
   2da8e:	ab0a      	add	r3, sp, #40	; 0x28
   2da90:	e9cd 6301 	strd	r6, r3, [sp, #4]
   2da94:	682b      	ldr	r3, [r5, #0]
   2da96:	4642      	mov	r2, r8
   2da98:	9300      	str	r3, [sp, #0]
   2da9a:	2100      	movs	r1, #0
   2da9c:	4640      	mov	r0, r8
   2da9e:	ebab 0306 	sub.w	r3, fp, r6
   2daa2:	f7fe ff09 	bl	2c8b8 <lfs_bd_read>
            if (err) {
   2daa6:	bb08      	cbnz	r0, 2daec <lfs_dir_commitcrc+0x1c0>
            crc = lfs_crc(crc, &dat, 1);
   2daa8:	4648      	mov	r0, r9
   2daaa:	2201      	movs	r2, #1
   2daac:	a90a      	add	r1, sp, #40	; 0x28
   2daae:	f002 f81d 	bl	2faec <lfs_crc>
   2dab2:	4681      	mov	r9, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   2dab4:	3601      	adds	r6, #1
   2dab6:	45b3      	cmp	fp, r6
   2dab8:	d8e1      	bhi.n	2da7e <lfs_dir_commitcrc+0x152>
        if (crc != 0) {
   2daba:	f1b9 0f00 	cmp.w	r9, #0
   2dabe:	d117      	bne.n	2daf0 <lfs_dir_commitcrc+0x1c4>
        off = lfs_min(end - noff, 0x3fe) + noff;
   2dac0:	f240 33fe 	movw	r3, #1022	; 0x3fe
   2dac4:	eba7 020a 	sub.w	r2, r7, sl
   2dac8:	429a      	cmp	r2, r3
   2daca:	bf94      	ite	ls
   2dacc:	eb0a 0602 	addls.w	r6, sl, r2
   2dad0:	eb0a 0603 	addhi.w	r6, sl, r3
        if (off < end) {
   2dad4:	42be      	cmp	r6, r7
   2dad6:	d204      	bcs.n	2dae2 <lfs_dir_commitcrc+0x1b6>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
   2dad8:	f1a7 0308 	sub.w	r3, r7, #8
    return (a < b) ? a : b;
   2dadc:	429e      	cmp	r6, r3
   2dade:	bf28      	it	cs
   2dae0:	461e      	movcs	r6, r3
        noff = off + sizeof(uint32_t);
   2dae2:	f106 0a04 	add.w	sl, r6, #4
   2dae6:	e7c3      	b.n	2da70 <lfs_dir_commitcrc+0x144>
                return LFS_ERR_CORRUPT;
   2dae8:	f06f 0053 	mvn.w	r0, #83	; 0x53
   2daec:	4604      	mov	r4, r0
   2daee:	e754      	b.n	2d99a <lfs_dir_commitcrc+0x6e>
            return LFS_ERR_CORRUPT;
   2daf0:	f06f 0453 	mvn.w	r4, #83	; 0x53
   2daf4:	e751      	b.n	2d99a <lfs_dir_commitcrc+0x6e>
   2daf6:	bf00      	nop
   2daf8:	00042261 	.word	0x00042261
   2dafc:	0003f0e1 	.word	0x0003f0e1
   2db00:	00042209 	.word	0x00042209

0002db04 <lfs_dir_open>:
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   2db04:	b5f0      	push	{r4, r5, r6, r7, lr}
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
   2db06:	f101 0608 	add.w	r6, r1, #8
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   2db0a:	b087      	sub	sp, #28
   2db0c:	9203      	str	r2, [sp, #12]
   2db0e:	460c      	mov	r4, r1
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
   2db10:	2300      	movs	r3, #0
   2db12:	4631      	mov	r1, r6
   2db14:	aa03      	add	r2, sp, #12
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   2db16:	4605      	mov	r5, r0
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
   2db18:	f7ff fbbe 	bl	2d298 <lfs_dir_find>
    if (tag < 0) {
   2db1c:	2800      	cmp	r0, #0
   2db1e:	db2a      	blt.n	2db76 <lfs_dir_open+0x72>
    return (tag & 0x7ff00000) >> 20;
   2db20:	0d03      	lsrs	r3, r0, #20
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   2db22:	2b02      	cmp	r3, #2
   2db24:	d129      	bne.n	2db7a <lfs_dir_open+0x76>
    if (lfs_tag_id(tag) == 0x3ff) {
   2db26:	f240 33ff 	movw	r3, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   2db2a:	f3c0 2089 	ubfx	r0, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
   2db2e:	4298      	cmp	r0, r3
   2db30:	af04      	add	r7, sp, #16
   2db32:	d115      	bne.n	2db60 <lfs_dir_open+0x5c>
        pair[0] = lfs->root[0];
   2db34:	6a2b      	ldr	r3, [r5, #32]
   2db36:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
   2db38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2db3a:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
   2db3c:	463a      	mov	r2, r7
   2db3e:	4631      	mov	r1, r6
   2db40:	4628      	mov	r0, r5
   2db42:	f00d ff82 	bl	3ba4a <lfs_dir_fetch>
    if (err) {
   2db46:	b9b0      	cbnz	r0, 2db76 <lfs_dir_open+0x72>
    dir->head[0] = dir->m.pair[0];
   2db48:	68a3      	ldr	r3, [r4, #8]
    dir->id = 0;
   2db4a:	80a0      	strh	r0, [r4, #4]
    dir->head[0] = dir->m.pair[0];
   2db4c:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
   2db4e:	68e3      	ldr	r3, [r4, #12]
    dir->pos = 0;
   2db50:	62a0      	str	r0, [r4, #40]	; 0x28
    dir->head[1] = dir->m.pair[1];
   2db52:	6323      	str	r3, [r4, #48]	; 0x30
    dir->type = LFS_TYPE_DIR;
   2db54:	2302      	movs	r3, #2
   2db56:	71a3      	strb	r3, [r4, #6]
    dir->next = (lfs_dir_t*)lfs->mlist;
   2db58:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2db5a:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)dir;
   2db5c:	62ac      	str	r4, [r5, #40]	; 0x28
    return 0;
   2db5e:	e00a      	b.n	2db76 <lfs_dir_open+0x72>
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
   2db60:	4b07      	ldr	r3, [pc, #28]	; (2db80 <lfs_dir_open+0x7c>)
   2db62:	4631      	mov	r1, r6
   2db64:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
   2db68:	4a06      	ldr	r2, [pc, #24]	; (2db84 <lfs_dir_open+0x80>)
   2db6a:	4628      	mov	r0, r5
   2db6c:	9700      	str	r7, [sp, #0]
   2db6e:	f00d ffa2 	bl	3bab6 <lfs_dir_get>
        if (res < 0) {
   2db72:	2800      	cmp	r0, #0
   2db74:	dae2      	bge.n	2db3c <lfs_dir_open+0x38>
}
   2db76:	b007      	add	sp, #28
   2db78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LFS_ERR_NOTDIR;
   2db7a:	f06f 0013 	mvn.w	r0, #19
   2db7e:	e7fa      	b.n	2db76 <lfs_dir_open+0x72>
   2db80:	20000008 	.word	0x20000008
   2db84:	700ffc00 	.word	0x700ffc00

0002db88 <lfs_dir_read>:
int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
   2db88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2db8c:	4690      	mov	r8, r2
   2db8e:	460c      	mov	r4, r1
   2db90:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   2db92:	f44f 7284 	mov.w	r2, #264	; 0x108
   2db96:	2100      	movs	r1, #0
   2db98:	4640      	mov	r0, r8
   2db9a:	f00f fd74 	bl	3d686 <memset>
    if (dir->pos == 0) {
   2db9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2dba0:	b963      	cbnz	r3, 2dbbc <lfs_dir_read+0x34>
        info->type = LFS_TYPE_DIR;
   2dba2:	2302      	movs	r3, #2
   2dba4:	f888 3000 	strb.w	r3, [r8]
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2dba8:	4b1d      	ldr	r3, [pc, #116]	; (2dc20 <lfs_dir_read+0x98>)
   2dbaa:	881b      	ldrh	r3, [r3, #0]
   2dbac:	f8a8 3008 	strh.w	r3, [r8, #8]
        return true;
   2dbb0:	2001      	movs	r0, #1
        dir->pos += 1;
   2dbb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2dbb4:	3301      	adds	r3, #1
   2dbb6:	62a3      	str	r3, [r4, #40]	; 0x28
}
   2dbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (dir->pos == 1) {
   2dbbc:	2b01      	cmp	r3, #1
   2dbbe:	d01d      	beq.n	2dbfc <lfs_dir_read+0x74>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
   2dbc0:	f104 0720 	add.w	r7, r4, #32
   2dbc4:	f104 0608 	add.w	r6, r4, #8
        if (dir->id == dir->m.count) {
   2dbc8:	88a2      	ldrh	r2, [r4, #4]
   2dbca:	8ba3      	ldrh	r3, [r4, #28]
   2dbcc:	429a      	cmp	r2, r3
   2dbce:	d10a      	bne.n	2dbe6 <lfs_dir_read+0x5e>
            if (!dir->m.split) {
   2dbd0:	7fe0      	ldrb	r0, [r4, #31]
   2dbd2:	2800      	cmp	r0, #0
   2dbd4:	d0f0      	beq.n	2dbb8 <lfs_dir_read+0x30>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
   2dbd6:	463a      	mov	r2, r7
   2dbd8:	4631      	mov	r1, r6
   2dbda:	4628      	mov	r0, r5
   2dbdc:	f00d ff35 	bl	3ba4a <lfs_dir_fetch>
            if (err) {
   2dbe0:	2800      	cmp	r0, #0
   2dbe2:	d1e9      	bne.n	2dbb8 <lfs_dir_read+0x30>
            dir->id = 0;
   2dbe4:	80a0      	strh	r0, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
   2dbe6:	4643      	mov	r3, r8
   2dbe8:	4631      	mov	r1, r6
   2dbea:	4628      	mov	r0, r5
   2dbec:	88a2      	ldrh	r2, [r4, #4]
   2dbee:	f7ff fb0d 	bl	2d20c <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
   2dbf2:	b970      	cbnz	r0, 2dc12 <lfs_dir_read+0x8a>
        dir->id += 1;
   2dbf4:	88a3      	ldrh	r3, [r4, #4]
   2dbf6:	3301      	adds	r3, #1
   2dbf8:	80a3      	strh	r3, [r4, #4]
    dir->pos += 1;
   2dbfa:	e7d9      	b.n	2dbb0 <lfs_dir_read+0x28>
        info->type = LFS_TYPE_DIR;
   2dbfc:	4643      	mov	r3, r8
   2dbfe:	2202      	movs	r2, #2
   2dc00:	f803 2b08 	strb.w	r2, [r3], #8
   2dc04:	4a07      	ldr	r2, [pc, #28]	; (2dc24 <lfs_dir_read+0x9c>)
   2dc06:	8811      	ldrh	r1, [r2, #0]
   2dc08:	7892      	ldrb	r2, [r2, #2]
   2dc0a:	f8a8 1008 	strh.w	r1, [r8, #8]
   2dc0e:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
   2dc10:	e7ce      	b.n	2dbb0 <lfs_dir_read+0x28>
        if (err && err != LFS_ERR_NOENT) {
   2dc12:	1c83      	adds	r3, r0, #2
   2dc14:	d1d0      	bne.n	2dbb8 <lfs_dir_read+0x30>
        dir->id += 1;
   2dc16:	88a3      	ldrh	r3, [r4, #4]
   2dc18:	3301      	adds	r3, #1
   2dc1a:	80a3      	strh	r3, [r4, #4]
        if (err != LFS_ERR_NOENT) {
   2dc1c:	e7d4      	b.n	2dbc8 <lfs_dir_read+0x40>
   2dc1e:	bf00      	nop
   2dc20:	00042295 	.word	0x00042295
   2dc24:	00042294 	.word	0x00042294

0002dc28 <lfs_file_tell>:
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2dc28:	6b0b      	ldr	r3, [r1, #48]	; 0x30
lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
   2dc2a:	b510      	push	{r4, lr}
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2dc2c:	029b      	lsls	r3, r3, #10
lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
   2dc2e:	460c      	mov	r4, r1
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2dc30:	d40b      	bmi.n	2dc4a <lfs_file_tell+0x22>
   2dc32:	4907      	ldr	r1, [pc, #28]	; (2dc50 <lfs_file_tell+0x28>)
   2dc34:	4807      	ldr	r0, [pc, #28]	; (2dc54 <lfs_file_tell+0x2c>)
   2dc36:	f640 431f 	movw	r3, #3103	; 0xc1f
   2dc3a:	4a07      	ldr	r2, [pc, #28]	; (2dc58 <lfs_file_tell+0x30>)
   2dc3c:	f00b fabd 	bl	391ba <printk>
   2dc40:	f640 411f 	movw	r1, #3103	; 0xc1f
   2dc44:	4804      	ldr	r0, [pc, #16]	; (2dc58 <lfs_file_tell+0x30>)
   2dc46:	f00b fd0f 	bl	39668 <assert_post_action>
}
   2dc4a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2dc4c:	bd10      	pop	{r4, pc}
   2dc4e:	bf00      	nop
   2dc50:	0004254b 	.word	0x0004254b
   2dc54:	0003f0e1 	.word	0x0003f0e1
   2dc58:	00042209 	.word	0x00042209

0002dc5c <lfs_file_size>:
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2dc5c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
   2dc5e:	b510      	push	{r4, lr}
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2dc60:	029a      	lsls	r2, r3, #10
lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {
   2dc62:	460c      	mov	r4, r1
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2dc64:	d40b      	bmi.n	2dc7e <lfs_file_size+0x22>
   2dc66:	490a      	ldr	r1, [pc, #40]	; (2dc90 <lfs_file_size+0x34>)
   2dc68:	480a      	ldr	r0, [pc, #40]	; (2dc94 <lfs_file_size+0x38>)
   2dc6a:	f640 4333 	movw	r3, #3123	; 0xc33
   2dc6e:	4a0a      	ldr	r2, [pc, #40]	; (2dc98 <lfs_file_size+0x3c>)
   2dc70:	f00b faa3 	bl	391ba <printk>
   2dc74:	f640 4133 	movw	r1, #3123	; 0xc33
   2dc78:	4807      	ldr	r0, [pc, #28]	; (2dc98 <lfs_file_size+0x3c>)
   2dc7a:	f00b fcf5 	bl	39668 <assert_post_action>
    if (file->flags & LFS_F_WRITING) {
   2dc7e:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
   2dc82:	039b      	lsls	r3, r3, #14
   2dc84:	d503      	bpl.n	2dc8e <lfs_file_size+0x32>
    return (a > b) ? a : b;
   2dc86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2dc88:	4298      	cmp	r0, r3
   2dc8a:	bf38      	it	cc
   2dc8c:	4618      	movcc	r0, r3
}
   2dc8e:	bd10      	pop	{r4, pc}
   2dc90:	0004254b 	.word	0x0004254b
   2dc94:	0003f0e1 	.word	0x0003f0e1
   2dc98:	00042209 	.word	0x00042209

0002dc9c <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
   2dc9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2dca0:	b09b      	sub	sp, #108	; 0x6c
   2dca2:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
   2dca4:	f7ff fbfe 	bl	2d4a4 <lfs_init>
    if (err) {
   2dca8:	4605      	mov	r5, r0
   2dcaa:	bb78      	cbnz	r0, 2dd0c <lfs_mount+0x70>
    lfs_mdir_t dir = {.tail = {0, 1}};
   2dcac:	4601      	mov	r1, r0
   2dcae:	221c      	movs	r2, #28
   2dcb0:	a812      	add	r0, sp, #72	; 0x48
   2dcb2:	f00f fce8 	bl	3d686 <memset>
   2dcb6:	2301      	movs	r3, #1
    lfs_block_t cycle = 0;
   2dcb8:	462e      	mov	r6, r5
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   2dcba:	4f69      	ldr	r7, [pc, #420]	; (2de60 <lfs_mount+0x1c4>)
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   2dcbc:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 2de64 <lfs_mount+0x1c8>
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   2dcc0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2de68 <lfs_mount+0x1cc>
    lfs_mdir_t dir = {.tail = {0, 1}};
   2dcc4:	9319      	str	r3, [sp, #100]	; 0x64
    while (!lfs_pair_isnull(dir.tail)) {
   2dcc6:	a818      	add	r0, sp, #96	; 0x60
   2dcc8:	f00d fe21 	bl	3b90e <lfs_pair_isnull>
   2dccc:	b310      	cbz	r0, 2dd14 <lfs_mount+0x78>
    if (lfs_pair_isnull(lfs->root)) {
   2dcce:	f104 0020 	add.w	r0, r4, #32
   2dcd2:	f00d fe1c 	bl	3b90e <lfs_pair_isnull>
   2dcd6:	4603      	mov	r3, r0
   2dcd8:	2800      	cmp	r0, #0
   2dcda:	f040 80be 	bne.w	2de5a <lfs_mount+0x1be>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
   2dcde:	6b22      	ldr	r2, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
   2dce0:	f104 063c 	add.w	r6, r4, #60	; 0x3c
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
   2dce4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2dce8:	6322      	str	r2, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
   2dcea:	f104 0230 	add.w	r2, r4, #48	; 0x30
   2dcee:	ca07      	ldmia	r2, {r0, r1, r2}
   2dcf0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
   2dcf4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   2dcf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2dcf8:	69c8      	ldr	r0, [r1, #28]
    lfs->free.i = 0;
   2dcfa:	65e3      	str	r3, [r4, #92]	; 0x5c
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
   2dcfc:	fbb2 f6f0 	udiv	r6, r2, r0
   2dd00:	fb00 2216 	mls	r2, r0, r6, r2
    lfs->free.size = 0;
   2dd04:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    lfs->free.ack = lfs->cfg->block_count;
   2dd08:	6a0b      	ldr	r3, [r1, #32]
   2dd0a:	6623      	str	r3, [r4, #96]	; 0x60
}
   2dd0c:	4628      	mov	r0, r5
   2dd0e:	b01b      	add	sp, #108	; 0x6c
   2dd10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (cycle >= lfs->cfg->block_count/2) {
   2dd14:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2dd16:	6a1b      	ldr	r3, [r3, #32]
   2dd18:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
   2dd1c:	f080 809a 	bcs.w	2de54 <lfs_mount+0x1b8>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   2dd20:	2308      	movs	r3, #8
   2dd22:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   2dd24:	ab05      	add	r3, sp, #20
   2dd26:	e9cd 8302 	strd	r8, r3, [sp, #8]
   2dd2a:	4b50      	ldr	r3, [pc, #320]	; (2de6c <lfs_mount+0x1d0>)
   2dd2c:	9001      	str	r0, [sp, #4]
   2dd2e:	9300      	str	r3, [sp, #0]
   2dd30:	4620      	mov	r0, r4
   2dd32:	4b4f      	ldr	r3, [pc, #316]	; (2de70 <lfs_mount+0x1d4>)
   2dd34:	aa18      	add	r2, sp, #96	; 0x60
   2dd36:	a912      	add	r1, sp, #72	; 0x48
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   2dd38:	e9cd 4705 	strd	r4, r7, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   2dd3c:	f7fe fe96 	bl	2ca6c <lfs_dir_fetchmatch>
        if (tag < 0) {
   2dd40:	2800      	cmp	r0, #0
        cycle += 1;
   2dd42:	f106 0601 	add.w	r6, r6, #1
        if (tag < 0) {
   2dd46:	db2e      	blt.n	2dda6 <lfs_mount+0x10a>
        if (tag && !lfs_tag_isdelete(tag)) {
   2dd48:	d07a      	beq.n	2de40 <lfs_mount+0x1a4>
    return ((int32_t)(tag << 22) >> 22) == -1;
   2dd4a:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
   2dd4e:	3001      	adds	r0, #1
   2dd50:	d076      	beq.n	2de40 <lfs_mount+0x1a4>
            lfs->root[0] = dir.pair[0];
   2dd52:	9b12      	ldr	r3, [sp, #72]	; 0x48
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   2dd54:	4620      	mov	r0, r4
            lfs->root[0] = dir.pair[0];
   2dd56:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
   2dd58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   2dd5a:	4a45      	ldr	r2, [pc, #276]	; (2de70 <lfs_mount+0x1d4>)
            lfs->root[1] = dir.pair[1];
   2dd5c:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   2dd5e:	ab0c      	add	r3, sp, #48	; 0x30
   2dd60:	9300      	str	r3, [sp, #0]
   2dd62:	a912      	add	r1, sp, #72	; 0x48
   2dd64:	464b      	mov	r3, r9
   2dd66:	f00d fea6 	bl	3bab6 <lfs_dir_get>
            if (tag < 0) {
   2dd6a:	2800      	cmp	r0, #0
   2dd6c:	db1b      	blt.n	2dda6 <lfs_mount+0x10a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
   2dd6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2dd70:	0c11      	lsrs	r1, r2, #16
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
   2dd72:	2902      	cmp	r1, #2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
   2dd74:	b293      	uxth	r3, r2
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
   2dd76:	d100      	bne.n	2dd7a <lfs_mount+0xde>
   2dd78:	b1d3      	cbz	r3, 2ddb0 <lfs_mount+0x114>
   2dd7a:	483e      	ldr	r0, [pc, #248]	; (2de74 <lfs_mount+0x1d8>)
   2dd7c:	4b3e      	ldr	r3, [pc, #248]	; (2de78 <lfs_mount+0x1dc>)
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
   2dd7e:	b292      	uxth	r2, r2
   2dd80:	1a1b      	subs	r3, r3, r0
   2dd82:	483e      	ldr	r0, [pc, #248]	; (2de7c <lfs_mount+0x1e0>)
   2dd84:	920b      	str	r2, [sp, #44]	; 0x2c
   2dd86:	9008      	str	r0, [sp, #32]
   2dd88:	f640 6098 	movw	r0, #3736	; 0xe98
   2dd8c:	2204      	movs	r2, #4
   2dd8e:	08db      	lsrs	r3, r3, #3
   2dd90:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   2dd94:	019b      	lsls	r3, r3, #6
   2dd96:	483a      	ldr	r0, [pc, #232]	; (2de80 <lfs_mount+0x1e4>)
   2dd98:	f043 0301 	orr.w	r3, r3, #1
   2dd9c:	a908      	add	r1, sp, #32
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
   2dd9e:	f00b fd02 	bl	397a6 <log_n>
                err = LFS_ERR_INVAL;
   2dda2:	f06f 0015 	mvn.w	r0, #21
            goto cleanup;
   2dda6:	4605      	mov	r5, r0
    lfs_unmount(lfs);
   2dda8:	4620      	mov	r0, r4
   2ddaa:	f00e f822 	bl	3bdf2 <lfs_unmount>
    return err;
   2ddae:	e7ad      	b.n	2dd0c <lfs_mount+0x70>
            if (superblock.name_max) {
   2ddb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2ddb2:	b1aa      	cbz	r2, 2dde0 <lfs_mount+0x144>
                if (superblock.name_max > lfs->name_max) {
   2ddb4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   2ddb6:	428a      	cmp	r2, r1
   2ddb8:	d911      	bls.n	2ddde <lfs_mount+0x142>
   2ddba:	482e      	ldr	r0, [pc, #184]	; (2de74 <lfs_mount+0x1d8>)
   2ddbc:	4b2e      	ldr	r3, [pc, #184]	; (2de78 <lfs_mount+0x1dc>)
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
   2ddbe:	910b      	str	r1, [sp, #44]	; 0x2c
   2ddc0:	1a1b      	subs	r3, r3, r0
   2ddc2:	482e      	ldr	r0, [pc, #184]	; (2de7c <lfs_mount+0x1e0>)
   2ddc4:	08db      	lsrs	r3, r3, #3
   2ddc6:	9008      	str	r0, [sp, #32]
   2ddc8:	f640 60a1 	movw	r0, #3745	; 0xea1
   2ddcc:	019b      	lsls	r3, r3, #6
   2ddce:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
   2ddd2:	f043 0301 	orr.w	r3, r3, #1
   2ddd6:	2204      	movs	r2, #4
   2ddd8:	482a      	ldr	r0, [pc, #168]	; (2de84 <lfs_mount+0x1e8>)
   2ddda:	a908      	add	r1, sp, #32
   2dddc:	e7df      	b.n	2dd9e <lfs_mount+0x102>
                lfs->name_max = superblock.name_max;
   2ddde:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (superblock.file_max) {
   2dde0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2dde2:	b1aa      	cbz	r2, 2de10 <lfs_mount+0x174>
                if (superblock.file_max > lfs->file_max) {
   2dde4:	6f21      	ldr	r1, [r4, #112]	; 0x70
   2dde6:	428a      	cmp	r2, r1
   2dde8:	d911      	bls.n	2de0e <lfs_mount+0x172>
   2ddea:	4822      	ldr	r0, [pc, #136]	; (2de74 <lfs_mount+0x1d8>)
   2ddec:	4b22      	ldr	r3, [pc, #136]	; (2de78 <lfs_mount+0x1dc>)
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
   2ddee:	910b      	str	r1, [sp, #44]	; 0x2c
   2ddf0:	1a1b      	subs	r3, r3, r0
   2ddf2:	4822      	ldr	r0, [pc, #136]	; (2de7c <lfs_mount+0x1e0>)
   2ddf4:	08db      	lsrs	r3, r3, #3
   2ddf6:	9008      	str	r0, [sp, #32]
   2ddf8:	f640 60ac 	movw	r0, #3756	; 0xeac
   2ddfc:	019b      	lsls	r3, r3, #6
   2ddfe:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
   2de02:	f043 0301 	orr.w	r3, r3, #1
   2de06:	2204      	movs	r2, #4
   2de08:	481f      	ldr	r0, [pc, #124]	; (2de88 <lfs_mount+0x1ec>)
   2de0a:	a908      	add	r1, sp, #32
   2de0c:	e7c7      	b.n	2dd9e <lfs_mount+0x102>
                lfs->file_max = superblock.file_max;
   2de0e:	6722      	str	r2, [r4, #112]	; 0x70
            if (superblock.attr_max) {
   2de10:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2de12:	b1aa      	cbz	r2, 2de40 <lfs_mount+0x1a4>
                if (superblock.attr_max > lfs->attr_max) {
   2de14:	6f61      	ldr	r1, [r4, #116]	; 0x74
   2de16:	428a      	cmp	r2, r1
   2de18:	d911      	bls.n	2de3e <lfs_mount+0x1a2>
   2de1a:	4816      	ldr	r0, [pc, #88]	; (2de74 <lfs_mount+0x1d8>)
   2de1c:	4b16      	ldr	r3, [pc, #88]	; (2de78 <lfs_mount+0x1dc>)
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
   2de1e:	910b      	str	r1, [sp, #44]	; 0x2c
   2de20:	1a1b      	subs	r3, r3, r0
   2de22:	4816      	ldr	r0, [pc, #88]	; (2de7c <lfs_mount+0x1e0>)
   2de24:	08db      	lsrs	r3, r3, #3
   2de26:	9008      	str	r0, [sp, #32]
   2de28:	f640 60b7 	movw	r0, #3767	; 0xeb7
   2de2c:	019b      	lsls	r3, r3, #6
   2de2e:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
   2de32:	f043 0301 	orr.w	r3, r3, #1
   2de36:	2204      	movs	r2, #4
   2de38:	4814      	ldr	r0, [pc, #80]	; (2de8c <lfs_mount+0x1f0>)
   2de3a:	a908      	add	r1, sp, #32
   2de3c:	e7af      	b.n	2dd9e <lfs_mount+0x102>
                lfs->attr_max = superblock.attr_max;
   2de3e:	6762      	str	r2, [r4, #116]	; 0x74
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
   2de40:	4620      	mov	r0, r4
   2de42:	f104 0230 	add.w	r2, r4, #48	; 0x30
   2de46:	a912      	add	r1, sp, #72	; 0x48
   2de48:	f7ff f9c6 	bl	2d1d8 <lfs_dir_getgstate>
        if (err) {
   2de4c:	2800      	cmp	r0, #0
   2de4e:	f43f af3a 	beq.w	2dcc6 <lfs_mount+0x2a>
   2de52:	e7a8      	b.n	2dda6 <lfs_mount+0x10a>
            err = LFS_ERR_CORRUPT;
   2de54:	f06f 0053 	mvn.w	r0, #83	; 0x53
   2de58:	e7a5      	b.n	2dda6 <lfs_mount+0x10a>
        err = LFS_ERR_INVAL;
   2de5a:	f06f 0515 	mvn.w	r5, #21
   2de5e:	e7a3      	b.n	2dda8 <lfs_mount+0x10c>
   2de60:	000405e8 	.word	0x000405e8
   2de64:	0003bb2d 	.word	0x0003bb2d
   2de68:	20100018 	.word	0x20100018
   2de6c:	0ff00008 	.word	0x0ff00008
   2de70:	7ffffc00 	.word	0x7ffffc00
   2de74:	0003e468 	.word	0x0003e468
   2de78:	0003e4f0 	.word	0x0003e4f0
   2de7c:	00042209 	.word	0x00042209
   2de80:	00042566 	.word	0x00042566
   2de84:	00042586 	.word	0x00042586
   2de88:	000425ac 	.word	0x000425ac
   2de8c:	000425d2 	.word	0x000425d2

0002de90 <lfs_fs_traverseraw>:
        bool includeorphans) {
   2de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2de94:	b091      	sub	sp, #68	; 0x44
   2de96:	4604      	mov	r4, r0
   2de98:	460d      	mov	r5, r1
   2de9a:	4616      	mov	r6, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
   2de9c:	2100      	movs	r1, #0
   2de9e:	221c      	movs	r2, #28
   2dea0:	a808      	add	r0, sp, #32
        bool includeorphans) {
   2dea2:	9305      	str	r3, [sp, #20]
    lfs_mdir_t dir = {.tail = {0, 1}};
   2dea4:	f00f fbef 	bl	3d686 <memset>
   2dea8:	2301      	movs	r3, #1
    lfs_block_t cycle = 0;
   2deaa:	f04f 0800 	mov.w	r8, #0
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   2deae:	f240 2902 	movw	r9, #514	; 0x202
    lfs_mdir_t dir = {.tail = {0, 1}};
   2deb2:	930f      	str	r3, [sp, #60]	; 0x3c
    while (!lfs_pair_isnull(dir.tail)) {
   2deb4:	a80e      	add	r0, sp, #56	; 0x38
   2deb6:	f00d fd2a 	bl	3b90e <lfs_pair_isnull>
   2deba:	b120      	cbz	r0, 2dec6 <lfs_fs_traverseraw+0x36>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   2debc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   2debe:	2f00      	cmp	r7, #0
   2dec0:	d155      	bne.n	2df6e <lfs_fs_traverseraw+0xde>
    return 0;
   2dec2:	4638      	mov	r0, r7
   2dec4:	e041      	b.n	2df4a <lfs_fs_traverseraw+0xba>
        if (cycle >= lfs->cfg->block_count/2) {
   2dec6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2dec8:	6a1b      	ldr	r3, [r3, #32]
   2deca:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
   2dece:	d27b      	bcs.n	2dfc8 <lfs_fs_traverseraw+0x138>
            int err = cb(data, dir.tail[i]);
   2ded0:	4630      	mov	r0, r6
   2ded2:	990e      	ldr	r1, [sp, #56]	; 0x38
        cycle += 1;
   2ded4:	f108 0801 	add.w	r8, r8, #1
            int err = cb(data, dir.tail[i]);
   2ded8:	47a8      	blx	r5
            if (err) {
   2deda:	2800      	cmp	r0, #0
   2dedc:	d135      	bne.n	2df4a <lfs_fs_traverseraw+0xba>
            int err = cb(data, dir.tail[i]);
   2dede:	4630      	mov	r0, r6
   2dee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2dee2:	47a8      	blx	r5
            if (err) {
   2dee4:	bb88      	cbnz	r0, 2df4a <lfs_fs_traverseraw+0xba>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
   2dee6:	4620      	mov	r0, r4
   2dee8:	aa0e      	add	r2, sp, #56	; 0x38
   2deea:	a908      	add	r1, sp, #32
   2deec:	f00d fdad 	bl	3ba4a <lfs_dir_fetch>
        if (err) {
   2def0:	bb58      	cbnz	r0, 2df4a <lfs_fs_traverseraw+0xba>
   2def2:	4607      	mov	r7, r0
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
   2def4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 2dfd0 <lfs_fs_traverseraw+0x140>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   2def8:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 2dfd4 <lfs_fs_traverseraw+0x144>
        for (uint16_t id = 0; id < dir.count; id++) {
   2defc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   2df00:	b2bb      	uxth	r3, r7
   2df02:	429a      	cmp	r2, r3
   2df04:	d9d6      	bls.n	2deb4 <lfs_fs_traverseraw+0x24>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   2df06:	aa06      	add	r2, sp, #24
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
   2df08:	ea0a 2387 	and.w	r3, sl, r7, lsl #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   2df0c:	9200      	str	r2, [sp, #0]
   2df0e:	4620      	mov	r0, r4
   2df10:	4a31      	ldr	r2, [pc, #196]	; (2dfd8 <lfs_fs_traverseraw+0x148>)
   2df12:	ea43 030b 	orr.w	r3, r3, fp
   2df16:	a908      	add	r1, sp, #32
   2df18:	f00d fdcd 	bl	3bab6 <lfs_dir_get>
            if (tag < 0) {
   2df1c:	2800      	cmp	r0, #0
   2df1e:	da03      	bge.n	2df28 <lfs_fs_traverseraw+0x98>
                if (tag == LFS_ERR_NOENT) {
   2df20:	1c83      	adds	r3, r0, #2
   2df22:	d112      	bne.n	2df4a <lfs_fs_traverseraw+0xba>
        for (uint16_t id = 0; id < dir.count; id++) {
   2df24:	3701      	adds	r7, #1
   2df26:	e7e9      	b.n	2defc <lfs_fs_traverseraw+0x6c>
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   2df28:	ebb9 5f10 	cmp.w	r9, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
   2df2c:	ea4f 5310 	mov.w	r3, r0, lsr #20
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   2df30:	d10e      	bne.n	2df50 <lfs_fs_traverseraw+0xc0>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
   2df32:	9b07      	ldr	r3, [sp, #28]
   2df34:	4622      	mov	r2, r4
   2df36:	9300      	str	r3, [sp, #0]
   2df38:	2100      	movs	r1, #0
   2df3a:	4620      	mov	r0, r4
   2df3c:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2df40:	9b06      	ldr	r3, [sp, #24]
   2df42:	f00d fe76 	bl	3bc32 <lfs_ctz_traverse>
                    if (err) {
   2df46:	2800      	cmp	r0, #0
   2df48:	d0ec      	beq.n	2df24 <lfs_fs_traverseraw+0x94>
}
   2df4a:	b011      	add	sp, #68	; 0x44
   2df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if (includeorphans && 
   2df50:	9a05      	ldr	r2, [sp, #20]
   2df52:	2a00      	cmp	r2, #0
   2df54:	d0e6      	beq.n	2df24 <lfs_fs_traverseraw+0x94>
   2df56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2df5a:	d1e3      	bne.n	2df24 <lfs_fs_traverseraw+0x94>
                    err = cb(data, (&ctz.head)[i]);
   2df5c:	4630      	mov	r0, r6
   2df5e:	9906      	ldr	r1, [sp, #24]
   2df60:	47a8      	blx	r5
                    if (err) {
   2df62:	2800      	cmp	r0, #0
   2df64:	d1f1      	bne.n	2df4a <lfs_fs_traverseraw+0xba>
                    err = cb(data, (&ctz.head)[i]);
   2df66:	4630      	mov	r0, r6
   2df68:	9907      	ldr	r1, [sp, #28]
   2df6a:	47a8      	blx	r5
   2df6c:	e7eb      	b.n	2df46 <lfs_fs_traverseraw+0xb6>
        if (f->type != LFS_TYPE_REG) {
   2df6e:	79bb      	ldrb	r3, [r7, #6]
   2df70:	2b01      	cmp	r3, #1
   2df72:	d001      	beq.n	2df78 <lfs_fs_traverseraw+0xe8>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   2df74:	683f      	ldr	r7, [r7, #0]
   2df76:	e7a2      	b.n	2debe <lfs_fs_traverseraw+0x2e>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
   2df78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2df7a:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
   2df7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2df82:	d013      	beq.n	2dfac <lfs_fs_traverseraw+0x11c>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
   2df84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2df86:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
   2df8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   2df8e:	d1f1      	bne.n	2df74 <lfs_fs_traverseraw+0xe4>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   2df90:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2df94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2df96:	4622      	mov	r2, r4
   2df98:	9300      	str	r3, [sp, #0]
   2df9a:	4620      	mov	r0, r4
   2df9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2df9e:	f107 0140 	add.w	r1, r7, #64	; 0x40
   2dfa2:	f00d fe46 	bl	3bc32 <lfs_ctz_traverse>
            if (err) {
   2dfa6:	2800      	cmp	r0, #0
   2dfa8:	d0e4      	beq.n	2df74 <lfs_fs_traverseraw+0xe4>
   2dfaa:	e7ce      	b.n	2df4a <lfs_fs_traverseraw+0xba>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   2dfac:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2dfb2:	4622      	mov	r2, r4
   2dfb4:	9300      	str	r3, [sp, #0]
   2dfb6:	4620      	mov	r0, r4
   2dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dfba:	f107 0140 	add.w	r1, r7, #64	; 0x40
   2dfbe:	f00d fe38 	bl	3bc32 <lfs_ctz_traverse>
            if (err) {
   2dfc2:	2800      	cmp	r0, #0
   2dfc4:	d0de      	beq.n	2df84 <lfs_fs_traverseraw+0xf4>
   2dfc6:	e7c0      	b.n	2df4a <lfs_fs_traverseraw+0xba>
            return LFS_ERR_CORRUPT;
   2dfc8:	f06f 0053 	mvn.w	r0, #83	; 0x53
   2dfcc:	e7bd      	b.n	2df4a <lfs_fs_traverseraw+0xba>
   2dfce:	bf00      	nop
   2dfd0:	03fffc00 	.word	0x03fffc00
   2dfd4:	20000008 	.word	0x20000008
   2dfd8:	700ffc00 	.word	0x700ffc00

0002dfdc <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
   2dfdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2dfde:	4604      	mov	r4, r0
   2dfe0:	460d      	mov	r5, r1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   2dfe2:	2601      	movs	r6, #1
        while (lfs->free.i != lfs->free.size) {
   2dfe4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2dfe6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   2dfe8:	6e21      	ldr	r1, [r4, #96]	; 0x60
   2dfea:	429a      	cmp	r2, r3
   2dfec:	d115      	bne.n	2e01a <lfs_alloc+0x3e>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
   2dfee:	6d62      	ldr	r2, [r4, #84]	; 0x54
   2dff0:	4413      	add	r3, r2
        if (lfs->free.ack == 0) {
   2dff2:	2900      	cmp	r1, #0
   2dff4:	d13e      	bne.n	2e074 <lfs_alloc+0x98>
   2dff6:	4934      	ldr	r1, [pc, #208]	; (2e0c8 <lfs_alloc+0xec>)
   2dff8:	4a34      	ldr	r2, [pc, #208]	; (2e0cc <lfs_alloc+0xf0>)
            LFS_ERROR("No more free space %"PRIu32,
   2dffa:	4835      	ldr	r0, [pc, #212]	; (2e0d0 <lfs_alloc+0xf4>)
   2dffc:	1a52      	subs	r2, r2, r1
   2dffe:	08d2      	lsrs	r2, r2, #3
   2e000:	0192      	lsls	r2, r2, #6
   2e002:	f042 0201 	orr.w	r2, r2, #1
   2e006:	f8ad 2000 	strh.w	r2, [sp]
   2e00a:	4932      	ldr	r1, [pc, #200]	; (2e0d4 <lfs_alloc+0xf8>)
   2e00c:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   2e010:	f00b fbad 	bl	3976e <log_3>
            return LFS_ERR_NOSPC;
   2e014:	f06f 001b 	mvn.w	r0, #27
   2e018:	e024      	b.n	2e064 <lfs_alloc+0x88>
            lfs->free.ack -= 1;
   2e01a:	3901      	subs	r1, #1
            lfs->free.i += 1;
   2e01c:	1c50      	adds	r0, r2, #1
            lfs->free.ack -= 1;
   2e01e:	6621      	str	r1, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   2e020:	6e61      	ldr	r1, [r4, #100]	; 0x64
            lfs->free.i += 1;
   2e022:	65e0      	str	r0, [r4, #92]	; 0x5c
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   2e024:	0957      	lsrs	r7, r2, #5
   2e026:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
   2e02a:	f002 001f 	and.w	r0, r2, #31
   2e02e:	fa06 f000 	lsl.w	r0, r6, r0
   2e032:	4238      	tst	r0, r7
   2e034:	d1d7      	bne.n	2dfe6 <lfs_alloc+0xa>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
   2e036:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2e038:	4413      	add	r3, r2
   2e03a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2e03c:	6a12      	ldr	r2, [r2, #32]
   2e03e:	fbb3 f0f2 	udiv	r0, r3, r2
   2e042:	fb02 3310 	mls	r3, r2, r0, r3
   2e046:	602b      	str	r3, [r5, #0]
                            & (1U << (lfs->free.i % 32)))) {
   2e048:	2501      	movs	r5, #1
                while (lfs->free.i != lfs->free.size &&
   2e04a:	6da6      	ldr	r6, [r4, #88]	; 0x58
   2e04c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2e04e:	42b3      	cmp	r3, r6
   2e050:	d038      	beq.n	2e0c4 <lfs_alloc+0xe8>
                        (lfs->free.buffer[lfs->free.i / 32]
   2e052:	095a      	lsrs	r2, r3, #5
                            & (1U << (lfs->free.i % 32)))) {
   2e054:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   2e058:	f003 001f 	and.w	r0, r3, #31
   2e05c:	fa05 f000 	lsl.w	r0, r5, r0
                while (lfs->free.i != lfs->free.size &&
   2e060:	4010      	ands	r0, r2
   2e062:	d101      	bne.n	2e068 <lfs_alloc+0x8c>
}
   2e064:	b003      	add	sp, #12
   2e066:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    lfs->free.i += 1;
   2e068:	3301      	adds	r3, #1
   2e06a:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
   2e06c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2e06e:	3b01      	subs	r3, #1
   2e070:	6623      	str	r3, [r4, #96]	; 0x60
   2e072:	e7eb      	b.n	2e04c <lfs_alloc+0x70>
                % lfs->cfg->block_count;
   2e074:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2e076:	6a10      	ldr	r0, [r2, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
   2e078:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
                % lfs->cfg->block_count;
   2e07a:	fbb3 f7f0 	udiv	r7, r3, r0
   2e07e:	fb00 3317 	mls	r3, r0, r7, r3
        lfs->free.i = 0;
   2e082:	2700      	movs	r7, #0
        lfs->free.off = (lfs->free.off + lfs->free.size)
   2e084:	6563      	str	r3, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
   2e086:	00d3      	lsls	r3, r2, #3
   2e088:	428b      	cmp	r3, r1
   2e08a:	bf94      	ite	ls
   2e08c:	65a3      	strls	r3, [r4, #88]	; 0x58
   2e08e:	65a1      	strhi	r1, [r4, #88]	; 0x58
__ssp_bos_icheck3(memset, void *, int)
   2e090:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2e092:	4639      	mov	r1, r7
        lfs->free.i = 0;
   2e094:	65e7      	str	r7, [r4, #92]	; 0x5c
   2e096:	f00f faf6 	bl	3d686 <memset>
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
   2e09a:	2301      	movs	r3, #1
   2e09c:	4622      	mov	r2, r4
   2e09e:	4620      	mov	r0, r4
   2e0a0:	490d      	ldr	r1, [pc, #52]	; (2e0d8 <lfs_alloc+0xfc>)
   2e0a2:	f7ff fef5 	bl	2de90 <lfs_fs_traverseraw>
        if (err) {
   2e0a6:	2800      	cmp	r0, #0
   2e0a8:	d09c      	beq.n	2dfe4 <lfs_alloc+0x8>
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
   2e0aa:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2e0ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2e0ae:	69d1      	ldr	r1, [r2, #28]
    lfs->free.i = 0;
   2e0b0:	65e7      	str	r7, [r4, #92]	; 0x5c
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
   2e0b2:	fbb3 f5f1 	udiv	r5, r3, r1
   2e0b6:	fb01 3315 	mls	r3, r1, r5, r3
    lfs->free.size = 0;
   2e0ba:	e9c4 3715 	strd	r3, r7, [r4, #84]	; 0x54
    lfs->free.ack = lfs->cfg->block_count;
   2e0be:	6a13      	ldr	r3, [r2, #32]
   2e0c0:	6623      	str	r3, [r4, #96]	; 0x60
}
   2e0c2:	e7cf      	b.n	2e064 <lfs_alloc+0x88>
                return 0;
   2e0c4:	2000      	movs	r0, #0
   2e0c6:	e7cd      	b.n	2e064 <lfs_alloc+0x88>
   2e0c8:	0003e468 	.word	0x0003e468
   2e0cc:	0003e4f0 	.word	0x0003e4f0
   2e0d0:	000425f8 	.word	0x000425f8
   2e0d4:	00042209 	.word	0x00042209
   2e0d8:	0003b991 	.word	0x0003b991

0002e0dc <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
   2e0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e0e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
   2e0e2:	4604      	mov	r4, r0
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e0e4:	029b      	lsls	r3, r3, #10
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
   2e0e6:	460d      	mov	r5, r1
   2e0e8:	b087      	sub	sp, #28
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e0ea:	d40b      	bmi.n	2e104 <lfs_file_relocate+0x28>
   2e0ec:	493c      	ldr	r1, [pc, #240]	; (2e1e0 <lfs_file_relocate+0x104>)
   2e0ee:	483d      	ldr	r0, [pc, #244]	; (2e1e4 <lfs_file_relocate+0x108>)
   2e0f0:	f640 230c 	movw	r3, #2572	; 0xa0c
   2e0f4:	4a3c      	ldr	r2, [pc, #240]	; (2e1e8 <lfs_file_relocate+0x10c>)
   2e0f6:	f00b f860 	bl	391ba <printk>
   2e0fa:	f640 210c 	movw	r1, #2572	; 0xa0c
   2e0fe:	483a      	ldr	r0, [pc, #232]	; (2e1e8 <lfs_file_relocate+0x10c>)
   2e100:	f00b fab2 	bl	39668 <assert_post_action>
        int err = lfs_alloc(lfs, &nblock);
   2e104:	4620      	mov	r0, r4
   2e106:	a905      	add	r1, sp, #20
   2e108:	f7ff ff68 	bl	2dfdc <lfs_alloc>
        if (err) {
   2e10c:	4606      	mov	r6, r0
   2e10e:	b958      	cbnz	r0, 2e128 <lfs_file_relocate+0x4c>
        err = lfs_bd_erase(lfs, nblock);
   2e110:	f8dd 8014 	ldr.w	r8, [sp, #20]
   2e114:	4620      	mov	r0, r4
   2e116:	4641      	mov	r1, r8
   2e118:	f7fe fba2 	bl	2c860 <lfs_bd_erase>
        if (err) {
   2e11c:	4606      	mov	r6, r0
   2e11e:	2800      	cmp	r0, #0
   2e120:	d053      	beq.n	2e1ca <lfs_file_relocate+0xee>
            if (err == LFS_ERR_CORRUPT) {
   2e122:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2e126:	d056      	beq.n	2e1d6 <lfs_file_relocate+0xfa>
}
   2e128:	4630      	mov	r0, r6
   2e12a:	b007      	add	sp, #28
   2e12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (file->flags & LFS_F_INLINE) {
   2e130:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   2e132:	f10d 0a13 	add.w	sl, sp, #19
   2e136:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
                err = lfs_dir_getread(lfs, &file->m,
   2e13a:	e9cd 7a01 	strd	r7, sl, [sp, #4]
   2e13e:	eba3 0307 	sub.w	r3, r3, r7
   2e142:	f8cd 900c 	str.w	r9, [sp, #12]
            if (file->flags & LFS_F_INLINE) {
   2e146:	d01c      	beq.n	2e182 <lfs_file_relocate+0xa6>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   2e148:	88aa      	ldrh	r2, [r5, #4]
                err = lfs_dir_getread(lfs, &file->m,
   2e14a:	4928      	ldr	r1, [pc, #160]	; (2e1ec <lfs_file_relocate+0x110>)
   2e14c:	4620      	mov	r0, r4
   2e14e:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
   2e152:	9200      	str	r2, [sp, #0]
   2e154:	f105 0108 	add.w	r1, r5, #8
   2e158:	465a      	mov	r2, fp
   2e15a:	f7ff f943 	bl	2d3e4 <lfs_dir_getread.constprop.0>
                if (err) {
   2e15e:	b970      	cbnz	r0, 2e17e <lfs_file_relocate+0xa2>
            err = lfs_bd_prog(lfs,
   2e160:	2301      	movs	r3, #1
   2e162:	4622      	mov	r2, r4
   2e164:	4620      	mov	r0, r4
   2e166:	e9cd a902 	strd	sl, r9, [sp, #8]
   2e16a:	e9cd 8700 	strd	r8, r7, [sp]
   2e16e:	f104 0110 	add.w	r1, r4, #16
   2e172:	f7ff fb59 	bl	2d828 <lfs_bd_prog>
            if (err) {
   2e176:	b160      	cbz	r0, 2e192 <lfs_file_relocate+0xb6>
                if (err == LFS_ERR_CORRUPT) {
   2e178:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2e17c:	d02b      	beq.n	2e1d6 <lfs_file_relocate+0xfa>
                    return err;
   2e17e:	4606      	mov	r6, r0
   2e180:	e7d2      	b.n	2e128 <lfs_file_relocate+0x4c>
                err = lfs_bd_read(lfs,
   2e182:	6baa      	ldr	r2, [r5, #56]	; 0x38
   2e184:	4659      	mov	r1, fp
   2e186:	9200      	str	r2, [sp, #0]
   2e188:	4620      	mov	r0, r4
   2e18a:	4622      	mov	r2, r4
   2e18c:	f7fe fb94 	bl	2c8b8 <lfs_bd_read>
   2e190:	e7e5      	b.n	2e15e <lfs_file_relocate+0x82>
        for (lfs_off_t i = 0; i < file->off; i++) {
   2e192:	3701      	adds	r7, #1
   2e194:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2e196:	42bb      	cmp	r3, r7
   2e198:	d8ca      	bhi.n	2e130 <lfs_file_relocate+0x54>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
   2e19a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e19c:	69e1      	ldr	r1, [r4, #28]
   2e19e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2e1a0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   2e1a2:	f00f fa63 	bl	3d66c <memcpy>
        file->cache.block = lfs->pcache.block;
   2e1a6:	6923      	ldr	r3, [r4, #16]
        lfs_cache_zero(lfs, &lfs->pcache);
   2e1a8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
        file->cache.block = lfs->pcache.block;
   2e1aa:	642b      	str	r3, [r5, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
   2e1ac:	6963      	ldr	r3, [r4, #20]
        lfs_cache_zero(lfs, &lfs->pcache);
   2e1ae:	f104 0110 	add.w	r1, r4, #16
        file->cache.off = lfs->pcache.off;
   2e1b2:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
   2e1b4:	69a3      	ldr	r3, [r4, #24]
   2e1b6:	64ab      	str	r3, [r5, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
   2e1b8:	f00d fd74 	bl	3bca4 <lfs_cache_zero.isra.0>
        file->flags |= LFS_F_WRITING;
   2e1bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        file->block = nblock;
   2e1be:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
   2e1c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e1c6:	632b      	str	r3, [r5, #48]	; 0x30
        return 0;
   2e1c8:	e7ae      	b.n	2e128 <lfs_file_relocate+0x4c>
        for (lfs_off_t i = 0; i < file->off; i++) {
   2e1ca:	4607      	mov	r7, r0
   2e1cc:	f04f 0901 	mov.w	r9, #1
                err = lfs_dir_getread(lfs, &file->m,
   2e1d0:	f105 0b40 	add.w	fp, r5, #64	; 0x40
   2e1d4:	e7de      	b.n	2e194 <lfs_file_relocate+0xb8>
    rcache->block = LFS_BLOCK_NULL;
   2e1d6:	f04f 33ff 	mov.w	r3, #4294967295
   2e1da:	6123      	str	r3, [r4, #16]
   2e1dc:	e792      	b.n	2e104 <lfs_file_relocate+0x28>
   2e1de:	bf00      	nop
   2e1e0:	0004254b 	.word	0x0004254b
   2e1e4:	0003f0e1 	.word	0x0003f0e1
   2e1e8:	00042209 	.word	0x00042209
   2e1ec:	20100000 	.word	0x20100000

0002e1f0 <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
   2e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e1f4:	b091      	sub	sp, #68	; 0x44
   2e1f6:	9306      	str	r3, [sp, #24]
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e1f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        const void *buffer, lfs_size_t size) {
   2e1fa:	4606      	mov	r6, r0
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e1fc:	029b      	lsls	r3, r3, #10
        const void *buffer, lfs_size_t size) {
   2e1fe:	460c      	mov	r4, r1
   2e200:	9208      	str	r2, [sp, #32]
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e202:	d40b      	bmi.n	2e21c <lfs_file_write+0x2c>
   2e204:	4988      	ldr	r1, [pc, #544]	; (2e428 <lfs_file_write+0x238>)
   2e206:	4889      	ldr	r0, [pc, #548]	; (2e42c <lfs_file_write+0x23c>)
   2e208:	f640 333b 	movw	r3, #2875	; 0xb3b
   2e20c:	4a88      	ldr	r2, [pc, #544]	; (2e430 <lfs_file_write+0x240>)
   2e20e:	f00a ffd4 	bl	391ba <printk>
   2e212:	f640 313b 	movw	r1, #2875	; 0xb3b
   2e216:	4886      	ldr	r0, [pc, #536]	; (2e430 <lfs_file_write+0x240>)
   2e218:	f00b fa26 	bl	39668 <assert_post_action>
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);
   2e21c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e21e:	f003 0303 	and.w	r3, r3, #3
   2e222:	2b01      	cmp	r3, #1
   2e224:	d10b      	bne.n	2e23e <lfs_file_write+0x4e>
   2e226:	4983      	ldr	r1, [pc, #524]	; (2e434 <lfs_file_write+0x244>)
   2e228:	4880      	ldr	r0, [pc, #512]	; (2e42c <lfs_file_write+0x23c>)
   2e22a:	f640 333c 	movw	r3, #2876	; 0xb3c
   2e22e:	4a80      	ldr	r2, [pc, #512]	; (2e430 <lfs_file_write+0x240>)
   2e230:	f00a ffc3 	bl	391ba <printk>
   2e234:	f640 313c 	movw	r1, #2876	; 0xb3c
   2e238:	487d      	ldr	r0, [pc, #500]	; (2e430 <lfs_file_write+0x240>)
   2e23a:	f00b fa15 	bl	39668 <assert_post_action>
    if (file->flags & LFS_F_READING) {
   2e23e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e240:	035f      	lsls	r7, r3, #13
   2e242:	d41f      	bmi.n	2e284 <lfs_file_write+0x94>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   2e244:	6b27      	ldr	r7, [r4, #48]	; 0x30
   2e246:	053d      	lsls	r5, r7, #20
   2e248:	d427      	bmi.n	2e29a <lfs_file_write+0xaa>
    if (file->pos + size > lfs->file_max) {
   2e24a:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
   2e24e:	9b06      	ldr	r3, [sp, #24]
   2e250:	6f32      	ldr	r2, [r6, #112]	; 0x70
   2e252:	eb08 0103 	add.w	r1, r8, r3
   2e256:	4291      	cmp	r1, r2
   2e258:	f200 815d 	bhi.w	2e516 <lfs_file_write+0x326>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   2e25c:	f417 3700 	ands.w	r7, r7, #131072	; 0x20000
   2e260:	d021      	beq.n	2e2a6 <lfs_file_write+0xb6>
    if ((file->flags & LFS_F_INLINE) &&
   2e262:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e264:	02d8      	lsls	r0, r3, #11
   2e266:	d430      	bmi.n	2e2ca <lfs_file_write+0xda>
            for (lfs_off_t i = 0; i < skips; i++) {
   2e268:	9b06      	ldr	r3, [sp, #24]
   2e26a:	9305      	str	r3, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2e26c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2e270:	9304      	str	r3, [sp, #16]
    while (nsize > 0) {
   2e272:	9a05      	ldr	r2, [sp, #20]
        if (!(file->flags & LFS_F_WRITING) ||
   2e274:	6b23      	ldr	r3, [r4, #48]	; 0x30
    while (nsize > 0) {
   2e276:	2a00      	cmp	r2, #0
   2e278:	d14e      	bne.n	2e318 <lfs_file_write+0x128>
    file->flags &= ~LFS_F_ERRED;
   2e27a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    return size;
   2e27e:	9d06      	ldr	r5, [sp, #24]
    file->flags &= ~LFS_F_ERRED;
   2e280:	6323      	str	r3, [r4, #48]	; 0x30
    return size;
   2e282:	e006      	b.n	2e292 <lfs_file_write+0xa2>
        int err = lfs_file_flush(lfs, file);
   2e284:	4621      	mov	r1, r4
   2e286:	4630      	mov	r0, r6
   2e288:	f000 f948 	bl	2e51c <lfs_file_flush>
        if (err) {
   2e28c:	4605      	mov	r5, r0
   2e28e:	2800      	cmp	r0, #0
   2e290:	d0d8      	beq.n	2e244 <lfs_file_write+0x54>
}
   2e292:	4628      	mov	r0, r5
   2e294:	b011      	add	sp, #68	; 0x44
   2e296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   2e29a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2e29c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2e29e:	428a      	cmp	r2, r1
        file->pos = file->ctz.size;
   2e2a0:	bf88      	it	hi
   2e2a2:	6362      	strhi	r2, [r4, #52]	; 0x34
   2e2a4:	e7d1      	b.n	2e24a <lfs_file_write+0x5a>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   2e2a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2e2a8:	4598      	cmp	r8, r3
   2e2aa:	d9da      	bls.n	2e262 <lfs_file_write+0x72>
        file->pos = file->ctz.size;
   2e2ac:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
   2e2ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e2b0:	4598      	cmp	r8, r3
   2e2b2:	d9d6      	bls.n	2e262 <lfs_file_write+0x72>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   2e2b4:	2301      	movs	r3, #1
   2e2b6:	4621      	mov	r1, r4
   2e2b8:	4630      	mov	r0, r6
   2e2ba:	aa0f      	add	r2, sp, #60	; 0x3c
   2e2bc:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
   2e2c0:	f7ff ff96 	bl	2e1f0 <lfs_file_write>
            if (res < 0) {
   2e2c4:	1e05      	subs	r5, r0, #0
   2e2c6:	daf2      	bge.n	2e2ae <lfs_file_write+0xbe>
   2e2c8:	e7e3      	b.n	2e292 <lfs_file_write+0xa2>
    return (a < b) ? a : b;
   2e2ca:	f240 30fe 	movw	r0, #1022	; 0x3fe
            lfs_max(file->pos+nsize, file->ctz.size) >
   2e2ce:	9b06      	ldr	r3, [sp, #24]
   2e2d0:	6b67      	ldr	r7, [r4, #52]	; 0x34
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   2e2d2:	6eb2      	ldr	r2, [r6, #104]	; 0x68
            lfs_max(file->pos+nsize, file->ctz.size) >
   2e2d4:	18f9      	adds	r1, r7, r3
    return (a > b) ? a : b;
   2e2d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a < b) ? a : b;
   2e2d8:	6a95      	ldr	r5, [r2, #40]	; 0x28
    return (a > b) ? a : b;
   2e2da:	4299      	cmp	r1, r3
   2e2dc:	bf38      	it	cc
   2e2de:	4619      	movcc	r1, r3
    return (a < b) ? a : b;
   2e2e0:	42a8      	cmp	r0, r5
   2e2e2:	bf28      	it	cs
   2e2e4:	4628      	movcs	r0, r5
            lfs_min(0x3fe, lfs_min(
   2e2e6:	69d3      	ldr	r3, [r2, #28]
   2e2e8:	08db      	lsrs	r3, r3, #3
   2e2ea:	4283      	cmp	r3, r0
   2e2ec:	bf28      	it	cs
   2e2ee:	4603      	movcs	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
   2e2f0:	4299      	cmp	r1, r3
   2e2f2:	d9b9      	bls.n	2e268 <lfs_file_write+0x78>
    lfs->free.ack = lfs->cfg->block_count;
   2e2f4:	6a13      	ldr	r3, [r2, #32]
    file->off = file->pos;
   2e2f6:	63e7      	str	r7, [r4, #60]	; 0x3c
    int err = lfs_file_relocate(lfs, file);
   2e2f8:	4621      	mov	r1, r4
    lfs->free.ack = lfs->cfg->block_count;
   2e2fa:	6633      	str	r3, [r6, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
   2e2fc:	4630      	mov	r0, r6
   2e2fe:	f7ff feed 	bl	2e0dc <lfs_file_relocate>
    if (err) {
   2e302:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e304:	4605      	mov	r5, r0
   2e306:	b118      	cbz	r0, 2e310 <lfs_file_write+0x120>
                file->flags |= LFS_F_ERRED;
   2e308:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2e30c:	6323      	str	r3, [r4, #48]	; 0x30
                return err;
   2e30e:	e7c0      	b.n	2e292 <lfs_file_write+0xa2>
    file->flags &= ~LFS_F_INLINE;
   2e310:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2e314:	6323      	str	r3, [r4, #48]	; 0x30
        if (err) {
   2e316:	e7a7      	b.n	2e268 <lfs_file_write+0x78>
        if (!(file->flags & LFS_F_WRITING) ||
   2e318:	0399      	lsls	r1, r3, #14
   2e31a:	d50c      	bpl.n	2e336 <lfs_file_write+0x146>
                file->off == lfs->cfg->block_size) {
   2e31c:	6eb2      	ldr	r2, [r6, #104]	; 0x68
        if (!(file->flags & LFS_F_WRITING) ||
   2e31e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   2e320:	69d2      	ldr	r2, [r2, #28]
   2e322:	4291      	cmp	r1, r2
   2e324:	f040 80af 	bne.w	2e486 <lfs_file_write+0x296>
            if (!(file->flags & LFS_F_INLINE)) {
   2e328:	02da      	lsls	r2, r3, #11
   2e32a:	d51e      	bpl.n	2e36a <lfs_file_write+0x17a>
                file->block = LFS_BLOCK_INLINE;
   2e32c:	f06f 0301 	mvn.w	r3, #1
   2e330:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
   2e332:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e334:	e03d      	b.n	2e3b2 <lfs_file_write+0x1c2>
            if (!(file->flags & LFS_F_INLINE)) {
   2e336:	02db      	lsls	r3, r3, #11
   2e338:	d4f8      	bmi.n	2e32c <lfs_file_write+0x13c>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   2e33a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e33c:	b1ab      	cbz	r3, 2e36a <lfs_file_write+0x17a>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2e33e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   2e342:	9202      	str	r2, [sp, #8]
   2e344:	3b01      	subs	r3, #1
   2e346:	f104 0238 	add.w	r2, r4, #56	; 0x38
   2e34a:	9201      	str	r2, [sp, #4]
   2e34c:	9300      	str	r3, [sp, #0]
   2e34e:	4630      	mov	r0, r6
   2e350:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2e354:	9904      	ldr	r1, [sp, #16]
   2e356:	f00d fc23 	bl	3bba0 <lfs_ctz_find.constprop.0>
                    if (err) {
   2e35a:	4605      	mov	r5, r0
   2e35c:	b108      	cbz	r0, 2e362 <lfs_file_write+0x172>
                file->flags |= LFS_F_ERRED;
   2e35e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e360:	e7d2      	b.n	2e308 <lfs_file_write+0x118>
                    lfs_cache_zero(lfs, &file->cache);
   2e362:	9904      	ldr	r1, [sp, #16]
   2e364:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   2e366:	f00d fc9d 	bl	3bca4 <lfs_cache_zero.isra.0>
    lfs->free.ack = lfs->cfg->block_count;
   2e36a:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2e36c:	6a1b      	ldr	r3, [r3, #32]
   2e36e:	6633      	str	r3, [r6, #96]	; 0x60
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   2e370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2e372:	9309      	str	r3, [sp, #36]	; 0x24
   2e374:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e376:	9307      	str	r3, [sp, #28]
            lfs_size_t noff = size - 1;
   2e378:	3b01      	subs	r3, #1
   2e37a:	930b      	str	r3, [sp, #44]	; 0x2c
        int err = lfs_alloc(lfs, &nblock);
   2e37c:	4630      	mov	r0, r6
   2e37e:	a90d      	add	r1, sp, #52	; 0x34
   2e380:	f7ff fe2c 	bl	2dfdc <lfs_alloc>
        if (err) {
   2e384:	4605      	mov	r5, r0
   2e386:	2800      	cmp	r0, #0
   2e388:	d1e9      	bne.n	2e35e <lfs_file_write+0x16e>
            err = lfs_bd_erase(lfs, nblock);
   2e38a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   2e38e:	4630      	mov	r0, r6
   2e390:	4649      	mov	r1, r9
   2e392:	f7fe fa65 	bl	2c860 <lfs_bd_erase>
            if (err) {
   2e396:	4605      	mov	r5, r0
   2e398:	b130      	cbz	r0, 2e3a8 <lfs_file_write+0x1b8>
                    if (err == LFS_ERR_CORRUPT) {
   2e39a:	f115 0f54 	cmn.w	r5, #84	; 0x54
   2e39e:	d1de      	bne.n	2e35e <lfs_file_write+0x16e>
    rcache->block = LFS_BLOCK_NULL;
   2e3a0:	f04f 33ff 	mov.w	r3, #4294967295
   2e3a4:	6423      	str	r3, [r4, #64]	; 0x40
   2e3a6:	e7e9      	b.n	2e37c <lfs_file_write+0x18c>
            if (size == 0) {
   2e3a8:	9b07      	ldr	r3, [sp, #28]
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   2e3aa:	6eb7      	ldr	r7, [r6, #104]	; 0x68
            if (size == 0) {
   2e3ac:	b91b      	cbnz	r3, 2e3b6 <lfs_file_write+0x1c6>
                *block = nblock;
   2e3ae:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
                file->off = file->pos;
   2e3b2:	63e3      	str	r3, [r4, #60]	; 0x3c
   2e3b4:	e063      	b.n	2e47e <lfs_file_write+0x28e>
            lfs_size_t noff = size - 1;
   2e3b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   2e3b8:	4638      	mov	r0, r7
   2e3ba:	a90e      	add	r1, sp, #56	; 0x38
            lfs_size_t noff = size - 1;
   2e3bc:	930e      	str	r3, [sp, #56]	; 0x38
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   2e3be:	f00d fbd2 	bl	3bb66 <lfs_ctz_index.isra.0>
            noff = noff + 1;
   2e3c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e3c4:	f103 0801 	add.w	r8, r3, #1
            if (noff != lfs->cfg->block_size) {
   2e3c8:	69fb      	ldr	r3, [r7, #28]
            noff = noff + 1;
   2e3ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
            if (noff != lfs->cfg->block_size) {
   2e3ce:	4598      	cmp	r8, r3
   2e3d0:	d17c      	bne.n	2e4cc <lfs_file_write+0x2dc>
            index += 1;
   2e3d2:	3001      	adds	r0, #1
    return __builtin_ctz(a);
   2e3d4:	fa90 fba0 	rbit	fp, r0
   2e3d8:	fabb fb8b 	clz	fp, fp
            for (lfs_off_t i = 0; i < skips; i++) {
   2e3dc:	46a8      	mov	r8, r5
            lfs_block_t nhead = head;
   2e3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
            lfs_size_t skips = lfs_ctz(index) + 1;
   2e3e0:	f10b 0a01 	add.w	sl, fp, #1
            lfs_block_t nhead = head;
   2e3e4:	930f      	str	r3, [sp, #60]	; 0x3c
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   2e3e6:	af0f      	add	r7, sp, #60	; 0x3c
   2e3e8:	ea4f 0388 	mov.w	r3, r8, lsl #2
   2e3ec:	930a      	str	r3, [sp, #40]	; 0x28
   2e3ee:	2304      	movs	r3, #4
   2e3f0:	e9cd 7302 	strd	r7, r3, [sp, #8]
   2e3f4:	ea4f 0388 	mov.w	r3, r8, lsl #2
   2e3f8:	e9cd 9300 	strd	r9, r3, [sp]
   2e3fc:	4632      	mov	r2, r6
   2e3fe:	2301      	movs	r3, #1
   2e400:	4630      	mov	r0, r6
   2e402:	9904      	ldr	r1, [sp, #16]
   2e404:	f7ff fa10 	bl	2d828 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
   2e408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                if (err) {
   2e40a:	4605      	mov	r5, r0
   2e40c:	2800      	cmp	r0, #0
   2e40e:	d1c4      	bne.n	2e39a <lfs_file_write+0x1aa>
                if (i != skips-1) {
   2e410:	45d8      	cmp	r8, fp
   2e412:	d160      	bne.n	2e4d6 <lfs_file_write+0x2e6>
            for (lfs_off_t i = 0; i < skips; i++) {
   2e414:	f108 0801 	add.w	r8, r8, #1
   2e418:	45c2      	cmp	sl, r8
   2e41a:	d8e5      	bhi.n	2e3e8 <lfs_file_write+0x1f8>
            *block = nblock;
   2e41c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
            *off = 4*skips;
   2e420:	ea4f 038a 	mov.w	r3, sl, lsl #2
   2e424:	e7c5      	b.n	2e3b2 <lfs_file_write+0x1c2>
   2e426:	bf00      	nop
   2e428:	0004254b 	.word	0x0004254b
   2e42c:	0003f0e1 	.word	0x0003f0e1
   2e430:	00042209 	.word	0x00042209
   2e434:	00042615 	.word	0x00042615
                    err = lfs_bd_read(lfs,
   2e438:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e43a:	4632      	mov	r2, r6
   2e43c:	9300      	str	r3, [sp, #0]
   2e43e:	2100      	movs	r1, #0
   2e440:	4630      	mov	r0, r6
   2e442:	e9cd 7b02 	strd	r7, fp, [sp, #8]
   2e446:	f8cd a004 	str.w	sl, [sp, #4]
   2e44a:	eba8 030a 	sub.w	r3, r8, sl
   2e44e:	f7fe fa33 	bl	2c8b8 <lfs_bd_read>
                    if (err) {
   2e452:	4605      	mov	r5, r0
   2e454:	2800      	cmp	r0, #0
   2e456:	d182      	bne.n	2e35e <lfs_file_write+0x16e>
                    err = lfs_bd_prog(lfs,
   2e458:	2301      	movs	r3, #1
   2e45a:	4632      	mov	r2, r6
   2e45c:	4630      	mov	r0, r6
   2e45e:	e9cd 7b02 	strd	r7, fp, [sp, #8]
   2e462:	e9cd 9a00 	strd	r9, sl, [sp]
   2e466:	9904      	ldr	r1, [sp, #16]
   2e468:	f7ff f9de 	bl	2d828 <lfs_bd_prog>
                    if (err) {
   2e46c:	4605      	mov	r5, r0
   2e46e:	2800      	cmp	r0, #0
   2e470:	d193      	bne.n	2e39a <lfs_file_write+0x1aa>
                for (lfs_off_t i = 0; i < noff; i++) {
   2e472:	f10a 0a01 	add.w	sl, sl, #1
   2e476:	45d0      	cmp	r8, sl
   2e478:	d8de      	bhi.n	2e438 <lfs_file_write+0x248>
                *off = noff;
   2e47a:	e9c4 980e 	strd	r9, r8, [r4, #56]	; 0x38
            file->flags |= LFS_F_WRITING;
   2e47e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2e484:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   2e486:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2e488:	69df      	ldr	r7, [r3, #28]
   2e48a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2e48c:	1aff      	subs	r7, r7, r3
    return (a < b) ? a : b;
   2e48e:	9b05      	ldr	r3, [sp, #20]
   2e490:	429f      	cmp	r7, r3
   2e492:	bf28      	it	cs
   2e494:	461f      	movcs	r7, r3
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   2e496:	9b08      	ldr	r3, [sp, #32]
   2e498:	9703      	str	r7, [sp, #12]
   2e49a:	9302      	str	r3, [sp, #8]
   2e49c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2e49e:	4632      	mov	r2, r6
   2e4a0:	9301      	str	r3, [sp, #4]
   2e4a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2e4a4:	4630      	mov	r0, r6
   2e4a6:	9300      	str	r3, [sp, #0]
   2e4a8:	9904      	ldr	r1, [sp, #16]
   2e4aa:	2301      	movs	r3, #1
   2e4ac:	f7ff f9bc 	bl	2d828 <lfs_bd_prog>
            if (err) {
   2e4b0:	4605      	mov	r5, r0
   2e4b2:	b300      	cbz	r0, 2e4f6 <lfs_file_write+0x306>
                if (err == LFS_ERR_CORRUPT) {
   2e4b4:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2e4b8:	f47f af51 	bne.w	2e35e <lfs_file_write+0x16e>
            err = lfs_file_relocate(lfs, file);
   2e4bc:	4621      	mov	r1, r4
   2e4be:	4630      	mov	r0, r6
   2e4c0:	f7ff fe0c 	bl	2e0dc <lfs_file_relocate>
            if (err) {
   2e4c4:	4605      	mov	r5, r0
   2e4c6:	2800      	cmp	r0, #0
   2e4c8:	d0e5      	beq.n	2e496 <lfs_file_write+0x2a6>
   2e4ca:	e748      	b.n	2e35e <lfs_file_write+0x16e>
                for (lfs_off_t i = 0; i < noff; i++) {
   2e4cc:	46aa      	mov	sl, r5
                    err = lfs_bd_read(lfs,
   2e4ce:	f04f 0b01 	mov.w	fp, #1
   2e4d2:	af0f      	add	r7, sp, #60	; 0x3c
   2e4d4:	e7cf      	b.n	2e476 <lfs_file_write+0x286>
                    err = lfs_bd_read(lfs,
   2e4d6:	2204      	movs	r2, #4
   2e4d8:	e9cd 7202 	strd	r7, r2, [sp, #8]
   2e4dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2e4de:	4601      	mov	r1, r0
   2e4e0:	e9cd 3200 	strd	r3, r2, [sp]
   2e4e4:	4630      	mov	r0, r6
   2e4e6:	2304      	movs	r3, #4
   2e4e8:	4632      	mov	r2, r6
   2e4ea:	f7fe f9e5 	bl	2c8b8 <lfs_bd_read>
                    if (err) {
   2e4ee:	4605      	mov	r5, r0
   2e4f0:	2800      	cmp	r0, #0
   2e4f2:	d08f      	beq.n	2e414 <lfs_file_write+0x224>
   2e4f4:	e733      	b.n	2e35e <lfs_file_write+0x16e>
        file->pos += diff;
   2e4f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e4f8:	443b      	add	r3, r7
   2e4fa:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   2e4fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2e4fe:	443b      	add	r3, r7
   2e500:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
   2e502:	9b08      	ldr	r3, [sp, #32]
   2e504:	443b      	add	r3, r7
   2e506:	9308      	str	r3, [sp, #32]
        nsize -= diff;
   2e508:	9b05      	ldr	r3, [sp, #20]
   2e50a:	1bdb      	subs	r3, r3, r7
   2e50c:	9305      	str	r3, [sp, #20]
    lfs->free.ack = lfs->cfg->block_count;
   2e50e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2e510:	6a1b      	ldr	r3, [r3, #32]
   2e512:	6633      	str	r3, [r6, #96]	; 0x60
}
   2e514:	e6ad      	b.n	2e272 <lfs_file_write+0x82>
        return LFS_ERR_FBIG;
   2e516:	f06f 051a 	mvn.w	r5, #26
   2e51a:	e6ba      	b.n	2e292 <lfs_file_write+0xa2>

0002e51c <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2e51c:	b5f0      	push	{r4, r5, r6, r7, lr}
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e51e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2e520:	4605      	mov	r5, r0
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e522:	0298      	lsls	r0, r3, #10
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2e524:	460c      	mov	r4, r1
   2e526:	b097      	sub	sp, #92	; 0x5c
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e528:	d40b      	bmi.n	2e542 <lfs_file_flush+0x26>
   2e52a:	4939      	ldr	r1, [pc, #228]	; (2e610 <lfs_file_flush+0xf4>)
   2e52c:	4839      	ldr	r0, [pc, #228]	; (2e614 <lfs_file_flush+0xf8>)
   2e52e:	f640 235f 	movw	r3, #2655	; 0xa5f
   2e532:	4a39      	ldr	r2, [pc, #228]	; (2e618 <lfs_file_flush+0xfc>)
   2e534:	f00a fe41 	bl	391ba <printk>
   2e538:	f640 215f 	movw	r1, #2655	; 0xa5f
   2e53c:	4836      	ldr	r0, [pc, #216]	; (2e618 <lfs_file_flush+0xfc>)
   2e53e:	f00b f893 	bl	39668 <assert_post_action>
    if (file->flags & LFS_F_READING) {
   2e542:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e544:	0359      	lsls	r1, r3, #13
   2e546:	d508      	bpl.n	2e55a <lfs_file_flush+0x3e>
        if (!(file->flags & LFS_F_INLINE)) {
   2e548:	02da      	lsls	r2, r3, #11
    rcache->block = LFS_BLOCK_NULL;
   2e54a:	bf58      	it	pl
   2e54c:	f04f 32ff 	movpl.w	r2, #4294967295
        file->flags &= ~LFS_F_READING;
   2e550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    rcache->block = LFS_BLOCK_NULL;
   2e554:	bf58      	it	pl
   2e556:	6422      	strpl	r2, [r4, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
   2e558:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
   2e55a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2e55c:	038b      	lsls	r3, r1, #14
   2e55e:	d402      	bmi.n	2e566 <lfs_file_flush+0x4a>
    return 0;
   2e560:	2000      	movs	r0, #0
}
   2e562:	b017      	add	sp, #92	; 0x5c
   2e564:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!(file->flags & LFS_F_INLINE)) {
   2e566:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
        lfs_off_t pos = file->pos;
   2e56a:	6b66      	ldr	r6, [r4, #52]	; 0x34
                .ctz.size = file->ctz.size,
   2e56c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        if (!(file->flags & LFS_F_INLINE)) {
   2e56e:	d13f      	bne.n	2e5f0 <lfs_file_flush+0xd4>
            lfs_file_t orig = {
   2e570:	2254      	movs	r2, #84	; 0x54
   2e572:	a801      	add	r0, sp, #4
   2e574:	f00f f887 	bl	3d686 <memset>
   2e578:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2e57a:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
   2e57e:	4b27      	ldr	r3, [pc, #156]	; (2e61c <lfs_file_flush+0x100>)
   2e580:	af11      	add	r7, sp, #68	; 0x44
   2e582:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
   2e586:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2e58a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
   2e58e:	f04f 37ff 	mov.w	r7, #4294967295
   2e592:	602f      	str	r7, [r5, #0]
            while (file->pos < file->ctz.size) {
   2e594:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2e596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2e598:	429a      	cmp	r2, r3
   2e59a:	d312      	bcc.n	2e5c2 <lfs_file_flush+0xa6>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
   2e59c:	f104 0740 	add.w	r7, r4, #64	; 0x40
   2e5a0:	2301      	movs	r3, #1
   2e5a2:	462a      	mov	r2, r5
   2e5a4:	4639      	mov	r1, r7
   2e5a6:	4628      	mov	r0, r5
   2e5a8:	f7ff f8de 	bl	2d768 <lfs_bd_flush>
                if (err) {
   2e5ac:	b320      	cbz	r0, 2e5f8 <lfs_file_flush+0xdc>
                    if (err == LFS_ERR_CORRUPT) {
   2e5ae:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2e5b2:	d1d6      	bne.n	2e562 <lfs_file_flush+0x46>
                err = lfs_file_relocate(lfs, file);
   2e5b4:	4621      	mov	r1, r4
   2e5b6:	4628      	mov	r0, r5
   2e5b8:	f7ff fd90 	bl	2e0dc <lfs_file_relocate>
                if (err) {
   2e5bc:	2800      	cmp	r0, #0
   2e5be:	d0ef      	beq.n	2e5a0 <lfs_file_flush+0x84>
   2e5c0:	e7cf      	b.n	2e562 <lfs_file_flush+0x46>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
   2e5c2:	2301      	movs	r3, #1
   2e5c4:	4628      	mov	r0, r5
   2e5c6:	f10d 0203 	add.w	r2, sp, #3
   2e5ca:	a901      	add	r1, sp, #4
   2e5cc:	f000 f828 	bl	2e620 <lfs_file_read>
                if (res < 0) {
   2e5d0:	2800      	cmp	r0, #0
   2e5d2:	dbc6      	blt.n	2e562 <lfs_file_flush+0x46>
                res = lfs_file_write(lfs, file, &data, 1);
   2e5d4:	2301      	movs	r3, #1
   2e5d6:	4621      	mov	r1, r4
   2e5d8:	4628      	mov	r0, r5
   2e5da:	f10d 0203 	add.w	r2, sp, #3
   2e5de:	f7ff fe07 	bl	2e1f0 <lfs_file_write>
                if (res < 0) {
   2e5e2:	2800      	cmp	r0, #0
   2e5e4:	dbbd      	blt.n	2e562 <lfs_file_flush+0x46>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
   2e5e6:	682b      	ldr	r3, [r5, #0]
   2e5e8:	3301      	adds	r3, #1
   2e5ea:	d0d3      	beq.n	2e594 <lfs_file_flush+0x78>
    rcache->block = LFS_BLOCK_NULL;
   2e5ec:	9711      	str	r7, [sp, #68]	; 0x44
   2e5ee:	e7d0      	b.n	2e592 <lfs_file_flush+0x76>
            file->pos = lfs_max(file->pos, file->ctz.size);
   2e5f0:	42be      	cmp	r6, r7
   2e5f2:	bf2c      	ite	cs
   2e5f4:	6366      	strcs	r6, [r4, #52]	; 0x34
   2e5f6:	6367      	strcc	r7, [r4, #52]	; 0x34
        file->ctz.head = file->block;
   2e5f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2e5fa:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
   2e5fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e5fe:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
   2e600:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e602:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
   2e606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        file->pos = pos;
   2e60a:	e9c4 360c 	strd	r3, r6, [r4, #48]	; 0x30
   2e60e:	e7a7      	b.n	2e560 <lfs_file_flush+0x44>
   2e610:	0004254b 	.word	0x0004254b
   2e614:	0003f0e1 	.word	0x0003f0e1
   2e618:	00042209 	.word	0x00042209
   2e61c:	00200001 	.word	0x00200001

0002e620 <lfs_file_read>:
        void *buffer, lfs_size_t size) {
   2e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e624:	461e      	mov	r6, r3
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e626:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        void *buffer, lfs_size_t size) {
   2e628:	4605      	mov	r5, r0
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e62a:	029f      	lsls	r7, r3, #10
        void *buffer, lfs_size_t size) {
   2e62c:	460c      	mov	r4, r1
   2e62e:	4690      	mov	r8, r2
   2e630:	b085      	sub	sp, #20
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e632:	d40b      	bmi.n	2e64c <lfs_file_read+0x2c>
   2e634:	4945      	ldr	r1, [pc, #276]	; (2e74c <lfs_file_read+0x12c>)
   2e636:	4846      	ldr	r0, [pc, #280]	; (2e750 <lfs_file_read+0x130>)
   2e638:	f640 23eb 	movw	r3, #2795	; 0xaeb
   2e63c:	4a45      	ldr	r2, [pc, #276]	; (2e754 <lfs_file_read+0x134>)
   2e63e:	f00a fdbc 	bl	391ba <printk>
   2e642:	f640 21eb 	movw	r1, #2795	; 0xaeb
   2e646:	4843      	ldr	r0, [pc, #268]	; (2e754 <lfs_file_read+0x134>)
   2e648:	f00b f80e 	bl	39668 <assert_post_action>
    LFS_ASSERT((file->flags & 3) != LFS_O_WRONLY);
   2e64c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e64e:	f003 0303 	and.w	r3, r3, #3
   2e652:	2b02      	cmp	r3, #2
   2e654:	d10b      	bne.n	2e66e <lfs_file_read+0x4e>
   2e656:	4940      	ldr	r1, [pc, #256]	; (2e758 <lfs_file_read+0x138>)
   2e658:	483d      	ldr	r0, [pc, #244]	; (2e750 <lfs_file_read+0x130>)
   2e65a:	f640 23ec 	movw	r3, #2796	; 0xaec
   2e65e:	4a3d      	ldr	r2, [pc, #244]	; (2e754 <lfs_file_read+0x134>)
   2e660:	f00a fdab 	bl	391ba <printk>
   2e664:	f640 21ec 	movw	r1, #2796	; 0xaec
   2e668:	483a      	ldr	r0, [pc, #232]	; (2e754 <lfs_file_read+0x134>)
   2e66a:	f00a fffd 	bl	39668 <assert_post_action>
    if (file->flags & LFS_F_WRITING) {
   2e66e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e670:	0398      	lsls	r0, r3, #14
   2e672:	d405      	bmi.n	2e680 <lfs_file_read+0x60>
    if (file->pos >= file->ctz.size) {
   2e674:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e676:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   2e678:	42bb      	cmp	r3, r7
   2e67a:	d30a      	bcc.n	2e692 <lfs_file_read+0x72>
        return 0;
   2e67c:	2000      	movs	r0, #0
   2e67e:	e005      	b.n	2e68c <lfs_file_read+0x6c>
        int err = lfs_file_flush(lfs, file);
   2e680:	4621      	mov	r1, r4
   2e682:	4628      	mov	r0, r5
   2e684:	f7ff ff4a 	bl	2e51c <lfs_file_flush>
        if (err) {
   2e688:	2800      	cmp	r0, #0
   2e68a:	d0f3      	beq.n	2e674 <lfs_file_read+0x54>
}
   2e68c:	b005      	add	sp, #20
   2e68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size = lfs_min(size, file->ctz.size - file->pos);
   2e692:	1aff      	subs	r7, r7, r3
   2e694:	42b7      	cmp	r7, r6
   2e696:	bf28      	it	cs
   2e698:	4637      	movcs	r7, r6
    nsize = size;
   2e69a:	46b9      	mov	r9, r7
            int err = lfs_dir_getread(lfs, &file->m,
   2e69c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 2e75c <lfs_file_read+0x13c>
   2e6a0:	f104 0a40 	add.w	sl, r4, #64	; 0x40
    while (nsize > 0) {
   2e6a4:	f1b9 0f00 	cmp.w	r9, #0
   2e6a8:	d101      	bne.n	2e6ae <lfs_file_read+0x8e>
    return size;
   2e6aa:	4638      	mov	r0, r7
   2e6ac:	e7ee      	b.n	2e68c <lfs_file_read+0x6c>
        if (!(file->flags & LFS_F_READING) ||
   2e6ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2e6b0:	0351      	lsls	r1, r2, #13
   2e6b2:	d504      	bpl.n	2e6be <lfs_file_read+0x9e>
                file->off == lfs->cfg->block_size) {
   2e6b4:	6eab      	ldr	r3, [r5, #104]	; 0x68
        if (!(file->flags & LFS_F_READING) ||
   2e6b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   2e6b8:	69db      	ldr	r3, [r3, #28]
   2e6ba:	4299      	cmp	r1, r3
   2e6bc:	d115      	bne.n	2e6ea <lfs_file_read+0xca>
            if (!(file->flags & LFS_F_INLINE)) {
   2e6be:	02d2      	lsls	r2, r2, #11
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2e6c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
            if (!(file->flags & LFS_F_INLINE)) {
   2e6c2:	d436      	bmi.n	2e732 <lfs_file_read+0x112>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2e6c4:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   2e6c8:	9202      	str	r2, [sp, #8]
   2e6ca:	f104 0238 	add.w	r2, r4, #56	; 0x38
   2e6ce:	e9cd 3200 	strd	r3, r2, [sp]
   2e6d2:	4651      	mov	r1, sl
   2e6d4:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2e6d8:	4628      	mov	r0, r5
   2e6da:	f00d fa61 	bl	3bba0 <lfs_ctz_find.constprop.0>
                if (err) {
   2e6de:	2800      	cmp	r0, #0
   2e6e0:	d1d4      	bne.n	2e68c <lfs_file_read+0x6c>
            file->flags |= LFS_F_READING;
   2e6e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e6e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2e6e8:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   2e6ea:	6eab      	ldr	r3, [r5, #104]	; 0x68
   2e6ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   2e6ee:	69db      	ldr	r3, [r3, #28]
        if (file->flags & LFS_F_INLINE) {
   2e6f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   2e6f2:	1a9e      	subs	r6, r3, r2
   2e6f4:	454e      	cmp	r6, r9
   2e6f6:	bf28      	it	cs
   2e6f8:	464e      	movcs	r6, r9
        if (file->flags & LFS_F_INLINE) {
   2e6fa:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
            int err = lfs_dir_getread(lfs, &file->m,
   2e6fe:	e9cd 8602 	strd	r8, r6, [sp, #8]
   2e702:	9201      	str	r2, [sp, #4]
        if (file->flags & LFS_F_INLINE) {
   2e704:	d01a      	beq.n	2e73c <lfs_file_read+0x11c>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   2e706:	88a2      	ldrh	r2, [r4, #4]
            int err = lfs_dir_getread(lfs, &file->m,
   2e708:	4628      	mov	r0, r5
   2e70a:	ea4b 2282 	orr.w	r2, fp, r2, lsl #10
   2e70e:	9200      	str	r2, [sp, #0]
   2e710:	f104 0108 	add.w	r1, r4, #8
   2e714:	4652      	mov	r2, sl
   2e716:	f7fe fe65 	bl	2d3e4 <lfs_dir_getread.constprop.0>
            if (err) {
   2e71a:	2800      	cmp	r0, #0
   2e71c:	d1b6      	bne.n	2e68c <lfs_file_read+0x6c>
        file->pos += diff;
   2e71e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        data += diff;
   2e720:	44b0      	add	r8, r6
        file->pos += diff;
   2e722:	4433      	add	r3, r6
   2e724:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   2e726:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        nsize -= diff;
   2e728:	eba9 0906 	sub.w	r9, r9, r6
        file->off += diff;
   2e72c:	4433      	add	r3, r6
   2e72e:	63e3      	str	r3, [r4, #60]	; 0x3c
        nsize -= diff;
   2e730:	e7b8      	b.n	2e6a4 <lfs_file_read+0x84>
                file->block = LFS_BLOCK_INLINE;
   2e732:	f06f 0201 	mvn.w	r2, #1
                file->off = file->pos;
   2e736:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   2e73a:	e7d2      	b.n	2e6e2 <lfs_file_read+0xc2>
            int err = lfs_bd_read(lfs,
   2e73c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2e73e:	4628      	mov	r0, r5
   2e740:	9200      	str	r2, [sp, #0]
   2e742:	4652      	mov	r2, sl
   2e744:	f7fe f8b8 	bl	2c8b8 <lfs_bd_read>
   2e748:	e7e7      	b.n	2e71a <lfs_file_read+0xfa>
   2e74a:	bf00      	nop
   2e74c:	0004254b 	.word	0x0004254b
   2e750:	0003f0e1 	.word	0x0003f0e1
   2e754:	00042209 	.word	0x00042209
   2e758:	00042637 	.word	0x00042637
   2e75c:	20100000 	.word	0x20100000

0002e760 <lfs_file_seek>:
        lfs_soff_t off, int whence) {
   2e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e762:	461e      	mov	r6, r3
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e764:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        lfs_soff_t off, int whence) {
   2e766:	4607      	mov	r7, r0
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e768:	029b      	lsls	r3, r3, #10
        lfs_soff_t off, int whence) {
   2e76a:	460c      	mov	r4, r1
   2e76c:	4615      	mov	r5, r2
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e76e:	d40b      	bmi.n	2e788 <lfs_file_seek+0x28>
   2e770:	4911      	ldr	r1, [pc, #68]	; (2e7b8 <lfs_file_seek+0x58>)
   2e772:	4812      	ldr	r0, [pc, #72]	; (2e7bc <lfs_file_seek+0x5c>)
   2e774:	f640 33be 	movw	r3, #3006	; 0xbbe
   2e778:	4a11      	ldr	r2, [pc, #68]	; (2e7c0 <lfs_file_seek+0x60>)
   2e77a:	f00a fd1e 	bl	391ba <printk>
   2e77e:	f640 31be 	movw	r1, #3006	; 0xbbe
   2e782:	480f      	ldr	r0, [pc, #60]	; (2e7c0 <lfs_file_seek+0x60>)
   2e784:	f00a ff70 	bl	39668 <assert_post_action>
    int err = lfs_file_flush(lfs, file);
   2e788:	4621      	mov	r1, r4
   2e78a:	4638      	mov	r0, r7
   2e78c:	f7ff fec6 	bl	2e51c <lfs_file_flush>
    if (err) {
   2e790:	b940      	cbnz	r0, 2e7a4 <lfs_file_seek+0x44>
    lfs_off_t npos = file->pos;
   2e792:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
   2e794:	b93e      	cbnz	r6, 2e7a6 <lfs_file_seek+0x46>
        npos = off;
   2e796:	4628      	mov	r0, r5
    if (npos > lfs->file_max) {
   2e798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2e79a:	4283      	cmp	r3, r0
        return LFS_ERR_INVAL;
   2e79c:	bf34      	ite	cc
   2e79e:	f06f 0015 	mvncc.w	r0, #21
    file->pos = npos;
   2e7a2:	6360      	strcs	r0, [r4, #52]	; 0x34
}
   2e7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
   2e7a6:	2e01      	cmp	r6, #1
   2e7a8:	d101      	bne.n	2e7ae <lfs_file_seek+0x4e>
        npos = file->pos + off;
   2e7aa:	4428      	add	r0, r5
   2e7ac:	e7f4      	b.n	2e798 <lfs_file_seek+0x38>
    } else if (whence == LFS_SEEK_END) {
   2e7ae:	2e02      	cmp	r6, #2
        npos = file->ctz.size + off;
   2e7b0:	bf04      	itt	eq
   2e7b2:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
   2e7b4:	18e8      	addeq	r0, r5, r3
   2e7b6:	e7ef      	b.n	2e798 <lfs_file_seek+0x38>
   2e7b8:	0004254b 	.word	0x0004254b
   2e7bc:	0003f0e1 	.word	0x0003f0e1
   2e7c0:	00042209 	.word	0x00042209

0002e7c4 <lfs_file_truncate>:
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   2e7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e7c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   2e7ca:	4605      	mov	r5, r0
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e7cc:	029b      	lsls	r3, r3, #10
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   2e7ce:	460c      	mov	r4, r1
   2e7d0:	4616      	mov	r6, r2
   2e7d2:	b086      	sub	sp, #24
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2e7d4:	d40b      	bmi.n	2e7ee <lfs_file_truncate+0x2a>
   2e7d6:	4937      	ldr	r1, [pc, #220]	; (2e8b4 <lfs_file_truncate+0xf0>)
   2e7d8:	4837      	ldr	r0, [pc, #220]	; (2e8b8 <lfs_file_truncate+0xf4>)
   2e7da:	f44f 633e 	mov.w	r3, #3040	; 0xbe0
   2e7de:	4a37      	ldr	r2, [pc, #220]	; (2e8bc <lfs_file_truncate+0xf8>)
   2e7e0:	f00a fceb 	bl	391ba <printk>
   2e7e4:	f44f 613e 	mov.w	r1, #3040	; 0xbe0
   2e7e8:	4834      	ldr	r0, [pc, #208]	; (2e8bc <lfs_file_truncate+0xf8>)
   2e7ea:	f00a ff3d 	bl	39668 <assert_post_action>
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);
   2e7ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e7f0:	f003 0303 	and.w	r3, r3, #3
   2e7f4:	2b01      	cmp	r3, #1
   2e7f6:	d10b      	bne.n	2e810 <lfs_file_truncate+0x4c>
   2e7f8:	4931      	ldr	r1, [pc, #196]	; (2e8c0 <lfs_file_truncate+0xfc>)
   2e7fa:	482f      	ldr	r0, [pc, #188]	; (2e8b8 <lfs_file_truncate+0xf4>)
   2e7fc:	f640 33e1 	movw	r3, #3041	; 0xbe1
   2e800:	4a2e      	ldr	r2, [pc, #184]	; (2e8bc <lfs_file_truncate+0xf8>)
   2e802:	f00a fcda 	bl	391ba <printk>
   2e806:	f640 31e1 	movw	r1, #3041	; 0xbe1
   2e80a:	482c      	ldr	r0, [pc, #176]	; (2e8bc <lfs_file_truncate+0xf8>)
   2e80c:	f00a ff2c 	bl	39668 <assert_post_action>
    if (size > LFS_FILE_MAX) {
   2e810:	2e00      	cmp	r6, #0
   2e812:	db4b      	blt.n	2e8ac <lfs_file_truncate+0xe8>
    lfs_off_t oldsize = lfs_file_size(lfs, file);
   2e814:	4621      	mov	r1, r4
   2e816:	4628      	mov	r0, r5
    lfs_off_t pos = file->pos;
   2e818:	6b67      	ldr	r7, [r4, #52]	; 0x34
    lfs_off_t oldsize = lfs_file_size(lfs, file);
   2e81a:	f7ff fa1f 	bl	2dc5c <lfs_file_size>
    if (size < oldsize) {
   2e81e:	4286      	cmp	r6, r0
   2e820:	d224      	bcs.n	2e86c <lfs_file_truncate+0xa8>
        int err = lfs_file_flush(lfs, file);
   2e822:	4621      	mov	r1, r4
   2e824:	4628      	mov	r0, r5
   2e826:	f7ff fe79 	bl	2e51c <lfs_file_flush>
        if (err) {
   2e82a:	2800      	cmp	r0, #0
   2e82c:	d13b      	bne.n	2e8a6 <lfs_file_truncate+0xe2>
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   2e82e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   2e832:	9302      	str	r3, [sp, #8]
   2e834:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2e838:	e9cd 6300 	strd	r6, r3, [sp]
   2e83c:	4628      	mov	r0, r5
   2e83e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2e842:	f104 0140 	add.w	r1, r4, #64	; 0x40
   2e846:	f00d f9ab 	bl	3bba0 <lfs_ctz_find.constprop.0>
        if (err) {
   2e84a:	bb60      	cbnz	r0, 2e8a6 <lfs_file_truncate+0xe2>
        file->ctz.head = file->block;
   2e84c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        file->ctz.size = size;
   2e84e:	e9c4 360a 	strd	r3, r6, [r4, #40]	; 0x28
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   2e852:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2e854:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   2e858:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_soff_t res = lfs_file_seek(lfs, file, pos, LFS_SEEK_SET);
   2e85a:	2300      	movs	r3, #0
   2e85c:	463a      	mov	r2, r7
   2e85e:	4621      	mov	r1, r4
   2e860:	4628      	mov	r0, r5
   2e862:	f7ff ff7d 	bl	2e760 <lfs_file_seek>
    if (res < 0) {
   2e866:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2e86a:	e01c      	b.n	2e8a6 <lfs_file_truncate+0xe2>
    } else if (size > oldsize) {
   2e86c:	d9f5      	bls.n	2e85a <lfs_file_truncate+0x96>
        if (file->pos != oldsize) {
   2e86e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e870:	4283      	cmp	r3, r0
   2e872:	d110      	bne.n	2e896 <lfs_file_truncate+0xd2>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   2e874:	f04f 0800 	mov.w	r8, #0
        while (file->pos < size) {
   2e878:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e87a:	42b3      	cmp	r3, r6
   2e87c:	d2ed      	bcs.n	2e85a <lfs_file_truncate+0x96>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   2e87e:	2301      	movs	r3, #1
   2e880:	4621      	mov	r1, r4
   2e882:	4628      	mov	r0, r5
   2e884:	f10d 0217 	add.w	r2, sp, #23
   2e888:	f88d 8017 	strb.w	r8, [sp, #23]
   2e88c:	f7ff fcb0 	bl	2e1f0 <lfs_file_write>
            if (res < 0) {
   2e890:	2800      	cmp	r0, #0
   2e892:	daf1      	bge.n	2e878 <lfs_file_truncate+0xb4>
   2e894:	e007      	b.n	2e8a6 <lfs_file_truncate+0xe2>
            lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_END);
   2e896:	2302      	movs	r3, #2
   2e898:	2200      	movs	r2, #0
   2e89a:	4621      	mov	r1, r4
   2e89c:	4628      	mov	r0, r5
   2e89e:	f7ff ff5f 	bl	2e760 <lfs_file_seek>
            if (res < 0) {
   2e8a2:	2800      	cmp	r0, #0
   2e8a4:	dae6      	bge.n	2e874 <lfs_file_truncate+0xb0>
}
   2e8a6:	b006      	add	sp, #24
   2e8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_INVAL;
   2e8ac:	f06f 0015 	mvn.w	r0, #21
   2e8b0:	e7f9      	b.n	2e8a6 <lfs_file_truncate+0xe2>
   2e8b2:	bf00      	nop
   2e8b4:	0004254b 	.word	0x0004254b
   2e8b8:	0003f0e1 	.word	0x0003f0e1
   2e8bc:	00042209 	.word	0x00042209
   2e8c0:	00042615 	.word	0x00042615

0002e8c4 <lfs_fs_size>:
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
   2e8c4:	2300      	movs	r3, #0
lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
   2e8c6:	b507      	push	{r0, r1, r2, lr}
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
   2e8c8:	4904      	ldr	r1, [pc, #16]	; (2e8dc <lfs_fs_size+0x18>)
   2e8ca:	aa01      	add	r2, sp, #4
    lfs_size_t size = 0;
   2e8cc:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
   2e8ce:	f7ff fadf 	bl	2de90 <lfs_fs_traverseraw>
    if (err) {
   2e8d2:	b900      	cbnz	r0, 2e8d6 <lfs_fs_size+0x12>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
   2e8d4:	9801      	ldr	r0, [sp, #4]
}
   2e8d6:	b003      	add	sp, #12
   2e8d8:	f85d fb04 	ldr.w	pc, [sp], #4
   2e8dc:	0003b9d9 	.word	0x0003b9d9

0002e8e0 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   2e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e8e4:	4604      	mov	r4, r0
   2e8e6:	460d      	mov	r5, r1
        lfs_size_t size = 0;
   2e8e8:	f04f 0800 	mov.w	r8, #0
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   2e8ec:	469a      	mov	sl, r3
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
   2e8ee:	680b      	ldr	r3, [r1, #0]
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   2e8f0:	b09d      	sub	sp, #116	; 0x74
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
   2e8f2:	930c      	str	r3, [sp, #48]	; 0x30
   2e8f4:	684b      	ldr	r3, [r1, #4]
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   2e8f6:	f8bd 709c 	ldrh.w	r7, [sp, #156]	; 0x9c
   2e8fa:	f8bd 90a0 	ldrh.w	r9, [sp, #160]	; 0xa0
   2e8fe:	920b      	str	r2, [sp, #44]	; 0x2c
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
   2e900:	930d      	str	r3, [sp, #52]	; 0x34
    while (end - begin > 1) {
   2e902:	eba9 0607 	sub.w	r6, r9, r7
   2e906:	2e01      	cmp	r6, #1
   2e908:	dc70      	bgt.n	2e9ec <lfs_dir_compact+0x10c>
    if (lfs->cfg->block_cycles > 0 &&
   2e90a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    dir->rev += 1;
   2e90c:	68ab      	ldr	r3, [r5, #8]
    if (lfs->cfg->block_cycles > 0 &&
   2e90e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    dir->rev += 1;
   2e910:	3301      	adds	r3, #1
    if (lfs->cfg->block_cycles > 0 &&
   2e912:	2a00      	cmp	r2, #0
    dir->rev += 1;
   2e914:	60ab      	str	r3, [r5, #8]
    if (lfs->cfg->block_cycles > 0 &&
   2e916:	dd2e      	ble.n	2e976 <lfs_dir_compact+0x96>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
   2e918:	3201      	adds	r2, #1
   2e91a:	f042 0201 	orr.w	r2, r2, #1
   2e91e:	fbb3 f1f2 	udiv	r1, r3, r2
   2e922:	fb02 3311 	mls	r3, r2, r1, r3
    if (lfs->cfg->block_cycles > 0 &&
   2e926:	bb33      	cbnz	r3, 2e976 <lfs_dir_compact+0x96>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   2e928:	2601      	movs	r6, #1
   2e92a:	4628      	mov	r0, r5
   2e92c:	a914      	add	r1, sp, #80	; 0x50
   2e92e:	9314      	str	r3, [sp, #80]	; 0x50
   2e930:	9615      	str	r6, [sp, #84]	; 0x54
   2e932:	f00c fff6 	bl	3b922 <lfs_pair_cmp>
   2e936:	2800      	cmp	r0, #0
   2e938:	d136      	bne.n	2e9a8 <lfs_dir_compact+0xc8>
            lfs_ssize_t res = lfs_fs_size(lfs);
   2e93a:	4620      	mov	r0, r4
   2e93c:	f7ff ffc2 	bl	2e8c4 <lfs_fs_size>
            if (res < 0) {
   2e940:	f1b0 0b00 	subs.w	fp, r0, #0
   2e944:	f2c0 809a 	blt.w	2ea7c <lfs_dir_compact+0x19c>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
   2e948:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2e94a:	6a1b      	ldr	r3, [r3, #32]
   2e94c:	ebbb 0f53 	cmp.w	fp, r3, lsr #1
   2e950:	d211      	bcs.n	2e976 <lfs_dir_compact+0x96>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
   2e952:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2e954:	4629      	mov	r1, r5
   2e956:	9300      	str	r3, [sp, #0]
   2e958:	4620      	mov	r0, r4
   2e95a:	4653      	mov	r3, sl
   2e95c:	e9cd 7901 	strd	r7, r9, [sp, #4]
   2e960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2e962:	f00d fa7b 	bl	3be5c <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
   2e966:	4683      	mov	fp, r0
   2e968:	2800      	cmp	r0, #0
   2e96a:	f000 808d 	beq.w	2ea88 <lfs_dir_compact+0x1a8>
   2e96e:	f110 0f1c 	cmn.w	r0, #28
   2e972:	f040 8083 	bne.w	2ea7c <lfs_dir_compact+0x19c>
    bool relocated = false;
   2e976:	2600      	movs	r6, #0
            struct lfs_commit commit = {
   2e978:	2300      	movs	r3, #0
   2e97a:	f04f 3bff 	mov.w	fp, #4294967295
   2e97e:	e9cd 3b15 	strd	r3, fp, [sp, #84]	; 0x54
   2e982:	e9cd b317 	strd	fp, r3, [sp, #92]	; 0x5c
                .end = lfs->cfg->block_size - 8,
   2e986:	6ea3      	ldr	r3, [r4, #104]	; 0x68
                .block = dir->pair[1],
   2e988:	6869      	ldr	r1, [r5, #4]
                .end = lfs->cfg->block_size - 8,
   2e98a:	69db      	ldr	r3, [r3, #28]
            int err = lfs_bd_erase(lfs, dir->pair[1]);
   2e98c:	4620      	mov	r0, r4
                .end = lfs->cfg->block_size - 8,
   2e98e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
   2e990:	9114      	str	r1, [sp, #80]	; 0x50
   2e992:	9319      	str	r3, [sp, #100]	; 0x64
            int err = lfs_bd_erase(lfs, dir->pair[1]);
   2e994:	f7fd ff64 	bl	2c860 <lfs_bd_erase>
            if (err) {
   2e998:	4602      	mov	r2, r0
   2e99a:	2800      	cmp	r0, #0
   2e99c:	d078      	beq.n	2ea90 <lfs_dir_compact+0x1b0>
                if (err == LFS_ERR_CORRUPT) {
   2e99e:	f112 0f54 	cmn.w	r2, #84	; 0x54
   2e9a2:	f040 81dd 	bne.w	2ed60 <lfs_dir_compact+0x480>
                    goto relocate;
   2e9a6:	2600      	movs	r6, #0
    rcache->block = LFS_BLOCK_NULL;
   2e9a8:	f04f 33ff 	mov.w	r3, #4294967295
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   2e9ac:	f04f 0801 	mov.w	r8, #1
    rcache->block = LFS_BLOCK_NULL;
   2e9b0:	6123      	str	r3, [r4, #16]
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   2e9b2:	2300      	movs	r3, #0
   2e9b4:	4628      	mov	r0, r5
   2e9b6:	a914      	add	r1, sp, #80	; 0x50
   2e9b8:	e9cd 3814 	strd	r3, r8, [sp, #80]	; 0x50
   2e9bc:	f00c ffb1 	bl	3b922 <lfs_pair_cmp>
   2e9c0:	2800      	cmp	r0, #0
   2e9c2:	f040 81cf 	bne.w	2ed64 <lfs_dir_compact+0x484>
   2e9c6:	4ab0      	ldr	r2, [pc, #704]	; (2ec88 <lfs_dir_compact+0x3a8>)
   2e9c8:	4bb0      	ldr	r3, [pc, #704]	; (2ec8c <lfs_dir_compact+0x3ac>)
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
   2e9ca:	49b1      	ldr	r1, [pc, #708]	; (2ec90 <lfs_dir_compact+0x3b0>)
   2e9cc:	1a9b      	subs	r3, r3, r2
   2e9ce:	08db      	lsrs	r3, r3, #3
   2e9d0:	019b      	lsls	r3, r3, #6
   2e9d2:	f043 0302 	orr.w	r3, r3, #2
   2e9d6:	f8ad 3000 	strh.w	r3, [sp]
   2e9da:	f240 629a 	movw	r2, #1690	; 0x69a
   2e9de:	686b      	ldr	r3, [r5, #4]
   2e9e0:	48ac      	ldr	r0, [pc, #688]	; (2ec94 <lfs_dir_compact+0x3b4>)
   2e9e2:	f00a fec4 	bl	3976e <log_3>
            return LFS_ERR_NOSPC;
   2e9e6:	f06f 0b1b 	mvn.w	fp, #27
   2e9ea:	e047      	b.n	2ea7c <lfs_dir_compact+0x19c>
        int err = lfs_dir_traverse(lfs,
   2e9ec:	ab14      	add	r3, sp, #80	; 0x50
   2e9ee:	9308      	str	r3, [sp, #32]
   2e9f0:	4ba9      	ldr	r3, [pc, #676]	; (2ec98 <lfs_dir_compact+0x3b8>)
   2e9f2:	2200      	movs	r2, #0
   2e9f4:	9307      	str	r3, [sp, #28]
   2e9f6:	427b      	negs	r3, r7
   2e9f8:	b21b      	sxth	r3, r3
   2e9fa:	e9cd 9305 	strd	r9, r3, [sp, #20]
   2e9fe:	4ba7      	ldr	r3, [pc, #668]	; (2ec9c <lfs_dir_compact+0x3bc>)
   2ea00:	4620      	mov	r0, r4
   2ea02:	e9cd a301 	strd	sl, r3, [sp, #4]
   2ea06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ea08:	e9cd 8703 	strd	r8, r7, [sp, #12]
   2ea0c:	9300      	str	r3, [sp, #0]
   2ea0e:	9926      	ldr	r1, [sp, #152]	; 0x98
   2ea10:	f04f 33ff 	mov.w	r3, #4294967295
        lfs_size_t size = 0;
   2ea14:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
        int err = lfs_dir_traverse(lfs,
   2ea18:	f7fe fa7c 	bl	2cf14 <lfs_dir_traverse>
        if (err) {
   2ea1c:	4683      	mov	fp, r0
   2ea1e:	bb68      	cbnz	r0, 2ea7c <lfs_dir_compact+0x19c>
        if (end - begin < 0xff &&
   2ea20:	2efe      	cmp	r6, #254	; 0xfe
   2ea22:	dc12      	bgt.n	2ea4a <lfs_dir_compact+0x16a>
                size <= lfs_min(lfs->cfg->block_size - 36,
   2ea24:	6ea3      	ldr	r3, [r4, #104]	; 0x68
                        lfs->cfg->prog_size))) {
   2ea26:	e9d3 0206 	ldrd	r0, r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   2ea2a:	1e43      	subs	r3, r0, #1
   2ea2c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    return a - (a % alignment);
   2ea30:	fbb3 f1f0 	udiv	r1, r3, r0
   2ea34:	fb00 3111 	mls	r1, r0, r1, r3
                size <= lfs_min(lfs->cfg->block_size - 36,
   2ea38:	3a24      	subs	r2, #36	; 0x24
   2ea3a:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
   2ea3c:	4293      	cmp	r3, r2
   2ea3e:	bf28      	it	cs
   2ea40:	4613      	movcs	r3, r2
        if (end - begin < 0xff &&
   2ea42:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2ea44:	429a      	cmp	r2, r3
   2ea46:	f67f af60 	bls.w	2e90a <lfs_dir_compact+0x2a>
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
   2ea4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ea4c:	eb07 0666 	add.w	r6, r7, r6, asr #1
   2ea50:	b2b6      	uxth	r6, r6
   2ea52:	9300      	str	r3, [sp, #0]
   2ea54:	4629      	mov	r1, r5
   2ea56:	4653      	mov	r3, sl
   2ea58:	4620      	mov	r0, r4
   2ea5a:	e9cd 6901 	strd	r6, r9, [sp, #4]
   2ea5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2ea60:	f00d f9fc 	bl	3be5c <lfs_dir_split>
        if (err) {
   2ea64:	4683      	mov	fp, r0
   2ea66:	b168      	cbz	r0, 2ea84 <lfs_dir_compact+0x1a4>
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
   2ea68:	f110 0f1c 	cmn.w	r0, #28
   2ea6c:	d106      	bne.n	2ea7c <lfs_dir_compact+0x19c>
   2ea6e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2ea70:	9914      	ldr	r1, [sp, #80]	; 0x50
   2ea72:	69db      	ldr	r3, [r3, #28]
   2ea74:	3b24      	subs	r3, #36	; 0x24
   2ea76:	428b      	cmp	r3, r1
   2ea78:	f4bf af47 	bcs.w	2e90a <lfs_dir_compact+0x2a>
}
   2ea7c:	4658      	mov	r0, fp
   2ea7e:	b01d      	add	sp, #116	; 0x74
   2ea80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        end = begin + split;
   2ea84:	46b1      	mov	r9, r6
   2ea86:	e73c      	b.n	2e902 <lfs_dir_compact+0x22>
                    end = begin;
   2ea88:	46b9      	mov	r9, r7
   2ea8a:	e774      	b.n	2e976 <lfs_dir_compact+0x96>
        relocated = true;
   2ea8c:	4646      	mov	r6, r8
   2ea8e:	e773      	b.n	2e978 <lfs_dir_compact+0x98>
            err = lfs_dir_commitprog(lfs, &commit,
   2ea90:	f10d 0850 	add.w	r8, sp, #80	; 0x50
   2ea94:	f105 0208 	add.w	r2, r5, #8
   2ea98:	2304      	movs	r3, #4
   2ea9a:	4641      	mov	r1, r8
   2ea9c:	4620      	mov	r0, r4
   2ea9e:	f00d f90c 	bl	3bcba <lfs_dir_commitprog>
            if (err) {
   2eaa2:	4602      	mov	r2, r0
   2eaa4:	2800      	cmp	r0, #0
   2eaa6:	f47f af7a 	bne.w	2e99e <lfs_dir_compact+0xbe>
            err = lfs_dir_traverse(lfs,
   2eaaa:	ab0e      	add	r3, sp, #56	; 0x38
   2eaac:	9308      	str	r3, [sp, #32]
   2eaae:	4b7c      	ldr	r3, [pc, #496]	; (2eca0 <lfs_dir_compact+0x3c0>)
   2eab0:	e9cd 0703 	strd	r0, r7, [sp, #12]
   2eab4:	9307      	str	r3, [sp, #28]
   2eab6:	427b      	negs	r3, r7
   2eab8:	b21b      	sxth	r3, r3
   2eaba:	e9cd 9305 	strd	r9, r3, [sp, #20]
   2eabe:	4b77      	ldr	r3, [pc, #476]	; (2ec9c <lfs_dir_compact+0x3bc>)
   2eac0:	4620      	mov	r0, r4
   2eac2:	e9cd a301 	strd	sl, r3, [sp, #4]
   2eac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2eac8:	9926      	ldr	r1, [sp, #152]	; 0x98
   2eaca:	9300      	str	r3, [sp, #0]
   2eacc:	465b      	mov	r3, fp
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   2eace:	e9cd 480e 	strd	r4, r8, [sp, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
   2ead2:	f7fe fa1f 	bl	2cf14 <lfs_dir_traverse>
            if (err) {
   2ead6:	4602      	mov	r2, r0
   2ead8:	2800      	cmp	r0, #0
   2eada:	f47f af60 	bne.w	2e99e <lfs_dir_compact+0xbe>
            if (!lfs_pair_isnull(dir->tail)) {
   2eade:	f105 0118 	add.w	r1, r5, #24
   2eae2:	4608      	mov	r0, r1
   2eae4:	f00c ff13 	bl	3b90e <lfs_pair_isnull>
   2eae8:	b970      	cbnz	r0, 2eb08 <lfs_dir_compact+0x228>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
   2eaea:	7dea      	ldrb	r2, [r5, #23]
                err = lfs_dir_commitattr(lfs, &commit,
   2eaec:	460b      	mov	r3, r1
   2eaee:	496d      	ldr	r1, [pc, #436]	; (2eca4 <lfs_dir_compact+0x3c4>)
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
   2eaf0:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
   2eaf4:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
   2eaf8:	4620      	mov	r0, r4
   2eafa:	4641      	mov	r1, r8
   2eafc:	f00d f8fc 	bl	3bcf8 <lfs_dir_commitattr>
                if (err) {
   2eb00:	4602      	mov	r2, r0
   2eb02:	2800      	cmp	r0, #0
   2eb04:	f47f af4b 	bne.w	2e99e <lfs_dir_compact+0xbe>
            lfs_gstate_t delta = {0};
   2eb08:	2300      	movs	r3, #0
   2eb0a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
   2eb0e:	9312      	str	r3, [sp, #72]	; 0x48
            if (!relocated) {
   2eb10:	b94e      	cbnz	r6, 2eb26 <lfs_dir_compact+0x246>
                lfs_gstate_xor(&delta, &lfs->gdisk);
   2eb12:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   2eb16:	a810      	add	r0, sp, #64	; 0x40
   2eb18:	f00c ff1e 	bl	3b958 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
   2eb1c:	f104 0130 	add.w	r1, r4, #48	; 0x30
   2eb20:	a810      	add	r0, sp, #64	; 0x40
   2eb22:	f00c ff19 	bl	3b958 <lfs_gstate_xor>
            lfs_gstate_xor(&delta, &lfs->gdelta);
   2eb26:	f104 0b48 	add.w	fp, r4, #72	; 0x48
   2eb2a:	4659      	mov	r1, fp
   2eb2c:	a810      	add	r0, sp, #64	; 0x40
   2eb2e:	f00c ff13 	bl	3b958 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2eb32:	9b10      	ldr	r3, [sp, #64]	; 0x40
            err = lfs_dir_getgstate(lfs, dir, &delta);
   2eb34:	aa10      	add	r2, sp, #64	; 0x40
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2eb36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   2eb3a:	f023 0303 	bic.w	r3, r3, #3
            err = lfs_dir_getgstate(lfs, dir, &delta);
   2eb3e:	4629      	mov	r1, r5
   2eb40:	4620      	mov	r0, r4
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2eb42:	9310      	str	r3, [sp, #64]	; 0x40
            err = lfs_dir_getgstate(lfs, dir, &delta);
   2eb44:	f7fe fb48 	bl	2d1d8 <lfs_dir_getgstate>
            if (err) {
   2eb48:	4602      	mov	r2, r0
   2eb4a:	2800      	cmp	r0, #0
   2eb4c:	f040 8108 	bne.w	2ed60 <lfs_dir_compact+0x480>
        if (((uint32_t*)a)[i] != 0) {
   2eb50:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
   2eb54:	4313      	orrs	r3, r2
   2eb56:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2eb58:	4313      	orrs	r3, r2
   2eb5a:	d009      	beq.n	2eb70 <lfs_dir_compact+0x290>
                err = lfs_dir_commitattr(lfs, &commit,
   2eb5c:	4a52      	ldr	r2, [pc, #328]	; (2eca8 <lfs_dir_compact+0x3c8>)
   2eb5e:	4641      	mov	r1, r8
   2eb60:	4620      	mov	r0, r4
   2eb62:	ab10      	add	r3, sp, #64	; 0x40
   2eb64:	f00d f8c8 	bl	3bcf8 <lfs_dir_commitattr>
                if (err) {
   2eb68:	4602      	mov	r2, r0
   2eb6a:	2800      	cmp	r0, #0
   2eb6c:	f47f af17 	bne.w	2e99e <lfs_dir_compact+0xbe>
            err = lfs_dir_commitcrc(lfs, &commit);
   2eb70:	4641      	mov	r1, r8
   2eb72:	4620      	mov	r0, r4
   2eb74:	f7fe feda 	bl	2d92c <lfs_dir_commitcrc>
            if (err) {
   2eb78:	4602      	mov	r2, r0
   2eb7a:	2800      	cmp	r0, #0
   2eb7c:	f47f af0f 	bne.w	2e99e <lfs_dir_compact+0xbe>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
   2eb80:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2eb82:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2eb84:	6992      	ldr	r2, [r2, #24]
   2eb86:	fbb3 f1f2 	udiv	r1, r3, r2
   2eb8a:	fb02 3311 	mls	r3, r2, r1, r3
   2eb8e:	b15b      	cbz	r3, 2eba8 <lfs_dir_compact+0x2c8>
   2eb90:	4946      	ldr	r1, [pc, #280]	; (2ecac <lfs_dir_compact+0x3cc>)
   2eb92:	4847      	ldr	r0, [pc, #284]	; (2ecb0 <lfs_dir_compact+0x3d0>)
   2eb94:	f240 6383 	movw	r3, #1667	; 0x683
   2eb98:	4a3d      	ldr	r2, [pc, #244]	; (2ec90 <lfs_dir_compact+0x3b0>)
   2eb9a:	f00a fb0e 	bl	391ba <printk>
   2eb9e:	f240 6183 	movw	r1, #1667	; 0x683
   2eba2:	483b      	ldr	r0, [pc, #236]	; (2ec90 <lfs_dir_compact+0x3b0>)
   2eba4:	f00a fd60 	bl	39668 <assert_post_action>
    pair[0] = pair[1];
   2eba8:	e9d5 3200 	ldrd	r3, r2, [r5]
    pair[1] = t;
   2ebac:	e9c5 2300 	strd	r2, r3, [r5]
            dir->off = commit.off;
   2ebb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
            dir->count = end - begin;
   2ebb2:	eba9 0707 	sub.w	r7, r9, r7
            dir->off = commit.off;
   2ebb6:	60eb      	str	r3, [r5, #12]
            dir->etag = commit.ptag;
   2ebb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
            dir->count = end - begin;
   2ebba:	82af      	strh	r7, [r5, #20]
            dir->etag = commit.ptag;
   2ebbc:	612b      	str	r3, [r5, #16]
            lfs->gdelta = (lfs_gstate_t){0};
   2ebbe:	2300      	movs	r3, #0
   2ebc0:	64a3      	str	r3, [r4, #72]	; 0x48
   2ebc2:	e9cb 3301 	strd	r3, r3, [fp, #4]
            if (!relocated) {
   2ebc6:	2e00      	cmp	r6, #0
   2ebc8:	f000 80c2 	beq.w	2ed50 <lfs_dir_compact+0x470>
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
   2ebcc:	f104 0120 	add.w	r1, r4, #32
   2ebd0:	a80c      	add	r0, sp, #48	; 0x30
   2ebd2:	f00c fea6 	bl	3b922 <lfs_pair_cmp>
   2ebd6:	b918      	cbnz	r0, 2ebe0 <lfs_dir_compact+0x300>
        lfs->root[0] = newpair[0];
   2ebd8:	682b      	ldr	r3, [r5, #0]
   2ebda:	6223      	str	r3, [r4, #32]
        lfs->root[1] = newpair[1];
   2ebdc:	686b      	ldr	r3, [r5, #4]
   2ebde:	6263      	str	r3, [r4, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2ebe0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2ebe2:	b9d6      	cbnz	r6, 2ec1a <lfs_dir_compact+0x33a>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
   2ebe4:	4642      	mov	r2, r8
   2ebe6:	4620      	mov	r0, r4
   2ebe8:	a90c      	add	r1, sp, #48	; 0x30
   2ebea:	f7fe f955 	bl	2ce98 <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
   2ebee:	f1b0 0b00 	subs.w	fp, r0, #0
   2ebf2:	da2b      	bge.n	2ec4c <lfs_dir_compact+0x36c>
   2ebf4:	f11b 0f02 	cmn.w	fp, #2
   2ebf8:	f47f af40 	bne.w	2ea7c <lfs_dir_compact+0x19c>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
   2ebfc:	4642      	mov	r2, r8
   2ebfe:	4620      	mov	r0, r4
   2ec00:	a90c      	add	r1, sp, #48	; 0x30
   2ec02:	f00c ff2f 	bl	3ba64 <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
   2ec06:	4683      	mov	fp, r0
   2ec08:	2800      	cmp	r0, #0
   2ec0a:	d072      	beq.n	2ecf2 <lfs_dir_compact+0x412>
   2ec0c:	f110 0f02 	cmn.w	r0, #2
   2ec10:	f47f af34 	bne.w	2ea7c <lfs_dir_compact+0x19c>
    return 0;
   2ec14:	f04f 0b00 	mov.w	fp, #0
   2ec18:	e730      	b.n	2ea7c <lfs_dir_compact+0x19c>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
   2ec1a:	f106 0108 	add.w	r1, r6, #8
   2ec1e:	a80c      	add	r0, sp, #48	; 0x30
   2ec20:	f00c fe7f 	bl	3b922 <lfs_pair_cmp>
   2ec24:	b918      	cbnz	r0, 2ec2e <lfs_dir_compact+0x34e>
            d->m.pair[0] = newpair[0];
   2ec26:	682b      	ldr	r3, [r5, #0]
   2ec28:	60b3      	str	r3, [r6, #8]
            d->m.pair[1] = newpair[1];
   2ec2a:	686b      	ldr	r3, [r5, #4]
   2ec2c:	60f3      	str	r3, [r6, #12]
        if (d->type == LFS_TYPE_DIR &&
   2ec2e:	79b3      	ldrb	r3, [r6, #6]
   2ec30:	2b02      	cmp	r3, #2
   2ec32:	d109      	bne.n	2ec48 <lfs_dir_compact+0x368>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
   2ec34:	f106 012c 	add.w	r1, r6, #44	; 0x2c
   2ec38:	a80c      	add	r0, sp, #48	; 0x30
   2ec3a:	f00c fe72 	bl	3b922 <lfs_pair_cmp>
        if (d->type == LFS_TYPE_DIR &&
   2ec3e:	b918      	cbnz	r0, 2ec48 <lfs_dir_compact+0x368>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
   2ec40:	682b      	ldr	r3, [r5, #0]
   2ec42:	62f3      	str	r3, [r6, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
   2ec44:	686b      	ldr	r3, [r5, #4]
   2ec46:	6333      	str	r3, [r6, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2ec48:	6836      	ldr	r6, [r6, #0]
   2ec4a:	e7ca      	b.n	2ebe2 <lfs_dir_compact+0x302>
        lfs_fs_preporphans(lfs, +1);
   2ec4c:	2101      	movs	r1, #1
   2ec4e:	4620      	mov	r0, r4
   2ec50:	f7fd fdde 	bl	2c810 <lfs_fs_preporphans>
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
   2ec54:	4641      	mov	r1, r8
   2ec56:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ec5a:	f00c fe8b 	bl	3b974 <lfs_gstate_hasmovehere>
   2ec5e:	b368      	cbz	r0, 2ecbc <lfs_dir_compact+0x3dc>
            moveid = lfs_tag_id(lfs->gstate.tag);
   2ec60:	6b20      	ldr	r0, [r4, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2ec62:	4b14      	ldr	r3, [pc, #80]	; (2ecb4 <lfs_dir_compact+0x3d4>)
    return (tag & 0x000ffc00) >> 10;
   2ec64:	f3c0 2189 	ubfx	r1, r0, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2ec68:	4003      	ands	r3, r0
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   2ec6a:	e9c4 360c 	strd	r3, r6, [r4, #48]	; 0x30
            if (moveid < lfs_tag_id(tag)) {
   2ec6e:	f3cb 2389 	ubfx	r3, fp, #10, #10
   2ec72:	4299      	cmp	r1, r3
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   2ec74:	63a6      	str	r6, [r4, #56]	; 0x38
            if (moveid < lfs_tag_id(tag)) {
   2ec76:	d236      	bcs.n	2ece6 <lfs_dir_compact+0x406>
                tag -= LFS_MKTAG(0, 1, 0);
   2ec78:	f5ab 6b80 	sub.w	fp, fp, #1024	; 0x400
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   2ec7c:	9611      	str	r6, [sp, #68]	; 0x44
   2ec7e:	4b0e      	ldr	r3, [pc, #56]	; (2ecb8 <lfs_dir_compact+0x3d8>)
   2ec80:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
   2ec84:	e01c      	b.n	2ecc0 <lfs_dir_compact+0x3e0>
   2ec86:	bf00      	nop
   2ec88:	0003e468 	.word	0x0003e468
   2ec8c:	0003e4f0 	.word	0x0003e4f0
   2ec90:	00042209 	.word	0x00042209
   2ec94:	0004267f 	.word	0x0004267f
   2ec98:	0003b9c5 	.word	0x0003b9c5
   2ec9c:	400ffc00 	.word	0x400ffc00
   2eca0:	0003bda3 	.word	0x0003bda3
   2eca4:	000ffc08 	.word	0x000ffc08
   2eca8:	7ffffc0c 	.word	0x7ffffc0c
   2ecac:	00042659 	.word	0x00042659
   2ecb0:	0003f0e1 	.word	0x0003f0e1
   2ecb4:	800003ff 	.word	0x800003ff
   2ecb8:	4ff00000 	.word	0x4ff00000
   2ecbc:	9611      	str	r6, [sp, #68]	; 0x44
   2ecbe:	2300      	movs	r3, #0
   2ecc0:	9310      	str	r3, [sp, #64]	; 0x40
   2ecc2:	4641      	mov	r1, r8
   2ecc4:	2302      	movs	r3, #2
   2ecc6:	4620      	mov	r0, r4
   2ecc8:	aa10      	add	r2, sp, #64	; 0x40
   2ecca:	e9cd b512 	strd	fp, r5, [sp, #72]	; 0x48
   2ecce:	f000 f85f 	bl	2ed90 <lfs_dir_commit>
        if (err) {
   2ecd2:	4683      	mov	fp, r0
   2ecd4:	2800      	cmp	r0, #0
   2ecd6:	f47f aed1 	bne.w	2ea7c <lfs_dir_compact+0x19c>
        lfs_fs_preporphans(lfs, -1);
   2ecda:	f04f 31ff 	mov.w	r1, #4294967295
   2ecde:	4620      	mov	r0, r4
   2ece0:	f7fd fd96 	bl	2c810 <lfs_fs_preporphans>
   2ece4:	e78a      	b.n	2ebfc <lfs_dir_compact+0x31c>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   2ece6:	f240 33ff 	movw	r3, #1023	; 0x3ff
   2ecea:	4299      	cmp	r1, r3
   2ecec:	9611      	str	r6, [sp, #68]	; 0x44
   2ecee:	d1c6      	bne.n	2ec7e <lfs_dir_compact+0x39e>
   2ecf0:	e7e5      	b.n	2ecbe <lfs_dir_compact+0x3de>
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
   2ecf2:	4641      	mov	r1, r8
   2ecf4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ecf8:	f00c fe3c 	bl	3b974 <lfs_gstate_hasmovehere>
   2ecfc:	b160      	cbz	r0, 2ed18 <lfs_dir_compact+0x438>
            moveid = lfs_tag_id(lfs->gstate.tag);
   2ecfe:	6b20      	ldr	r0, [r4, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2ed00:	4b20      	ldr	r3, [pc, #128]	; (2ed84 <lfs_dir_compact+0x4a4>)
    return (tag & 0x000ffc00) >> 10;
   2ed02:	f3c0 2189 	ubfx	r1, r0, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2ed06:	4003      	ands	r3, r0
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   2ed08:	e9c4 3b0c 	strd	r3, fp, [r4, #48]	; 0x30
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   2ed0c:	f240 33ff 	movw	r3, #1023	; 0x3ff
   2ed10:	4299      	cmp	r1, r3
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   2ed12:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   2ed16:	d117      	bne.n	2ed48 <lfs_dir_compact+0x468>
   2ed18:	2300      	movs	r3, #0
   2ed1a:	2200      	movs	r2, #0
   2ed1c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   2ed20:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
   2ed24:	4b18      	ldr	r3, [pc, #96]	; (2ed88 <lfs_dir_compact+0x4a8>)
   2ed26:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
   2ed2a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   2ed2e:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
   2ed32:	4641      	mov	r1, r8
   2ed34:	2302      	movs	r3, #2
   2ed36:	4620      	mov	r0, r4
   2ed38:	aa10      	add	r2, sp, #64	; 0x40
   2ed3a:	f000 f829 	bl	2ed90 <lfs_dir_commit>
        if (err) {
   2ed3e:	4683      	mov	fp, r0
   2ed40:	2800      	cmp	r0, #0
   2ed42:	f43f af67 	beq.w	2ec14 <lfs_dir_compact+0x334>
   2ed46:	e699      	b.n	2ea7c <lfs_dir_compact+0x19c>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
   2ed48:	4b10      	ldr	r3, [pc, #64]	; (2ed8c <lfs_dir_compact+0x4ac>)
   2ed4a:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
   2ed4e:	e7e4      	b.n	2ed1a <lfs_dir_compact+0x43a>
                lfs->gdisk = lfs->gstate;
   2ed50:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   2ed54:	3430      	adds	r4, #48	; 0x30
   2ed56:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   2ed5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (relocated) {
   2ed5e:	e759      	b.n	2ec14 <lfs_dir_compact+0x334>
                return err;
   2ed60:	4693      	mov	fp, r2
   2ed62:	e68b      	b.n	2ea7c <lfs_dir_compact+0x19c>
        int err = lfs_alloc(lfs, &dir->pair[1]);
   2ed64:	4620      	mov	r0, r4
   2ed66:	1d29      	adds	r1, r5, #4
   2ed68:	f7ff f938 	bl	2dfdc <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
   2ed6c:	4683      	mov	fp, r0
   2ed6e:	2800      	cmp	r0, #0
   2ed70:	f43f ae8c 	beq.w	2ea8c <lfs_dir_compact+0x1ac>
   2ed74:	f110 0f1c 	cmn.w	r0, #28
   2ed78:	f47f ae80 	bne.w	2ea7c <lfs_dir_compact+0x19c>
   2ed7c:	2e00      	cmp	r6, #0
   2ed7e:	f43f ae32 	beq.w	2e9e6 <lfs_dir_compact+0x106>
   2ed82:	e5f9      	b.n	2e978 <lfs_dir_compact+0x98>
   2ed84:	800003ff 	.word	0x800003ff
   2ed88:	000ffc08 	.word	0x000ffc08
   2ed8c:	4ff00000 	.word	0x4ff00000

0002ed90 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
   2ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed94:	4605      	mov	r5, r0
   2ed96:	460c      	mov	r4, r1
   2ed98:	4691      	mov	r9, r2
   2ed9a:	469a      	mov	sl, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   2ed9c:	6a86      	ldr	r6, [r0, #40]	; 0x28
        const struct lfs_mattr *attrs, int attrcount) {
   2ed9e:	b0a1      	sub	sp, #132	; 0x84
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   2eda0:	2e00      	cmp	r6, #0
   2eda2:	d169      	bne.n	2ee78 <lfs_dir_commit+0xe8>
    lfs_mdir_t olddir = *dir;
   2eda4:	46a4      	mov	ip, r4
   2eda6:	af10      	add	r7, sp, #64	; 0x40
   2eda8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2edac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2edae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   2edb2:	f240 4b01 	movw	fp, #1025	; 0x401
    lfs_mdir_t olddir = *dir;
   2edb6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    bool hasdelete = false;
   2edba:	4631      	mov	r1, r6
   2edbc:	464f      	mov	r7, r9
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   2edbe:	f240 46ff 	movw	r6, #1279	; 0x4ff
   2edc2:	eb09 08ca 	add.w	r8, r9, sl, lsl #3
    for (int i = 0; i < attrcount; i++) {
   2edc6:	4547      	cmp	r7, r8
   2edc8:	f040 8085 	bne.w	2eed6 <lfs_dir_commit+0x146>
    if (hasdelete && dir->count == 0) {
   2edcc:	b171      	cbz	r1, 2edec <lfs_dir_commit+0x5c>
   2edce:	8aa3      	ldrh	r3, [r4, #20]
   2edd0:	b963      	cbnz	r3, 2edec <lfs_dir_commit+0x5c>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
   2edd2:	4621      	mov	r1, r4
   2edd4:	4628      	mov	r0, r5
   2edd6:	aa18      	add	r2, sp, #96	; 0x60
   2edd8:	f00c fe44 	bl	3ba64 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
   2eddc:	4684      	mov	ip, r0
   2edde:	2800      	cmp	r0, #0
   2ede0:	f000 80a7 	beq.w	2ef32 <lfs_dir_commit+0x1a2>
   2ede4:	f110 0f02 	cmn.w	r0, #2
   2ede8:	f040 80b1 	bne.w	2ef4e <lfs_dir_commit+0x1be>
    if (dir->erased || dir->count >= 0xff) {
   2edec:	7da3      	ldrb	r3, [r4, #22]
   2edee:	b913      	cbnz	r3, 2edf6 <lfs_dir_commit+0x66>
   2edf0:	8aa3      	ldrh	r3, [r4, #20]
   2edf2:	2bfe      	cmp	r3, #254	; 0xfe
   2edf4:	d92d      	bls.n	2ee52 <lfs_dir_commit+0xc2>
        struct lfs_commit commit = {
   2edf6:	f04f 31ff 	mov.w	r1, #4294967295
            .off = dir->off,
   2edfa:	68e2      	ldr	r2, [r4, #12]
        struct lfs_commit commit = {
   2edfc:	6823      	ldr	r3, [r4, #0]
   2edfe:	e9cd 121b 	strd	r1, r2, [sp, #108]	; 0x6c
            .end = lfs->cfg->block_size - 8,
   2ee02:	6ea9      	ldr	r1, [r5, #104]	; 0x68
        struct lfs_commit commit = {
   2ee04:	9318      	str	r3, [sp, #96]	; 0x60
            .end = lfs->cfg->block_size - 8,
   2ee06:	69c9      	ldr	r1, [r1, #28]
            .ptag = dir->etag,
   2ee08:	6923      	ldr	r3, [r4, #16]
            .end = lfs->cfg->block_size - 8,
   2ee0a:	3908      	subs	r1, #8
        struct lfs_commit commit = {
   2ee0c:	911d      	str	r1, [sp, #116]	; 0x74
        int err = lfs_dir_traverse(lfs,
   2ee0e:	a90b      	add	r1, sp, #44	; 0x2c
   2ee10:	9108      	str	r1, [sp, #32]
   2ee12:	49a7      	ldr	r1, [pc, #668]	; (2f0b0 <lfs_dir_commit+0x320>)
   2ee14:	4628      	mov	r0, r5
   2ee16:	9107      	str	r1, [sp, #28]
   2ee18:	2100      	movs	r1, #0
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   2ee1a:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
        int err = lfs_dir_traverse(lfs,
   2ee1e:	e9cd 1105 	strd	r1, r1, [sp, #20]
   2ee22:	e9cd 1103 	strd	r1, r1, [sp, #12]
   2ee26:	e9cd a101 	strd	sl, r1, [sp, #4]
   2ee2a:	f8cd 9000 	str.w	r9, [sp]
   2ee2e:	4621      	mov	r1, r4
        struct lfs_commit commit = {
   2ee30:	9219      	str	r2, [sp, #100]	; 0x64
   2ee32:	931a      	str	r3, [sp, #104]	; 0x68
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   2ee34:	950b      	str	r5, [sp, #44]	; 0x2c
   2ee36:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
        int err = lfs_dir_traverse(lfs,
   2ee3a:	f7fe f86b 	bl	2cf14 <lfs_dir_traverse>
        if (err) {
   2ee3e:	4684      	mov	ip, r0
   2ee40:	2800      	cmp	r0, #0
   2ee42:	f000 808c 	beq.w	2ef5e <lfs_dir_commit+0x1ce>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
   2ee46:	f11c 0f1c 	cmn.w	ip, #28
   2ee4a:	d002      	beq.n	2ee52 <lfs_dir_commit+0xc2>
   2ee4c:	f11c 0f54 	cmn.w	ip, #84	; 0x54
   2ee50:	d17d      	bne.n	2ef4e <lfs_dir_commit+0x1be>
    rcache->block = LFS_BLOCK_NULL;
   2ee52:	f04f 33ff 	mov.w	r3, #4294967295
   2ee56:	612b      	str	r3, [r5, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
   2ee58:	8aa3      	ldrh	r3, [r4, #20]
   2ee5a:	464a      	mov	r2, r9
   2ee5c:	9302      	str	r3, [sp, #8]
   2ee5e:	2300      	movs	r3, #0
   2ee60:	4621      	mov	r1, r4
   2ee62:	e9cd 4300 	strd	r4, r3, [sp]
   2ee66:	4628      	mov	r0, r5
   2ee68:	4653      	mov	r3, sl
   2ee6a:	f7ff fd39 	bl	2e8e0 <lfs_dir_compact>
        if (err) {
   2ee6e:	4684      	mov	ip, r0
   2ee70:	2800      	cmp	r0, #0
   2ee72:	f000 80ce 	beq.w	2f012 <lfs_dir_commit+0x282>
   2ee76:	e06a      	b.n	2ef4e <lfs_dir_commit+0x1be>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   2ee78:	f106 0008 	add.w	r0, r6, #8
   2ee7c:	42a0      	cmp	r0, r4
   2ee7e:	d101      	bne.n	2ee84 <lfs_dir_commit+0xf4>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   2ee80:	6836      	ldr	r6, [r6, #0]
   2ee82:	e78d      	b.n	2eda0 <lfs_dir_commit+0x10>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   2ee84:	4621      	mov	r1, r4
   2ee86:	f00c fd4c 	bl	3b922 <lfs_pair_cmp>
   2ee8a:	2800      	cmp	r0, #0
   2ee8c:	d1f8      	bne.n	2ee80 <lfs_dir_commit+0xf0>
   2ee8e:	79b3      	ldrb	r3, [r6, #6]
   2ee90:	2b01      	cmp	r3, #1
   2ee92:	d1f5      	bne.n	2ee80 <lfs_dir_commit+0xf0>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   2ee94:	6b33      	ldr	r3, [r6, #48]	; 0x30
   2ee96:	02db      	lsls	r3, r3, #11
   2ee98:	d5f2      	bpl.n	2ee80 <lfs_dir_commit+0xf0>
                f->ctz.size > lfs->cfg->cache_size) {
   2ee9a:	6eab      	ldr	r3, [r5, #104]	; 0x68
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   2ee9c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
   2ee9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2eea0:	4291      	cmp	r1, r2
   2eea2:	d9ed      	bls.n	2ee80 <lfs_dir_commit+0xf0>
    file->off = file->pos;
   2eea4:	6b72      	ldr	r2, [r6, #52]	; 0x34
    lfs->free.ack = lfs->cfg->block_count;
   2eea6:	6a1b      	ldr	r3, [r3, #32]
    file->off = file->pos;
   2eea8:	63f2      	str	r2, [r6, #60]	; 0x3c
    int err = lfs_file_relocate(lfs, file);
   2eeaa:	4631      	mov	r1, r6
   2eeac:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   2eeae:	662b      	str	r3, [r5, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
   2eeb0:	f7ff f914 	bl	2e0dc <lfs_file_relocate>
    if (err) {
   2eeb4:	4684      	mov	ip, r0
   2eeb6:	b950      	cbnz	r0, 2eece <lfs_dir_commit+0x13e>
    file->flags &= ~LFS_F_INLINE;
   2eeb8:	6b33      	ldr	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
   2eeba:	4631      	mov	r1, r6
    file->flags &= ~LFS_F_INLINE;
   2eebc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
            err = lfs_file_flush(lfs, f);
   2eec0:	4628      	mov	r0, r5
    file->flags &= ~LFS_F_INLINE;
   2eec2:	6333      	str	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
   2eec4:	f7ff fb2a 	bl	2e51c <lfs_file_flush>
            if (err) {
   2eec8:	4684      	mov	ip, r0
   2eeca:	2800      	cmp	r0, #0
   2eecc:	d0d8      	beq.n	2ee80 <lfs_dir_commit+0xf0>
}
   2eece:	4660      	mov	r0, ip
   2eed0:	b021      	add	sp, #132	; 0x84
   2eed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (tag & 0x7ff00000) >> 20;
   2eed6:	683b      	ldr	r3, [r7, #0]
   2eed8:	0d1a      	lsrs	r2, r3, #20
   2eeda:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   2eede:	455b      	cmp	r3, fp
   2eee0:	d104      	bne.n	2eeec <lfs_dir_commit+0x15c>
            dir->count += 1;
   2eee2:	8aa3      	ldrh	r3, [r4, #20]
   2eee4:	3301      	adds	r3, #1
   2eee6:	82a3      	strh	r3, [r4, #20]
    for (int i = 0; i < attrcount; i++) {
   2eee8:	3708      	adds	r7, #8
   2eeea:	e76c      	b.n	2edc6 <lfs_dir_commit+0x36>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   2eeec:	42b3      	cmp	r3, r6
   2eeee:	d112      	bne.n	2ef16 <lfs_dir_commit+0x186>
            LFS_ASSERT(dir->count > 0);
   2eef0:	8aa3      	ldrh	r3, [r4, #20]
   2eef2:	b95b      	cbnz	r3, 2ef0c <lfs_dir_commit+0x17c>
   2eef4:	496f      	ldr	r1, [pc, #444]	; (2f0b4 <lfs_dir_commit+0x324>)
   2eef6:	4870      	ldr	r0, [pc, #448]	; (2f0b8 <lfs_dir_commit+0x328>)
   2eef8:	f240 63d2 	movw	r3, #1746	; 0x6d2
   2eefc:	4a6f      	ldr	r2, [pc, #444]	; (2f0bc <lfs_dir_commit+0x32c>)
   2eefe:	f00a f95c 	bl	391ba <printk>
   2ef02:	f240 61d2 	movw	r1, #1746	; 0x6d2
   2ef06:	486d      	ldr	r0, [pc, #436]	; (2f0bc <lfs_dir_commit+0x32c>)
   2ef08:	f00a fbae 	bl	39668 <assert_post_action>
            dir->count -= 1;
   2ef0c:	8aa3      	ldrh	r3, [r4, #20]
            hasdelete = true;
   2ef0e:	2101      	movs	r1, #1
            dir->count -= 1;
   2ef10:	3b01      	subs	r3, #1
   2ef12:	82a3      	strh	r3, [r4, #20]
            hasdelete = true;
   2ef14:	e7e8      	b.n	2eee8 <lfs_dir_commit+0x158>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
   2ef16:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
   2ef1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   2ef1e:	d1e3      	bne.n	2eee8 <lfs_dir_commit+0x158>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
   2ef20:	687b      	ldr	r3, [r7, #4]
   2ef22:	6818      	ldr	r0, [r3, #0]
   2ef24:	61a0      	str	r0, [r4, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
   2ef26:	685b      	ldr	r3, [r3, #4]
   2ef28:	61e3      	str	r3, [r4, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
   2ef2a:	f002 0301 	and.w	r3, r2, #1
   2ef2e:	75e3      	strb	r3, [r4, #23]
            lfs_pair_fromle32(dir->tail);
   2ef30:	e7da      	b.n	2eee8 <lfs_dir_commit+0x158>
        if (err != LFS_ERR_NOENT && pdir.split) {
   2ef32:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
   2ef36:	2b00      	cmp	r3, #0
   2ef38:	f43f af58 	beq.w	2edec <lfs_dir_commit+0x5c>
            err = lfs_dir_drop(lfs, &pdir, dir);
   2ef3c:	4622      	mov	r2, r4
   2ef3e:	4628      	mov	r0, r5
   2ef40:	a918      	add	r1, sp, #96	; 0x60
   2ef42:	f000 f8e3 	bl	2f10c <lfs_dir_drop>
            if (err) {
   2ef46:	4684      	mov	ip, r0
   2ef48:	2800      	cmp	r0, #0
   2ef4a:	f43f af4f 	beq.w	2edec <lfs_dir_commit+0x5c>
            *dir = olddir;
   2ef4e:	ad10      	add	r5, sp, #64	; 0x40
   2ef50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2ef52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2ef54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2ef58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            return err;
   2ef5c:	e7b7      	b.n	2eece <lfs_dir_commit+0x13e>
        lfs_gstate_xor(&delta, &lfs->gstate);
   2ef5e:	f105 0730 	add.w	r7, r5, #48	; 0x30
   2ef62:	4639      	mov	r1, r7
        lfs_gstate_t delta = {0};
   2ef64:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
   2ef68:	900f      	str	r0, [sp, #60]	; 0x3c
        lfs_gstate_xor(&delta, &lfs->gdisk);
   2ef6a:	f105 063c 	add.w	r6, r5, #60	; 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
   2ef6e:	a80d      	add	r0, sp, #52	; 0x34
   2ef70:	f00c fcf2 	bl	3b958 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
   2ef74:	f105 0848 	add.w	r8, r5, #72	; 0x48
        lfs_gstate_xor(&delta, &lfs->gdisk);
   2ef78:	4631      	mov	r1, r6
   2ef7a:	a80d      	add	r0, sp, #52	; 0x34
   2ef7c:	f00c fcec 	bl	3b958 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
   2ef80:	4641      	mov	r1, r8
   2ef82:	a80d      	add	r0, sp, #52	; 0x34
   2ef84:	f00c fce8 	bl	3b958 <lfs_gstate_xor>
        if (((uint32_t*)a)[i] != 0) {
   2ef88:	e9dd 210e 	ldrd	r2, r1, [sp, #56]	; 0x38
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2ef8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        if (((uint32_t*)a)[i] != 0) {
   2ef8e:	430a      	orrs	r2, r1
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2ef90:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   2ef94:	f023 0303 	bic.w	r3, r3, #3
        if (((uint32_t*)a)[i] != 0) {
   2ef98:	431a      	orrs	r2, r3
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2ef9a:	930d      	str	r3, [sp, #52]	; 0x34
        if (((uint32_t*)a)[i] != 0) {
   2ef9c:	d011      	beq.n	2efc2 <lfs_dir_commit+0x232>
            err = lfs_dir_getgstate(lfs, dir, &delta);
   2ef9e:	4621      	mov	r1, r4
   2efa0:	4628      	mov	r0, r5
   2efa2:	aa0d      	add	r2, sp, #52	; 0x34
   2efa4:	f7fe f918 	bl	2d1d8 <lfs_dir_getgstate>
            if (err) {
   2efa8:	4684      	mov	ip, r0
   2efaa:	2800      	cmp	r0, #0
   2efac:	d1cf      	bne.n	2ef4e <lfs_dir_commit+0x1be>
            err = lfs_dir_commitattr(lfs, &commit,
   2efae:	4659      	mov	r1, fp
   2efb0:	4628      	mov	r0, r5
   2efb2:	4a43      	ldr	r2, [pc, #268]	; (2f0c0 <lfs_dir_commit+0x330>)
   2efb4:	ab0d      	add	r3, sp, #52	; 0x34
   2efb6:	f00c fe9f 	bl	3bcf8 <lfs_dir_commitattr>
            if (err) {
   2efba:	4684      	mov	ip, r0
   2efbc:	2800      	cmp	r0, #0
   2efbe:	f47f af42 	bne.w	2ee46 <lfs_dir_commit+0xb6>
        err = lfs_dir_commitcrc(lfs, &commit);
   2efc2:	4659      	mov	r1, fp
   2efc4:	4628      	mov	r0, r5
   2efc6:	f7fe fcb1 	bl	2d92c <lfs_dir_commitcrc>
        if (err) {
   2efca:	4684      	mov	ip, r0
   2efcc:	2800      	cmp	r0, #0
   2efce:	f47f af3a 	bne.w	2ee46 <lfs_dir_commit+0xb6>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
   2efd2:	6eaa      	ldr	r2, [r5, #104]	; 0x68
   2efd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2efd6:	6992      	ldr	r2, [r2, #24]
   2efd8:	fbb3 f1f2 	udiv	r1, r3, r2
   2efdc:	fb02 3311 	mls	r3, r2, r1, r3
   2efe0:	b15b      	cbz	r3, 2effa <lfs_dir_commit+0x26a>
   2efe2:	4938      	ldr	r1, [pc, #224]	; (2f0c4 <lfs_dir_commit+0x334>)
   2efe4:	4834      	ldr	r0, [pc, #208]	; (2f0b8 <lfs_dir_commit+0x328>)
   2efe6:	f44f 63e6 	mov.w	r3, #1840	; 0x730
   2efea:	4a34      	ldr	r2, [pc, #208]	; (2f0bc <lfs_dir_commit+0x32c>)
   2efec:	f00a f8e5 	bl	391ba <printk>
   2eff0:	f44f 61e6 	mov.w	r1, #1840	; 0x730
   2eff4:	4831      	ldr	r0, [pc, #196]	; (2f0bc <lfs_dir_commit+0x32c>)
   2eff6:	f00a fb37 	bl	39668 <assert_post_action>
        lfs->gdisk = lfs->gstate;
   2effa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
        dir->off = commit.off;
   2effe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2f000:	60e3      	str	r3, [r4, #12]
        dir->etag = commit.ptag;
   2f002:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2f004:	6123      	str	r3, [r4, #16]
        lfs->gdelta = (lfs_gstate_t){0};
   2f006:	2300      	movs	r3, #0
        lfs->gdisk = lfs->gstate;
   2f008:	e886 0007 	stmia.w	r6, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
   2f00c:	64ab      	str	r3, [r5, #72]	; 0x48
   2f00e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2f012:	f8d5 8028 	ldr.w	r8, [r5, #40]	; 0x28
                    d->m.pair[0] = LFS_BLOCK_NULL;
   2f016:	f04f 3bff 	mov.w	fp, #4294967295
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2f01a:	4646      	mov	r6, r8
   2f01c:	b926      	cbnz	r6, 2f028 <lfs_dir_commit+0x298>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2f01e:	f1b8 0f00 	cmp.w	r8, #0
   2f022:	d151      	bne.n	2f0c8 <lfs_dir_commit+0x338>
    return 0;
   2f024:	46c4      	mov	ip, r8
   2f026:	e752      	b.n	2eece <lfs_dir_commit+0x13e>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
   2f028:	f106 0708 	add.w	r7, r6, #8
   2f02c:	42a7      	cmp	r7, r4
   2f02e:	d101      	bne.n	2f034 <lfs_dir_commit+0x2a4>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2f030:	6836      	ldr	r6, [r6, #0]
   2f032:	e7f3      	b.n	2f01c <lfs_dir_commit+0x28c>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
   2f034:	4638      	mov	r0, r7
   2f036:	a910      	add	r1, sp, #64	; 0x40
   2f038:	f00c fc73 	bl	3b922 <lfs_pair_cmp>
   2f03c:	4686      	mov	lr, r0
   2f03e:	2800      	cmp	r0, #0
   2f040:	d1f6      	bne.n	2f030 <lfs_dir_commit+0x2a0>
            d->m = *dir;
   2f042:	46a4      	mov	ip, r4
   2f044:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2f048:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2f04a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   2f04e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
   2f052:	45d6      	cmp	lr, sl
   2f054:	d0ec      	beq.n	2f030 <lfs_dir_commit+0x2a0>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   2f056:	f240 41ff 	movw	r1, #1279	; 0x4ff
   2f05a:	f859 303e 	ldr.w	r3, [r9, lr, lsl #3]
    return (tag & 0x7ff00000) >> 20;
   2f05e:	f3c3 520a 	ubfx	r2, r3, #20, #11
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   2f062:	428a      	cmp	r2, r1
   2f064:	d113      	bne.n	2f08e <lfs_dir_commit+0x2fe>
                        d->id == lfs_tag_id(attrs[i].tag)) {
   2f066:	88b2      	ldrh	r2, [r6, #4]
    return (tag & 0x000ffc00) >> 10;
   2f068:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   2f06c:	429a      	cmp	r2, r3
   2f06e:	d104      	bne.n	2f07a <lfs_dir_commit+0x2ea>
                    d->m.pair[1] = LFS_BLOCK_NULL;
   2f070:	e9c6 bb02 	strd	fp, fp, [r6, #8]
            for (int i = 0; i < attrcount; i++) {
   2f074:	f10e 0e01 	add.w	lr, lr, #1
   2f078:	e7eb      	b.n	2f052 <lfs_dir_commit+0x2c2>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   2f07a:	d9fb      	bls.n	2f074 <lfs_dir_commit+0x2e4>
                    if (d->type == LFS_TYPE_DIR) {
   2f07c:	79b3      	ldrb	r3, [r6, #6]
                    d->id -= 1;
   2f07e:	3a01      	subs	r2, #1
                    if (d->type == LFS_TYPE_DIR) {
   2f080:	2b02      	cmp	r3, #2
                    d->id -= 1;
   2f082:	80b2      	strh	r2, [r6, #4]
                    if (d->type == LFS_TYPE_DIR) {
   2f084:	d1f6      	bne.n	2f074 <lfs_dir_commit+0x2e4>
                        ((lfs_dir_t*)d)->pos -= 1;
   2f086:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2f088:	3b01      	subs	r3, #1
                        ((lfs_dir_t*)d)->pos += 1;
   2f08a:	62b3      	str	r3, [r6, #40]	; 0x28
   2f08c:	e7f2      	b.n	2f074 <lfs_dir_commit+0x2e4>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   2f08e:	f240 4101 	movw	r1, #1025	; 0x401
   2f092:	428a      	cmp	r2, r1
   2f094:	d1ee      	bne.n	2f074 <lfs_dir_commit+0x2e4>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
   2f096:	88b2      	ldrh	r2, [r6, #4]
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   2f098:	f3c3 2389 	ubfx	r3, r3, #10, #10
   2f09c:	429a      	cmp	r2, r3
   2f09e:	d3e9      	bcc.n	2f074 <lfs_dir_commit+0x2e4>
                    if (d->type == LFS_TYPE_DIR) {
   2f0a0:	79b3      	ldrb	r3, [r6, #6]
                    d->id += 1;
   2f0a2:	3201      	adds	r2, #1
                    if (d->type == LFS_TYPE_DIR) {
   2f0a4:	2b02      	cmp	r3, #2
                    d->id += 1;
   2f0a6:	80b2      	strh	r2, [r6, #4]
                    if (d->type == LFS_TYPE_DIR) {
   2f0a8:	d1e4      	bne.n	2f074 <lfs_dir_commit+0x2e4>
                        ((lfs_dir_t*)d)->pos += 1;
   2f0aa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2f0ac:	3301      	adds	r3, #1
   2f0ae:	e7ec      	b.n	2f08a <lfs_dir_commit+0x2fa>
   2f0b0:	0003bda3 	.word	0x0003bda3
   2f0b4:	000426ac 	.word	0x000426ac
   2f0b8:	0003f0e1 	.word	0x0003f0e1
   2f0bc:	00042209 	.word	0x00042209
   2f0c0:	7ffffc0c 	.word	0x7ffffc0c
   2f0c4:	00042659 	.word	0x00042659
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
   2f0c8:	f108 0408 	add.w	r4, r8, #8
   2f0cc:	4620      	mov	r0, r4
   2f0ce:	a910      	add	r1, sp, #64	; 0x40
   2f0d0:	f00c fc27 	bl	3b922 <lfs_pair_cmp>
   2f0d4:	b950      	cbnz	r0, 2f0ec <lfs_dir_commit+0x35c>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   2f0d6:	f108 0620 	add.w	r6, r8, #32
            while (d->id >= d->m.count && d->m.split) {
   2f0da:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   2f0de:	f8b8 101c 	ldrh.w	r1, [r8, #28]
   2f0e2:	428b      	cmp	r3, r1
   2f0e4:	d302      	bcc.n	2f0ec <lfs_dir_commit+0x35c>
   2f0e6:	f898 001f 	ldrb.w	r0, [r8, #31]
   2f0ea:	b910      	cbnz	r0, 2f0f2 <lfs_dir_commit+0x362>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2f0ec:	f8d8 8000 	ldr.w	r8, [r8]
   2f0f0:	e795      	b.n	2f01e <lfs_dir_commit+0x28e>
                d->id -= d->m.count;
   2f0f2:	1a5b      	subs	r3, r3, r1
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   2f0f4:	4632      	mov	r2, r6
   2f0f6:	4621      	mov	r1, r4
   2f0f8:	4628      	mov	r0, r5
                d->id -= d->m.count;
   2f0fa:	f8a8 3004 	strh.w	r3, [r8, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   2f0fe:	f00c fca4 	bl	3ba4a <lfs_dir_fetch>
                if (err) {
   2f102:	4684      	mov	ip, r0
   2f104:	2800      	cmp	r0, #0
   2f106:	d0e8      	beq.n	2f0da <lfs_dir_commit+0x34a>
   2f108:	e6e1      	b.n	2eece <lfs_dir_commit+0x13e>
   2f10a:	bf00      	nop

0002f10c <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   2f10c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f10e:	4614      	mov	r4, r2
   2f110:	460e      	mov	r6, r1
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   2f112:	f100 0248 	add.w	r2, r0, #72	; 0x48
   2f116:	4621      	mov	r1, r4
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   2f118:	4605      	mov	r5, r0
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   2f11a:	f7fe f85d 	bl	2d1d8 <lfs_dir_getgstate>
    if (err) {
   2f11e:	b970      	cbnz	r0, 2f13e <lfs_dir_drop+0x32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   2f120:	7de2      	ldrb	r2, [r4, #23]
   2f122:	4b08      	ldr	r3, [pc, #32]	; (2f144 <lfs_dir_drop+0x38>)
   2f124:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
   2f128:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   2f12c:	9300      	str	r3, [sp, #0]
    lfs_pair_tole32(tail->tail);
   2f12e:	3418      	adds	r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   2f130:	2301      	movs	r3, #1
   2f132:	466a      	mov	r2, sp
   2f134:	4631      	mov	r1, r6
   2f136:	4628      	mov	r0, r5
   2f138:	9401      	str	r4, [sp, #4]
   2f13a:	f7ff fe29 	bl	2ed90 <lfs_dir_commit>
}
   2f13e:	b002      	add	sp, #8
   2f140:	bd70      	pop	{r4, r5, r6, pc}
   2f142:	bf00      	nop
   2f144:	000ffc08 	.word	0x000ffc08

0002f148 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   2f148:	b570      	push	{r4, r5, r6, lr}
    return (tag & 0x70000000) >> 20;
   2f14a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   2f14c:	4604      	mov	r4, r0
    return (tag & 0x70000000) >> 20;
   2f14e:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   2f150:	f413 6fe0 	tst.w	r3, #1792	; 0x700
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   2f154:	b09e      	sub	sp, #120	; 0x78
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   2f156:	d105      	bne.n	2f164 <lfs_fs_forceconsistency+0x1c>
    return tag & 0x000003ff;
   2f158:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f15a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
   2f15e:	b9fb      	cbnz	r3, 2f1a0 <lfs_fs_forceconsistency+0x58>
        return 0;
   2f160:	2000      	movs	r0, #0
    if (err) {
   2f162:	e01b      	b.n	2f19c <lfs_fs_forceconsistency+0x54>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
   2f164:	f100 0240 	add.w	r2, r0, #64	; 0x40
   2f168:	a916      	add	r1, sp, #88	; 0x58
   2f16a:	f00c fc6e 	bl	3ba4a <lfs_dir_fetch>
    if (err) {
   2f16e:	b9a8      	cbnz	r0, 2f19c <lfs_fs_forceconsistency+0x54>
    return (tag & 0x000ffc00) >> 10;
   2f170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2f172:	6b21      	ldr	r1, [r4, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
   2f174:	f3c3 2289 	ubfx	r2, r3, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2f178:	4b36      	ldr	r3, [pc, #216]	; (2f254 <lfs_fs_forceconsistency+0x10c>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   2f17a:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2f17c:	400b      	ands	r3, r1
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   2f17e:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   2f182:	4b35      	ldr	r3, [pc, #212]	; (2f258 <lfs_fs_forceconsistency+0x110>)
   2f184:	900f      	str	r0, [sp, #60]	; 0x3c
   2f186:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   2f18a:	930e      	str	r3, [sp, #56]	; 0x38
   2f18c:	4620      	mov	r0, r4
   2f18e:	2301      	movs	r3, #1
   2f190:	aa0e      	add	r2, sp, #56	; 0x38
   2f192:	a916      	add	r1, sp, #88	; 0x58
   2f194:	f7ff fdfc 	bl	2ed90 <lfs_dir_commit>
    if (err) {
   2f198:	2800      	cmp	r0, #0
   2f19a:	d0dd      	beq.n	2f158 <lfs_fs_forceconsistency+0x10>
}
   2f19c:	b01e      	add	sp, #120	; 0x78
   2f19e:	bd70      	pop	{r4, r5, r6, pc}
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
   2f1a0:	221c      	movs	r2, #28
   2f1a2:	2100      	movs	r1, #0
   2f1a4:	a806      	add	r0, sp, #24
   2f1a6:	f00e fa6e 	bl	3d686 <memset>
   2f1aa:	2301      	movs	r3, #1
   2f1ac:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   2f1b0:	930d      	str	r3, [sp, #52]	; 0x34
    while (!lfs_pair_isnull(pdir.tail)) {
   2f1b2:	a80c      	add	r0, sp, #48	; 0x30
   2f1b4:	f00c fbab 	bl	3b90e <lfs_pair_isnull>
   2f1b8:	b130      	cbz	r0, 2f1c8 <lfs_fs_forceconsistency+0x80>
    return tag & 0x000003ff;
   2f1ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
   2f1bc:	4620      	mov	r0, r4
   2f1be:	4249      	negs	r1, r1
   2f1c0:	b249      	sxtb	r1, r1
   2f1c2:	f7fd fb25 	bl	2c810 <lfs_fs_preporphans>
    return 0;
   2f1c6:	e7cb      	b.n	2f160 <lfs_fs_forceconsistency+0x18>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
   2f1c8:	4620      	mov	r0, r4
   2f1ca:	aa0c      	add	r2, sp, #48	; 0x30
   2f1cc:	a90e      	add	r1, sp, #56	; 0x38
   2f1ce:	f00c fc3c 	bl	3ba4a <lfs_dir_fetch>
        if (err) {
   2f1d2:	2800      	cmp	r0, #0
   2f1d4:	d1e2      	bne.n	2f19c <lfs_fs_forceconsistency+0x54>
        if (!pdir.split) {
   2f1d6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   2f1da:	2b00      	cmp	r3, #0
   2f1dc:	d131      	bne.n	2f242 <lfs_fs_forceconsistency+0xfa>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
   2f1de:	4620      	mov	r0, r4
   2f1e0:	aa16      	add	r2, sp, #88	; 0x58
   2f1e2:	a90c      	add	r1, sp, #48	; 0x30
   2f1e4:	f7fd fe58 	bl	2ce98 <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
   2f1e8:	2800      	cmp	r0, #0
   2f1ea:	da09      	bge.n	2f200 <lfs_fs_forceconsistency+0xb8>
   2f1ec:	1c83      	adds	r3, r0, #2
   2f1ee:	d1d5      	bne.n	2f19c <lfs_fs_forceconsistency+0x54>
                err = lfs_dir_drop(lfs, &pdir, &dir);
   2f1f0:	4620      	mov	r0, r4
   2f1f2:	aa0e      	add	r2, sp, #56	; 0x38
   2f1f4:	a906      	add	r1, sp, #24
   2f1f6:	f7ff ff89 	bl	2f10c <lfs_dir_drop>
                if (err) {
   2f1fa:	2800      	cmp	r0, #0
   2f1fc:	d1ce      	bne.n	2f19c <lfs_fs_forceconsistency+0x54>
   2f1fe:	e7d8      	b.n	2f1b2 <lfs_fs_forceconsistency+0x6a>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
   2f200:	ad02      	add	r5, sp, #8
   2f202:	4603      	mov	r3, r0
   2f204:	4a15      	ldr	r2, [pc, #84]	; (2f25c <lfs_fs_forceconsistency+0x114>)
   2f206:	4620      	mov	r0, r4
   2f208:	9500      	str	r5, [sp, #0]
   2f20a:	a916      	add	r1, sp, #88	; 0x58
   2f20c:	f00c fc53 	bl	3bab6 <lfs_dir_get>
            if (res < 0) {
   2f210:	2800      	cmp	r0, #0
   2f212:	dbc3      	blt.n	2f19c <lfs_fs_forceconsistency+0x54>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   2f214:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
   2f218:	9902      	ldr	r1, [sp, #8]
   2f21a:	4299      	cmp	r1, r3
   2f21c:	d102      	bne.n	2f224 <lfs_fs_forceconsistency+0xdc>
   2f21e:	9803      	ldr	r0, [sp, #12]
   2f220:	4290      	cmp	r0, r2
   2f222:	d00e      	beq.n	2f242 <lfs_fs_forceconsistency+0xfa>
   2f224:	4291      	cmp	r1, r2
   2f226:	d102      	bne.n	2f22e <lfs_fs_forceconsistency+0xe6>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
   2f228:	9a03      	ldr	r2, [sp, #12]
   2f22a:	4293      	cmp	r3, r2
   2f22c:	d009      	beq.n	2f242 <lfs_fs_forceconsistency+0xfa>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
   2f22e:	4b0c      	ldr	r3, [pc, #48]	; (2f260 <lfs_fs_forceconsistency+0x118>)
   2f230:	4620      	mov	r0, r4
   2f232:	e9cd 3504 	strd	r3, r5, [sp, #16]
   2f236:	aa04      	add	r2, sp, #16
   2f238:	2301      	movs	r3, #1
   2f23a:	a906      	add	r1, sp, #24
   2f23c:	f7ff fda8 	bl	2ed90 <lfs_dir_commit>
   2f240:	e7db      	b.n	2f1fa <lfs_fs_forceconsistency+0xb2>
        pdir = dir;
   2f242:	ad06      	add	r5, sp, #24
   2f244:	ae0e      	add	r6, sp, #56	; 0x38
   2f246:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2f248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2f24a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2f24e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   2f252:	e7ae      	b.n	2f1b2 <lfs_fs_forceconsistency+0x6a>
   2f254:	800003ff 	.word	0x800003ff
   2f258:	4ff00000 	.word	0x4ff00000
   2f25c:	7ffffc00 	.word	0x7ffffc00
   2f260:	600ffc08 	.word	0x600ffc08

0002f264 <lfs_mkdir>:
int lfs_mkdir(lfs_t *lfs, const char *path) {
   2f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f268:	b0a9      	sub	sp, #164	; 0xa4
   2f26a:	4605      	mov	r5, r0
   2f26c:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
   2f26e:	f7ff ff6b 	bl	2f148 <lfs_fs_forceconsistency>
    if (err) {
   2f272:	4604      	mov	r4, r0
   2f274:	b988      	cbnz	r0, 2f29a <lfs_mkdir+0x36>
    cwd.next = lfs->mlist;
   2f276:	6aab      	ldr	r3, [r5, #40]	; 0x28
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   2f278:	4628      	mov	r0, r5
    cwd.next = lfs->mlist;
   2f27a:	931e      	str	r3, [sp, #120]	; 0x78
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   2f27c:	aa01      	add	r2, sp, #4
   2f27e:	f10d 030e 	add.w	r3, sp, #14
   2f282:	a920      	add	r1, sp, #128	; 0x80
   2f284:	f7fe f808 	bl	2d298 <lfs_dir_find>
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
   2f288:	1c83      	adds	r3, r0, #2
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   2f28a:	4604      	mov	r4, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
   2f28c:	d109      	bne.n	2f2a2 <lfs_mkdir+0x3e>
   2f28e:	f240 33ff 	movw	r3, #1023	; 0x3ff
   2f292:	f8bd 900e 	ldrh.w	r9, [sp, #14]
   2f296:	4599      	cmp	r9, r3
   2f298:	d108      	bne.n	2f2ac <lfs_mkdir+0x48>
}
   2f29a:	4620      	mov	r0, r4
   2f29c:	b029      	add	sp, #164	; 0xa4
   2f29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (err < 0) ? err : LFS_ERR_EXIST;
   2f2a2:	2800      	cmp	r0, #0
   2f2a4:	bfa8      	it	ge
   2f2a6:	f06f 0410 	mvnge.w	r4, #16
   2f2aa:	e7f6      	b.n	2f29a <lfs_mkdir+0x36>
    lfs_size_t nlen = strlen(path);
   2f2ac:	f8dd a004 	ldr.w	sl, [sp, #4]
   2f2b0:	4650      	mov	r0, sl
   2f2b2:	f7f2 f9dc 	bl	2166e <strlen>
    if (nlen > lfs->name_max) {
   2f2b6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    lfs_size_t nlen = strlen(path);
   2f2b8:	4680      	mov	r8, r0
    if (nlen > lfs->name_max) {
   2f2ba:	4283      	cmp	r3, r0
   2f2bc:	d36d      	bcc.n	2f39a <lfs_mkdir+0x136>
    lfs->free.ack = lfs->cfg->block_count;
   2f2be:	6eab      	ldr	r3, [r5, #104]	; 0x68
    err = lfs_dir_alloc(lfs, &dir);
   2f2c0:	ae06      	add	r6, sp, #24
    lfs->free.ack = lfs->cfg->block_count;
   2f2c2:	6a1b      	ldr	r3, [r3, #32]
    err = lfs_dir_alloc(lfs, &dir);
   2f2c4:	4631      	mov	r1, r6
   2f2c6:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   2f2c8:	662b      	str	r3, [r5, #96]	; 0x60
    err = lfs_dir_alloc(lfs, &dir);
   2f2ca:	f00c fd94 	bl	3bdf6 <lfs_dir_alloc>
    if (err) {
   2f2ce:	4604      	mov	r4, r0
   2f2d0:	2800      	cmp	r0, #0
   2f2d2:	d1e2      	bne.n	2f29a <lfs_mkdir+0x36>
    lfs_mdir_t pred = cwd.m;
   2f2d4:	ac0e      	add	r4, sp, #56	; 0x38
   2f2d6:	af20      	add	r7, sp, #128	; 0x80
   2f2d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2f2da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2f2dc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   2f2e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
   2f2e4:	af14      	add	r7, sp, #80	; 0x50
   2f2e6:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   2f2ea:	2b00      	cmp	r3, #0
   2f2ec:	d14c      	bne.n	2f388 <lfs_mkdir+0x124>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
   2f2ee:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 2f3a0 <lfs_mkdir+0x13c>
   2f2f2:	2301      	movs	r3, #1
   2f2f4:	4631      	mov	r1, r6
   2f2f6:	4628      	mov	r0, r5
   2f2f8:	aa04      	add	r2, sp, #16
   2f2fa:	e9cd b704 	strd	fp, r7, [sp, #16]
   2f2fe:	f7ff fd47 	bl	2ed90 <lfs_dir_commit>
    if (err) {
   2f302:	4604      	mov	r4, r0
   2f304:	2800      	cmp	r0, #0
   2f306:	d1c8      	bne.n	2f29a <lfs_mkdir+0x36>
    if (cwd.m.split) {
   2f308:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
   2f30c:	b1db      	cbz	r3, 2f346 <lfs_mkdir+0xe2>
        lfs_fs_preporphans(lfs, +1);
   2f30e:	2101      	movs	r1, #1
   2f310:	4628      	mov	r0, r5
   2f312:	f7fd fa7d 	bl	2c810 <lfs_fs_preporphans>
        lfs->mlist = &cwd;
   2f316:	ab1e      	add	r3, sp, #120	; 0x78
   2f318:	62ab      	str	r3, [r5, #40]	; 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
   2f31a:	4628      	mov	r0, r5
   2f31c:	2301      	movs	r3, #1
   2f31e:	aa16      	add	r2, sp, #88	; 0x58
   2f320:	a90e      	add	r1, sp, #56	; 0x38
        cwd.type = 0;
   2f322:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
        cwd.id = 0;
   2f326:	f8ad 407c 	strh.w	r4, [sp, #124]	; 0x7c
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
   2f32a:	e9cd b616 	strd	fp, r6, [sp, #88]	; 0x58
   2f32e:	f7ff fd2f 	bl	2ed90 <lfs_dir_commit>
        if (err) {
   2f332:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2f334:	4604      	mov	r4, r0
            lfs->mlist = cwd.next;
   2f336:	62ab      	str	r3, [r5, #40]	; 0x28
        if (err) {
   2f338:	2800      	cmp	r0, #0
   2f33a:	d1ae      	bne.n	2f29a <lfs_mkdir+0x36>
        lfs_fs_preporphans(lfs, -1);
   2f33c:	f04f 31ff 	mov.w	r1, #4294967295
   2f340:	4628      	mov	r0, r5
   2f342:	f7fd fa65 	bl	2c810 <lfs_fs_preporphans>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
   2f346:	4b17      	ldr	r3, [pc, #92]	; (2f3a4 <lfs_mkdir+0x140>)
   2f348:	ea48 2889 	orr.w	r8, r8, r9, lsl #10
   2f34c:	ea43 2389 	orr.w	r3, r3, r9, lsl #10
   2f350:	9316      	str	r3, [sp, #88]	; 0x58
   2f352:	2300      	movs	r3, #0
   2f354:	9317      	str	r3, [sp, #92]	; 0x5c
   2f356:	f448 1300 	orr.w	r3, r8, #2097152	; 0x200000
   2f35a:	e9cd 3a18 	strd	r3, sl, [sp, #96]	; 0x60
   2f35e:	4b12      	ldr	r3, [pc, #72]	; (2f3a8 <lfs_mkdir+0x144>)
   2f360:	4628      	mov	r0, r5
   2f362:	ea43 2389 	orr.w	r3, r3, r9, lsl #10
   2f366:	e9cd 361a 	strd	r3, r6, [sp, #104]	; 0x68
   2f36a:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
   2f36e:	aa16      	add	r2, sp, #88	; 0x58
   2f370:	2b00      	cmp	r3, #0
   2f372:	4b0b      	ldr	r3, [pc, #44]	; (2f3a0 <lfs_mkdir+0x13c>)
   2f374:	bf18      	it	ne
   2f376:	2300      	movne	r3, #0
   2f378:	a920      	add	r1, sp, #128	; 0x80
   2f37a:	e9cd 361c 	strd	r3, r6, [sp, #112]	; 0x70
   2f37e:	2304      	movs	r3, #4
   2f380:	f7ff fd06 	bl	2ed90 <lfs_dir_commit>
   2f384:	4604      	mov	r4, r0
    if (err) {
   2f386:	e788      	b.n	2f29a <lfs_mkdir+0x36>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
   2f388:	463a      	mov	r2, r7
   2f38a:	4628      	mov	r0, r5
   2f38c:	a90e      	add	r1, sp, #56	; 0x38
   2f38e:	f00c fb5c 	bl	3ba4a <lfs_dir_fetch>
        if (err) {
   2f392:	4604      	mov	r4, r0
   2f394:	2800      	cmp	r0, #0
   2f396:	d0a6      	beq.n	2f2e6 <lfs_mkdir+0x82>
   2f398:	e77f      	b.n	2f29a <lfs_mkdir+0x36>
        return LFS_ERR_NAMETOOLONG;
   2f39a:	f06f 0423 	mvn.w	r4, #35	; 0x23
   2f39e:	e77c      	b.n	2f29a <lfs_mkdir+0x36>
   2f3a0:	600ffc08 	.word	0x600ffc08
   2f3a4:	40100000 	.word	0x40100000
   2f3a8:	20000008 	.word	0x20000008

0002f3ac <lfs_file_sync>:
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   2f3ac:	b570      	push	{r4, r5, r6, lr}
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2f3ae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   2f3b0:	4605      	mov	r5, r0
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2f3b2:	029e      	lsls	r6, r3, #10
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   2f3b4:	460c      	mov	r4, r1
   2f3b6:	b086      	sub	sp, #24
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2f3b8:	d40b      	bmi.n	2f3d2 <lfs_file_sync+0x26>
   2f3ba:	492a      	ldr	r1, [pc, #168]	; (2f464 <lfs_file_sync+0xb8>)
   2f3bc:	482a      	ldr	r0, [pc, #168]	; (2f468 <lfs_file_sync+0xbc>)
   2f3be:	f44f 632b 	mov.w	r3, #2736	; 0xab0
   2f3c2:	4a2a      	ldr	r2, [pc, #168]	; (2f46c <lfs_file_sync+0xc0>)
   2f3c4:	f009 fef9 	bl	391ba <printk>
   2f3c8:	f44f 612b 	mov.w	r1, #2736	; 0xab0
   2f3cc:	4827      	ldr	r0, [pc, #156]	; (2f46c <lfs_file_sync+0xc0>)
   2f3ce:	f00a f94b 	bl	39668 <assert_post_action>
    if (file->flags & LFS_F_ERRED) {
   2f3d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f3d4:	0318      	lsls	r0, r3, #12
   2f3d6:	d442      	bmi.n	2f45e <lfs_file_sync+0xb2>
    int err = lfs_file_flush(lfs, file);
   2f3d8:	4621      	mov	r1, r4
   2f3da:	4628      	mov	r0, r5
   2f3dc:	f7ff f89e 	bl	2e51c <lfs_file_flush>
    if (err) {
   2f3e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2f3e2:	b120      	cbz	r0, 2f3ee <lfs_file_sync+0x42>
        file->flags |= LFS_F_ERRED;
   2f3e4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   2f3e8:	6322      	str	r2, [r4, #48]	; 0x30
}
   2f3ea:	b006      	add	sp, #24
   2f3ec:	bd70      	pop	{r4, r5, r6, pc}
    if ((file->flags & LFS_F_DIRTY) &&
   2f3ee:	03d1      	lsls	r1, r2, #15
   2f3f0:	d535      	bpl.n	2f45e <lfs_file_sync+0xb2>
            !lfs_pair_isnull(file->m.pair)) {
   2f3f2:	f104 0608 	add.w	r6, r4, #8
   2f3f6:	4630      	mov	r0, r6
   2f3f8:	f00c fa89 	bl	3b90e <lfs_pair_isnull>
    if ((file->flags & LFS_F_DIRTY) &&
   2f3fc:	2800      	cmp	r0, #0
   2f3fe:	d12e      	bne.n	2f45e <lfs_file_sync+0xb2>
        if (file->flags & LFS_F_INLINE) {
   2f400:	02d3      	lsls	r3, r2, #11
            ctz = file->ctz;
   2f402:	bf5f      	itttt	pl
   2f404:	466b      	movpl	r3, sp
   2f406:	e9d4 010a 	ldrdpl	r0, r1, [r4, #40]	; 0x28
            size = sizeof(ctz);
   2f40a:	2208      	movpl	r2, #8
            ctz = file->ctz;
   2f40c:	e9c3 0100 	strdpl	r0, r1, [r3]
            type = LFS_TYPE_INLINESTRUCT;
   2f410:	bf4c      	ite	mi
   2f412:	f240 2001 	movwmi	r0, #513	; 0x201
            type = LFS_TYPE_CTZSTRUCT;
   2f416:	f240 2002 	movwpl	r0, #514	; 0x202
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   2f41a:	88a1      	ldrh	r1, [r4, #4]
            size = file->ctz.size;
   2f41c:	bf44      	itt	mi
   2f41e:	6ae2      	ldrmi	r2, [r4, #44]	; 0x2c
            buffer = file->cache.buffer;
   2f420:	6ce3      	ldrmi	r3, [r4, #76]	; 0x4c
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   2f422:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
   2f426:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
   2f42a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f42e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2f430:	4628      	mov	r0, r5
   2f432:	6893      	ldr	r3, [r2, #8]
   2f434:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
   2f438:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   2f43c:	9304      	str	r3, [sp, #16]
   2f43e:	6853      	ldr	r3, [r2, #4]
   2f440:	4631      	mov	r1, r6
   2f442:	9305      	str	r3, [sp, #20]
   2f444:	aa02      	add	r2, sp, #8
   2f446:	2302      	movs	r3, #2
   2f448:	f7ff fca2 	bl	2ed90 <lfs_dir_commit>
        if (err) {
   2f44c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f44e:	b118      	cbz	r0, 2f458 <lfs_file_sync+0xac>
            file->flags |= LFS_F_ERRED;
   2f450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2f454:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   2f456:	e7c8      	b.n	2f3ea <lfs_file_sync+0x3e>
        file->flags &= ~LFS_F_DIRTY;
   2f458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2f45c:	6323      	str	r3, [r4, #48]	; 0x30
        return 0;
   2f45e:	2000      	movs	r0, #0
   2f460:	e7c3      	b.n	2f3ea <lfs_file_sync+0x3e>
   2f462:	bf00      	nop
   2f464:	0004254b 	.word	0x0004254b
   2f468:	0003f0e1 	.word	0x0003f0e1
   2f46c:	00042209 	.word	0x00042209

0002f470 <lfs_file_close>:
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2f470:	6b0b      	ldr	r3, [r1, #48]	; 0x30
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   2f472:	b570      	push	{r4, r5, r6, lr}
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2f474:	029b      	lsls	r3, r3, #10
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   2f476:	4605      	mov	r5, r0
   2f478:	460c      	mov	r4, r1
    LFS_ASSERT(file->flags & LFS_F_OPENED);
   2f47a:	d40b      	bmi.n	2f494 <lfs_file_close+0x24>
   2f47c:	4913      	ldr	r1, [pc, #76]	; (2f4cc <lfs_file_close+0x5c>)
   2f47e:	4814      	ldr	r0, [pc, #80]	; (2f4d0 <lfs_file_close+0x60>)
   2f480:	f640 13f5 	movw	r3, #2549	; 0x9f5
   2f484:	4a13      	ldr	r2, [pc, #76]	; (2f4d4 <lfs_file_close+0x64>)
   2f486:	f009 fe98 	bl	391ba <printk>
   2f48a:	f640 11f5 	movw	r1, #2549	; 0x9f5
   2f48e:	4811      	ldr	r0, [pc, #68]	; (2f4d4 <lfs_file_close+0x64>)
   2f490:	f00a f8ea 	bl	39668 <assert_post_action>
    int err = lfs_file_sync(lfs, file);
   2f494:	4621      	mov	r1, r4
   2f496:	4628      	mov	r0, r5
   2f498:	f7ff ff88 	bl	2f3ac <lfs_file_sync>
   2f49c:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f49e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2f4a0:	f105 0228 	add.w	r2, r5, #40	; 0x28
   2f4a4:	b11b      	cbz	r3, 2f4ae <lfs_file_close+0x3e>
        if (*p == (struct lfs_mlist*)file) {
   2f4a6:	42a3      	cmp	r3, r4
            *p = (*p)->next;
   2f4a8:	6819      	ldr	r1, [r3, #0]
        if (*p == (struct lfs_mlist*)file) {
   2f4aa:	d10c      	bne.n	2f4c6 <lfs_file_close+0x56>
            *p = (*p)->next;
   2f4ac:	6011      	str	r1, [r2, #0]
    if (!file->cfg->buffer) {
   2f4ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2f4b0:	681b      	ldr	r3, [r3, #0]
   2f4b2:	b913      	cbnz	r3, 2f4ba <lfs_file_close+0x4a>
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
   2f4b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2f4b6:	f008 f885 	bl	375c4 <free>
    file->flags &= ~LFS_F_OPENED;
   2f4ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
}
   2f4bc:	4630      	mov	r0, r6
    file->flags &= ~LFS_F_OPENED;
   2f4be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2f4c2:	6323      	str	r3, [r4, #48]	; 0x30
}
   2f4c4:	bd70      	pop	{r4, r5, r6, pc}
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f4c6:	461a      	mov	r2, r3
            *p = (*p)->next;
   2f4c8:	460b      	mov	r3, r1
   2f4ca:	e7eb      	b.n	2f4a4 <lfs_file_close+0x34>
   2f4cc:	0004254b 	.word	0x0004254b
   2f4d0:	0003f0e1 	.word	0x0003f0e1
   2f4d4:	00042209 	.word	0x00042209

0002f4d8 <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
   2f4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f4dc:	461f      	mov	r7, r3
    if ((flags & 3) != LFS_O_RDONLY) {
   2f4de:	f003 0303 	and.w	r3, r3, #3
        const struct lfs_file_config *cfg) {
   2f4e2:	b08a      	sub	sp, #40	; 0x28
    if ((flags & 3) != LFS_O_RDONLY) {
   2f4e4:	2b01      	cmp	r3, #1
        const struct lfs_file_config *cfg) {
   2f4e6:	4606      	mov	r6, r0
   2f4e8:	460d      	mov	r5, r1
   2f4ea:	9203      	str	r2, [sp, #12]
    if ((flags & 3) != LFS_O_RDONLY) {
   2f4ec:	d137      	bne.n	2f55e <lfs_file_opencfg+0x86>
    file->pos = 0;
   2f4ee:	f04f 0900 	mov.w	r9, #0
    file->cfg = cfg;
   2f4f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   2f4f4:	f105 0808 	add.w	r8, r5, #8
    file->cfg = cfg;
   2f4f8:	652b      	str	r3, [r5, #80]	; 0x50
    file->flags = flags | LFS_F_OPENED;
   2f4fa:	f447 1300 	orr.w	r3, r7, #2097152	; 0x200000
   2f4fe:	632b      	str	r3, [r5, #48]	; 0x30
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   2f500:	4641      	mov	r1, r8
   2f502:	4630      	mov	r0, r6
    file->pos = 0;
   2f504:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
    file->off = 0;
   2f508:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
    file->cache.buffer = NULL;
   2f50c:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   2f510:	1d2b      	adds	r3, r5, #4
   2f512:	aa03      	add	r2, sp, #12
   2f514:	f7fd fec0 	bl	2d298 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
   2f518:	1e04      	subs	r4, r0, #0
   2f51a:	da29      	bge.n	2f570 <lfs_file_opencfg+0x98>
   2f51c:	1ca0      	adds	r0, r4, #2
   2f51e:	d115      	bne.n	2f54c <lfs_file_opencfg+0x74>
   2f520:	f240 33ff 	movw	r3, #1023	; 0x3ff
   2f524:	88aa      	ldrh	r2, [r5, #4]
   2f526:	429a      	cmp	r2, r3
   2f528:	d010      	beq.n	2f54c <lfs_file_opencfg+0x74>
    file->type = LFS_TYPE_REG;
   2f52a:	2301      	movs	r3, #1
   2f52c:	71ab      	strb	r3, [r5, #6]
    file->next = (lfs_file_t*)lfs->mlist;
   2f52e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        if (!(flags & LFS_O_CREAT)) {
   2f530:	05f9      	lsls	r1, r7, #23
    file->next = (lfs_file_t*)lfs->mlist;
   2f532:	602b      	str	r3, [r5, #0]
    lfs->mlist = (struct lfs_mlist*)file;
   2f534:	62b5      	str	r5, [r6, #40]	; 0x28
        if (!(flags & LFS_O_CREAT)) {
   2f536:	d509      	bpl.n	2f54c <lfs_file_opencfg+0x74>
        lfs_size_t nlen = strlen(path);
   2f538:	9f03      	ldr	r7, [sp, #12]
   2f53a:	4638      	mov	r0, r7
   2f53c:	f7f2 f897 	bl	2166e <strlen>
        if (nlen > lfs->name_max) {
   2f540:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
        lfs_size_t nlen = strlen(path);
   2f542:	4604      	mov	r4, r0
        if (nlen > lfs->name_max) {
   2f544:	4283      	cmp	r3, r0
   2f546:	d21d      	bcs.n	2f584 <lfs_file_opencfg+0xac>
            err = LFS_ERR_NAMETOOLONG;
   2f548:	f06f 0423 	mvn.w	r4, #35	; 0x23
    file->flags |= LFS_F_ERRED;
   2f54c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    lfs_file_close(lfs, file);
   2f54e:	4629      	mov	r1, r5
    file->flags |= LFS_F_ERRED;
   2f550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    lfs_file_close(lfs, file);
   2f554:	4630      	mov	r0, r6
    file->flags |= LFS_F_ERRED;
   2f556:	632b      	str	r3, [r5, #48]	; 0x30
    lfs_file_close(lfs, file);
   2f558:	f7ff ff8a 	bl	2f470 <lfs_file_close>
    return err;
   2f55c:	e004      	b.n	2f568 <lfs_file_opencfg+0x90>
        int err = lfs_fs_forceconsistency(lfs);
   2f55e:	f7ff fdf3 	bl	2f148 <lfs_fs_forceconsistency>
        if (err) {
   2f562:	4604      	mov	r4, r0
   2f564:	2800      	cmp	r0, #0
   2f566:	d0c2      	beq.n	2f4ee <lfs_file_opencfg+0x16>
}
   2f568:	4620      	mov	r0, r4
   2f56a:	b00a      	add	sp, #40	; 0x28
   2f56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    file->type = LFS_TYPE_REG;
   2f570:	2301      	movs	r3, #1
   2f572:	71ab      	strb	r3, [r5, #6]
    file->next = (lfs_file_t*)lfs->mlist;
   2f574:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2f576:	602b      	str	r3, [r5, #0]
    } else if (flags & LFS_O_EXCL) {
   2f578:	05bb      	lsls	r3, r7, #22
    lfs->mlist = (struct lfs_mlist*)file;
   2f57a:	62b5      	str	r5, [r6, #40]	; 0x28
    } else if (flags & LFS_O_EXCL) {
   2f57c:	d539      	bpl.n	2f5f2 <lfs_file_opencfg+0x11a>
        err = LFS_ERR_EXIST;
   2f57e:	f06f 0410 	mvn.w	r4, #16
   2f582:	e7e3      	b.n	2f54c <lfs_file_opencfg+0x74>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   2f584:	2214      	movs	r2, #20
   2f586:	4649      	mov	r1, r9
   2f588:	eb0d 0002 	add.w	r0, sp, r2
   2f58c:	f00e f87b 	bl	3d686 <memset>
   2f590:	88ab      	ldrh	r3, [r5, #4]
   2f592:	4a5c      	ldr	r2, [pc, #368]	; (2f704 <lfs_file_opencfg+0x22c>)
   2f594:	ea44 2483 	orr.w	r4, r4, r3, lsl #10
   2f598:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2f59c:	e9cd 4706 	strd	r4, r7, [sp, #24]
   2f5a0:	4c59      	ldr	r4, [pc, #356]	; (2f708 <lfs_file_opencfg+0x230>)
   2f5a2:	ea42 2283 	orr.w	r2, r2, r3, lsl #10
   2f5a6:	ea44 2383 	orr.w	r3, r4, r3, lsl #10
   2f5aa:	9204      	str	r2, [sp, #16]
   2f5ac:	9308      	str	r3, [sp, #32]
   2f5ae:	4641      	mov	r1, r8
   2f5b0:	2303      	movs	r3, #3
   2f5b2:	4630      	mov	r0, r6
   2f5b4:	aa04      	add	r2, sp, #16
   2f5b6:	f7ff fbeb 	bl	2ed90 <lfs_dir_commit>
        if (err) {
   2f5ba:	2800      	cmp	r0, #0
   2f5bc:	d1c4      	bne.n	2f548 <lfs_file_opencfg+0x70>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   2f5be:	2700      	movs	r7, #0
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   2f5c0:	f04f 090c 	mov.w	r9, #12
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2f5c4:	f8df a144 	ldr.w	sl, [pc, #324]	; 2f70c <lfs_file_opencfg+0x234>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   2f5c8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   2f5ca:	689a      	ldr	r2, [r3, #8]
   2f5cc:	42ba      	cmp	r2, r7
   2f5ce:	d830      	bhi.n	2f632 <lfs_file_opencfg+0x15a>
    if (file->cfg->buffer) {
   2f5d0:	681b      	ldr	r3, [r3, #0]
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
   2f5d2:	6eb2      	ldr	r2, [r6, #104]	; 0x68
    if (file->cfg->buffer) {
   2f5d4:	2b00      	cmp	r3, #0
   2f5d6:	d05f      	beq.n	2f698 <lfs_file_opencfg+0x1c0>
        file->cache.buffer = file->cfg->buffer;
   2f5d8:	64eb      	str	r3, [r5, #76]	; 0x4c
    lfs_cache_zero(lfs, &file->cache);
   2f5da:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   2f5dc:	f105 0140 	add.w	r1, r5, #64	; 0x40
   2f5e0:	f00c fb60 	bl	3bca4 <lfs_cache_zero.isra.0>
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   2f5e4:	f240 2301 	movw	r3, #513	; 0x201
   2f5e8:	ebb3 5f14 	cmp.w	r3, r4, lsr #20
   2f5ec:	d05d      	beq.n	2f6aa <lfs_file_opencfg+0x1d2>
    return 0;
   2f5ee:	2400      	movs	r4, #0
   2f5f0:	e7ba      	b.n	2f568 <lfs_file_opencfg+0x90>
    return (tag & 0x7ff00000) >> 20;
   2f5f2:	0d24      	lsrs	r4, r4, #20
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
   2f5f4:	2c01      	cmp	r4, #1
   2f5f6:	d17f      	bne.n	2f6f8 <lfs_file_opencfg+0x220>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   2f5f8:	88ab      	ldrh	r3, [r5, #4]
    } else if (flags & LFS_O_TRUNC) {
   2f5fa:	057a      	lsls	r2, r7, #21
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   2f5fc:	ea4f 2383 	mov.w	r3, r3, lsl #10
    } else if (flags & LFS_O_TRUNC) {
   2f600:	d508      	bpl.n	2f614 <lfs_file_opencfg+0x13c>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   2f602:	f043 5400 	orr.w	r4, r3, #536870912	; 0x20000000
        file->flags |= LFS_F_DIRTY;
   2f606:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   2f608:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
   2f60c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f610:	632b      	str	r3, [r5, #48]	; 0x30
   2f612:	e7d4      	b.n	2f5be <lfs_file_opencfg+0xe6>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
   2f614:	f105 0228 	add.w	r2, r5, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
   2f618:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   2f61c:	9200      	str	r2, [sp, #0]
   2f61e:	4641      	mov	r1, r8
   2f620:	4630      	mov	r0, r6
   2f622:	4a3b      	ldr	r2, [pc, #236]	; (2f710 <lfs_file_opencfg+0x238>)
   2f624:	f043 0308 	orr.w	r3, r3, #8
   2f628:	f00c fa45 	bl	3bab6 <lfs_dir_get>
        if (tag < 0) {
   2f62c:	1e04      	subs	r4, r0, #0
   2f62e:	dac6      	bge.n	2f5be <lfs_file_opencfg+0xe6>
   2f630:	e78c      	b.n	2f54c <lfs_file_opencfg+0x74>
        if ((file->flags & 3) != LFS_O_WRONLY) {
   2f632:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   2f634:	f002 0203 	and.w	r2, r2, #3
   2f638:	2a02      	cmp	r2, #2
   2f63a:	d107      	bne.n	2f64c <lfs_file_opencfg+0x174>
        if ((file->flags & 3) != LFS_O_RDONLY) {
   2f63c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   2f63e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
        if ((file->flags & 3) != LFS_O_RDONLY) {
   2f640:	f003 0103 	and.w	r1, r3, #3
   2f644:	2901      	cmp	r1, #1
   2f646:	d11c      	bne.n	2f682 <lfs_file_opencfg+0x1aa>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   2f648:	3701      	adds	r7, #1
   2f64a:	e7bd      	b.n	2f5c8 <lfs_file_opencfg+0xf0>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   2f64c:	fb09 f207 	mul.w	r2, r9, r7
   2f650:	6858      	ldr	r0, [r3, #4]
   2f652:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   2f656:	1881      	adds	r1, r0, r2
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2f658:	688b      	ldr	r3, [r1, #8]
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   2f65a:	5c82      	ldrb	r2, [r0, r2]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2f65c:	6849      	ldr	r1, [r1, #4]
   2f65e:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   2f662:	f502 7240 	add.w	r2, r2, #768	; 0x300
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2f666:	9100      	str	r1, [sp, #0]
   2f668:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   2f66c:	4641      	mov	r1, r8
   2f66e:	4652      	mov	r2, sl
   2f670:	4630      	mov	r0, r6
   2f672:	f00c fa20 	bl	3bab6 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
   2f676:	2800      	cmp	r0, #0
   2f678:	dae0      	bge.n	2f63c <lfs_file_opencfg+0x164>
   2f67a:	1c83      	adds	r3, r0, #2
   2f67c:	d0de      	beq.n	2f63c <lfs_file_opencfg+0x164>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2f67e:	4604      	mov	r4, r0
   2f680:	e764      	b.n	2f54c <lfs_file_opencfg+0x74>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   2f682:	6852      	ldr	r2, [r2, #4]
   2f684:	fb09 2207 	mla	r2, r9, r7, r2
   2f688:	6891      	ldr	r1, [r2, #8]
   2f68a:	6f72      	ldr	r2, [r6, #116]	; 0x74
   2f68c:	4291      	cmp	r1, r2
   2f68e:	d836      	bhi.n	2f6fe <lfs_file_opencfg+0x226>
            file->flags |= LFS_F_DIRTY;
   2f690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f694:	632b      	str	r3, [r5, #48]	; 0x30
   2f696:	e7d7      	b.n	2f648 <lfs_file_opencfg+0x170>
    return malloc(size);
   2f698:	6a90      	ldr	r0, [r2, #40]	; 0x28
   2f69a:	f007 ff8b 	bl	375b4 <malloc>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
   2f69e:	64e8      	str	r0, [r5, #76]	; 0x4c
        if (!file->cache.buffer) {
   2f6a0:	2800      	cmp	r0, #0
   2f6a2:	d19a      	bne.n	2f5da <lfs_file_opencfg+0x102>
            err = LFS_ERR_NOMEM;
   2f6a4:	f06f 040b 	mvn.w	r4, #11
   2f6a8:	e750      	b.n	2f54c <lfs_file_opencfg+0x74>
        file->flags |= LFS_F_INLINE;
   2f6aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        file->ctz.head = LFS_BLOCK_INLINE;
   2f6ac:	f06f 0201 	mvn.w	r2, #1
        file->flags |= LFS_F_INLINE;
   2f6b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2f6b4:	632b      	str	r3, [r5, #48]	; 0x30
        file->cache.off = 0;
   2f6b6:	2300      	movs	r3, #0
   2f6b8:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
   2f6ba:	6eb3      	ldr	r3, [r6, #104]	; 0x68
        file->ctz.head = LFS_BLOCK_INLINE;
   2f6bc:	62aa      	str	r2, [r5, #40]	; 0x28
        file->cache.block = file->ctz.head;
   2f6be:	642a      	str	r2, [r5, #64]	; 0x40
        file->cache.size = lfs->cfg->cache_size;
   2f6c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2f6c2:	f3c4 0409 	ubfx	r4, r4, #0, #10
        file->ctz.size = lfs_tag_size(tag);
   2f6c6:	62ec      	str	r4, [r5, #44]	; 0x2c
        file->cache.size = lfs->cfg->cache_size;
   2f6c8:	64aa      	str	r2, [r5, #72]	; 0x48
        if (file->ctz.size > 0) {
   2f6ca:	2c00      	cmp	r4, #0
   2f6cc:	d08f      	beq.n	2f5ee <lfs_file_opencfg+0x116>
    return (a < b) ? a : b;
   2f6ce:	f240 33fe 	movw	r3, #1022	; 0x3fe
   2f6d2:	4293      	cmp	r3, r2
   2f6d4:	bf28      	it	cs
   2f6d6:	4613      	movcs	r3, r2
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   2f6d8:	88a9      	ldrh	r1, [r5, #4]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2f6da:	6cea      	ldr	r2, [r5, #76]	; 0x4c
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   2f6dc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2f6e0:	9200      	str	r2, [sp, #0]
   2f6e2:	4641      	mov	r1, r8
   2f6e4:	4630      	mov	r0, r6
   2f6e6:	4a0a      	ldr	r2, [pc, #40]	; (2f710 <lfs_file_opencfg+0x238>)
   2f6e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   2f6ec:	f00c f9e3 	bl	3bab6 <lfs_dir_get>
            if (res < 0) {
   2f6f0:	1e04      	subs	r4, r0, #0
   2f6f2:	f6bf af7c 	bge.w	2f5ee <lfs_file_opencfg+0x116>
   2f6f6:	e729      	b.n	2f54c <lfs_file_opencfg+0x74>
        err = LFS_ERR_ISDIR;
   2f6f8:	f06f 0414 	mvn.w	r4, #20
   2f6fc:	e726      	b.n	2f54c <lfs_file_opencfg+0x74>
                err = LFS_ERR_NOSPC;
   2f6fe:	f06f 041b 	mvn.w	r4, #27
   2f702:	e723      	b.n	2f54c <lfs_file_opencfg+0x74>
   2f704:	40100000 	.word	0x40100000
   2f708:	20100000 	.word	0x20100000
   2f70c:	7ffffc00 	.word	0x7ffffc00
   2f710:	700ffc00 	.word	0x700ffc00

0002f714 <lfs_remove>:
int lfs_remove(lfs_t *lfs, const char *path) {
   2f714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f718:	b098      	sub	sp, #96	; 0x60
   2f71a:	4604      	mov	r4, r0
   2f71c:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
   2f71e:	f7ff fd13 	bl	2f148 <lfs_fs_forceconsistency>
    if (err) {
   2f722:	2800      	cmp	r0, #0
   2f724:	d15a      	bne.n	2f7dc <lfs_remove+0xc8>
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   2f726:	4603      	mov	r3, r0
   2f728:	aa03      	add	r2, sp, #12
   2f72a:	4620      	mov	r0, r4
   2f72c:	a906      	add	r1, sp, #24
   2f72e:	f7fd fdb3 	bl	2d298 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   2f732:	2800      	cmp	r0, #0
   2f734:	db52      	blt.n	2f7dc <lfs_remove+0xc8>
   2f736:	f240 32ff 	movw	r2, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   2f73a:	f3c0 2389 	ubfx	r3, r0, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   2f73e:	4293      	cmp	r3, r2
   2f740:	d04f      	beq.n	2f7e2 <lfs_remove+0xce>
    dir.next = lfs->mlist;
   2f742:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return (tag & 0x7ff00000) >> 20;
   2f744:	0d06      	lsrs	r6, r0, #20
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   2f746:	2e02      	cmp	r6, #2
    dir.next = lfs->mlist;
   2f748:	920e      	str	r2, [sp, #56]	; 0x38
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
   2f74a:	ea4f 2583 	mov.w	r5, r3, lsl #10
   2f74e:	af04      	add	r7, sp, #16
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   2f750:	d11f      	bne.n	2f792 <lfs_remove+0x7e>
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
   2f752:	f045 5300 	orr.w	r3, r5, #536870912	; 0x20000000
   2f756:	4620      	mov	r0, r4
   2f758:	4a23      	ldr	r2, [pc, #140]	; (2f7e8 <lfs_remove+0xd4>)
   2f75a:	9700      	str	r7, [sp, #0]
   2f75c:	f043 0308 	orr.w	r3, r3, #8
   2f760:	a906      	add	r1, sp, #24
   2f762:	f00c f9a8 	bl	3bab6 <lfs_dir_get>
        if (res < 0) {
   2f766:	2800      	cmp	r0, #0
   2f768:	db38      	blt.n	2f7dc <lfs_remove+0xc8>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
   2f76a:	463a      	mov	r2, r7
   2f76c:	4620      	mov	r0, r4
   2f76e:	a910      	add	r1, sp, #64	; 0x40
   2f770:	f00c f96b 	bl	3ba4a <lfs_dir_fetch>
        if (err) {
   2f774:	bb90      	cbnz	r0, 2f7dc <lfs_remove+0xc8>
        if (dir.m.count > 0 || dir.m.split) {
   2f776:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2f778:	f433 087f 	bics.w	r8, r3, #16711680	; 0xff0000
   2f77c:	d12c      	bne.n	2f7d8 <lfs_remove+0xc4>
        lfs_fs_preporphans(lfs, +1);
   2f77e:	2101      	movs	r1, #1
   2f780:	4620      	mov	r0, r4
   2f782:	f7fd f845 	bl	2c810 <lfs_fs_preporphans>
        lfs->mlist = &dir;
   2f786:	ab0e      	add	r3, sp, #56	; 0x38
        dir.type = 0;
   2f788:	f88d 803e 	strb.w	r8, [sp, #62]	; 0x3e
        dir.id = 0;
   2f78c:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
        lfs->mlist = &dir;
   2f790:	62a3      	str	r3, [r4, #40]	; 0x28
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
   2f792:	2300      	movs	r3, #0
   2f794:	f045 459f 	orr.w	r5, r5, #1333788672	; 0x4f800000
   2f798:	9305      	str	r3, [sp, #20]
   2f79a:	463a      	mov	r2, r7
   2f79c:	2301      	movs	r3, #1
   2f79e:	4620      	mov	r0, r4
   2f7a0:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
   2f7a4:	a906      	add	r1, sp, #24
   2f7a6:	9504      	str	r5, [sp, #16]
   2f7a8:	f7ff faf2 	bl	2ed90 <lfs_dir_commit>
    if (err) {
   2f7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        lfs->mlist = dir.next;
   2f7ae:	62a3      	str	r3, [r4, #40]	; 0x28
    if (err) {
   2f7b0:	b9a0      	cbnz	r0, 2f7dc <lfs_remove+0xc8>
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   2f7b2:	2e02      	cmp	r6, #2
   2f7b4:	d112      	bne.n	2f7dc <lfs_remove+0xc8>
        lfs_fs_preporphans(lfs, -1);
   2f7b6:	f04f 31ff 	mov.w	r1, #4294967295
   2f7ba:	4620      	mov	r0, r4
   2f7bc:	f7fd f828 	bl	2c810 <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
   2f7c0:	4620      	mov	r0, r4
   2f7c2:	aa06      	add	r2, sp, #24
   2f7c4:	a910      	add	r1, sp, #64	; 0x40
   2f7c6:	f00c f94d 	bl	3ba64 <lfs_fs_pred>
        if (err) {
   2f7ca:	b938      	cbnz	r0, 2f7dc <lfs_remove+0xc8>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
   2f7cc:	4620      	mov	r0, r4
   2f7ce:	aa10      	add	r2, sp, #64	; 0x40
   2f7d0:	a906      	add	r1, sp, #24
   2f7d2:	f7ff fc9b 	bl	2f10c <lfs_dir_drop>
        if (err) {
   2f7d6:	e001      	b.n	2f7dc <lfs_remove+0xc8>
            return LFS_ERR_NOTEMPTY;
   2f7d8:	f06f 0026 	mvn.w	r0, #38	; 0x26
}
   2f7dc:	b018      	add	sp, #96	; 0x60
   2f7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
   2f7e2:	f06f 0015 	mvn.w	r0, #21
   2f7e6:	e7f9      	b.n	2f7dc <lfs_remove+0xc8>
   2f7e8:	700ffc00 	.word	0x700ffc00

0002f7ec <lfs_rename>:
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
   2f7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f7f0:	b0af      	sub	sp, #188	; 0xbc
   2f7f2:	4605      	mov	r5, r0
   2f7f4:	e9cd 2104 	strd	r2, r1, [sp, #16]
    int err = lfs_fs_forceconsistency(lfs);
   2f7f8:	f7ff fca6 	bl	2f148 <lfs_fs_forceconsistency>
    if (err) {
   2f7fc:	4603      	mov	r3, r0
   2f7fe:	2800      	cmp	r0, #0
   2f800:	f040 8106 	bne.w	2fa10 <lfs_rename+0x224>
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
   2f804:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   2f808:	4649      	mov	r1, r9
   2f80a:	4628      	mov	r0, r5
   2f80c:	aa05      	add	r2, sp, #20
   2f80e:	f7fd fd43 	bl	2d298 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   2f812:	1e06      	subs	r6, r0, #0
   2f814:	f2c0 80fe 	blt.w	2fa14 <lfs_rename+0x228>
    return (tag & 0x000ffc00) >> 10;
   2f818:	f240 37ff 	movw	r7, #1023	; 0x3ff
   2f81c:	f3c6 2889 	ubfx	r8, r6, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   2f820:	45b8      	cmp	r8, r7
   2f822:	d105      	bne.n	2f830 <lfs_rename+0x44>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
   2f824:	f06f 0415 	mvn.w	r4, #21
}
   2f828:	4620      	mov	r0, r4
   2f82a:	b02f      	add	sp, #188	; 0xbc
   2f82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
   2f830:	4628      	mov	r0, r5
   2f832:	f10d 031e 	add.w	r3, sp, #30
   2f836:	aa04      	add	r2, sp, #16
   2f838:	a912      	add	r1, sp, #72	; 0x48
   2f83a:	f7fd fd2d 	bl	2d298 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   2f83e:	1e04      	subs	r4, r0, #0
   2f840:	db11      	blt.n	2f866 <lfs_rename+0x7a>
   2f842:	f3c4 2389 	ubfx	r3, r4, #10, #10
   2f846:	42bb      	cmp	r3, r7
   2f848:	d0ec      	beq.n	2f824 <lfs_rename+0x38>
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   2f84a:	4648      	mov	r0, r9
   2f84c:	a912      	add	r1, sp, #72	; 0x48
   2f84e:	f00c f868 	bl	3b922 <lfs_pair_cmp>
    return (tag & 0x7ff00000) >> 20;
   2f852:	0d22      	lsrs	r2, r4, #20
    prevdir.next = lfs->mlist;
   2f854:	6aab      	ldr	r3, [r5, #40]	; 0x28
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   2f856:	ebb2 5f16 	cmp.w	r2, r6, lsr #20
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   2f85a:	4607      	mov	r7, r0
    prevdir.next = lfs->mlist;
   2f85c:	931a      	str	r3, [sp, #104]	; 0x68
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   2f85e:	d06a      	beq.n	2f936 <lfs_rename+0x14a>
        return LFS_ERR_ISDIR;
   2f860:	f06f 0414 	mvn.w	r4, #20
   2f864:	e7e0      	b.n	2f828 <lfs_rename+0x3c>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   2f866:	1ca1      	adds	r1, r4, #2
   2f868:	d1de      	bne.n	2f828 <lfs_rename+0x3c>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
   2f86a:	f8bd a01e 	ldrh.w	sl, [sp, #30]
   2f86e:	45ba      	cmp	sl, r7
   2f870:	d0da      	beq.n	2f828 <lfs_rename+0x3c>
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   2f872:	a912      	add	r1, sp, #72	; 0x48
   2f874:	4648      	mov	r0, r9
   2f876:	f00c f854 	bl	3b922 <lfs_pair_cmp>
    prevdir.next = lfs->mlist;
   2f87a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   2f87c:	4607      	mov	r7, r0
        lfs_size_t nlen = strlen(newpath);
   2f87e:	9804      	ldr	r0, [sp, #16]
    prevdir.next = lfs->mlist;
   2f880:	931a      	str	r3, [sp, #104]	; 0x68
        lfs_size_t nlen = strlen(newpath);
   2f882:	f7f1 fef4 	bl	2166e <strlen>
        if (nlen > lfs->name_max) {
   2f886:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   2f888:	4283      	cmp	r3, r0
   2f88a:	d202      	bcs.n	2f892 <lfs_rename+0xa6>
            return LFS_ERR_NAMETOOLONG;
   2f88c:	f06f 0423 	mvn.w	r4, #35	; 0x23
   2f890:	e7ca      	b.n	2f828 <lfs_rename+0x3c>
        if (samepair && newid <= newoldid) {
   2f892:	b177      	cbz	r7, 2f8b2 <lfs_rename+0xc6>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2f894:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   2f896:	4b60      	ldr	r3, [pc, #384]	; (2fa18 <lfs_rename+0x22c>)
   2f898:	4013      	ands	r3, r2
   2f89a:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
   2f89e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   2f8a2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   2f8a6:	632b      	str	r3, [r5, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   2f8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f8aa:	636b      	str	r3, [r5, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   2f8ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2f8ae:	63ab      	str	r3, [r5, #56]	; 0x38
   2f8b0:	e072      	b.n	2f998 <lfs_rename+0x1ac>
        if (samepair && newid <= newoldid) {
   2f8b2:	45c2      	cmp	sl, r8
   2f8b4:	d86f      	bhi.n	2f996 <lfs_rename+0x1aa>
            newoldid += 1;
   2f8b6:	f108 0b01 	add.w	fp, r8, #1
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   2f8ba:	2224      	movs	r2, #36	; 0x24
   2f8bc:	2100      	movs	r1, #0
   2f8be:	a825      	add	r0, sp, #148	; 0x94
   2f8c0:	f00d fee1 	bl	3d686 <memset>
   2f8c4:	1ca2      	adds	r2, r4, #2
   2f8c6:	bf08      	it	eq
   2f8c8:	2300      	moveq	r3, #0
   2f8ca:	f8bd a01e 	ldrh.w	sl, [sp, #30]
   2f8ce:	ea4f 5616 	mov.w	r6, r6, lsr #20
   2f8d2:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
   2f8d6:	bf1c      	itt	ne
   2f8d8:	f04a 439f 	orrne.w	r3, sl, #1333788672	; 0x4f800000
   2f8dc:	f443 03e0 	orrne.w	r3, r3, #7340032	; 0x700000
   2f8e0:	9324      	str	r3, [sp, #144]	; 0x90
   2f8e2:	f04a 4380 	orr.w	r3, sl, #1073741824	; 0x40000000
   2f8e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2f8ea:	9326      	str	r3, [sp, #152]	; 0x98
   2f8ec:	9b04      	ldr	r3, [sp, #16]
   2f8ee:	0536      	lsls	r6, r6, #20
   2f8f0:	4618      	mov	r0, r3
   2f8f2:	9303      	str	r3, [sp, #12]
   2f8f4:	f7f1 febb 	bl	2166e <strlen>
   2f8f8:	9b03      	ldr	r3, [sp, #12]
   2f8fa:	ea46 060a 	orr.w	r6, r6, sl
   2f8fe:	ea48 0a0a 	orr.w	sl, r8, sl
   2f902:	9329      	str	r3, [sp, #164]	; 0xa4
   2f904:	f04a 5380 	orr.w	r3, sl, #268435456	; 0x10000000
   2f908:	4306      	orrs	r6, r0
   2f90a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2f90e:	e9cd 392a 	strd	r3, r9, [sp, #168]	; 0xa8
   2f912:	9628      	str	r6, [sp, #160]	; 0xa0
   2f914:	2f00      	cmp	r7, #0
   2f916:	d145      	bne.n	2f9a4 <lfs_rename+0x1b8>
   2f918:	4b40      	ldr	r3, [pc, #256]	; (2fa1c <lfs_rename+0x230>)
   2f91a:	ea43 238b 	orr.w	r3, r3, fp, lsl #10
   2f91e:	932c      	str	r3, [sp, #176]	; 0xb0
   2f920:	4628      	mov	r0, r5
   2f922:	2305      	movs	r3, #5
   2f924:	aa24      	add	r2, sp, #144	; 0x90
   2f926:	a912      	add	r1, sp, #72	; 0x48
   2f928:	f7ff fa32 	bl	2ed90 <lfs_dir_commit>
    if (err) {
   2f92c:	2800      	cmp	r0, #0
   2f92e:	d03b      	beq.n	2f9a8 <lfs_rename+0x1bc>
        lfs->mlist = prevdir.next;
   2f930:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2f932:	62ab      	str	r3, [r5, #40]	; 0x28
   2f934:	e034      	b.n	2f9a0 <lfs_rename+0x1b4>
    } else if (samepair && newid == newoldid) {
   2f936:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2f93a:	b330      	cbz	r0, 2f98a <lfs_rename+0x19e>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   2f93c:	2a02      	cmp	r2, #2
   2f93e:	d1a9      	bne.n	2f894 <lfs_rename+0xa8>
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
   2f940:	4a37      	ldr	r2, [pc, #220]	; (2fa20 <lfs_rename+0x234>)
   2f942:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   2f946:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   2f94a:	4628      	mov	r0, r5
   2f94c:	4a35      	ldr	r2, [pc, #212]	; (2fa24 <lfs_rename+0x238>)
   2f94e:	f8cd a000 	str.w	sl, [sp]
   2f952:	a912      	add	r1, sp, #72	; 0x48
   2f954:	f00c f8af 	bl	3bab6 <lfs_dir_get>
        if (res < 0) {
   2f958:	2800      	cmp	r0, #0
   2f95a:	db21      	blt.n	2f9a0 <lfs_rename+0x1b4>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
   2f95c:	4652      	mov	r2, sl
   2f95e:	4628      	mov	r0, r5
   2f960:	a91c      	add	r1, sp, #112	; 0x70
   2f962:	f00c f872 	bl	3ba4a <lfs_dir_fetch>
        if (err) {
   2f966:	b9d8      	cbnz	r0, 2f9a0 <lfs_rename+0x1b4>
        if (prevdir.m.count > 0 || prevdir.m.split) {
   2f968:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2f96a:	f433 0a7f 	bics.w	sl, r3, #16711680	; 0xff0000
   2f96e:	d115      	bne.n	2f99c <lfs_rename+0x1b0>
        lfs_fs_preporphans(lfs, +1);
   2f970:	2101      	movs	r1, #1
   2f972:	4628      	mov	r0, r5
   2f974:	f7fc ff4c 	bl	2c810 <lfs_fs_preporphans>
        lfs->mlist = &prevdir;
   2f978:	ab1a      	add	r3, sp, #104	; 0x68
        prevdir.type = 0;
   2f97a:	f88d a06e 	strb.w	sl, [sp, #110]	; 0x6e
        prevdir.id = 0;
   2f97e:	f8ad a06c 	strh.w	sl, [sp, #108]	; 0x6c
        lfs->mlist = &prevdir;
   2f982:	62ab      	str	r3, [r5, #40]	; 0x28
    if (!samepair) {
   2f984:	2f00      	cmp	r7, #0
   2f986:	d185      	bne.n	2f894 <lfs_rename+0xa8>
   2f988:	e005      	b.n	2f996 <lfs_rename+0x1aa>
    } else if (samepair && newid == newoldid) {
   2f98a:	4598      	cmp	r8, r3
   2f98c:	d101      	bne.n	2f992 <lfs_rename+0x1a6>
        return 0;
   2f98e:	2400      	movs	r4, #0
   2f990:	e74a      	b.n	2f828 <lfs_rename+0x3c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   2f992:	2a02      	cmp	r2, #2
   2f994:	d0d4      	beq.n	2f940 <lfs_rename+0x154>
}
   2f996:	2700      	movs	r7, #0
   2f998:	46c3      	mov	fp, r8
   2f99a:	e78e      	b.n	2f8ba <lfs_rename+0xce>
            return LFS_ERR_NOTEMPTY;
   2f99c:	f06f 0026 	mvn.w	r0, #38	; 0x26
        return err;
   2f9a0:	4604      	mov	r4, r0
   2f9a2:	e741      	b.n	2f828 <lfs_rename+0x3c>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   2f9a4:	2300      	movs	r3, #0
   2f9a6:	e7ba      	b.n	2f91e <lfs_rename+0x132>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   2f9a8:	b1b7      	cbz	r7, 2f9d8 <lfs_rename+0x1ec>
   2f9aa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
   2f9ac:	0d13      	lsrs	r3, r2, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   2f9ae:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   2f9b2:	d011      	beq.n	2f9d8 <lfs_rename+0x1ec>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2f9b4:	4b18      	ldr	r3, [pc, #96]	; (2fa18 <lfs_rename+0x22c>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   2f9b6:	63a8      	str	r0, [r5, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2f9b8:	4013      	ands	r3, r2
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   2f9ba:	e9c5 300c 	strd	r3, r0, [r5, #48]	; 0x30
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
   2f9be:	4b17      	ldr	r3, [pc, #92]	; (2fa1c <lfs_rename+0x230>)
   2f9c0:	9009      	str	r0, [sp, #36]	; 0x24
   2f9c2:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
   2f9c6:	9308      	str	r3, [sp, #32]
   2f9c8:	4649      	mov	r1, r9
   2f9ca:	2301      	movs	r3, #1
   2f9cc:	4628      	mov	r0, r5
   2f9ce:	aa08      	add	r2, sp, #32
   2f9d0:	f7ff f9de 	bl	2ed90 <lfs_dir_commit>
        if (err) {
   2f9d4:	2800      	cmp	r0, #0
   2f9d6:	d1ab      	bne.n	2f930 <lfs_rename+0x144>
    lfs->mlist = prevdir.next;
   2f9d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2f9da:	62ab      	str	r3, [r5, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   2f9dc:	1ca3      	adds	r3, r4, #2
   2f9de:	d0d6      	beq.n	2f98e <lfs_rename+0x1a2>
   2f9e0:	f3c4 540a 	ubfx	r4, r4, #20, #11
   2f9e4:	2c02      	cmp	r4, #2
   2f9e6:	d1d2      	bne.n	2f98e <lfs_rename+0x1a2>
        lfs_fs_preporphans(lfs, -1);
   2f9e8:	f04f 31ff 	mov.w	r1, #4294967295
   2f9ec:	4628      	mov	r0, r5
   2f9ee:	f7fc ff0f 	bl	2c810 <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
   2f9f2:	4628      	mov	r0, r5
   2f9f4:	aa12      	add	r2, sp, #72	; 0x48
   2f9f6:	a91c      	add	r1, sp, #112	; 0x70
   2f9f8:	f00c f834 	bl	3ba64 <lfs_fs_pred>
        if (err) {
   2f9fc:	4604      	mov	r4, r0
   2f9fe:	2800      	cmp	r0, #0
   2fa00:	f47f af12 	bne.w	2f828 <lfs_rename+0x3c>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
   2fa04:	4628      	mov	r0, r5
   2fa06:	aa1c      	add	r2, sp, #112	; 0x70
   2fa08:	a912      	add	r1, sp, #72	; 0x48
   2fa0a:	f7ff fb7f 	bl	2f10c <lfs_dir_drop>
   2fa0e:	e7c7      	b.n	2f9a0 <lfs_rename+0x1b4>
   2fa10:	4604      	mov	r4, r0
   2fa12:	e709      	b.n	2f828 <lfs_rename+0x3c>
   2fa14:	4634      	mov	r4, r6
   2fa16:	e707      	b.n	2f828 <lfs_rename+0x3c>
   2fa18:	800003ff 	.word	0x800003ff
   2fa1c:	4ff00000 	.word	0x4ff00000
   2fa20:	20000008 	.word	0x20000008
   2fa24:	700ffc00 	.word	0x700ffc00

0002fa28 <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
   2fa28:	b530      	push	{r4, r5, lr}
   2fa2a:	b097      	sub	sp, #92	; 0x5c
   2fa2c:	4605      	mov	r5, r0
        err = lfs_init(lfs, cfg);
   2fa2e:	f7fd fd39 	bl	2d4a4 <lfs_init>
        if (err) {
   2fa32:	4604      	mov	r4, r0
   2fa34:	2800      	cmp	r0, #0
   2fa36:	d14e      	bne.n	2fad6 <lfs_format+0xae>
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
   2fa38:	6eab      	ldr	r3, [r5, #104]	; 0x68
__ssp_bos_icheck3(memset, void *, int)
   2fa3a:	4601      	mov	r1, r0
   2fa3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2fa3e:	6e68      	ldr	r0, [r5, #100]	; 0x64
   2fa40:	f00d fe21 	bl	3d686 <memset>
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   2fa44:	6eab      	ldr	r3, [r5, #104]	; 0x68
        lfs->free.off = 0;
   2fa46:	656c      	str	r4, [r5, #84]	; 0x54
                lfs->cfg->block_count);
   2fa48:	6a1a      	ldr	r2, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   2fa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        err = lfs_dir_alloc(lfs, &root);
   2fa4c:	4628      	mov	r0, r5
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   2fa4e:	00db      	lsls	r3, r3, #3
    lfs->free.ack = lfs->cfg->block_count;
   2fa50:	e9c5 4217 	strd	r4, r2, [r5, #92]	; 0x5c
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   2fa54:	4293      	cmp	r3, r2
   2fa56:	bf94      	ite	ls
   2fa58:	65ab      	strls	r3, [r5, #88]	; 0x58
   2fa5a:	65aa      	strhi	r2, [r5, #88]	; 0x58
        err = lfs_dir_alloc(lfs, &root);
   2fa5c:	a90e      	add	r1, sp, #56	; 0x38
   2fa5e:	f00c f9ca 	bl	3bdf6 <lfs_dir_alloc>
        if (err) {
   2fa62:	4604      	mov	r4, r0
   2fa64:	2800      	cmp	r0, #0
   2fa66:	d133      	bne.n	2fad0 <lfs_format+0xa8>
        lfs_superblock_t superblock = {
   2fa68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   2fa6c:	9302      	str	r3, [sp, #8]
            .block_size  = lfs->cfg->block_size,
   2fa6e:	6eab      	ldr	r3, [r5, #104]	; 0x68
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   2fa70:	9009      	str	r0, [sp, #36]	; 0x24
        lfs_superblock_t superblock = {
   2fa72:	69da      	ldr	r2, [r3, #28]
   2fa74:	6a1b      	ldr	r3, [r3, #32]
   2fa76:	9203      	str	r2, [sp, #12]
   2fa78:	9304      	str	r3, [sp, #16]
   2fa7a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   2fa7c:	4628      	mov	r0, r5
        lfs_superblock_t superblock = {
   2fa7e:	9305      	str	r3, [sp, #20]
   2fa80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   2fa82:	aa08      	add	r2, sp, #32
        lfs_superblock_t superblock = {
   2fa84:	9306      	str	r3, [sp, #24]
   2fa86:	6f6b      	ldr	r3, [r5, #116]	; 0x74
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   2fa88:	a90e      	add	r1, sp, #56	; 0x38
        lfs_superblock_t superblock = {
   2fa8a:	9307      	str	r3, [sp, #28]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   2fa8c:	4b13      	ldr	r3, [pc, #76]	; (2fadc <lfs_format+0xb4>)
   2fa8e:	9308      	str	r3, [sp, #32]
   2fa90:	4b13      	ldr	r3, [pc, #76]	; (2fae0 <lfs_format+0xb8>)
   2fa92:	930a      	str	r3, [sp, #40]	; 0x28
   2fa94:	4b13      	ldr	r3, [pc, #76]	; (2fae4 <lfs_format+0xbc>)
   2fa96:	930b      	str	r3, [sp, #44]	; 0x2c
   2fa98:	4b13      	ldr	r3, [pc, #76]	; (2fae8 <lfs_format+0xc0>)
   2fa9a:	930c      	str	r3, [sp, #48]	; 0x30
   2fa9c:	ab02      	add	r3, sp, #8
   2fa9e:	930d      	str	r3, [sp, #52]	; 0x34
   2faa0:	2303      	movs	r3, #3
   2faa2:	f7ff f975 	bl	2ed90 <lfs_dir_commit>
        if (err) {
   2faa6:	4604      	mov	r4, r0
   2faa8:	b990      	cbnz	r0, 2fad0 <lfs_format+0xa8>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
   2faaa:	2301      	movs	r3, #1
   2faac:	9000      	str	r0, [sp, #0]
   2faae:	466a      	mov	r2, sp
   2fab0:	4628      	mov	r0, r5
   2fab2:	a90e      	add	r1, sp, #56	; 0x38
   2fab4:	9301      	str	r3, [sp, #4]
   2fab6:	f00b ffc8 	bl	3ba4a <lfs_dir_fetch>
        if (err) {
   2faba:	4604      	mov	r4, r0
   2fabc:	b940      	cbnz	r0, 2fad0 <lfs_format+0xa8>
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   2fabe:	4603      	mov	r3, r0
   2fac0:	4602      	mov	r2, r0
        root.erased = false;
   2fac2:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   2fac6:	a90e      	add	r1, sp, #56	; 0x38
   2fac8:	4628      	mov	r0, r5
   2faca:	f7ff f961 	bl	2ed90 <lfs_dir_commit>
   2face:	4604      	mov	r4, r0
    lfs_deinit(lfs);
   2fad0:	4628      	mov	r0, r5
   2fad2:	f00b ff86 	bl	3b9e2 <lfs_deinit>
}
   2fad6:	4620      	mov	r0, r4
   2fad8:	b017      	add	sp, #92	; 0x5c
   2fada:	bd30      	pop	{r4, r5, pc}
   2fadc:	40100000 	.word	0x40100000
   2fae0:	0ff00008 	.word	0x0ff00008
   2fae4:	000405e8 	.word	0x000405e8
   2fae8:	20100018 	.word	0x20100018

0002faec <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
   2faec:	b530      	push	{r4, r5, lr}
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   2faee:	4d0c      	ldr	r5, [pc, #48]	; (2fb20 <lfs_crc+0x34>)
   2faf0:	440a      	add	r2, r1
    for (size_t i = 0; i < size; i++) {
   2faf2:	4291      	cmp	r1, r2
   2faf4:	d100      	bne.n	2faf8 <lfs_crc+0xc>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    }

    return crc;
}
   2faf6:	bd30      	pop	{r4, r5, pc}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   2faf8:	f811 3b01 	ldrb.w	r3, [r1], #1
   2fafc:	ea83 0400 	eor.w	r4, r3, r0
   2fb00:	f004 040f 	and.w	r4, r4, #15
   2fb04:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
   2fb08:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
   2fb0c:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
   2fb10:	f003 030f 	and.w	r3, r3, #15
   2fb14:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   2fb18:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
   2fb1c:	e7e9      	b.n	2faf2 <lfs_crc+0x6>
   2fb1e:	bf00      	nop
   2fb20:	0003eb50 	.word	0x0003eb50

0002fb24 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2fb24:	2203      	movs	r2, #3
   2fb26:	4b11      	ldr	r3, [pc, #68]	; (2fb6c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   2fb28:	4911      	ldr	r1, [pc, #68]	; (2fb70 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2fb2a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   2fb2c:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2fb2e:	4a11      	ldr	r2, [pc, #68]	; (2fb74 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   2fb30:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2fb32:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   2fb34:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2fb38:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   2fb3a:	2200      	movs	r2, #0
   2fb3c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   2fb3e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2fb40:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   2fb42:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   2fb44:	490c      	ldr	r1, [pc, #48]	; (2fb78 <_DoInit+0x54>)
   2fb46:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   2fb48:	2110      	movs	r1, #16
   2fb4a:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2fb4c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2fb4e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2fb50:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   2fb52:	4a0a      	ldr	r2, [pc, #40]	; (2fb7c <_DoInit+0x58>)
   2fb54:	6812      	ldr	r2, [r2, #0]
   2fb56:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   2fb5a:	4a09      	ldr	r2, [pc, #36]	; (2fb80 <_DoInit+0x5c>)
   2fb5c:	6810      	ldr	r0, [r2, #0]
   2fb5e:	8892      	ldrh	r2, [r2, #4]
   2fb60:	6018      	str	r0, [r3, #0]
   2fb62:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   2fb64:	2220      	movs	r2, #32
   2fb66:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   2fb68:	4770      	bx	lr
   2fb6a:	bf00      	nop
   2fb6c:	20017c10 	.word	0x20017c10
   2fb70:	000426bb 	.word	0x000426bb
   2fb74:	20018c19 	.word	0x20018c19
   2fb78:	20018c09 	.word	0x20018c09
   2fb7c:	000426c4 	.word	0x000426c4
   2fb80:	000426c8 	.word	0x000426c8

0002fb84 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2fb84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2fb88:	f04f 0b18 	mov.w	fp, #24
   2fb8c:	4f20      	ldr	r7, [pc, #128]	; (2fc10 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2fb8e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   2fb90:	fb0b 7200 	mla	r2, fp, r0, r7
   2fb94:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2fb96:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2fb98:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2fb9a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2fb9c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2fb9e:	d831      	bhi.n	2fc04 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   2fba0:	f8d2 a020 	ldr.w	sl, [r2, #32]
   2fba4:	ebaa 0905 	sub.w	r9, sl, r5
   2fba8:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   2fbac:	4294      	cmp	r4, r2
   2fbae:	d811      	bhi.n	2fbd4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2fbb0:	2318      	movs	r3, #24
   2fbb2:	fb06 3303 	mla	r3, r6, r3, r3
   2fbb6:	443b      	add	r3, r7
   2fbb8:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2fbba:	4622      	mov	r2, r4
   2fbbc:	4641      	mov	r1, r8
   2fbbe:	4428      	add	r0, r5
   2fbc0:	f00d fd54 	bl	3d66c <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   2fbc4:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   2fbc6:	2318      	movs	r3, #24
      return 1;
   2fbc8:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   2fbca:	fb03 7306 	mla	r3, r3, r6, r7
   2fbce:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   2fbd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   2fbd4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2fbd6:	429c      	cmp	r4, r3
   2fbd8:	d818      	bhi.n	2fc0c <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2fbda:	fb00 bb0b 	mla	fp, r0, fp, fp
   2fbde:	44bb      	add	fp, r7
   2fbe0:	f8db 0004 	ldr.w	r0, [fp, #4]
   2fbe4:	464a      	mov	r2, r9
   2fbe6:	4428      	add	r0, r5
   2fbe8:	442c      	add	r4, r5
   2fbea:	f00d fd3f 	bl	3d66c <memcpy>
      if (NumBytes) {
   2fbee:	ebb4 040a 	subs.w	r4, r4, sl
   2fbf2:	d0e8      	beq.n	2fbc6 <SEGGER_RTT_WriteSkipNoLock+0x42>
   2fbf4:	4622      	mov	r2, r4
   2fbf6:	f8db 0004 	ldr.w	r0, [fp, #4]
   2fbfa:	eb08 0109 	add.w	r1, r8, r9
   2fbfe:	f00d fd35 	bl	3d66c <memcpy>
      return 1;
   2fc02:	e7e0      	b.n	2fbc6 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   2fc04:	3b01      	subs	r3, #1
   2fc06:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   2fc08:	42a3      	cmp	r3, r4
   2fc0a:	d2d1      	bcs.n	2fbb0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   2fc0c:	2000      	movs	r0, #0
   2fc0e:	e7df      	b.n	2fbd0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   2fc10:	20017c10 	.word	0x20017c10

0002fc14 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   2fc14:	2218      	movs	r2, #24
   2fc16:	4b03      	ldr	r3, [pc, #12]	; (2fc24 <SEGGER_RTT_HasDataUp+0x10>)
   2fc18:	fb02 3300 	mla	r3, r2, r0, r3
   2fc1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   2fc1e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   2fc20:	1a80      	subs	r0, r0, r2
   2fc22:	4770      	bx	lr
   2fc24:	20017c10 	.word	0x20017c10

0002fc28 <rpc_handle_data_message>:
   2fc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fc2a:	4604      	mov	r4, r0
   2fc2c:	2700      	movs	r7, #0
   2fc2e:	6806      	ldr	r6, [r0, #0]
   2fc30:	4d0b      	ldr	r5, [pc, #44]	; (2fc60 <rpc_handle_data_message+0x38>)
   2fc32:	b2b6      	uxth	r6, r6
   2fc34:	882b      	ldrh	r3, [r5, #0]
   2fc36:	42b3      	cmp	r3, r6
   2fc38:	d00a      	beq.n	2fc50 <rpc_handle_data_message+0x28>
   2fc3a:	3701      	adds	r7, #1
   2fc3c:	2f06      	cmp	r7, #6
   2fc3e:	f105 0510 	add.w	r5, r5, #16
   2fc42:	d1f7      	bne.n	2fc34 <rpc_handle_data_message+0xc>
   2fc44:	68a0      	ldr	r0, [r4, #8]
   2fc46:	b148      	cbz	r0, 2fc5c <rpc_handle_data_message+0x34>
   2fc48:	f00c f996 	bl	3bf78 <rpc_transport_peer_data_free>
   2fc4c:	2000      	movs	r0, #0
   2fc4e:	e005      	b.n	2fc5c <rpc_handle_data_message+0x34>
   2fc50:	4620      	mov	r0, r4
   2fc52:	686b      	ldr	r3, [r5, #4]
   2fc54:	68e9      	ldr	r1, [r5, #12]
   2fc56:	4798      	blx	r3
   2fc58:	2802      	cmp	r0, #2
   2fc5a:	d0ee      	beq.n	2fc3a <rpc_handle_data_message+0x12>
   2fc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fc5e:	bf00      	nop
   2fc60:	0003eb90 	.word	0x0003eb90

0002fc64 <ipc_trace_init>:
   2fc64:	4b01      	ldr	r3, [pc, #4]	; (2fc6c <ipc_trace_init+0x8>)
   2fc66:	6018      	str	r0, [r3, #0]
   2fc68:	4770      	bx	lr
   2fc6a:	bf00      	nop
   2fc6c:	20017cc4 	.word	0x20017cc4

0002fc70 <nrf_modem_os_trace_irq_handler>:
   2fc70:	b508      	push	{r3, lr}
   2fc72:	4b11      	ldr	r3, [pc, #68]	; (2fcb8 <nrf_modem_os_trace_irq_handler+0x48>)
   2fc74:	781b      	ldrb	r3, [r3, #0]
   2fc76:	b90b      	cbnz	r3, 2fc7c <nrf_modem_os_trace_irq_handler+0xc>
   2fc78:	f7f9 fcce 	bl	29618 <nrf_modem_os_trace_irq_clear>
   2fc7c:	4b0f      	ldr	r3, [pc, #60]	; (2fcbc <nrf_modem_os_trace_irq_handler+0x4c>)
   2fc7e:	6818      	ldr	r0, [r3, #0]
   2fc80:	b128      	cbz	r0, 2fc8e <nrf_modem_os_trace_irq_handler+0x1e>
   2fc82:	6882      	ldr	r2, [r0, #8]
   2fc84:	6843      	ldr	r3, [r0, #4]
   2fc86:	429a      	cmp	r2, r3
   2fc88:	d001      	beq.n	2fc8e <nrf_modem_os_trace_irq_handler+0x1e>
   2fc8a:	f00c f979 	bl	3bf80 <trace_write>
   2fc8e:	4b0c      	ldr	r3, [pc, #48]	; (2fcc0 <nrf_modem_os_trace_irq_handler+0x50>)
   2fc90:	6818      	ldr	r0, [r3, #0]
   2fc92:	b128      	cbz	r0, 2fca0 <nrf_modem_os_trace_irq_handler+0x30>
   2fc94:	6882      	ldr	r2, [r0, #8]
   2fc96:	6843      	ldr	r3, [r0, #4]
   2fc98:	429a      	cmp	r2, r3
   2fc9a:	d001      	beq.n	2fca0 <nrf_modem_os_trace_irq_handler+0x30>
   2fc9c:	f00c f970 	bl	3bf80 <trace_write>
   2fca0:	4b08      	ldr	r3, [pc, #32]	; (2fcc4 <nrf_modem_os_trace_irq_handler+0x54>)
   2fca2:	6818      	ldr	r0, [r3, #0]
   2fca4:	b138      	cbz	r0, 2fcb6 <nrf_modem_os_trace_irq_handler+0x46>
   2fca6:	6882      	ldr	r2, [r0, #8]
   2fca8:	6843      	ldr	r3, [r0, #4]
   2fcaa:	429a      	cmp	r2, r3
   2fcac:	d003      	beq.n	2fcb6 <nrf_modem_os_trace_irq_handler+0x46>
   2fcae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2fcb2:	f00c b965 	b.w	3bf80 <trace_write>
   2fcb6:	bd08      	pop	{r3, pc}
   2fcb8:	20019019 	.word	0x20019019
   2fcbc:	20017cc0 	.word	0x20017cc0
   2fcc0:	20017cb8 	.word	0x20017cb8
   2fcc4:	20017cbc 	.word	0x20017cbc

0002fcc8 <ipc_trace_handle>:
   2fcc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fccc:	4b43      	ldr	r3, [pc, #268]	; (2fddc <ipc_trace_handle+0x114>)
   2fcce:	681b      	ldr	r3, [r3, #0]
   2fcd0:	6919      	ldr	r1, [r3, #16]
   2fcd2:	f8d3 a014 	ldr.w	sl, [r3, #20]
   2fcd6:	7c1a      	ldrb	r2, [r3, #16]
   2fcd8:	2200      	movs	r2, #0
   2fcda:	741a      	strb	r2, [r3, #16]
   2fcdc:	7c58      	ldrb	r0, [r3, #17]
   2fcde:	745a      	strb	r2, [r3, #17]
   2fce0:	7c98      	ldrb	r0, [r3, #18]
   2fce2:	749a      	strb	r2, [r3, #18]
   2fce4:	7cd8      	ldrb	r0, [r3, #19]
   2fce6:	74da      	strb	r2, [r3, #19]
   2fce8:	7d18      	ldrb	r0, [r3, #20]
   2fcea:	751a      	strb	r2, [r3, #20]
   2fcec:	7d58      	ldrb	r0, [r3, #21]
   2fcee:	755a      	strb	r2, [r3, #21]
   2fcf0:	7d98      	ldrb	r0, [r3, #22]
   2fcf2:	759a      	strb	r2, [r3, #22]
   2fcf4:	7dd8      	ldrb	r0, [r3, #23]
   2fcf6:	75da      	strb	r2, [r3, #23]
   2fcf8:	2900      	cmp	r1, #0
   2fcfa:	d033      	beq.n	2fd64 <ipc_trace_handle+0x9c>
   2fcfc:	3901      	subs	r1, #1
   2fcfe:	2903      	cmp	r1, #3
   2fd00:	d830      	bhi.n	2fd64 <ipc_trace_handle+0x9c>
   2fd02:	e8df f001 	tbb	[pc, r1]
   2fd06:	6502      	.short	0x6502
   2fd08:	534c      	.short	0x534c
   2fd0a:	4a35      	ldr	r2, [pc, #212]	; (2fde0 <ipc_trace_handle+0x118>)
   2fd0c:	7811      	ldrb	r1, [r2, #0]
   2fd0e:	b109      	cbz	r1, 2fd14 <ipc_trace_handle+0x4c>
   2fd10:	2100      	movs	r1, #0
   2fd12:	7011      	strb	r1, [r2, #0]
   2fd14:	2200      	movs	r2, #0
   2fd16:	4691      	mov	r9, r2
   2fd18:	4617      	mov	r7, r2
   2fd1a:	4614      	mov	r4, r2
   2fd1c:	4d31      	ldr	r5, [pc, #196]	; (2fde4 <ipc_trace_handle+0x11c>)
   2fd1e:	4932      	ldr	r1, [pc, #200]	; (2fde8 <ipc_trace_handle+0x120>)
   2fd20:	4832      	ldr	r0, [pc, #200]	; (2fdec <ipc_trace_handle+0x124>)
   2fd22:	f8d5 e000 	ldr.w	lr, [r5]
   2fd26:	f8d1 8000 	ldr.w	r8, [r1]
   2fd2a:	6806      	ldr	r6, [r0, #0]
   2fd2c:	f8da b008 	ldr.w	fp, [sl, #8]
   2fd30:	9501      	str	r5, [sp, #4]
   2fd32:	45a3      	cmp	fp, r4
   2fd34:	d119      	bne.n	2fd6a <ipc_trace_handle+0xa2>
   2fd36:	b107      	cbz	r7, 2fd3a <ipc_trace_handle+0x72>
   2fd38:	6006      	str	r6, [r0, #0]
   2fd3a:	f1b9 0f00 	cmp.w	r9, #0
   2fd3e:	d001      	beq.n	2fd44 <ipc_trace_handle+0x7c>
   2fd40:	f8c1 8000 	str.w	r8, [r1]
   2fd44:	b112      	cbz	r2, 2fd4c <ipc_trace_handle+0x84>
   2fd46:	9a01      	ldr	r2, [sp, #4]
   2fd48:	f8c2 e000 	str.w	lr, [r2]
   2fd4c:	7a1a      	ldrb	r2, [r3, #8]
   2fd4e:	2101      	movs	r1, #1
   2fd50:	2200      	movs	r2, #0
   2fd52:	7219      	strb	r1, [r3, #8]
   2fd54:	7a59      	ldrb	r1, [r3, #9]
   2fd56:	725a      	strb	r2, [r3, #9]
   2fd58:	7a99      	ldrb	r1, [r3, #10]
   2fd5a:	729a      	strb	r2, [r3, #10]
   2fd5c:	7ada      	ldrb	r2, [r3, #11]
   2fd5e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   2fd62:	72da      	strb	r2, [r3, #11]
   2fd64:	b003      	add	sp, #12
   2fd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd6a:	1ca5      	adds	r5, r4, #2
   2fd6c:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   2fd70:	686d      	ldr	r5, [r5, #4]
   2fd72:	f895 c000 	ldrb.w	ip, [r5]
   2fd76:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   2fd7a:	d009      	beq.n	2fd90 <ipc_trace_handle+0xc8>
   2fd7c:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   2fd80:	d00a      	beq.n	2fd98 <ipc_trace_handle+0xd0>
   2fd82:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   2fd86:	bf04      	itt	eq
   2fd88:	462e      	moveq	r6, r5
   2fd8a:	2701      	moveq	r7, #1
   2fd8c:	3401      	adds	r4, #1
   2fd8e:	e7d0      	b.n	2fd32 <ipc_trace_handle+0x6a>
   2fd90:	46a8      	mov	r8, r5
   2fd92:	f04f 0901 	mov.w	r9, #1
   2fd96:	e7f9      	b.n	2fd8c <ipc_trace_handle+0xc4>
   2fd98:	46ae      	mov	lr, r5
   2fd9a:	2201      	movs	r2, #1
   2fd9c:	e7f6      	b.n	2fd8c <ipc_trace_handle+0xc4>
   2fd9e:	2101      	movs	r1, #1
   2fda0:	4a0f      	ldr	r2, [pc, #60]	; (2fde0 <ipc_trace_handle+0x118>)
   2fda2:	7011      	strb	r1, [r2, #0]
   2fda4:	7a1a      	ldrb	r2, [r3, #8]
   2fda6:	2103      	movs	r1, #3
   2fda8:	2200      	movs	r2, #0
   2fdaa:	e7d2      	b.n	2fd52 <ipc_trace_handle+0x8a>
   2fdac:	7a19      	ldrb	r1, [r3, #8]
   2fdae:	2104      	movs	r1, #4
   2fdb0:	7219      	strb	r1, [r3, #8]
   2fdb2:	7a59      	ldrb	r1, [r3, #9]
   2fdb4:	725a      	strb	r2, [r3, #9]
   2fdb6:	7a99      	ldrb	r1, [r3, #10]
   2fdb8:	729a      	strb	r2, [r3, #10]
   2fdba:	7ad9      	ldrb	r1, [r3, #11]
   2fdbc:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   2fdc0:	72d9      	strb	r1, [r3, #11]
   2fdc2:	4b07      	ldr	r3, [pc, #28]	; (2fde0 <ipc_trace_handle+0x118>)
   2fdc4:	701a      	strb	r2, [r3, #0]
   2fdc6:	b003      	add	sp, #12
   2fdc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fdcc:	f7ff bf50 	b.w	2fc70 <nrf_modem_os_trace_irq_handler>
   2fdd0:	b003      	add	sp, #12
   2fdd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fdd6:	f7f9 bc17 	b.w	29608 <nrf_modem_os_trace_irq_set>
   2fdda:	bf00      	nop
   2fddc:	20017cc4 	.word	0x20017cc4
   2fde0:	20019019 	.word	0x20019019
   2fde4:	20017cbc 	.word	0x20017cbc
   2fde8:	20017cb8 	.word	0x20017cb8
   2fdec:	20017cc0 	.word	0x20017cc0

0002fdf0 <rpc_trace_coredump_in_progress>:
   2fdf0:	4b01      	ldr	r3, [pc, #4]	; (2fdf8 <rpc_trace_coredump_in_progress+0x8>)
   2fdf2:	7818      	ldrb	r0, [r3, #0]
   2fdf4:	4770      	bx	lr
   2fdf6:	bf00      	nop
   2fdf8:	20019019 	.word	0x20019019

0002fdfc <rpc_transport_ipc_msg_alloc>:
   2fdfc:	b570      	push	{r4, r5, r6, lr}
   2fdfe:	2400      	movs	r4, #0
   2fe00:	6806      	ldr	r6, [r0, #0]
   2fe02:	42a6      	cmp	r6, r4
   2fe04:	d101      	bne.n	2fe0a <rpc_transport_ipc_msg_alloc+0xe>
   2fe06:	2000      	movs	r0, #0
   2fe08:	e016      	b.n	2fe38 <rpc_transport_ipc_msg_alloc+0x3c>
   2fe0a:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
   2fe0e:	685d      	ldr	r5, [r3, #4]
   2fe10:	b2ed      	uxtb	r5, r5
   2fe12:	2d03      	cmp	r5, #3
   2fe14:	d111      	bne.n	2fe3a <rpc_transport_ipc_msg_alloc+0x3e>
   2fe16:	eb01 1084 	add.w	r0, r1, r4, lsl #6
   2fe1a:	6098      	str	r0, [r3, #8]
   2fe1c:	6859      	ldr	r1, [r3, #4]
   2fe1e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   2fe22:	6059      	str	r1, [r3, #4]
   2fe24:	4908      	ldr	r1, [pc, #32]	; (2fe48 <rpc_transport_ipc_msg_alloc+0x4c>)
   2fe26:	880c      	ldrh	r4, [r1, #0]
   2fe28:	1c65      	adds	r5, r4, #1
   2fe2a:	800d      	strh	r5, [r1, #0]
   2fe2c:	6859      	ldr	r1, [r3, #4]
   2fe2e:	b289      	uxth	r1, r1
   2fe30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   2fe34:	6059      	str	r1, [r3, #4]
   2fe36:	7102      	strb	r2, [r0, #4]
   2fe38:	bd70      	pop	{r4, r5, r6, pc}
   2fe3a:	b915      	cbnz	r5, 2fe42 <rpc_transport_ipc_msg_alloc+0x46>
   2fe3c:	689d      	ldr	r5, [r3, #8]
   2fe3e:	2d00      	cmp	r5, #0
   2fe40:	d0e9      	beq.n	2fe16 <rpc_transport_ipc_msg_alloc+0x1a>
   2fe42:	3401      	adds	r4, #1
   2fe44:	e7dd      	b.n	2fe02 <rpc_transport_ipc_msg_alloc+0x6>
   2fe46:	bf00      	nop
   2fe48:	20017fd6 	.word	0x20017fd6

0002fe4c <handle_modem_rpc_msg>:
   2fe4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fe50:	4606      	mov	r6, r0
   2fe52:	460f      	mov	r7, r1
   2fe54:	2500      	movs	r5, #0
   2fe56:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2fecc <handle_modem_rpc_msg+0x80>
   2fe5a:	6833      	ldr	r3, [r6, #0]
   2fe5c:	42ab      	cmp	r3, r5
   2fe5e:	d801      	bhi.n	2fe64 <handle_modem_rpc_msg+0x18>
   2fe60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fe64:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   2fe68:	68a3      	ldr	r3, [r4, #8]
   2fe6a:	b1fb      	cbz	r3, 2feac <handle_modem_rpc_msg+0x60>
   2fe6c:	6863      	ldr	r3, [r4, #4]
   2fe6e:	b2db      	uxtb	r3, r3
   2fe70:	2b01      	cmp	r3, #1
   2fe72:	d11b      	bne.n	2feac <handle_modem_rpc_msg+0x60>
   2fe74:	6862      	ldr	r2, [r4, #4]
   2fe76:	f8b8 3000 	ldrh.w	r3, [r8]
   2fe7a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2fe7e:	d115      	bne.n	2feac <handle_modem_rpc_msg+0x60>
   2fe80:	2f02      	cmp	r7, #2
   2fe82:	68a0      	ldr	r0, [r4, #8]
   2fe84:	d114      	bne.n	2feb0 <handle_modem_rpc_msg+0x64>
   2fe86:	f7ff fecf 	bl	2fc28 <rpc_handle_data_message>
   2fe8a:	2802      	cmp	r0, #2
   2fe8c:	d00e      	beq.n	2feac <handle_modem_rpc_msg+0x60>
   2fe8e:	2801      	cmp	r0, #1
   2fe90:	d113      	bne.n	2feba <handle_modem_rpc_msg+0x6e>
   2fe92:	6863      	ldr	r3, [r4, #4]
   2fe94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2fe98:	f043 0302 	orr.w	r3, r3, #2
   2fe9c:	6063      	str	r3, [r4, #4]
   2fe9e:	f8b8 3000 	ldrh.w	r3, [r8]
   2fea2:	3301      	adds	r3, #1
   2fea4:	f8a8 3000 	strh.w	r3, [r8]
   2fea8:	f7f9 fb9e 	bl	295e8 <nrf_modem_os_application_irq_set>
   2feac:	3501      	adds	r5, #1
   2feae:	e7d4      	b.n	2fe5a <handle_modem_rpc_msg+0xe>
   2feb0:	6801      	ldr	r1, [r0, #0]
   2feb2:	0c09      	lsrs	r1, r1, #16
   2feb4:	f00c f814 	bl	3bee0 <rpc_handle_ctrl_message>
   2feb8:	e7e7      	b.n	2fe8a <handle_modem_rpc_msg+0x3e>
   2feba:	2800      	cmp	r0, #0
   2febc:	d1ef      	bne.n	2fe9e <handle_modem_rpc_msg+0x52>
   2febe:	6863      	ldr	r3, [r4, #4]
   2fec0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2fec4:	f043 0303 	orr.w	r3, r3, #3
   2fec8:	e7e8      	b.n	2fe9c <handle_modem_rpc_msg+0x50>
   2feca:	bf00      	nop
   2fecc:	20017fd4 	.word	0x20017fd4

0002fed0 <rpc_transport_ipc_data_msg_send>:
   2fed0:	b508      	push	{r3, lr}
   2fed2:	4b0b      	ldr	r3, [pc, #44]	; (2ff00 <rpc_transport_ipc_data_msg_send+0x30>)
   2fed4:	681b      	ldr	r3, [r3, #0]
   2fed6:	1ac0      	subs	r0, r0, r3
   2fed8:	4b0a      	ldr	r3, [pc, #40]	; (2ff04 <rpc_transport_ipc_data_msg_send+0x34>)
   2feda:	f3c0 1089 	ubfx	r0, r0, #6, #10
   2fede:	681b      	ldr	r3, [r3, #0]
   2fee0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2fee4:	6843      	ldr	r3, [r0, #4]
   2fee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2feea:	f043 0301 	orr.w	r3, r3, #1
   2feee:	6043      	str	r3, [r0, #4]
   2fef0:	2003      	movs	r0, #3
   2fef2:	f00b f902 	bl	3b0fa <nrf_modem_os_busywait>
   2fef6:	2201      	movs	r2, #1
   2fef8:	4b03      	ldr	r3, [pc, #12]	; (2ff08 <rpc_transport_ipc_data_msg_send+0x38>)
   2fefa:	601a      	str	r2, [r3, #0]
   2fefc:	bd08      	pop	{r3, pc}
   2fefe:	bf00      	nop
   2ff00:	20017ce0 	.word	0x20017ce0
   2ff04:	20017ce4 	.word	0x20017ce4
   2ff08:	4002a00c 	.word	0x4002a00c

0002ff0c <rpc_transport_ipc_ctrl_msg_send>:
   2ff0c:	b508      	push	{r3, lr}
   2ff0e:	4b0b      	ldr	r3, [pc, #44]	; (2ff3c <rpc_transport_ipc_ctrl_msg_send+0x30>)
   2ff10:	681b      	ldr	r3, [r3, #0]
   2ff12:	1ac0      	subs	r0, r0, r3
   2ff14:	4b0a      	ldr	r3, [pc, #40]	; (2ff40 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   2ff16:	f3c0 1089 	ubfx	r0, r0, #6, #10
   2ff1a:	681b      	ldr	r3, [r3, #0]
   2ff1c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2ff20:	6843      	ldr	r3, [r0, #4]
   2ff22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2ff26:	f043 0301 	orr.w	r3, r3, #1
   2ff2a:	6043      	str	r3, [r0, #4]
   2ff2c:	2003      	movs	r0, #3
   2ff2e:	f00b f8e4 	bl	3b0fa <nrf_modem_os_busywait>
   2ff32:	2201      	movs	r2, #1
   2ff34:	4b03      	ldr	r3, [pc, #12]	; (2ff44 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   2ff36:	601a      	str	r2, [r3, #0]
   2ff38:	bd08      	pop	{r3, pc}
   2ff3a:	bf00      	nop
   2ff3c:	20017cd8 	.word	0x20017cd8
   2ff40:	20017cdc 	.word	0x20017cdc
   2ff44:	4002a004 	.word	0x4002a004

0002ff48 <rpc_transport_ipc_data_msg_alloc>:
   2ff48:	4b05      	ldr	r3, [pc, #20]	; (2ff60 <rpc_transport_ipc_data_msg_alloc+0x18>)
   2ff4a:	781b      	ldrb	r3, [r3, #0]
   2ff4c:	b933      	cbnz	r3, 2ff5c <rpc_transport_ipc_data_msg_alloc+0x14>
   2ff4e:	4b05      	ldr	r3, [pc, #20]	; (2ff64 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   2ff50:	2202      	movs	r2, #2
   2ff52:	6819      	ldr	r1, [r3, #0]
   2ff54:	4b04      	ldr	r3, [pc, #16]	; (2ff68 <rpc_transport_ipc_data_msg_alloc+0x20>)
   2ff56:	6818      	ldr	r0, [r3, #0]
   2ff58:	f7ff bf50 	b.w	2fdfc <rpc_transport_ipc_msg_alloc>
   2ff5c:	2000      	movs	r0, #0
   2ff5e:	4770      	bx	lr
   2ff60:	2001901b 	.word	0x2001901b
   2ff64:	20017ce0 	.word	0x20017ce0
   2ff68:	20017ce4 	.word	0x20017ce4

0002ff6c <rpc_transport_ipc_ctrl_msg_alloc>:
   2ff6c:	230a      	movs	r3, #10
   2ff6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ff70:	4c0c      	ldr	r4, [pc, #48]	; (2ffa4 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   2ff72:	4d0d      	ldr	r5, [pc, #52]	; (2ffa8 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   2ff74:	9301      	str	r3, [sp, #4]
   2ff76:	2201      	movs	r2, #1
   2ff78:	6821      	ldr	r1, [r4, #0]
   2ff7a:	6828      	ldr	r0, [r5, #0]
   2ff7c:	f7ff ff3e 	bl	2fdfc <rpc_transport_ipc_msg_alloc>
   2ff80:	b968      	cbnz	r0, 2ff9e <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   2ff82:	f00b f8bc 	bl	3b0fe <nrf_modem_os_is_in_isr>
   2ff86:	b918      	cbnz	r0, 2ff90 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   2ff88:	a901      	add	r1, sp, #4
   2ff8a:	f7f9 f8a5 	bl	290d8 <nrf_modem_os_timedwait>
   2ff8e:	e7f2      	b.n	2ff76 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   2ff90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2ff94:	9b01      	ldr	r3, [sp, #4]
   2ff96:	4358      	muls	r0, r3
   2ff98:	f00b f8af 	bl	3b0fa <nrf_modem_os_busywait>
   2ff9c:	e7eb      	b.n	2ff76 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   2ff9e:	b003      	add	sp, #12
   2ffa0:	bd30      	pop	{r4, r5, pc}
   2ffa2:	bf00      	nop
   2ffa4:	20017cd8 	.word	0x20017cd8
   2ffa8:	20017cdc 	.word	0x20017cdc

0002ffac <rpc_transport_ipc_data_alloc>:
   2ffac:	4b03      	ldr	r3, [pc, #12]	; (2ffbc <rpc_transport_ipc_data_alloc+0x10>)
   2ffae:	781b      	ldrb	r3, [r3, #0]
   2ffb0:	b90b      	cbnz	r3, 2ffb6 <rpc_transport_ipc_data_alloc+0xa>
   2ffb2:	f7f9 bb47 	b.w	29644 <nrf_modem_os_shm_tx_alloc>
   2ffb6:	2000      	movs	r0, #0
   2ffb8:	4770      	bx	lr
   2ffba:	bf00      	nop
   2ffbc:	2001901b 	.word	0x2001901b

0002ffc0 <nrf_modem_os_application_irq_handler>:
   2ffc0:	b510      	push	{r4, lr}
   2ffc2:	4c06      	ldr	r4, [pc, #24]	; (2ffdc <nrf_modem_os_application_irq_handler+0x1c>)
   2ffc4:	f7f9 fb18 	bl	295f8 <nrf_modem_os_application_irq_clear>
   2ffc8:	6820      	ldr	r0, [r4, #0]
   2ffca:	2101      	movs	r1, #1
   2ffcc:	f7ff ff3e 	bl	2fe4c <handle_modem_rpc_msg>
   2ffd0:	6860      	ldr	r0, [r4, #4]
   2ffd2:	2102      	movs	r1, #2
   2ffd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ffd8:	f7ff bf38 	b.w	2fe4c <handle_modem_rpc_msg>
   2ffdc:	20017ccc 	.word	0x20017ccc

0002ffe0 <rpc_transport_ipc_msg_free>:
   2ffe0:	2300      	movs	r3, #0
   2ffe2:	4911      	ldr	r1, [pc, #68]	; (30028 <rpc_transport_ipc_msg_free+0x48>)
   2ffe4:	b530      	push	{r4, r5, lr}
   2ffe6:	680a      	ldr	r2, [r1, #0]
   2ffe8:	6814      	ldr	r4, [r2, #0]
   2ffea:	42a3      	cmp	r3, r4
   2ffec:	d10b      	bne.n	30006 <rpc_transport_ipc_msg_free+0x26>
   2ffee:	2300      	movs	r3, #0
   2fff0:	684a      	ldr	r2, [r1, #4]
   2fff2:	6811      	ldr	r1, [r2, #0]
   2fff4:	428b      	cmp	r3, r1
   2fff6:	d015      	beq.n	30024 <rpc_transport_ipc_msg_free+0x44>
   2fff8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   2fffc:	68a4      	ldr	r4, [r4, #8]
   2fffe:	42a0      	cmp	r0, r4
   30000:	d008      	beq.n	30014 <rpc_transport_ipc_msg_free+0x34>
   30002:	3301      	adds	r3, #1
   30004:	e7f6      	b.n	2fff4 <rpc_transport_ipc_msg_free+0x14>
   30006:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   3000a:	68ad      	ldr	r5, [r5, #8]
   3000c:	42a8      	cmp	r0, r5
   3000e:	d001      	beq.n	30014 <rpc_transport_ipc_msg_free+0x34>
   30010:	3301      	adds	r3, #1
   30012:	e7ea      	b.n	2ffea <rpc_transport_ipc_msg_free+0xa>
   30014:	00db      	lsls	r3, r3, #3
   30016:	3304      	adds	r3, #4
   30018:	58d1      	ldr	r1, [r2, r3]
   3001a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   3001e:	f041 0103 	orr.w	r1, r1, #3
   30022:	50d1      	str	r1, [r2, r3]
   30024:	bd30      	pop	{r4, r5, pc}
   30026:	bf00      	nop
   30028:	20017ccc 	.word	0x20017ccc

0003002c <rpc_transport_ipc_peer_data_free>:
   3002c:	b510      	push	{r4, lr}
   3002e:	4604      	mov	r4, r0
   30030:	f7ff ff9c 	bl	2ff6c <rpc_transport_ipc_ctrl_msg_alloc>
   30034:	4a04      	ldr	r2, [pc, #16]	; (30048 <rpc_transport_ipc_peer_data_free+0x1c>)
   30036:	6084      	str	r4, [r0, #8]
   30038:	6002      	str	r2, [r0, #0]
   3003a:	f7ff ff67 	bl	2ff0c <rpc_transport_ipc_ctrl_msg_send>
   3003e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30042:	f7f9 bad1 	b.w	295e8 <nrf_modem_os_application_irq_set>
   30046:	bf00      	nop
   30048:	00020001 	.word	0x00020001

0003004c <rpc_transport_ipc_init>:
   3004c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30050:	2200      	movs	r2, #0
   30052:	b095      	sub	sp, #84	; 0x54
   30054:	4605      	mov	r5, r0
   30056:	494d      	ldr	r1, [pc, #308]	; (3018c <rpc_transport_ipc_init+0x140>)
   30058:	7900      	ldrb	r0, [r0, #4]
   3005a:	f7fb fb91 	bl	2b780 <nrfx_ipc_init>
   3005e:	2238      	movs	r2, #56	; 0x38
   30060:	2100      	movs	r1, #0
   30062:	a803      	add	r0, sp, #12
   30064:	f00d fb0f 	bl	3d686 <memset>
   30068:	2302      	movs	r3, #2
   3006a:	9304      	str	r3, [sp, #16]
   3006c:	2308      	movs	r3, #8
   3006e:	9306      	str	r3, [sp, #24]
   30070:	2320      	movs	r3, #32
   30072:	9308      	str	r3, [sp, #32]
   30074:	2301      	movs	r3, #1
   30076:	930b      	str	r3, [sp, #44]	; 0x2c
   30078:	2304      	movs	r3, #4
   3007a:	930d      	str	r3, [sp, #52]	; 0x34
   3007c:	2310      	movs	r3, #16
   3007e:	f04f 0c40 	mov.w	ip, #64	; 0x40
   30082:	930f      	str	r3, [sp, #60]	; 0x3c
   30084:	2380      	movs	r3, #128	; 0x80
   30086:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   3008a:	23d5      	movs	r3, #213	; 0xd5
   3008c:	a803      	add	r0, sp, #12
   3008e:	9313      	str	r3, [sp, #76]	; 0x4c
   30090:	f7fb fb9e 	bl	2b7d0 <nrfx_ipc_config_load>
   30094:	682b      	ldr	r3, [r5, #0]
   30096:	2100      	movs	r1, #0
   30098:	685a      	ldr	r2, [r3, #4]
   3009a:	6818      	ldr	r0, [r3, #0]
   3009c:	f00d faf3 	bl	3d686 <memset>
   300a0:	682a      	ldr	r2, [r5, #0]
   300a2:	6814      	ldr	r4, [r2, #0]
   300a4:	69d3      	ldr	r3, [r2, #28]
   300a6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   300aa:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   300ae:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   300b2:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   300b6:	f104 0920 	add.w	r9, r4, #32
   300ba:	2b00      	cmp	r3, #0
   300bc:	d060      	beq.n	30180 <rpc_transport_ipc_init+0x134>
   300be:	f104 0840 	add.w	r8, r4, #64	; 0x40
   300c2:	4933      	ldr	r1, [pc, #204]	; (30190 <rpc_transport_ipc_init+0x144>)
   300c4:	f8c1 9000 	str.w	r9, [r1]
   300c8:	b13b      	cbz	r3, 300da <rpc_transport_ipc_init+0x8e>
   300ca:	6992      	ldr	r2, [r2, #24]
   300cc:	4640      	mov	r0, r8
   300ce:	f8c8 2004 	str.w	r2, [r8, #4]
   300d2:	f8c8 3000 	str.w	r3, [r8]
   300d6:	f7ff fdc5 	bl	2fc64 <ipc_trace_init>
   300da:	6828      	ldr	r0, [r5, #0]
   300dc:	2300      	movs	r3, #0
   300de:	6902      	ldr	r2, [r0, #16]
   300e0:	2101      	movs	r1, #1
   300e2:	6062      	str	r2, [r4, #4]
   300e4:	6942      	ldr	r2, [r0, #20]
   300e6:	70a1      	strb	r1, [r4, #2]
   300e8:	60a2      	str	r2, [r4, #8]
   300ea:	4a2a      	ldr	r2, [pc, #168]	; (30194 <rpc_transport_ipc_init+0x148>)
   300ec:	7023      	strb	r3, [r4, #0]
   300ee:	6017      	str	r7, [r2, #0]
   300f0:	4a29      	ldr	r2, [pc, #164]	; (30198 <rpc_transport_ipc_init+0x14c>)
   300f2:	7063      	strb	r3, [r4, #1]
   300f4:	6016      	str	r6, [r2, #0]
   300f6:	2208      	movs	r2, #8
   300f8:	70e3      	strb	r3, [r4, #3]
   300fa:	60e6      	str	r6, [r4, #12]
   300fc:	6127      	str	r7, [r4, #16]
   300fe:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   30102:	f8c4 9014 	str.w	r9, [r4, #20]
   30106:	f8c4 8018 	str.w	r8, [r4, #24]
   3010a:	707b      	strb	r3, [r7, #1]
   3010c:	70bb      	strb	r3, [r7, #2]
   3010e:	70fb      	strb	r3, [r7, #3]
   30110:	2714      	movs	r7, #20
   30112:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   30116:	4a21      	ldr	r2, [pc, #132]	; (3019c <rpc_transport_ipc_init+0x150>)
   30118:	4d21      	ldr	r5, [pc, #132]	; (301a0 <rpc_transport_ipc_init+0x154>)
   3011a:	f8c2 b000 	str.w	fp, [r2]
   3011e:	4a21      	ldr	r2, [pc, #132]	; (301a4 <rpc_transport_ipc_init+0x158>)
   30120:	7073      	strb	r3, [r6, #1]
   30122:	f8c2 a000 	str.w	sl, [r2]
   30126:	4a20      	ldr	r2, [pc, #128]	; (301a8 <rpc_transport_ipc_init+0x15c>)
   30128:	70b3      	strb	r3, [r6, #2]
   3012a:	70f3      	strb	r3, [r6, #3]
   3012c:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   30130:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   30134:	4c1d      	ldr	r4, [pc, #116]	; (301ac <rpc_transport_ipc_init+0x160>)
   30136:	7029      	strb	r1, [r5, #0]
   30138:	491d      	ldr	r1, [pc, #116]	; (301b0 <rpc_transport_ipc_init+0x164>)
   3013a:	6023      	str	r3, [r4, #0]
   3013c:	9302      	str	r3, [sp, #8]
   3013e:	600b      	str	r3, [r1, #0]
   30140:	680b      	ldr	r3, [r1, #0]
   30142:	4e1c      	ldr	r6, [pc, #112]	; (301b4 <rpc_transport_ipc_init+0x168>)
   30144:	9302      	str	r3, [sp, #8]
   30146:	9b02      	ldr	r3, [sp, #8]
   30148:	2000      	movs	r0, #0
   3014a:	a901      	add	r1, sp, #4
   3014c:	9701      	str	r7, [sp, #4]
   3014e:	f7f8 ffc3 	bl	290d8 <nrf_modem_os_timedwait>
   30152:	9b01      	ldr	r3, [sp, #4]
   30154:	3b14      	subs	r3, #20
   30156:	441e      	add	r6, r3
   30158:	782b      	ldrb	r3, [r5, #0]
   3015a:	2b01      	cmp	r3, #1
   3015c:	d104      	bne.n	30168 <rpc_transport_ipc_init+0x11c>
   3015e:	2e00      	cmp	r6, #0
   30160:	d1f2      	bne.n	30148 <rpc_transport_ipc_init+0xfc>
   30162:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   30166:	6023      	str	r3, [r4, #0]
   30168:	6824      	ldr	r4, [r4, #0]
   3016a:	b95c      	cbnz	r4, 30184 <rpc_transport_ipc_init+0x138>
   3016c:	4b12      	ldr	r3, [pc, #72]	; (301b8 <rpc_transport_ipc_init+0x16c>)
   3016e:	701c      	strb	r4, [r3, #0]
   30170:	4b12      	ldr	r3, [pc, #72]	; (301bc <rpc_transport_ipc_init+0x170>)
   30172:	801c      	strh	r4, [r3, #0]
   30174:	4b12      	ldr	r3, [pc, #72]	; (301c0 <rpc_transport_ipc_init+0x174>)
   30176:	801c      	strh	r4, [r3, #0]
   30178:	4620      	mov	r0, r4
   3017a:	b015      	add	sp, #84	; 0x54
   3017c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30180:	4698      	mov	r8, r3
   30182:	e79e      	b.n	300c2 <rpc_transport_ipc_init+0x76>
   30184:	f7fb fb68 	bl	2b858 <nrfx_ipc_uninit>
   30188:	e7f6      	b.n	30178 <rpc_transport_ipc_init+0x12c>
   3018a:	bf00      	nop
   3018c:	000301c5 	.word	0x000301c5
   30190:	20017cd4 	.word	0x20017cd4
   30194:	20017ce4 	.word	0x20017ce4
   30198:	20017cdc 	.word	0x20017cdc
   3019c:	20017ce0 	.word	0x20017ce0
   301a0:	2001901a 	.word	0x2001901a
   301a4:	20017cd8 	.word	0x20017cd8
   301a8:	4002a000 	.word	0x4002a000
   301ac:	20017cc8 	.word	0x20017cc8
   301b0:	40005610 	.word	0x40005610
   301b4:	000249f0 	.word	0x000249f0
   301b8:	2001901b 	.word	0x2001901b
   301bc:	20017fd6 	.word	0x20017fd6
   301c0:	20017fd4 	.word	0x20017fd4

000301c4 <ipc_irq_handler>:
   301c4:	b570      	push	{r4, r5, r6, lr}
   301c6:	4604      	mov	r4, r0
   301c8:	0620      	lsls	r0, r4, #24
   301ca:	d50c      	bpl.n	301e6 <ipc_irq_handler+0x22>
   301cc:	f7ff fd7c 	bl	2fcc8 <ipc_trace_handle>
   301d0:	f7ff fe0e 	bl	2fdf0 <rpc_trace_coredump_in_progress>
   301d4:	b138      	cbz	r0, 301e6 <ipc_irq_handler+0x22>
   301d6:	22e0      	movs	r2, #224	; 0xe0
   301d8:	4b3f      	ldr	r3, [pc, #252]	; (302d8 <ipc_irq_handler+0x114>)
   301da:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   301de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   301e2:	605a      	str	r2, [r3, #4]
   301e4:	bd70      	pop	{r4, r5, r6, pc}
   301e6:	07e1      	lsls	r1, r4, #31
   301e8:	d548      	bpl.n	3027c <ipc_irq_handler+0xb8>
   301ea:	f248 0202 	movw	r2, #32770	; 0x8002
   301ee:	4b3b      	ldr	r3, [pc, #236]	; (302dc <ipc_irq_handler+0x118>)
   301f0:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   301f4:	4293      	cmp	r3, r2
   301f6:	d035      	beq.n	30264 <ipc_irq_handler+0xa0>
   301f8:	d81b      	bhi.n	30232 <ipc_irq_handler+0x6e>
   301fa:	f243 0232 	movw	r2, #12338	; 0x3032
   301fe:	4293      	cmp	r3, r2
   30200:	d036      	beq.n	30270 <ipc_irq_handler+0xac>
   30202:	d80b      	bhi.n	3021c <ipc_irq_handler+0x58>
   30204:	3b01      	subs	r3, #1
   30206:	2b01      	cmp	r3, #1
   30208:	d8ec      	bhi.n	301e4 <ipc_irq_handler+0x20>
   3020a:	2203      	movs	r2, #3
   3020c:	200e      	movs	r0, #14
   3020e:	4b34      	ldr	r3, [pc, #208]	; (302e0 <ipc_irq_handler+0x11c>)
   30210:	701a      	strb	r2, [r3, #0]
   30212:	4b34      	ldr	r3, [pc, #208]	; (302e4 <ipc_irq_handler+0x120>)
   30214:	6018      	str	r0, [r3, #0]
   30216:	f00c ff0e 	bl	3d036 <rpc_transport_ipc_fault_handler>
   3021a:	e7e3      	b.n	301e4 <ipc_irq_handler+0x20>
   3021c:	f248 0201 	movw	r2, #32769	; 0x8001
   30220:	4293      	cmp	r3, r2
   30222:	d1df      	bne.n	301e4 <ipc_irq_handler+0x20>
   30224:	2203      	movs	r2, #3
   30226:	4b2e      	ldr	r3, [pc, #184]	; (302e0 <ipc_irq_handler+0x11c>)
   30228:	701a      	strb	r2, [r3, #0]
   3022a:	2216      	movs	r2, #22
   3022c:	4b2d      	ldr	r3, [pc, #180]	; (302e4 <ipc_irq_handler+0x120>)
   3022e:	601a      	str	r2, [r3, #0]
   30230:	e7d8      	b.n	301e4 <ipc_irq_handler+0x20>
   30232:	4a2d      	ldr	r2, [pc, #180]	; (302e8 <ipc_irq_handler+0x124>)
   30234:	4293      	cmp	r3, r2
   30236:	d80c      	bhi.n	30252 <ipc_irq_handler+0x8e>
   30238:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   3023c:	d80c      	bhi.n	30258 <ipc_irq_handler+0x94>
   3023e:	f248 0203 	movw	r2, #32771	; 0x8003
   30242:	4293      	cmp	r3, r2
   30244:	d1ce      	bne.n	301e4 <ipc_irq_handler+0x20>
   30246:	2203      	movs	r2, #3
   30248:	4b25      	ldr	r3, [pc, #148]	; (302e0 <ipc_irq_handler+0x11c>)
   3024a:	701a      	strb	r2, [r3, #0]
   3024c:	220c      	movs	r2, #12
   3024e:	4b25      	ldr	r3, [pc, #148]	; (302e4 <ipc_irq_handler+0x120>)
   30250:	e7ed      	b.n	3022e <ipc_irq_handler+0x6a>
   30252:	4a26      	ldr	r2, [pc, #152]	; (302ec <ipc_irq_handler+0x128>)
   30254:	4293      	cmp	r3, r2
   30256:	d1c5      	bne.n	301e4 <ipc_irq_handler+0x20>
   30258:	2103      	movs	r1, #3
   3025a:	4a21      	ldr	r2, [pc, #132]	; (302e0 <ipc_irq_handler+0x11c>)
   3025c:	7011      	strb	r1, [r2, #0]
   3025e:	4a21      	ldr	r2, [pc, #132]	; (302e4 <ipc_irq_handler+0x120>)
   30260:	6013      	str	r3, [r2, #0]
   30262:	e7bf      	b.n	301e4 <ipc_irq_handler+0x20>
   30264:	2203      	movs	r2, #3
   30266:	4b1e      	ldr	r3, [pc, #120]	; (302e0 <ipc_irq_handler+0x11c>)
   30268:	701a      	strb	r2, [r3, #0]
   3026a:	222d      	movs	r2, #45	; 0x2d
   3026c:	4b1d      	ldr	r3, [pc, #116]	; (302e4 <ipc_irq_handler+0x120>)
   3026e:	e7de      	b.n	3022e <ipc_irq_handler+0x6a>
   30270:	2203      	movs	r2, #3
   30272:	4b1b      	ldr	r3, [pc, #108]	; (302e0 <ipc_irq_handler+0x11c>)
   30274:	701a      	strb	r2, [r3, #0]
   30276:	2205      	movs	r2, #5
   30278:	4b1a      	ldr	r3, [pc, #104]	; (302e4 <ipc_irq_handler+0x120>)
   3027a:	e7d8      	b.n	3022e <ipc_irq_handler+0x6a>
   3027c:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   30280:	d003      	beq.n	3028a <ipc_irq_handler+0xc6>
   30282:	2202      	movs	r2, #2
   30284:	4b16      	ldr	r3, [pc, #88]	; (302e0 <ipc_irq_handler+0x11c>)
   30286:	701a      	strb	r2, [r3, #0]
   30288:	e7ac      	b.n	301e4 <ipc_irq_handler+0x20>
   3028a:	0762      	lsls	r2, r4, #29
   3028c:	d505      	bpl.n	3029a <ipc_irq_handler+0xd6>
   3028e:	4b14      	ldr	r3, [pc, #80]	; (302e0 <ipc_irq_handler+0x11c>)
   30290:	781a      	ldrb	r2, [r3, #0]
   30292:	461e      	mov	r6, r3
   30294:	b93a      	cbnz	r2, 302a6 <ipc_irq_handler+0xe2>
   30296:	f7f9 f9a7 	bl	295e8 <nrf_modem_os_application_irq_set>
   3029a:	06e3      	lsls	r3, r4, #27
   3029c:	d5a2      	bpl.n	301e4 <ipc_irq_handler+0x20>
   3029e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   302a2:	f7f9 b9a1 	b.w	295e8 <nrf_modem_os_application_irq_set>
   302a6:	2a01      	cmp	r2, #1
   302a8:	d1f7      	bne.n	3029a <ipc_irq_handler+0xd6>
   302aa:	4a11      	ldr	r2, [pc, #68]	; (302f0 <ipc_irq_handler+0x12c>)
   302ac:	4811      	ldr	r0, [pc, #68]	; (302f4 <ipc_irq_handler+0x130>)
   302ae:	6812      	ldr	r2, [r2, #0]
   302b0:	6891      	ldr	r1, [r2, #8]
   302b2:	6041      	str	r1, [r0, #4]
   302b4:	6852      	ldr	r2, [r2, #4]
   302b6:	6002      	str	r2, [r0, #0]
   302b8:	b101      	cbz	r1, 302bc <ipc_irq_handler+0xf8>
   302ba:	b92a      	cbnz	r2, 302c8 <ipc_irq_handler+0x104>
   302bc:	2303      	movs	r3, #3
   302be:	2216      	movs	r2, #22
   302c0:	7033      	strb	r3, [r6, #0]
   302c2:	4b08      	ldr	r3, [pc, #32]	; (302e4 <ipc_irq_handler+0x120>)
   302c4:	601a      	str	r2, [r3, #0]
   302c6:	e7e8      	b.n	3029a <ipc_irq_handler+0xd6>
   302c8:	6809      	ldr	r1, [r1, #0]
   302ca:	2910      	cmp	r1, #16
   302cc:	d8f6      	bhi.n	302bc <ipc_irq_handler+0xf8>
   302ce:	6812      	ldr	r2, [r2, #0]
   302d0:	2a10      	cmp	r2, #16
   302d2:	d8f3      	bhi.n	302bc <ipc_irq_handler+0xf8>
   302d4:	701d      	strb	r5, [r3, #0]
   302d6:	e7e0      	b.n	3029a <ipc_irq_handler+0xd6>
   302d8:	e000e100 	.word	0xe000e100
   302dc:	4002a000 	.word	0x4002a000
   302e0:	2001901a 	.word	0x2001901a
   302e4:	20017cc8 	.word	0x20017cc8
   302e8:	04400004 	.word	0x04400004
   302ec:	05500001 	.word	0x05500001
   302f0:	20017cd4 	.word	0x20017cd4
   302f4:	20017ccc 	.word	0x20017ccc

000302f8 <gnss_client_event_handler>:
   302f8:	f850 1b08 	ldr.w	r1, [r0], #8
   302fc:	4b01      	ldr	r3, [pc, #4]	; (30304 <gnss_client_event_handler+0xc>)
   302fe:	0c09      	lsrs	r1, r1, #16
   30300:	681b      	ldr	r3, [r3, #0]
   30302:	4718      	bx	r3
   30304:	20017ce8 	.word	0x20017ce8

00030308 <rpc_gnss_client_set_handler>:
   30308:	4b01      	ldr	r3, [pc, #4]	; (30310 <rpc_gnss_client_set_handler+0x8>)
   3030a:	6018      	str	r0, [r3, #0]
   3030c:	4770      	bx	lr
   3030e:	bf00      	nop
   30310:	20017ce8 	.word	0x20017ce8

00030314 <interface_init>:
   30314:	b508      	push	{r3, lr}
   30316:	f44f 72c6 	mov.w	r2, #396	; 0x18c
   3031a:	2100      	movs	r1, #0
   3031c:	4802      	ldr	r0, [pc, #8]	; (30328 <interface_init+0x14>)
   3031e:	f00d f9b2 	bl	3d686 <memset>
   30322:	2000      	movs	r0, #0
   30324:	bd08      	pop	{r3, pc}
   30326:	bf00      	nop
   30328:	20017cec 	.word	0x20017cec

0003032c <interface_socket_allocate>:
   3032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3032e:	4606      	mov	r6, r0
   30330:	2400      	movs	r4, #0
   30332:	272c      	movs	r7, #44	; 0x2c
   30334:	4b0f      	ldr	r3, [pc, #60]	; (30374 <interface_socket_allocate+0x48>)
   30336:	fb07 f004 	mul.w	r0, r7, r4
   3033a:	181d      	adds	r5, r3, r0
   3033c:	5818      	ldr	r0, [r3, r0]
   3033e:	b988      	cbnz	r0, 30364 <interface_socket_allocate+0x38>
   30340:	f04f 37ff 	mov.w	r7, #4294967295
   30344:	2301      	movs	r3, #1
   30346:	4628      	mov	r0, r5
   30348:	61af      	str	r7, [r5, #24]
   3034a:	602b      	str	r3, [r5, #0]
   3034c:	f00b fff9 	bl	3c342 <packet_handler_alloc_and_init>
   30350:	b168      	cbz	r0, 3036e <interface_socket_allocate+0x42>
   30352:	4628      	mov	r0, r5
   30354:	f00c f80c 	bl	3c370 <socket_free>
   30358:	200c      	movs	r0, #12
   3035a:	f7f8 ff73 	bl	29244 <nrf_modem_os_errno_set>
   3035e:	f04f 34ff 	mov.w	r4, #4294967295
   30362:	e005      	b.n	30370 <interface_socket_allocate+0x44>
   30364:	3401      	adds	r4, #1
   30366:	2c09      	cmp	r4, #9
   30368:	d1e5      	bne.n	30336 <interface_socket_allocate+0xa>
   3036a:	2069      	movs	r0, #105	; 0x69
   3036c:	e7f5      	b.n	3035a <interface_socket_allocate+0x2e>
   3036e:	6035      	str	r5, [r6, #0]
   30370:	4620      	mov	r0, r4
   30372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30374:	20017cec 	.word	0x20017cec

00030378 <interface_socket_free>:
   30378:	2808      	cmp	r0, #8
   3037a:	d805      	bhi.n	30388 <interface_socket_free+0x10>
   3037c:	222c      	movs	r2, #44	; 0x2c
   3037e:	4b03      	ldr	r3, [pc, #12]	; (3038c <interface_socket_free+0x14>)
   30380:	fb02 3000 	mla	r0, r2, r0, r3
   30384:	f00b bff4 	b.w	3c370 <socket_free>
   30388:	4770      	bx	lr
   3038a:	bf00      	nop
   3038c:	20017cec 	.word	0x20017cec

00030390 <interface_socket_packet_handler_update>:
   30390:	2808      	cmp	r0, #8
   30392:	b570      	push	{r4, r5, r6, lr}
   30394:	d812      	bhi.n	303bc <interface_socket_packet_handler_update+0x2c>
   30396:	232c      	movs	r3, #44	; 0x2c
   30398:	4358      	muls	r0, r3
   3039a:	4c09      	ldr	r4, [pc, #36]	; (303c0 <interface_socket_packet_handler_update+0x30>)
   3039c:	5823      	ldr	r3, [r4, r0]
   3039e:	1825      	adds	r5, r4, r0
   303a0:	b163      	cbz	r3, 303bc <interface_socket_packet_handler_update+0x2c>
   303a2:	4628      	mov	r0, r5
   303a4:	69ee      	ldr	r6, [r5, #28]
   303a6:	f00b ffcc 	bl	3c342 <packet_handler_alloc_and_init>
   303aa:	4604      	mov	r4, r0
   303ac:	b920      	cbnz	r0, 303b8 <interface_socket_packet_handler_update+0x28>
   303ae:	4630      	mov	r0, r6
   303b0:	f00c fe23 	bl	3cffa <packet_handler_delete>
   303b4:	4620      	mov	r0, r4
   303b6:	bd70      	pop	{r4, r5, r6, pc}
   303b8:	61ee      	str	r6, [r5, #28]
   303ba:	e7fb      	b.n	303b4 <interface_socket_packet_handler_update+0x24>
   303bc:	2402      	movs	r4, #2
   303be:	e7f9      	b.n	303b4 <interface_socket_packet_handler_update+0x24>
   303c0:	20017cec 	.word	0x20017cec

000303c4 <interface_socket_wait>:
   303c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   303c8:	4615      	mov	r5, r2
   303ca:	222c      	movs	r2, #44	; 0x2c
   303cc:	4350      	muls	r0, r2
   303ce:	461e      	mov	r6, r3
   303d0:	4b0e      	ldr	r3, [pc, #56]	; (3040c <interface_socket_wait+0x48>)
   303d2:	460c      	mov	r4, r1
   303d4:	181f      	adds	r7, r3, r0
   303d6:	581b      	ldr	r3, [r3, r0]
   303d8:	402b      	ands	r3, r5
   303da:	428b      	cmp	r3, r1
   303dc:	d102      	bne.n	303e4 <interface_socket_wait+0x20>
   303de:	2000      	movs	r0, #0
   303e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   303e4:	687b      	ldr	r3, [r7, #4]
   303e6:	2b00      	cmp	r3, #0
   303e8:	d1f9      	bne.n	303de <interface_socket_wait+0x1a>
   303ea:	46b8      	mov	r8, r7
   303ec:	f8d8 3000 	ldr.w	r3, [r8]
   303f0:	402b      	ands	r3, r5
   303f2:	42a3      	cmp	r3, r4
   303f4:	d0f3      	beq.n	303de <interface_socket_wait+0x1a>
   303f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   303fa:	2b00      	cmp	r3, #0
   303fc:	d1ef      	bne.n	303de <interface_socket_wait+0x1a>
   303fe:	4631      	mov	r1, r6
   30400:	4638      	mov	r0, r7
   30402:	f7f8 fe69 	bl	290d8 <nrf_modem_os_timedwait>
   30406:	2800      	cmp	r0, #0
   30408:	d0f0      	beq.n	303ec <interface_socket_wait+0x28>
   3040a:	e7e9      	b.n	303e0 <interface_socket_wait+0x1c>
   3040c:	20017cec 	.word	0x20017cec

00030410 <interface_from_internal_id_search>:
   30410:	4b0a      	ldr	r3, [pc, #40]	; (3043c <interface_from_internal_id_search+0x2c>)
   30412:	4602      	mov	r2, r0
   30414:	b530      	push	{r4, r5, lr}
   30416:	2000      	movs	r0, #0
   30418:	461c      	mov	r4, r3
   3041a:	212c      	movs	r1, #44	; 0x2c
   3041c:	fb01 f500 	mul.w	r5, r1, r0
   30420:	5965      	ldr	r5, [r4, r5]
   30422:	b115      	cbz	r5, 3042a <interface_from_internal_id_search+0x1a>
   30424:	699d      	ldr	r5, [r3, #24]
   30426:	4295      	cmp	r5, r2
   30428:	d006      	beq.n	30438 <interface_from_internal_id_search+0x28>
   3042a:	3001      	adds	r0, #1
   3042c:	2809      	cmp	r0, #9
   3042e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   30432:	d1f3      	bne.n	3041c <interface_from_internal_id_search+0xc>
   30434:	f04f 30ff 	mov.w	r0, #4294967295
   30438:	bd30      	pop	{r4, r5, pc}
   3043a:	bf00      	nop
   3043c:	20017cec 	.word	0x20017cec

00030440 <interface_socket_from_handle_get>:
   30440:	2808      	cmp	r0, #8
   30442:	d808      	bhi.n	30456 <interface_socket_from_handle_get+0x16>
   30444:	232c      	movs	r3, #44	; 0x2c
   30446:	4343      	muls	r3, r0
   30448:	4a04      	ldr	r2, [pc, #16]	; (3045c <interface_socket_from_handle_get+0x1c>)
   3044a:	18d0      	adds	r0, r2, r3
   3044c:	58d3      	ldr	r3, [r2, r3]
   3044e:	2b00      	cmp	r3, #0
   30450:	bf08      	it	eq
   30452:	2000      	moveq	r0, #0
   30454:	4770      	bx	lr
   30456:	2000      	movs	r0, #0
   30458:	4770      	bx	lr
   3045a:	bf00      	nop
   3045c:	20017cec 	.word	0x20017cec

00030460 <interface_socket_setopt>:
   30460:	2808      	cmp	r0, #8
   30462:	b538      	push	{r3, r4, r5, lr}
   30464:	d82c      	bhi.n	304c0 <interface_socket_setopt+0x60>
   30466:	242c      	movs	r4, #44	; 0x2c
   30468:	4360      	muls	r0, r4
   3046a:	4d16      	ldr	r5, [pc, #88]	; (304c4 <interface_socket_setopt+0x64>)
   3046c:	182c      	adds	r4, r5, r0
   3046e:	5828      	ldr	r0, [r5, r0]
   30470:	b330      	cbz	r0, 304c0 <interface_socket_setopt+0x60>
   30472:	2901      	cmp	r1, #1
   30474:	d005      	beq.n	30482 <interface_socket_setopt+0x22>
   30476:	202a      	movs	r0, #42	; 0x2a
   30478:	f7f8 fee4 	bl	29244 <nrf_modem_os_errno_set>
   3047c:	f04f 30ff 	mov.w	r0, #4294967295
   30480:	e01b      	b.n	304ba <interface_socket_setopt+0x5a>
   30482:	f1a2 0114 	sub.w	r1, r2, #20
   30486:	2901      	cmp	r1, #1
   30488:	d8f5      	bhi.n	30476 <interface_socket_setopt+0x16>
   3048a:	9904      	ldr	r1, [sp, #16]
   3048c:	2908      	cmp	r1, #8
   3048e:	d115      	bne.n	304bc <interface_socket_setopt+0x5c>
   30490:	b1a3      	cbz	r3, 304bc <interface_socket_setopt+0x5c>
   30492:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   30496:	6858      	ldr	r0, [r3, #4]
   30498:	2100      	movs	r1, #0
   3049a:	fbb0 f0f5 	udiv	r0, r0, r5
   3049e:	681b      	ldr	r3, [r3, #0]
   304a0:	fbe5 0103 	umlal	r0, r1, r5, r3
   304a4:	2901      	cmp	r1, #1
   304a6:	bf08      	it	eq
   304a8:	2800      	cmpeq	r0, #0
   304aa:	d301      	bcc.n	304b0 <interface_socket_setopt+0x50>
   304ac:	2025      	movs	r0, #37	; 0x25
   304ae:	e7e3      	b.n	30478 <interface_socket_setopt+0x18>
   304b0:	2a14      	cmp	r2, #20
   304b2:	bf0c      	ite	eq
   304b4:	6220      	streq	r0, [r4, #32]
   304b6:	6260      	strne	r0, [r4, #36]	; 0x24
   304b8:	2000      	movs	r0, #0
   304ba:	bd38      	pop	{r3, r4, r5, pc}
   304bc:	2016      	movs	r0, #22
   304be:	e7db      	b.n	30478 <interface_socket_setopt+0x18>
   304c0:	2009      	movs	r0, #9
   304c2:	e7d9      	b.n	30478 <interface_socket_setopt+0x18>
   304c4:	20017cec 	.word	0x20017cec

000304c8 <interface_socket_getopt>:
   304c8:	b570      	push	{r4, r5, r6, lr}
   304ca:	2808      	cmp	r0, #8
   304cc:	9d04      	ldr	r5, [sp, #16]
   304ce:	d832      	bhi.n	30536 <interface_socket_getopt+0x6e>
   304d0:	242c      	movs	r4, #44	; 0x2c
   304d2:	4360      	muls	r0, r4
   304d4:	4e19      	ldr	r6, [pc, #100]	; (3053c <interface_socket_getopt+0x74>)
   304d6:	1834      	adds	r4, r6, r0
   304d8:	5830      	ldr	r0, [r6, r0]
   304da:	b360      	cbz	r0, 30536 <interface_socket_getopt+0x6e>
   304dc:	2901      	cmp	r1, #1
   304de:	d005      	beq.n	304ec <interface_socket_getopt+0x24>
   304e0:	202a      	movs	r0, #42	; 0x2a
   304e2:	f7f8 feaf 	bl	29244 <nrf_modem_os_errno_set>
   304e6:	f04f 30ff 	mov.w	r0, #4294967295
   304ea:	e00c      	b.n	30506 <interface_socket_getopt+0x3e>
   304ec:	b103      	cbz	r3, 304f0 <interface_socket_getopt+0x28>
   304ee:	b90d      	cbnz	r5, 304f4 <interface_socket_getopt+0x2c>
   304f0:	2016      	movs	r0, #22
   304f2:	e7f6      	b.n	304e2 <interface_socket_getopt+0x1a>
   304f4:	2a04      	cmp	r2, #4
   304f6:	d107      	bne.n	30508 <interface_socket_getopt+0x40>
   304f8:	682a      	ldr	r2, [r5, #0]
   304fa:	2a04      	cmp	r2, #4
   304fc:	d1f8      	bne.n	304f0 <interface_socket_getopt+0x28>
   304fe:	2000      	movs	r0, #0
   30500:	6862      	ldr	r2, [r4, #4]
   30502:	601a      	str	r2, [r3, #0]
   30504:	6060      	str	r0, [r4, #4]
   30506:	bd70      	pop	{r4, r5, r6, pc}
   30508:	f1a2 0114 	sub.w	r1, r2, #20
   3050c:	2901      	cmp	r1, #1
   3050e:	d8e7      	bhi.n	304e0 <interface_socket_getopt+0x18>
   30510:	6829      	ldr	r1, [r5, #0]
   30512:	2908      	cmp	r1, #8
   30514:	d1ec      	bne.n	304f0 <interface_socket_getopt+0x28>
   30516:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   3051a:	2a14      	cmp	r2, #20
   3051c:	bf18      	it	ne
   3051e:	4608      	movne	r0, r1
   30520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   30524:	fbb0 f1f2 	udiv	r1, r0, r2
   30528:	6019      	str	r1, [r3, #0]
   3052a:	fb02 0111 	mls	r1, r2, r1, r0
   3052e:	434a      	muls	r2, r1
   30530:	2000      	movs	r0, #0
   30532:	605a      	str	r2, [r3, #4]
   30534:	e7e7      	b.n	30506 <interface_socket_getopt+0x3e>
   30536:	2009      	movs	r0, #9
   30538:	e7d3      	b.n	304e2 <interface_socket_getopt+0x1a>
   3053a:	bf00      	nop
   3053c:	20017cec 	.word	0x20017cec

00030540 <interface_socket_fcntl>:
   30540:	2808      	cmp	r0, #8
   30542:	b510      	push	{r4, lr}
   30544:	d82c      	bhi.n	305a0 <interface_socket_fcntl+0x60>
   30546:	232c      	movs	r3, #44	; 0x2c
   30548:	4343      	muls	r3, r0
   3054a:	4c16      	ldr	r4, [pc, #88]	; (305a4 <interface_socket_fcntl+0x64>)
   3054c:	58e0      	ldr	r0, [r4, r3]
   3054e:	b338      	cbz	r0, 305a0 <interface_socket_fcntl+0x60>
   30550:	2901      	cmp	r1, #1
   30552:	d11d      	bne.n	30590 <interface_socket_fcntl+0x50>
   30554:	f012 0001 	ands.w	r0, r2, #1
   30558:	58e2      	ldr	r2, [r4, r3]
   3055a:	d004      	beq.n	30566 <interface_socket_fcntl+0x26>
   3055c:	2000      	movs	r0, #0
   3055e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   30562:	50e2      	str	r2, [r4, r3]
   30564:	bd10      	pop	{r4, pc}
   30566:	0092      	lsls	r2, r2, #2
   30568:	d407      	bmi.n	3057a <interface_socket_fcntl+0x3a>
   3056a:	58e2      	ldr	r2, [r4, r3]
   3056c:	b292      	uxth	r2, r2
   3056e:	2a0a      	cmp	r2, #10
   30570:	d003      	beq.n	3057a <interface_socket_fcntl+0x3a>
   30572:	58e2      	ldr	r2, [r4, r3]
   30574:	b292      	uxth	r2, r2
   30576:	2a0b      	cmp	r2, #11
   30578:	d105      	bne.n	30586 <interface_socket_fcntl+0x46>
   3057a:	2023      	movs	r0, #35	; 0x23
   3057c:	f7f8 fe62 	bl	29244 <nrf_modem_os_errno_set>
   30580:	f04f 30ff 	mov.w	r0, #4294967295
   30584:	e7ee      	b.n	30564 <interface_socket_fcntl+0x24>
   30586:	58e2      	ldr	r2, [r4, r3]
   30588:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   3058c:	50e2      	str	r2, [r4, r3]
   3058e:	e7e9      	b.n	30564 <interface_socket_fcntl+0x24>
   30590:	2902      	cmp	r1, #2
   30592:	d103      	bne.n	3059c <interface_socket_fcntl+0x5c>
   30594:	58e0      	ldr	r0, [r4, r3]
   30596:	f3c0 7000 	ubfx	r0, r0, #28, #1
   3059a:	e7e3      	b.n	30564 <interface_socket_fcntl+0x24>
   3059c:	2016      	movs	r0, #22
   3059e:	e7ed      	b.n	3057c <interface_socket_fcntl+0x3c>
   305a0:	2009      	movs	r0, #9
   305a2:	e7eb      	b.n	3057c <interface_socket_fcntl+0x3c>
   305a4:	20017cec 	.word	0x20017cec

000305a8 <rpc_error_to_nrf_errno>:
   305a8:	286a      	cmp	r0, #106	; 0x6a
   305aa:	bf9a      	itte	ls
   305ac:	4b01      	ldrls	r3, [pc, #4]	; (305b4 <rpc_error_to_nrf_errno+0xc>)
   305ae:	5618      	ldrsbls	r0, [r3, r0]
   305b0:	202d      	movhi	r0, #45	; 0x2d
   305b2:	4770      	bx	lr
   305b4:	000426e1 	.word	0x000426e1

000305b8 <rpc_error_to_nrf_gai_errno>:
   305b8:	2805      	cmp	r0, #5
   305ba:	d013      	beq.n	305e4 <rpc_error_to_nrf_gai_errno+0x2c>
   305bc:	d807      	bhi.n	305ce <rpc_error_to_nrf_gai_errno+0x16>
   305be:	b170      	cbz	r0, 305de <rpc_error_to_nrf_gai_errno+0x26>
   305c0:	4b0b      	ldr	r3, [pc, #44]	; (305f0 <rpc_error_to_nrf_gai_errno+0x38>)
   305c2:	561b      	ldrsb	r3, [r3, r0]
   305c4:	4a0b      	ldr	r2, [pc, #44]	; (305f4 <rpc_error_to_nrf_gai_errno+0x3c>)
   305c6:	f240 1015 	movw	r0, #277	; 0x115
   305ca:	6013      	str	r3, [r2, #0]
   305cc:	4770      	bx	lr
   305ce:	2806      	cmp	r0, #6
   305d0:	d00b      	beq.n	305ea <rpc_error_to_nrf_gai_errno+0x32>
   305d2:	280d      	cmp	r0, #13
   305d4:	d009      	beq.n	305ea <rpc_error_to_nrf_gai_errno+0x32>
   305d6:	286a      	cmp	r0, #106	; 0x6a
   305d8:	d9f2      	bls.n	305c0 <rpc_error_to_nrf_gai_errno+0x8>
   305da:	232d      	movs	r3, #45	; 0x2d
   305dc:	e7f2      	b.n	305c4 <rpc_error_to_nrf_gai_errno+0xc>
   305de:	4b05      	ldr	r3, [pc, #20]	; (305f4 <rpc_error_to_nrf_gai_errno+0x3c>)
   305e0:	6018      	str	r0, [r3, #0]
   305e2:	4770      	bx	lr
   305e4:	f44f 708a 	mov.w	r0, #276	; 0x114
   305e8:	4770      	bx	lr
   305ea:	f240 1011 	movw	r0, #273	; 0x111
   305ee:	4770      	bx	lr
   305f0:	000426e1 	.word	0x000426e1
   305f4:	20017e80 	.word	0x20017e80

000305f8 <ip_interface_init>:
   305f8:	b510      	push	{r4, lr}
   305fa:	2400      	movs	r4, #0
   305fc:	4b06      	ldr	r3, [pc, #24]	; (30618 <ip_interface_init+0x20>)
   305fe:	2224      	movs	r2, #36	; 0x24
   30600:	601c      	str	r4, [r3, #0]
   30602:	4b06      	ldr	r3, [pc, #24]	; (3061c <ip_interface_init+0x24>)
   30604:	4621      	mov	r1, r4
   30606:	4806      	ldr	r0, [pc, #24]	; (30620 <ip_interface_init+0x28>)
   30608:	601c      	str	r4, [r3, #0]
   3060a:	f00d f83c 	bl	3d686 <memset>
   3060e:	2201      	movs	r2, #1
   30610:	4b04      	ldr	r3, [pc, #16]	; (30624 <ip_interface_init+0x2c>)
   30612:	4620      	mov	r0, r4
   30614:	701a      	strb	r2, [r3, #0]
   30616:	bd10      	pop	{r4, pc}
   30618:	20017e8c 	.word	0x20017e8c
   3061c:	20017e88 	.word	0x20017e88
   30620:	20017e90 	.word	0x20017e90
   30624:	2001901c 	.word	0x2001901c

00030628 <ip_interface_open>:
   30628:	b5f0      	push	{r4, r5, r6, r7, lr}
   3062a:	2302      	movs	r3, #2
   3062c:	460d      	mov	r5, r1
   3062e:	4611      	mov	r1, r2
   30630:	2200      	movs	r2, #0
   30632:	f04f 34ff 	mov.w	r4, #4294967295
   30636:	b085      	sub	sp, #20
   30638:	e9cd 2301 	strd	r2, r3, [sp, #4]
   3063c:	4b34      	ldr	r3, [pc, #208]	; (30710 <ip_interface_open+0xe8>)
   3063e:	4606      	mov	r6, r0
   30640:	781b      	ldrb	r3, [r3, #0]
   30642:	9403      	str	r4, [sp, #12]
   30644:	b92b      	cbnz	r3, 30652 <ip_interface_open+0x2a>
   30646:	2070      	movs	r0, #112	; 0x70
   30648:	f7f8 fdfc 	bl	29244 <nrf_modem_os_errno_set>
   3064c:	4620      	mov	r0, r4
   3064e:	b005      	add	sp, #20
   30650:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30652:	f020 0308 	bic.w	r3, r0, #8
   30656:	2b02      	cmp	r3, #2
   30658:	d003      	beq.n	30662 <ip_interface_open+0x3a>
   3065a:	2805      	cmp	r0, #5
   3065c:	d001      	beq.n	30662 <ip_interface_open+0x3a>
   3065e:	202f      	movs	r0, #47	; 0x2f
   30660:	e7f2      	b.n	30648 <ip_interface_open+0x20>
   30662:	1e6b      	subs	r3, r5, #1
   30664:	2b02      	cmp	r3, #2
   30666:	d814      	bhi.n	30692 <ip_interface_open+0x6a>
   30668:	4628      	mov	r0, r5
   3066a:	aa02      	add	r2, sp, #8
   3066c:	f00b feb1 	bl	3c3d2 <protocol_verify>
   30670:	4607      	mov	r7, r0
   30672:	2800      	cmp	r0, #0
   30674:	d149      	bne.n	3070a <ip_interface_open+0xe2>
   30676:	4629      	mov	r1, r5
   30678:	4a26      	ldr	r2, [pc, #152]	; (30714 <ip_interface_open+0xec>)
   3067a:	a801      	add	r0, sp, #4
   3067c:	f7ff fe56 	bl	3032c <interface_socket_allocate>
   30680:	9b01      	ldr	r3, [sp, #4]
   30682:	4604      	mov	r4, r0
   30684:	b95b      	cbnz	r3, 3069e <ip_interface_open+0x76>
   30686:	2669      	movs	r6, #105	; 0x69
   30688:	4620      	mov	r0, r4
   3068a:	f7ff fe75 	bl	30378 <interface_socket_free>
   3068e:	4630      	mov	r0, r6
   30690:	e000      	b.n	30694 <ip_interface_open+0x6c>
   30692:	2016      	movs	r0, #22
   30694:	f7f8 fdd6 	bl	29244 <nrf_modem_os_errno_set>
   30698:	f04f 34ff 	mov.w	r4, #4294967295
   3069c:	e7d6      	b.n	3064c <ip_interface_open+0x24>
   3069e:	9a02      	ldr	r2, [sp, #8]
   306a0:	e9c3 6503 	strd	r6, r5, [r3, #12]
   306a4:	615a      	str	r2, [r3, #20]
   306a6:	f04f 31ff 	mov.w	r1, #4294967295
   306aa:	463b      	mov	r3, r7
   306ac:	f247 0201 	movw	r2, #28673	; 0x7001
   306b0:	f00b fed2 	bl	3c458 <ip_interface_request_create>
   306b4:	2800      	cmp	r0, #0
   306b6:	d0e6      	beq.n	30686 <ip_interface_open+0x5e>
   306b8:	6883      	ldr	r3, [r0, #8]
   306ba:	3e02      	subs	r6, #2
   306bc:	2e08      	cmp	r6, #8
   306be:	f103 030c 	add.w	r3, r3, #12
   306c2:	6083      	str	r3, [r0, #8]
   306c4:	bf98      	it	ls
   306c6:	4b14      	ldrls	r3, [pc, #80]	; (30718 <ip_interface_open+0xf0>)
   306c8:	f247 0101 	movw	r1, #28673	; 0x7001
   306cc:	bf98      	it	ls
   306ce:	579f      	ldrsbls	r7, [r3, r6]
   306d0:	9b02      	ldr	r3, [sp, #8]
   306d2:	6147      	str	r7, [r0, #20]
   306d4:	61c3      	str	r3, [r0, #28]
   306d6:	6185      	str	r5, [r0, #24]
   306d8:	f00b fcd1 	bl	3c07e <rpc_ip_client_request_send>
   306dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   306e0:	2102      	movs	r1, #2
   306e2:	4620      	mov	r0, r4
   306e4:	ab03      	add	r3, sp, #12
   306e6:	f00b fecf 	bl	3c488 <ip_interface_wait>
   306ea:	4606      	mov	r6, r0
   306ec:	2800      	cmp	r0, #0
   306ee:	d1cb      	bne.n	30688 <ip_interface_open+0x60>
   306f0:	3d02      	subs	r5, #2
   306f2:	2d01      	cmp	r5, #1
   306f4:	d8aa      	bhi.n	3064c <ip_interface_open+0x24>
   306f6:	9b01      	ldr	r3, [sp, #4]
   306f8:	681a      	ldr	r2, [r3, #0]
   306fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   306fe:	601a      	str	r2, [r3, #0]
   30700:	681a      	ldr	r2, [r3, #0]
   30702:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   30706:	601a      	str	r2, [r3, #0]
   30708:	e7a0      	b.n	3064c <ip_interface_open+0x24>
   3070a:	4604      	mov	r4, r0
   3070c:	e79e      	b.n	3064c <ip_interface_open+0x24>
   3070e:	bf00      	nop
   30710:	2001901c 	.word	0x2001901c
   30714:	0003c3bb 	.word	0x0003c3bb
   30718:	000426d3 	.word	0x000426d3

0003071c <ip_interface_close>:
   3071c:	f04f 33ff 	mov.w	r3, #4294967295
   30720:	b537      	push	{r0, r1, r2, r4, r5, lr}
   30722:	4605      	mov	r5, r0
   30724:	9301      	str	r3, [sp, #4]
   30726:	f7ff fe8b 	bl	30440 <interface_socket_from_handle_get>
   3072a:	4604      	mov	r4, r0
   3072c:	b378      	cbz	r0, 3078e <ip_interface_close+0x72>
   3072e:	6981      	ldr	r1, [r0, #24]
   30730:	2300      	movs	r3, #0
   30732:	f247 0209 	movw	r2, #28681	; 0x7009
   30736:	4628      	mov	r0, r5
   30738:	f00b fe8e 	bl	3c458 <ip_interface_request_create>
   3073c:	b368      	cbz	r0, 3079a <ip_interface_close+0x7e>
   3073e:	6823      	ldr	r3, [r4, #0]
   30740:	f247 0109 	movw	r1, #28681	; 0x7009
   30744:	0c1b      	lsrs	r3, r3, #16
   30746:	041b      	lsls	r3, r3, #16
   30748:	f043 030d 	orr.w	r3, r3, #13
   3074c:	6023      	str	r3, [r4, #0]
   3074e:	6823      	ldr	r3, [r4, #0]
   30750:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   30754:	6023      	str	r3, [r4, #0]
   30756:	6823      	ldr	r3, [r4, #0]
   30758:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3075c:	6023      	str	r3, [r4, #0]
   3075e:	4c10      	ldr	r4, [pc, #64]	; (307a0 <ip_interface_close+0x84>)
   30760:	f00b fc8d 	bl	3c07e <rpc_ip_client_request_send>
   30764:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30768:	210e      	movs	r1, #14
   3076a:	4628      	mov	r0, r5
   3076c:	ab01      	add	r3, sp, #4
   3076e:	f00b fe8b 	bl	3c488 <ip_interface_wait>
   30772:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   30776:	b120      	cbz	r0, 30782 <ip_interface_close+0x66>
   30778:	f00b fc8b 	bl	3c092 <rpc_ip_client_message_free>
   3077c:	2300      	movs	r3, #0
   3077e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   30782:	4628      	mov	r0, r5
   30784:	f7ff fdf8 	bl	30378 <interface_socket_free>
   30788:	2000      	movs	r0, #0
   3078a:	b003      	add	sp, #12
   3078c:	bd30      	pop	{r4, r5, pc}
   3078e:	2009      	movs	r0, #9
   30790:	f7f8 fd58 	bl	29244 <nrf_modem_os_errno_set>
   30794:	f04f 30ff 	mov.w	r0, #4294967295
   30798:	e7f7      	b.n	3078a <ip_interface_close+0x6e>
   3079a:	200c      	movs	r0, #12
   3079c:	e7f8      	b.n	30790 <ip_interface_close+0x74>
   3079e:	bf00      	nop
   307a0:	20017e90 	.word	0x20017e90

000307a4 <ip_interface_sendto>:
   307a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   307a8:	461f      	mov	r7, r3
   307aa:	f04f 3aff 	mov.w	sl, #4294967295
   307ae:	2364      	movs	r3, #100	; 0x64
   307b0:	b089      	sub	sp, #36	; 0x24
   307b2:	4606      	mov	r6, r0
   307b4:	4688      	mov	r8, r1
   307b6:	4614      	mov	r4, r2
   307b8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   307bc:	f8cd a010 	str.w	sl, [sp, #16]
   307c0:	9306      	str	r3, [sp, #24]
   307c2:	f7ff fe3d 	bl	30440 <interface_socket_from_handle_get>
   307c6:	4605      	mov	r5, r0
   307c8:	b930      	cbnz	r0, 307d8 <ip_interface_sendto+0x34>
   307ca:	2009      	movs	r0, #9
   307cc:	f7f8 fd3a 	bl	29244 <nrf_modem_os_errno_set>
   307d0:	4650      	mov	r0, sl
   307d2:	b009      	add	sp, #36	; 0x24
   307d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   307d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   307dc:	dd01      	ble.n	307e2 <ip_interface_sendto+0x3e>
   307de:	2028      	movs	r0, #40	; 0x28
   307e0:	e7f4      	b.n	307cc <ip_interface_sendto+0x28>
   307e2:	b11f      	cbz	r7, 307ec <ip_interface_sendto+0x48>
   307e4:	2f02      	cmp	r7, #2
   307e6:	d012      	beq.n	3080e <ip_interface_sendto+0x6a>
   307e8:	202d      	movs	r0, #45	; 0x2d
   307ea:	e7ef      	b.n	307cc <ip_interface_sendto+0x28>
   307ec:	6803      	ldr	r3, [r0, #0]
   307ee:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   307f2:	f3c3 7300 	ubfx	r3, r3, #28, #1
   307f6:	2c00      	cmp	r4, #0
   307f8:	9302      	str	r3, [sp, #8]
   307fa:	dd0a      	ble.n	30812 <ip_interface_sendto+0x6e>
   307fc:	f1b8 0f00 	cmp.w	r8, #0
   30800:	d107      	bne.n	30812 <ip_interface_sendto+0x6e>
   30802:	200e      	movs	r0, #14
   30804:	f7f8 fd1e 	bl	29244 <nrf_modem_os_errno_set>
   30808:	f04f 3aff 	mov.w	sl, #4294967295
   3080c:	e7e0      	b.n	307d0 <ip_interface_sendto+0x2c>
   3080e:	2300      	movs	r3, #0
   30810:	e7f1      	b.n	307f6 <ip_interface_sendto+0x52>
   30812:	f1b9 0f00 	cmp.w	r9, #0
   30816:	d012      	beq.n	3083e <ip_interface_sendto+0x9a>
   30818:	692b      	ldr	r3, [r5, #16]
   3081a:	2b01      	cmp	r3, #1
   3081c:	d101      	bne.n	30822 <ip_interface_sendto+0x7e>
   3081e:	2038      	movs	r0, #56	; 0x38
   30820:	e7f0      	b.n	30804 <ip_interface_sendto+0x60>
   30822:	68ea      	ldr	r2, [r5, #12]
   30824:	f8d9 3004 	ldr.w	r3, [r9, #4]
   30828:	429a      	cmp	r2, r3
   3082a:	d001      	beq.n	30830 <ip_interface_sendto+0x8c>
   3082c:	202f      	movs	r0, #47	; 0x2f
   3082e:	e7e9      	b.n	30804 <ip_interface_sendto+0x60>
   30830:	f899 3000 	ldrb.w	r3, [r9]
   30834:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   30836:	4293      	cmp	r3, r2
   30838:	d00b      	beq.n	30852 <ip_interface_sendto+0xae>
   3083a:	2016      	movs	r0, #22
   3083c:	e7e2      	b.n	30804 <ip_interface_sendto+0x60>
   3083e:	f247 0b06 	movw	fp, #28678	; 0x7006
   30842:	682b      	ldr	r3, [r5, #0]
   30844:	0399      	lsls	r1, r3, #14
   30846:	d409      	bmi.n	3085c <ip_interface_sendto+0xb8>
   30848:	682b      	ldr	r3, [r5, #0]
   3084a:	031a      	lsls	r2, r3, #12
   3084c:	d504      	bpl.n	30858 <ip_interface_sendto+0xb4>
   3084e:	68a8      	ldr	r0, [r5, #8]
   30850:	e7d8      	b.n	30804 <ip_interface_sendto+0x60>
   30852:	f247 0b07 	movw	fp, #28679	; 0x7007
   30856:	e7f4      	b.n	30842 <ip_interface_sendto+0x9e>
   30858:	2039      	movs	r0, #57	; 0x39
   3085a:	e7d3      	b.n	30804 <ip_interface_sendto+0x60>
   3085c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3085e:	f04f 0a00 	mov.w	sl, #0
   30862:	2b00      	cmp	r3, #0
   30864:	bf08      	it	eq
   30866:	f04f 33ff 	moveq.w	r3, #4294967295
   3086a:	9305      	str	r3, [sp, #20]
   3086c:	ea4b 4306 	orr.w	r3, fp, r6, lsl #16
   30870:	9303      	str	r3, [sp, #12]
   30872:	f8cd a01c 	str.w	sl, [sp, #28]
   30876:	4621      	mov	r1, r4
   30878:	a807      	add	r0, sp, #28
   3087a:	f00b fbf1 	bl	3c060 <rpc_ip_client_request_alloc>
   3087e:	9807      	ldr	r0, [sp, #28]
   30880:	b960      	cbnz	r0, 3089c <ip_interface_sendto+0xf8>
   30882:	9b02      	ldr	r3, [sp, #8]
   30884:	b92b      	cbnz	r3, 30892 <ip_interface_sendto+0xee>
   30886:	2000      	movs	r0, #0
   30888:	a906      	add	r1, sp, #24
   3088a:	f7f8 fc25 	bl	290d8 <nrf_modem_os_timedwait>
   3088e:	2023      	movs	r0, #35	; 0x23
   30890:	e7b8      	b.n	30804 <ip_interface_sendto+0x60>
   30892:	a905      	add	r1, sp, #20
   30894:	f7f8 fc20 	bl	290d8 <nrf_modem_os_timedwait>
   30898:	283c      	cmp	r0, #60	; 0x3c
   3089a:	d0f8      	beq.n	3088e <ip_interface_sendto+0xea>
   3089c:	9b07      	ldr	r3, [sp, #28]
   3089e:	2b00      	cmp	r3, #0
   308a0:	d0e9      	beq.n	30876 <ip_interface_sendto+0xd2>
   308a2:	220c      	movs	r2, #12
   308a4:	721a      	strb	r2, [r3, #8]
   308a6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   308a8:	f883 a009 	strb.w	sl, [r3, #9]
   308ac:	f883 a00a 	strb.w	sl, [r3, #10]
   308b0:	f883 a00b 	strb.w	sl, [r3, #11]
   308b4:	615f      	str	r7, [r3, #20]
   308b6:	b11a      	cbz	r2, 308c0 <ip_interface_sendto+0x11c>
   308b8:	433a      	orrs	r2, r7
   308ba:	615a      	str	r2, [r3, #20]
   308bc:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
   308c0:	f1b9 0f00 	cmp.w	r9, #0
   308c4:	d011      	beq.n	308ea <ip_interface_sendto+0x146>
   308c6:	f103 021c 	add.w	r2, r3, #28
   308ca:	9201      	str	r2, [sp, #4]
   308cc:	f103 0218 	add.w	r2, r3, #24
   308d0:	9200      	str	r2, [sp, #0]
   308d2:	4649      	mov	r1, r9
   308d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   308d6:	331a      	adds	r3, #26
   308d8:	68e8      	ldr	r0, [r5, #12]
   308da:	f00b fd98 	bl	3c40e <ip_addr_parse>
   308de:	9a07      	ldr	r2, [sp, #28]
   308e0:	6893      	ldr	r3, [r2, #8]
   308e2:	8b51      	ldrh	r1, [r2, #26]
   308e4:	3304      	adds	r3, #4
   308e6:	440b      	add	r3, r1
   308e8:	6093      	str	r3, [r2, #8]
   308ea:	69aa      	ldr	r2, [r5, #24]
   308ec:	9b07      	ldr	r3, [sp, #28]
   308ee:	611a      	str	r2, [r3, #16]
   308f0:	9a03      	ldr	r2, [sp, #12]
   308f2:	605c      	str	r4, [r3, #4]
   308f4:	60da      	str	r2, [r3, #12]
   308f6:	f1b8 0f00 	cmp.w	r8, #0
   308fa:	d004      	beq.n	30906 <ip_interface_sendto+0x162>
   308fc:	4622      	mov	r2, r4
   308fe:	4641      	mov	r1, r8
   30900:	6818      	ldr	r0, [r3, #0]
   30902:	f00c feb3 	bl	3d66c <memcpy>
   30906:	682b      	ldr	r3, [r5, #0]
   30908:	4659      	mov	r1, fp
   3090a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3090e:	9807      	ldr	r0, [sp, #28]
   30910:	602b      	str	r3, [r5, #0]
   30912:	f00b fbb4 	bl	3c07e <rpc_ip_client_request_send>
   30916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   3091a:	4630      	mov	r0, r6
   3091c:	4611      	mov	r1, r2
   3091e:	ab04      	add	r3, sp, #16
   30920:	f00b fdb2 	bl	3c488 <ip_interface_wait>
   30924:	b990      	cbnz	r0, 3094c <ip_interface_sendto+0x1a8>
   30926:	682a      	ldr	r2, [r5, #0]
   30928:	4f11      	ldr	r7, [pc, #68]	; (30970 <ip_interface_sendto+0x1cc>)
   3092a:	0113      	lsls	r3, r2, #4
   3092c:	bf48      	it	mi
   3092e:	682b      	ldrmi	r3, [r5, #0]
   30930:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   30934:	bf46      	itte	mi
   30936:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   3093a:	602b      	strmi	r3, [r5, #0]
   3093c:	6984      	ldrpl	r4, [r0, #24]
   3093e:	f00b fba8 	bl	3c092 <rpc_ip_client_message_free>
   30942:	2300      	movs	r3, #0
   30944:	46a2      	mov	sl, r4
   30946:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
   3094a:	e741      	b.n	307d0 <ip_interface_sendto+0x2c>
   3094c:	682b      	ldr	r3, [r5, #0]
   3094e:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   30952:	f47f af7c 	bne.w	3084e <ip_interface_sendto+0xaa>
   30956:	280c      	cmp	r0, #12
   30958:	f47f af54 	bne.w	30804 <ip_interface_sendto+0x60>
   3095c:	9a02      	ldr	r2, [sp, #8]
   3095e:	2a00      	cmp	r2, #0
   30960:	d091      	beq.n	30886 <ip_interface_sendto+0xe2>
   30962:	4618      	mov	r0, r3
   30964:	a905      	add	r1, sp, #20
   30966:	f7f8 fbb7 	bl	290d8 <nrf_modem_os_timedwait>
   3096a:	283c      	cmp	r0, #60	; 0x3c
   3096c:	d181      	bne.n	30872 <ip_interface_sendto+0xce>
   3096e:	e78e      	b.n	3088e <ip_interface_sendto+0xea>
   30970:	20017e90 	.word	0x20017e90

00030974 <ip_interface_socketoption_get>:
   30974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30978:	461c      	mov	r4, r3
   3097a:	f04f 33ff 	mov.w	r3, #4294967295
   3097e:	b085      	sub	sp, #20
   30980:	4607      	mov	r7, r0
   30982:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
   30986:	460d      	mov	r5, r1
   30988:	4692      	mov	sl, r2
   3098a:	9303      	str	r3, [sp, #12]
   3098c:	f1b9 0f00 	cmp.w	r9, #0
   30990:	d065      	beq.n	30a5e <ip_interface_socketoption_get+0xea>
   30992:	f8d8 3000 	ldr.w	r3, [r8]
   30996:	2b00      	cmp	r3, #0
   30998:	d061      	beq.n	30a5e <ip_interface_socketoption_get+0xea>
   3099a:	680b      	ldr	r3, [r1, #0]
   3099c:	025e      	lsls	r6, r3, #9
   3099e:	d460      	bmi.n	30a62 <ip_interface_socketoption_get+0xee>
   309a0:	680b      	ldr	r3, [r1, #0]
   309a2:	0219      	lsls	r1, r3, #8
   309a4:	d45d      	bmi.n	30a62 <ip_interface_socketoption_get+0xee>
   309a6:	682b      	ldr	r3, [r5, #0]
   309a8:	01da      	lsls	r2, r3, #7
   309aa:	d45a      	bmi.n	30a62 <ip_interface_socketoption_get+0xee>
   309ac:	682b      	ldr	r3, [r5, #0]
   309ae:	019b      	lsls	r3, r3, #6
   309b0:	d457      	bmi.n	30a62 <ip_interface_socketoption_get+0xee>
   309b2:	682b      	ldr	r3, [r5, #0]
   309b4:	f247 0204 	movw	r2, #28676	; 0x7004
   309b8:	9301      	str	r3, [sp, #4]
   309ba:	682b      	ldr	r3, [r5, #0]
   309bc:	69a9      	ldr	r1, [r5, #24]
   309be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   309c2:	602b      	str	r3, [r5, #0]
   309c4:	f8d8 3000 	ldr.w	r3, [r8]
   309c8:	f00b fd46 	bl	3c458 <ip_interface_request_create>
   309cc:	4606      	mov	r6, r0
   309ce:	2800      	cmp	r0, #0
   309d0:	d043      	beq.n	30a5a <ip_interface_socketoption_get+0xe6>
   309d2:	6883      	ldr	r3, [r0, #8]
   309d4:	f8c0 a014 	str.w	sl, [r0, #20]
   309d8:	3308      	adds	r3, #8
   309da:	6083      	str	r3, [r0, #8]
   309dc:	6184      	str	r4, [r0, #24]
   309de:	f247 0104 	movw	r1, #28676	; 0x7004
   309e2:	f8d0 a000 	ldr.w	sl, [r0]
   309e6:	f00b fb4a 	bl	3c07e <rpc_ip_client_request_send>
   309ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   309ee:	4638      	mov	r0, r7
   309f0:	4611      	mov	r1, r2
   309f2:	ab03      	add	r3, sp, #12
   309f4:	f00b fd48 	bl	3c488 <ip_interface_wait>
   309f8:	4604      	mov	r4, r0
   309fa:	b9d8      	cbnz	r0, 30a34 <ip_interface_socketoption_get+0xc0>
   309fc:	4b1a      	ldr	r3, [pc, #104]	; (30a68 <ip_interface_socketoption_get+0xf4>)
   309fe:	f8d8 2000 	ldr.w	r2, [r8]
   30a02:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   30a06:	469b      	mov	fp, r3
   30a08:	b1f9      	cbz	r1, 30a4a <ip_interface_socketoption_get+0xd6>
   30a0a:	6848      	ldr	r0, [r1, #4]
   30a0c:	4290      	cmp	r0, r2
   30a0e:	d81a      	bhi.n	30a46 <ip_interface_socketoption_get+0xd2>
   30a10:	6809      	ldr	r1, [r1, #0]
   30a12:	b1c1      	cbz	r1, 30a46 <ip_interface_socketoption_get+0xd2>
   30a14:	4602      	mov	r2, r0
   30a16:	4648      	mov	r0, r9
   30a18:	f00c fe28 	bl	3d66c <memcpy>
   30a1c:	f85b 2027 	ldr.w	r2, [fp, r7, lsl #2]
   30a20:	6852      	ldr	r2, [r2, #4]
   30a22:	f8c8 2000 	str.w	r2, [r8]
   30a26:	f85b 0027 	ldr.w	r0, [fp, r7, lsl #2]
   30a2a:	f00b fb32 	bl	3c092 <rpc_ip_client_message_free>
   30a2e:	2200      	movs	r2, #0
   30a30:	f84b 2027 	str.w	r2, [fp, r7, lsl #2]
   30a34:	4650      	mov	r0, sl
   30a36:	f00b fb2f 	bl	3c098 <rpc_ip_client_data_free>
   30a3a:	9b01      	ldr	r3, [sp, #4]
   30a3c:	602b      	str	r3, [r5, #0]
   30a3e:	4620      	mov	r0, r4
   30a40:	b005      	add	sp, #20
   30a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a46:	2416      	movs	r4, #22
   30a48:	e7ed      	b.n	30a26 <ip_interface_socketoption_get+0xb2>
   30a4a:	4651      	mov	r1, sl
   30a4c:	4648      	mov	r0, r9
   30a4e:	f00c fe0d 	bl	3d66c <memcpy>
   30a52:	6873      	ldr	r3, [r6, #4]
   30a54:	f8c8 3000 	str.w	r3, [r8]
   30a58:	e7ec      	b.n	30a34 <ip_interface_socketoption_get+0xc0>
   30a5a:	240c      	movs	r4, #12
   30a5c:	e7ed      	b.n	30a3a <ip_interface_socketoption_get+0xc6>
   30a5e:	2416      	movs	r4, #22
   30a60:	e7ed      	b.n	30a3e <ip_interface_socketoption_get+0xca>
   30a62:	2423      	movs	r4, #35	; 0x23
   30a64:	e7eb      	b.n	30a3e <ip_interface_socketoption_get+0xca>
   30a66:	bf00      	nop
   30a68:	20017e90 	.word	0x20017e90

00030a6c <ip_interface_bind>:
   30a6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30a70:	f04f 33ff 	mov.w	r3, #4294967295
   30a74:	4607      	mov	r7, r0
   30a76:	4690      	mov	r8, r2
   30a78:	460e      	mov	r6, r1
   30a7a:	9303      	str	r3, [sp, #12]
   30a7c:	2900      	cmp	r1, #0
   30a7e:	d048      	beq.n	30b12 <ip_interface_bind+0xa6>
   30a80:	2a00      	cmp	r2, #0
   30a82:	d046      	beq.n	30b12 <ip_interface_bind+0xa6>
   30a84:	f7ff fcdc 	bl	30440 <interface_socket_from_handle_get>
   30a88:	4605      	mov	r5, r0
   30a8a:	2800      	cmp	r0, #0
   30a8c:	d043      	beq.n	30b16 <ip_interface_bind+0xaa>
   30a8e:	6803      	ldr	r3, [r0, #0]
   30a90:	b29b      	uxth	r3, r3
   30a92:	2b02      	cmp	r3, #2
   30a94:	d13f      	bne.n	30b16 <ip_interface_bind+0xaa>
   30a96:	6981      	ldr	r1, [r0, #24]
   30a98:	2300      	movs	r3, #0
   30a9a:	f247 0205 	movw	r2, #28677	; 0x7005
   30a9e:	4638      	mov	r0, r7
   30aa0:	f00b fcda 	bl	3c458 <ip_interface_request_create>
   30aa4:	4604      	mov	r4, r0
   30aa6:	2800      	cmp	r0, #0
   30aa8:	d037      	beq.n	30b1a <ip_interface_bind+0xae>
   30aaa:	6883      	ldr	r3, [r0, #8]
   30aac:	4642      	mov	r2, r8
   30aae:	3304      	adds	r3, #4
   30ab0:	6083      	str	r3, [r0, #8]
   30ab2:	f100 0318 	add.w	r3, r0, #24
   30ab6:	9301      	str	r3, [sp, #4]
   30ab8:	f100 0314 	add.w	r3, r0, #20
   30abc:	9300      	str	r3, [sp, #0]
   30abe:	4631      	mov	r1, r6
   30ac0:	f100 0316 	add.w	r3, r0, #22
   30ac4:	68e8      	ldr	r0, [r5, #12]
   30ac6:	f00b fca2 	bl	3c40e <ip_addr_parse>
   30aca:	b9d8      	cbnz	r0, 30b04 <ip_interface_bind+0x98>
   30acc:	68a3      	ldr	r3, [r4, #8]
   30ace:	8ae2      	ldrh	r2, [r4, #22]
   30ad0:	4e13      	ldr	r6, [pc, #76]	; (30b20 <ip_interface_bind+0xb4>)
   30ad2:	4413      	add	r3, r2
   30ad4:	60a3      	str	r3, [r4, #8]
   30ad6:	682b      	ldr	r3, [r5, #0]
   30ad8:	f247 0105 	movw	r1, #28677	; 0x7005
   30adc:	4033      	ands	r3, r6
   30ade:	f043 0303 	orr.w	r3, r3, #3
   30ae2:	4620      	mov	r0, r4
   30ae4:	602b      	str	r3, [r5, #0]
   30ae6:	f00b faca 	bl	3c07e <rpc_ip_client_request_send>
   30aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30aee:	2104      	movs	r1, #4
   30af0:	4638      	mov	r0, r7
   30af2:	ab03      	add	r3, sp, #12
   30af4:	f00b fcc8 	bl	3c488 <ip_interface_wait>
   30af8:	b140      	cbz	r0, 30b0c <ip_interface_bind+0xa0>
   30afa:	682b      	ldr	r3, [r5, #0]
   30afc:	4033      	ands	r3, r6
   30afe:	f043 0302 	orr.w	r3, r3, #2
   30b02:	602b      	str	r3, [r5, #0]
   30b04:	f7f8 fb9e 	bl	29244 <nrf_modem_os_errno_set>
   30b08:	f04f 30ff 	mov.w	r0, #4294967295
   30b0c:	b004      	add	sp, #16
   30b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30b12:	2016      	movs	r0, #22
   30b14:	e7f6      	b.n	30b04 <ip_interface_bind+0x98>
   30b16:	2009      	movs	r0, #9
   30b18:	e7f4      	b.n	30b04 <ip_interface_bind+0x98>
   30b1a:	200c      	movs	r0, #12
   30b1c:	e7f2      	b.n	30b04 <ip_interface_bind+0x98>
   30b1e:	bf00      	nop
   30b20:	ffff0000 	.word	0xffff0000

00030b24 <ip_interface_listen>:
   30b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30b26:	4605      	mov	r5, r0
   30b28:	f7ff fc8a 	bl	30440 <interface_socket_from_handle_get>
   30b2c:	4604      	mov	r4, r0
   30b2e:	2800      	cmp	r0, #0
   30b30:	d038      	beq.n	30ba4 <ip_interface_listen+0x80>
   30b32:	6803      	ldr	r3, [r0, #0]
   30b34:	b29b      	uxth	r3, r3
   30b36:	2b04      	cmp	r3, #4
   30b38:	d003      	beq.n	30b42 <ip_interface_listen+0x1e>
   30b3a:	6803      	ldr	r3, [r0, #0]
   30b3c:	b29b      	uxth	r3, r3
   30b3e:	2b0b      	cmp	r3, #11
   30b40:	d132      	bne.n	30ba8 <ip_interface_listen+0x84>
   30b42:	2100      	movs	r1, #0
   30b44:	4628      	mov	r0, r5
   30b46:	4a1b      	ldr	r2, [pc, #108]	; (30bb4 <ip_interface_listen+0x90>)
   30b48:	f7ff fc22 	bl	30390 <interface_socket_packet_handler_update>
   30b4c:	4603      	mov	r3, r0
   30b4e:	bb68      	cbnz	r0, 30bac <ip_interface_listen+0x88>
   30b50:	f247 0208 	movw	r2, #28680	; 0x7008
   30b54:	4628      	mov	r0, r5
   30b56:	69a1      	ldr	r1, [r4, #24]
   30b58:	f00b fc7e 	bl	3c458 <ip_interface_request_create>
   30b5c:	b340      	cbz	r0, 30bb0 <ip_interface_listen+0x8c>
   30b5e:	6823      	ldr	r3, [r4, #0]
   30b60:	4e15      	ldr	r6, [pc, #84]	; (30bb8 <ip_interface_listen+0x94>)
   30b62:	6882      	ldr	r2, [r0, #8]
   30b64:	4033      	ands	r3, r6
   30b66:	3204      	adds	r2, #4
   30b68:	f043 0306 	orr.w	r3, r3, #6
   30b6c:	6082      	str	r2, [r0, #8]
   30b6e:	f247 0108 	movw	r1, #28680	; 0x7008
   30b72:	6023      	str	r3, [r4, #0]
   30b74:	f00b fa83 	bl	3c07e <rpc_ip_client_request_send>
   30b78:	f04f 33ff 	mov.w	r3, #4294967295
   30b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30b80:	9301      	str	r3, [sp, #4]
   30b82:	2107      	movs	r1, #7
   30b84:	4628      	mov	r0, r5
   30b86:	ab01      	add	r3, sp, #4
   30b88:	f00b fc7e 	bl	3c488 <ip_interface_wait>
   30b8c:	b140      	cbz	r0, 30ba0 <ip_interface_listen+0x7c>
   30b8e:	6823      	ldr	r3, [r4, #0]
   30b90:	4033      	ands	r3, r6
   30b92:	f043 0304 	orr.w	r3, r3, #4
   30b96:	6023      	str	r3, [r4, #0]
   30b98:	f7f8 fb54 	bl	29244 <nrf_modem_os_errno_set>
   30b9c:	f04f 30ff 	mov.w	r0, #4294967295
   30ba0:	b002      	add	sp, #8
   30ba2:	bd70      	pop	{r4, r5, r6, pc}
   30ba4:	2009      	movs	r0, #9
   30ba6:	e7f7      	b.n	30b98 <ip_interface_listen+0x74>
   30ba8:	2016      	movs	r0, #22
   30baa:	e7f5      	b.n	30b98 <ip_interface_listen+0x74>
   30bac:	2023      	movs	r0, #35	; 0x23
   30bae:	e7f3      	b.n	30b98 <ip_interface_listen+0x74>
   30bb0:	200c      	movs	r0, #12
   30bb2:	e7f1      	b.n	30b98 <ip_interface_listen+0x74>
   30bb4:	0003c3bb 	.word	0x0003c3bb
   30bb8:	ffff0000 	.word	0xffff0000

00030bbc <ip_interface_accept>:
   30bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30bc0:	2500      	movs	r5, #0
   30bc2:	4680      	mov	r8, r0
   30bc4:	460f      	mov	r7, r1
   30bc6:	4692      	mov	sl, r2
   30bc8:	9500      	str	r5, [sp, #0]
   30bca:	f7ff fc39 	bl	30440 <interface_socket_from_handle_get>
   30bce:	4604      	mov	r4, r0
   30bd0:	2800      	cmp	r0, #0
   30bd2:	f000 80c2 	beq.w	30d5a <ip_interface_accept+0x19e>
   30bd6:	6903      	ldr	r3, [r0, #16]
   30bd8:	2b01      	cmp	r3, #1
   30bda:	f040 80c1 	bne.w	30d60 <ip_interface_accept+0x1a4>
   30bde:	6803      	ldr	r3, [r0, #0]
   30be0:	b29b      	uxth	r3, r3
   30be2:	2b07      	cmp	r3, #7
   30be4:	f040 80be 	bne.w	30d64 <ip_interface_accept+0x1a8>
   30be8:	f04f 33ff 	mov.w	r3, #4294967295
   30bec:	9301      	str	r3, [sp, #4]
   30bee:	6803      	ldr	r3, [r0, #0]
   30bf0:	f013 5980 	ands.w	r9, r3, #268435456	; 0x10000000
   30bf4:	d15a      	bne.n	30cac <ip_interface_accept+0xf0>
   30bf6:	6803      	ldr	r3, [r0, #0]
   30bf8:	03db      	lsls	r3, r3, #15
   30bfa:	d45b      	bmi.n	30cb4 <ip_interface_accept+0xf8>
   30bfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   30c00:	4640      	mov	r0, r8
   30c02:	4611      	mov	r1, r2
   30c04:	ab01      	add	r3, sp, #4
   30c06:	f00b fc3f 	bl	3c488 <ip_interface_wait>
   30c0a:	4606      	mov	r6, r0
   30c0c:	6825      	ldr	r5, [r4, #0]
   30c0e:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   30c12:	d051      	beq.n	30cb8 <ip_interface_accept+0xfc>
   30c14:	4668      	mov	r0, sp
   30c16:	4a55      	ldr	r2, [pc, #340]	; (30d6c <ip_interface_accept+0x1b0>)
   30c18:	6921      	ldr	r1, [r4, #16]
   30c1a:	f7ff fb87 	bl	3032c <interface_socket_allocate>
   30c1e:	9b00      	ldr	r3, [sp, #0]
   30c20:	4605      	mov	r5, r0
   30c22:	2b00      	cmp	r3, #0
   30c24:	f000 80a0 	beq.w	30d68 <ip_interface_accept+0x1ac>
   30c28:	6962      	ldr	r2, [r4, #20]
   30c2a:	4640      	mov	r0, r8
   30c2c:	615a      	str	r2, [r3, #20]
   30c2e:	68e2      	ldr	r2, [r4, #12]
   30c30:	69a1      	ldr	r1, [r4, #24]
   30c32:	60da      	str	r2, [r3, #12]
   30c34:	6922      	ldr	r2, [r4, #16]
   30c36:	611a      	str	r2, [r3, #16]
   30c38:	2300      	movs	r3, #0
   30c3a:	f247 020c 	movw	r2, #28684	; 0x700c
   30c3e:	f00b fc0b 	bl	3c458 <ip_interface_request_create>
   30c42:	2800      	cmp	r0, #0
   30c44:	f000 8090 	beq.w	30d68 <ip_interface_accept+0x1ac>
   30c48:	6823      	ldr	r3, [r4, #0]
   30c4a:	f8df b128 	ldr.w	fp, [pc, #296]	; 30d74 <ip_interface_accept+0x1b8>
   30c4e:	f247 010c 	movw	r1, #28684	; 0x700c
   30c52:	ea03 030b 	and.w	r3, r3, fp
   30c56:	f043 0308 	orr.w	r3, r3, #8
   30c5a:	6023      	str	r3, [r4, #0]
   30c5c:	f00b fa0f 	bl	3c07e <rpc_ip_client_request_send>
   30c60:	6823      	ldr	r3, [r4, #0]
   30c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30c66:	ea23 0309 	bic.w	r3, r3, r9
   30c6a:	6023      	str	r3, [r4, #0]
   30c6c:	2109      	movs	r1, #9
   30c6e:	ab01      	add	r3, sp, #4
   30c70:	4640      	mov	r0, r8
   30c72:	f00b fc09 	bl	3c488 <ip_interface_wait>
   30c76:	6823      	ldr	r3, [r4, #0]
   30c78:	4606      	mov	r6, r0
   30c7a:	ea43 0309 	orr.w	r3, r3, r9
   30c7e:	6023      	str	r3, [r4, #0]
   30c80:	b1e0      	cbz	r0, 30cbc <ip_interface_accept+0x100>
   30c82:	6823      	ldr	r3, [r4, #0]
   30c84:	ea03 030b 	and.w	r3, r3, fp
   30c88:	f043 0307 	orr.w	r3, r3, #7
   30c8c:	6023      	str	r3, [r4, #0]
   30c8e:	6823      	ldr	r3, [r4, #0]
   30c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   30c94:	6023      	str	r3, [r4, #0]
   30c96:	9b00      	ldr	r3, [sp, #0]
   30c98:	b113      	cbz	r3, 30ca0 <ip_interface_accept+0xe4>
   30c9a:	4628      	mov	r0, r5
   30c9c:	f7ff fb6c 	bl	30378 <interface_socket_free>
   30ca0:	4630      	mov	r0, r6
   30ca2:	f7f8 facf 	bl	29244 <nrf_modem_os_errno_set>
   30ca6:	f04f 30ff 	mov.w	r0, #4294967295
   30caa:	e041      	b.n	30d30 <ip_interface_accept+0x174>
   30cac:	2623      	movs	r6, #35	; 0x23
   30cae:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
   30cb2:	e7ab      	b.n	30c0c <ip_interface_accept+0x50>
   30cb4:	2616      	movs	r6, #22
   30cb6:	e7a9      	b.n	30c0c <ip_interface_accept+0x50>
   30cb8:	2e00      	cmp	r6, #0
   30cba:	d1ec      	bne.n	30c96 <ip_interface_accept+0xda>
   30cbc:	4e2c      	ldr	r6, [pc, #176]	; (30d70 <ip_interface_accept+0x1b4>)
   30cbe:	9b00      	ldr	r3, [sp, #0]
   30cc0:	f856 1028 	ldr.w	r1, [r6, r8, lsl #2]
   30cc4:	698a      	ldr	r2, [r1, #24]
   30cc6:	619a      	str	r2, [r3, #24]
   30cc8:	b197      	cbz	r7, 30cf0 <ip_interface_accept+0x134>
   30cca:	68db      	ldr	r3, [r3, #12]
   30ccc:	2b0a      	cmp	r3, #10
   30cce:	d132      	bne.n	30d36 <ip_interface_accept+0x17a>
   30cd0:	f8da 2000 	ldr.w	r2, [sl]
   30cd4:	2a24      	cmp	r2, #36	; 0x24
   30cd6:	d10b      	bne.n	30cf0 <ip_interface_accept+0x134>
   30cd8:	703a      	strb	r2, [r7, #0]
   30cda:	607b      	str	r3, [r7, #4]
   30cdc:	7f4a      	ldrb	r2, [r1, #29]
   30cde:	7f0b      	ldrb	r3, [r1, #28]
   30ce0:	3120      	adds	r1, #32
   30ce2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   30ce6:	2210      	movs	r2, #16
   30ce8:	813b      	strh	r3, [r7, #8]
   30cea:	18b8      	adds	r0, r7, r2
   30cec:	f00c fcbe 	bl	3d66c <memcpy>
   30cf0:	9b00      	ldr	r3, [sp, #0]
   30cf2:	4920      	ldr	r1, [pc, #128]	; (30d74 <ip_interface_accept+0x1b8>)
   30cf4:	681a      	ldr	r2, [r3, #0]
   30cf6:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
   30cfa:	400a      	ands	r2, r1
   30cfc:	f042 0205 	orr.w	r2, r2, #5
   30d00:	601a      	str	r2, [r3, #0]
   30d02:	681a      	ldr	r2, [r3, #0]
   30d04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   30d08:	601a      	str	r2, [r3, #0]
   30d0a:	681a      	ldr	r2, [r3, #0]
   30d0c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   30d10:	601a      	str	r2, [r3, #0]
   30d12:	6823      	ldr	r3, [r4, #0]
   30d14:	400b      	ands	r3, r1
   30d16:	f043 0307 	orr.w	r3, r3, #7
   30d1a:	6023      	str	r3, [r4, #0]
   30d1c:	6823      	ldr	r3, [r4, #0]
   30d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   30d22:	6023      	str	r3, [r4, #0]
   30d24:	f00b f9b5 	bl	3c092 <rpc_ip_client_message_free>
   30d28:	2300      	movs	r3, #0
   30d2a:	4628      	mov	r0, r5
   30d2c:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
   30d30:	b003      	add	sp, #12
   30d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d36:	2b02      	cmp	r3, #2
   30d38:	d1da      	bne.n	30cf0 <ip_interface_accept+0x134>
   30d3a:	f8da 2000 	ldr.w	r2, [sl]
   30d3e:	2a10      	cmp	r2, #16
   30d40:	d1d6      	bne.n	30cf0 <ip_interface_accept+0x134>
   30d42:	703a      	strb	r2, [r7, #0]
   30d44:	607b      	str	r3, [r7, #4]
   30d46:	7f4a      	ldrb	r2, [r1, #29]
   30d48:	7f0b      	ldrb	r3, [r1, #28]
   30d4a:	f107 000c 	add.w	r0, r7, #12
   30d4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   30d52:	813b      	strh	r3, [r7, #8]
   30d54:	2204      	movs	r2, #4
   30d56:	3120      	adds	r1, #32
   30d58:	e7c8      	b.n	30cec <ip_interface_accept+0x130>
   30d5a:	2609      	movs	r6, #9
   30d5c:	4605      	mov	r5, r0
   30d5e:	e79a      	b.n	30c96 <ip_interface_accept+0xda>
   30d60:	262d      	movs	r6, #45	; 0x2d
   30d62:	e798      	b.n	30c96 <ip_interface_accept+0xda>
   30d64:	2616      	movs	r6, #22
   30d66:	e796      	b.n	30c96 <ip_interface_accept+0xda>
   30d68:	260c      	movs	r6, #12
   30d6a:	e794      	b.n	30c96 <ip_interface_accept+0xda>
   30d6c:	0003c3bb 	.word	0x0003c3bb
   30d70:	20017e90 	.word	0x20017e90
   30d74:	ffff0000 	.word	0xffff0000

00030d78 <ip_interface_setopt>:
   30d78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30d7c:	2901      	cmp	r1, #1
   30d7e:	4607      	mov	r7, r0
   30d80:	4690      	mov	r8, r2
   30d82:	461e      	mov	r6, r3
   30d84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   30d86:	d008      	beq.n	30d9a <ip_interface_setopt+0x22>
   30d88:	202a      	movs	r0, #42	; 0x2a
   30d8a:	f7f8 fa5b 	bl	29244 <nrf_modem_os_errno_set>
   30d8e:	f04f 34ff 	mov.w	r4, #4294967295
   30d92:	4620      	mov	r0, r4
   30d94:	b004      	add	sp, #16
   30d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30d9a:	f7ff fb51 	bl	30440 <interface_socket_from_handle_get>
   30d9e:	4605      	mov	r5, r0
   30da0:	b908      	cbnz	r0, 30da6 <ip_interface_setopt+0x2e>
   30da2:	2009      	movs	r0, #9
   30da4:	e7f1      	b.n	30d8a <ip_interface_setopt+0x12>
   30da6:	f1a8 0319 	sub.w	r3, r8, #25
   30daa:	2b1e      	cmp	r3, #30
   30dac:	f200 8090 	bhi.w	30ed0 <ip_interface_setopt+0x158>
   30db0:	e8df f003 	tbb	[pc, r3]
   30db4:	8e8e8e10 	.word	0x8e8e8e10
   30db8:	5b53478e 	.word	0x5b53478e
   30dbc:	8e8e8e8e 	.word	0x8e8e8e8e
   30dc0:	638e8e8e 	.word	0x638e8e8e
   30dc4:	8e8e8e8e 	.word	0x8e8e8e8e
   30dc8:	8e8e8e8e 	.word	0x8e8e8e8e
   30dcc:	7d706b8e 	.word	0x7d706b8e
   30dd0:	8380      	.short	0x8380
   30dd2:	86          	.byte	0x86
   30dd3:	00          	.byte	0x00
   30dd4:	b90e      	cbnz	r6, 30dda <ip_interface_setopt+0x62>
   30dd6:	200e      	movs	r0, #14
   30dd8:	e7d7      	b.n	30d8a <ip_interface_setopt+0x12>
   30dda:	4630      	mov	r0, r6
   30ddc:	f7f0 fc47 	bl	2166e <strlen>
   30de0:	42a0      	cmp	r0, r4
   30de2:	d1f8      	bne.n	30dd6 <ip_interface_setopt+0x5e>
   30de4:	682b      	ldr	r3, [r5, #0]
   30de6:	b29b      	uxth	r3, r3
   30de8:	2b02      	cmp	r3, #2
   30dea:	d1da      	bne.n	30da2 <ip_interface_setopt+0x2a>
   30dec:	4631      	mov	r1, r6
   30dee:	68e8      	ldr	r0, [r5, #12]
   30df0:	f002 fb40 	bl	33474 <pdn_interface_pdn_id_get>
   30df4:	1c43      	adds	r3, r0, #1
   30df6:	4604      	mov	r4, r0
   30df8:	9003      	str	r0, [sp, #12]
   30dfa:	d113      	bne.n	30e24 <ip_interface_setopt+0xac>
   30dfc:	4630      	mov	r0, r6
   30dfe:	4938      	ldr	r1, [pc, #224]	; (30ee0 <ip_interface_setopt+0x168>)
   30e00:	f00c fde1 	bl	3d9c6 <strstr>
   30e04:	b108      	cbz	r0, 30e0a <ip_interface_setopt+0x92>
   30e06:	4286      	cmp	r6, r0
   30e08:	d003      	beq.n	30e12 <ip_interface_setopt+0x9a>
   30e0a:	2016      	movs	r0, #22
   30e0c:	f7f8 fa1a 	bl	29244 <nrf_modem_os_errno_set>
   30e10:	e7bf      	b.n	30d92 <ip_interface_setopt+0x1a>
   30e12:	4833      	ldr	r0, [pc, #204]	; (30ee0 <ip_interface_setopt+0x168>)
   30e14:	f7f0 fc2b 	bl	2166e <strlen>
   30e18:	220a      	movs	r2, #10
   30e1a:	2100      	movs	r1, #0
   30e1c:	4430      	add	r0, r6
   30e1e:	f007 fae9 	bl	383f4 <strtoul>
   30e22:	9003      	str	r0, [sp, #12]
   30e24:	2304      	movs	r3, #4
   30e26:	9301      	str	r3, [sp, #4]
   30e28:	ab03      	add	r3, sp, #12
   30e2a:	9300      	str	r3, [sp, #0]
   30e2c:	2208      	movs	r2, #8
   30e2e:	f243 0310 	movw	r3, #12304	; 0x3010
   30e32:	4629      	mov	r1, r5
   30e34:	4638      	mov	r0, r7
   30e36:	f00b fcc6 	bl	3c7c6 <ip_interface_socketoption_send>
   30e3a:	4604      	mov	r4, r0
   30e3c:	2800      	cmp	r0, #0
   30e3e:	d0a8      	beq.n	30d92 <ip_interface_setopt+0x1a>
   30e40:	e7a3      	b.n	30d8a <ip_interface_setopt+0x12>
   30e42:	4602      	mov	r2, r0
   30e44:	463b      	mov	r3, r7
   30e46:	f248 0101 	movw	r1, #32769	; 0x8001
   30e4a:	f44f 7000 	mov.w	r0, #512	; 0x200
   30e4e:	e9cd 6400 	strd	r6, r4, [sp]
   30e52:	f00b fd02 	bl	3c85a <setopt_check_and_send_int>
   30e56:	4604      	mov	r4, r0
   30e58:	e79b      	b.n	30d92 <ip_interface_setopt+0x1a>
   30e5a:	4602      	mov	r2, r0
   30e5c:	463b      	mov	r3, r7
   30e5e:	f244 0110 	movw	r1, #16400	; 0x4010
   30e62:	2004      	movs	r0, #4
   30e64:	e9cd 6400 	strd	r6, r4, [sp]
   30e68:	e7f3      	b.n	30e52 <ip_interface_setopt+0xda>
   30e6a:	4602      	mov	r2, r0
   30e6c:	463b      	mov	r3, r7
   30e6e:	f246 0110 	movw	r1, #24592	; 0x6010
   30e72:	2006      	movs	r0, #6
   30e74:	e9cd 6400 	strd	r6, r4, [sp]
   30e78:	e7eb      	b.n	30e52 <ip_interface_setopt+0xda>
   30e7a:	4602      	mov	r2, r0
   30e7c:	463b      	mov	r3, r7
   30e7e:	f241 0104 	movw	r1, #4100	; 0x1004
   30e82:	2008      	movs	r0, #8
   30e84:	e9cd 6400 	strd	r6, r4, [sp]
   30e88:	e7e3      	b.n	30e52 <ip_interface_setopt+0xda>
   30e8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   30e8e:	2400      	movs	r4, #0
   30e90:	62ab      	str	r3, [r5, #40]	; 0x28
   30e92:	e77e      	b.n	30d92 <ip_interface_setopt+0x1a>
   30e94:	2400      	movs	r4, #0
   30e96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   30e9a:	4622      	mov	r2, r4
   30e9c:	6283      	str	r3, [r0, #40]	; 0x28
   30e9e:	4621      	mov	r1, r4
   30ea0:	4623      	mov	r3, r4
   30ea2:	4638      	mov	r0, r7
   30ea4:	e9cd 4400 	strd	r4, r4, [sp]
   30ea8:	f7ff fc7c 	bl	307a4 <ip_interface_sendto>
   30eac:	e771      	b.n	30d92 <ip_interface_setopt+0x1a>
   30eae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   30eb2:	e7ec      	b.n	30e8e <ip_interface_setopt+0x116>
   30eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   30eb8:	e7e9      	b.n	30e8e <ip_interface_setopt+0x116>
   30eba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30ebe:	e7e6      	b.n	30e8e <ip_interface_setopt+0x116>
   30ec0:	4602      	mov	r2, r0
   30ec2:	463b      	mov	r3, r7
   30ec4:	f245 0106 	movw	r1, #20486	; 0x5006
   30ec8:	2001      	movs	r0, #1
   30eca:	e9cd 6400 	strd	r6, r4, [sp]
   30ece:	e7c0      	b.n	30e52 <ip_interface_setopt+0xda>
   30ed0:	4633      	mov	r3, r6
   30ed2:	4642      	mov	r2, r8
   30ed4:	2101      	movs	r1, #1
   30ed6:	4638      	mov	r0, r7
   30ed8:	9400      	str	r4, [sp, #0]
   30eda:	f7ff fac1 	bl	30460 <interface_socket_setopt>
   30ede:	e7ba      	b.n	30e56 <ip_interface_setopt+0xde>
   30ee0:	000426cf 	.word	0x000426cf

00030ee4 <ip_interface_getaddrinfo>:
   30ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ee8:	b087      	sub	sp, #28
   30eea:	9301      	str	r3, [sp, #4]
   30eec:	2300      	movs	r3, #0
   30eee:	4f80      	ldr	r7, [pc, #512]	; (310f0 <ip_interface_getaddrinfo+0x20c>)
   30ef0:	460e      	mov	r6, r1
   30ef2:	803b      	strh	r3, [r7, #0]
   30ef4:	2301      	movs	r3, #1
   30ef6:	497f      	ldr	r1, [pc, #508]	; (310f4 <ip_interface_getaddrinfo+0x210>)
   30ef8:	4605      	mov	r5, r0
   30efa:	4614      	mov	r4, r2
   30efc:	600b      	str	r3, [r1, #0]
   30efe:	9102      	str	r1, [sp, #8]
   30f00:	b11a      	cbz	r2, 30f0a <ip_interface_getaddrinfo+0x26>
   30f02:	68d3      	ldr	r3, [r2, #12]
   30f04:	2b00      	cmp	r3, #0
   30f06:	bf08      	it	eq
   30f08:	2301      	moveq	r3, #1
   30f0a:	4a7b      	ldr	r2, [pc, #492]	; (310f8 <ip_interface_getaddrinfo+0x214>)
   30f0c:	6013      	str	r3, [r2, #0]
   30f0e:	4b7b      	ldr	r3, [pc, #492]	; (310fc <ip_interface_getaddrinfo+0x218>)
   30f10:	9203      	str	r2, [sp, #12]
   30f12:	781b      	ldrb	r3, [r3, #0]
   30f14:	b93b      	cbnz	r3, 30f26 <ip_interface_getaddrinfo+0x42>
   30f16:	2070      	movs	r0, #112	; 0x70
   30f18:	f7f8 f994 	bl	29244 <nrf_modem_os_errno_set>
   30f1c:	f240 1015 	movw	r0, #277	; 0x115
   30f20:	b007      	add	sp, #28
   30f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f26:	b1ce      	cbz	r6, 30f5c <ip_interface_getaddrinfo+0x78>
   30f28:	b154      	cbz	r4, 30f40 <ip_interface_getaddrinfo+0x5c>
   30f2a:	6823      	ldr	r3, [r4, #0]
   30f2c:	04d8      	lsls	r0, r3, #19
   30f2e:	d507      	bpl.n	30f40 <ip_interface_getaddrinfo+0x5c>
   30f30:	0559      	lsls	r1, r3, #21
   30f32:	d405      	bmi.n	30f40 <ip_interface_getaddrinfo+0x5c>
   30f34:	68a0      	ldr	r0, [r4, #8]
   30f36:	2803      	cmp	r0, #3
   30f38:	d136      	bne.n	30fa8 <ip_interface_getaddrinfo+0xc4>
   30f3a:	f44f 7089 	mov.w	r0, #274	; 0x112
   30f3e:	e7ef      	b.n	30f20 <ip_interface_getaddrinfo+0x3c>
   30f40:	220a      	movs	r2, #10
   30f42:	2100      	movs	r1, #0
   30f44:	4630      	mov	r0, r6
   30f46:	f007 f93b 	bl	381c0 <strtol>
   30f4a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   30f4e:	1e42      	subs	r2, r0, #1
   30f50:	429a      	cmp	r2, r3
   30f52:	d8f2      	bhi.n	30f3a <ip_interface_getaddrinfo+0x56>
   30f54:	0203      	lsls	r3, r0, #8
   30f56:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   30f5a:	8038      	strh	r0, [r7, #0]
   30f5c:	2c00      	cmp	r4, #0
   30f5e:	d1e9      	bne.n	30f34 <ip_interface_getaddrinfo+0x50>
   30f60:	2100      	movs	r1, #0
   30f62:	4a67      	ldr	r2, [pc, #412]	; (31100 <ip_interface_getaddrinfo+0x21c>)
   30f64:	4b67      	ldr	r3, [pc, #412]	; (31104 <ip_interface_getaddrinfo+0x220>)
   30f66:	4693      	mov	fp, r2
   30f68:	4699      	mov	r9, r3
   30f6a:	6011      	str	r1, [r2, #0]
   30f6c:	6019      	str	r1, [r3, #0]
   30f6e:	b37d      	cbz	r5, 30fd0 <ip_interface_getaddrinfo+0xec>
   30f70:	4628      	mov	r0, r5
   30f72:	f7f0 fb7c 	bl	2166e <strlen>
   30f76:	4680      	mov	r8, r0
   30f78:	bb64      	cbnz	r4, 30fd4 <ip_interface_getaddrinfo+0xf0>
   30f7a:	f04f 31ff 	mov.w	r1, #4294967295
   30f7e:	4e62      	ldr	r6, [pc, #392]	; (31108 <ip_interface_getaddrinfo+0x224>)
   30f80:	6833      	ldr	r3, [r6, #0]
   30f82:	4637      	mov	r7, r6
   30f84:	2b00      	cmp	r3, #0
   30f86:	f040 809b 	bne.w	310c0 <ip_interface_getaddrinfo+0x1dc>
   30f8a:	2301      	movs	r3, #1
   30f8c:	f247 020d 	movw	r2, #28685	; 0x700d
   30f90:	6033      	str	r3, [r6, #0]
   30f92:	4608      	mov	r0, r1
   30f94:	4643      	mov	r3, r8
   30f96:	f00b fa5f 	bl	3c458 <ip_interface_request_create>
   30f9a:	4682      	mov	sl, r0
   30f9c:	2800      	cmp	r0, #0
   30f9e:	d139      	bne.n	31014 <ip_interface_getaddrinfo+0x130>
   30fa0:	6030      	str	r0, [r6, #0]
   30fa2:	f240 100f 	movw	r0, #271	; 0x10f
   30fa6:	e7bb      	b.n	30f20 <ip_interface_getaddrinfo+0x3c>
   30fa8:	6863      	ldr	r3, [r4, #4]
   30faa:	2b0a      	cmp	r3, #10
   30fac:	d002      	beq.n	30fb4 <ip_interface_getaddrinfo+0xd0>
   30fae:	f033 0302 	bics.w	r3, r3, #2
   30fb2:	d10a      	bne.n	30fca <ip_interface_getaddrinfo+0xe6>
   30fb4:	2301      	movs	r3, #1
   30fb6:	68e1      	ldr	r1, [r4, #12]
   30fb8:	aa05      	add	r2, sp, #20
   30fba:	9305      	str	r3, [sp, #20]
   30fbc:	f00b fa09 	bl	3c3d2 <protocol_verify>
   30fc0:	2800      	cmp	r0, #0
   30fc2:	d0cd      	beq.n	30f60 <ip_interface_getaddrinfo+0x7c>
   30fc4:	f240 1013 	movw	r0, #275	; 0x113
   30fc8:	e7aa      	b.n	30f20 <ip_interface_getaddrinfo+0x3c>
   30fca:	f44f 7087 	mov.w	r0, #270	; 0x10e
   30fce:	e7a7      	b.n	30f20 <ip_interface_getaddrinfo+0x3c>
   30fd0:	46a8      	mov	r8, r5
   30fd2:	e7d1      	b.n	30f78 <ip_interface_getaddrinfo+0x94>
   30fd4:	69e7      	ldr	r7, [r4, #28]
   30fd6:	2f00      	cmp	r7, #0
   30fd8:	d075      	beq.n	310c6 <ip_interface_getaddrinfo+0x1e2>
   30fda:	687b      	ldr	r3, [r7, #4]
   30fdc:	2b66      	cmp	r3, #102	; 0x66
   30fde:	d1cc      	bne.n	30f7a <ip_interface_getaddrinfo+0x96>
   30fe0:	68bb      	ldr	r3, [r7, #8]
   30fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   30fe6:	d1c8      	bne.n	30f7a <ip_interface_getaddrinfo+0x96>
   30fe8:	f240 2302 	movw	r3, #514	; 0x202
   30fec:	68fa      	ldr	r2, [r7, #12]
   30fee:	429a      	cmp	r2, r3
   30ff0:	d1c3      	bne.n	30f7a <ip_interface_getaddrinfo+0x96>
   30ff2:	69b9      	ldr	r1, [r7, #24]
   30ff4:	2900      	cmp	r1, #0
   30ff6:	d0c0      	beq.n	30f7a <ip_interface_getaddrinfo+0x96>
   30ff8:	6860      	ldr	r0, [r4, #4]
   30ffa:	f002 fa3b 	bl	33474 <pdn_interface_pdn_id_get>
   30ffe:	1c42      	adds	r2, r0, #1
   31000:	4601      	mov	r1, r0
   31002:	d1bc      	bne.n	30f7e <ip_interface_getaddrinfo+0x9a>
   31004:	e7b9      	b.n	30f7a <ip_interface_getaddrinfo+0x96>
   31006:	4841      	ldr	r0, [pc, #260]	; (3110c <ip_interface_getaddrinfo+0x228>)
   31008:	f7f0 fb31 	bl	2166e <strlen>
   3100c:	220a      	movs	r2, #10
   3100e:	4639      	mov	r1, r7
   31010:	4450      	add	r0, sl
   31012:	e069      	b.n	310e8 <ip_interface_getaddrinfo+0x204>
   31014:	2c00      	cmp	r4, #0
   31016:	d043      	beq.n	310a0 <ip_interface_getaddrinfo+0x1bc>
   31018:	68a2      	ldr	r2, [r4, #8]
   3101a:	9b02      	ldr	r3, [sp, #8]
   3101c:	6861      	ldr	r1, [r4, #4]
   3101e:	2a02      	cmp	r2, #2
   31020:	601a      	str	r2, [r3, #0]
   31022:	bf08      	it	eq
   31024:	9b03      	ldreq	r3, [sp, #12]
   31026:	f1a1 0102 	sub.w	r1, r1, #2
   3102a:	bf08      	it	eq
   3102c:	601a      	streq	r2, [r3, #0]
   3102e:	2908      	cmp	r1, #8
   31030:	bf8e      	itee	hi
   31032:	2100      	movhi	r1, #0
   31034:	4836      	ldrls	r0, [pc, #216]	; (31110 <ip_interface_getaddrinfo+0x22c>)
   31036:	5641      	ldrsbls	r1, [r0, r1]
   31038:	f8ca 1018 	str.w	r1, [sl, #24]
   3103c:	68e1      	ldr	r1, [r4, #12]
   3103e:	f8ca 201c 	str.w	r2, [sl, #28]
   31042:	2200      	movs	r2, #0
   31044:	f8ca 1020 	str.w	r1, [sl, #32]
   31048:	f88a 2014 	strb.w	r2, [sl, #20]
   3104c:	f88a 2015 	strb.w	r2, [sl, #21]
   31050:	f88a 2016 	strb.w	r2, [sl, #22]
   31054:	f88a 2017 	strb.w	r2, [sl, #23]
   31058:	f8da 2008 	ldr.w	r2, [sl, #8]
   3105c:	3210      	adds	r2, #16
   3105e:	f8ca 2008 	str.w	r2, [sl, #8]
   31062:	b135      	cbz	r5, 31072 <ip_interface_getaddrinfo+0x18e>
   31064:	f8da 0000 	ldr.w	r0, [sl]
   31068:	b118      	cbz	r0, 31072 <ip_interface_getaddrinfo+0x18e>
   3106a:	4642      	mov	r2, r8
   3106c:	4629      	mov	r1, r5
   3106e:	f00c fafd 	bl	3d66c <memcpy>
   31072:	f247 010d 	movw	r1, #28685	; 0x700d
   31076:	4650      	mov	r0, sl
   31078:	f00b f801 	bl	3c07e <rpc_ip_client_request_send>
   3107c:	f04f 32ff 	mov.w	r2, #4294967295
   31080:	9205      	str	r2, [sp, #20]
   31082:	4650      	mov	r0, sl
   31084:	a905      	add	r1, sp, #20
   31086:	f7f8 f827 	bl	290d8 <nrf_modem_os_timedwait>
   3108a:	683a      	ldr	r2, [r7, #0]
   3108c:	2a01      	cmp	r2, #1
   3108e:	d0f8      	beq.n	31082 <ip_interface_getaddrinfo+0x19e>
   31090:	f8d9 0000 	ldr.w	r0, [r9]
   31094:	b950      	cbnz	r0, 310ac <ip_interface_getaddrinfo+0x1c8>
   31096:	f8db 3000 	ldr.w	r3, [fp]
   3109a:	9a01      	ldr	r2, [sp, #4]
   3109c:	6013      	str	r3, [r2, #0]
   3109e:	e73f      	b.n	30f20 <ip_interface_getaddrinfo+0x3c>
   310a0:	2210      	movs	r2, #16
   310a2:	4621      	mov	r1, r4
   310a4:	3014      	adds	r0, #20
   310a6:	f00c faee 	bl	3d686 <memset>
   310aa:	e7d5      	b.n	31058 <ip_interface_getaddrinfo+0x174>
   310ac:	2300      	movs	r3, #0
   310ae:	603b      	str	r3, [r7, #0]
   310b0:	4b18      	ldr	r3, [pc, #96]	; (31114 <ip_interface_getaddrinfo+0x230>)
   310b2:	6818      	ldr	r0, [r3, #0]
   310b4:	b108      	cbz	r0, 310ba <ip_interface_getaddrinfo+0x1d6>
   310b6:	f7f8 f8c5 	bl	29244 <nrf_modem_os_errno_set>
   310ba:	f8d9 0000 	ldr.w	r0, [r9]
   310be:	e72f      	b.n	30f20 <ip_interface_getaddrinfo+0x3c>
   310c0:	f44f 708a 	mov.w	r0, #276	; 0x114
   310c4:	e72c      	b.n	30f20 <ip_interface_getaddrinfo+0x3c>
   310c6:	2e00      	cmp	r6, #0
   310c8:	f43f af57 	beq.w	30f7a <ip_interface_getaddrinfo+0x96>
   310cc:	6823      	ldr	r3, [r4, #0]
   310ce:	04db      	lsls	r3, r3, #19
   310d0:	f57f af53 	bpl.w	30f7a <ip_interface_getaddrinfo+0x96>
   310d4:	213a      	movs	r1, #58	; 0x3a
   310d6:	4630      	mov	r0, r6
   310d8:	f00c fc16 	bl	3d908 <strchr>
   310dc:	4682      	mov	sl, r0
   310de:	2800      	cmp	r0, #0
   310e0:	d191      	bne.n	31006 <ip_interface_getaddrinfo+0x122>
   310e2:	4601      	mov	r1, r0
   310e4:	220a      	movs	r2, #10
   310e6:	4630      	mov	r0, r6
   310e8:	f007 f984 	bl	383f4 <strtoul>
   310ec:	4601      	mov	r1, r0
   310ee:	e746      	b.n	30f7e <ip_interface_getaddrinfo+0x9a>
   310f0:	20017fd8 	.word	0x20017fd8
   310f4:	20017e7c 	.word	0x20017e7c
   310f8:	20017e78 	.word	0x20017e78
   310fc:	2001901c 	.word	0x2001901c
   31100:	20017e8c 	.word	0x20017e8c
   31104:	20017e84 	.word	0x20017e84
   31108:	20017e88 	.word	0x20017e88
   3110c:	000427ff 	.word	0x000427ff
   31110:	000426d3 	.word	0x000426d3
   31114:	20017e80 	.word	0x20017e80

00031118 <ip_interface_freeaddrinfo>:
   31118:	b538      	push	{r3, r4, r5, lr}
   3111a:	4d0a      	ldr	r5, [pc, #40]	; (31144 <ip_interface_freeaddrinfo+0x2c>)
   3111c:	4604      	mov	r4, r0
   3111e:	682a      	ldr	r2, [r5, #0]
   31120:	2a02      	cmp	r2, #2
   31122:	d10e      	bne.n	31142 <ip_interface_freeaddrinfo+0x2a>
   31124:	b148      	cbz	r0, 3113a <ip_interface_freeaddrinfo+0x22>
   31126:	6940      	ldr	r0, [r0, #20]
   31128:	f7f8 fa86 	bl	29638 <nrf_modem_os_free>
   3112c:	69a0      	ldr	r0, [r4, #24]
   3112e:	b108      	cbz	r0, 31134 <ip_interface_freeaddrinfo+0x1c>
   31130:	f7f8 fa82 	bl	29638 <nrf_modem_os_free>
   31134:	4620      	mov	r0, r4
   31136:	f7f8 fa7f 	bl	29638 <nrf_modem_os_free>
   3113a:	2300      	movs	r3, #0
   3113c:	4a02      	ldr	r2, [pc, #8]	; (31148 <ip_interface_freeaddrinfo+0x30>)
   3113e:	602b      	str	r3, [r5, #0]
   31140:	6013      	str	r3, [r2, #0]
   31142:	bd38      	pop	{r3, r4, r5, pc}
   31144:	20017e88 	.word	0x20017e88
   31148:	20017e84 	.word	0x20017e84

0003114c <rpc_ip_event_handler>:
   3114c:	f248 030d 	movw	r3, #32781	; 0x800d
   31150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31154:	4299      	cmp	r1, r3
   31156:	4604      	mov	r4, r0
   31158:	460e      	mov	r6, r1
   3115a:	b089      	sub	sp, #36	; 0x24
   3115c:	d038      	beq.n	311d0 <rpc_ip_event_handler+0x84>
   3115e:	f248 030f 	movw	r3, #32783	; 0x800f
   31162:	4299      	cmp	r1, r3
   31164:	f000 80c9 	beq.w	312fa <rpc_ip_event_handler+0x1ae>
   31168:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   3116c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   31170:	68c0      	ldr	r0, [r0, #12]
   31172:	f040 80cf 	bne.w	31314 <rpc_ip_event_handler+0x1c8>
   31176:	f7ff f94b 	bl	30410 <interface_from_internal_id_search>
   3117a:	4607      	mov	r7, r0
   3117c:	4638      	mov	r0, r7
   3117e:	f7ff f95f 	bl	30440 <interface_socket_from_handle_get>
   31182:	4605      	mov	r5, r0
   31184:	2800      	cmp	r0, #0
   31186:	d056      	beq.n	31236 <rpc_ip_event_handler+0xea>
   31188:	4601      	mov	r1, r0
   3118a:	4633      	mov	r3, r6
   3118c:	4622      	mov	r2, r4
   3118e:	4638      	mov	r0, r7
   31190:	f000 fdc6 	bl	31d20 <tls_rpc_ip_event_handler>
   31194:	2800      	cmp	r0, #0
   31196:	f000 80bb 	beq.w	31310 <rpc_ip_event_handler+0x1c4>
   3119a:	f248 030c 	movw	r3, #32780	; 0x800c
   3119e:	429e      	cmp	r6, r3
   311a0:	f200 80ba 	bhi.w	31318 <rpc_ip_event_handler+0x1cc>
   311a4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   311a8:	d945      	bls.n	31236 <rpc_ip_event_handler+0xea>
   311aa:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   311ae:	3e01      	subs	r6, #1
   311b0:	2e0b      	cmp	r6, #11
   311b2:	d840      	bhi.n	31236 <rpc_ip_event_handler+0xea>
   311b4:	e8df f016 	tbh	[pc, r6, lsl #1]
   311b8:	013400f0 	.word	0x013400f0
   311bc:	01f701e7 	.word	0x01f701e7
   311c0:	01ba0126 	.word	0x01ba0126
   311c4:	015601ba 	.word	0x015601ba
   311c8:	003f00fe 	.word	0x003f00fe
   311cc:	0184003f 	.word	0x0184003f
   311d0:	4bb1      	ldr	r3, [pc, #708]	; (31498 <rpc_ip_event_handler+0x34c>)
   311d2:	681a      	ldr	r2, [r3, #0]
   311d4:	9303      	str	r3, [sp, #12]
   311d6:	2a01      	cmp	r2, #1
   311d8:	d12d      	bne.n	31236 <rpc_ip_event_handler+0xea>
   311da:	6940      	ldr	r0, [r0, #20]
   311dc:	2800      	cmp	r0, #0
   311de:	f040 8087 	bne.w	312f0 <rpc_ip_event_handler+0x1a4>
   311e2:	f8d4 a018 	ldr.w	sl, [r4, #24]
   311e6:	f8d4 9000 	ldr.w	r9, [r4]
   311ea:	ea4f 134a 	mov.w	r3, sl, lsl #5
   311ee:	4618      	mov	r0, r3
   311f0:	9301      	str	r3, [sp, #4]
   311f2:	f7f8 fa19 	bl	29628 <nrf_modem_os_alloc>
   311f6:	4680      	mov	r8, r0
   311f8:	b310      	cbz	r0, 31240 <rpc_ip_event_handler+0xf4>
   311fa:	2024      	movs	r0, #36	; 0x24
   311fc:	fb00 f00a 	mul.w	r0, r0, sl
   31200:	f7f8 fa12 	bl	29628 <nrf_modem_os_alloc>
   31204:	4605      	mov	r5, r0
   31206:	b1e8      	cbz	r0, 31244 <rpc_ip_event_handler+0xf8>
   31208:	2704      	movs	r7, #4
   3120a:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   3120e:	f108 0620 	add.w	r6, r8, #32
   31212:	9302      	str	r3, [sp, #8]
   31214:	9b02      	ldr	r3, [sp, #8]
   31216:	42ab      	cmp	r3, r5
   31218:	d118      	bne.n	3124c <rpc_ip_event_handler+0x100>
   3121a:	f1ba 0f00 	cmp.w	sl, #0
   3121e:	d004      	beq.n	3122a <rpc_ip_event_handler+0xde>
   31220:	2200      	movs	r2, #0
   31222:	9b01      	ldr	r3, [sp, #4]
   31224:	4443      	add	r3, r8
   31226:	f843 2c04 	str.w	r2, [r3, #-4]
   3122a:	4b9c      	ldr	r3, [pc, #624]	; (3149c <rpc_ip_event_handler+0x350>)
   3122c:	f8c3 8000 	str.w	r8, [r3]
   31230:	2302      	movs	r3, #2
   31232:	9a03      	ldr	r2, [sp, #12]
   31234:	6013      	str	r3, [r2, #0]
   31236:	6820      	ldr	r0, [r4, #0]
   31238:	2800      	cmp	r0, #0
   3123a:	f040 8174 	bne.w	31526 <rpc_ip_event_handler+0x3da>
   3123e:	e067      	b.n	31310 <rpc_ip_event_handler+0x1c4>
   31240:	f7f8 f9fa 	bl	29638 <nrf_modem_os_free>
   31244:	220c      	movs	r2, #12
   31246:	4b96      	ldr	r3, [pc, #600]	; (314a0 <rpc_ip_event_handler+0x354>)
   31248:	601a      	str	r2, [r3, #0]
   3124a:	e7ee      	b.n	3122a <rpc_ip_event_handler+0xde>
   3124c:	f859 3007 	ldr.w	r3, [r9, r7]
   31250:	f846 3c20 	str.w	r3, [r6, #-32]
   31254:	eb09 0307 	add.w	r3, r9, r7
   31258:	685b      	ldr	r3, [r3, #4]
   3125a:	3b01      	subs	r3, #1
   3125c:	2b04      	cmp	r3, #4
   3125e:	bf8e      	itee	hi
   31260:	2300      	movhi	r3, #0
   31262:	4a90      	ldrls	r2, [pc, #576]	; (314a4 <rpc_ip_event_handler+0x358>)
   31264:	56d3      	ldrsbls	r3, [r2, r3]
   31266:	f846 3c1c 	str.w	r3, [r6, #-28]
   3126a:	4b8f      	ldr	r3, [pc, #572]	; (314a8 <rpc_ip_event_handler+0x35c>)
   3126c:	681b      	ldr	r3, [r3, #0]
   3126e:	f846 3c18 	str.w	r3, [r6, #-24]
   31272:	4b8e      	ldr	r3, [pc, #568]	; (314ac <rpc_ip_event_handler+0x360>)
   31274:	681b      	ldr	r3, [r3, #0]
   31276:	f846 3c14 	str.w	r3, [r6, #-20]
   3127a:	eb09 0307 	add.w	r3, r9, r7
   3127e:	8a1a      	ldrh	r2, [r3, #16]
   31280:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   31284:	4b8a      	ldr	r3, [pc, #552]	; (314b0 <rpc_ip_event_handler+0x364>)
   31286:	3714      	adds	r7, #20
   31288:	2a04      	cmp	r2, #4
   3128a:	881b      	ldrh	r3, [r3, #0]
   3128c:	f846 2c10 	str.w	r2, [r6, #-16]
   31290:	f846 5c0c 	str.w	r5, [r6, #-12]
   31294:	eb09 0107 	add.w	r1, r9, r7
   31298:	d122      	bne.n	312e0 <rpc_ip_event_handler+0x194>
   3129a:	2002      	movs	r0, #2
   3129c:	6068      	str	r0, [r5, #4]
   3129e:	2010      	movs	r0, #16
   312a0:	812b      	strh	r3, [r5, #8]
   312a2:	7028      	strb	r0, [r5, #0]
   312a4:	f105 000c 	add.w	r0, r5, #12
   312a8:	f00c f9e0 	bl	3d66c <memcpy>
   312ac:	f856 3c10 	ldr.w	r3, [r6, #-16]
   312b0:	f10b 0001 	add.w	r0, fp, #1
   312b4:	441f      	add	r7, r3
   312b6:	f7f8 f9b7 	bl	29628 <nrf_modem_os_alloc>
   312ba:	f846 0c08 	str.w	r0, [r6, #-8]
   312be:	b148      	cbz	r0, 312d4 <rpc_ip_event_handler+0x188>
   312c0:	465a      	mov	r2, fp
   312c2:	eb09 0107 	add.w	r1, r9, r7
   312c6:	f00c f9d1 	bl	3d66c <memcpy>
   312ca:	2200      	movs	r2, #0
   312cc:	f856 3c08 	ldr.w	r3, [r6, #-8]
   312d0:	f803 200b 	strb.w	r2, [r3, fp]
   312d4:	f846 6c04 	str.w	r6, [r6, #-4]
   312d8:	445f      	add	r7, fp
   312da:	3620      	adds	r6, #32
   312dc:	3508      	adds	r5, #8
   312de:	e799      	b.n	31214 <rpc_ip_event_handler+0xc8>
   312e0:	200a      	movs	r0, #10
   312e2:	6068      	str	r0, [r5, #4]
   312e4:	2024      	movs	r0, #36	; 0x24
   312e6:	812b      	strh	r3, [r5, #8]
   312e8:	7028      	strb	r0, [r5, #0]
   312ea:	f105 0010 	add.w	r0, r5, #16
   312ee:	e7db      	b.n	312a8 <rpc_ip_event_handler+0x15c>
   312f0:	f7ff f962 	bl	305b8 <rpc_error_to_nrf_gai_errno>
   312f4:	4b6a      	ldr	r3, [pc, #424]	; (314a0 <rpc_ip_event_handler+0x354>)
   312f6:	6018      	str	r0, [r3, #0]
   312f8:	e79a      	b.n	31230 <rpc_ip_event_handler+0xe4>
   312fa:	6943      	ldr	r3, [r0, #20]
   312fc:	2b6a      	cmp	r3, #106	; 0x6a
   312fe:	bf8e      	itee	hi
   31300:	232d      	movhi	r3, #45	; 0x2d
   31302:	4a6c      	ldrls	r2, [pc, #432]	; (314b4 <rpc_ip_event_handler+0x368>)
   31304:	56d3      	ldrsbls	r3, [r2, r3]
   31306:	4a6c      	ldr	r2, [pc, #432]	; (314b8 <rpc_ip_event_handler+0x36c>)
   31308:	6013      	str	r3, [r2, #0]
   3130a:	2201      	movs	r2, #1
   3130c:	4b6b      	ldr	r3, [pc, #428]	; (314bc <rpc_ip_event_handler+0x370>)
   3130e:	701a      	strb	r2, [r3, #0]
   31310:	2000      	movs	r0, #0
   31312:	e04c      	b.n	313ae <rpc_ip_event_handler+0x262>
   31314:	0c07      	lsrs	r7, r0, #16
   31316:	e731      	b.n	3117c <rpc_ip_event_handler+0x30>
   31318:	f249 0302 	movw	r3, #36866	; 0x9002
   3131c:	429e      	cmp	r6, r3
   3131e:	f000 80b0 	beq.w	31482 <rpc_ip_event_handler+0x336>
   31322:	f249 0303 	movw	r3, #36867	; 0x9003
   31326:	429e      	cmp	r6, r3
   31328:	d053      	beq.n	313d2 <rpc_ip_event_handler+0x286>
   3132a:	f249 0301 	movw	r3, #36865	; 0x9001
   3132e:	429e      	cmp	r6, r3
   31330:	d181      	bne.n	31236 <rpc_ip_event_handler+0xea>
   31332:	682e      	ldr	r6, [r5, #0]
   31334:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   31338:	f000 80f4 	beq.w	31524 <rpc_ip_event_handler+0x3d8>
   3133c:	68a3      	ldr	r3, [r4, #8]
   3133e:	2b04      	cmp	r3, #4
   31340:	f240 80ed 	bls.w	3151e <rpc_ip_event_handler+0x3d2>
   31344:	8a67      	ldrh	r7, [r4, #18]
   31346:	2f00      	cmp	r7, #0
   31348:	f000 80ea 	beq.w	31520 <rpc_ip_event_handler+0x3d4>
   3134c:	2f10      	cmp	r7, #16
   3134e:	f040 80ca 	bne.w	314e6 <rpc_ip_event_handler+0x39a>
   31352:	2024      	movs	r0, #36	; 0x24
   31354:	f7f8 f968 	bl	29628 <nrf_modem_os_alloc>
   31358:	4606      	mov	r6, r0
   3135a:	b1d8      	cbz	r0, 31394 <rpc_ip_event_handler+0x248>
   3135c:	230a      	movs	r3, #10
   3135e:	2724      	movs	r7, #36	; 0x24
   31360:	6043      	str	r3, [r0, #4]
   31362:	7007      	strb	r7, [r0, #0]
   31364:	7c62      	ldrb	r2, [r4, #17]
   31366:	7c23      	ldrb	r3, [r4, #16]
   31368:	f104 0114 	add.w	r1, r4, #20
   3136c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   31370:	2210      	movs	r2, #16
   31372:	8103      	strh	r3, [r0, #8]
   31374:	4410      	add	r0, r2
   31376:	f00c f979 	bl	3d66c <memcpy>
   3137a:	6823      	ldr	r3, [r4, #0]
   3137c:	69e8      	ldr	r0, [r5, #28]
   3137e:	9304      	str	r3, [sp, #16]
   31380:	6863      	ldr	r3, [r4, #4]
   31382:	9707      	str	r7, [sp, #28]
   31384:	e9cd 3605 	strd	r3, r6, [sp, #20]
   31388:	6803      	ldr	r3, [r0, #0]
   3138a:	a904      	add	r1, sp, #16
   3138c:	685b      	ldr	r3, [r3, #4]
   3138e:	4798      	blx	r3
   31390:	3001      	adds	r0, #1
   31392:	d17b      	bne.n	3148c <rpc_ip_event_handler+0x340>
   31394:	2002      	movs	r0, #2
   31396:	e00a      	b.n	313ae <rpc_ip_event_handler+0x262>
   31398:	682b      	ldr	r3, [r5, #0]
   3139a:	2b01      	cmp	r3, #1
   3139c:	d1b8      	bne.n	31310 <rpc_ip_event_handler+0x1c4>
   3139e:	6960      	ldr	r0, [r4, #20]
   313a0:	2800      	cmp	r0, #0
   313a2:	f040 80fa 	bne.w	3159a <rpc_ip_event_handler+0x44e>
   313a6:	2302      	movs	r3, #2
   313a8:	602b      	str	r3, [r5, #0]
   313aa:	69a3      	ldr	r3, [r4, #24]
   313ac:	61ab      	str	r3, [r5, #24]
   313ae:	b009      	add	sp, #36	; 0x24
   313b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   313b4:	682b      	ldr	r3, [r5, #0]
   313b6:	b29b      	uxth	r3, r3
   313b8:	2b0d      	cmp	r3, #13
   313ba:	d1a9      	bne.n	31310 <rpc_ip_event_handler+0x1c4>
   313bc:	6960      	ldr	r0, [r4, #20]
   313be:	2800      	cmp	r0, #0
   313c0:	f040 80eb 	bne.w	3159a <rpc_ip_event_handler+0x44e>
   313c4:	682b      	ldr	r3, [r5, #0]
   313c6:	0c1b      	lsrs	r3, r3, #16
   313c8:	041b      	lsls	r3, r3, #16
   313ca:	f043 030e 	orr.w	r3, r3, #14
   313ce:	602b      	str	r3, [r5, #0]
   313d0:	e7ed      	b.n	313ae <rpc_ip_event_handler+0x262>
   313d2:	682b      	ldr	r3, [r5, #0]
   313d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   313d8:	602b      	str	r3, [r5, #0]
   313da:	682b      	ldr	r3, [r5, #0]
   313dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   313e0:	602b      	str	r3, [r5, #0]
   313e2:	6923      	ldr	r3, [r4, #16]
   313e4:	2b6c      	cmp	r3, #108	; 0x6c
   313e6:	d107      	bne.n	313f8 <rpc_ip_event_handler+0x2ac>
   313e8:	682b      	ldr	r3, [r5, #0]
   313ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   313ee:	602b      	str	r3, [r5, #0]
   313f0:	2339      	movs	r3, #57	; 0x39
   313f2:	606b      	str	r3, [r5, #4]
   313f4:	60ab      	str	r3, [r5, #8]
   313f6:	e78b      	b.n	31310 <rpc_ip_event_handler+0x1c4>
   313f8:	2b6a      	cmp	r3, #106	; 0x6a
   313fa:	bf96      	itet	ls
   313fc:	4a2d      	ldrls	r2, [pc, #180]	; (314b4 <rpc_ip_event_handler+0x368>)
   313fe:	232d      	movhi	r3, #45	; 0x2d
   31400:	56d3      	ldrsbls	r3, [r2, r3]
   31402:	e7f6      	b.n	313f2 <rpc_ip_event_handler+0x2a6>
   31404:	682b      	ldr	r3, [r5, #0]
   31406:	b29b      	uxth	r3, r3
   31408:	2b03      	cmp	r3, #3
   3140a:	d181      	bne.n	31310 <rpc_ip_event_handler+0x1c4>
   3140c:	6960      	ldr	r0, [r4, #20]
   3140e:	2800      	cmp	r0, #0
   31410:	f040 80c3 	bne.w	3159a <rpc_ip_event_handler+0x44e>
   31414:	682b      	ldr	r3, [r5, #0]
   31416:	0c1b      	lsrs	r3, r3, #16
   31418:	041b      	lsls	r3, r3, #16
   3141a:	f043 0304 	orr.w	r3, r3, #4
   3141e:	e7d6      	b.n	313ce <rpc_ip_event_handler+0x282>
   31420:	682b      	ldr	r3, [r5, #0]
   31422:	0099      	lsls	r1, r3, #2
   31424:	f57f af74 	bpl.w	31310 <rpc_ip_event_handler+0x1c4>
   31428:	682b      	ldr	r3, [r5, #0]
   3142a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   3142e:	602b      	str	r3, [r5, #0]
   31430:	6960      	ldr	r0, [r4, #20]
   31432:	b968      	cbnz	r0, 31450 <rpc_ip_event_handler+0x304>
   31434:	682b      	ldr	r3, [r5, #0]
   31436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3143a:	602b      	str	r3, [r5, #0]
   3143c:	682b      	ldr	r3, [r5, #0]
   3143e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   31442:	602b      	str	r3, [r5, #0]
   31444:	682b      	ldr	r3, [r5, #0]
   31446:	0c1b      	lsrs	r3, r3, #16
   31448:	041b      	lsls	r3, r3, #16
   3144a:	f043 0305 	orr.w	r3, r3, #5
   3144e:	e7be      	b.n	313ce <rpc_ip_event_handler+0x282>
   31450:	286a      	cmp	r0, #106	; 0x6a
   31452:	f200 8096 	bhi.w	31582 <rpc_ip_event_handler+0x436>
   31456:	4b17      	ldr	r3, [pc, #92]	; (314b4 <rpc_ip_event_handler+0x368>)
   31458:	561b      	ldrsb	r3, [r3, r0]
   3145a:	606b      	str	r3, [r5, #4]
   3145c:	682b      	ldr	r3, [r5, #0]
   3145e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   31462:	e016      	b.n	31492 <rpc_ip_event_handler+0x346>
   31464:	682b      	ldr	r3, [r5, #0]
   31466:	b29b      	uxth	r3, r3
   31468:	2b06      	cmp	r3, #6
   3146a:	f47f af51 	bne.w	31310 <rpc_ip_event_handler+0x1c4>
   3146e:	6960      	ldr	r0, [r4, #20]
   31470:	2800      	cmp	r0, #0
   31472:	f040 8092 	bne.w	3159a <rpc_ip_event_handler+0x44e>
   31476:	682b      	ldr	r3, [r5, #0]
   31478:	0c1b      	lsrs	r3, r3, #16
   3147a:	041b      	lsls	r3, r3, #16
   3147c:	f043 0307 	orr.w	r3, r3, #7
   31480:	e7a5      	b.n	313ce <rpc_ip_event_handler+0x282>
   31482:	682b      	ldr	r3, [r5, #0]
   31484:	b29b      	uxth	r3, r3
   31486:	2b07      	cmp	r3, #7
   31488:	f47f af42 	bne.w	31310 <rpc_ip_event_handler+0x1c4>
   3148c:	682b      	ldr	r3, [r5, #0]
   3148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   31492:	602b      	str	r3, [r5, #0]
   31494:	e73c      	b.n	31310 <rpc_ip_event_handler+0x1c4>
   31496:	bf00      	nop
   31498:	20017e88 	.word	0x20017e88
   3149c:	20017e8c 	.word	0x20017e8c
   314a0:	20017e84 	.word	0x20017e84
   314a4:	000426dc 	.word	0x000426dc
   314a8:	20017e7c 	.word	0x20017e7c
   314ac:	20017e78 	.word	0x20017e78
   314b0:	20017fd8 	.word	0x20017fd8
   314b4:	000426e1 	.word	0x000426e1
   314b8:	20017eb4 	.word	0x20017eb4
   314bc:	2001901d 	.word	0x2001901d
   314c0:	682b      	ldr	r3, [r5, #0]
   314c2:	b29b      	uxth	r3, r3
   314c4:	2b08      	cmp	r3, #8
   314c6:	f47f af23 	bne.w	31310 <rpc_ip_event_handler+0x1c4>
   314ca:	6963      	ldr	r3, [r4, #20]
   314cc:	2b00      	cmp	r3, #0
   314ce:	d17a      	bne.n	315c6 <rpc_ip_event_handler+0x47a>
   314d0:	4b40      	ldr	r3, [pc, #256]	; (315d4 <rpc_ip_event_handler+0x488>)
   314d2:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   314d6:	682b      	ldr	r3, [r5, #0]
   314d8:	0c1b      	lsrs	r3, r3, #16
   314da:	041b      	lsls	r3, r3, #16
   314dc:	f043 0309 	orr.w	r3, r3, #9
   314e0:	602b      	str	r3, [r5, #0]
   314e2:	2001      	movs	r0, #1
   314e4:	e763      	b.n	313ae <rpc_ip_event_handler+0x262>
   314e6:	2f04      	cmp	r7, #4
   314e8:	d11c      	bne.n	31524 <rpc_ip_event_handler+0x3d8>
   314ea:	2010      	movs	r0, #16
   314ec:	f7f8 f89c 	bl	29628 <nrf_modem_os_alloc>
   314f0:	4606      	mov	r6, r0
   314f2:	2800      	cmp	r0, #0
   314f4:	f43f af4e 	beq.w	31394 <rpc_ip_event_handler+0x248>
   314f8:	2302      	movs	r3, #2
   314fa:	f04f 0810 	mov.w	r8, #16
   314fe:	6043      	str	r3, [r0, #4]
   31500:	f880 8000 	strb.w	r8, [r0]
   31504:	7c62      	ldrb	r2, [r4, #17]
   31506:	7c23      	ldrb	r3, [r4, #16]
   31508:	f104 0114 	add.w	r1, r4, #20
   3150c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   31510:	8103      	strh	r3, [r0, #8]
   31512:	463a      	mov	r2, r7
   31514:	300c      	adds	r0, #12
   31516:	f00c f8a9 	bl	3d66c <memcpy>
   3151a:	4647      	mov	r7, r8
   3151c:	e72d      	b.n	3137a <rpc_ip_event_handler+0x22e>
   3151e:	2700      	movs	r7, #0
   31520:	463e      	mov	r6, r7
   31522:	e72a      	b.n	3137a <rpc_ip_event_handler+0x22e>
   31524:	6820      	ldr	r0, [r4, #0]
   31526:	f00a fdb7 	bl	3c098 <rpc_ip_client_data_free>
   3152a:	e6f1      	b.n	31310 <rpc_ip_event_handler+0x1c4>
   3152c:	6963      	ldr	r3, [r4, #20]
   3152e:	b93b      	cbnz	r3, 31540 <rpc_ip_event_handler+0x3f4>
   31530:	682b      	ldr	r3, [r5, #0]
   31532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   31536:	602b      	str	r3, [r5, #0]
   31538:	4b26      	ldr	r3, [pc, #152]	; (315d4 <rpc_ip_event_handler+0x488>)
   3153a:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   3153e:	e7d0      	b.n	314e2 <rpc_ip_event_handler+0x396>
   31540:	2b6b      	cmp	r3, #107	; 0x6b
   31542:	d10f      	bne.n	31564 <rpc_ip_event_handler+0x418>
   31544:	220c      	movs	r2, #12
   31546:	682b      	ldr	r3, [r5, #0]
   31548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3154c:	602b      	str	r3, [r5, #0]
   3154e:	692b      	ldr	r3, [r5, #16]
   31550:	2b01      	cmp	r3, #1
   31552:	682b      	ldr	r3, [r5, #0]
   31554:	bf0c      	ite	eq
   31556:	f043 6300 	orreq.w	r3, r3, #134217728	; 0x8000000
   3155a:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
   3155e:	602b      	str	r3, [r5, #0]
   31560:	606a      	str	r2, [r5, #4]
   31562:	e6d5      	b.n	31310 <rpc_ip_event_handler+0x1c4>
   31564:	f023 0202 	bic.w	r2, r3, #2
   31568:	2a01      	cmp	r2, #1
   3156a:	d105      	bne.n	31578 <rpc_ip_event_handler+0x42c>
   3156c:	230c      	movs	r3, #12
   3156e:	606b      	str	r3, [r5, #4]
   31570:	682b      	ldr	r3, [r5, #0]
   31572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   31576:	e78c      	b.n	31492 <rpc_ip_event_handler+0x346>
   31578:	2b6a      	cmp	r3, #106	; 0x6a
   3157a:	d802      	bhi.n	31582 <rpc_ip_event_handler+0x436>
   3157c:	4a16      	ldr	r2, [pc, #88]	; (315d8 <rpc_ip_event_handler+0x48c>)
   3157e:	56d3      	ldrsb	r3, [r2, r3]
   31580:	e76b      	b.n	3145a <rpc_ip_event_handler+0x30e>
   31582:	232d      	movs	r3, #45	; 0x2d
   31584:	e769      	b.n	3145a <rpc_ip_event_handler+0x30e>
   31586:	682b      	ldr	r3, [r5, #0]
   31588:	025a      	lsls	r2, r3, #9
   3158a:	f57f aec1 	bpl.w	31310 <rpc_ip_event_handler+0x1c4>
   3158e:	6960      	ldr	r0, [r4, #20]
   31590:	b918      	cbnz	r0, 3159a <rpc_ip_event_handler+0x44e>
   31592:	682b      	ldr	r3, [r5, #0]
   31594:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   31598:	e719      	b.n	313ce <rpc_ip_event_handler+0x282>
   3159a:	286a      	cmp	r0, #106	; 0x6a
   3159c:	d818      	bhi.n	315d0 <rpc_ip_event_handler+0x484>
   3159e:	4b0e      	ldr	r3, [pc, #56]	; (315d8 <rpc_ip_event_handler+0x48c>)
   315a0:	561b      	ldrsb	r3, [r3, r0]
   315a2:	606b      	str	r3, [r5, #4]
   315a4:	e6b4      	b.n	31310 <rpc_ip_event_handler+0x1c4>
   315a6:	682b      	ldr	r3, [r5, #0]
   315a8:	01db      	lsls	r3, r3, #7
   315aa:	f57f aeb1 	bpl.w	31310 <rpc_ip_event_handler+0x1c4>
   315ae:	6963      	ldr	r3, [r4, #20]
   315b0:	b94b      	cbnz	r3, 315c6 <rpc_ip_event_handler+0x47a>
   315b2:	6820      	ldr	r0, [r4, #0]
   315b4:	b118      	cbz	r0, 315be <rpc_ip_event_handler+0x472>
   315b6:	2001      	movs	r0, #1
   315b8:	4b06      	ldr	r3, [pc, #24]	; (315d4 <rpc_ip_event_handler+0x488>)
   315ba:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   315be:	682b      	ldr	r3, [r5, #0]
   315c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   315c4:	e703      	b.n	313ce <rpc_ip_event_handler+0x282>
   315c6:	2b6a      	cmp	r3, #106	; 0x6a
   315c8:	d802      	bhi.n	315d0 <rpc_ip_event_handler+0x484>
   315ca:	4a03      	ldr	r2, [pc, #12]	; (315d8 <rpc_ip_event_handler+0x48c>)
   315cc:	56d3      	ldrsb	r3, [r2, r3]
   315ce:	e7e8      	b.n	315a2 <rpc_ip_event_handler+0x456>
   315d0:	232d      	movs	r3, #45	; 0x2d
   315d2:	e7e6      	b.n	315a2 <rpc_ip_event_handler+0x456>
   315d4:	20017e90 	.word	0x20017e90
   315d8:	000426e1 	.word	0x000426e1

000315dc <secure_socket_dtls_timeout_check>:
   315dc:	281f      	cmp	r0, #31
   315de:	dc0b      	bgt.n	315f8 <secure_socket_dtls_timeout_check+0x1c>
   315e0:	2800      	cmp	r0, #0
   315e2:	dd10      	ble.n	31606 <secure_socket_dtls_timeout_check+0x2a>
   315e4:	2301      	movs	r3, #1
   315e6:	fa03 f000 	lsl.w	r0, r3, r0
   315ea:	4b09      	ldr	r3, [pc, #36]	; (31610 <secure_socket_dtls_timeout_check+0x34>)
   315ec:	4003      	ands	r3, r0
   315ee:	2b00      	cmp	r3, #0
   315f0:	bf0c      	ite	eq
   315f2:	2016      	moveq	r0, #22
   315f4:	2000      	movne	r0, #0
   315f6:	4770      	bx	lr
   315f8:	283f      	cmp	r0, #63	; 0x3f
   315fa:	d006      	beq.n	3160a <secure_socket_dtls_timeout_check+0x2e>
   315fc:	287b      	cmp	r0, #123	; 0x7b
   315fe:	bf14      	ite	ne
   31600:	2016      	movne	r0, #22
   31602:	2000      	moveq	r0, #0
   31604:	4770      	bx	lr
   31606:	2016      	movs	r0, #22
   31608:	4770      	bx	lr
   3160a:	2000      	movs	r0, #0
   3160c:	4770      	bx	lr
   3160e:	bf00      	nop
   31610:	8000808a 	.word	0x8000808a

00031614 <hostname_free>:
   31614:	b538      	push	{r3, r4, r5, lr}
   31616:	4c07      	ldr	r4, [pc, #28]	; (31634 <hostname_free+0x20>)
   31618:	4605      	mov	r5, r0
   3161a:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   3161e:	b138      	cbz	r0, 31630 <hostname_free+0x1c>
   31620:	f7f8 f80a 	bl	29638 <nrf_modem_os_free>
   31624:	2300      	movs	r3, #0
   31626:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   3162a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   3162e:	6063      	str	r3, [r4, #4]
   31630:	bd38      	pop	{r3, r4, r5, pc}
   31632:	bf00      	nop
   31634:	20017eb8 	.word	0x20017eb8

00031638 <secure_socket_attach_initiate>:
   31638:	f04f 33ff 	mov.w	r3, #4294967295
   3163c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   31640:	f8df 8084 	ldr.w	r8, [pc, #132]	; 316c8 <secure_socket_attach_initiate+0x90>
   31644:	9301      	str	r3, [sp, #4]
   31646:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   3164a:	460d      	mov	r5, r1
   3164c:	4616      	mov	r6, r2
   3164e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   31652:	f247 0281 	movw	r2, #28801	; 0x7081
   31656:	6989      	ldr	r1, [r1, #24]
   31658:	4607      	mov	r7, r0
   3165a:	f00a fefd 	bl	3c458 <ip_interface_request_create>
   3165e:	4604      	mov	r4, r0
   31660:	b360      	cbz	r0, 316bc <secure_socket_attach_initiate+0x84>
   31662:	f8d9 2004 	ldr.w	r2, [r9, #4]
   31666:	b122      	cbz	r2, 31672 <secure_socket_attach_initiate+0x3a>
   31668:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   3166c:	6800      	ldr	r0, [r0, #0]
   3166e:	f00b fffd 	bl	3d66c <memcpy>
   31672:	2224      	movs	r2, #36	; 0x24
   31674:	4913      	ldr	r1, [pc, #76]	; (316c4 <secure_socket_attach_initiate+0x8c>)
   31676:	f104 0014 	add.w	r0, r4, #20
   3167a:	fb02 1107 	mla	r1, r2, r7, r1
   3167e:	f00b fff5 	bl	3d66c <memcpy>
   31682:	68a3      	ldr	r3, [r4, #8]
   31684:	f247 0181 	movw	r1, #28801	; 0x7081
   31688:	3324      	adds	r3, #36	; 0x24
   3168a:	60a3      	str	r3, [r4, #8]
   3168c:	682b      	ldr	r3, [r5, #0]
   3168e:	4620      	mov	r0, r4
   31690:	0c1b      	lsrs	r3, r3, #16
   31692:	041b      	lsls	r3, r3, #16
   31694:	f043 030a 	orr.w	r3, r3, #10
   31698:	602b      	str	r3, [r5, #0]
   3169a:	f00a fcf0 	bl	3c07e <rpc_ip_client_request_send>
   3169e:	682b      	ldr	r3, [r5, #0]
   316a0:	00db      	lsls	r3, r3, #3
   316a2:	d40d      	bmi.n	316c0 <secure_socket_attach_initiate+0x88>
   316a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   316a8:	210b      	movs	r1, #11
   316aa:	4638      	mov	r0, r7
   316ac:	ab01      	add	r3, sp, #4
   316ae:	f00a feeb 	bl	3c488 <ip_interface_wait>
   316b2:	b100      	cbz	r0, 316b6 <secure_socket_attach_initiate+0x7e>
   316b4:	602e      	str	r6, [r5, #0]
   316b6:	b003      	add	sp, #12
   316b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   316bc:	200c      	movs	r0, #12
   316be:	e7fa      	b.n	316b6 <secure_socket_attach_initiate+0x7e>
   316c0:	2073      	movs	r0, #115	; 0x73
   316c2:	e7f8      	b.n	316b6 <secure_socket_attach_initiate+0x7e>
   316c4:	2001901f 	.word	0x2001901f
   316c8:	20017eb8 	.word	0x20017eb8

000316cc <tls_interface_init>:
   316cc:	2201      	movs	r2, #1
   316ce:	4b02      	ldr	r3, [pc, #8]	; (316d8 <tls_interface_init+0xc>)
   316d0:	2000      	movs	r0, #0
   316d2:	701a      	strb	r2, [r3, #0]
   316d4:	4770      	bx	lr
   316d6:	bf00      	nop
   316d8:	2001901e 	.word	0x2001901e

000316dc <tls_interface_open>:
   316dc:	b538      	push	{r3, r4, r5, lr}
   316de:	4b1e      	ldr	r3, [pc, #120]	; (31758 <tls_interface_open+0x7c>)
   316e0:	4615      	mov	r5, r2
   316e2:	781b      	ldrb	r3, [r3, #0]
   316e4:	b92b      	cbnz	r3, 316f2 <tls_interface_open+0x16>
   316e6:	2070      	movs	r0, #112	; 0x70
   316e8:	f7f7 fdac 	bl	29244 <nrf_modem_os_errno_set>
   316ec:	f04f 34ff 	mov.w	r4, #4294967295
   316f0:	e02b      	b.n	3174a <tls_interface_open+0x6e>
   316f2:	1e4b      	subs	r3, r1, #1
   316f4:	2b01      	cmp	r3, #1
   316f6:	d809      	bhi.n	3170c <tls_interface_open+0x30>
   316f8:	b952      	cbnz	r2, 31710 <tls_interface_open+0x34>
   316fa:	2901      	cmp	r1, #1
   316fc:	bf0b      	itete	eq
   316fe:	2201      	moveq	r2, #1
   31700:	2202      	movne	r2, #2
   31702:	f44f 7582 	moveq.w	r5, #260	; 0x104
   31706:	f44f 7587 	movne.w	r5, #270	; 0x10e
   3170a:	e007      	b.n	3171c <tls_interface_open+0x40>
   3170c:	2029      	movs	r0, #41	; 0x29
   3170e:	e7eb      	b.n	316e8 <tls_interface_open+0xc>
   31710:	2901      	cmp	r1, #1
   31712:	d11c      	bne.n	3174e <tls_interface_open+0x72>
   31714:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   31718:	d1f8      	bne.n	3170c <tls_interface_open+0x30>
   3171a:	460a      	mov	r2, r1
   3171c:	f7fe ff84 	bl	30628 <ip_interface_open>
   31720:	1e04      	subs	r4, r0, #0
   31722:	dbe3      	blt.n	316ec <tls_interface_open+0x10>
   31724:	2224      	movs	r2, #36	; 0x24
   31726:	480d      	ldr	r0, [pc, #52]	; (3175c <tls_interface_open+0x80>)
   31728:	490d      	ldr	r1, [pc, #52]	; (31760 <tls_interface_open+0x84>)
   3172a:	fb02 0004 	mla	r0, r2, r4, r0
   3172e:	f00b ff9d 	bl	3d66c <memcpy>
   31732:	4620      	mov	r0, r4
   31734:	f7fe fe84 	bl	30440 <interface_socket_from_handle_get>
   31738:	6803      	ldr	r3, [r0, #0]
   3173a:	6145      	str	r5, [r0, #20]
   3173c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   31740:	6003      	str	r3, [r0, #0]
   31742:	6803      	ldr	r3, [r0, #0]
   31744:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   31748:	6003      	str	r3, [r0, #0]
   3174a:	4620      	mov	r0, r4
   3174c:	bd38      	pop	{r3, r4, r5, pc}
   3174e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   31752:	d1db      	bne.n	3170c <tls_interface_open+0x30>
   31754:	2202      	movs	r2, #2
   31756:	e7e1      	b.n	3171c <tls_interface_open+0x40>
   31758:	2001901e 	.word	0x2001901e
   3175c:	2001901f 	.word	0x2001901f
   31760:	0004274c 	.word	0x0004274c

00031764 <tls_interface_sendto>:
   31764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31768:	b085      	sub	sp, #20
   3176a:	4606      	mov	r6, r0
   3176c:	4691      	mov	r9, r2
   3176e:	461f      	mov	r7, r3
   31770:	9103      	str	r1, [sp, #12]
   31772:	f7fe fe65 	bl	30440 <interface_socket_from_handle_get>
   31776:	4605      	mov	r5, r0
   31778:	2800      	cmp	r0, #0
   3177a:	d06c      	beq.n	31856 <tls_interface_sendto+0xf2>
   3177c:	f04f 0a24 	mov.w	sl, #36	; 0x24
   31780:	07bb      	lsls	r3, r7, #30
   31782:	bf48      	it	mi
   31784:	2300      	movmi	r3, #0
   31786:	f04f 0400 	mov.w	r4, #0
   3178a:	f04f 3bff 	mov.w	fp, #4294967295
   3178e:	bf58      	it	pl
   31790:	6803      	ldrpl	r3, [r0, #0]
   31792:	fb0a fa06 	mul.w	sl, sl, r6
   31796:	bf5c      	itt	pl
   31798:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   3179c:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   317a0:	9302      	str	r3, [sp, #8]
   317a2:	6829      	ldr	r1, [r5, #0]
   317a4:	eba9 0804 	sub.w	r8, r9, r4
   317a8:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   317ac:	b289      	uxth	r1, r1
   317ae:	bfa8      	it	ge
   317b0:	f44f 6800 	movge.w	r8, #2048	; 0x800
   317b4:	290c      	cmp	r1, #12
   317b6:	d110      	bne.n	317da <tls_interface_sendto+0x76>
   317b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   317ba:	9903      	ldr	r1, [sp, #12]
   317bc:	9301      	str	r3, [sp, #4]
   317be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   317c0:	4642      	mov	r2, r8
   317c2:	9300      	str	r3, [sp, #0]
   317c4:	4630      	mov	r0, r6
   317c6:	463b      	mov	r3, r7
   317c8:	4421      	add	r1, r4
   317ca:	f7fe ffeb 	bl	307a4 <ip_interface_sendto>
   317ce:	f1b0 0b00 	subs.w	fp, r0, #0
   317d2:	da32      	bge.n	3183a <tls_interface_sendto+0xd6>
   317d4:	f04f 34ff 	mov.w	r4, #4294967295
   317d8:	e034      	b.n	31844 <tls_interface_sendto+0xe0>
   317da:	6829      	ldr	r1, [r5, #0]
   317dc:	b289      	uxth	r1, r1
   317de:	290b      	cmp	r1, #11
   317e0:	d109      	bne.n	317f6 <tls_interface_sendto+0x92>
   317e2:	4b22      	ldr	r3, [pc, #136]	; (3186c <tls_interface_sendto+0x108>)
   317e4:	f813 200a 	ldrb.w	r2, [r3, sl]
   317e8:	2a02      	cmp	r2, #2
   317ea:	d036      	beq.n	3185a <tls_interface_sendto+0xf6>
   317ec:	692a      	ldr	r2, [r5, #16]
   317ee:	2a01      	cmp	r2, #1
   317f0:	d135      	bne.n	3185e <tls_interface_sendto+0xfa>
   317f2:	202a      	movs	r0, #42	; 0x2a
   317f4:	e02c      	b.n	31850 <tls_interface_sendto+0xec>
   317f6:	4628      	mov	r0, r5
   317f8:	f00b f8a5 	bl	3c946 <attach_trigger_condition_verify>
   317fc:	b398      	cbz	r0, 31866 <tls_interface_sendto+0x102>
   317fe:	4b1b      	ldr	r3, [pc, #108]	; (3186c <tls_interface_sendto+0x108>)
   31800:	f813 100a 	ldrb.w	r1, [r3, sl]
   31804:	2902      	cmp	r1, #2
   31806:	d110      	bne.n	3182a <tls_interface_sendto+0xc6>
   31808:	4629      	mov	r1, r5
   3180a:	4630      	mov	r0, r6
   3180c:	f00b f8b2 	bl	3c974 <secure_client_socket>
   31810:	b970      	cbnz	r0, 31830 <tls_interface_sendto+0xcc>
   31812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   31814:	9903      	ldr	r1, [sp, #12]
   31816:	9301      	str	r3, [sp, #4]
   31818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3181a:	4642      	mov	r2, r8
   3181c:	9300      	str	r3, [sp, #0]
   3181e:	4630      	mov	r0, r6
   31820:	463b      	mov	r3, r7
   31822:	4421      	add	r1, r4
   31824:	f7fe ffbe 	bl	307a4 <ip_interface_sendto>
   31828:	4683      	mov	fp, r0
   3182a:	f1bb 0f00 	cmp.w	fp, #0
   3182e:	e7d0      	b.n	317d2 <tls_interface_sendto+0x6e>
   31830:	f1bb 3fff 	cmp.w	fp, #4294967295
   31834:	d00a      	beq.n	3184c <tls_interface_sendto+0xe8>
   31836:	2800      	cmp	r0, #0
   31838:	dc0a      	bgt.n	31850 <tls_interface_sendto+0xec>
   3183a:	9b02      	ldr	r3, [sp, #8]
   3183c:	445c      	add	r4, fp
   3183e:	b10b      	cbz	r3, 31844 <tls_interface_sendto+0xe0>
   31840:	45a1      	cmp	r9, r4
   31842:	dcae      	bgt.n	317a2 <tls_interface_sendto+0x3e>
   31844:	4620      	mov	r0, r4
   31846:	b005      	add	sp, #20
   31848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3184c:	2800      	cmp	r0, #0
   3184e:	ddc1      	ble.n	317d4 <tls_interface_sendto+0x70>
   31850:	f7f7 fcf8 	bl	29244 <nrf_modem_os_errno_set>
   31854:	e7be      	b.n	317d4 <tls_interface_sendto+0x70>
   31856:	2009      	movs	r0, #9
   31858:	e7fa      	b.n	31850 <tls_interface_sendto+0xec>
   3185a:	2023      	movs	r0, #35	; 0x23
   3185c:	e7f8      	b.n	31850 <tls_interface_sendto+0xec>
   3185e:	f1bb 3fff 	cmp.w	fp, #4294967295
   31862:	d1ea      	bne.n	3183a <tls_interface_sendto+0xd6>
   31864:	e7b6      	b.n	317d4 <tls_interface_sendto+0x70>
   31866:	2039      	movs	r0, #57	; 0x39
   31868:	e7f2      	b.n	31850 <tls_interface_sendto+0xec>
   3186a:	bf00      	nop
   3186c:	2001901f 	.word	0x2001901f

00031870 <tls_interface_recvfrom>:
   31870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31874:	460d      	mov	r5, r1
   31876:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3187a:	4604      	mov	r4, r0
   3187c:	4616      	mov	r6, r2
   3187e:	461f      	mov	r7, r3
   31880:	f7fe fdde 	bl	30440 <interface_socket_from_handle_get>
   31884:	4601      	mov	r1, r0
   31886:	b320      	cbz	r0, 318d2 <tls_interface_recvfrom+0x62>
   31888:	6803      	ldr	r3, [r0, #0]
   3188a:	b29b      	uxth	r3, r3
   3188c:	2b0c      	cmp	r3, #12
   3188e:	d003      	beq.n	31898 <tls_interface_recvfrom+0x28>
   31890:	6803      	ldr	r3, [r0, #0]
   31892:	b29b      	uxth	r3, r3
   31894:	2b0d      	cmp	r3, #13
   31896:	d109      	bne.n	318ac <tls_interface_recvfrom+0x3c>
   31898:	463b      	mov	r3, r7
   3189a:	4632      	mov	r2, r6
   3189c:	4629      	mov	r1, r5
   3189e:	4620      	mov	r0, r4
   318a0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   318a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   318a8:	f00a bdfe 	b.w	3c4a8 <ip_interface_recvfrom>
   318ac:	f00b f84b 	bl	3c946 <attach_trigger_condition_verify>
   318b0:	b198      	cbz	r0, 318da <tls_interface_recvfrom+0x6a>
   318b2:	2324      	movs	r3, #36	; 0x24
   318b4:	4363      	muls	r3, r4
   318b6:	4a0a      	ldr	r2, [pc, #40]	; (318e0 <tls_interface_recvfrom+0x70>)
   318b8:	5cd3      	ldrb	r3, [r2, r3]
   318ba:	2b02      	cmp	r3, #2
   318bc:	d10d      	bne.n	318da <tls_interface_recvfrom+0x6a>
   318be:	4620      	mov	r0, r4
   318c0:	f00b f858 	bl	3c974 <secure_client_socket>
   318c4:	2800      	cmp	r0, #0
   318c6:	d0e7      	beq.n	31898 <tls_interface_recvfrom+0x28>
   318c8:	dc04      	bgt.n	318d4 <tls_interface_recvfrom+0x64>
   318ca:	f04f 30ff 	mov.w	r0, #4294967295
   318ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   318d2:	2009      	movs	r0, #9
   318d4:	f7f7 fcb6 	bl	29244 <nrf_modem_os_errno_set>
   318d8:	e7f7      	b.n	318ca <tls_interface_recvfrom+0x5a>
   318da:	2023      	movs	r0, #35	; 0x23
   318dc:	e7fa      	b.n	318d4 <tls_interface_recvfrom+0x64>
   318de:	bf00      	nop
   318e0:	2001901f 	.word	0x2001901f

000318e4 <tls_interface_bind>:
   318e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   318e6:	4604      	mov	r4, r0
   318e8:	460e      	mov	r6, r1
   318ea:	4617      	mov	r7, r2
   318ec:	f7fe fda8 	bl	30440 <interface_socket_from_handle_get>
   318f0:	4605      	mov	r5, r0
   318f2:	b1d8      	cbz	r0, 3192c <tls_interface_bind+0x48>
   318f4:	6803      	ldr	r3, [r0, #0]
   318f6:	b29b      	uxth	r3, r3
   318f8:	2b02      	cmp	r3, #2
   318fa:	d119      	bne.n	31930 <tls_interface_bind+0x4c>
   318fc:	463a      	mov	r2, r7
   318fe:	4631      	mov	r1, r6
   31900:	4620      	mov	r0, r4
   31902:	f7ff f8b3 	bl	30a6c <ip_interface_bind>
   31906:	b950      	cbnz	r0, 3191e <tls_interface_bind+0x3a>
   31908:	2324      	movs	r3, #36	; 0x24
   3190a:	4363      	muls	r3, r4
   3190c:	4a09      	ldr	r2, [pc, #36]	; (31934 <tls_interface_bind+0x50>)
   3190e:	5cd3      	ldrb	r3, [r2, r3]
   31910:	2b01      	cmp	r3, #1
   31912:	d10a      	bne.n	3192a <tls_interface_bind+0x46>
   31914:	2204      	movs	r2, #4
   31916:	4629      	mov	r1, r5
   31918:	4620      	mov	r0, r4
   3191a:	f7ff fe8d 	bl	31638 <secure_socket_attach_initiate>
   3191e:	2800      	cmp	r0, #0
   31920:	dd03      	ble.n	3192a <tls_interface_bind+0x46>
   31922:	f7f7 fc8f 	bl	29244 <nrf_modem_os_errno_set>
   31926:	f04f 30ff 	mov.w	r0, #4294967295
   3192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3192c:	2009      	movs	r0, #9
   3192e:	e7f8      	b.n	31922 <tls_interface_bind+0x3e>
   31930:	202d      	movs	r0, #45	; 0x2d
   31932:	e7f6      	b.n	31922 <tls_interface_bind+0x3e>
   31934:	2001901f 	.word	0x2001901f

00031938 <tls_interface_connect>:
   31938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3193a:	4605      	mov	r5, r0
   3193c:	460e      	mov	r6, r1
   3193e:	4617      	mov	r7, r2
   31940:	f7fe fd7e 	bl	30440 <interface_socket_from_handle_get>
   31944:	4604      	mov	r4, r0
   31946:	b1f0      	cbz	r0, 31986 <tls_interface_connect+0x4e>
   31948:	2324      	movs	r3, #36	; 0x24
   3194a:	436b      	muls	r3, r5
   3194c:	4a10      	ldr	r2, [pc, #64]	; (31990 <tls_interface_connect+0x58>)
   3194e:	5cd3      	ldrb	r3, [r2, r3]
   31950:	2b02      	cmp	r3, #2
   31952:	d11a      	bne.n	3198a <tls_interface_connect+0x52>
   31954:	6803      	ldr	r3, [r0, #0]
   31956:	b29b      	uxth	r3, r3
   31958:	2b02      	cmp	r3, #2
   3195a:	d003      	beq.n	31964 <tls_interface_connect+0x2c>
   3195c:	6803      	ldr	r3, [r0, #0]
   3195e:	b29b      	uxth	r3, r3
   31960:	2b04      	cmp	r3, #4
   31962:	d112      	bne.n	3198a <tls_interface_connect+0x52>
   31964:	463a      	mov	r2, r7
   31966:	4631      	mov	r1, r6
   31968:	4628      	mov	r0, r5
   3196a:	f00a fe9a 	bl	3c6a2 <ip_interface_connect>
   3196e:	b918      	cbnz	r0, 31978 <tls_interface_connect+0x40>
   31970:	4621      	mov	r1, r4
   31972:	4628      	mov	r0, r5
   31974:	f00a fffe 	bl	3c974 <secure_client_socket>
   31978:	2800      	cmp	r0, #0
   3197a:	dd03      	ble.n	31984 <tls_interface_connect+0x4c>
   3197c:	f7f7 fc62 	bl	29244 <nrf_modem_os_errno_set>
   31980:	f04f 30ff 	mov.w	r0, #4294967295
   31984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31986:	2009      	movs	r0, #9
   31988:	e7f8      	b.n	3197c <tls_interface_connect+0x44>
   3198a:	202d      	movs	r0, #45	; 0x2d
   3198c:	e7f6      	b.n	3197c <tls_interface_connect+0x44>
   3198e:	bf00      	nop
   31990:	2001901f 	.word	0x2001901f

00031994 <tls_interface_listen>:
   31994:	b538      	push	{r3, r4, r5, lr}
   31996:	460d      	mov	r5, r1
   31998:	4604      	mov	r4, r0
   3199a:	f7fe fd51 	bl	30440 <interface_socket_from_handle_get>
   3199e:	4601      	mov	r1, r0
   319a0:	2800      	cmp	r0, #0
   319a2:	d033      	beq.n	31a0c <tls_interface_listen+0x78>
   319a4:	6803      	ldr	r3, [r0, #0]
   319a6:	00db      	lsls	r3, r3, #3
   319a8:	d432      	bmi.n	31a10 <tls_interface_listen+0x7c>
   319aa:	6903      	ldr	r3, [r0, #16]
   319ac:	2b01      	cmp	r3, #1
   319ae:	d12f      	bne.n	31a10 <tls_interface_listen+0x7c>
   319b0:	6803      	ldr	r3, [r0, #0]
   319b2:	b29b      	uxth	r3, r3
   319b4:	2b04      	cmp	r3, #4
   319b6:	d105      	bne.n	319c4 <tls_interface_listen+0x30>
   319b8:	2324      	movs	r3, #36	; 0x24
   319ba:	4363      	muls	r3, r4
   319bc:	4a15      	ldr	r2, [pc, #84]	; (31a14 <tls_interface_listen+0x80>)
   319be:	5cd3      	ldrb	r3, [r2, r3]
   319c0:	2b02      	cmp	r3, #2
   319c2:	d009      	beq.n	319d8 <tls_interface_listen+0x44>
   319c4:	680b      	ldr	r3, [r1, #0]
   319c6:	b29b      	uxth	r3, r3
   319c8:	2b0b      	cmp	r3, #11
   319ca:	d121      	bne.n	31a10 <tls_interface_listen+0x7c>
   319cc:	2324      	movs	r3, #36	; 0x24
   319ce:	4363      	muls	r3, r4
   319d0:	4a10      	ldr	r2, [pc, #64]	; (31a14 <tls_interface_listen+0x80>)
   319d2:	5cd3      	ldrb	r3, [r2, r3]
   319d4:	2b01      	cmp	r3, #1
   319d6:	d11b      	bne.n	31a10 <tls_interface_listen+0x7c>
   319d8:	2324      	movs	r3, #36	; 0x24
   319da:	2001      	movs	r0, #1
   319dc:	4363      	muls	r3, r4
   319de:	4a0d      	ldr	r2, [pc, #52]	; (31a14 <tls_interface_listen+0x80>)
   319e0:	54d0      	strb	r0, [r2, r3]
   319e2:	680b      	ldr	r3, [r1, #0]
   319e4:	2b0b      	cmp	r3, #11
   319e6:	d10a      	bne.n	319fe <tls_interface_listen+0x6a>
   319e8:	4629      	mov	r1, r5
   319ea:	4620      	mov	r0, r4
   319ec:	f7ff f89a 	bl	30b24 <ip_interface_listen>
   319f0:	2800      	cmp	r0, #0
   319f2:	dd03      	ble.n	319fc <tls_interface_listen+0x68>
   319f4:	f7f7 fc26 	bl	29244 <nrf_modem_os_errno_set>
   319f8:	f04f 30ff 	mov.w	r0, #4294967295
   319fc:	bd38      	pop	{r3, r4, r5, pc}
   319fe:	4620      	mov	r0, r4
   31a00:	680a      	ldr	r2, [r1, #0]
   31a02:	f7ff fe19 	bl	31638 <secure_socket_attach_initiate>
   31a06:	2800      	cmp	r0, #0
   31a08:	d0ee      	beq.n	319e8 <tls_interface_listen+0x54>
   31a0a:	e7f1      	b.n	319f0 <tls_interface_listen+0x5c>
   31a0c:	2009      	movs	r0, #9
   31a0e:	e7f1      	b.n	319f4 <tls_interface_listen+0x60>
   31a10:	202d      	movs	r0, #45	; 0x2d
   31a12:	e7ef      	b.n	319f4 <tls_interface_listen+0x60>
   31a14:	2001901f 	.word	0x2001901f

00031a18 <tls_interface_accept>:
   31a18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   31a1c:	4606      	mov	r6, r0
   31a1e:	460d      	mov	r5, r1
   31a20:	4617      	mov	r7, r2
   31a22:	4698      	mov	r8, r3
   31a24:	f04f 34ff 	mov.w	r4, #4294967295
   31a28:	f7fe fd0a 	bl	30440 <interface_socket_from_handle_get>
   31a2c:	9401      	str	r4, [sp, #4]
   31a2e:	2800      	cmp	r0, #0
   31a30:	d047      	beq.n	31ac2 <tls_interface_accept+0xaa>
   31a32:	6803      	ldr	r3, [r0, #0]
   31a34:	b29b      	uxth	r3, r3
   31a36:	2b07      	cmp	r3, #7
   31a38:	d143      	bne.n	31ac2 <tls_interface_accept+0xaa>
   31a3a:	6803      	ldr	r3, [r0, #0]
   31a3c:	00db      	lsls	r3, r3, #3
   31a3e:	d506      	bpl.n	31a4e <tls_interface_accept+0x36>
   31a40:	202d      	movs	r0, #45	; 0x2d
   31a42:	f7f7 fbff 	bl	29244 <nrf_modem_os_errno_set>
   31a46:	4620      	mov	r0, r4
   31a48:	b002      	add	sp, #8
   31a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31a4e:	4643      	mov	r3, r8
   31a50:	463a      	mov	r2, r7
   31a52:	4629      	mov	r1, r5
   31a54:	4630      	mov	r0, r6
   31a56:	f7ff f8b1 	bl	30bbc <ip_interface_accept>
   31a5a:	1e04      	subs	r4, r0, #0
   31a5c:	db2b      	blt.n	31ab6 <tls_interface_accept+0x9e>
   31a5e:	f7fe fcef 	bl	30440 <interface_socket_from_handle_get>
   31a62:	2224      	movs	r2, #36	; 0x24
   31a64:	6803      	ldr	r3, [r0, #0]
   31a66:	fb02 f804 	mul.w	r8, r2, r4
   31a6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   31a6e:	6003      	str	r3, [r0, #0]
   31a70:	6803      	ldr	r3, [r0, #0]
   31a72:	4f15      	ldr	r7, [pc, #84]	; (31ac8 <tls_interface_accept+0xb0>)
   31a74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   31a78:	4605      	mov	r5, r0
   31a7a:	fb02 7106 	mla	r1, r2, r6, r7
   31a7e:	6003      	str	r3, [r0, #0]
   31a80:	eb07 0008 	add.w	r0, r7, r8
   31a84:	f00b fdf2 	bl	3d66c <memcpy>
   31a88:	2302      	movs	r3, #2
   31a8a:	f807 3008 	strb.w	r3, [r7, r8]
   31a8e:	682b      	ldr	r3, [r5, #0]
   31a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
   31a94:	0c1b      	lsrs	r3, r3, #16
   31a96:	041b      	lsls	r3, r3, #16
   31a98:	f043 030b 	orr.w	r3, r3, #11
   31a9c:	602b      	str	r3, [r5, #0]
   31a9e:	210c      	movs	r1, #12
   31aa0:	4620      	mov	r0, r4
   31aa2:	ab01      	add	r3, sp, #4
   31aa4:	f00a fcf0 	bl	3c488 <ip_interface_wait>
   31aa8:	4605      	mov	r5, r0
   31aaa:	2800      	cmp	r0, #0
   31aac:	d0cb      	beq.n	31a46 <tls_interface_accept+0x2e>
   31aae:	4620      	mov	r0, r4
   31ab0:	f7fe fe34 	bl	3071c <ip_interface_close>
   31ab4:	462c      	mov	r4, r5
   31ab6:	4620      	mov	r0, r4
   31ab8:	f7f7 fbc4 	bl	29244 <nrf_modem_os_errno_set>
   31abc:	f04f 34ff 	mov.w	r4, #4294967295
   31ac0:	e7c1      	b.n	31a46 <tls_interface_accept+0x2e>
   31ac2:	2409      	movs	r4, #9
   31ac4:	e7f7      	b.n	31ab6 <tls_interface_accept+0x9e>
   31ac6:	bf00      	nop
   31ac8:	2001901f 	.word	0x2001901f

00031acc <tls_interface_setopt>:
   31acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31ace:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   31ad2:	4606      	mov	r6, r0
   31ad4:	4615      	mov	r5, r2
   31ad6:	461f      	mov	r7, r3
   31ad8:	9c08      	ldr	r4, [sp, #32]
   31ada:	d004      	beq.n	31ae6 <tls_interface_setopt+0x1a>
   31adc:	b003      	add	sp, #12
   31ade:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   31ae2:	f7ff b949 	b.w	30d78 <ip_interface_setopt>
   31ae6:	b923      	cbnz	r3, 31af2 <tls_interface_setopt+0x26>
   31ae8:	2a05      	cmp	r2, #5
   31aea:	d100      	bne.n	31aee <tls_interface_setopt+0x22>
   31aec:	b10c      	cbz	r4, 31af2 <tls_interface_setopt+0x26>
   31aee:	200e      	movs	r0, #14
   31af0:	e077      	b.n	31be2 <tls_interface_setopt+0x116>
   31af2:	4630      	mov	r0, r6
   31af4:	f7fe fca4 	bl	30440 <interface_socket_from_handle_get>
   31af8:	4601      	mov	r1, r0
   31afa:	2800      	cmp	r0, #0
   31afc:	f000 8087 	beq.w	31c0e <tls_interface_setopt+0x142>
   31b00:	6803      	ldr	r3, [r0, #0]
   31b02:	b29b      	uxth	r3, r3
   31b04:	2b02      	cmp	r3, #2
   31b06:	d007      	beq.n	31b18 <tls_interface_setopt+0x4c>
   31b08:	6803      	ldr	r3, [r0, #0]
   31b0a:	b29b      	uxth	r3, r3
   31b0c:	2b04      	cmp	r3, #4
   31b0e:	d003      	beq.n	31b18 <tls_interface_setopt+0x4c>
   31b10:	6803      	ldr	r3, [r0, #0]
   31b12:	b29b      	uxth	r3, r3
   31b14:	2b05      	cmp	r3, #5
   31b16:	d17a      	bne.n	31c0e <tls_interface_setopt+0x142>
   31b18:	3d01      	subs	r5, #1
   31b1a:	2d08      	cmp	r5, #8
   31b1c:	d879      	bhi.n	31c12 <tls_interface_setopt+0x146>
   31b1e:	e8df f005 	tbb	[pc, r5]
   31b22:	2605      	.short	0x2605
   31b24:	55433818 	.word	0x55433818
   31b28:	6578      	.short	0x6578
   31b2a:	71          	.byte	0x71
   31b2b:	00          	.byte	0x00
   31b2c:	2c04      	cmp	r4, #4
   31b2e:	d174      	bne.n	31c1a <tls_interface_setopt+0x14e>
   31b30:	6838      	ldr	r0, [r7, #0]
   31b32:	b930      	cbnz	r0, 31b42 <tls_interface_setopt+0x76>
   31b34:	2324      	movs	r3, #36	; 0x24
   31b36:	2202      	movs	r2, #2
   31b38:	435e      	muls	r6, r3
   31b3a:	4b39      	ldr	r3, [pc, #228]	; (31c20 <tls_interface_setopt+0x154>)
   31b3c:	559a      	strb	r2, [r3, r6]
   31b3e:	b003      	add	sp, #12
   31b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31b42:	2801      	cmp	r0, #1
   31b44:	d169      	bne.n	31c1a <tls_interface_setopt+0x14e>
   31b46:	2324      	movs	r3, #36	; 0x24
   31b48:	435e      	muls	r6, r3
   31b4a:	4b35      	ldr	r3, [pc, #212]	; (31c20 <tls_interface_setopt+0x154>)
   31b4c:	5598      	strb	r0, [r3, r6]
   31b4e:	2000      	movs	r0, #0
   31b50:	e7f5      	b.n	31b3e <tls_interface_setopt+0x72>
   31b52:	2c01      	cmp	r4, #1
   31b54:	d161      	bne.n	31c1a <tls_interface_setopt+0x14e>
   31b56:	2f00      	cmp	r7, #0
   31b58:	d0c9      	beq.n	31aee <tls_interface_setopt+0x22>
   31b5a:	2024      	movs	r0, #36	; 0x24
   31b5c:	783b      	ldrb	r3, [r7, #0]
   31b5e:	4a30      	ldr	r2, [pc, #192]	; (31c20 <tls_interface_setopt+0x154>)
   31b60:	3b00      	subs	r3, #0
   31b62:	bf18      	it	ne
   31b64:	2301      	movne	r3, #1
   31b66:	fb00 2606 	mla	r6, r0, r6, r2
   31b6a:	7073      	strb	r3, [r6, #1]
   31b6c:	e7ef      	b.n	31b4e <tls_interface_setopt+0x82>
   31b6e:	2c03      	cmp	r4, #3
   31b70:	d953      	bls.n	31c1a <tls_interface_setopt+0x14e>
   31b72:	f014 0503 	ands.w	r5, r4, #3
   31b76:	d150      	bne.n	31c1a <tls_interface_setopt+0x14e>
   31b78:	2324      	movs	r3, #36	; 0x24
   31b7a:	435e      	muls	r6, r3
   31b7c:	4828      	ldr	r0, [pc, #160]	; (31c20 <tls_interface_setopt+0x154>)
   31b7e:	08a2      	lsrs	r2, r4, #2
   31b80:	1983      	adds	r3, r0, r6
   31b82:	70da      	strb	r2, [r3, #3]
   31b84:	4639      	mov	r1, r7
   31b86:	4622      	mov	r2, r4
   31b88:	3604      	adds	r6, #4
   31b8a:	4430      	add	r0, r6
   31b8c:	f00b fd6e 	bl	3d66c <memcpy>
   31b90:	e7dd      	b.n	31b4e <tls_interface_setopt+0x82>
   31b92:	2c04      	cmp	r4, #4
   31b94:	d141      	bne.n	31c1a <tls_interface_setopt+0x14e>
   31b96:	683b      	ldr	r3, [r7, #0]
   31b98:	2b02      	cmp	r3, #2
   31b9a:	d83e      	bhi.n	31c1a <tls_interface_setopt+0x14e>
   31b9c:	2024      	movs	r0, #36	; 0x24
   31b9e:	4a20      	ldr	r2, [pc, #128]	; (31c20 <tls_interface_setopt+0x154>)
   31ba0:	fb00 2606 	mla	r6, r0, r6, r2
   31ba4:	70b3      	strb	r3, [r6, #2]
   31ba6:	e7d2      	b.n	31b4e <tls_interface_setopt+0x82>
   31ba8:	4630      	mov	r0, r6
   31baa:	f7ff fd33 	bl	31614 <hostname_free>
   31bae:	2c00      	cmp	r4, #0
   31bb0:	d0cd      	beq.n	31b4e <tls_interface_setopt+0x82>
   31bb2:	4620      	mov	r0, r4
   31bb4:	f7f7 fd38 	bl	29628 <nrf_modem_os_alloc>
   31bb8:	4b1a      	ldr	r3, [pc, #104]	; (31c24 <tls_interface_setopt+0x158>)
   31bba:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   31bbe:	b350      	cbz	r0, 31c16 <tls_interface_setopt+0x14a>
   31bc0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   31bc4:	4622      	mov	r2, r4
   31bc6:	4639      	mov	r1, r7
   31bc8:	6074      	str	r4, [r6, #4]
   31bca:	e7df      	b.n	31b8c <tls_interface_setopt+0xc0>
   31bcc:	f247 0301 	movw	r3, #28673	; 0x7001
   31bd0:	e9cd 7400 	strd	r7, r4, [sp]
   31bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
   31bd8:	4630      	mov	r0, r6
   31bda:	f00a fdf4 	bl	3c7c6 <ip_interface_socketoption_send>
   31bde:	2800      	cmp	r0, #0
   31be0:	d0b5      	beq.n	31b4e <tls_interface_setopt+0x82>
   31be2:	f7f7 fb2f 	bl	29244 <nrf_modem_os_errno_set>
   31be6:	f04f 30ff 	mov.w	r0, #4294967295
   31bea:	e7a8      	b.n	31b3e <tls_interface_setopt+0x72>
   31bec:	2c04      	cmp	r4, #4
   31bee:	d114      	bne.n	31c1a <tls_interface_setopt+0x14e>
   31bf0:	6838      	ldr	r0, [r7, #0]
   31bf2:	f7ff fcf3 	bl	315dc <secure_socket_dtls_timeout_check>
   31bf6:	2800      	cmp	r0, #0
   31bf8:	d1f3      	bne.n	31be2 <tls_interface_setopt+0x116>
   31bfa:	f247 0302 	movw	r3, #28674	; 0x7002
   31bfe:	e9cd 7400 	strd	r7, r4, [sp]
   31c02:	e7e7      	b.n	31bd4 <tls_interface_setopt+0x108>
   31c04:	f247 0303 	movw	r3, #28675	; 0x7003
   31c08:	e9cd 7400 	strd	r7, r4, [sp]
   31c0c:	e7e2      	b.n	31bd4 <tls_interface_setopt+0x108>
   31c0e:	2009      	movs	r0, #9
   31c10:	e7e7      	b.n	31be2 <tls_interface_setopt+0x116>
   31c12:	202a      	movs	r0, #42	; 0x2a
   31c14:	e7e5      	b.n	31be2 <tls_interface_setopt+0x116>
   31c16:	200c      	movs	r0, #12
   31c18:	e7e3      	b.n	31be2 <tls_interface_setopt+0x116>
   31c1a:	2016      	movs	r0, #22
   31c1c:	e7e1      	b.n	31be2 <tls_interface_setopt+0x116>
   31c1e:	bf00      	nop
   31c20:	2001901f 	.word	0x2001901f
   31c24:	20017eb8 	.word	0x20017eb8

00031c28 <tls_interface_getopt>:
   31c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31c2a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   31c2e:	4606      	mov	r6, r0
   31c30:	4617      	mov	r7, r2
   31c32:	461c      	mov	r4, r3
   31c34:	9d08      	ldr	r5, [sp, #32]
   31c36:	d004      	beq.n	31c42 <tls_interface_getopt+0x1a>
   31c38:	b003      	add	sp, #12
   31c3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   31c3e:	f00a be27 	b.w	3c890 <ip_interface_getopt>
   31c42:	2b00      	cmp	r3, #0
   31c44:	d062      	beq.n	31d0c <tls_interface_getopt+0xe4>
   31c46:	2d00      	cmp	r5, #0
   31c48:	d060      	beq.n	31d0c <tls_interface_getopt+0xe4>
   31c4a:	f7fe fbf9 	bl	30440 <interface_socket_from_handle_get>
   31c4e:	4601      	mov	r1, r0
   31c50:	2800      	cmp	r0, #0
   31c52:	d05d      	beq.n	31d10 <tls_interface_getopt+0xe8>
   31c54:	1e7a      	subs	r2, r7, #1
   31c56:	2a07      	cmp	r2, #7
   31c58:	d85c      	bhi.n	31d14 <tls_interface_getopt+0xec>
   31c5a:	e8df f002 	tbb	[pc, r2]
   31c5e:	1c04      	.short	0x1c04
   31c60:	405b3710 	.word	0x405b3710
   31c64:	4a5b      	.short	0x4a5b
   31c66:	682b      	ldr	r3, [r5, #0]
   31c68:	2b04      	cmp	r3, #4
   31c6a:	d155      	bne.n	31d18 <tls_interface_getopt+0xf0>
   31c6c:	2024      	movs	r0, #36	; 0x24
   31c6e:	4346      	muls	r6, r0
   31c70:	4b2a      	ldr	r3, [pc, #168]	; (31d1c <tls_interface_getopt+0xf4>)
   31c72:	5d9b      	ldrb	r3, [r3, r6]
   31c74:	1e59      	subs	r1, r3, #1
   31c76:	424b      	negs	r3, r1
   31c78:	414b      	adcs	r3, r1
   31c7a:	6023      	str	r3, [r4, #0]
   31c7c:	e008      	b.n	31c90 <tls_interface_getopt+0x68>
   31c7e:	682b      	ldr	r3, [r5, #0]
   31c80:	2b01      	cmp	r3, #1
   31c82:	d149      	bne.n	31d18 <tls_interface_getopt+0xf0>
   31c84:	2024      	movs	r0, #36	; 0x24
   31c86:	4925      	ldr	r1, [pc, #148]	; (31d1c <tls_interface_getopt+0xf4>)
   31c88:	fb00 1606 	mla	r6, r0, r6, r1
   31c8c:	7873      	ldrb	r3, [r6, #1]
   31c8e:	7023      	strb	r3, [r4, #0]
   31c90:	2000      	movs	r0, #0
   31c92:	b003      	add	sp, #12
   31c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31c96:	2224      	movs	r2, #36	; 0x24
   31c98:	4920      	ldr	r1, [pc, #128]	; (31d1c <tls_interface_getopt+0xf4>)
   31c9a:	682b      	ldr	r3, [r5, #0]
   31c9c:	fb02 1206 	mla	r2, r2, r6, r1
   31ca0:	78d0      	ldrb	r0, [r2, #3]
   31ca2:	079a      	lsls	r2, r3, #30
   31ca4:	bf14      	ite	ne
   31ca6:	2300      	movne	r3, #0
   31ca8:	089b      	lsreq	r3, r3, #2
   31caa:	4283      	cmp	r3, r0
   31cac:	bf28      	it	cs
   31cae:	4603      	movcs	r3, r0
   31cb0:	009a      	lsls	r2, r3, #2
   31cb2:	b143      	cbz	r3, 31cc6 <tls_interface_getopt+0x9e>
   31cb4:	2024      	movs	r0, #36	; 0x24
   31cb6:	fb00 1106 	mla	r1, r0, r6, r1
   31cba:	602a      	str	r2, [r5, #0]
   31cbc:	4620      	mov	r0, r4
   31cbe:	3104      	adds	r1, #4
   31cc0:	f00b fcd4 	bl	3d66c <memcpy>
   31cc4:	e7e4      	b.n	31c90 <tls_interface_getopt+0x68>
   31cc6:	bb38      	cbnz	r0, 31d18 <tls_interface_getopt+0xf0>
   31cc8:	6028      	str	r0, [r5, #0]
   31cca:	e7e2      	b.n	31c92 <tls_interface_getopt+0x6a>
   31ccc:	682b      	ldr	r3, [r5, #0]
   31cce:	2b04      	cmp	r3, #4
   31cd0:	d122      	bne.n	31d18 <tls_interface_getopt+0xf0>
   31cd2:	2024      	movs	r0, #36	; 0x24
   31cd4:	4911      	ldr	r1, [pc, #68]	; (31d1c <tls_interface_getopt+0xf4>)
   31cd6:	fb00 1606 	mla	r6, r0, r6, r1
   31cda:	78b3      	ldrb	r3, [r6, #2]
   31cdc:	e7cd      	b.n	31c7a <tls_interface_getopt+0x52>
   31cde:	f247 0301 	movw	r3, #28673	; 0x7001
   31ce2:	e9cd 4500 	strd	r4, r5, [sp]
   31ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
   31cea:	4630      	mov	r0, r6
   31cec:	f7fe fe42 	bl	30974 <ip_interface_socketoption_get>
   31cf0:	e7cf      	b.n	31c92 <tls_interface_getopt+0x6a>
   31cf2:	682b      	ldr	r3, [r5, #0]
   31cf4:	2b04      	cmp	r3, #4
   31cf6:	d10f      	bne.n	31d18 <tls_interface_getopt+0xf0>
   31cf8:	6820      	ldr	r0, [r4, #0]
   31cfa:	f7ff fc6f 	bl	315dc <secure_socket_dtls_timeout_check>
   31cfe:	2800      	cmp	r0, #0
   31d00:	d1c7      	bne.n	31c92 <tls_interface_getopt+0x6a>
   31d02:	f247 0302 	movw	r3, #28674	; 0x7002
   31d06:	e9cd 4500 	strd	r4, r5, [sp]
   31d0a:	e7ec      	b.n	31ce6 <tls_interface_getopt+0xbe>
   31d0c:	200e      	movs	r0, #14
   31d0e:	e7c0      	b.n	31c92 <tls_interface_getopt+0x6a>
   31d10:	2009      	movs	r0, #9
   31d12:	e7be      	b.n	31c92 <tls_interface_getopt+0x6a>
   31d14:	202a      	movs	r0, #42	; 0x2a
   31d16:	e7bc      	b.n	31c92 <tls_interface_getopt+0x6a>
   31d18:	2016      	movs	r0, #22
   31d1a:	e7ba      	b.n	31c92 <tls_interface_getopt+0x6a>
   31d1c:	2001901f 	.word	0x2001901f

00031d20 <tls_rpc_ip_event_handler>:
   31d20:	b570      	push	{r4, r5, r6, lr}
   31d22:	460c      	mov	r4, r1
   31d24:	f248 0181 	movw	r1, #32897	; 0x8081
   31d28:	428b      	cmp	r3, r1
   31d2a:	4606      	mov	r6, r0
   31d2c:	d035      	beq.n	31d9a <tls_rpc_ip_event_handler+0x7a>
   31d2e:	f249 0182 	movw	r1, #36994	; 0x9082
   31d32:	428b      	cmp	r3, r1
   31d34:	d040      	beq.n	31db8 <tls_rpc_ip_event_handler+0x98>
   31d36:	f248 0102 	movw	r1, #32770	; 0x8002
   31d3a:	428b      	cmp	r3, r1
   31d3c:	d161      	bne.n	31e02 <tls_rpc_ip_event_handler+0xe2>
   31d3e:	2c00      	cmp	r4, #0
   31d40:	d05f      	beq.n	31e02 <tls_rpc_ip_event_handler+0xe2>
   31d42:	6963      	ldr	r3, [r4, #20]
   31d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   31d48:	d002      	beq.n	31d50 <tls_rpc_ip_event_handler+0x30>
   31d4a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   31d4e:	d158      	bne.n	31e02 <tls_rpc_ip_event_handler+0xe2>
   31d50:	6823      	ldr	r3, [r4, #0]
   31d52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   31d56:	6023      	str	r3, [r4, #0]
   31d58:	6955      	ldr	r5, [r2, #20]
   31d5a:	2d00      	cmp	r5, #0
   31d5c:	d14d      	bne.n	31dfa <tls_rpc_ip_event_handler+0xda>
   31d5e:	6823      	ldr	r3, [r4, #0]
   31d60:	0c1b      	lsrs	r3, r3, #16
   31d62:	041b      	lsls	r3, r3, #16
   31d64:	f043 0305 	orr.w	r3, r3, #5
   31d68:	6023      	str	r3, [r4, #0]
   31d6a:	6823      	ldr	r3, [r4, #0]
   31d6c:	00db      	lsls	r3, r3, #3
   31d6e:	d401      	bmi.n	31d74 <tls_rpc_ip_event_handler+0x54>
   31d70:	2000      	movs	r0, #0
   31d72:	e020      	b.n	31db6 <tls_rpc_ip_event_handler+0x96>
   31d74:	2324      	movs	r3, #36	; 0x24
   31d76:	4373      	muls	r3, r6
   31d78:	4a23      	ldr	r2, [pc, #140]	; (31e08 <tls_rpc_ip_event_handler+0xe8>)
   31d7a:	5cd3      	ldrb	r3, [r2, r3]
   31d7c:	2b02      	cmp	r3, #2
   31d7e:	d1f7      	bne.n	31d70 <tls_rpc_ip_event_handler+0x50>
   31d80:	4621      	mov	r1, r4
   31d82:	4630      	mov	r0, r6
   31d84:	f00a fdf6 	bl	3c974 <secure_client_socket>
   31d88:	2800      	cmp	r0, #0
   31d8a:	d0f1      	beq.n	31d70 <tls_rpc_ip_event_handler+0x50>
   31d8c:	2873      	cmp	r0, #115	; 0x73
   31d8e:	d0ef      	beq.n	31d70 <tls_rpc_ip_event_handler+0x50>
   31d90:	6060      	str	r0, [r4, #4]
   31d92:	6823      	ldr	r3, [r4, #0]
   31d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   31d98:	e02d      	b.n	31df6 <tls_rpc_ip_event_handler+0xd6>
   31d9a:	2c00      	cmp	r4, #0
   31d9c:	d0e8      	beq.n	31d70 <tls_rpc_ip_event_handler+0x50>
   31d9e:	6823      	ldr	r3, [r4, #0]
   31da0:	b29b      	uxth	r3, r3
   31da2:	2b0a      	cmp	r3, #10
   31da4:	d1e4      	bne.n	31d70 <tls_rpc_ip_event_handler+0x50>
   31da6:	6950      	ldr	r0, [r2, #20]
   31da8:	bb40      	cbnz	r0, 31dfc <tls_rpc_ip_event_handler+0xdc>
   31daa:	6823      	ldr	r3, [r4, #0]
   31dac:	0c1b      	lsrs	r3, r3, #16
   31dae:	041b      	lsls	r3, r3, #16
   31db0:	f043 030b 	orr.w	r3, r3, #11
   31db4:	6023      	str	r3, [r4, #0]
   31db6:	bd70      	pop	{r4, r5, r6, pc}
   31db8:	2c00      	cmp	r4, #0
   31dba:	d0d9      	beq.n	31d70 <tls_rpc_ip_event_handler+0x50>
   31dbc:	6823      	ldr	r3, [r4, #0]
   31dbe:	b29b      	uxth	r3, r3
   31dc0:	2b0b      	cmp	r3, #11
   31dc2:	d1d5      	bne.n	31d70 <tls_rpc_ip_event_handler+0x50>
   31dc4:	6915      	ldr	r5, [r2, #16]
   31dc6:	b9c5      	cbnz	r5, 31dfa <tls_rpc_ip_event_handler+0xda>
   31dc8:	6823      	ldr	r3, [r4, #0]
   31dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   31dce:	6023      	str	r3, [r4, #0]
   31dd0:	f7ff fc20 	bl	31614 <hostname_free>
   31dd4:	6823      	ldr	r3, [r4, #0]
   31dd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   31dda:	6023      	str	r3, [r4, #0]
   31ddc:	6823      	ldr	r3, [r4, #0]
   31dde:	0c1b      	lsrs	r3, r3, #16
   31de0:	041b      	lsls	r3, r3, #16
   31de2:	f043 030c 	orr.w	r3, r3, #12
   31de6:	6023      	str	r3, [r4, #0]
   31de8:	6823      	ldr	r3, [r4, #0]
   31dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   31dee:	6023      	str	r3, [r4, #0]
   31df0:	6823      	ldr	r3, [r4, #0]
   31df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   31df6:	6023      	str	r3, [r4, #0]
   31df8:	e7ba      	b.n	31d70 <tls_rpc_ip_event_handler+0x50>
   31dfa:	4628      	mov	r0, r5
   31dfc:	f7fe fbd4 	bl	305a8 <rpc_error_to_nrf_errno>
   31e00:	e7c6      	b.n	31d90 <tls_rpc_ip_event_handler+0x70>
   31e02:	2001      	movs	r0, #1
   31e04:	e7d7      	b.n	31db6 <tls_rpc_ip_event_handler+0x96>
   31e06:	bf00      	nop
   31e08:	2001901f 	.word	0x2001901f

00031e0c <at_interface_init>:
   31e0c:	2201      	movs	r2, #1
   31e0e:	4b02      	ldr	r3, [pc, #8]	; (31e18 <at_interface_init+0xc>)
   31e10:	2000      	movs	r0, #0
   31e12:	701a      	strb	r2, [r3, #0]
   31e14:	4770      	bx	lr
   31e16:	bf00      	nop
   31e18:	20019163 	.word	0x20019163

00031e1c <at_interface_open>:
   31e1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   31e20:	f04f 0800 	mov.w	r8, #0
   31e24:	4b19      	ldr	r3, [pc, #100]	; (31e8c <at_interface_open+0x70>)
   31e26:	4607      	mov	r7, r0
   31e28:	781b      	ldrb	r3, [r3, #0]
   31e2a:	460d      	mov	r5, r1
   31e2c:	4616      	mov	r6, r2
   31e2e:	f8cd 800c 	str.w	r8, [sp, #12]
   31e32:	b943      	cbnz	r3, 31e46 <at_interface_open+0x2a>
   31e34:	2070      	movs	r0, #112	; 0x70
   31e36:	f7f7 fa05 	bl	29244 <nrf_modem_os_errno_set>
   31e3a:	f04f 34ff 	mov.w	r4, #4294967295
   31e3e:	4620      	mov	r0, r4
   31e40:	b004      	add	sp, #16
   31e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31e46:	2902      	cmp	r1, #2
   31e48:	d001      	beq.n	31e4e <at_interface_open+0x32>
   31e4a:	2029      	movs	r0, #41	; 0x29
   31e4c:	e7f3      	b.n	31e36 <at_interface_open+0x1a>
   31e4e:	4a10      	ldr	r2, [pc, #64]	; (31e90 <at_interface_open+0x74>)
   31e50:	a803      	add	r0, sp, #12
   31e52:	f7fe fa6b 	bl	3032c <interface_socket_allocate>
   31e56:	9b03      	ldr	r3, [sp, #12]
   31e58:	4604      	mov	r4, r0
   31e5a:	2b00      	cmp	r3, #0
   31e5c:	d0ef      	beq.n	31e3e <at_interface_open+0x22>
   31e5e:	e9c3 7503 	strd	r7, r5, [r3, #12]
   31e62:	615e      	str	r6, [r3, #20]
   31e64:	4642      	mov	r2, r8
   31e66:	9500      	str	r5, [sp, #0]
   31e68:	2305      	movs	r3, #5
   31e6a:	4641      	mov	r1, r8
   31e6c:	f00a fde0 	bl	3ca30 <send_message>
   31e70:	4605      	mov	r5, r0
   31e72:	b120      	cbz	r0, 31e7e <at_interface_open+0x62>
   31e74:	4620      	mov	r0, r4
   31e76:	f7fe fa7f 	bl	30378 <interface_socket_free>
   31e7a:	4628      	mov	r0, r5
   31e7c:	e7db      	b.n	31e36 <at_interface_open+0x1a>
   31e7e:	9a03      	ldr	r2, [sp, #12]
   31e80:	6813      	ldr	r3, [r2, #0]
   31e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   31e86:	6013      	str	r3, [r2, #0]
   31e88:	e7d9      	b.n	31e3e <at_interface_open+0x22>
   31e8a:	bf00      	nop
   31e8c:	20019163 	.word	0x20019163
   31e90:	0003ca0b 	.word	0x0003ca0b

00031e94 <at_cmd_send>:
   31e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   31e96:	4616      	mov	r6, r2
   31e98:	f06f 0258 	mvn.w	r2, #88	; 0x58
   31e9c:	2400      	movs	r4, #0
   31e9e:	7302      	strb	r2, [r0, #12]
   31ea0:	2204      	movs	r2, #4
   31ea2:	4d0c      	ldr	r5, [pc, #48]	; (31ed4 <at_cmd_send+0x40>)
   31ea4:	7344      	strb	r4, [r0, #13]
   31ea6:	7384      	strb	r4, [r0, #14]
   31ea8:	73c4      	strb	r4, [r0, #15]
   31eaa:	7202      	strb	r2, [r0, #8]
   31eac:	7244      	strb	r4, [r0, #9]
   31eae:	7284      	strb	r4, [r0, #10]
   31eb0:	72c4      	strb	r4, [r0, #11]
   31eb2:	b289      	uxth	r1, r1
   31eb4:	702c      	strb	r4, [r5, #0]
   31eb6:	f00a f8c2 	bl	3c03e <rpc_at_client_request_send>
   31eba:	f04f 33ff 	mov.w	r3, #4294967295
   31ebe:	9301      	str	r3, [sp, #4]
   31ec0:	782b      	ldrb	r3, [r5, #0]
   31ec2:	42b3      	cmp	r3, r6
   31ec4:	d101      	bne.n	31eca <at_cmd_send+0x36>
   31ec6:	b002      	add	sp, #8
   31ec8:	bd70      	pop	{r4, r5, r6, pc}
   31eca:	a901      	add	r1, sp, #4
   31ecc:	2000      	movs	r0, #0
   31ece:	f7f7 f903 	bl	290d8 <nrf_modem_os_timedwait>
   31ed2:	e7f5      	b.n	31ec0 <at_cmd_send+0x2c>
   31ed4:	20019164 	.word	0x20019164

00031ed8 <nrf_modem_at_init>:
   31ed8:	2201      	movs	r2, #1
   31eda:	b513      	push	{r0, r1, r4, lr}
   31edc:	4611      	mov	r1, r2
   31ede:	480a      	ldr	r0, [pc, #40]	; (31f08 <nrf_modem_at_init+0x30>)
   31ee0:	f7f7 fb42 	bl	29568 <nrf_modem_os_sem_init>
   31ee4:	2100      	movs	r1, #0
   31ee6:	a801      	add	r0, sp, #4
   31ee8:	f00a f89a 	bl	3c020 <rpc_at_client_request_alloc>
   31eec:	4604      	mov	r4, r0
   31eee:	b938      	cbnz	r0, 31f00 <nrf_modem_at_init+0x28>
   31ef0:	9801      	ldr	r0, [sp, #4]
   31ef2:	2201      	movs	r2, #1
   31ef4:	2105      	movs	r1, #5
   31ef6:	f7ff ffcd 	bl	31e94 <at_cmd_send>
   31efa:	4620      	mov	r0, r4
   31efc:	b002      	add	sp, #8
   31efe:	bd10      	pop	{r4, pc}
   31f00:	f06f 000b 	mvn.w	r0, #11
   31f04:	e7fa      	b.n	31efc <nrf_modem_at_init+0x24>
   31f06:	bf00      	nop
   31f08:	20017ef8 	.word	0x20017ef8

00031f0c <rpc_at2_event_handler>:
   31f0c:	b570      	push	{r4, r5, r6, lr}
   31f0e:	68c3      	ldr	r3, [r0, #12]
   31f10:	4604      	mov	r4, r0
   31f12:	2ba7      	cmp	r3, #167	; 0xa7
   31f14:	d128      	bne.n	31f68 <rpc_at2_event_handler+0x5c>
   31f16:	2903      	cmp	r1, #3
   31f18:	d008      	beq.n	31f2c <rpc_at2_event_handler+0x20>
   31f1a:	2904      	cmp	r1, #4
   31f1c:	d01b      	beq.n	31f56 <rpc_at2_event_handler+0x4a>
   31f1e:	2902      	cmp	r1, #2
   31f20:	d102      	bne.n	31f28 <rpc_at2_event_handler+0x1c>
   31f22:	2201      	movs	r2, #1
   31f24:	4b11      	ldr	r3, [pc, #68]	; (31f6c <rpc_at2_event_handler+0x60>)
   31f26:	701a      	strb	r2, [r3, #0]
   31f28:	2000      	movs	r0, #0
   31f2a:	e00d      	b.n	31f48 <rpc_at2_event_handler+0x3c>
   31f2c:	4e10      	ldr	r6, [pc, #64]	; (31f70 <rpc_at2_event_handler+0x64>)
   31f2e:	4d11      	ldr	r5, [pc, #68]	; (31f74 <rpc_at2_event_handler+0x68>)
   31f30:	6833      	ldr	r3, [r6, #0]
   31f32:	b153      	cbz	r3, 31f4a <rpc_at2_event_handler+0x3e>
   31f34:	2400      	movs	r4, #0
   31f36:	682a      	ldr	r2, [r5, #0]
   31f38:	6810      	ldr	r0, [r2, #0]
   31f3a:	4798      	blx	r3
   31f3c:	682b      	ldr	r3, [r5, #0]
   31f3e:	6034      	str	r4, [r6, #0]
   31f40:	6818      	ldr	r0, [r3, #0]
   31f42:	f00a f886 	bl	3c052 <rpc_at_client_data_free>
   31f46:	b2e0      	uxtb	r0, r4
   31f48:	bd70      	pop	{r4, r5, r6, pc}
   31f4a:	2202      	movs	r2, #2
   31f4c:	4b07      	ldr	r3, [pc, #28]	; (31f6c <rpc_at2_event_handler+0x60>)
   31f4e:	2401      	movs	r4, #1
   31f50:	6028      	str	r0, [r5, #0]
   31f52:	701a      	strb	r2, [r3, #0]
   31f54:	e7f7      	b.n	31f46 <rpc_at2_event_handler+0x3a>
   31f56:	4b08      	ldr	r3, [pc, #32]	; (31f78 <rpc_at2_event_handler+0x6c>)
   31f58:	681b      	ldr	r3, [r3, #0]
   31f5a:	b10b      	cbz	r3, 31f60 <rpc_at2_event_handler+0x54>
   31f5c:	6800      	ldr	r0, [r0, #0]
   31f5e:	4798      	blx	r3
   31f60:	6820      	ldr	r0, [r4, #0]
   31f62:	f00a f876 	bl	3c052 <rpc_at_client_data_free>
   31f66:	e7df      	b.n	31f28 <rpc_at2_event_handler+0x1c>
   31f68:	2002      	movs	r0, #2
   31f6a:	e7ed      	b.n	31f48 <rpc_at2_event_handler+0x3c>
   31f6c:	20019164 	.word	0x20019164
   31f70:	20017f04 	.word	0x20017f04
   31f74:	20017f00 	.word	0x20017f00
   31f78:	20017efc 	.word	0x20017efc

00031f7c <rpc_dfu_message_send>:
   31f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31f7e:	4606      	mov	r6, r0
   31f80:	460f      	mov	r7, r1
   31f82:	4668      	mov	r0, sp
   31f84:	4611      	mov	r1, r2
   31f86:	4615      	mov	r5, r2
   31f88:	f00a f88d 	bl	3c0a6 <rpc_dfu_client_request_alloc>
   31f8c:	4604      	mov	r4, r0
   31f8e:	b138      	cbz	r0, 31fa0 <rpc_dfu_message_send+0x24>
   31f90:	200c      	movs	r0, #12
   31f92:	f7f7 f957 	bl	29244 <nrf_modem_os_errno_set>
   31f96:	f04f 34ff 	mov.w	r4, #4294967295
   31f9a:	4620      	mov	r0, r4
   31f9c:	b003      	add	sp, #12
   31f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31fa0:	b12d      	cbz	r5, 31fae <rpc_dfu_message_send+0x32>
   31fa2:	9b00      	ldr	r3, [sp, #0]
   31fa4:	462a      	mov	r2, r5
   31fa6:	4639      	mov	r1, r7
   31fa8:	6818      	ldr	r0, [r3, #0]
   31faa:	f00b fb5f 	bl	3d66c <memcpy>
   31fae:	4a17      	ldr	r2, [pc, #92]	; (3200c <rpc_dfu_message_send+0x90>)
   31fb0:	9800      	ldr	r0, [sp, #0]
   31fb2:	8813      	ldrh	r3, [r2, #0]
   31fb4:	2e03      	cmp	r6, #3
   31fb6:	f103 0301 	add.w	r3, r3, #1
   31fba:	b29b      	uxth	r3, r3
   31fbc:	8013      	strh	r3, [r2, #0]
   31fbe:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
   31fc2:	60c3      	str	r3, [r0, #12]
   31fc4:	f04f 0300 	mov.w	r3, #0
   31fc8:	bf0a      	itet	eq
   31fca:	4a11      	ldreq	r2, [pc, #68]	; (32010 <rpc_dfu_message_send+0x94>)
   31fcc:	2204      	movne	r2, #4
   31fce:	6812      	ldreq	r2, [r2, #0]
   31fd0:	7243      	strb	r3, [r0, #9]
   31fd2:	bf04      	itt	eq
   31fd4:	6102      	streq	r2, [r0, #16]
   31fd6:	2208      	moveq	r2, #8
   31fd8:	7283      	strb	r3, [r0, #10]
   31fda:	72c3      	strb	r3, [r0, #11]
   31fdc:	2300      	movs	r3, #0
   31fde:	6045      	str	r5, [r0, #4]
   31fe0:	4d0c      	ldr	r5, [pc, #48]	; (32014 <rpc_dfu_message_send+0x98>)
   31fe2:	4631      	mov	r1, r6
   31fe4:	7202      	strb	r2, [r0, #8]
   31fe6:	602b      	str	r3, [r5, #0]
   31fe8:	f00a f86c 	bl	3c0c4 <rpc_dfu_client_request_send>
   31fec:	f04f 33ff 	mov.w	r3, #4294967295
   31ff0:	4e09      	ldr	r6, [pc, #36]	; (32018 <rpc_dfu_message_send+0x9c>)
   31ff2:	9301      	str	r3, [sp, #4]
   31ff4:	682b      	ldr	r3, [r5, #0]
   31ff6:	2b00      	cmp	r3, #0
   31ff8:	d1cf      	bne.n	31f9a <rpc_dfu_message_send+0x1e>
   31ffa:	4630      	mov	r0, r6
   31ffc:	a901      	add	r1, sp, #4
   31ffe:	f7f7 f86b 	bl	290d8 <nrf_modem_os_timedwait>
   32002:	2800      	cmp	r0, #0
   32004:	d0f6      	beq.n	31ff4 <rpc_dfu_message_send+0x78>
   32006:	203c      	movs	r0, #60	; 0x3c
   32008:	e7c3      	b.n	31f92 <rpc_dfu_message_send+0x16>
   3200a:	bf00      	nop
   3200c:	20017fda 	.word	0x20017fda
   32010:	20017f10 	.word	0x20017f10
   32014:	20017f14 	.word	0x20017f14
   32018:	20017f08 	.word	0x20017f08

0003201c <rpc_dfu_event_handler>:
   3201c:	b508      	push	{r3, lr}
   3201e:	4b08      	ldr	r3, [pc, #32]	; (32040 <rpc_dfu_event_handler+0x24>)
   32020:	68c2      	ldr	r2, [r0, #12]
   32022:	881b      	ldrh	r3, [r3, #0]
   32024:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   32028:	d103      	bne.n	32032 <rpc_dfu_event_handler+0x16>
   3202a:	4b06      	ldr	r3, [pc, #24]	; (32044 <rpc_dfu_event_handler+0x28>)
   3202c:	6018      	str	r0, [r3, #0]
   3202e:	2001      	movs	r0, #1
   32030:	bd08      	pop	{r3, pc}
   32032:	6800      	ldr	r0, [r0, #0]
   32034:	2800      	cmp	r0, #0
   32036:	d0fb      	beq.n	32030 <rpc_dfu_event_handler+0x14>
   32038:	f00a f851 	bl	3c0de <rpc_dfu_client_data_free>
   3203c:	2000      	movs	r0, #0
   3203e:	e7f7      	b.n	32030 <rpc_dfu_event_handler+0x14>
   32040:	20017fda 	.word	0x20017fda
   32044:	20017f14 	.word	0x20017f14

00032048 <mfu_interface_init>:
   32048:	2000      	movs	r0, #0
   3204a:	2201      	movs	r2, #1
   3204c:	4b04      	ldr	r3, [pc, #16]	; (32060 <mfu_interface_init+0x18>)
   3204e:	8018      	strh	r0, [r3, #0]
   32050:	4b04      	ldr	r3, [pc, #16]	; (32064 <mfu_interface_init+0x1c>)
   32052:	6018      	str	r0, [r3, #0]
   32054:	4b04      	ldr	r3, [pc, #16]	; (32068 <mfu_interface_init+0x20>)
   32056:	6018      	str	r0, [r3, #0]
   32058:	4b04      	ldr	r3, [pc, #16]	; (3206c <mfu_interface_init+0x24>)
   3205a:	601a      	str	r2, [r3, #0]
   3205c:	4770      	bx	lr
   3205e:	bf00      	nop
   32060:	20017fda 	.word	0x20017fda
   32064:	20017f14 	.word	0x20017f14
   32068:	20017f10 	.word	0x20017f10
   3206c:	20017f08 	.word	0x20017f08

00032070 <mfu_interface_open>:
   32070:	b508      	push	{r3, lr}
   32072:	4b07      	ldr	r3, [pc, #28]	; (32090 <mfu_interface_open+0x20>)
   32074:	681a      	ldr	r2, [r3, #0]
   32076:	2a01      	cmp	r2, #1
   32078:	d005      	beq.n	32086 <mfu_interface_open+0x16>
   3207a:	2001      	movs	r0, #1
   3207c:	f7f7 f8e2 	bl	29244 <nrf_modem_os_errno_set>
   32080:	f04f 30ff 	mov.w	r0, #4294967295
   32084:	bd08      	pop	{r3, pc}
   32086:	2202      	movs	r2, #2
   32088:	4802      	ldr	r0, [pc, #8]	; (32094 <mfu_interface_open+0x24>)
   3208a:	601a      	str	r2, [r3, #0]
   3208c:	e7fa      	b.n	32084 <mfu_interface_open+0x14>
   3208e:	bf00      	nop
   32090:	20017f08 	.word	0x20017f08
   32094:	49765432 	.word	0x49765432

00032098 <mfu_interface_close>:
   32098:	b538      	push	{r3, r4, r5, lr}
   3209a:	4c11      	ldr	r4, [pc, #68]	; (320e0 <mfu_interface_close+0x48>)
   3209c:	6822      	ldr	r2, [r4, #0]
   3209e:	1e91      	subs	r1, r2, #2
   320a0:	2901      	cmp	r1, #1
   320a2:	d905      	bls.n	320b0 <mfu_interface_close+0x18>
   320a4:	2001      	movs	r0, #1
   320a6:	f7f7 f8cd 	bl	29244 <nrf_modem_os_errno_set>
   320aa:	f04f 30ff 	mov.w	r0, #4294967295
   320ae:	e015      	b.n	320dc <mfu_interface_close+0x44>
   320b0:	2a03      	cmp	r2, #3
   320b2:	d110      	bne.n	320d6 <mfu_interface_close+0x3e>
   320b4:	2200      	movs	r2, #0
   320b6:	2006      	movs	r0, #6
   320b8:	4611      	mov	r1, r2
   320ba:	f7ff ff5f 	bl	31f7c <rpc_dfu_message_send>
   320be:	2800      	cmp	r0, #0
   320c0:	d1f3      	bne.n	320aa <mfu_interface_close+0x12>
   320c2:	4b08      	ldr	r3, [pc, #32]	; (320e4 <mfu_interface_close+0x4c>)
   320c4:	6818      	ldr	r0, [r3, #0]
   320c6:	6905      	ldr	r5, [r0, #16]
   320c8:	f00a f806 	bl	3c0d8 <rpc_dfu_client_message_free>
   320cc:	b11d      	cbz	r5, 320d6 <mfu_interface_close+0x3e>
   320ce:	4b06      	ldr	r3, [pc, #24]	; (320e8 <mfu_interface_close+0x50>)
   320d0:	2008      	movs	r0, #8
   320d2:	601d      	str	r5, [r3, #0]
   320d4:	e7e7      	b.n	320a6 <mfu_interface_close+0xe>
   320d6:	2301      	movs	r3, #1
   320d8:	2000      	movs	r0, #0
   320da:	6023      	str	r3, [r4, #0]
   320dc:	bd38      	pop	{r3, r4, r5, pc}
   320de:	bf00      	nop
   320e0:	20017f08 	.word	0x20017f08
   320e4:	20017f14 	.word	0x20017f14
   320e8:	20017f0c 	.word	0x20017f0c

000320ec <mfu_interface_sendto>:
   320ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   320ee:	4e1f      	ldr	r6, [pc, #124]	; (3216c <mfu_interface_sendto+0x80>)
   320f0:	460d      	mov	r5, r1
   320f2:	6831      	ldr	r1, [r6, #0]
   320f4:	4614      	mov	r4, r2
   320f6:	1e88      	subs	r0, r1, #2
   320f8:	2801      	cmp	r0, #1
   320fa:	9a06      	ldr	r2, [sp, #24]
   320fc:	d903      	bls.n	32106 <mfu_interface_sendto+0x1a>
   320fe:	2001      	movs	r0, #1
   32100:	f7f7 f8a0 	bl	29244 <nrf_modem_os_errno_set>
   32104:	e010      	b.n	32128 <mfu_interface_sendto+0x3c>
   32106:	b105      	cbz	r5, 3210a <mfu_interface_sendto+0x1e>
   32108:	b90c      	cbnz	r4, 3210e <mfu_interface_sendto+0x22>
   3210a:	2016      	movs	r0, #22
   3210c:	e7f8      	b.n	32100 <mfu_interface_sendto+0x14>
   3210e:	b10b      	cbz	r3, 32114 <mfu_interface_sendto+0x28>
   32110:	202d      	movs	r0, #45	; 0x2d
   32112:	e7f5      	b.n	32100 <mfu_interface_sendto+0x14>
   32114:	b10a      	cbz	r2, 3211a <mfu_interface_sendto+0x2e>
   32116:	2038      	movs	r0, #56	; 0x38
   32118:	e7f2      	b.n	32100 <mfu_interface_sendto+0x14>
   3211a:	2902      	cmp	r1, #2
   3211c:	d114      	bne.n	32148 <mfu_interface_sendto+0x5c>
   3211e:	4611      	mov	r1, r2
   32120:	2003      	movs	r0, #3
   32122:	f7ff ff2b 	bl	31f7c <rpc_dfu_message_send>
   32126:	b118      	cbz	r0, 32130 <mfu_interface_sendto+0x44>
   32128:	f04f 34ff 	mov.w	r4, #4294967295
   3212c:	4620      	mov	r0, r4
   3212e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32130:	4b0f      	ldr	r3, [pc, #60]	; (32170 <mfu_interface_sendto+0x84>)
   32132:	6818      	ldr	r0, [r3, #0]
   32134:	6907      	ldr	r7, [r0, #16]
   32136:	f009 ffcf 	bl	3c0d8 <rpc_dfu_client_message_free>
   3213a:	b11f      	cbz	r7, 32144 <mfu_interface_sendto+0x58>
   3213c:	4b0d      	ldr	r3, [pc, #52]	; (32174 <mfu_interface_sendto+0x88>)
   3213e:	601f      	str	r7, [r3, #0]
   32140:	2008      	movs	r0, #8
   32142:	e7dd      	b.n	32100 <mfu_interface_sendto+0x14>
   32144:	2303      	movs	r3, #3
   32146:	6033      	str	r3, [r6, #0]
   32148:	4622      	mov	r2, r4
   3214a:	4629      	mov	r1, r5
   3214c:	2004      	movs	r0, #4
   3214e:	f7ff ff15 	bl	31f7c <rpc_dfu_message_send>
   32152:	2800      	cmp	r0, #0
   32154:	d1e8      	bne.n	32128 <mfu_interface_sendto+0x3c>
   32156:	4b06      	ldr	r3, [pc, #24]	; (32170 <mfu_interface_sendto+0x84>)
   32158:	6818      	ldr	r0, [r3, #0]
   3215a:	6905      	ldr	r5, [r0, #16]
   3215c:	f009 ffbc 	bl	3c0d8 <rpc_dfu_client_message_free>
   32160:	2d00      	cmp	r5, #0
   32162:	d0e3      	beq.n	3212c <mfu_interface_sendto+0x40>
   32164:	4b03      	ldr	r3, [pc, #12]	; (32174 <mfu_interface_sendto+0x88>)
   32166:	601d      	str	r5, [r3, #0]
   32168:	e7ea      	b.n	32140 <mfu_interface_sendto+0x54>
   3216a:	bf00      	nop
   3216c:	20017f08 	.word	0x20017f08
   32170:	20017f14 	.word	0x20017f14
   32174:	20017f0c 	.word	0x20017f0c

00032178 <mfu_interface_setopt>:
   32178:	481d      	ldr	r0, [pc, #116]	; (321f0 <mfu_interface_setopt+0x78>)
   3217a:	b510      	push	{r4, lr}
   3217c:	6800      	ldr	r0, [r0, #0]
   3217e:	3802      	subs	r0, #2
   32180:	2801      	cmp	r0, #1
   32182:	d905      	bls.n	32190 <mfu_interface_setopt+0x18>
   32184:	2001      	movs	r0, #1
   32186:	f7f7 f85d 	bl	29244 <nrf_modem_os_errno_set>
   3218a:	f04f 30ff 	mov.w	r0, #4294967295
   3218e:	e026      	b.n	321de <mfu_interface_setopt+0x66>
   32190:	f240 2003 	movw	r0, #515	; 0x203
   32194:	4281      	cmp	r1, r0
   32196:	d001      	beq.n	3219c <mfu_interface_setopt+0x24>
   32198:	2016      	movs	r0, #22
   3219a:	e7f4      	b.n	32186 <mfu_interface_setopt+0xe>
   3219c:	3a04      	subs	r2, #4
   3219e:	2a03      	cmp	r2, #3
   321a0:	d81e      	bhi.n	321e0 <mfu_interface_setopt+0x68>
   321a2:	e8df f002 	tbb	[pc, r2]
   321a6:	021f      	.short	0x021f
   321a8:	1321      	.short	0x1321
   321aa:	2007      	movs	r0, #7
   321ac:	2200      	movs	r2, #0
   321ae:	4611      	mov	r1, r2
   321b0:	f7ff fee4 	bl	31f7c <rpc_dfu_message_send>
   321b4:	2800      	cmp	r0, #0
   321b6:	d1e8      	bne.n	3218a <mfu_interface_setopt+0x12>
   321b8:	4b0e      	ldr	r3, [pc, #56]	; (321f4 <mfu_interface_setopt+0x7c>)
   321ba:	6818      	ldr	r0, [r3, #0]
   321bc:	6904      	ldr	r4, [r0, #16]
   321be:	f009 ff8b 	bl	3c0d8 <rpc_dfu_client_message_free>
   321c2:	b19c      	cbz	r4, 321ec <mfu_interface_setopt+0x74>
   321c4:	4b0c      	ldr	r3, [pc, #48]	; (321f8 <mfu_interface_setopt+0x80>)
   321c6:	2008      	movs	r0, #8
   321c8:	601c      	str	r4, [r3, #0]
   321ca:	e7dc      	b.n	32186 <mfu_interface_setopt+0xe>
   321cc:	2b00      	cmp	r3, #0
   321ce:	d0e3      	beq.n	32198 <mfu_interface_setopt+0x20>
   321d0:	9a02      	ldr	r2, [sp, #8]
   321d2:	2a04      	cmp	r2, #4
   321d4:	d1e0      	bne.n	32198 <mfu_interface_setopt+0x20>
   321d6:	2000      	movs	r0, #0
   321d8:	681a      	ldr	r2, [r3, #0]
   321da:	4b08      	ldr	r3, [pc, #32]	; (321fc <mfu_interface_setopt+0x84>)
   321dc:	601a      	str	r2, [r3, #0]
   321de:	bd10      	pop	{r4, pc}
   321e0:	202a      	movs	r0, #42	; 0x2a
   321e2:	e7d0      	b.n	32186 <mfu_interface_setopt+0xe>
   321e4:	2005      	movs	r0, #5
   321e6:	e7e1      	b.n	321ac <mfu_interface_setopt+0x34>
   321e8:	2008      	movs	r0, #8
   321ea:	e7df      	b.n	321ac <mfu_interface_setopt+0x34>
   321ec:	4620      	mov	r0, r4
   321ee:	e7f6      	b.n	321de <mfu_interface_setopt+0x66>
   321f0:	20017f08 	.word	0x20017f08
   321f4:	20017f14 	.word	0x20017f14
   321f8:	20017f0c 	.word	0x20017f0c
   321fc:	20017f10 	.word	0x20017f10

00032200 <mfu_interface_getopt>:
   32200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32202:	461e      	mov	r6, r3
   32204:	f240 2303 	movw	r3, #515	; 0x203
   32208:	4299      	cmp	r1, r3
   3220a:	4610      	mov	r0, r2
   3220c:	9d06      	ldr	r5, [sp, #24]
   3220e:	d101      	bne.n	32214 <mfu_interface_getopt+0x14>
   32210:	b106      	cbz	r6, 32214 <mfu_interface_getopt+0x14>
   32212:	b92d      	cbnz	r5, 32220 <mfu_interface_getopt+0x20>
   32214:	2016      	movs	r0, #22
   32216:	f7f7 f815 	bl	29244 <nrf_modem_os_errno_set>
   3221a:	f04f 30ff 	mov.w	r0, #4294967295
   3221e:	e019      	b.n	32254 <mfu_interface_getopt+0x54>
   32220:	4b21      	ldr	r3, [pc, #132]	; (322a8 <mfu_interface_getopt+0xa8>)
   32222:	681b      	ldr	r3, [r3, #0]
   32224:	3b02      	subs	r3, #2
   32226:	2b01      	cmp	r3, #1
   32228:	d901      	bls.n	3222e <mfu_interface_getopt+0x2e>
   3222a:	2001      	movs	r0, #1
   3222c:	e7f3      	b.n	32216 <mfu_interface_getopt+0x16>
   3222e:	2a07      	cmp	r2, #7
   32230:	d02a      	beq.n	32288 <mfu_interface_getopt+0x88>
   32232:	dc05      	bgt.n	32240 <mfu_interface_getopt+0x40>
   32234:	2a01      	cmp	r2, #1
   32236:	d00e      	beq.n	32256 <mfu_interface_getopt+0x56>
   32238:	2a02      	cmp	r2, #2
   3223a:	d022      	beq.n	32282 <mfu_interface_getopt+0x82>
   3223c:	202a      	movs	r0, #42	; 0x2a
   3223e:	e7ea      	b.n	32216 <mfu_interface_getopt+0x16>
   32240:	2a14      	cmp	r2, #20
   32242:	d1fb      	bne.n	3223c <mfu_interface_getopt+0x3c>
   32244:	682b      	ldr	r3, [r5, #0]
   32246:	2b04      	cmp	r3, #4
   32248:	d1e4      	bne.n	32214 <mfu_interface_getopt+0x14>
   3224a:	2000      	movs	r0, #0
   3224c:	4b17      	ldr	r3, [pc, #92]	; (322ac <mfu_interface_getopt+0xac>)
   3224e:	681a      	ldr	r2, [r3, #0]
   32250:	6018      	str	r0, [r3, #0]
   32252:	6032      	str	r2, [r6, #0]
   32254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32256:	682b      	ldr	r3, [r5, #0]
   32258:	2b24      	cmp	r3, #36	; 0x24
   3225a:	d1db      	bne.n	32214 <mfu_interface_getopt+0x14>
   3225c:	2200      	movs	r2, #0
   3225e:	4611      	mov	r1, r2
   32260:	f7ff fe8c 	bl	31f7c <rpc_dfu_message_send>
   32264:	2800      	cmp	r0, #0
   32266:	d1d8      	bne.n	3221a <mfu_interface_getopt+0x1a>
   32268:	4f11      	ldr	r7, [pc, #68]	; (322b0 <mfu_interface_getopt+0xb0>)
   3226a:	6839      	ldr	r1, [r7, #0]
   3226c:	690c      	ldr	r4, [r1, #16]
   3226e:	b184      	cbz	r4, 32292 <mfu_interface_getopt+0x92>
   32270:	4b0e      	ldr	r3, [pc, #56]	; (322ac <mfu_interface_getopt+0xac>)
   32272:	2008      	movs	r0, #8
   32274:	601c      	str	r4, [r3, #0]
   32276:	f7f6 ffe5 	bl	29244 <nrf_modem_os_errno_set>
   3227a:	6838      	ldr	r0, [r7, #0]
   3227c:	f009 ff2c 	bl	3c0d8 <rpc_dfu_client_message_free>
   32280:	e7cb      	b.n	3221a <mfu_interface_getopt+0x1a>
   32282:	682b      	ldr	r3, [r5, #0]
   32284:	2b04      	cmp	r3, #4
   32286:	e7e8      	b.n	3225a <mfu_interface_getopt+0x5a>
   32288:	682b      	ldr	r3, [r5, #0]
   3228a:	2b04      	cmp	r3, #4
   3228c:	d1c2      	bne.n	32214 <mfu_interface_getopt+0x14>
   3228e:	2009      	movs	r0, #9
   32290:	e7e4      	b.n	3225c <mfu_interface_getopt+0x5c>
   32292:	682a      	ldr	r2, [r5, #0]
   32294:	3114      	adds	r1, #20
   32296:	4630      	mov	r0, r6
   32298:	f00b f9e8 	bl	3d66c <memcpy>
   3229c:	6838      	ldr	r0, [r7, #0]
   3229e:	f009 ff1b 	bl	3c0d8 <rpc_dfu_client_message_free>
   322a2:	4620      	mov	r0, r4
   322a4:	e7d6      	b.n	32254 <mfu_interface_getopt+0x54>
   322a6:	bf00      	nop
   322a8:	20017f08 	.word	0x20017f08
   322ac:	20017f0c 	.word	0x20017f0c
   322b0:	20017f14 	.word	0x20017f14

000322b4 <rpc_dfu2_event_handler>:
   322b4:	b510      	push	{r4, lr}
   322b6:	4b08      	ldr	r3, [pc, #32]	; (322d8 <rpc_dfu2_event_handler+0x24>)
   322b8:	68c2      	ldr	r2, [r0, #12]
   322ba:	429a      	cmp	r2, r3
   322bc:	d10a      	bne.n	322d4 <rpc_dfu2_event_handler+0x20>
   322be:	2401      	movs	r4, #1
   322c0:	4b06      	ldr	r3, [pc, #24]	; (322dc <rpc_dfu2_event_handler+0x28>)
   322c2:	701c      	strb	r4, [r3, #0]
   322c4:	4b06      	ldr	r3, [pc, #24]	; (322e0 <rpc_dfu2_event_handler+0x2c>)
   322c6:	6018      	str	r0, [r3, #0]
   322c8:	6800      	ldr	r0, [r0, #0]
   322ca:	b108      	cbz	r0, 322d0 <rpc_dfu2_event_handler+0x1c>
   322cc:	f009 ff07 	bl	3c0de <rpc_dfu_client_data_free>
   322d0:	4620      	mov	r0, r4
   322d2:	e000      	b.n	322d6 <rpc_dfu2_event_handler+0x22>
   322d4:	2002      	movs	r0, #2
   322d6:	bd10      	pop	{r4, pc}
   322d8:	15abe11a 	.word	0x15abe11a
   322dc:	20019165 	.word	0x20019165
   322e0:	20017f18 	.word	0x20017f18

000322e4 <rpc_gnss_event_handler>:
   322e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   322e6:	4b5b      	ldr	r3, [pc, #364]	; (32454 <rpc_gnss_event_handler+0x170>)
   322e8:	4605      	mov	r5, r0
   322ea:	6800      	ldr	r0, [r0, #0]
   322ec:	881b      	ldrh	r3, [r3, #0]
   322ee:	6802      	ldr	r2, [r0, #0]
   322f0:	460c      	mov	r4, r1
   322f2:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   322f6:	b085      	sub	sp, #20
   322f8:	d134      	bne.n	32364 <rpc_gnss_event_handler+0x80>
   322fa:	4b57      	ldr	r3, [pc, #348]	; (32458 <rpc_gnss_event_handler+0x174>)
   322fc:	4e57      	ldr	r6, [pc, #348]	; (3245c <rpc_gnss_event_handler+0x178>)
   322fe:	681a      	ldr	r2, [r3, #0]
   32300:	6030      	str	r0, [r6, #0]
   32302:	01d2      	lsls	r2, r2, #7
   32304:	d50d      	bpl.n	32322 <rpc_gnss_event_handler+0x3e>
   32306:	f242 1202 	movw	r2, #8450	; 0x2102
   3230a:	4291      	cmp	r1, r2
   3230c:	d109      	bne.n	32322 <rpc_gnss_event_handler+0x3e>
   3230e:	6842      	ldr	r2, [r0, #4]
   32310:	b91a      	cbnz	r2, 3231a <rpc_gnss_event_handler+0x36>
   32312:	681a      	ldr	r2, [r3, #0]
   32314:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   32318:	601a      	str	r2, [r3, #0]
   3231a:	681a      	ldr	r2, [r3, #0]
   3231c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   32320:	601a      	str	r2, [r3, #0]
   32322:	681a      	ldr	r2, [r3, #0]
   32324:	0257      	lsls	r7, r2, #9
   32326:	d50d      	bpl.n	32344 <rpc_gnss_event_handler+0x60>
   32328:	f242 1203 	movw	r2, #8451	; 0x2103
   3232c:	4294      	cmp	r4, r2
   3232e:	d109      	bne.n	32344 <rpc_gnss_event_handler+0x60>
   32330:	6842      	ldr	r2, [r0, #4]
   32332:	b91a      	cbnz	r2, 3233c <rpc_gnss_event_handler+0x58>
   32334:	681a      	ldr	r2, [r3, #0]
   32336:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   3233a:	601a      	str	r2, [r3, #0]
   3233c:	681a      	ldr	r2, [r3, #0]
   3233e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   32342:	e04a      	b.n	323da <rpc_gnss_event_handler+0xf6>
   32344:	f242 0201 	movw	r2, #8193	; 0x2001
   32348:	4294      	cmp	r4, r2
   3234a:	d03e      	beq.n	323ca <rpc_gnss_event_handler+0xe6>
   3234c:	f242 0204 	movw	r2, #8196	; 0x2004
   32350:	4294      	cmp	r4, r2
   32352:	d044      	beq.n	323de <rpc_gnss_event_handler+0xfa>
   32354:	f242 0205 	movw	r2, #8197	; 0x2005
   32358:	4294      	cmp	r4, r2
   3235a:	d05d      	beq.n	32418 <rpc_gnss_event_handler+0x134>
   3235c:	f009 fedd 	bl	3c11a <rpc_gnss_client_data_free>
   32360:	2300      	movs	r3, #0
   32362:	6033      	str	r3, [r6, #0]
   32364:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   32368:	33ff      	adds	r3, #255	; 0xff
   3236a:	b29b      	uxth	r3, r3
   3236c:	2b02      	cmp	r3, #2
   3236e:	d869      	bhi.n	32444 <rpc_gnss_event_handler+0x160>
   32370:	4f39      	ldr	r7, [pc, #228]	; (32458 <rpc_gnss_event_handler+0x174>)
   32372:	683b      	ldr	r3, [r7, #0]
   32374:	075a      	lsls	r2, r3, #29
   32376:	d406      	bmi.n	32386 <rpc_gnss_event_handler+0xa2>
   32378:	683b      	ldr	r3, [r7, #0]
   3237a:	079b      	lsls	r3, r3, #30
   3237c:	d51c      	bpl.n	323b8 <rpc_gnss_event_handler+0xd4>
   3237e:	f244 0303 	movw	r3, #16387	; 0x4003
   32382:	429c      	cmp	r4, r3
   32384:	d118      	bne.n	323b8 <rpc_gnss_event_handler+0xd4>
   32386:	2002      	movs	r0, #2
   32388:	f7f7 f94e 	bl	29628 <nrf_modem_os_alloc>
   3238c:	4606      	mov	r6, r0
   3238e:	6828      	ldr	r0, [r5, #0]
   32390:	2e00      	cmp	r6, #0
   32392:	d052      	beq.n	3243a <rpc_gnss_event_handler+0x156>
   32394:	8034      	strh	r4, [r6, #0]
   32396:	686b      	ldr	r3, [r5, #4]
   32398:	9000      	str	r0, [sp, #0]
   3239a:	e9cd 3601 	strd	r3, r6, [sp, #4]
   3239e:	2302      	movs	r3, #2
   323a0:	9303      	str	r3, [sp, #12]
   323a2:	4b2f      	ldr	r3, [pc, #188]	; (32460 <rpc_gnss_event_handler+0x17c>)
   323a4:	4669      	mov	r1, sp
   323a6:	6818      	ldr	r0, [r3, #0]
   323a8:	6803      	ldr	r3, [r0, #0]
   323aa:	685b      	ldr	r3, [r3, #4]
   323ac:	4798      	blx	r3
   323ae:	3001      	adds	r0, #1
   323b0:	d14b      	bne.n	3244a <rpc_gnss_event_handler+0x166>
   323b2:	4630      	mov	r0, r6
   323b4:	f7f7 f940 	bl	29638 <nrf_modem_os_free>
   323b8:	6828      	ldr	r0, [r5, #0]
   323ba:	2800      	cmp	r0, #0
   323bc:	d042      	beq.n	32444 <rpc_gnss_event_handler+0x160>
   323be:	f009 feac 	bl	3c11a <rpc_gnss_client_data_free>
   323c2:	2200      	movs	r2, #0
   323c4:	4b25      	ldr	r3, [pc, #148]	; (3245c <rpc_gnss_event_handler+0x178>)
   323c6:	601a      	str	r2, [r3, #0]
   323c8:	e03c      	b.n	32444 <rpc_gnss_event_handler+0x160>
   323ca:	6842      	ldr	r2, [r0, #4]
   323cc:	2a00      	cmp	r2, #0
   323ce:	d1c5      	bne.n	3235c <rpc_gnss_event_handler+0x78>
   323d0:	681a      	ldr	r2, [r3, #0]
   323d2:	0c12      	lsrs	r2, r2, #16
   323d4:	0412      	lsls	r2, r2, #16
   323d6:	f042 0202 	orr.w	r2, r2, #2
   323da:	601a      	str	r2, [r3, #0]
   323dc:	e7be      	b.n	3235c <rpc_gnss_event_handler+0x78>
   323de:	6842      	ldr	r2, [r0, #4]
   323e0:	b9b2      	cbnz	r2, 32410 <rpc_gnss_event_handler+0x12c>
   323e2:	681a      	ldr	r2, [r3, #0]
   323e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   323e8:	601a      	str	r2, [r3, #0]
   323ea:	681a      	ldr	r2, [r3, #0]
   323ec:	b292      	uxth	r2, r2
   323ee:	2a03      	cmp	r2, #3
   323f0:	681a      	ldr	r2, [r3, #0]
   323f2:	d104      	bne.n	323fe <rpc_gnss_event_handler+0x11a>
   323f4:	0c12      	lsrs	r2, r2, #16
   323f6:	0412      	lsls	r2, r2, #16
   323f8:	f042 0204 	orr.w	r2, r2, #4
   323fc:	e79d      	b.n	3233a <rpc_gnss_event_handler+0x56>
   323fe:	b292      	uxth	r2, r2
   32400:	2a04      	cmp	r2, #4
   32402:	d19b      	bne.n	3233c <rpc_gnss_event_handler+0x58>
   32404:	681a      	ldr	r2, [r3, #0]
   32406:	0c12      	lsrs	r2, r2, #16
   32408:	0412      	lsls	r2, r2, #16
   3240a:	f042 0202 	orr.w	r2, r2, #2
   3240e:	e794      	b.n	3233a <rpc_gnss_event_handler+0x56>
   32410:	681a      	ldr	r2, [r3, #0]
   32412:	b292      	uxth	r2, r2
   32414:	2a03      	cmp	r2, #3
   32416:	e7f4      	b.n	32402 <rpc_gnss_event_handler+0x11e>
   32418:	681a      	ldr	r2, [r3, #0]
   3241a:	0291      	lsls	r1, r2, #10
   3241c:	d59e      	bpl.n	3235c <rpc_gnss_event_handler+0x78>
   3241e:	6842      	ldr	r2, [r0, #4]
   32420:	b93a      	cbnz	r2, 32432 <rpc_gnss_event_handler+0x14e>
   32422:	681a      	ldr	r2, [r3, #0]
   32424:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   32428:	601a      	str	r2, [r3, #0]
   3242a:	681a      	ldr	r2, [r3, #0]
   3242c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   32430:	e7d3      	b.n	323da <rpc_gnss_event_handler+0xf6>
   32432:	681a      	ldr	r2, [r3, #0]
   32434:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   32438:	e7cf      	b.n	323da <rpc_gnss_event_handler+0xf6>
   3243a:	b118      	cbz	r0, 32444 <rpc_gnss_event_handler+0x160>
   3243c:	f009 fe6d 	bl	3c11a <rpc_gnss_client_data_free>
   32440:	4b06      	ldr	r3, [pc, #24]	; (3245c <rpc_gnss_event_handler+0x178>)
   32442:	601e      	str	r6, [r3, #0]
   32444:	2000      	movs	r0, #0
   32446:	b005      	add	sp, #20
   32448:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3244a:	683b      	ldr	r3, [r7, #0]
   3244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   32450:	603b      	str	r3, [r7, #0]
   32452:	e7f7      	b.n	32444 <rpc_gnss_event_handler+0x160>
   32454:	20017fdc 	.word	0x20017fdc
   32458:	20017f1c 	.word	0x20017f1c
   3245c:	20017f20 	.word	0x20017f20
   32460:	20017f24 	.word	0x20017f24

00032464 <send_message>:
   32464:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   32468:	4607      	mov	r7, r0
   3246a:	4688      	mov	r8, r1
   3246c:	a801      	add	r0, sp, #4
   3246e:	4611      	mov	r1, r2
   32470:	4616      	mov	r6, r2
   32472:	f009 fe36 	bl	3c0e2 <rpc_gnss_client_request_alloc>
   32476:	9b01      	ldr	r3, [sp, #4]
   32478:	4604      	mov	r4, r0
   3247a:	b958      	cbnz	r0, 32494 <send_message+0x30>
   3247c:	b993      	cbnz	r3, 324a4 <send_message+0x40>
   3247e:	9801      	ldr	r0, [sp, #4]
   32480:	f009 fe48 	bl	3c114 <rpc_gnss_client_message_free>
   32484:	2023      	movs	r0, #35	; 0x23
   32486:	f7f6 fedd 	bl	29244 <nrf_modem_os_errno_set>
   3248a:	f04f 30ff 	mov.w	r0, #4294967295
   3248e:	b002      	add	sp, #8
   32490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32494:	2b00      	cmp	r3, #0
   32496:	d0f2      	beq.n	3247e <send_message+0x1a>
   32498:	6818      	ldr	r0, [r3, #0]
   3249a:	2800      	cmp	r0, #0
   3249c:	d0ef      	beq.n	3247e <send_message+0x1a>
   3249e:	f009 fe3c 	bl	3c11a <rpc_gnss_client_data_free>
   324a2:	e7ec      	b.n	3247e <send_message+0x1a>
   324a4:	4a11      	ldr	r2, [pc, #68]	; (324ec <send_message+0x88>)
   324a6:	4641      	mov	r1, r8
   324a8:	8815      	ldrh	r5, [r2, #0]
   324aa:	3501      	adds	r5, #1
   324ac:	b2ad      	uxth	r5, r5
   324ae:	8015      	strh	r5, [r2, #0]
   324b0:	2243      	movs	r2, #67	; 0x43
   324b2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
   324b6:	f8c8 5000 	str.w	r5, [r8]
   324ba:	731a      	strb	r2, [r3, #12]
   324bc:	2254      	movs	r2, #84	; 0x54
   324be:	735a      	strb	r2, [r3, #13]
   324c0:	2276      	movs	r2, #118	; 0x76
   324c2:	739a      	strb	r2, [r3, #14]
   324c4:	2249      	movs	r2, #73	; 0x49
   324c6:	7218      	strb	r0, [r3, #8]
   324c8:	7258      	strb	r0, [r3, #9]
   324ca:	7298      	strb	r0, [r3, #10]
   324cc:	72d8      	strb	r0, [r3, #11]
   324ce:	73da      	strb	r2, [r3, #15]
   324d0:	6818      	ldr	r0, [r3, #0]
   324d2:	4632      	mov	r2, r6
   324d4:	605e      	str	r6, [r3, #4]
   324d6:	f00b f8c9 	bl	3d66c <memcpy>
   324da:	4b05      	ldr	r3, [pc, #20]	; (324f0 <send_message+0x8c>)
   324dc:	9801      	ldr	r0, [sp, #4]
   324de:	4639      	mov	r1, r7
   324e0:	601c      	str	r4, [r3, #0]
   324e2:	f009 fe0d 	bl	3c100 <rpc_gnss_client_request_send>
   324e6:	4620      	mov	r0, r4
   324e8:	e7d1      	b.n	3248e <send_message+0x2a>
   324ea:	bf00      	nop
   324ec:	20017fdc 	.word	0x20017fdc
   324f0:	20017f20 	.word	0x20017f20

000324f4 <gnss_interface_write>:
   324f4:	b570      	push	{r4, r5, r6, lr}
   324f6:	4604      	mov	r4, r0
   324f8:	4a40      	ldr	r2, [pc, #256]	; (325fc <gnss_interface_write+0x108>)
   324fa:	b09e      	sub	sp, #120	; 0x78
   324fc:	4294      	cmp	r4, r2
   324fe:	4608      	mov	r0, r1
   32500:	9d22      	ldr	r5, [sp, #136]	; 0x88
   32502:	d005      	beq.n	32510 <gnss_interface_write+0x1c>
   32504:	2009      	movs	r0, #9
   32506:	f7f6 fe9d 	bl	29244 <nrf_modem_os_errno_set>
   3250a:	f04f 33ff 	mov.w	r3, #4294967295
   3250e:	e061      	b.n	325d4 <gnss_interface_write+0xe0>
   32510:	b119      	cbz	r1, 3251a <gnss_interface_write+0x26>
   32512:	b115      	cbz	r5, 3251a <gnss_interface_write+0x26>
   32514:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   32516:	2a02      	cmp	r2, #2
   32518:	d001      	beq.n	3251e <gnss_interface_write+0x2a>
   3251a:	2016      	movs	r0, #22
   3251c:	e7f3      	b.n	32506 <gnss_interface_write+0x12>
   3251e:	4a38      	ldr	r2, [pc, #224]	; (32600 <gnss_interface_write+0x10c>)
   32520:	6811      	ldr	r1, [r2, #0]
   32522:	4614      	mov	r4, r2
   32524:	b289      	uxth	r1, r1
   32526:	2902      	cmp	r1, #2
   32528:	d005      	beq.n	32536 <gnss_interface_write+0x42>
   3252a:	6812      	ldr	r2, [r2, #0]
   3252c:	b292      	uxth	r2, r2
   3252e:	2a04      	cmp	r2, #4
   32530:	d001      	beq.n	32536 <gnss_interface_write+0x42>
   32532:	2039      	movs	r0, #57	; 0x39
   32534:	e7e7      	b.n	32506 <gnss_interface_write+0x12>
   32536:	b10b      	cbz	r3, 3253c <gnss_interface_write+0x48>
   32538:	202d      	movs	r0, #45	; 0x2d
   3253a:	e7e4      	b.n	32506 <gnss_interface_write+0x12>
   3253c:	6822      	ldr	r2, [r4, #0]
   3253e:	0396      	lsls	r6, r2, #14
   32540:	d548      	bpl.n	325d4 <gnss_interface_write+0xe0>
   32542:	6823      	ldr	r3, [r4, #0]
   32544:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   32548:	6023      	str	r3, [r4, #0]
   3254a:	6823      	ldr	r3, [r4, #0]
   3254c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   32550:	6023      	str	r3, [r4, #0]
   32552:	882b      	ldrh	r3, [r5, #0]
   32554:	3b01      	subs	r3, #1
   32556:	2b07      	cmp	r3, #7
   32558:	d8df      	bhi.n	3251a <gnss_interface_write+0x26>
   3255a:	e8df f003 	tbb	[pc, r3]
   3255e:	1704      	.short	0x1704
   32560:	27231f1b 	.word	0x27231f1b
   32564:	2f2b      	.short	0x2f2b
   32566:	a902      	add	r1, sp, #8
   32568:	f009 fdd9 	bl	3c11e <rpc_gnss_serialize_utc>
   3256c:	2272      	movs	r2, #114	; 0x72
   3256e:	f241 0005 	movw	r0, #4101	; 0x1005
   32572:	a901      	add	r1, sp, #4
   32574:	f7ff ff76 	bl	32464 <send_message>
   32578:	4603      	mov	r3, r0
   3257a:	bb18      	cbnz	r0, 325c4 <gnss_interface_write+0xd0>
   3257c:	4d21      	ldr	r5, [pc, #132]	; (32604 <gnss_interface_write+0x110>)
   3257e:	4e1f      	ldr	r6, [pc, #124]	; (325fc <gnss_interface_write+0x108>)
   32580:	6822      	ldr	r2, [r4, #0]
   32582:	0291      	lsls	r1, r2, #10
   32584:	d52f      	bpl.n	325e6 <gnss_interface_write+0xf2>
   32586:	b343      	cbz	r3, 325da <gnss_interface_write+0xe6>
   32588:	4618      	mov	r0, r3
   3258a:	e7bc      	b.n	32506 <gnss_interface_write+0x12>
   3258c:	a902      	add	r1, sp, #8
   3258e:	f009 fde3 	bl	3c158 <rpc_gnss_serialize_ephe>
   32592:	e7eb      	b.n	3256c <gnss_interface_write+0x78>
   32594:	a902      	add	r1, sp, #8
   32596:	f009 fe29 	bl	3c1ec <rpc_gnss_serialize_alm>
   3259a:	e7e7      	b.n	3256c <gnss_interface_write+0x78>
   3259c:	a902      	add	r1, sp, #8
   3259e:	f009 fe52 	bl	3c246 <rpc_gnss_serialize_klob>
   325a2:	e7e3      	b.n	3256c <gnss_interface_write+0x78>
   325a4:	a902      	add	r1, sp, #8
   325a6:	f009 fe69 	bl	3c27c <rpc_gnss_serialize_nequick>
   325aa:	e7df      	b.n	3256c <gnss_interface_write+0x78>
   325ac:	a902      	add	r1, sp, #8
   325ae:	f009 fe7a 	bl	3c2a6 <rpc_gnss_serialize_time_and_sv_tow>
   325b2:	e7db      	b.n	3256c <gnss_interface_write+0x78>
   325b4:	a902      	add	r1, sp, #8
   325b6:	f009 fe99 	bl	3c2ec <rpc_gnss_serialize_location>
   325ba:	e7d7      	b.n	3256c <gnss_interface_write+0x78>
   325bc:	a902      	add	r1, sp, #8
   325be:	f009 feb2 	bl	3c326 <rpc_gnss_serialize_integrity>
   325c2:	e7d3      	b.n	3256c <gnss_interface_write+0x78>
   325c4:	6822      	ldr	r2, [r4, #0]
   325c6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   325ca:	6022      	str	r2, [r4, #0]
   325cc:	6822      	ldr	r2, [r4, #0]
   325ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   325d2:	6022      	str	r2, [r4, #0]
   325d4:	4618      	mov	r0, r3
   325d6:	b01e      	add	sp, #120	; 0x78
   325d8:	bd70      	pop	{r4, r5, r6, pc}
   325da:	4629      	mov	r1, r5
   325dc:	4630      	mov	r0, r6
   325de:	f7f6 fd7b 	bl	290d8 <nrf_modem_os_timedwait>
   325e2:	4603      	mov	r3, r0
   325e4:	e7cc      	b.n	32580 <gnss_interface_write+0x8c>
   325e6:	2b00      	cmp	r3, #0
   325e8:	d1ce      	bne.n	32588 <gnss_interface_write+0x94>
   325ea:	6822      	ldr	r2, [r4, #0]
   325ec:	0392      	lsls	r2, r2, #14
   325ee:	d4f1      	bmi.n	325d4 <gnss_interface_write+0xe0>
   325f0:	6823      	ldr	r3, [r4, #0]
   325f2:	2005      	movs	r0, #5
   325f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   325f8:	6023      	str	r3, [r4, #0]
   325fa:	e784      	b.n	32506 <gnss_interface_write+0x12>
   325fc:	49765443 	.word	0x49765443
   32600:	20017f1c 	.word	0x20017f1c
   32604:	20014790 	.word	0x20014790

00032608 <gnss_interface_read>:
   32608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3260c:	469a      	mov	sl, r3
   3260e:	4b7d      	ldr	r3, [pc, #500]	; (32804 <gnss_interface_read+0x1fc>)
   32610:	460c      	mov	r4, r1
   32612:	4298      	cmp	r0, r3
   32614:	b0b5      	sub	sp, #212	; 0xd4
   32616:	d008      	beq.n	3262a <gnss_interface_read+0x22>
   32618:	2009      	movs	r0, #9
   3261a:	f7f6 fe13 	bl	29244 <nrf_modem_os_errno_set>
   3261e:	f04f 35ff 	mov.w	r5, #4294967295
   32622:	4628      	mov	r0, r5
   32624:	b035      	add	sp, #212	; 0xd4
   32626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3262a:	b10c      	cbz	r4, 32630 <gnss_interface_read+0x28>
   3262c:	2ad7      	cmp	r2, #215	; 0xd7
   3262e:	d801      	bhi.n	32634 <gnss_interface_read+0x2c>
   32630:	2016      	movs	r0, #22
   32632:	e7f2      	b.n	3261a <gnss_interface_read+0x12>
   32634:	4b74      	ldr	r3, [pc, #464]	; (32808 <gnss_interface_read+0x200>)
   32636:	6819      	ldr	r1, [r3, #0]
   32638:	461e      	mov	r6, r3
   3263a:	b289      	uxth	r1, r1
   3263c:	2904      	cmp	r1, #4
   3263e:	d005      	beq.n	3264c <gnss_interface_read+0x44>
   32640:	681b      	ldr	r3, [r3, #0]
   32642:	b29b      	uxth	r3, r3
   32644:	2b02      	cmp	r3, #2
   32646:	d001      	beq.n	3264c <gnss_interface_read+0x44>
   32648:	2039      	movs	r0, #57	; 0x39
   3264a:	e7e6      	b.n	3261a <gnss_interface_read+0x12>
   3264c:	f1ba 0f00 	cmp.w	sl, #0
   32650:	d004      	beq.n	3265c <gnss_interface_read+0x54>
   32652:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   32656:	d101      	bne.n	3265c <gnss_interface_read+0x54>
   32658:	202d      	movs	r0, #45	; 0x2d
   3265a:	e7de      	b.n	3261a <gnss_interface_read+0x12>
   3265c:	6833      	ldr	r3, [r6, #0]
   3265e:	f04f 0800 	mov.w	r8, #0
   32662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   32666:	6033      	str	r3, [r6, #0]
   32668:	23ba      	movs	r3, #186	; 0xba
   3266a:	9302      	str	r3, [sp, #8]
   3266c:	f10d 0302 	add.w	r3, sp, #2
   32670:	9303      	str	r3, [sp, #12]
   32672:	2302      	movs	r3, #2
   32674:	af05      	add	r7, sp, #20
   32676:	f8df 919c 	ldr.w	r9, [pc, #412]	; 32814 <gnss_interface_read+0x20c>
   3267a:	f8df b188 	ldr.w	fp, [pc, #392]	; 32804 <gnss_interface_read+0x1fc>
   3267e:	9701      	str	r7, [sp, #4]
   32680:	9304      	str	r3, [sp, #16]
   32682:	f8d9 0000 	ldr.w	r0, [r9]
   32686:	4652      	mov	r2, sl
   32688:	6803      	ldr	r3, [r0, #0]
   3268a:	a901      	add	r1, sp, #4
   3268c:	689b      	ldr	r3, [r3, #8]
   3268e:	4798      	blx	r3
   32690:	1e05      	subs	r5, r0, #0
   32692:	da13      	bge.n	326bc <gnss_interface_read+0xb4>
   32694:	f01a 0f02 	tst.w	sl, #2
   32698:	d10e      	bne.n	326b8 <gnss_interface_read+0xb0>
   3269a:	4d5c      	ldr	r5, [pc, #368]	; (3280c <gnss_interface_read+0x204>)
   3269c:	6833      	ldr	r3, [r6, #0]
   3269e:	4a5c      	ldr	r2, [pc, #368]	; (32810 <gnss_interface_read+0x208>)
   326a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   326a4:	ea53 0308 	orrs.w	r3, r3, r8
   326a8:	7811      	ldrb	r1, [r2, #0]
   326aa:	d028      	beq.n	326fe <gnss_interface_read+0xf6>
   326ac:	2900      	cmp	r1, #0
   326ae:	d1e8      	bne.n	32682 <gnss_interface_read+0x7a>
   326b0:	f04f 0870 	mov.w	r8, #112	; 0x70
   326b4:	4640      	mov	r0, r8
   326b6:	e7b0      	b.n	3261a <gnss_interface_read+0x12>
   326b8:	1c6b      	adds	r3, r5, #1
   326ba:	d028      	beq.n	3270e <gnss_interface_read+0x106>
   326bc:	f244 0202 	movw	r2, #16386	; 0x4002
   326c0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   326c4:	4293      	cmp	r3, r2
   326c6:	d129      	bne.n	3271c <gnss_interface_read+0x114>
   326c8:	4638      	mov	r0, r7
   326ca:	f7ee ffd0 	bl	2166e <strlen>
   326ce:	4605      	mov	r5, r0
   326d0:	2302      	movs	r3, #2
   326d2:	4620      	mov	r0, r4
   326d4:	3501      	adds	r5, #1
   326d6:	b2ad      	uxth	r5, r5
   326d8:	462a      	mov	r2, r5
   326da:	4639      	mov	r1, r7
   326dc:	f800 3b08 	strb.w	r3, [r0], #8
   326e0:	f00a ffc4 	bl	3d66c <memcpy>
   326e4:	3508      	adds	r5, #8
   326e6:	4b4b      	ldr	r3, [pc, #300]	; (32814 <gnss_interface_read+0x20c>)
   326e8:	6818      	ldr	r0, [r3, #0]
   326ea:	6803      	ldr	r3, [r0, #0]
   326ec:	68db      	ldr	r3, [r3, #12]
   326ee:	4798      	blx	r3
   326f0:	2800      	cmp	r0, #0
   326f2:	bfc2      	ittt	gt
   326f4:	6833      	ldrgt	r3, [r6, #0]
   326f6:	f443 3380 	orrgt.w	r3, r3, #65536	; 0x10000
   326fa:	6033      	strgt	r3, [r6, #0]
   326fc:	e791      	b.n	32622 <gnss_interface_read+0x1a>
   326fe:	2900      	cmp	r1, #0
   32700:	d0d6      	beq.n	326b0 <gnss_interface_read+0xa8>
   32702:	4629      	mov	r1, r5
   32704:	4658      	mov	r0, fp
   32706:	f7f6 fce7 	bl	290d8 <nrf_modem_os_timedwait>
   3270a:	4680      	mov	r8, r0
   3270c:	e7c6      	b.n	3269c <gnss_interface_read+0x94>
   3270e:	f1b8 0f00 	cmp.w	r8, #0
   32712:	d1cf      	bne.n	326b4 <gnss_interface_read+0xac>
   32714:	2023      	movs	r0, #35	; 0x23
   32716:	f7f6 fd95 	bl	29244 <nrf_modem_os_errno_set>
   3271a:	e782      	b.n	32622 <gnss_interface_read+0x1a>
   3271c:	f244 0201 	movw	r2, #16385	; 0x4001
   32720:	4293      	cmp	r3, r2
   32722:	d15e      	bne.n	327e2 <gnss_interface_read+0x1da>
   32724:	2301      	movs	r3, #1
   32726:	7023      	strb	r3, [r4, #0]
   32728:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   3272c:	f89d 103e 	ldrb.w	r1, [sp, #62]	; 0x3e
   32730:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   32734:	f8dd 3041 	ldr.w	r3, [sp, #65]	; 0x41
   32738:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
   3273c:	6363      	str	r3, [r4, #52]	; 0x34
   3273e:	f8dd 3045 	ldr.w	r3, [sp, #69]	; 0x45
   32742:	200a      	movs	r0, #10
   32744:	63a3      	str	r3, [r4, #56]	; 0x38
   32746:	f8dd 3049 	ldr.w	r3, [sp, #73]	; 0x49
   3274a:	63e3      	str	r3, [r4, #60]	; 0x3c
   3274c:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   32750:	6423      	str	r3, [r4, #64]	; 0x40
   32752:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   32756:	e9c4 2302 	strd	r2, r3, [r4, #8]
   3275a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   3275e:	e9c4 2304 	strd	r2, r3, [r4, #16]
   32762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   32764:	61a3      	str	r3, [r4, #24]
   32766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   32768:	61e3      	str	r3, [r4, #28]
   3276a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3276c:	6223      	str	r3, [r4, #32]
   3276e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   32770:	6263      	str	r3, [r4, #36]	; 0x24
   32772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   32774:	62a3      	str	r3, [r4, #40]	; 0x28
   32776:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   3277a:	85a3      	strh	r3, [r4, #44]	; 0x2c
   3277c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   32780:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   32784:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   32788:	2200      	movs	r2, #0
   3278a:	8623      	strh	r3, [r4, #48]	; 0x30
   3278c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   3278e:	340c      	adds	r4, #12
   32790:	8763      	strh	r3, [r4, #58]	; 0x3a
   32792:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   32796:	370a      	adds	r7, #10
   32798:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   3279c:	ab34      	add	r3, sp, #208	; 0xd0
   3279e:	fb00 3302 	mla	r3, r0, r2, r3
   327a2:	f813 5c7a 	ldrb.w	r5, [r3, #-122]
   327a6:	f813 1c7b 	ldrb.w	r1, [r3, #-123]
   327aa:	3201      	adds	r2, #1
   327ac:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   327b0:	87e1      	strh	r1, [r4, #62]	; 0x3e
   327b2:	f813 1c79 	ldrb.w	r1, [r3, #-121]
   327b6:	f813 5c78 	ldrb.w	r5, [r3, #-120]
   327ba:	2a0c      	cmp	r2, #12
   327bc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   327c0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
   327c4:	f813 1c77 	ldrb.w	r1, [r3, #-119]
   327c8:	f813 3c76 	ldrb.w	r3, [r3, #-118]
   327cc:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
   327d0:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   327d4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   327d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   327dc:	d1d6      	bne.n	3278c <gnss_interface_read+0x184>
   327de:	25d8      	movs	r5, #216	; 0xd8
   327e0:	e781      	b.n	326e6 <gnss_interface_read+0xde>
   327e2:	f244 0203 	movw	r2, #16387	; 0x4003
   327e6:	4293      	cmp	r3, r2
   327e8:	f47f af22 	bne.w	32630 <gnss_interface_read+0x28>
   327ec:	2303      	movs	r3, #3
   327ee:	7023      	strb	r3, [r4, #0]
   327f0:	9b05      	ldr	r3, [sp, #20]
   327f2:	2514      	movs	r5, #20
   327f4:	60a3      	str	r3, [r4, #8]
   327f6:	9b06      	ldr	r3, [sp, #24]
   327f8:	60e3      	str	r3, [r4, #12]
   327fa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   327fe:	6123      	str	r3, [r4, #16]
   32800:	e771      	b.n	326e6 <gnss_interface_read+0xde>
   32802:	bf00      	nop
   32804:	49765443 	.word	0x49765443
   32808:	20017f1c 	.word	0x20017f1c
   3280c:	20014790 	.word	0x20014790
   32810:	20019166 	.word	0x20019166
   32814:	20017f24 	.word	0x20017f24

00032818 <gnss_interface_setopt>:
   32818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3281c:	4c75      	ldr	r4, [pc, #468]	; (329f4 <gnss_interface_setopt+0x1dc>)
   3281e:	4616      	mov	r6, r2
   32820:	6822      	ldr	r2, [r4, #0]
   32822:	b087      	sub	sp, #28
   32824:	b292      	uxth	r2, r2
   32826:	2a02      	cmp	r2, #2
   32828:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   3282a:	d007      	beq.n	3283c <gnss_interface_setopt+0x24>
   3282c:	2e08      	cmp	r6, #8
   3282e:	d005      	beq.n	3283c <gnss_interface_setopt+0x24>
   32830:	f1a6 020a 	sub.w	r2, r6, #10
   32834:	2a01      	cmp	r2, #1
   32836:	d901      	bls.n	3283c <gnss_interface_setopt+0x24>
   32838:	200e      	movs	r0, #14
   3283a:	e003      	b.n	32844 <gnss_interface_setopt+0x2c>
   3283c:	6822      	ldr	r2, [r4, #0]
   3283e:	0252      	lsls	r2, r2, #9
   32840:	d508      	bpl.n	32854 <gnss_interface_setopt+0x3c>
   32842:	2073      	movs	r0, #115	; 0x73
   32844:	f7f6 fcfe 	bl	29244 <nrf_modem_os_errno_set>
   32848:	f04f 35ff 	mov.w	r5, #4294967295
   3284c:	4628      	mov	r0, r5
   3284e:	b007      	add	sp, #28
   32850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32854:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   32858:	d001      	beq.n	3285e <gnss_interface_setopt+0x46>
   3285a:	202a      	movs	r0, #42	; 0x2a
   3285c:	e7f2      	b.n	32844 <gnss_interface_setopt+0x2c>
   3285e:	4a66      	ldr	r2, [pc, #408]	; (329f8 <gnss_interface_setopt+0x1e0>)
   32860:	4290      	cmp	r0, r2
   32862:	d001      	beq.n	32868 <gnss_interface_setopt+0x50>
   32864:	2009      	movs	r0, #9
   32866:	e7ed      	b.n	32844 <gnss_interface_setopt+0x2c>
   32868:	f1a6 020a 	sub.w	r2, r6, #10
   3286c:	2a01      	cmp	r2, #1
   3286e:	d902      	bls.n	32876 <gnss_interface_setopt+0x5e>
   32870:	b90b      	cbnz	r3, 32876 <gnss_interface_setopt+0x5e>
   32872:	2016      	movs	r0, #22
   32874:	e7e6      	b.n	32844 <gnss_interface_setopt+0x2c>
   32876:	1e72      	subs	r2, r6, #1
   32878:	2a0a      	cmp	r2, #10
   3287a:	d8fa      	bhi.n	32872 <gnss_interface_setopt+0x5a>
   3287c:	e8df f002 	tbb	[pc, r2]
   32880:	4b45063d 	.word	0x4b45063d
   32884:	806a5a53 	.word	0x806a5a53
   32888:	9362      	.short	0x9362
   3288a:	a5          	.byte	0xa5
   3288b:	00          	.byte	0x00
   3288c:	2d02      	cmp	r5, #2
   3288e:	d1f0      	bne.n	32872 <gnss_interface_setopt+0x5a>
   32890:	2210      	movs	r2, #16
   32892:	881b      	ldrh	r3, [r3, #0]
   32894:	9202      	str	r2, [sp, #8]
   32896:	f8ad 3011 	strh.w	r3, [sp, #17]
   3289a:	f241 1003 	movw	r0, #4355	; 0x1103
   3289e:	6823      	ldr	r3, [r4, #0]
   328a0:	2214      	movs	r2, #20
   328a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   328a6:	a901      	add	r1, sp, #4
   328a8:	6023      	str	r3, [r4, #0]
   328aa:	f7ff fddb 	bl	32464 <send_message>
   328ae:	4605      	mov	r5, r0
   328b0:	2800      	cmp	r0, #0
   328b2:	f040 8091 	bne.w	329d8 <gnss_interface_setopt+0x1c0>
   328b6:	f8df 9148 	ldr.w	r9, [pc, #328]	; 32a00 <gnss_interface_setopt+0x1e8>
   328ba:	f8df 813c 	ldr.w	r8, [pc, #316]	; 329f8 <gnss_interface_setopt+0x1e0>
   328be:	4649      	mov	r1, r9
   328c0:	4640      	mov	r0, r8
   328c2:	f7f6 fc09 	bl	290d8 <nrf_modem_os_timedwait>
   328c6:	6827      	ldr	r7, [r4, #0]
   328c8:	f417 0780 	ands.w	r7, r7, #4194304	; 0x400000
   328cc:	d1f7      	bne.n	328be <gnss_interface_setopt+0xa6>
   328ce:	f8df 8134 	ldr.w	r8, [pc, #308]	; 32a04 <gnss_interface_setopt+0x1ec>
   328d2:	f8d8 0000 	ldr.w	r0, [r8]
   328d6:	b118      	cbz	r0, 328e0 <gnss_interface_setopt+0xc8>
   328d8:	f009 fc1f 	bl	3c11a <rpc_gnss_client_data_free>
   328dc:	f8c8 7000 	str.w	r7, [r8]
   328e0:	6823      	ldr	r3, [r4, #0]
   328e2:	021b      	lsls	r3, r3, #8
   328e4:	d47d      	bmi.n	329e2 <gnss_interface_setopt+0x1ca>
   328e6:	200e      	movs	r0, #14
   328e8:	f7f6 fcac 	bl	29244 <nrf_modem_os_errno_set>
   328ec:	f04f 35ff 	mov.w	r5, #4294967295
   328f0:	6823      	ldr	r3, [r4, #0]
   328f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   328f6:	6023      	str	r3, [r4, #0]
   328f8:	e7a8      	b.n	3284c <gnss_interface_setopt+0x34>
   328fa:	2d02      	cmp	r5, #2
   328fc:	d1b9      	bne.n	32872 <gnss_interface_setopt+0x5a>
   328fe:	2208      	movs	r2, #8
   32900:	881b      	ldrh	r3, [r3, #0]
   32902:	9202      	str	r2, [sp, #8]
   32904:	f8ad 300f 	strh.w	r3, [sp, #15]
   32908:	e7c7      	b.n	3289a <gnss_interface_setopt+0x82>
   3290a:	2d01      	cmp	r5, #1
   3290c:	d1b1      	bne.n	32872 <gnss_interface_setopt+0x5a>
   3290e:	781b      	ldrb	r3, [r3, #0]
   32910:	2b01      	cmp	r3, #1
   32912:	d0c2      	beq.n	3289a <gnss_interface_setopt+0x82>
   32914:	e7ad      	b.n	32872 <gnss_interface_setopt+0x5a>
   32916:	2d02      	cmp	r5, #2
   32918:	d1ab      	bne.n	32872 <gnss_interface_setopt+0x5a>
   3291a:	2220      	movs	r2, #32
   3291c:	881b      	ldrh	r3, [r3, #0]
   3291e:	9202      	str	r2, [sp, #8]
   32920:	f8ad 3013 	strh.w	r3, [sp, #19]
   32924:	e7b9      	b.n	3289a <gnss_interface_setopt+0x82>
   32926:	2d01      	cmp	r5, #1
   32928:	d1a3      	bne.n	32872 <gnss_interface_setopt+0x5a>
   3292a:	781b      	ldrb	r3, [r3, #0]
   3292c:	9502      	str	r5, [sp, #8]
   3292e:	f88d 300c 	strb.w	r3, [sp, #12]
   32932:	e7b2      	b.n	3289a <gnss_interface_setopt+0x82>
   32934:	2d01      	cmp	r5, #1
   32936:	d19c      	bne.n	32872 <gnss_interface_setopt+0x5a>
   32938:	2202      	movs	r2, #2
   3293a:	781b      	ldrb	r3, [r3, #0]
   3293c:	9202      	str	r2, [sp, #8]
   3293e:	f88d 300d 	strb.w	r3, [sp, #13]
   32942:	e7aa      	b.n	3289a <gnss_interface_setopt+0x82>
   32944:	2d01      	cmp	r5, #1
   32946:	d194      	bne.n	32872 <gnss_interface_setopt+0x5a>
   32948:	2240      	movs	r2, #64	; 0x40
   3294a:	781b      	ldrb	r3, [r3, #0]
   3294c:	9202      	str	r2, [sp, #8]
   3294e:	f88d 3015 	strb.w	r3, [sp, #21]
   32952:	e7a2      	b.n	3289a <gnss_interface_setopt+0x82>
   32954:	6822      	ldr	r2, [r4, #0]
   32956:	b292      	uxth	r2, r2
   32958:	2a02      	cmp	r2, #2
   3295a:	f47f af6d 	bne.w	32838 <gnss_interface_setopt+0x20>
   3295e:	2d04      	cmp	r5, #4
   32960:	d187      	bne.n	32872 <gnss_interface_setopt+0x5a>
   32962:	2201      	movs	r2, #1
   32964:	681b      	ldr	r3, [r3, #0]
   32966:	f88d 2008 	strb.w	r2, [sp, #8]
   3296a:	f8cd 3009 	str.w	r3, [sp, #9]
   3296e:	6823      	ldr	r3, [r4, #0]
   32970:	0c1b      	lsrs	r3, r3, #16
   32972:	041b      	lsls	r3, r3, #16
   32974:	f043 0303 	orr.w	r3, r3, #3
   32978:	6023      	str	r3, [r4, #0]
   3297a:	f241 0004 	movw	r0, #4100	; 0x1004
   3297e:	e78e      	b.n	3289e <gnss_interface_setopt+0x86>
   32980:	6822      	ldr	r2, [r4, #0]
   32982:	b292      	uxth	r2, r2
   32984:	2a04      	cmp	r2, #4
   32986:	d004      	beq.n	32992 <gnss_interface_setopt+0x17a>
   32988:	6822      	ldr	r2, [r4, #0]
   3298a:	b292      	uxth	r2, r2
   3298c:	2a02      	cmp	r2, #2
   3298e:	f47f af53 	bne.w	32838 <gnss_interface_setopt+0x20>
   32992:	2200      	movs	r2, #0
   32994:	2d04      	cmp	r5, #4
   32996:	f88d 2008 	strb.w	r2, [sp, #8]
   3299a:	f47f af6a 	bne.w	32872 <gnss_interface_setopt+0x5a>
   3299e:	681b      	ldr	r3, [r3, #0]
   329a0:	f8cd 3009 	str.w	r3, [sp, #9]
   329a4:	e7e9      	b.n	3297a <gnss_interface_setopt+0x162>
   329a6:	6823      	ldr	r3, [r4, #0]
   329a8:	b29b      	uxth	r3, r3
   329aa:	2b04      	cmp	r3, #4
   329ac:	f47f af44 	bne.w	32838 <gnss_interface_setopt+0x20>
   329b0:	2302      	movs	r3, #2
   329b2:	f88d 3008 	strb.w	r3, [sp, #8]
   329b6:	2300      	movs	r3, #0
   329b8:	f88d 3009 	strb.w	r3, [sp, #9]
   329bc:	f88d 300a 	strb.w	r3, [sp, #10]
   329c0:	f88d 300b 	strb.w	r3, [sp, #11]
   329c4:	f88d 300c 	strb.w	r3, [sp, #12]
   329c8:	e7d7      	b.n	3297a <gnss_interface_setopt+0x162>
   329ca:	6823      	ldr	r3, [r4, #0]
   329cc:	b29b      	uxth	r3, r3
   329ce:	2b04      	cmp	r3, #4
   329d0:	f47f af32 	bne.w	32838 <gnss_interface_setopt+0x20>
   329d4:	2303      	movs	r3, #3
   329d6:	e7ec      	b.n	329b2 <gnss_interface_setopt+0x19a>
   329d8:	6823      	ldr	r3, [r4, #0]
   329da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   329de:	6023      	str	r3, [r4, #0]
   329e0:	e72a      	b.n	32838 <gnss_interface_setopt+0x20>
   329e2:	2e08      	cmp	r6, #8
   329e4:	d184      	bne.n	328f0 <gnss_interface_setopt+0xd8>
   329e6:	4b05      	ldr	r3, [pc, #20]	; (329fc <gnss_interface_setopt+0x1e4>)
   329e8:	6818      	ldr	r0, [r3, #0]
   329ea:	6803      	ldr	r3, [r0, #0]
   329ec:	691b      	ldr	r3, [r3, #16]
   329ee:	4798      	blx	r3
   329f0:	e77e      	b.n	328f0 <gnss_interface_setopt+0xd8>
   329f2:	bf00      	nop
   329f4:	20017f1c 	.word	0x20017f1c
   329f8:	49765443 	.word	0x49765443
   329fc:	20017f24 	.word	0x20017f24
   32a00:	20014790 	.word	0x20014790
   32a04:	20017f20 	.word	0x20017f20

00032a08 <gnss_interface_getopt>:
   32a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32a0c:	461d      	mov	r5, r3
   32a0e:	4b44      	ldr	r3, [pc, #272]	; (32b20 <gnss_interface_getopt+0x118>)
   32a10:	b087      	sub	sp, #28
   32a12:	681e      	ldr	r6, [r3, #0]
   32a14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   32a16:	b2b6      	uxth	r6, r6
   32a18:	2e02      	cmp	r6, #2
   32a1a:	461e      	mov	r6, r3
   32a1c:	d001      	beq.n	32a22 <gnss_interface_getopt+0x1a>
   32a1e:	200e      	movs	r0, #14
   32a20:	e003      	b.n	32a2a <gnss_interface_getopt+0x22>
   32a22:	681f      	ldr	r7, [r3, #0]
   32a24:	03ff      	lsls	r7, r7, #15
   32a26:	d508      	bpl.n	32a3a <gnss_interface_getopt+0x32>
   32a28:	2005      	movs	r0, #5
   32a2a:	f7f6 fc0b 	bl	29244 <nrf_modem_os_errno_set>
   32a2e:	f04f 34ff 	mov.w	r4, #4294967295
   32a32:	4620      	mov	r0, r4
   32a34:	b007      	add	sp, #28
   32a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32a3a:	681b      	ldr	r3, [r3, #0]
   32a3c:	01df      	lsls	r7, r3, #7
   32a3e:	d501      	bpl.n	32a44 <gnss_interface_getopt+0x3c>
   32a40:	2073      	movs	r0, #115	; 0x73
   32a42:	e7f2      	b.n	32a2a <gnss_interface_getopt+0x22>
   32a44:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   32a48:	d001      	beq.n	32a4e <gnss_interface_getopt+0x46>
   32a4a:	202a      	movs	r0, #42	; 0x2a
   32a4c:	e7ed      	b.n	32a2a <gnss_interface_getopt+0x22>
   32a4e:	4b35      	ldr	r3, [pc, #212]	; (32b24 <gnss_interface_getopt+0x11c>)
   32a50:	4298      	cmp	r0, r3
   32a52:	d001      	beq.n	32a58 <gnss_interface_getopt+0x50>
   32a54:	2009      	movs	r0, #9
   32a56:	e7e8      	b.n	32a2a <gnss_interface_getopt+0x22>
   32a58:	b105      	cbz	r5, 32a5c <gnss_interface_getopt+0x54>
   32a5a:	b90c      	cbnz	r4, 32a60 <gnss_interface_getopt+0x58>
   32a5c:	2016      	movs	r0, #22
   32a5e:	e7e4      	b.n	32a2a <gnss_interface_getopt+0x22>
   32a60:	1e57      	subs	r7, r2, #1
   32a62:	2f05      	cmp	r7, #5
   32a64:	d8fa      	bhi.n	32a5c <gnss_interface_getopt+0x54>
   32a66:	e8df f007 	tbb	[pc, r7]
   32a6a:	0303      	.short	0x0303
   32a6c:	30300330 	.word	0x30300330
   32a70:	6823      	ldr	r3, [r4, #0]
   32a72:	2b02      	cmp	r3, #2
   32a74:	d1f2      	bne.n	32a5c <gnss_interface_getopt+0x54>
   32a76:	6833      	ldr	r3, [r6, #0]
   32a78:	2214      	movs	r2, #20
   32a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   32a7e:	2100      	movs	r1, #0
   32a80:	a801      	add	r0, sp, #4
   32a82:	6033      	str	r3, [r6, #0]
   32a84:	f00a fdff 	bl	3d686 <memset>
   32a88:	2214      	movs	r2, #20
   32a8a:	f241 1002 	movw	r0, #4354	; 0x1102
   32a8e:	a901      	add	r1, sp, #4
   32a90:	f7ff fce8 	bl	32464 <send_message>
   32a94:	4604      	mov	r4, r0
   32a96:	b9d8      	cbnz	r0, 32ad0 <gnss_interface_getopt+0xc8>
   32a98:	f8df 9090 	ldr.w	r9, [pc, #144]	; 32b2c <gnss_interface_getopt+0x124>
   32a9c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 32b24 <gnss_interface_getopt+0x11c>
   32aa0:	4649      	mov	r1, r9
   32aa2:	4640      	mov	r0, r8
   32aa4:	f7f6 fb18 	bl	290d8 <nrf_modem_os_timedwait>
   32aa8:	6833      	ldr	r3, [r6, #0]
   32aaa:	01d9      	lsls	r1, r3, #7
   32aac:	d4f8      	bmi.n	32aa0 <gnss_interface_getopt+0x98>
   32aae:	4a1e      	ldr	r2, [pc, #120]	; (32b28 <gnss_interface_getopt+0x120>)
   32ab0:	6813      	ldr	r3, [r2, #0]
   32ab2:	4690      	mov	r8, r2
   32ab4:	b1db      	cbz	r3, 32aee <gnss_interface_getopt+0xe6>
   32ab6:	6832      	ldr	r2, [r6, #0]
   32ab8:	0192      	lsls	r2, r2, #6
   32aba:	d518      	bpl.n	32aee <gnss_interface_getopt+0xe6>
   32abc:	2f05      	cmp	r7, #5
   32abe:	d828      	bhi.n	32b12 <gnss_interface_getopt+0x10a>
   32ac0:	e8df f007 	tbb	[pc, r7]
   32ac4:	201d1a0b 	.word	0x201d1a0b
   32ac8:	2523      	.short	0x2523
   32aca:	6823      	ldr	r3, [r4, #0]
   32acc:	2b01      	cmp	r3, #1
   32ace:	e7d1      	b.n	32a74 <gnss_interface_getopt+0x6c>
   32ad0:	6833      	ldr	r3, [r6, #0]
   32ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   32ad6:	6033      	str	r3, [r6, #0]
   32ad8:	e7a1      	b.n	32a1e <gnss_interface_getopt+0x16>
   32ada:	f8b3 300f 	ldrh.w	r3, [r3, #15]
   32ade:	802b      	strh	r3, [r5, #0]
   32ae0:	f8d8 0000 	ldr.w	r0, [r8]
   32ae4:	f009 fb19 	bl	3c11a <rpc_gnss_client_data_free>
   32ae8:	2300      	movs	r3, #0
   32aea:	f8c8 3000 	str.w	r3, [r8]
   32aee:	6833      	ldr	r3, [r6, #0]
   32af0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   32af4:	6033      	str	r3, [r6, #0]
   32af6:	e79c      	b.n	32a32 <gnss_interface_getopt+0x2a>
   32af8:	f8b3 3011 	ldrh.w	r3, [r3, #17]
   32afc:	e7ef      	b.n	32ade <gnss_interface_getopt+0xd6>
   32afe:	7b9b      	ldrb	r3, [r3, #14]
   32b00:	702b      	strb	r3, [r5, #0]
   32b02:	e7ed      	b.n	32ae0 <gnss_interface_getopt+0xd8>
   32b04:	f8b3 3013 	ldrh.w	r3, [r3, #19]
   32b08:	e7e9      	b.n	32ade <gnss_interface_getopt+0xd6>
   32b0a:	7b1b      	ldrb	r3, [r3, #12]
   32b0c:	e7f8      	b.n	32b00 <gnss_interface_getopt+0xf8>
   32b0e:	7b5b      	ldrb	r3, [r3, #13]
   32b10:	e7f6      	b.n	32b00 <gnss_interface_getopt+0xf8>
   32b12:	2016      	movs	r0, #22
   32b14:	f7f6 fb96 	bl	29244 <nrf_modem_os_errno_set>
   32b18:	f04f 34ff 	mov.w	r4, #4294967295
   32b1c:	e7e0      	b.n	32ae0 <gnss_interface_getopt+0xd8>
   32b1e:	bf00      	nop
   32b20:	20017f1c 	.word	0x20017f1c
   32b24:	49765443 	.word	0x49765443
   32b28:	20017f20 	.word	0x20017f20
   32b2c:	20014790 	.word	0x20014790

00032b30 <gnss_interface_init>:
   32b30:	b510      	push	{r4, lr}
   32b32:	2400      	movs	r4, #0
   32b34:	4a0a      	ldr	r2, [pc, #40]	; (32b60 <gnss_interface_init+0x30>)
   32b36:	480b      	ldr	r0, [pc, #44]	; (32b64 <gnss_interface_init+0x34>)
   32b38:	6811      	ldr	r1, [r2, #0]
   32b3a:	4b0b      	ldr	r3, [pc, #44]	; (32b68 <gnss_interface_init+0x38>)
   32b3c:	4001      	ands	r1, r0
   32b3e:	801c      	strh	r4, [r3, #0]
   32b40:	4b0a      	ldr	r3, [pc, #40]	; (32b6c <gnss_interface_init+0x3c>)
   32b42:	6011      	str	r1, [r2, #0]
   32b44:	601c      	str	r4, [r3, #0]
   32b46:	6813      	ldr	r3, [r2, #0]
   32b48:	4003      	ands	r3, r0
   32b4a:	f043 0301 	orr.w	r3, r3, #1
   32b4e:	6013      	str	r3, [r2, #0]
   32b50:	2201      	movs	r2, #1
   32b52:	4b07      	ldr	r3, [pc, #28]	; (32b70 <gnss_interface_init+0x40>)
   32b54:	4807      	ldr	r0, [pc, #28]	; (32b74 <gnss_interface_init+0x44>)
   32b56:	701a      	strb	r2, [r3, #0]
   32b58:	f7fd fbd6 	bl	30308 <rpc_gnss_client_set_handler>
   32b5c:	4620      	mov	r0, r4
   32b5e:	bd10      	pop	{r4, pc}
   32b60:	20017f1c 	.word	0x20017f1c
   32b64:	ffff0000 	.word	0xffff0000
   32b68:	20017fdc 	.word	0x20017fdc
   32b6c:	20017f20 	.word	0x20017f20
   32b70:	20019166 	.word	0x20019166
   32b74:	000322e5 	.word	0x000322e5

00032b78 <gnss_interface_open>:
   32b78:	4b16      	ldr	r3, [pc, #88]	; (32bd4 <gnss_interface_open+0x5c>)
   32b7a:	4608      	mov	r0, r1
   32b7c:	781b      	ldrb	r3, [r3, #0]
   32b7e:	b510      	push	{r4, lr}
   32b80:	b92b      	cbnz	r3, 32b8e <gnss_interface_open+0x16>
   32b82:	2070      	movs	r0, #112	; 0x70
   32b84:	f7f6 fb5e 	bl	29244 <nrf_modem_os_errno_set>
   32b88:	f04f 30ff 	mov.w	r0, #4294967295
   32b8c:	e01f      	b.n	32bce <gnss_interface_open+0x56>
   32b8e:	2902      	cmp	r1, #2
   32b90:	d001      	beq.n	32b96 <gnss_interface_open+0x1e>
   32b92:	2029      	movs	r0, #41	; 0x29
   32b94:	e7f6      	b.n	32b84 <gnss_interface_open+0xc>
   32b96:	4c10      	ldr	r4, [pc, #64]	; (32bd8 <gnss_interface_open+0x60>)
   32b98:	6823      	ldr	r3, [r4, #0]
   32b9a:	b29b      	uxth	r3, r3
   32b9c:	2b01      	cmp	r3, #1
   32b9e:	d001      	beq.n	32ba4 <gnss_interface_open+0x2c>
   32ba0:	2005      	movs	r0, #5
   32ba2:	e7ef      	b.n	32b84 <gnss_interface_open+0xc>
   32ba4:	6823      	ldr	r3, [r4, #0]
   32ba6:	2200      	movs	r2, #0
   32ba8:	0c1b      	lsrs	r3, r3, #16
   32baa:	041b      	lsls	r3, r3, #16
   32bac:	f043 0302 	orr.w	r3, r3, #2
   32bb0:	490a      	ldr	r1, [pc, #40]	; (32bdc <gnss_interface_open+0x64>)
   32bb2:	6023      	str	r3, [r4, #0]
   32bb4:	f000 fd4c 	bl	33650 <packet_handler_create>
   32bb8:	4a09      	ldr	r2, [pc, #36]	; (32be0 <gnss_interface_open+0x68>)
   32bba:	6010      	str	r0, [r2, #0]
   32bbc:	b140      	cbz	r0, 32bd0 <gnss_interface_open+0x58>
   32bbe:	6822      	ldr	r2, [r4, #0]
   32bc0:	6803      	ldr	r3, [r0, #0]
   32bc2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   32bc6:	681b      	ldr	r3, [r3, #0]
   32bc8:	6022      	str	r2, [r4, #0]
   32bca:	4798      	blx	r3
   32bcc:	4805      	ldr	r0, [pc, #20]	; (32be4 <gnss_interface_open+0x6c>)
   32bce:	bd10      	pop	{r4, pc}
   32bd0:	200e      	movs	r0, #14
   32bd2:	e7d7      	b.n	32b84 <gnss_interface_open+0xc>
   32bd4:	20019166 	.word	0x20019166
   32bd8:	20017f1c 	.word	0x20017f1c
   32bdc:	0003ccad 	.word	0x0003ccad
   32be0:	20017f24 	.word	0x20017f24
   32be4:	49765443 	.word	0x49765443

00032be8 <gnss_interface_close>:
   32be8:	b530      	push	{r4, r5, lr}
   32bea:	4b14      	ldr	r3, [pc, #80]	; (32c3c <gnss_interface_close+0x54>)
   32bec:	b085      	sub	sp, #20
   32bee:	4298      	cmp	r0, r3
   32bf0:	d006      	beq.n	32c00 <gnss_interface_close+0x18>
   32bf2:	2009      	movs	r0, #9
   32bf4:	f7f6 fb26 	bl	29244 <nrf_modem_os_errno_set>
   32bf8:	f04f 30ff 	mov.w	r0, #4294967295
   32bfc:	b005      	add	sp, #20
   32bfe:	bd30      	pop	{r4, r5, pc}
   32c00:	4c0f      	ldr	r4, [pc, #60]	; (32c40 <gnss_interface_close+0x58>)
   32c02:	6823      	ldr	r3, [r4, #0]
   32c04:	b29b      	uxth	r3, r3
   32c06:	2b04      	cmp	r3, #4
   32c08:	d108      	bne.n	32c1c <gnss_interface_close+0x34>
   32c0a:	2200      	movs	r2, #0
   32c0c:	9300      	str	r3, [sp, #0]
   32c0e:	9203      	str	r2, [sp, #12]
   32c10:	f44f 7101 	mov.w	r1, #516	; 0x204
   32c14:	2208      	movs	r2, #8
   32c16:	ab03      	add	r3, sp, #12
   32c18:	f00a fb3b 	bl	3d292 <nrf_setsockopt>
   32c1c:	4d09      	ldr	r5, [pc, #36]	; (32c44 <gnss_interface_close+0x5c>)
   32c1e:	6828      	ldr	r0, [r5, #0]
   32c20:	b118      	cbz	r0, 32c2a <gnss_interface_close+0x42>
   32c22:	f00a f9ea 	bl	3cffa <packet_handler_delete>
   32c26:	2300      	movs	r3, #0
   32c28:	602b      	str	r3, [r5, #0]
   32c2a:	6823      	ldr	r3, [r4, #0]
   32c2c:	2000      	movs	r0, #0
   32c2e:	0c1b      	lsrs	r3, r3, #16
   32c30:	041b      	lsls	r3, r3, #16
   32c32:	f043 0301 	orr.w	r3, r3, #1
   32c36:	6023      	str	r3, [r4, #0]
   32c38:	e7e0      	b.n	32bfc <gnss_interface_close+0x14>
   32c3a:	bf00      	nop
   32c3c:	49765443 	.word	0x49765443
   32c40:	20017f1c 	.word	0x20017f1c
   32c44:	20017f24 	.word	0x20017f24

00032c48 <handle_verify_and_covert>:
   32c48:	4a0b      	ldr	r2, [pc, #44]	; (32c78 <handle_verify_and_covert+0x30>)
   32c4a:	0c03      	lsrs	r3, r0, #16
   32c4c:	041b      	lsls	r3, r3, #16
   32c4e:	4293      	cmp	r3, r2
   32c50:	d10f      	bne.n	32c72 <handle_verify_and_covert+0x2a>
   32c52:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   32c56:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   32c5a:	2809      	cmp	r0, #9
   32c5c:	dc09      	bgt.n	32c72 <handle_verify_and_covert+0x2a>
   32c5e:	4b07      	ldr	r3, [pc, #28]	; (32c7c <handle_verify_and_covert+0x34>)
   32c60:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   32c64:	b12b      	cbz	r3, 32c72 <handle_verify_and_covert+0x2a>
   32c66:	689b      	ldr	r3, [r3, #8]
   32c68:	2b00      	cmp	r3, #0
   32c6a:	bf08      	it	eq
   32c6c:	f06f 0008 	mvneq.w	r0, #8
   32c70:	4770      	bx	lr
   32c72:	f06f 0008 	mvn.w	r0, #8
   32c76:	4770      	bx	lr
   32c78:	789a0000 	.word	0x789a0000
   32c7c:	20017f2c 	.word	0x20017f2c

00032c80 <command_write>:
   32c80:	4b0c      	ldr	r3, [pc, #48]	; (32cb4 <command_write+0x34>)
   32c82:	b513      	push	{r0, r1, r4, lr}
   32c84:	480c      	ldr	r0, [pc, #48]	; (32cb8 <command_write+0x38>)
   32c86:	681c      	ldr	r4, [r3, #0]
   32c88:	f7ee fcf1 	bl	2166e <strlen>
   32c8c:	2300      	movs	r3, #0
   32c8e:	4602      	mov	r2, r0
   32c90:	e9cd 3300 	strd	r3, r3, [sp]
   32c94:	4908      	ldr	r1, [pc, #32]	; (32cb8 <command_write+0x38>)
   32c96:	4620      	mov	r0, r4
   32c98:	f009 fefc 	bl	3ca94 <at_interface_write>
   32c9c:	4604      	mov	r4, r0
   32c9e:	4806      	ldr	r0, [pc, #24]	; (32cb8 <command_write+0x38>)
   32ca0:	f7ee fce5 	bl	2166e <strlen>
   32ca4:	42a0      	cmp	r0, r4
   32ca6:	bf14      	ite	ne
   32ca8:	f06f 0004 	mvnne.w	r0, #4
   32cac:	2000      	moveq	r0, #0
   32cae:	b002      	add	sp, #8
   32cb0:	bd10      	pop	{r4, pc}
   32cb2:	bf00      	nop
   32cb4:	20017f28 	.word	0x20017f28
   32cb8:	20019168 	.word	0x20019168

00032cbc <event_wait>:
   32cbc:	2300      	movs	r3, #0
   32cbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   32cc2:	e9cd 3300 	strd	r3, r3, [sp]
   32cc6:	4606      	mov	r6, r0
   32cc8:	4818      	ldr	r0, [pc, #96]	; (32d2c <event_wait+0x70>)
   32cca:	460d      	mov	r5, r1
   32ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
   32cd0:	4917      	ldr	r1, [pc, #92]	; (32d30 <event_wait+0x74>)
   32cd2:	6800      	ldr	r0, [r0, #0]
   32cd4:	f009 ff48 	bl	3cb68 <at_interface_read>
   32cd8:	4c16      	ldr	r4, [pc, #88]	; (32d34 <event_wait+0x78>)
   32cda:	4607      	mov	r7, r0
   32cdc:	f854 8035 	ldr.w	r8, [r4, r5, lsl #3]
   32ce0:	4640      	mov	r0, r8
   32ce2:	f7ee fcc4 	bl	2166e <strlen>
   32ce6:	4287      	cmp	r7, r0
   32ce8:	4602      	mov	r2, r0
   32cea:	db0d      	blt.n	32d08 <event_wait+0x4c>
   32cec:	4640      	mov	r0, r8
   32cee:	4910      	ldr	r1, [pc, #64]	; (32d30 <event_wait+0x74>)
   32cf0:	f00a fe28 	bl	3d944 <strncmp>
   32cf4:	b940      	cbnz	r0, 32d08 <event_wait+0x4c>
   32cf6:	4630      	mov	r0, r6
   32cf8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   32cfc:	6863      	ldr	r3, [r4, #4]
   32cfe:	490c      	ldr	r1, [pc, #48]	; (32d30 <event_wait+0x74>)
   32d00:	b002      	add	sp, #8
   32d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   32d06:	4718      	bx	r3
   32d08:	480b      	ldr	r0, [pc, #44]	; (32d38 <event_wait+0x7c>)
   32d0a:	f7ee fcb0 	bl	2166e <strlen>
   32d0e:	4908      	ldr	r1, [pc, #32]	; (32d30 <event_wait+0x74>)
   32d10:	4602      	mov	r2, r0
   32d12:	4809      	ldr	r0, [pc, #36]	; (32d38 <event_wait+0x7c>)
   32d14:	f00a fe16 	bl	3d944 <strncmp>
   32d18:	2800      	cmp	r0, #0
   32d1a:	bf14      	ite	ne
   32d1c:	f06f 0004 	mvnne.w	r0, #4
   32d20:	f06f 0007 	mvneq.w	r0, #7
   32d24:	b002      	add	sp, #8
   32d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32d2a:	bf00      	nop
   32d2c:	20017f28 	.word	0x20017f28
   32d30:	20019168 	.word	0x20019168
   32d34:	0003ebf0 	.word	0x0003ebf0
   32d38:	0003ee93 	.word	0x0003ee93

00032d3c <pdn_state_get_parser>:
   32d3c:	2300      	movs	r3, #0
   32d3e:	b530      	push	{r4, r5, lr}
   32d40:	4605      	mov	r5, r0
   32d42:	460c      	mov	r4, r1
   32d44:	b085      	sub	sp, #20
   32d46:	4608      	mov	r0, r1
   32d48:	e9cd 3300 	strd	r3, r3, [sp]
   32d4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   32d50:	f009 ffba 	bl	3ccc8 <spaces_remove>
   32d54:	4b08      	ldr	r3, [pc, #32]	; (32d78 <pdn_state_get_parser+0x3c>)
   32d56:	4a09      	ldr	r2, [pc, #36]	; (32d7c <pdn_state_get_parser+0x40>)
   32d58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   32d5c:	2110      	movs	r1, #16
   32d5e:	681b      	ldr	r3, [r3, #0]
   32d60:	4668      	mov	r0, sp
   32d62:	f005 f97b 	bl	3805c <sniprintf>
   32d66:	4669      	mov	r1, sp
   32d68:	4620      	mov	r0, r4
   32d6a:	f00a fe2c 	bl	3d9c6 <strstr>
   32d6e:	3800      	subs	r0, #0
   32d70:	bf18      	it	ne
   32d72:	2001      	movne	r0, #1
   32d74:	b005      	add	sp, #20
   32d76:	bd30      	pop	{r4, r5, pc}
   32d78:	20017f2c 	.word	0x20017f2c
   32d7c:	00042770 	.word	0x00042770

00032d80 <pdn_id_get_parser>:
   32d80:	b510      	push	{r4, lr}
   32d82:	4604      	mov	r4, r0
   32d84:	4608      	mov	r0, r1
   32d86:	f009 ff9f 	bl	3ccc8 <spaces_remove>
   32d8a:	213a      	movs	r1, #58	; 0x3a
   32d8c:	f00a fdbc 	bl	3d908 <strchr>
   32d90:	b130      	cbz	r0, 32da0 <pdn_id_get_parser+0x20>
   32d92:	3001      	adds	r0, #1
   32d94:	f00a fc48 	bl	3d628 <atoi>
   32d98:	4b02      	ldr	r3, [pc, #8]	; (32da4 <pdn_id_get_parser+0x24>)
   32d9a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   32d9e:	6058      	str	r0, [r3, #4]
   32da0:	2000      	movs	r0, #0
   32da2:	bd10      	pop	{r4, pc}
   32da4:	20017f2c 	.word	0x20017f2c

00032da8 <context_create_parser>:
   32da8:	b510      	push	{r4, lr}
   32daa:	4604      	mov	r4, r0
   32dac:	4608      	mov	r0, r1
   32dae:	f009 ff8b 	bl	3ccc8 <spaces_remove>
   32db2:	213a      	movs	r1, #58	; 0x3a
   32db4:	f00a fda8 	bl	3d908 <strchr>
   32db8:	b130      	cbz	r0, 32dc8 <context_create_parser+0x20>
   32dba:	4b04      	ldr	r3, [pc, #16]	; (32dcc <context_create_parser+0x24>)
   32dbc:	3001      	adds	r0, #1
   32dbe:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   32dc2:	f00a fc31 	bl	3d628 <atoi>
   32dc6:	6020      	str	r0, [r4, #0]
   32dc8:	2000      	movs	r0, #0
   32dca:	bd10      	pop	{r4, pc}
   32dcc:	20017f2c 	.word	0x20017f2c

00032dd0 <connection_free>:
   32dd0:	b538      	push	{r3, r4, r5, lr}
   32dd2:	4d05      	ldr	r5, [pc, #20]	; (32de8 <connection_free+0x18>)
   32dd4:	4604      	mov	r4, r0
   32dd6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   32dda:	f7f6 fc2d 	bl	29638 <nrf_modem_os_free>
   32dde:	2300      	movs	r3, #0
   32de0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   32de4:	bd38      	pop	{r3, r4, r5, pc}
   32de6:	bf00      	nop
   32de8:	20017f2c 	.word	0x20017f2c

00032dec <pdn_id_get>:
   32dec:	b538      	push	{r3, r4, r5, lr}
   32dee:	4d0e      	ldr	r5, [pc, #56]	; (32e28 <pdn_id_get+0x3c>)
   32df0:	4604      	mov	r4, r0
   32df2:	f44f 7180 	mov.w	r1, #256	; 0x100
   32df6:	4b0d      	ldr	r3, [pc, #52]	; (32e2c <pdn_id_get+0x40>)
   32df8:	4a0d      	ldr	r2, [pc, #52]	; (32e30 <pdn_id_get+0x44>)
   32dfa:	4628      	mov	r0, r5
   32dfc:	f005 f92e 	bl	3805c <sniprintf>
   32e00:	4b0c      	ldr	r3, [pc, #48]	; (32e34 <pdn_id_get+0x48>)
   32e02:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   32e06:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   32e0a:	4a0b      	ldr	r2, [pc, #44]	; (32e38 <pdn_id_get+0x4c>)
   32e0c:	681b      	ldr	r3, [r3, #0]
   32e0e:	4428      	add	r0, r5
   32e10:	f005 f924 	bl	3805c <sniprintf>
   32e14:	f7ff ff34 	bl	32c80 <command_write>
   32e18:	b928      	cbnz	r0, 32e26 <pdn_id_get+0x3a>
   32e1a:	4620      	mov	r0, r4
   32e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   32e20:	2102      	movs	r1, #2
   32e22:	f7ff bf4b 	b.w	32cbc <event_wait>
   32e26:	bd38      	pop	{r3, r4, r5, pc}
   32e28:	20019168 	.word	0x20019168
   32e2c:	0004277c 	.word	0x0004277c
   32e30:	00040987 	.word	0x00040987
   32e34:	20017f2c 	.word	0x20017f2c
   32e38:	00040dcf 	.word	0x00040dcf

00032e3c <pdn_interface_init>:
   32e3c:	b538      	push	{r3, r4, r5, lr}
   32e3e:	f04f 34ff 	mov.w	r4, #4294967295
   32e42:	4d0b      	ldr	r5, [pc, #44]	; (32e70 <pdn_interface_init+0x34>)
   32e44:	2228      	movs	r2, #40	; 0x28
   32e46:	2100      	movs	r1, #0
   32e48:	480a      	ldr	r0, [pc, #40]	; (32e74 <pdn_interface_init+0x38>)
   32e4a:	602c      	str	r4, [r5, #0]
   32e4c:	f00a fc1b 	bl	3d686 <memset>
   32e50:	f240 2201 	movw	r2, #513	; 0x201
   32e54:	2102      	movs	r1, #2
   32e56:	2066      	movs	r0, #102	; 0x66
   32e58:	f7fe ffe0 	bl	31e1c <at_interface_open>
   32e5c:	2800      	cmp	r0, #0
   32e5e:	bfa4      	itt	ge
   32e60:	2201      	movge	r2, #1
   32e62:	4b05      	ldrge	r3, [pc, #20]	; (32e78 <pdn_interface_init+0x3c>)
   32e64:	6028      	str	r0, [r5, #0]
   32e66:	bfa6      	itte	ge
   32e68:	701a      	strbge	r2, [r3, #0]
   32e6a:	2000      	movge	r0, #0
   32e6c:	4620      	movlt	r0, r4
   32e6e:	bd38      	pop	{r3, r4, r5, pc}
   32e70:	20017f28 	.word	0x20017f28
   32e74:	20017f2c 	.word	0x20017f2c
   32e78:	20019167 	.word	0x20019167

00032e7c <pdn_interface_open>:
   32e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32e7e:	4b28      	ldr	r3, [pc, #160]	; (32f20 <pdn_interface_open+0xa4>)
   32e80:	781b      	ldrb	r3, [r3, #0]
   32e82:	b92b      	cbnz	r3, 32e90 <pdn_interface_open+0x14>
   32e84:	2070      	movs	r0, #112	; 0x70
   32e86:	f7f6 f9dd 	bl	29244 <nrf_modem_os_errno_set>
   32e8a:	f04f 30ff 	mov.w	r0, #4294967295
   32e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32e90:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   32e94:	d141      	bne.n	32f1a <pdn_interface_open+0x9e>
   32e96:	4b23      	ldr	r3, [pc, #140]	; (32f24 <pdn_interface_open+0xa8>)
   32e98:	2500      	movs	r5, #0
   32e9a:	461e      	mov	r6, r3
   32e9c:	f853 4b04 	ldr.w	r4, [r3], #4
   32ea0:	bb24      	cbnz	r4, 32eec <pdn_interface_open+0x70>
   32ea2:	2020      	movs	r0, #32
   32ea4:	f7f6 fbc0 	bl	29628 <nrf_modem_os_alloc>
   32ea8:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
   32eac:	b308      	cbz	r0, 32ef2 <pdn_interface_open+0x76>
   32eae:	4621      	mov	r1, r4
   32eb0:	2220      	movs	r2, #32
   32eb2:	f00a fbe8 	bl	3d686 <memset>
   32eb6:	2203      	movs	r2, #3
   32eb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   32ebc:	2701      	movs	r7, #1
   32ebe:	60da      	str	r2, [r3, #12]
   32ec0:	f04f 32ff 	mov.w	r2, #4294967295
   32ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
   32ec8:	605a      	str	r2, [r3, #4]
   32eca:	609f      	str	r7, [r3, #8]
   32ecc:	4a16      	ldr	r2, [pc, #88]	; (32f28 <pdn_interface_open+0xac>)
   32ece:	4b17      	ldr	r3, [pc, #92]	; (32f2c <pdn_interface_open+0xb0>)
   32ed0:	4817      	ldr	r0, [pc, #92]	; (32f30 <pdn_interface_open+0xb4>)
   32ed2:	f005 f8c3 	bl	3805c <sniprintf>
   32ed6:	f7ff fed3 	bl	32c80 <command_write>
   32eda:	4604      	mov	r4, r0
   32edc:	b160      	cbz	r0, 32ef8 <pdn_interface_open+0x7c>
   32ede:	4628      	mov	r0, r5
   32ee0:	f7ff ff76 	bl	32dd0 <connection_free>
   32ee4:	2c00      	cmp	r4, #0
   32ee6:	da13      	bge.n	32f10 <pdn_interface_open+0x94>
   32ee8:	4260      	negs	r0, r4
   32eea:	e7cc      	b.n	32e86 <pdn_interface_open+0xa>
   32eec:	3501      	adds	r5, #1
   32eee:	2d0a      	cmp	r5, #10
   32ef0:	d1d4      	bne.n	32e9c <pdn_interface_open+0x20>
   32ef2:	f06f 040b 	mvn.w	r4, #11
   32ef6:	e7f7      	b.n	32ee8 <pdn_interface_open+0x6c>
   32ef8:	4639      	mov	r1, r7
   32efa:	4628      	mov	r0, r5
   32efc:	f7ff fede 	bl	32cbc <event_wait>
   32f00:	4604      	mov	r4, r0
   32f02:	2800      	cmp	r0, #0
   32f04:	d1eb      	bne.n	32ede <pdn_interface_open+0x62>
   32f06:	2202      	movs	r2, #2
   32f08:	462c      	mov	r4, r5
   32f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   32f0e:	609a      	str	r2, [r3, #8]
   32f10:	f044 40f1 	orr.w	r0, r4, #2021654528	; 0x78800000
   32f14:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   32f18:	e7b9      	b.n	32e8e <pdn_interface_open+0x12>
   32f1a:	2029      	movs	r0, #41	; 0x29
   32f1c:	e7b3      	b.n	32e86 <pdn_interface_open+0xa>
   32f1e:	bf00      	nop
   32f20:	20019167 	.word	0x20019167
   32f24:	20017f2c 	.word	0x20017f2c
   32f28:	00040987 	.word	0x00040987
   32f2c:	0004278a 	.word	0x0004278a
   32f30:	20019168 	.word	0x20019168

00032f34 <pdn_interface_connect>:
   32f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32f38:	4690      	mov	r8, r2
   32f3a:	4689      	mov	r9, r1
   32f3c:	b109      	cbz	r1, 32f42 <pdn_interface_connect+0xe>
   32f3e:	2a64      	cmp	r2, #100	; 0x64
   32f40:	d905      	bls.n	32f4e <pdn_interface_connect+0x1a>
   32f42:	2016      	movs	r0, #22
   32f44:	f7f6 f97e 	bl	29244 <nrf_modem_os_errno_set>
   32f48:	f04f 30ff 	mov.w	r0, #4294967295
   32f4c:	e0ef      	b.n	3312e <pdn_interface_connect+0x1fa>
   32f4e:	f7ff fe7b 	bl	32c48 <handle_verify_and_covert>
   32f52:	1e04      	subs	r4, r0, #0
   32f54:	da01      	bge.n	32f5a <pdn_interface_connect+0x26>
   32f56:	4260      	negs	r0, r4
   32f58:	e7f4      	b.n	32f44 <pdn_interface_connect+0x10>
   32f5a:	4e77      	ldr	r6, [pc, #476]	; (33138 <pdn_interface_connect+0x204>)
   32f5c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32f60:	689b      	ldr	r3, [r3, #8]
   32f62:	2b02      	cmp	r3, #2
   32f64:	d001      	beq.n	32f6a <pdn_interface_connect+0x36>
   32f66:	2009      	movs	r0, #9
   32f68:	e7ec      	b.n	32f44 <pdn_interface_connect+0x10>
   32f6a:	4f74      	ldr	r7, [pc, #464]	; (3313c <pdn_interface_connect+0x208>)
   32f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
   32f70:	4b73      	ldr	r3, [pc, #460]	; (33140 <pdn_interface_connect+0x20c>)
   32f72:	4a74      	ldr	r2, [pc, #464]	; (33144 <pdn_interface_connect+0x210>)
   32f74:	4638      	mov	r0, r7
   32f76:	f005 f871 	bl	3805c <sniprintf>
   32f7a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32f7e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   32f82:	4605      	mov	r5, r0
   32f84:	681b      	ldr	r3, [r3, #0]
   32f86:	4a70      	ldr	r2, [pc, #448]	; (33148 <pdn_interface_connect+0x214>)
   32f88:	1838      	adds	r0, r7, r0
   32f8a:	f005 f867 	bl	3805c <sniprintf>
   32f8e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32f92:	4405      	add	r5, r0
   32f94:	68db      	ldr	r3, [r3, #12]
   32f96:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   32f9a:	f003 0203 	and.w	r2, r3, #3
   32f9e:	2a03      	cmp	r2, #3
   32fa0:	eb07 0005 	add.w	r0, r7, r5
   32fa4:	d159      	bne.n	3305a <pdn_interface_connect+0x126>
   32fa6:	4b69      	ldr	r3, [pc, #420]	; (3314c <pdn_interface_connect+0x218>)
   32fa8:	4a69      	ldr	r2, [pc, #420]	; (33150 <pdn_interface_connect+0x21c>)
   32faa:	f005 f857 	bl	3805c <sniprintf>
   32fae:	f108 0303 	add.w	r3, r8, #3
   32fb2:	4428      	add	r0, r5
   32fb4:	4403      	add	r3, r0
   32fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   32fba:	f300 80ba 	bgt.w	33132 <pdn_interface_connect+0x1fe>
   32fbe:	f04f 0a22 	mov.w	sl, #34	; 0x22
   32fc2:	1c45      	adds	r5, r0, #1
   32fc4:	4642      	mov	r2, r8
   32fc6:	f807 a000 	strb.w	sl, [r7, r0]
   32fca:	4649      	mov	r1, r9
   32fcc:	1978      	adds	r0, r7, r5
   32fce:	f00a fccb 	bl	3d968 <strncpy>
   32fd2:	eb08 0305 	add.w	r3, r8, r5
   32fd6:	18fa      	adds	r2, r7, r3
   32fd8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   32fdc:	b902      	cbnz	r2, 32fe0 <pdn_interface_connect+0xac>
   32fde:	3b01      	subs	r3, #1
   32fe0:	2200      	movs	r2, #0
   32fe2:	f807 a003 	strb.w	sl, [r7, r3]
   32fe6:	443b      	add	r3, r7
   32fe8:	705a      	strb	r2, [r3, #1]
   32fea:	f7ff fe49 	bl	32c80 <command_write>
   32fee:	2800      	cmp	r0, #0
   32ff0:	d17b      	bne.n	330ea <pdn_interface_connect+0x1b6>
   32ff2:	4601      	mov	r1, r0
   32ff4:	4620      	mov	r0, r4
   32ff6:	f7ff fe61 	bl	32cbc <event_wait>
   32ffa:	2800      	cmp	r0, #0
   32ffc:	d175      	bne.n	330ea <pdn_interface_connect+0x1b6>
   32ffe:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   33002:	7c1b      	ldrb	r3, [r3, #16]
   33004:	2b00      	cmp	r3, #0
   33006:	d133      	bne.n	33070 <pdn_interface_connect+0x13c>
   33008:	f44f 7180 	mov.w	r1, #256	; 0x100
   3300c:	4b51      	ldr	r3, [pc, #324]	; (33154 <pdn_interface_connect+0x220>)
   3300e:	4a4d      	ldr	r2, [pc, #308]	; (33144 <pdn_interface_connect+0x210>)
   33010:	484a      	ldr	r0, [pc, #296]	; (3313c <pdn_interface_connect+0x208>)
   33012:	f005 f823 	bl	3805c <sniprintf>
   33016:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   3301a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3301e:	681b      	ldr	r3, [r3, #0]
   33020:	4a4d      	ldr	r2, [pc, #308]	; (33158 <pdn_interface_connect+0x224>)
   33022:	4438      	add	r0, r7
   33024:	f005 f81a 	bl	3805c <sniprintf>
   33028:	f7ff fe2a 	bl	32c80 <command_write>
   3302c:	2800      	cmp	r0, #0
   3302e:	d15c      	bne.n	330ea <pdn_interface_connect+0x1b6>
   33030:	4601      	mov	r1, r0
   33032:	4620      	mov	r0, r4
   33034:	f7ff fe42 	bl	32cbc <event_wait>
   33038:	2800      	cmp	r0, #0
   3303a:	d156      	bne.n	330ea <pdn_interface_connect+0x1b6>
   3303c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   33040:	f108 0320 	add.w	r3, r8, #32
   33044:	6950      	ldr	r0, [r2, #20]
   33046:	4403      	add	r3, r0
   33048:	6990      	ldr	r0, [r2, #24]
   3304a:	4418      	add	r0, r3
   3304c:	f7f6 faec 	bl	29628 <nrf_modem_os_alloc>
   33050:	4605      	mov	r5, r0
   33052:	2800      	cmp	r0, #0
   33054:	d14b      	bne.n	330ee <pdn_interface_connect+0x1ba>
   33056:	200c      	movs	r0, #12
   33058:	e774      	b.n	32f44 <pdn_interface_connect+0x10>
   3305a:	f003 0205 	and.w	r2, r3, #5
   3305e:	2a05      	cmp	r2, #5
   33060:	d101      	bne.n	33066 <pdn_interface_connect+0x132>
   33062:	4b3e      	ldr	r3, [pc, #248]	; (3315c <pdn_interface_connect+0x228>)
   33064:	e7a0      	b.n	32fa8 <pdn_interface_connect+0x74>
   33066:	079b      	lsls	r3, r3, #30
   33068:	bf4c      	ite	mi
   3306a:	4b3d      	ldrmi	r3, [pc, #244]	; (33160 <pdn_interface_connect+0x22c>)
   3306c:	4b3d      	ldrpl	r3, [pc, #244]	; (33164 <pdn_interface_connect+0x230>)
   3306e:	e79b      	b.n	32fa8 <pdn_interface_connect+0x74>
   33070:	f44f 7180 	mov.w	r1, #256	; 0x100
   33074:	4b3c      	ldr	r3, [pc, #240]	; (33168 <pdn_interface_connect+0x234>)
   33076:	4a33      	ldr	r2, [pc, #204]	; (33144 <pdn_interface_connect+0x210>)
   33078:	4830      	ldr	r0, [pc, #192]	; (3313c <pdn_interface_connect+0x208>)
   3307a:	f004 ffef 	bl	3805c <sniprintf>
   3307e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   33082:	4a31      	ldr	r2, [pc, #196]	; (33148 <pdn_interface_connect+0x214>)
   33084:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   33088:	4605      	mov	r5, r0
   3308a:	681b      	ldr	r3, [r3, #0]
   3308c:	1838      	adds	r0, r7, r0
   3308e:	f004 ffe5 	bl	3805c <sniprintf>
   33092:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   33096:	4405      	add	r5, r0
   33098:	7c1b      	ldrb	r3, [r3, #16]
   3309a:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   3309e:	2b01      	cmp	r3, #1
   330a0:	bf0c      	ite	eq
   330a2:	4a32      	ldreq	r2, [pc, #200]	; (3316c <pdn_interface_connect+0x238>)
   330a4:	4a32      	ldrne	r2, [pc, #200]	; (33170 <pdn_interface_connect+0x23c>)
   330a6:	1978      	adds	r0, r7, r5
   330a8:	f004 ffd8 	bl	3805c <sniprintf>
   330ac:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   330b0:	4405      	add	r5, r0
   330b2:	4a27      	ldr	r2, [pc, #156]	; (33150 <pdn_interface_connect+0x21c>)
   330b4:	3320      	adds	r3, #32
   330b6:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   330ba:	1978      	adds	r0, r7, r5
   330bc:	f004 ffce 	bl	3805c <sniprintf>
   330c0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   330c4:	4428      	add	r0, r5
   330c6:	695a      	ldr	r2, [r3, #20]
   330c8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   330cc:	3220      	adds	r2, #32
   330ce:	4413      	add	r3, r2
   330d0:	4438      	add	r0, r7
   330d2:	4a28      	ldr	r2, [pc, #160]	; (33174 <pdn_interface_connect+0x240>)
   330d4:	f004 ffc2 	bl	3805c <sniprintf>
   330d8:	f7ff fdd2 	bl	32c80 <command_write>
   330dc:	b928      	cbnz	r0, 330ea <pdn_interface_connect+0x1b6>
   330de:	4601      	mov	r1, r0
   330e0:	4620      	mov	r0, r4
   330e2:	f7ff fdeb 	bl	32cbc <event_wait>
   330e6:	2800      	cmp	r0, #0
   330e8:	d08e      	beq.n	33008 <pdn_interface_connect+0xd4>
   330ea:	4240      	negs	r0, r0
   330ec:	e72a      	b.n	32f44 <pdn_interface_connect+0x10>
   330ee:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   330f2:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   330f6:	441a      	add	r2, r3
   330f8:	3220      	adds	r2, #32
   330fa:	f00a fab7 	bl	3d66c <memcpy>
   330fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   33102:	f7f6 fa99 	bl	29638 <nrf_modem_os_free>
   33106:	2303      	movs	r3, #3
   33108:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
   3310c:	60ab      	str	r3, [r5, #8]
   3310e:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   33112:	4403      	add	r3, r0
   33114:	3320      	adds	r3, #32
   33116:	4642      	mov	r2, r8
   33118:	4649      	mov	r1, r9
   3311a:	f8c5 801c 	str.w	r8, [r5, #28]
   3311e:	18e8      	adds	r0, r5, r3
   33120:	f00a faa4 	bl	3d66c <memcpy>
   33124:	4620      	mov	r0, r4
   33126:	f7ff fe61 	bl	32dec <pdn_id_get>
   3312a:	2800      	cmp	r0, #0
   3312c:	d1dd      	bne.n	330ea <pdn_interface_connect+0x1b6>
   3312e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33132:	f04f 30ff 	mov.w	r0, #4294967295
   33136:	e7d8      	b.n	330ea <pdn_interface_connect+0x1b6>
   33138:	20017f2c 	.word	0x20017f2c
   3313c:	20019168 	.word	0x20019168
   33140:	00042796 	.word	0x00042796
   33144:	00040987 	.word	0x00040987
   33148:	000427a2 	.word	0x000427a2
   3314c:	000427a6 	.word	0x000427a6
   33150:	000427ad 	.word	0x000427ad
   33154:	000427bf 	.word	0x000427bf
   33158:	00040dcf 	.word	0x00040dcf
   3315c:	000427b3 	.word	0x000427b3
   33160:	000427ba 	.word	0x000427ba
   33164:	000427b7 	.word	0x000427b7
   33168:	000427cb 	.word	0x000427cb
   3316c:	000427c8 	.word	0x000427c8
   33170:	000427d6 	.word	0x000427d6
   33174:	000427d9 	.word	0x000427d9

00033178 <pdn_interface_close>:
   33178:	b570      	push	{r4, r5, r6, lr}
   3317a:	f7ff fd65 	bl	32c48 <handle_verify_and_covert>
   3317e:	1e04      	subs	r4, r0, #0
   33180:	da05      	bge.n	3318e <pdn_interface_close+0x16>
   33182:	4260      	negs	r0, r4
   33184:	f7f6 f85e 	bl	29244 <nrf_modem_os_errno_set>
   33188:	f04f 30ff 	mov.w	r0, #4294967295
   3318c:	bd70      	pop	{r4, r5, r6, pc}
   3318e:	4d22      	ldr	r5, [pc, #136]	; (33218 <pdn_interface_close+0xa0>)
   33190:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   33194:	689b      	ldr	r3, [r3, #8]
   33196:	2b03      	cmp	r3, #3
   33198:	d11b      	bne.n	331d2 <pdn_interface_close+0x5a>
   3319a:	4e20      	ldr	r6, [pc, #128]	; (3321c <pdn_interface_close+0xa4>)
   3319c:	f44f 7180 	mov.w	r1, #256	; 0x100
   331a0:	4b1f      	ldr	r3, [pc, #124]	; (33220 <pdn_interface_close+0xa8>)
   331a2:	4a20      	ldr	r2, [pc, #128]	; (33224 <pdn_interface_close+0xac>)
   331a4:	4630      	mov	r0, r6
   331a6:	f004 ff59 	bl	3805c <sniprintf>
   331aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   331ae:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   331b2:	681b      	ldr	r3, [r3, #0]
   331b4:	4a1c      	ldr	r2, [pc, #112]	; (33228 <pdn_interface_close+0xb0>)
   331b6:	4430      	add	r0, r6
   331b8:	f004 ff50 	bl	3805c <sniprintf>
   331bc:	f7ff fd60 	bl	32c80 <command_write>
   331c0:	4601      	mov	r1, r0
   331c2:	b910      	cbnz	r0, 331ca <pdn_interface_close+0x52>
   331c4:	4620      	mov	r0, r4
   331c6:	f7ff fd79 	bl	32cbc <event_wait>
   331ca:	2202      	movs	r2, #2
   331cc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   331d0:	609a      	str	r2, [r3, #8]
   331d2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   331d6:	689b      	ldr	r3, [r3, #8]
   331d8:	2b02      	cmp	r3, #2
   331da:	d117      	bne.n	3320c <pdn_interface_close+0x94>
   331dc:	4e0f      	ldr	r6, [pc, #60]	; (3321c <pdn_interface_close+0xa4>)
   331de:	f44f 7180 	mov.w	r1, #256	; 0x100
   331e2:	4b12      	ldr	r3, [pc, #72]	; (3322c <pdn_interface_close+0xb4>)
   331e4:	4a0f      	ldr	r2, [pc, #60]	; (33224 <pdn_interface_close+0xac>)
   331e6:	4630      	mov	r0, r6
   331e8:	f004 ff38 	bl	3805c <sniprintf>
   331ec:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   331f0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   331f4:	681b      	ldr	r3, [r3, #0]
   331f6:	4a0c      	ldr	r2, [pc, #48]	; (33228 <pdn_interface_close+0xb0>)
   331f8:	4430      	add	r0, r6
   331fa:	f004 ff2f 	bl	3805c <sniprintf>
   331fe:	f7ff fd3f 	bl	32c80 <command_write>
   33202:	4601      	mov	r1, r0
   33204:	b910      	cbnz	r0, 3320c <pdn_interface_close+0x94>
   33206:	4620      	mov	r0, r4
   33208:	f7ff fd58 	bl	32cbc <event_wait>
   3320c:	4620      	mov	r0, r4
   3320e:	f7ff fddf 	bl	32dd0 <connection_free>
   33212:	2000      	movs	r0, #0
   33214:	e7ba      	b.n	3318c <pdn_interface_close+0x14>
   33216:	bf00      	nop
   33218:	20017f2c 	.word	0x20017f2c
   3321c:	20019168 	.word	0x20019168
   33220:	000427de 	.word	0x000427de
   33224:	00040987 	.word	0x00040987
   33228:	00040dcf 	.word	0x00040dcf
   3322c:	00042796 	.word	0x00042796

00033230 <pdn_interface_setopt>:
   33230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33234:	461c      	mov	r4, r3
   33236:	f240 2302 	movw	r3, #514	; 0x202
   3323a:	4299      	cmp	r1, r3
   3323c:	4617      	mov	r7, r2
   3323e:	9d08      	ldr	r5, [sp, #32]
   33240:	d101      	bne.n	33246 <pdn_interface_setopt+0x16>
   33242:	b104      	cbz	r4, 33246 <pdn_interface_setopt+0x16>
   33244:	b92d      	cbnz	r5, 33252 <pdn_interface_setopt+0x22>
   33246:	2016      	movs	r0, #22
   33248:	f7f5 fffc 	bl	29244 <nrf_modem_os_errno_set>
   3324c:	f04f 30ff 	mov.w	r0, #4294967295
   33250:	e02a      	b.n	332a8 <pdn_interface_setopt+0x78>
   33252:	f7ff fcf9 	bl	32c48 <handle_verify_and_covert>
   33256:	1e06      	subs	r6, r0, #0
   33258:	da01      	bge.n	3325e <pdn_interface_setopt+0x2e>
   3325a:	4270      	negs	r0, r6
   3325c:	e7f4      	b.n	33248 <pdn_interface_setopt+0x18>
   3325e:	2f01      	cmp	r7, #1
   33260:	d005      	beq.n	3326e <pdn_interface_setopt+0x3e>
   33262:	2f04      	cmp	r7, #4
   33264:	d033      	beq.n	332ce <pdn_interface_setopt+0x9e>
   33266:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   3326a:	4240      	negs	r0, r0
   3326c:	e7ec      	b.n	33248 <pdn_interface_setopt+0x18>
   3326e:	4b3f      	ldr	r3, [pc, #252]	; (3336c <pdn_interface_setopt+0x13c>)
   33270:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   33274:	688b      	ldr	r3, [r1, #8]
   33276:	2b00      	cmp	r3, #0
   33278:	d072      	beq.n	33360 <pdn_interface_setopt+0x130>
   3327a:	688b      	ldr	r3, [r1, #8]
   3327c:	2b03      	cmp	r3, #3
   3327e:	d06f      	beq.n	33360 <pdn_interface_setopt+0x130>
   33280:	688b      	ldr	r3, [r1, #8]
   33282:	2b04      	cmp	r3, #4
   33284:	d06c      	beq.n	33360 <pdn_interface_setopt+0x130>
   33286:	08a8      	lsrs	r0, r5, #2
   33288:	1e43      	subs	r3, r0, #1
   3328a:	2b01      	cmp	r3, #1
   3328c:	f005 0503 	and.w	r5, r5, #3
   33290:	d902      	bls.n	33298 <pdn_interface_setopt+0x68>
   33292:	f06f 0015 	mvn.w	r0, #21
   33296:	e7e8      	b.n	3326a <pdn_interface_setopt+0x3a>
   33298:	2d00      	cmp	r5, #0
   3329a:	d1fa      	bne.n	33292 <pdn_interface_setopt+0x62>
   3329c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   332a0:	4284      	cmp	r4, r0
   332a2:	d103      	bne.n	332ac <pdn_interface_setopt+0x7c>
   332a4:	60cd      	str	r5, [r1, #12]
   332a6:	2000      	movs	r0, #0
   332a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   332ac:	f854 3b04 	ldr.w	r3, [r4], #4
   332b0:	2b02      	cmp	r3, #2
   332b2:	d102      	bne.n	332ba <pdn_interface_setopt+0x8a>
   332b4:	f045 0501 	orr.w	r5, r5, #1
   332b8:	e7f2      	b.n	332a0 <pdn_interface_setopt+0x70>
   332ba:	2b0a      	cmp	r3, #10
   332bc:	d102      	bne.n	332c4 <pdn_interface_setopt+0x94>
   332be:	f045 0502 	orr.w	r5, r5, #2
   332c2:	e7ed      	b.n	332a0 <pdn_interface_setopt+0x70>
   332c4:	2b05      	cmp	r3, #5
   332c6:	d1e4      	bne.n	33292 <pdn_interface_setopt+0x62>
   332c8:	f045 0505 	orr.w	r5, r5, #5
   332cc:	e7e8      	b.n	332a0 <pdn_interface_setopt+0x70>
   332ce:	4f27      	ldr	r7, [pc, #156]	; (3336c <pdn_interface_setopt+0x13c>)
   332d0:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   332d4:	689a      	ldr	r2, [r3, #8]
   332d6:	2a00      	cmp	r2, #0
   332d8:	d042      	beq.n	33360 <pdn_interface_setopt+0x130>
   332da:	689a      	ldr	r2, [r3, #8]
   332dc:	2a03      	cmp	r2, #3
   332de:	d03f      	beq.n	33360 <pdn_interface_setopt+0x130>
   332e0:	689b      	ldr	r3, [r3, #8]
   332e2:	2b04      	cmp	r3, #4
   332e4:	d03c      	beq.n	33360 <pdn_interface_setopt+0x130>
   332e6:	4620      	mov	r0, r4
   332e8:	f7ee f9c1 	bl	2166e <strlen>
   332ec:	f104 0a64 	add.w	sl, r4, #100	; 0x64
   332f0:	f100 0801 	add.w	r8, r0, #1
   332f4:	4650      	mov	r0, sl
   332f6:	f7ee f9ba 	bl	2166e <strlen>
   332fa:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   332fe:	f100 0901 	add.w	r9, r0, #1
   33302:	3b01      	subs	r3, #1
   33304:	2b01      	cmp	r3, #1
   33306:	d8c4      	bhi.n	33292 <pdn_interface_setopt+0x62>
   33308:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   3330c:	d8c1      	bhi.n	33292 <pdn_interface_setopt+0x62>
   3330e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   33312:	d8be      	bhi.n	33292 <pdn_interface_setopt+0x62>
   33314:	eb08 0009 	add.w	r0, r8, r9
   33318:	3020      	adds	r0, #32
   3331a:	f7f6 f985 	bl	29628 <nrf_modem_os_alloc>
   3331e:	4605      	mov	r5, r0
   33320:	b308      	cbz	r0, 33366 <pdn_interface_setopt+0x136>
   33322:	2220      	movs	r2, #32
   33324:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   33328:	f00a f9a0 	bl	3d66c <memcpy>
   3332c:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   33330:	f7f6 f982 	bl	29638 <nrf_modem_os_free>
   33334:	e9c5 8905 	strd	r8, r9, [r5, #20]
   33338:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   3333c:	4641      	mov	r1, r8
   3333e:	4a0c      	ldr	r2, [pc, #48]	; (33370 <pdn_interface_setopt+0x140>)
   33340:	742b      	strb	r3, [r5, #16]
   33342:	f105 0020 	add.w	r0, r5, #32
   33346:	4623      	mov	r3, r4
   33348:	f004 fe88 	bl	3805c <sniprintf>
   3334c:	3021      	adds	r0, #33	; 0x21
   3334e:	4653      	mov	r3, sl
   33350:	4a07      	ldr	r2, [pc, #28]	; (33370 <pdn_interface_setopt+0x140>)
   33352:	69a9      	ldr	r1, [r5, #24]
   33354:	4428      	add	r0, r5
   33356:	f004 fe81 	bl	3805c <sniprintf>
   3335a:	f847 5026 	str.w	r5, [r7, r6, lsl #2]
   3335e:	e7a2      	b.n	332a6 <pdn_interface_setopt+0x76>
   33360:	f06f 000d 	mvn.w	r0, #13
   33364:	e781      	b.n	3326a <pdn_interface_setopt+0x3a>
   33366:	f06f 000b 	mvn.w	r0, #11
   3336a:	e77e      	b.n	3326a <pdn_interface_setopt+0x3a>
   3336c:	20017f2c 	.word	0x20017f2c
   33370:	00040987 	.word	0x00040987

00033374 <pdn_interface_getopt>:
   33374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33378:	461d      	mov	r5, r3
   3337a:	f240 2302 	movw	r3, #514	; 0x202
   3337e:	4299      	cmp	r1, r3
   33380:	4690      	mov	r8, r2
   33382:	9e06      	ldr	r6, [sp, #24]
   33384:	d101      	bne.n	3338a <pdn_interface_getopt+0x16>
   33386:	b105      	cbz	r5, 3338a <pdn_interface_getopt+0x16>
   33388:	b92e      	cbnz	r6, 33396 <pdn_interface_getopt+0x22>
   3338a:	2016      	movs	r0, #22
   3338c:	f7f5 ff5a 	bl	29244 <nrf_modem_os_errno_set>
   33390:	f04f 34ff 	mov.w	r4, #4294967295
   33394:	e034      	b.n	33400 <pdn_interface_getopt+0x8c>
   33396:	f7ff fc57 	bl	32c48 <handle_verify_and_covert>
   3339a:	1e07      	subs	r7, r0, #0
   3339c:	da01      	bge.n	333a2 <pdn_interface_getopt+0x2e>
   3339e:	4278      	negs	r0, r7
   333a0:	e7f4      	b.n	3338c <pdn_interface_getopt+0x18>
   333a2:	f1b8 0f02 	cmp.w	r8, #2
   333a6:	d02e      	beq.n	33406 <pdn_interface_getopt+0x92>
   333a8:	f1b8 0f03 	cmp.w	r8, #3
   333ac:	d035      	beq.n	3341a <pdn_interface_getopt+0xa6>
   333ae:	f1b8 0f01 	cmp.w	r8, #1
   333b2:	d149      	bne.n	33448 <pdn_interface_getopt+0xd4>
   333b4:	4b2b      	ldr	r3, [pc, #172]	; (33464 <pdn_interface_getopt+0xf0>)
   333b6:	6831      	ldr	r1, [r6, #0]
   333b8:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   333bc:	689a      	ldr	r2, [r3, #8]
   333be:	2a00      	cmp	r2, #0
   333c0:	d046      	beq.n	33450 <pdn_interface_getopt+0xdc>
   333c2:	689a      	ldr	r2, [r3, #8]
   333c4:	2a04      	cmp	r2, #4
   333c6:	d043      	beq.n	33450 <pdn_interface_getopt+0xdc>
   333c8:	2907      	cmp	r1, #7
   333ca:	f001 0203 	and.w	r2, r1, #3
   333ce:	d942      	bls.n	33456 <pdn_interface_getopt+0xe2>
   333d0:	2a00      	cmp	r2, #0
   333d2:	d140      	bne.n	33456 <pdn_interface_getopt+0xe2>
   333d4:	68db      	ldr	r3, [r3, #12]
   333d6:	0798      	lsls	r0, r3, #30
   333d8:	bf42      	ittt	mi
   333da:	220a      	movmi	r2, #10
   333dc:	602a      	strmi	r2, [r5, #0]
   333de:	2201      	movmi	r2, #1
   333e0:	07d9      	lsls	r1, r3, #31
   333e2:	bf42      	ittt	mi
   333e4:	2102      	movmi	r1, #2
   333e6:	f845 1022 	strmi.w	r1, [r5, r2, lsl #2]
   333ea:	3201      	addmi	r2, #1
   333ec:	f013 0f05 	tst.w	r3, #5
   333f0:	bf1e      	ittt	ne
   333f2:	2305      	movne	r3, #5
   333f4:	f845 3022 	strne.w	r3, [r5, r2, lsl #2]
   333f8:	3201      	addne	r2, #1
   333fa:	0092      	lsls	r2, r2, #2
   333fc:	6032      	str	r2, [r6, #0]
   333fe:	2400      	movs	r4, #0
   33400:	4620      	mov	r0, r4
   33402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33406:	6833      	ldr	r3, [r6, #0]
   33408:	b343      	cbz	r3, 3345c <pdn_interface_getopt+0xe8>
   3340a:	4b16      	ldr	r3, [pc, #88]	; (33464 <pdn_interface_getopt+0xf0>)
   3340c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   33410:	681b      	ldr	r3, [r3, #0]
   33412:	702b      	strb	r3, [r5, #0]
   33414:	2301      	movs	r3, #1
   33416:	6033      	str	r3, [r6, #0]
   33418:	e7f1      	b.n	333fe <pdn_interface_getopt+0x8a>
   3341a:	6833      	ldr	r3, [r6, #0]
   3341c:	b1f3      	cbz	r3, 3345c <pdn_interface_getopt+0xe8>
   3341e:	f44f 7180 	mov.w	r1, #256	; 0x100
   33422:	4b11      	ldr	r3, [pc, #68]	; (33468 <pdn_interface_getopt+0xf4>)
   33424:	4a11      	ldr	r2, [pc, #68]	; (3346c <pdn_interface_getopt+0xf8>)
   33426:	4812      	ldr	r0, [pc, #72]	; (33470 <pdn_interface_getopt+0xfc>)
   33428:	f004 fe18 	bl	3805c <sniprintf>
   3342c:	f7ff fc28 	bl	32c80 <command_write>
   33430:	4604      	mov	r4, r0
   33432:	b958      	cbnz	r0, 3344c <pdn_interface_getopt+0xd8>
   33434:	4641      	mov	r1, r8
   33436:	4638      	mov	r0, r7
   33438:	f7ff fc40 	bl	32cbc <event_wait>
   3343c:	2800      	cmp	r0, #0
   3343e:	db0f      	blt.n	33460 <pdn_interface_getopt+0xec>
   33440:	2301      	movs	r3, #1
   33442:	7028      	strb	r0, [r5, #0]
   33444:	6033      	str	r3, [r6, #0]
   33446:	e7db      	b.n	33400 <pdn_interface_getopt+0x8c>
   33448:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   3344c:	4260      	negs	r0, r4
   3344e:	e79d      	b.n	3338c <pdn_interface_getopt+0x18>
   33450:	f06f 040d 	mvn.w	r4, #13
   33454:	e7fa      	b.n	3344c <pdn_interface_getopt+0xd8>
   33456:	f06f 0415 	mvn.w	r4, #21
   3345a:	e7f7      	b.n	3344c <pdn_interface_getopt+0xd8>
   3345c:	2416      	movs	r4, #22
   3345e:	e7f5      	b.n	3344c <pdn_interface_getopt+0xd8>
   33460:	4604      	mov	r4, r0
   33462:	e7f3      	b.n	3344c <pdn_interface_getopt+0xd8>
   33464:	20017f2c 	.word	0x20017f2c
   33468:	000427ea 	.word	0x000427ea
   3346c:	00040987 	.word	0x00040987
   33470:	20019168 	.word	0x20019168

00033474 <pdn_interface_pdn_id_get>:
   33474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33478:	4607      	mov	r7, r0
   3347a:	4688      	mov	r8, r1
   3347c:	2900      	cmp	r1, #0
   3347e:	d04a      	beq.n	33516 <pdn_interface_pdn_id_get+0xa2>
   33480:	4c26      	ldr	r4, [pc, #152]	; (3351c <pdn_interface_pdn_id_get+0xa8>)
   33482:	2500      	movs	r5, #0
   33484:	4626      	mov	r6, r4
   33486:	f854 3b04 	ldr.w	r3, [r4], #4
   3348a:	2b00      	cmp	r3, #0
   3348c:	d040      	beq.n	33510 <pdn_interface_pdn_id_get+0x9c>
   3348e:	689b      	ldr	r3, [r3, #8]
   33490:	2b03      	cmp	r3, #3
   33492:	d13d      	bne.n	33510 <pdn_interface_pdn_id_get+0x9c>
   33494:	4640      	mov	r0, r8
   33496:	f7ee f8ea 	bl	2166e <strlen>
   3349a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   3349e:	69ca      	ldr	r2, [r1, #28]
   334a0:	4282      	cmp	r2, r0
   334a2:	d135      	bne.n	33510 <pdn_interface_pdn_id_get+0x9c>
   334a4:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
   334a8:	4403      	add	r3, r0
   334aa:	3320      	adds	r3, #32
   334ac:	4640      	mov	r0, r8
   334ae:	4419      	add	r1, r3
   334b0:	f00a fa48 	bl	3d944 <strncmp>
   334b4:	bb60      	cbnz	r0, 33510 <pdn_interface_pdn_id_get+0x9c>
   334b6:	2f0a      	cmp	r7, #10
   334b8:	d114      	bne.n	334e4 <pdn_interface_pdn_id_get+0x70>
   334ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   334be:	68db      	ldr	r3, [r3, #12]
   334c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   334c4:	b323      	cbz	r3, 33510 <pdn_interface_pdn_id_get+0x9c>
   334c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   334ca:	685c      	ldr	r4, [r3, #4]
   334cc:	3401      	adds	r4, #1
   334ce:	d11a      	bne.n	33506 <pdn_interface_pdn_id_get+0x92>
   334d0:	4628      	mov	r0, r5
   334d2:	f7ff fc8b 	bl	32dec <pdn_id_get>
   334d6:	b1b0      	cbz	r0, 33506 <pdn_interface_pdn_id_get+0x92>
   334d8:	4240      	negs	r0, r0
   334da:	f7f5 feb3 	bl	29244 <nrf_modem_os_errno_set>
   334de:	f04f 30ff 	mov.w	r0, #4294967295
   334e2:	e013      	b.n	3350c <pdn_interface_pdn_id_get+0x98>
   334e4:	2f02      	cmp	r7, #2
   334e6:	d105      	bne.n	334f4 <pdn_interface_pdn_id_get+0x80>
   334e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   334ec:	68db      	ldr	r3, [r3, #12]
   334ee:	f003 0301 	and.w	r3, r3, #1
   334f2:	e7e7      	b.n	334c4 <pdn_interface_pdn_id_get+0x50>
   334f4:	2f05      	cmp	r7, #5
   334f6:	d10b      	bne.n	33510 <pdn_interface_pdn_id_get+0x9c>
   334f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   334fc:	68db      	ldr	r3, [r3, #12]
   334fe:	3b00      	subs	r3, #0
   33500:	bf18      	it	ne
   33502:	2301      	movne	r3, #1
   33504:	e7de      	b.n	334c4 <pdn_interface_pdn_id_get+0x50>
   33506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   3350a:	6858      	ldr	r0, [r3, #4]
   3350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33510:	3501      	adds	r5, #1
   33512:	2d0a      	cmp	r5, #10
   33514:	d1b7      	bne.n	33486 <pdn_interface_pdn_id_get+0x12>
   33516:	2016      	movs	r0, #22
   33518:	e7df      	b.n	334da <pdn_interface_pdn_id_get+0x66>
   3351a:	bf00      	nop
   3351c:	20017f2c 	.word	0x20017f2c

00033520 <full_dfu_ipc_irq_handler>:
   33520:	2301      	movs	r3, #1
   33522:	4a03      	ldr	r2, [pc, #12]	; (33530 <full_dfu_ipc_irq_handler+0x10>)
   33524:	6013      	str	r3, [r2, #0]
   33526:	07c2      	lsls	r2, r0, #31
   33528:	bf44      	itt	mi
   3352a:	4a02      	ldrmi	r2, [pc, #8]	; (33534 <full_dfu_ipc_irq_handler+0x14>)
   3352c:	7013      	strbmi	r3, [r2, #0]
   3352e:	4770      	bx	lr
   33530:	20017f54 	.word	0x20017f54
   33534:	20019268 	.word	0x20019268

00033538 <modem_ipc_wait_for_event>:
   33538:	b538      	push	{r3, r4, r5, lr}
   3353a:	2300      	movs	r3, #0
   3353c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   33540:	4c0a      	ldr	r4, [pc, #40]	; (3356c <modem_ipc_wait_for_event+0x34>)
   33542:	6023      	str	r3, [r4, #0]
   33544:	6823      	ldr	r3, [r4, #0]
   33546:	b92b      	cbnz	r3, 33554 <modem_ipc_wait_for_event+0x1c>
   33548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3354c:	f007 fdd5 	bl	3b0fa <nrf_modem_os_busywait>
   33550:	3d01      	subs	r5, #1
   33552:	d1f7      	bne.n	33544 <modem_ipc_wait_for_event+0xc>
   33554:	6823      	ldr	r3, [r4, #0]
   33556:	b90b      	cbnz	r3, 3355c <modem_ipc_wait_for_event+0x24>
   33558:	203c      	movs	r0, #60	; 0x3c
   3355a:	e005      	b.n	33568 <modem_ipc_wait_for_event+0x30>
   3355c:	4b04      	ldr	r3, [pc, #16]	; (33570 <modem_ipc_wait_for_event+0x38>)
   3355e:	781b      	ldrb	r3, [r3, #0]
   33560:	2b01      	cmp	r3, #1
   33562:	bf14      	ite	ne
   33564:	2000      	movne	r0, #0
   33566:	2005      	moveq	r0, #5
   33568:	bd38      	pop	{r3, r4, r5, pc}
   3356a:	bf00      	nop
   3356c:	20017f54 	.word	0x20017f54
   33570:	20019268 	.word	0x20019268

00033574 <nrf_modem_full_dfu_setup>:
   33574:	2200      	movs	r2, #0
   33576:	2300      	movs	r3, #0
   33578:	b5f0      	push	{r4, r5, r6, r7, lr}
   3357a:	4d2d      	ldr	r5, [pc, #180]	; (33630 <nrf_modem_full_dfu_setup+0xbc>)
   3357c:	4f2d      	ldr	r7, [pc, #180]	; (33634 <nrf_modem_full_dfu_setup+0xc0>)
   3357e:	e9c5 2302 	strd	r2, r3, [r5, #8]
   33582:	e9c5 2304 	strd	r2, r3, [r5, #16]
   33586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3358a:	4b2b      	ldr	r3, [pc, #172]	; (33638 <nrf_modem_full_dfu_setup+0xc4>)
   3358c:	2400      	movs	r4, #0
   3358e:	601a      	str	r2, [r3, #0]
   33590:	f100 031c 	add.w	r3, r0, #28
   33594:	603b      	str	r3, [r7, #0]
   33596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3359a:	6043      	str	r3, [r0, #4]
   3359c:	231c      	movs	r3, #28
   3359e:	7203      	strb	r3, [r0, #8]
   335a0:	2320      	movs	r3, #32
   335a2:	2601      	movs	r6, #1
   335a4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   335a8:	7243      	strb	r3, [r0, #9]
   335aa:	4b24      	ldr	r3, [pc, #144]	; (3363c <nrf_modem_full_dfu_setup+0xc8>)
   335ac:	7086      	strb	r6, [r0, #2]
   335ae:	70c2      	strb	r2, [r0, #3]
   335b0:	7004      	strb	r4, [r0, #0]
   335b2:	7044      	strb	r4, [r0, #1]
   335b4:	7284      	strb	r4, [r0, #10]
   335b6:	72c4      	strb	r4, [r0, #11]
   335b8:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   335bc:	702c      	strb	r4, [r5, #0]
   335be:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   335c2:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   335c6:	4b1e      	ldr	r3, [pc, #120]	; (33640 <nrf_modem_full_dfu_setup+0xcc>)
   335c8:	b093      	sub	sp, #76	; 0x4c
   335ca:	4622      	mov	r2, r4
   335cc:	491d      	ldr	r1, [pc, #116]	; (33644 <nrf_modem_full_dfu_setup+0xd0>)
   335ce:	4620      	mov	r0, r4
   335d0:	701c      	strb	r4, [r3, #0]
   335d2:	f7f8 f8d5 	bl	2b780 <nrfx_ipc_init>
   335d6:	2240      	movs	r2, #64	; 0x40
   335d8:	4621      	mov	r1, r4
   335da:	a801      	add	r0, sp, #4
   335dc:	f00a f853 	bl	3d686 <memset>
   335e0:	2302      	movs	r3, #2
   335e2:	9302      	str	r3, [sp, #8]
   335e4:	2304      	movs	r3, #4
   335e6:	9609      	str	r6, [sp, #36]	; 0x24
   335e8:	2605      	movs	r6, #5
   335ea:	eb0d 0003 	add.w	r0, sp, r3
   335ee:	930b      	str	r3, [sp, #44]	; 0x2c
   335f0:	9611      	str	r6, [sp, #68]	; 0x44
   335f2:	f7f8 f8ed 	bl	2b7d0 <nrfx_ipc_config_load>
   335f6:	4b14      	ldr	r3, [pc, #80]	; (33648 <nrf_modem_full_dfu_setup+0xd4>)
   335f8:	9400      	str	r4, [sp, #0]
   335fa:	683f      	ldr	r7, [r7, #0]
   335fc:	601c      	str	r4, [r3, #0]
   335fe:	681b      	ldr	r3, [r3, #0]
   33600:	9300      	str	r3, [sp, #0]
   33602:	9b00      	ldr	r3, [sp, #0]
   33604:	f7ff ff98 	bl	33538 <modem_ipc_wait_for_event>
   33608:	4603      	mov	r3, r0
   3360a:	b150      	cbz	r0, 33622 <nrf_modem_full_dfu_setup+0xae>
   3360c:	2303      	movs	r3, #3
   3360e:	702b      	strb	r3, [r5, #0]
   33610:	f7f5 fe18 	bl	29244 <nrf_modem_os_errno_set>
   33614:	f7f8 f920 	bl	2b858 <nrfx_ipc_uninit>
   33618:	f04f 33ff 	mov.w	r3, #4294967295
   3361c:	4618      	mov	r0, r3
   3361e:	b013      	add	sp, #76	; 0x4c
   33620:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33622:	6839      	ldr	r1, [r7, #0]
   33624:	4a09      	ldr	r2, [pc, #36]	; (3364c <nrf_modem_full_dfu_setup+0xd8>)
   33626:	4291      	cmp	r1, r2
   33628:	d0f8      	beq.n	3361c <nrf_modem_full_dfu_setup+0xa8>
   3362a:	4630      	mov	r0, r6
   3362c:	e7f0      	b.n	33610 <nrf_modem_full_dfu_setup+0x9c>
   3362e:	bf00      	nop
   33630:	200154d8 	.word	0x200154d8
   33634:	20017f58 	.word	0x20017f58
   33638:	20017f5c 	.word	0x20017f5c
   3363c:	4002a000 	.word	0x4002a000
   33640:	20019268 	.word	0x20019268
   33644:	00033521 	.word	0x00033521
   33648:	40005610 	.word	0x40005610
   3364c:	a5000001 	.word	0xa5000001

00033650 <packet_handler_create>:
   33650:	2801      	cmp	r0, #1
   33652:	b570      	push	{r4, r5, r6, lr}
   33654:	4604      	mov	r4, r0
   33656:	460e      	mov	r6, r1
   33658:	4615      	mov	r5, r2
   3365a:	d00f      	beq.n	3367c <packet_handler_create+0x2c>
   3365c:	1e84      	subs	r4, r0, #2
   3365e:	2c01      	cmp	r4, #1
   33660:	d810      	bhi.n	33684 <packet_handler_create+0x34>
   33662:	2010      	movs	r0, #16
   33664:	f7f5 ffe0 	bl	29628 <nrf_modem_os_alloc>
   33668:	2400      	movs	r4, #0
   3366a:	b130      	cbz	r0, 3367a <packet_handler_create+0x2a>
   3366c:	2218      	movs	r2, #24
   3366e:	4b08      	ldr	r3, [pc, #32]	; (33690 <packet_handler_create+0x40>)
   33670:	6085      	str	r5, [r0, #8]
   33672:	fb02 3404 	mla	r4, r2, r4, r3
   33676:	e9c0 4600 	strd	r4, r6, [r0]
   3367a:	bd70      	pop	{r4, r5, r6, pc}
   3367c:	2014      	movs	r0, #20
   3367e:	f7f5 ffd3 	bl	29628 <nrf_modem_os_alloc>
   33682:	e7f2      	b.n	3366a <packet_handler_create+0x1a>
   33684:	200c      	movs	r0, #12
   33686:	f7f5 ffcf 	bl	29628 <nrf_modem_os_alloc>
   3368a:	2402      	movs	r4, #2
   3368c:	e7ed      	b.n	3366a <packet_handler_create+0x1a>
   3368e:	bf00      	nop
   33690:	0003ec18 	.word	0x0003ec18

00033694 <modem_off>:
   33694:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33696:	2501      	movs	r5, #1
   33698:	4c07      	ldr	r4, [pc, #28]	; (336b8 <modem_off+0x24>)
   3369a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   3369e:	6065      	str	r5, [r4, #4]
   336a0:	f007 fd2b 	bl	3b0fa <nrf_modem_os_busywait>
   336a4:	2300      	movs	r3, #0
   336a6:	6063      	str	r3, [r4, #4]
   336a8:	9301      	str	r3, [sp, #4]
   336aa:	6025      	str	r5, [r4, #0]
   336ac:	6823      	ldr	r3, [r4, #0]
   336ae:	9301      	str	r3, [sp, #4]
   336b0:	9b01      	ldr	r3, [sp, #4]
   336b2:	b003      	add	sp, #12
   336b4:	bd30      	pop	{r4, r5, pc}
   336b6:	bf00      	nop
   336b8:	40005610 	.word	0x40005610

000336bc <nrf_modem_init>:
   336bc:	b570      	push	{r4, r5, r6, lr}
   336be:	460d      	mov	r5, r1
   336c0:	b300      	cbz	r0, 33704 <nrf_modem_init+0x48>
   336c2:	4e13      	ldr	r6, [pc, #76]	; (33710 <nrf_modem_init+0x54>)
   336c4:	7832      	ldrb	r2, [r6, #0]
   336c6:	b9ea      	cbnz	r2, 33704 <nrf_modem_init+0x48>
   336c8:	2901      	cmp	r1, #1
   336ca:	d113      	bne.n	336f4 <nrf_modem_init+0x38>
   336cc:	68c1      	ldr	r1, [r0, #12]
   336ce:	6842      	ldr	r2, [r0, #4]
   336d0:	440a      	add	r2, r1
   336d2:	6941      	ldr	r1, [r0, #20]
   336d4:	440a      	add	r2, r1
   336d6:	69c1      	ldr	r1, [r0, #28]
   336d8:	440a      	add	r2, r1
   336da:	f242 011b 	movw	r1, #8219	; 0x201b
   336de:	428a      	cmp	r2, r1
   336e0:	d913      	bls.n	3370a <nrf_modem_init+0x4e>
   336e2:	6800      	ldr	r0, [r0, #0]
   336e4:	f7ff ff46 	bl	33574 <nrf_modem_full_dfu_setup>
   336e8:	4604      	mov	r4, r0
   336ea:	b130      	cbz	r0, 336fa <nrf_modem_init+0x3e>
   336ec:	f7ff ffd2 	bl	33694 <modem_off>
   336f0:	4620      	mov	r0, r4
   336f2:	bd70      	pop	{r4, r5, r6, pc}
   336f4:	f009 fca1 	bl	3d03a <nrf_modem_platform_init>
   336f8:	e7f6      	b.n	336e8 <nrf_modem_init+0x2c>
   336fa:	4b06      	ldr	r3, [pc, #24]	; (33714 <nrf_modem_init+0x58>)
   336fc:	701d      	strb	r5, [r3, #0]
   336fe:	2301      	movs	r3, #1
   33700:	7033      	strb	r3, [r6, #0]
   33702:	e7f5      	b.n	336f0 <nrf_modem_init+0x34>
   33704:	f04f 34ff 	mov.w	r4, #4294967295
   33708:	e7f2      	b.n	336f0 <nrf_modem_init+0x34>
   3370a:	240c      	movs	r4, #12
   3370c:	e7f0      	b.n	336f0 <nrf_modem_init+0x34>
   3370e:	bf00      	nop
   33710:	20019269 	.word	0x20019269
   33714:	2001926a 	.word	0x2001926a

00033718 <nrf_modem_platform_af_method_table_get>:
   33718:	280a      	cmp	r0, #10
   3371a:	b508      	push	{r3, lr}
   3371c:	d80b      	bhi.n	33736 <nrf_modem_platform_af_method_table_get+0x1e>
   3371e:	2800      	cmp	r0, #0
   33720:	d036      	beq.n	33790 <nrf_modem_platform_af_method_table_get+0x78>
   33722:	3801      	subs	r0, #1
   33724:	2809      	cmp	r0, #9
   33726:	d833      	bhi.n	33790 <nrf_modem_platform_af_method_table_get+0x78>
   33728:	e8df f000 	tbb	[pc, r0]
   3372c:	32321429 	.word	0x32321429
   33730:	32323224 	.word	0x32323224
   33734:	1432      	.short	0x1432
   33736:	2866      	cmp	r0, #102	; 0x66
   33738:	d12a      	bne.n	33790 <nrf_modem_platform_af_method_table_get+0x78>
   3373a:	f240 2301 	movw	r3, #513	; 0x201
   3373e:	429a      	cmp	r2, r3
   33740:	d028      	beq.n	33794 <nrf_modem_platform_af_method_table_get+0x7c>
   33742:	f240 2302 	movw	r3, #514	; 0x202
   33746:	429a      	cmp	r2, r3
   33748:	d026      	beq.n	33798 <nrf_modem_platform_af_method_table_get+0x80>
   3374a:	202b      	movs	r0, #43	; 0x2b
   3374c:	f7f5 fd7a 	bl	29244 <nrf_modem_os_errno_set>
   33750:	2000      	movs	r0, #0
   33752:	e009      	b.n	33768 <nrf_modem_platform_af_method_table_get+0x50>
   33754:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   33758:	d207      	bcs.n	3376a <nrf_modem_platform_af_method_table_get+0x52>
   3375a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   3375e:	d207      	bcs.n	33770 <nrf_modem_platform_af_method_table_get+0x58>
   33760:	3a01      	subs	r2, #1
   33762:	2a01      	cmp	r2, #1
   33764:	d8f1      	bhi.n	3374a <nrf_modem_platform_af_method_table_get+0x32>
   33766:	480e      	ldr	r0, [pc, #56]	; (337a0 <nrf_modem_platform_af_method_table_get+0x88>)
   33768:	bd08      	pop	{r3, pc}
   3376a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   3376e:	d1ec      	bne.n	3374a <nrf_modem_platform_af_method_table_get+0x32>
   33770:	480c      	ldr	r0, [pc, #48]	; (337a4 <nrf_modem_platform_af_method_table_get+0x8c>)
   33772:	e7f9      	b.n	33768 <nrf_modem_platform_af_method_table_get+0x50>
   33774:	2903      	cmp	r1, #3
   33776:	480c      	ldr	r0, [pc, #48]	; (337a8 <nrf_modem_platform_af_method_table_get+0x90>)
   33778:	bf18      	it	ne
   3377a:	2000      	movne	r0, #0
   3377c:	e7f4      	b.n	33768 <nrf_modem_platform_af_method_table_get+0x50>
   3377e:	f240 2303 	movw	r3, #515	; 0x203
   33782:	429a      	cmp	r2, r3
   33784:	d00a      	beq.n	3379c <nrf_modem_platform_af_method_table_get+0x84>
   33786:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   3378a:	d1de      	bne.n	3374a <nrf_modem_platform_af_method_table_get+0x32>
   3378c:	4807      	ldr	r0, [pc, #28]	; (337ac <nrf_modem_platform_af_method_table_get+0x94>)
   3378e:	e7eb      	b.n	33768 <nrf_modem_platform_af_method_table_get+0x50>
   33790:	2016      	movs	r0, #22
   33792:	e7db      	b.n	3374c <nrf_modem_platform_af_method_table_get+0x34>
   33794:	4806      	ldr	r0, [pc, #24]	; (337b0 <nrf_modem_platform_af_method_table_get+0x98>)
   33796:	e7e7      	b.n	33768 <nrf_modem_platform_af_method_table_get+0x50>
   33798:	4806      	ldr	r0, [pc, #24]	; (337b4 <nrf_modem_platform_af_method_table_get+0x9c>)
   3379a:	e7e5      	b.n	33768 <nrf_modem_platform_af_method_table_get+0x50>
   3379c:	4806      	ldr	r0, [pc, #24]	; (337b8 <nrf_modem_platform_af_method_table_get+0xa0>)
   3379e:	e7e3      	b.n	33768 <nrf_modem_platform_af_method_table_get+0x50>
   337a0:	0003ec88 	.word	0x0003ec88
   337a4:	0003ecb0 	.word	0x0003ecb0
   337a8:	0003ed50 	.word	0x0003ed50
   337ac:	0003ed28 	.word	0x0003ed28
   337b0:	0003ec60 	.word	0x0003ec60
   337b4:	0003ed00 	.word	0x0003ed00
   337b8:	0003ecd8 	.word	0x0003ecd8

000337bc <nrf_modem_platform_fd_method_table_get>:
   337bc:	b538      	push	{r3, r4, r5, lr}
   337be:	4605      	mov	r5, r0
   337c0:	f7fc fe3e 	bl	30440 <interface_socket_from_handle_get>
   337c4:	4604      	mov	r4, r0
   337c6:	b130      	cbz	r0, 337d6 <nrf_modem_platform_fd_method_table_get+0x1a>
   337c8:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   337cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   337d0:	68c0      	ldr	r0, [r0, #12]
   337d2:	f7ff bfa1 	b.w	33718 <nrf_modem_platform_af_method_table_get>
   337d6:	4b0b      	ldr	r3, [pc, #44]	; (33804 <nrf_modem_platform_fd_method_table_get+0x48>)
   337d8:	429d      	cmp	r5, r3
   337da:	d00c      	beq.n	337f6 <nrf_modem_platform_fd_method_table_get+0x3a>
   337dc:	4a0a      	ldr	r2, [pc, #40]	; (33808 <nrf_modem_platform_fd_method_table_get+0x4c>)
   337de:	0c2b      	lsrs	r3, r5, #16
   337e0:	041b      	lsls	r3, r3, #16
   337e2:	4293      	cmp	r3, r2
   337e4:	d009      	beq.n	337fa <nrf_modem_platform_fd_method_table_get+0x3e>
   337e6:	4b09      	ldr	r3, [pc, #36]	; (3380c <nrf_modem_platform_fd_method_table_get+0x50>)
   337e8:	429d      	cmp	r5, r3
   337ea:	d008      	beq.n	337fe <nrf_modem_platform_fd_method_table_get+0x42>
   337ec:	2009      	movs	r0, #9
   337ee:	f7f5 fd29 	bl	29244 <nrf_modem_os_errno_set>
   337f2:	4620      	mov	r0, r4
   337f4:	bd38      	pop	{r3, r4, r5, pc}
   337f6:	4c06      	ldr	r4, [pc, #24]	; (33810 <nrf_modem_platform_fd_method_table_get+0x54>)
   337f8:	e7fb      	b.n	337f2 <nrf_modem_platform_fd_method_table_get+0x36>
   337fa:	4c06      	ldr	r4, [pc, #24]	; (33814 <nrf_modem_platform_fd_method_table_get+0x58>)
   337fc:	e7f9      	b.n	337f2 <nrf_modem_platform_fd_method_table_get+0x36>
   337fe:	4c06      	ldr	r4, [pc, #24]	; (33818 <nrf_modem_platform_fd_method_table_get+0x5c>)
   33800:	e7f7      	b.n	337f2 <nrf_modem_platform_fd_method_table_get+0x36>
   33802:	bf00      	nop
   33804:	49765432 	.word	0x49765432
   33808:	789a0000 	.word	0x789a0000
   3380c:	49765443 	.word	0x49765443
   33810:	0003ecd8 	.word	0x0003ecd8
   33814:	0003ed00 	.word	0x0003ed00
   33818:	0003ed28 	.word	0x0003ed28

0003381c <nrf_modem_platform_fcntl>:
   3381c:	b508      	push	{r3, lr}
   3381e:	4b06      	ldr	r3, [pc, #24]	; (33838 <nrf_modem_platform_fcntl+0x1c>)
   33820:	4298      	cmp	r0, r3
   33822:	d003      	beq.n	3382c <nrf_modem_platform_fcntl+0x10>
   33824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33828:	f7fc be8a 	b.w	30540 <interface_socket_fcntl>
   3382c:	202d      	movs	r0, #45	; 0x2d
   3382e:	f7f5 fd09 	bl	29244 <nrf_modem_os_errno_set>
   33832:	f04f 30ff 	mov.w	r0, #4294967295
   33836:	bd08      	pop	{r3, pc}
   33838:	49765432 	.word	0x49765432

0003383c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3383c:	4b0e      	ldr	r3, [pc, #56]	; (33878 <z_sys_init_run_level+0x3c>)
{
   3383e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   33840:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   33844:	3001      	adds	r0, #1
   33846:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   3384a:	42a6      	cmp	r6, r4
   3384c:	d800      	bhi.n	33850 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   3384e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   33850:	e9d4 3500 	ldrd	r3, r5, [r4]
   33854:	4628      	mov	r0, r5
   33856:	4798      	blx	r3
		if (dev != NULL) {
   33858:	b165      	cbz	r5, 33874 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   3385a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   3385c:	b130      	cbz	r0, 3386c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   3385e:	2800      	cmp	r0, #0
   33860:	bfb8      	it	lt
   33862:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   33864:	28ff      	cmp	r0, #255	; 0xff
   33866:	bfa8      	it	ge
   33868:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   3386a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   3386c:	785a      	ldrb	r2, [r3, #1]
   3386e:	f042 0201 	orr.w	r2, r2, #1
   33872:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   33874:	3408      	adds	r4, #8
   33876:	e7e8      	b.n	3384a <z_sys_init_run_level+0xe>
   33878:	0003ed78 	.word	0x0003ed78

0003387c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   3387c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   3387e:	4605      	mov	r5, r0
   33880:	b910      	cbnz	r0, 33888 <z_impl_device_get_binding+0xc>
		return NULL;
   33882:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   33884:	4620      	mov	r0, r4
   33886:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   33888:	7803      	ldrb	r3, [r0, #0]
   3388a:	2b00      	cmp	r3, #0
   3388c:	d0f9      	beq.n	33882 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   3388e:	4c0e      	ldr	r4, [pc, #56]	; (338c8 <z_impl_device_get_binding+0x4c>)
   33890:	4e0e      	ldr	r6, [pc, #56]	; (338cc <z_impl_device_get_binding+0x50>)
   33892:	42b4      	cmp	r4, r6
   33894:	d108      	bne.n	338a8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   33896:	4c0c      	ldr	r4, [pc, #48]	; (338c8 <z_impl_device_get_binding+0x4c>)
   33898:	42b4      	cmp	r4, r6
   3389a:	d0f2      	beq.n	33882 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3389c:	4620      	mov	r0, r4
   3389e:	f009 fd66 	bl	3d36e <z_device_ready>
   338a2:	b950      	cbnz	r0, 338ba <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   338a4:	3418      	adds	r4, #24
   338a6:	e7f7      	b.n	33898 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   338a8:	4620      	mov	r0, r4
   338aa:	f009 fd60 	bl	3d36e <z_device_ready>
   338ae:	b110      	cbz	r0, 338b6 <z_impl_device_get_binding+0x3a>
   338b0:	6823      	ldr	r3, [r4, #0]
   338b2:	42ab      	cmp	r3, r5
   338b4:	d0e6      	beq.n	33884 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   338b6:	3418      	adds	r4, #24
   338b8:	e7eb      	b.n	33892 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   338ba:	4628      	mov	r0, r5
   338bc:	6821      	ldr	r1, [r4, #0]
   338be:	f7ed fecc 	bl	2165a <strcmp>
   338c2:	2800      	cmp	r0, #0
   338c4:	d1ee      	bne.n	338a4 <z_impl_device_get_binding+0x28>
   338c6:	e7dd      	b.n	33884 <z_impl_device_get_binding+0x8>
   338c8:	0003e11c 	.word	0x0003e11c
   338cc:	0003e254 	.word	0x0003e254

000338d0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   338d0:	4b01      	ldr	r3, [pc, #4]	; (338d8 <z_impl_z_errno+0x8>)
   338d2:	6898      	ldr	r0, [r3, #8]
}
   338d4:	3064      	adds	r0, #100	; 0x64
   338d6:	4770      	bx	lr
   338d8:	20017f60 	.word	0x20017f60

000338dc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   338dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   338e0:	4605      	mov	r5, r0
   338e2:	460f      	mov	r7, r1
	__asm__ volatile(
   338e4:	f04f 0320 	mov.w	r3, #32
   338e8:	f3ef 8811 	mrs	r8, BASEPRI
   338ec:	f383 8811 	msr	BASEPRI, r3
   338f0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   338f4:	f002 fcf6 	bl	362e4 <z_impl_k_current_get>
   338f8:	4c28      	ldr	r4, [pc, #160]	; (3399c <z_fatal_error+0xc0>)
   338fa:	4b29      	ldr	r3, [pc, #164]	; (339a0 <z_fatal_error+0xc4>)
   338fc:	2d04      	cmp	r5, #4
   338fe:	eba4 0403 	sub.w	r4, r4, r3
   33902:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   33906:	bf98      	it	ls
   33908:	4a26      	ldrls	r2, [pc, #152]	; (339a4 <z_fatal_error+0xc8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3390a:	ea4f 1484 	mov.w	r4, r4, lsl #6
   3390e:	f044 0301 	orr.w	r3, r4, #1
   33912:	4606      	mov	r6, r0
	switch (reason) {
   33914:	bf94      	ite	ls
   33916:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3391a:	4a23      	ldrhi	r2, [pc, #140]	; (339a8 <z_fatal_error+0xcc>)
   3391c:	f8ad 3000 	strh.w	r3, [sp]
   33920:	4629      	mov	r1, r5
   33922:	2300      	movs	r3, #0
   33924:	4821      	ldr	r0, [pc, #132]	; (339ac <z_fatal_error+0xd0>)
   33926:	f005 ff22 	bl	3976e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3392a:	b147      	cbz	r7, 3393e <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3392c:	69fb      	ldr	r3, [r7, #28]
   3392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   33932:	b123      	cbz	r3, 3393e <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   33934:	481e      	ldr	r0, [pc, #120]	; (339b0 <z_fatal_error+0xd4>)
   33936:	f044 0101 	orr.w	r1, r4, #1
   3393a:	f005 fede 	bl	396fa <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3393e:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   33942:	b12e      	cbz	r6, 33950 <z_fatal_error+0x74>
   33944:	4630      	mov	r0, r6
   33946:	f009 fd53 	bl	3d3f0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   3394a:	b108      	cbz	r0, 33950 <z_fatal_error+0x74>
   3394c:	7803      	ldrb	r3, [r0, #0]
   3394e:	b903      	cbnz	r3, 33952 <z_fatal_error+0x76>
		thread_name = "unknown";
   33950:	4818      	ldr	r0, [pc, #96]	; (339b4 <z_fatal_error+0xd8>)
   33952:	f7f0 fa81 	bl	23e58 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   33956:	4623      	mov	r3, r4
   33958:	4602      	mov	r2, r0
   3395a:	4631      	mov	r1, r6
   3395c:	4816      	ldr	r0, [pc, #88]	; (339b8 <z_fatal_error+0xdc>)
   3395e:	f005 feed 	bl	3973c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   33962:	4639      	mov	r1, r7
   33964:	4628      	mov	r0, r5
   33966:	f7f7 fb91 	bl	2b08c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   3396a:	2d04      	cmp	r5, #4
   3396c:	d10c      	bne.n	33988 <z_fatal_error+0xac>
   3396e:	4913      	ldr	r1, [pc, #76]	; (339bc <z_fatal_error+0xe0>)
   33970:	238f      	movs	r3, #143	; 0x8f
   33972:	4a13      	ldr	r2, [pc, #76]	; (339c0 <z_fatal_error+0xe4>)
   33974:	4813      	ldr	r0, [pc, #76]	; (339c4 <z_fatal_error+0xe8>)
   33976:	f005 fc20 	bl	391ba <printk>
   3397a:	4813      	ldr	r0, [pc, #76]	; (339c8 <z_fatal_error+0xec>)
   3397c:	f005 fc1d 	bl	391ba <printk>
   33980:	218f      	movs	r1, #143	; 0x8f
   33982:	480f      	ldr	r0, [pc, #60]	; (339c0 <z_fatal_error+0xe4>)
   33984:	f005 fe70 	bl	39668 <assert_post_action>
	__asm__ volatile(
   33988:	f388 8811 	msr	BASEPRI, r8
   3398c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   33990:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   33992:	b002      	add	sp, #8
   33994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33998:	f7f2 bbac 	b.w	260f4 <z_impl_k_thread_abort>
   3399c:	0003e540 	.word	0x0003e540
   339a0:	0003e468 	.word	0x0003e468
   339a4:	0003ed90 	.word	0x0003ed90
   339a8:	0004281f 	.word	0x0004281f
   339ac:	00042835 	.word	0x00042835
   339b0:	0004285d 	.word	0x0004285d
   339b4:	0004282d 	.word	0x0004282d
   339b8:	0004287e 	.word	0x0004287e
   339bc:	000428b8 	.word	0x000428b8
   339c0:	00042896 	.word	0x00042896
   339c4:	0003f0e1 	.word	0x0003f0e1
   339c8:	000428d5 	.word	0x000428d5

000339cc <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   339cc:	4802      	ldr	r0, [pc, #8]	; (339d8 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   339ce:	4a03      	ldr	r2, [pc, #12]	; (339dc <z_bss_zero+0x10>)
   339d0:	2100      	movs	r1, #0
   339d2:	1a12      	subs	r2, r2, r0
   339d4:	f009 be57 	b.w	3d686 <memset>
   339d8:	20014be0 	.word	0x20014be0
   339dc:	20019270 	.word	0x20019270

000339e0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   339e0:	2201      	movs	r2, #1
{
   339e2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   339e4:	4b09      	ldr	r3, [pc, #36]	; (33a0c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   339e6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   339e8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   339ea:	f7ff ff27 	bl	3383c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   339ee:	f003 fd8b 	bl	37508 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   339f2:	2003      	movs	r0, #3
   339f4:	f7ff ff22 	bl	3383c <z_sys_init_run_level>

	z_init_static_threads();
   339f8:	f000 fb74 	bl	340e4 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   339fc:	f005 fb9f 	bl	3913e <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   33a00:	4a03      	ldr	r2, [pc, #12]	; (33a10 <bg_thread_main+0x30>)
   33a02:	7b13      	ldrb	r3, [r2, #12]
   33a04:	f023 0301 	bic.w	r3, r3, #1
   33a08:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   33a0a:	bd08      	pop	{r3, pc}
   33a0c:	2001926b 	.word	0x2001926b
   33a10:	20015570 	.word	0x20015570

00033a14 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   33a14:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   33a18:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   33a1a:	f7f0 f939 	bl	23c90 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   33a1e:	4b37      	ldr	r3, [pc, #220]	; (33afc <z_cstart+0xe8>)
	uint32_t msp =
   33a20:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   33a24:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   33a28:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   33a2c:	2400      	movs	r4, #0
   33a2e:	23e0      	movs	r3, #224	; 0xe0
   33a30:	4d33      	ldr	r5, [pc, #204]	; (33b00 <z_cstart+0xec>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   33a32:	f04f 0b01 	mov.w	fp, #1
   33a36:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   33a3a:	77ec      	strb	r4, [r5, #31]
   33a3c:	762c      	strb	r4, [r5, #24]
   33a3e:	766c      	strb	r4, [r5, #25]
   33a40:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   33a42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   33a44:	4e2f      	ldr	r6, [pc, #188]	; (33b04 <z_cstart+0xf0>)
   33a46:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   33a4a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   33a4c:	f7f2 fae2 	bl	26014 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   33a50:	f7f1 ffca 	bl	259e8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   33a54:	f04f 33ff 	mov.w	r3, #4294967295
   33a58:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   33a5a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   33a5c:	f7f2 fd1e 	bl	2649c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   33a60:	f7f2 fb5a 	bl	26118 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   33a64:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   33a68:	4d27      	ldr	r5, [pc, #156]	; (33b08 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   33a6a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   33a6e:	ab06      	add	r3, sp, #24
   33a70:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   33a72:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   33a76:	f009 fc79 	bl	3d36c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   33a7a:	4620      	mov	r0, r4
   33a7c:	f7ff fede 	bl	3383c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   33a80:	2001      	movs	r0, #1
   33a82:	f7ff fedb 	bl	3383c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   33a86:	f8df a084 	ldr.w	sl, [pc, #132]	; 33b0c <z_cstart+0xf8>
	z_sched_init();
   33a8a:	f002 fa9b 	bl	35fc4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   33a8e:	4b20      	ldr	r3, [pc, #128]	; (33b10 <z_cstart+0xfc>)
	_kernel.ready_q.cache = &z_main_thread;
   33a90:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   33a92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   33a96:	491f      	ldr	r1, [pc, #124]	; (33b14 <z_cstart+0x100>)
   33a98:	9305      	str	r3, [sp, #20]
   33a9a:	4630      	mov	r0, r6
   33a9c:	4653      	mov	r3, sl
   33a9e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   33aa2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   33aa6:	9400      	str	r4, [sp, #0]
   33aa8:	f000 fa6c 	bl	33f84 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   33aac:	7b73      	ldrb	r3, [r6, #13]
   33aae:	4680      	mov	r8, r0
   33ab0:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   33ab4:	4630      	mov	r0, r6
   33ab6:	7373      	strb	r3, [r6, #13]
   33ab8:	f001 fc2a 	bl	35310 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   33abc:	230f      	movs	r3, #15
   33abe:	4f16      	ldr	r7, [pc, #88]	; (33b18 <z_cstart+0x104>)
   33ac0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   33ac4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   33ac8:	4914      	ldr	r1, [pc, #80]	; (33b1c <z_cstart+0x108>)
   33aca:	4b15      	ldr	r3, [pc, #84]	; (33b20 <z_cstart+0x10c>)
   33acc:	4638      	mov	r0, r7
   33ace:	e9cd b404 	strd	fp, r4, [sp, #16]
   33ad2:	e9cd 5400 	strd	r5, r4, [sp]
   33ad6:	f000 fa55 	bl	33f84 <z_setup_new_thread>
   33ada:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   33adc:	4652      	mov	r2, sl
   33ade:	f023 0304 	bic.w	r3, r3, #4
   33ae2:	737b      	strb	r3, [r7, #13]
   33ae4:	4641      	mov	r1, r8
	list->head = (sys_dnode_t *)list;
   33ae6:	f105 0318 	add.w	r3, r5, #24
   33aea:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   33aec:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   33af0:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   33af2:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   33af4:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   33af8:	f7f1 ff62 	bl	259c0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   33afc:	2001b070 	.word	0x2001b070
   33b00:	e000ed00 	.word	0xe000ed00
   33b04:	20015570 	.word	0x20015570
   33b08:	20017f60 	.word	0x20017f60
   33b0c:	000339e1 	.word	0x000339e1
   33b10:	00042954 	.word	0x00042954
   33b14:	2001a070 	.word	0x2001a070
   33b18:	200154f0 	.word	0x200154f0
   33b1c:	20019f30 	.word	0x20019f30
   33b20:	0003423d 	.word	0x0003423d

00033b24 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   33b24:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   33b26:	4c0e      	ldr	r4, [pc, #56]	; (33b60 <statics_init+0x3c>)
   33b28:	4d0e      	ldr	r5, [pc, #56]	; (33b64 <statics_init+0x40>)
   33b2a:	4e0f      	ldr	r6, [pc, #60]	; (33b68 <statics_init+0x44>)
   33b2c:	42ac      	cmp	r4, r5
   33b2e:	d90c      	bls.n	33b4a <statics_init+0x26>
   33b30:	490e      	ldr	r1, [pc, #56]	; (33b6c <statics_init+0x48>)
   33b32:	2317      	movs	r3, #23
   33b34:	4632      	mov	r2, r6
   33b36:	480e      	ldr	r0, [pc, #56]	; (33b70 <statics_init+0x4c>)
   33b38:	f005 fb3f 	bl	391ba <printk>
   33b3c:	480d      	ldr	r0, [pc, #52]	; (33b74 <statics_init+0x50>)
   33b3e:	f005 fb3c 	bl	391ba <printk>
   33b42:	2117      	movs	r1, #23
   33b44:	4630      	mov	r0, r6
   33b46:	f005 fd8f 	bl	39668 <assert_post_action>
   33b4a:	42ac      	cmp	r4, r5
   33b4c:	d301      	bcc.n	33b52 <statics_init+0x2e>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   33b4e:	2000      	movs	r0, #0
   33b50:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   33b52:	4620      	mov	r0, r4
   33b54:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   33b58:	f009 fc13 	bl	3d382 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   33b5c:	3418      	adds	r4, #24
   33b5e:	e7e5      	b.n	33b2c <statics_init+0x8>
   33b60:	20014a18 	.word	0x20014a18
   33b64:	20014a60 	.word	0x20014a60
   33b68:	0004295c 	.word	0x0004295c
   33b6c:	0004297e 	.word	0x0004297e
   33b70:	0003f0e1 	.word	0x0003f0e1
   33b74:	0003f746 	.word	0x0003f746

00033b78 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   33b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b7c:	b085      	sub	sp, #20
   33b7e:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
   33b82:	4606      	mov	r6, r0
   33b84:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   33b86:	4648      	mov	r0, r9
   33b88:	4641      	mov	r1, r8
{
   33b8a:	4693      	mov	fp, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   33b8c:	f009 fca5 	bl	3d4da <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   33b90:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   33b94:	4682      	mov	sl, r0
   33b96:	460f      	mov	r7, r1
	__asm__ volatile(
   33b98:	f04f 0320 	mov.w	r3, #32
   33b9c:	f3ef 8511 	mrs	r5, BASEPRI
   33ba0:	f383 8811 	msr	BASEPRI, r3
   33ba4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33ba8:	4620      	mov	r0, r4
   33baa:	f000 fb23 	bl	341f4 <z_spin_lock_valid>
   33bae:	b968      	cbnz	r0, 33bcc <k_heap_aligned_alloc+0x54>
   33bb0:	2381      	movs	r3, #129	; 0x81
   33bb2:	4a3c      	ldr	r2, [pc, #240]	; (33ca4 <k_heap_aligned_alloc+0x12c>)
   33bb4:	493c      	ldr	r1, [pc, #240]	; (33ca8 <k_heap_aligned_alloc+0x130>)
   33bb6:	483d      	ldr	r0, [pc, #244]	; (33cac <k_heap_aligned_alloc+0x134>)
   33bb8:	f005 faff 	bl	391ba <printk>
   33bbc:	4621      	mov	r1, r4
   33bbe:	483c      	ldr	r0, [pc, #240]	; (33cb0 <k_heap_aligned_alloc+0x138>)
   33bc0:	f005 fafb 	bl	391ba <printk>
   33bc4:	2181      	movs	r1, #129	; 0x81
   33bc6:	4837      	ldr	r0, [pc, #220]	; (33ca4 <k_heap_aligned_alloc+0x12c>)
   33bc8:	f005 fd4e 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   33bcc:	4620      	mov	r0, r4
   33bce:	f000 fb2d 	bl	3422c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   33bd2:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   33bd6:	b17b      	cbz	r3, 33bf8 <k_heap_aligned_alloc+0x80>
   33bd8:	ea59 0808 	orrs.w	r8, r9, r8
   33bdc:	d00c      	beq.n	33bf8 <k_heap_aligned_alloc+0x80>
   33bde:	4935      	ldr	r1, [pc, #212]	; (33cb4 <k_heap_aligned_alloc+0x13c>)
   33be0:	2328      	movs	r3, #40	; 0x28
   33be2:	4a35      	ldr	r2, [pc, #212]	; (33cb8 <k_heap_aligned_alloc+0x140>)
   33be4:	4831      	ldr	r0, [pc, #196]	; (33cac <k_heap_aligned_alloc+0x134>)
   33be6:	f005 fae8 	bl	391ba <printk>
   33bea:	4834      	ldr	r0, [pc, #208]	; (33cbc <k_heap_aligned_alloc+0x144>)
   33bec:	f005 fae5 	bl	391ba <printk>
   33bf0:	2128      	movs	r1, #40	; 0x28
   33bf2:	4831      	ldr	r0, [pc, #196]	; (33cb8 <k_heap_aligned_alloc+0x140>)
   33bf4:	f005 fd38 	bl	39668 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33bf8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 33ca4 <k_heap_aligned_alloc+0x12c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   33bfc:	465a      	mov	r2, fp
   33bfe:	4630      	mov	r0, r6
   33c00:	9903      	ldr	r1, [sp, #12]
   33c02:	f7ef fa8d 	bl	23120 <sys_heap_aligned_alloc>
   33c06:	4680      	mov	r8, r0

		now = sys_clock_tick_get();
   33c08:	f002 ff76 	bl	36af8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   33c0c:	f1b8 0f00 	cmp.w	r8, #0
   33c10:	d019      	beq.n	33c46 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33c12:	4620      	mov	r0, r4
   33c14:	f000 fafc 	bl	34210 <z_spin_unlock_valid>
   33c18:	b968      	cbnz	r0, 33c36 <k_heap_aligned_alloc+0xbe>
   33c1a:	23ac      	movs	r3, #172	; 0xac
   33c1c:	4a21      	ldr	r2, [pc, #132]	; (33ca4 <k_heap_aligned_alloc+0x12c>)
   33c1e:	4928      	ldr	r1, [pc, #160]	; (33cc0 <k_heap_aligned_alloc+0x148>)
   33c20:	4822      	ldr	r0, [pc, #136]	; (33cac <k_heap_aligned_alloc+0x134>)
   33c22:	f005 faca 	bl	391ba <printk>
   33c26:	4621      	mov	r1, r4
   33c28:	4826      	ldr	r0, [pc, #152]	; (33cc4 <k_heap_aligned_alloc+0x14c>)
   33c2a:	f005 fac6 	bl	391ba <printk>
   33c2e:	21ac      	movs	r1, #172	; 0xac
   33c30:	481c      	ldr	r0, [pc, #112]	; (33ca4 <k_heap_aligned_alloc+0x12c>)
   33c32:	f005 fd19 	bl	39668 <assert_post_action>
	__asm__ volatile(
   33c36:	f385 8811 	msr	BASEPRI, r5
   33c3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   33c3e:	4640      	mov	r0, r8
   33c40:	b005      	add	sp, #20
   33c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   33c46:	ebba 0000 	subs.w	r0, sl, r0
   33c4a:	eb67 0101 	sbc.w	r1, r7, r1
   33c4e:	2801      	cmp	r0, #1
   33c50:	f171 0300 	sbcs.w	r3, r1, #0
   33c54:	dbdd      	blt.n	33c12 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   33c56:	e9cd 0100 	strd	r0, r1, [sp]
   33c5a:	f106 020c 	add.w	r2, r6, #12
   33c5e:	4629      	mov	r1, r5
   33c60:	4620      	mov	r0, r4
   33c62:	f001 fe49 	bl	358f8 <z_pend_curr>
	__asm__ volatile(
   33c66:	f04f 0320 	mov.w	r3, #32
   33c6a:	f3ef 8511 	mrs	r5, BASEPRI
   33c6e:	f383 8811 	msr	BASEPRI, r3
   33c72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33c76:	4620      	mov	r0, r4
   33c78:	f000 fabc 	bl	341f4 <z_spin_lock_valid>
   33c7c:	b968      	cbnz	r0, 33c9a <k_heap_aligned_alloc+0x122>
   33c7e:	2381      	movs	r3, #129	; 0x81
   33c80:	464a      	mov	r2, r9
   33c82:	4909      	ldr	r1, [pc, #36]	; (33ca8 <k_heap_aligned_alloc+0x130>)
   33c84:	4809      	ldr	r0, [pc, #36]	; (33cac <k_heap_aligned_alloc+0x134>)
   33c86:	f005 fa98 	bl	391ba <printk>
   33c8a:	4621      	mov	r1, r4
   33c8c:	4808      	ldr	r0, [pc, #32]	; (33cb0 <k_heap_aligned_alloc+0x138>)
   33c8e:	f005 fa94 	bl	391ba <printk>
   33c92:	2181      	movs	r1, #129	; 0x81
   33c94:	4648      	mov	r0, r9
   33c96:	f005 fce7 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   33c9a:	4620      	mov	r0, r4
   33c9c:	f000 fac6 	bl	3422c <z_spin_lock_set_owner>
	return k;
   33ca0:	e7ac      	b.n	33bfc <k_heap_aligned_alloc+0x84>
   33ca2:	bf00      	nop
   33ca4:	0003f1a1 	.word	0x0003f1a1
   33ca8:	0003f1f3 	.word	0x0003f1f3
   33cac:	0003f0e1 	.word	0x0003f0e1
   33cb0:	0003f208 	.word	0x0003f208
   33cb4:	00042994 	.word	0x00042994
   33cb8:	0004295c 	.word	0x0004295c
   33cbc:	0003f6c8 	.word	0x0003f6c8
   33cc0:	0003f1c7 	.word	0x0003f1c7
   33cc4:	0003f1de 	.word	0x0003f1de

00033cc8 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   33cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33cca:	4605      	mov	r5, r0
   33ccc:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   33cce:	f100 0414 	add.w	r4, r0, #20
   33cd2:	f04f 0320 	mov.w	r3, #32
   33cd6:	f3ef 8711 	mrs	r7, BASEPRI
   33cda:	f383 8811 	msr	BASEPRI, r3
   33cde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33ce2:	4620      	mov	r0, r4
   33ce4:	f000 fa86 	bl	341f4 <z_spin_lock_valid>
   33ce8:	b968      	cbnz	r0, 33d06 <k_heap_free+0x3e>
   33cea:	2381      	movs	r3, #129	; 0x81
   33cec:	4a1a      	ldr	r2, [pc, #104]	; (33d58 <k_heap_free+0x90>)
   33cee:	491b      	ldr	r1, [pc, #108]	; (33d5c <k_heap_free+0x94>)
   33cf0:	481b      	ldr	r0, [pc, #108]	; (33d60 <k_heap_free+0x98>)
   33cf2:	f005 fa62 	bl	391ba <printk>
   33cf6:	4621      	mov	r1, r4
   33cf8:	481a      	ldr	r0, [pc, #104]	; (33d64 <k_heap_free+0x9c>)
   33cfa:	f005 fa5e 	bl	391ba <printk>
   33cfe:	2181      	movs	r1, #129	; 0x81
   33d00:	4815      	ldr	r0, [pc, #84]	; (33d58 <k_heap_free+0x90>)
   33d02:	f005 fcb1 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   33d06:	4620      	mov	r0, r4
   33d08:	f000 fa90 	bl	3422c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   33d0c:	4628      	mov	r0, r5
   33d0e:	4631      	mov	r1, r6
   33d10:	f7ef f9b0 	bl	23074 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   33d14:	f105 000c 	add.w	r0, r5, #12
   33d18:	f009 fbc5 	bl	3d4a6 <z_unpend_all>
   33d1c:	b128      	cbz	r0, 33d2a <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   33d1e:	4639      	mov	r1, r7
   33d20:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   33d22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   33d26:	f001 bb83 	b.w	35430 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33d2a:	4620      	mov	r0, r4
   33d2c:	f000 fa70 	bl	34210 <z_spin_unlock_valid>
   33d30:	b968      	cbnz	r0, 33d4e <k_heap_free+0x86>
   33d32:	23ac      	movs	r3, #172	; 0xac
   33d34:	4a08      	ldr	r2, [pc, #32]	; (33d58 <k_heap_free+0x90>)
   33d36:	490c      	ldr	r1, [pc, #48]	; (33d68 <k_heap_free+0xa0>)
   33d38:	4809      	ldr	r0, [pc, #36]	; (33d60 <k_heap_free+0x98>)
   33d3a:	f005 fa3e 	bl	391ba <printk>
   33d3e:	4621      	mov	r1, r4
   33d40:	480a      	ldr	r0, [pc, #40]	; (33d6c <k_heap_free+0xa4>)
   33d42:	f005 fa3a 	bl	391ba <printk>
   33d46:	21ac      	movs	r1, #172	; 0xac
   33d48:	4803      	ldr	r0, [pc, #12]	; (33d58 <k_heap_free+0x90>)
   33d4a:	f005 fc8d 	bl	39668 <assert_post_action>
	__asm__ volatile(
   33d4e:	f387 8811 	msr	BASEPRI, r7
   33d52:	f3bf 8f6f 	isb	sy
}
   33d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33d58:	0003f1a1 	.word	0x0003f1a1
   33d5c:	0003f1f3 	.word	0x0003f1f3
   33d60:	0003f0e1 	.word	0x0003f0e1
   33d64:	0003f208 	.word	0x0003f208
   33d68:	0003f1c7 	.word	0x0003f1c7
   33d6c:	0003f1de 	.word	0x0003f1de

00033d70 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   33d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   33d72:	4c16      	ldr	r4, [pc, #88]	; (33dcc <init_mem_slab_module+0x5c>)
   33d74:	4d16      	ldr	r5, [pc, #88]	; (33dd0 <init_mem_slab_module+0x60>)
   33d76:	4e17      	ldr	r6, [pc, #92]	; (33dd4 <init_mem_slab_module+0x64>)
   33d78:	42ac      	cmp	r4, r5
   33d7a:	d90c      	bls.n	33d96 <init_mem_slab_module+0x26>
   33d7c:	4916      	ldr	r1, [pc, #88]	; (33dd8 <init_mem_slab_module+0x68>)
   33d7e:	233c      	movs	r3, #60	; 0x3c
   33d80:	4632      	mov	r2, r6
   33d82:	4816      	ldr	r0, [pc, #88]	; (33ddc <init_mem_slab_module+0x6c>)
   33d84:	f005 fa19 	bl	391ba <printk>
   33d88:	4815      	ldr	r0, [pc, #84]	; (33de0 <init_mem_slab_module+0x70>)
   33d8a:	f005 fa16 	bl	391ba <printk>
   33d8e:	213c      	movs	r1, #60	; 0x3c
   33d90:	4630      	mov	r0, r6
   33d92:	f005 fc69 	bl	39668 <assert_post_action>
   33d96:	42ac      	cmp	r4, r5
   33d98:	d301      	bcc.n	33d9e <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
   33d9a:	2000      	movs	r0, #0
	return rc;
}
   33d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   33d9e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   33da2:	ea42 0301 	orr.w	r3, r2, r1
   33da6:	f013 0303 	ands.w	r3, r3, #3
   33daa:	d10b      	bne.n	33dc4 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
   33dac:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   33dae:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   33db0:	4283      	cmp	r3, r0
   33db2:	d101      	bne.n	33db8 <init_mem_slab_module+0x48>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   33db4:	3420      	adds	r4, #32
   33db6:	e7df      	b.n	33d78 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   33db8:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   33dba:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   33dbc:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   33dbe:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   33dc0:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   33dc2:	e7f5      	b.n	33db0 <init_mem_slab_module+0x40>
	return rc;
   33dc4:	f06f 0015 	mvn.w	r0, #21
   33dc8:	e7e8      	b.n	33d9c <init_mem_slab_module+0x2c>
   33dca:	bf00      	nop
   33dcc:	200149d8 	.word	0x200149d8
   33dd0:	20014a18 	.word	0x20014a18
   33dd4:	000429d9 	.word	0x000429d9
   33dd8:	000429fe 	.word	0x000429fe
   33ddc:	0003f0e1 	.word	0x0003f0e1
   33de0:	0003f746 	.word	0x0003f746

00033de4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   33de4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   33de8:	4604      	mov	r4, r0
   33dea:	460e      	mov	r6, r1
   33dec:	4690      	mov	r8, r2
   33dee:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   33df0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   33df4:	f04f 0320 	mov.w	r3, #32
   33df8:	f3ef 8911 	mrs	r9, BASEPRI
   33dfc:	f383 8811 	msr	BASEPRI, r3
   33e00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33e04:	4628      	mov	r0, r5
   33e06:	f000 f9f5 	bl	341f4 <z_spin_lock_valid>
   33e0a:	b968      	cbnz	r0, 33e28 <k_mem_slab_alloc+0x44>
   33e0c:	2381      	movs	r3, #129	; 0x81
   33e0e:	4a24      	ldr	r2, [pc, #144]	; (33ea0 <k_mem_slab_alloc+0xbc>)
   33e10:	4924      	ldr	r1, [pc, #144]	; (33ea4 <k_mem_slab_alloc+0xc0>)
   33e12:	4825      	ldr	r0, [pc, #148]	; (33ea8 <k_mem_slab_alloc+0xc4>)
   33e14:	f005 f9d1 	bl	391ba <printk>
   33e18:	4629      	mov	r1, r5
   33e1a:	4824      	ldr	r0, [pc, #144]	; (33eac <k_mem_slab_alloc+0xc8>)
   33e1c:	f005 f9cd 	bl	391ba <printk>
   33e20:	2181      	movs	r1, #129	; 0x81
   33e22:	481f      	ldr	r0, [pc, #124]	; (33ea0 <k_mem_slab_alloc+0xbc>)
   33e24:	f005 fc20 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   33e28:	4628      	mov	r0, r5
   33e2a:	f000 f9ff 	bl	3422c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   33e2e:	69a3      	ldr	r3, [r4, #24]
   33e30:	b1eb      	cbz	r3, 33e6e <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   33e32:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   33e34:	681b      	ldr	r3, [r3, #0]
   33e36:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   33e38:	69e3      	ldr	r3, [r4, #28]
   33e3a:	3301      	adds	r3, #1
   33e3c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   33e3e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33e40:	4628      	mov	r0, r5
   33e42:	f000 f9e5 	bl	34210 <z_spin_unlock_valid>
   33e46:	b968      	cbnz	r0, 33e64 <k_mem_slab_alloc+0x80>
   33e48:	23ac      	movs	r3, #172	; 0xac
   33e4a:	4a15      	ldr	r2, [pc, #84]	; (33ea0 <k_mem_slab_alloc+0xbc>)
   33e4c:	4918      	ldr	r1, [pc, #96]	; (33eb0 <k_mem_slab_alloc+0xcc>)
   33e4e:	4816      	ldr	r0, [pc, #88]	; (33ea8 <k_mem_slab_alloc+0xc4>)
   33e50:	f005 f9b3 	bl	391ba <printk>
   33e54:	4629      	mov	r1, r5
   33e56:	4817      	ldr	r0, [pc, #92]	; (33eb4 <k_mem_slab_alloc+0xd0>)
   33e58:	f005 f9af 	bl	391ba <printk>
   33e5c:	21ac      	movs	r1, #172	; 0xac
   33e5e:	4810      	ldr	r0, [pc, #64]	; (33ea0 <k_mem_slab_alloc+0xbc>)
   33e60:	f005 fc02 	bl	39668 <assert_post_action>
	__asm__ volatile(
   33e64:	f389 8811 	msr	BASEPRI, r9
   33e68:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   33e6c:	e013      	b.n	33e96 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   33e6e:	ea58 0207 	orrs.w	r2, r8, r7
   33e72:	d103      	bne.n	33e7c <k_mem_slab_alloc+0x98>
		result = -ENOMEM;
   33e74:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   33e78:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   33e7a:	e7e1      	b.n	33e40 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   33e7c:	4622      	mov	r2, r4
   33e7e:	4649      	mov	r1, r9
   33e80:	4628      	mov	r0, r5
   33e82:	e9cd 8700 	strd	r8, r7, [sp]
   33e86:	f001 fd37 	bl	358f8 <z_pend_curr>
		if (result == 0) {
   33e8a:	4604      	mov	r4, r0
   33e8c:	b918      	cbnz	r0, 33e96 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   33e8e:	4b0a      	ldr	r3, [pc, #40]	; (33eb8 <k_mem_slab_alloc+0xd4>)
   33e90:	689b      	ldr	r3, [r3, #8]
   33e92:	695b      	ldr	r3, [r3, #20]
   33e94:	6033      	str	r3, [r6, #0]
}
   33e96:	4620      	mov	r0, r4
   33e98:	b003      	add	sp, #12
   33e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   33e9e:	bf00      	nop
   33ea0:	0003f1a1 	.word	0x0003f1a1
   33ea4:	0003f1f3 	.word	0x0003f1f3
   33ea8:	0003f0e1 	.word	0x0003f0e1
   33eac:	0003f208 	.word	0x0003f208
   33eb0:	0003f1c7 	.word	0x0003f1c7
   33eb4:	0003f1de 	.word	0x0003f1de
   33eb8:	20017f60 	.word	0x20017f60

00033ebc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   33ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33ec0:	4604      	mov	r4, r0
   33ec2:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   33ec4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   33ec8:	f04f 0320 	mov.w	r3, #32
   33ecc:	f3ef 8711 	mrs	r7, BASEPRI
   33ed0:	f383 8811 	msr	BASEPRI, r3
   33ed4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33ed8:	4628      	mov	r0, r5
   33eda:	f000 f98b 	bl	341f4 <z_spin_lock_valid>
   33ede:	b968      	cbnz	r0, 33efc <k_mem_slab_free+0x40>
   33ee0:	2381      	movs	r3, #129	; 0x81
   33ee2:	4a22      	ldr	r2, [pc, #136]	; (33f6c <k_mem_slab_free+0xb0>)
   33ee4:	4922      	ldr	r1, [pc, #136]	; (33f70 <k_mem_slab_free+0xb4>)
   33ee6:	4823      	ldr	r0, [pc, #140]	; (33f74 <k_mem_slab_free+0xb8>)
   33ee8:	f005 f967 	bl	391ba <printk>
   33eec:	4629      	mov	r1, r5
   33eee:	4822      	ldr	r0, [pc, #136]	; (33f78 <k_mem_slab_free+0xbc>)
   33ef0:	f005 f963 	bl	391ba <printk>
   33ef4:	2181      	movs	r1, #129	; 0x81
   33ef6:	481d      	ldr	r0, [pc, #116]	; (33f6c <k_mem_slab_free+0xb0>)
   33ef8:	f005 fbb6 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   33efc:	4628      	mov	r0, r5
   33efe:	f000 f995 	bl	3422c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   33f02:	f8d4 8018 	ldr.w	r8, [r4, #24]
   33f06:	f1b8 0f00 	cmp.w	r8, #0
   33f0a:	d10f      	bne.n	33f2c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   33f0c:	4620      	mov	r0, r4
   33f0e:	f002 f807 	bl	35f20 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   33f12:	b158      	cbz	r0, 33f2c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   33f14:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   33f16:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   33f1a:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   33f1c:	f001 f9f8 	bl	35310 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   33f20:	4639      	mov	r1, r7
   33f22:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   33f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   33f28:	f001 ba82 	b.w	35430 <z_reschedule>
	**(char ***) mem = slab->free_list;
   33f2c:	6833      	ldr	r3, [r6, #0]
   33f2e:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33f30:	4628      	mov	r0, r5
   33f32:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   33f34:	6833      	ldr	r3, [r6, #0]
   33f36:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   33f38:	69e3      	ldr	r3, [r4, #28]
   33f3a:	3b01      	subs	r3, #1
   33f3c:	61e3      	str	r3, [r4, #28]
   33f3e:	f000 f967 	bl	34210 <z_spin_unlock_valid>
   33f42:	b968      	cbnz	r0, 33f60 <k_mem_slab_free+0xa4>
   33f44:	23ac      	movs	r3, #172	; 0xac
   33f46:	4a09      	ldr	r2, [pc, #36]	; (33f6c <k_mem_slab_free+0xb0>)
   33f48:	490c      	ldr	r1, [pc, #48]	; (33f7c <k_mem_slab_free+0xc0>)
   33f4a:	480a      	ldr	r0, [pc, #40]	; (33f74 <k_mem_slab_free+0xb8>)
   33f4c:	f005 f935 	bl	391ba <printk>
   33f50:	4629      	mov	r1, r5
   33f52:	480b      	ldr	r0, [pc, #44]	; (33f80 <k_mem_slab_free+0xc4>)
   33f54:	f005 f931 	bl	391ba <printk>
   33f58:	21ac      	movs	r1, #172	; 0xac
   33f5a:	4804      	ldr	r0, [pc, #16]	; (33f6c <k_mem_slab_free+0xb0>)
   33f5c:	f005 fb84 	bl	39668 <assert_post_action>
	__asm__ volatile(
   33f60:	f387 8811 	msr	BASEPRI, r7
   33f64:	f3bf 8f6f 	isb	sy
}
   33f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33f6c:	0003f1a1 	.word	0x0003f1a1
   33f70:	0003f1f3 	.word	0x0003f1f3
   33f74:	0003f0e1 	.word	0x0003f0e1
   33f78:	0003f208 	.word	0x0003f208
   33f7c:	0003f1c7 	.word	0x0003f1c7
   33f80:	0003f1de 	.word	0x0003f1de

00033f84 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   33f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33f88:	b085      	sub	sp, #20
   33f8a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   33f8e:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   33f90:	f1b9 0f0f 	cmp.w	r9, #15
{
   33f94:	460f      	mov	r7, r1
   33f96:	4615      	mov	r5, r2
   33f98:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   33f9a:	d12e      	bne.n	33ffa <z_setup_new_thread+0x76>
   33f9c:	4b23      	ldr	r3, [pc, #140]	; (3402c <z_setup_new_thread+0xa8>)
   33f9e:	4598      	cmp	r8, r3
   33fa0:	d12f      	bne.n	34002 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   33fa2:	f104 0358 	add.w	r3, r4, #88	; 0x58
   33fa6:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   33faa:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   33fac:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   33fae:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   33fb0:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   33fb2:	1de8      	adds	r0, r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   33fb4:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   33fb8:	f020 0007 	bic.w	r0, r0, #7
	new_thread->stack_info.size = stack_buf_size;
   33fbc:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   33fc0:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   33fc4:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   33fc6:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   33fca:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   33fcc:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33fce:	9302      	str	r3, [sp, #8]
   33fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	stack_ptr = (char *)stack + stack_obj_size;
   33fd2:	183d      	adds	r5, r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33fd4:	9301      	str	r3, [sp, #4]
   33fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   33fd8:	462a      	mov	r2, r5
   33fda:	9300      	str	r3, [sp, #0]
   33fdc:	4639      	mov	r1, r7
   33fde:	4643      	mov	r3, r8
   33fe0:	4620      	mov	r0, r4
   33fe2:	f7f1 fcd1 	bl	25988 <arch_new_thread>
	if (!_current) {
   33fe6:	4b12      	ldr	r3, [pc, #72]	; (34030 <z_setup_new_thread+0xac>)
	new_thread->init_data = NULL;
   33fe8:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   33fea:	689b      	ldr	r3, [r3, #8]
   33fec:	b103      	cbz	r3, 33ff0 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   33fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   33ff0:	4628      	mov	r0, r5
   33ff2:	6763      	str	r3, [r4, #116]	; 0x74
   33ff4:	b005      	add	sp, #20
   33ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   33ffa:	f109 0310 	add.w	r3, r9, #16
   33ffe:	2b1e      	cmp	r3, #30
   34000:	d9cf      	bls.n	33fa2 <z_setup_new_thread+0x1e>
   34002:	f240 2305 	movw	r3, #517	; 0x205
   34006:	4a0b      	ldr	r2, [pc, #44]	; (34034 <z_setup_new_thread+0xb0>)
   34008:	490b      	ldr	r1, [pc, #44]	; (34038 <z_setup_new_thread+0xb4>)
   3400a:	480c      	ldr	r0, [pc, #48]	; (3403c <z_setup_new_thread+0xb8>)
   3400c:	f005 f8d5 	bl	391ba <printk>
   34010:	4649      	mov	r1, r9
   34012:	f06f 030f 	mvn.w	r3, #15
   34016:	220e      	movs	r2, #14
   34018:	4809      	ldr	r0, [pc, #36]	; (34040 <z_setup_new_thread+0xbc>)
   3401a:	f005 f8ce 	bl	391ba <printk>
   3401e:	f240 2105 	movw	r1, #517	; 0x205
   34022:	4804      	ldr	r0, [pc, #16]	; (34034 <z_setup_new_thread+0xb0>)
   34024:	f005 fb20 	bl	39668 <assert_post_action>
   34028:	e7bb      	b.n	33fa2 <z_setup_new_thread+0x1e>
   3402a:	bf00      	nop
   3402c:	0003423d 	.word	0x0003423d
   34030:	20017f60 	.word	0x20017f60
   34034:	00042a1b 	.word	0x00042a1b
   34038:	00042a3e 	.word	0x00042a3e
   3403c:	0003f0e1 	.word	0x0003f0e1
   34040:	00042abe 	.word	0x00042abe

00034044 <z_impl_k_thread_create>:
{
   34044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34048:	b087      	sub	sp, #28
   3404a:	4604      	mov	r4, r0
   3404c:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   34050:	460f      	mov	r7, r1
   34052:	4690      	mov	r8, r2
   34054:	4699      	mov	r9, r3
   34056:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   3405a:	b173      	cbz	r3, 3407a <z_impl_k_thread_create+0x36>
   3405c:	491c      	ldr	r1, [pc, #112]	; (340d0 <z_impl_k_thread_create+0x8c>)
   3405e:	f240 236e 	movw	r3, #622	; 0x26e
   34062:	4a1c      	ldr	r2, [pc, #112]	; (340d4 <z_impl_k_thread_create+0x90>)
   34064:	481c      	ldr	r0, [pc, #112]	; (340d8 <z_impl_k_thread_create+0x94>)
   34066:	f005 f8a8 	bl	391ba <printk>
   3406a:	481c      	ldr	r0, [pc, #112]	; (340dc <z_impl_k_thread_create+0x98>)
   3406c:	f005 f8a5 	bl	391ba <printk>
   34070:	f240 216e 	movw	r1, #622	; 0x26e
   34074:	4817      	ldr	r0, [pc, #92]	; (340d4 <z_impl_k_thread_create+0x90>)
   34076:	f005 faf7 	bl	39668 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3407a:	2300      	movs	r3, #0
   3407c:	9305      	str	r3, [sp, #20]
   3407e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   34080:	4642      	mov	r2, r8
   34082:	9304      	str	r3, [sp, #16]
   34084:	9b11      	ldr	r3, [sp, #68]	; 0x44
   34086:	4639      	mov	r1, r7
   34088:	9303      	str	r3, [sp, #12]
   3408a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3408c:	4620      	mov	r0, r4
   3408e:	9302      	str	r3, [sp, #8]
   34090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   34092:	9301      	str	r3, [sp, #4]
   34094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   34096:	9300      	str	r3, [sp, #0]
   34098:	464b      	mov	r3, r9
   3409a:	f7ff ff73 	bl	33f84 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   3409e:	f1b5 3fff 	cmp.w	r5, #4294967295
   340a2:	bf08      	it	eq
   340a4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   340a8:	d005      	beq.n	340b6 <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   340aa:	ea55 0306 	orrs.w	r3, r5, r6
   340ae:	d106      	bne.n	340be <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
   340b0:	4620      	mov	r0, r4
   340b2:	f001 fa01 	bl	354b8 <z_sched_start>
}
   340b6:	4620      	mov	r0, r4
   340b8:	b007      	add	sp, #28
   340ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   340be:	4632      	mov	r2, r6
   340c0:	462b      	mov	r3, r5
   340c2:	4907      	ldr	r1, [pc, #28]	; (340e0 <z_impl_k_thread_create+0x9c>)
   340c4:	f104 0018 	add.w	r0, r4, #24
   340c8:	f002 faac 	bl	36624 <z_add_timeout>
   340cc:	e7f3      	b.n	340b6 <z_impl_k_thread_create+0x72>
   340ce:	bf00      	nop
   340d0:	00042aef 	.word	0x00042aef
   340d4:	00042a1b 	.word	0x00042a1b
   340d8:	0003f0e1 	.word	0x0003f0e1
   340dc:	00042b01 	.word	0x00042b01
   340e0:	00035dd1 	.word	0x00035dd1

000340e4 <z_init_static_threads>:
{
   340e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   340e8:	4c3b      	ldr	r4, [pc, #236]	; (341d8 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   340ea:	4d3c      	ldr	r5, [pc, #240]	; (341dc <z_init_static_threads+0xf8>)
   340ec:	4f3c      	ldr	r7, [pc, #240]	; (341e0 <z_init_static_threads+0xfc>)
{
   340ee:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   340f0:	42ac      	cmp	r4, r5
   340f2:	4626      	mov	r6, r4
   340f4:	d90e      	bls.n	34114 <z_init_static_threads+0x30>
   340f6:	493b      	ldr	r1, [pc, #236]	; (341e4 <z_init_static_threads+0x100>)
   340f8:	f240 23d5 	movw	r3, #725	; 0x2d5
   340fc:	463a      	mov	r2, r7
   340fe:	483a      	ldr	r0, [pc, #232]	; (341e8 <z_init_static_threads+0x104>)
   34100:	f005 f85b 	bl	391ba <printk>
   34104:	4839      	ldr	r0, [pc, #228]	; (341ec <z_init_static_threads+0x108>)
   34106:	f005 f858 	bl	391ba <printk>
   3410a:	f240 21d5 	movw	r1, #725	; 0x2d5
   3410e:	4638      	mov	r0, r7
   34110:	f005 faaa 	bl	39668 <assert_post_action>
   34114:	42ae      	cmp	r6, r5
   34116:	f104 0430 	add.w	r4, r4, #48	; 0x30
   3411a:	d31f      	bcc.n	3415c <z_init_static_threads+0x78>
	k_sched_lock();
   3411c:	f001 fa20 	bl	35560 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   34120:	4c2d      	ldr	r4, [pc, #180]	; (341d8 <z_init_static_threads+0xf4>)
   34122:	4e2f      	ldr	r6, [pc, #188]	; (341e0 <z_init_static_threads+0xfc>)
   34124:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 341e4 <z_init_static_threads+0x100>
   34128:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 341e8 <z_init_static_threads+0x104>
   3412c:	42ac      	cmp	r4, r5
   3412e:	d90e      	bls.n	3414e <z_init_static_threads+0x6a>
   34130:	4641      	mov	r1, r8
   34132:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   34136:	4632      	mov	r2, r6
   34138:	4648      	mov	r0, r9
   3413a:	f005 f83e 	bl	391ba <printk>
   3413e:	482b      	ldr	r0, [pc, #172]	; (341ec <z_init_static_threads+0x108>)
   34140:	f005 f83b 	bl	391ba <printk>
   34144:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   34148:	4630      	mov	r0, r6
   3414a:	f005 fa8d 	bl	39668 <assert_post_action>
   3414e:	42ac      	cmp	r4, r5
   34150:	d320      	bcc.n	34194 <z_init_static_threads+0xb0>
}
   34152:	b007      	add	sp, #28
   34154:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   34158:	f001 ba76 	b.w	35648 <k_sched_unlock>
		z_setup_new_thread(
   3415c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   34160:	9305      	str	r3, [sp, #20]
   34162:	f854 3c10 	ldr.w	r3, [r4, #-16]
   34166:	9304      	str	r3, [sp, #16]
   34168:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3416c:	9303      	str	r3, [sp, #12]
   3416e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   34172:	9302      	str	r3, [sp, #8]
   34174:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   34178:	9301      	str	r3, [sp, #4]
   3417a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3417e:	9300      	str	r3, [sp, #0]
   34180:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   34184:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   34188:	f7ff fefc 	bl	33f84 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3418c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   34190:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   34192:	e7ad      	b.n	340f0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   34194:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34196:	1c5a      	adds	r2, r3, #1
   34198:	d00f      	beq.n	341ba <z_init_static_threads+0xd6>
   3419a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   3419e:	f240 30e7 	movw	r0, #999	; 0x3e7
   341a2:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   341a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   341a8:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   341ac:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   341b0:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   341b2:	d104      	bne.n	341be <z_init_static_threads+0xda>
	z_sched_start(thread);
   341b4:	4638      	mov	r0, r7
   341b6:	f001 f97f 	bl	354b8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   341ba:	3430      	adds	r4, #48	; 0x30
   341bc:	e7b6      	b.n	3412c <z_init_static_threads+0x48>
   341be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   341c2:	2300      	movs	r3, #0
   341c4:	f7ed f808 	bl	211d8 <__aeabi_uldivmod>
   341c8:	4602      	mov	r2, r0
   341ca:	460b      	mov	r3, r1
   341cc:	f107 0018 	add.w	r0, r7, #24
   341d0:	4907      	ldr	r1, [pc, #28]	; (341f0 <z_init_static_threads+0x10c>)
   341d2:	f002 fa27 	bl	36624 <z_add_timeout>
   341d6:	e7f0      	b.n	341ba <z_init_static_threads+0xd6>
   341d8:	200149a8 	.word	0x200149a8
   341dc:	200149d8 	.word	0x200149d8
   341e0:	00042a1b 	.word	0x00042a1b
   341e4:	00042b26 	.word	0x00042b26
   341e8:	0003f0e1 	.word	0x0003f0e1
   341ec:	0003f746 	.word	0x0003f746
   341f0:	00035dd1 	.word	0x00035dd1

000341f4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   341f4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   341f6:	b138      	cbz	r0, 34208 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   341f8:	4b04      	ldr	r3, [pc, #16]	; (3420c <z_spin_lock_valid+0x18>)
   341fa:	f000 0003 	and.w	r0, r0, #3
   341fe:	7d1b      	ldrb	r3, [r3, #20]
   34200:	1ac0      	subs	r0, r0, r3
   34202:	bf18      	it	ne
   34204:	2001      	movne	r0, #1
   34206:	4770      	bx	lr
			return false;
		}
	}
	return true;
   34208:	2001      	movs	r0, #1
}
   3420a:	4770      	bx	lr
   3420c:	20017f60 	.word	0x20017f60

00034210 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   34210:	4a05      	ldr	r2, [pc, #20]	; (34228 <z_spin_unlock_valid+0x18>)
{
   34212:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   34214:	7d11      	ldrb	r1, [r2, #20]
   34216:	6892      	ldr	r2, [r2, #8]
   34218:	430a      	orrs	r2, r1
   3421a:	6801      	ldr	r1, [r0, #0]
   3421c:	2000      	movs	r0, #0
   3421e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   34220:	bf04      	itt	eq
   34222:	6018      	streq	r0, [r3, #0]
	return true;
   34224:	2001      	moveq	r0, #1
}
   34226:	4770      	bx	lr
   34228:	20017f60 	.word	0x20017f60

0003422c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3422c:	4b02      	ldr	r3, [pc, #8]	; (34238 <z_spin_lock_set_owner+0xc>)
   3422e:	7d1a      	ldrb	r2, [r3, #20]
   34230:	689b      	ldr	r3, [r3, #8]
   34232:	4313      	orrs	r3, r2
   34234:	6003      	str	r3, [r0, #0]
}
   34236:	4770      	bx	lr
   34238:	20017f60 	.word	0x20017f60

0003423c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   3423c:	4c11      	ldr	r4, [pc, #68]	; (34284 <idle+0x48>)
{
   3423e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   34240:	68a3      	ldr	r3, [r4, #8]
   34242:	f993 300e 	ldrsb.w	r3, [r3, #14]
   34246:	2b00      	cmp	r3, #0
   34248:	da09      	bge.n	3425e <idle+0x22>
   3424a:	490f      	ldr	r1, [pc, #60]	; (34288 <idle+0x4c>)
   3424c:	480f      	ldr	r0, [pc, #60]	; (3428c <idle+0x50>)
   3424e:	2346      	movs	r3, #70	; 0x46
   34250:	4a0f      	ldr	r2, [pc, #60]	; (34290 <idle+0x54>)
   34252:	f004 ffb2 	bl	391ba <printk>
   34256:	2146      	movs	r1, #70	; 0x46
   34258:	480d      	ldr	r0, [pc, #52]	; (34290 <idle+0x54>)
   3425a:	f005 fa05 	bl	39668 <assert_post_action>
	__asm__ volatile(
   3425e:	f04f 0220 	mov.w	r2, #32
   34262:	f3ef 8311 	mrs	r3, BASEPRI
   34266:	f382 8811 	msr	BASEPRI, r2
   3426a:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   3426e:	f002 faef 	bl	36850 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   34272:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   34274:	f7f0 fee2 	bl	2503c <pm_system_suspend>
   34278:	2800      	cmp	r0, #0
   3427a:	d1f0      	bne.n	3425e <idle+0x22>
	arch_cpu_idle();
   3427c:	f7f1 fbba 	bl	259f4 <arch_cpu_idle>
}
   34280:	e7ed      	b.n	3425e <idle+0x22>
   34282:	bf00      	nop
   34284:	20017f60 	.word	0x20017f60
   34288:	00042b74 	.word	0x00042b74
   3428c:	0003f0e1 	.word	0x0003f0e1
   34290:	00042b53 	.word	0x00042b53

00034294 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   34294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   34298:	4604      	mov	r4, r0
   3429a:	4689      	mov	r9, r1
   3429c:	4690      	mov	r8, r2
   3429e:	461e      	mov	r6, r3
   342a0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   342a4:	b17b      	cbz	r3, 342c6 <z_impl_k_msgq_put+0x32>
   342a6:	ea52 0306 	orrs.w	r3, r2, r6
   342aa:	d00c      	beq.n	342c6 <z_impl_k_msgq_put+0x32>
   342ac:	4943      	ldr	r1, [pc, #268]	; (343bc <z_impl_k_msgq_put+0x128>)
   342ae:	2376      	movs	r3, #118	; 0x76
   342b0:	4a43      	ldr	r2, [pc, #268]	; (343c0 <z_impl_k_msgq_put+0x12c>)
   342b2:	4844      	ldr	r0, [pc, #272]	; (343c4 <z_impl_k_msgq_put+0x130>)
   342b4:	f004 ff81 	bl	391ba <printk>
   342b8:	4843      	ldr	r0, [pc, #268]	; (343c8 <z_impl_k_msgq_put+0x134>)
   342ba:	f004 ff7e 	bl	391ba <printk>
   342be:	2176      	movs	r1, #118	; 0x76
   342c0:	483f      	ldr	r0, [pc, #252]	; (343c0 <z_impl_k_msgq_put+0x12c>)
   342c2:	f005 f9d1 	bl	39668 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   342c6:	f104 0508 	add.w	r5, r4, #8
   342ca:	f04f 0320 	mov.w	r3, #32
   342ce:	f3ef 8711 	mrs	r7, BASEPRI
   342d2:	f383 8811 	msr	BASEPRI, r3
   342d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   342da:	4628      	mov	r0, r5
   342dc:	f7ff ff8a 	bl	341f4 <z_spin_lock_valid>
   342e0:	b968      	cbnz	r0, 342fe <z_impl_k_msgq_put+0x6a>
   342e2:	2381      	movs	r3, #129	; 0x81
   342e4:	4a39      	ldr	r2, [pc, #228]	; (343cc <z_impl_k_msgq_put+0x138>)
   342e6:	493a      	ldr	r1, [pc, #232]	; (343d0 <z_impl_k_msgq_put+0x13c>)
   342e8:	4836      	ldr	r0, [pc, #216]	; (343c4 <z_impl_k_msgq_put+0x130>)
   342ea:	f004 ff66 	bl	391ba <printk>
   342ee:	4629      	mov	r1, r5
   342f0:	4838      	ldr	r0, [pc, #224]	; (343d4 <z_impl_k_msgq_put+0x140>)
   342f2:	f004 ff62 	bl	391ba <printk>
   342f6:	2181      	movs	r1, #129	; 0x81
   342f8:	4834      	ldr	r0, [pc, #208]	; (343cc <z_impl_k_msgq_put+0x138>)
   342fa:	f005 f9b5 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   342fe:	4628      	mov	r0, r5
   34300:	f7ff ff94 	bl	3422c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   34304:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34306:	6923      	ldr	r3, [r4, #16]
   34308:	429a      	cmp	r2, r3
   3430a:	d244      	bcs.n	34396 <z_impl_k_msgq_put+0x102>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3430c:	4620      	mov	r0, r4
   3430e:	f001 fe07 	bl	35f20 <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   34312:	4649      	mov	r1, r9
		if (pending_thread != NULL) {
   34314:	4606      	mov	r6, r0
   34316:	68e2      	ldr	r2, [r4, #12]
   34318:	b178      	cbz	r0, 3433a <z_impl_k_msgq_put+0xa6>
   3431a:	2400      	movs	r4, #0
   3431c:	6940      	ldr	r0, [r0, #20]
   3431e:	f009 f9a5 	bl	3d66c <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   34322:	4630      	mov	r0, r6
   34324:	67f4      	str	r4, [r6, #124]	; 0x7c
   34326:	f000 fff3 	bl	35310 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3432a:	4639      	mov	r1, r7
   3432c:	4628      	mov	r0, r5
   3432e:	f001 f87f 	bl	35430 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   34332:	4620      	mov	r0, r4
   34334:	b003      	add	sp, #12
   34336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3433a:	6a20      	ldr	r0, [r4, #32]
   3433c:	f009 f996 	bl	3d66c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   34340:	6a23      	ldr	r3, [r4, #32]
   34342:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   34344:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->write_ptr += msgq->msg_size;
   34348:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3434a:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3434c:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3434e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   34350:	bf08      	it	eq
   34352:	6963      	ldreq	r3, [r4, #20]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   34354:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   34358:	bf08      	it	eq
   3435a:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3435c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3435e:	3301      	adds	r3, #1
   34360:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   34362:	f009 f937 	bl	3d5d4 <z_handle_obj_poll_events>
		result = 0;
   34366:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34368:	4628      	mov	r0, r5
   3436a:	f7ff ff51 	bl	34210 <z_spin_unlock_valid>
   3436e:	b968      	cbnz	r0, 3438c <z_impl_k_msgq_put+0xf8>
   34370:	23ac      	movs	r3, #172	; 0xac
   34372:	4a16      	ldr	r2, [pc, #88]	; (343cc <z_impl_k_msgq_put+0x138>)
   34374:	4918      	ldr	r1, [pc, #96]	; (343d8 <z_impl_k_msgq_put+0x144>)
   34376:	4813      	ldr	r0, [pc, #76]	; (343c4 <z_impl_k_msgq_put+0x130>)
   34378:	f004 ff1f 	bl	391ba <printk>
   3437c:	4629      	mov	r1, r5
   3437e:	4817      	ldr	r0, [pc, #92]	; (343dc <z_impl_k_msgq_put+0x148>)
   34380:	f004 ff1b 	bl	391ba <printk>
   34384:	21ac      	movs	r1, #172	; 0xac
   34386:	4811      	ldr	r0, [pc, #68]	; (343cc <z_impl_k_msgq_put+0x138>)
   34388:	f005 f96e 	bl	39668 <assert_post_action>
	__asm__ volatile(
   3438c:	f387 8811 	msr	BASEPRI, r7
   34390:	f3bf 8f6f 	isb	sy
	return result;
   34394:	e7cd      	b.n	34332 <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   34396:	ea58 0306 	orrs.w	r3, r8, r6
   3439a:	d00c      	beq.n	343b6 <z_impl_k_msgq_put+0x122>
		_current->base.swap_data = (void *) data;
   3439c:	4b10      	ldr	r3, [pc, #64]	; (343e0 <z_impl_k_msgq_put+0x14c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3439e:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   343a0:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   343a2:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   343a4:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   343a8:	4628      	mov	r0, r5
   343aa:	e9cd 8600 	strd	r8, r6, [sp]
   343ae:	f001 faa3 	bl	358f8 <z_pend_curr>
   343b2:	4604      	mov	r4, r0
		return result;
   343b4:	e7bd      	b.n	34332 <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   343b6:	f06f 0422 	mvn.w	r4, #34	; 0x22
   343ba:	e7d5      	b.n	34368 <z_impl_k_msgq_put+0xd4>
   343bc:	00042994 	.word	0x00042994
   343c0:	00042b9c 	.word	0x00042b9c
   343c4:	0003f0e1 	.word	0x0003f0e1
   343c8:	0003f6c8 	.word	0x0003f6c8
   343cc:	0003f1a1 	.word	0x0003f1a1
   343d0:	0003f1f3 	.word	0x0003f1f3
   343d4:	0003f208 	.word	0x0003f208
   343d8:	0003f1c7 	.word	0x0003f1c7
   343dc:	0003f1de 	.word	0x0003f1de
   343e0:	20017f60 	.word	0x20017f60

000343e4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   343e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   343e8:	4604      	mov	r4, r0
   343ea:	4688      	mov	r8, r1
   343ec:	4617      	mov	r7, r2
   343ee:	461d      	mov	r5, r3
   343f0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   343f4:	b17b      	cbz	r3, 34416 <z_impl_k_msgq_get+0x32>
   343f6:	ea52 0305 	orrs.w	r3, r2, r5
   343fa:	d00c      	beq.n	34416 <z_impl_k_msgq_get+0x32>
   343fc:	4946      	ldr	r1, [pc, #280]	; (34518 <z_impl_k_msgq_get+0x134>)
   343fe:	23d0      	movs	r3, #208	; 0xd0
   34400:	4a46      	ldr	r2, [pc, #280]	; (3451c <z_impl_k_msgq_get+0x138>)
   34402:	4847      	ldr	r0, [pc, #284]	; (34520 <z_impl_k_msgq_get+0x13c>)
   34404:	f004 fed9 	bl	391ba <printk>
   34408:	4846      	ldr	r0, [pc, #280]	; (34524 <z_impl_k_msgq_get+0x140>)
   3440a:	f004 fed6 	bl	391ba <printk>
   3440e:	21d0      	movs	r1, #208	; 0xd0
   34410:	4842      	ldr	r0, [pc, #264]	; (3451c <z_impl_k_msgq_get+0x138>)
   34412:	f005 f929 	bl	39668 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   34416:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3441a:	f04f 0320 	mov.w	r3, #32
   3441e:	f3ef 8911 	mrs	r9, BASEPRI
   34422:	f383 8811 	msr	BASEPRI, r3
   34426:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3442a:	4630      	mov	r0, r6
   3442c:	f7ff fee2 	bl	341f4 <z_spin_lock_valid>
   34430:	b968      	cbnz	r0, 3444e <z_impl_k_msgq_get+0x6a>
   34432:	2381      	movs	r3, #129	; 0x81
   34434:	4a3c      	ldr	r2, [pc, #240]	; (34528 <z_impl_k_msgq_get+0x144>)
   34436:	493d      	ldr	r1, [pc, #244]	; (3452c <z_impl_k_msgq_get+0x148>)
   34438:	4839      	ldr	r0, [pc, #228]	; (34520 <z_impl_k_msgq_get+0x13c>)
   3443a:	f004 febe 	bl	391ba <printk>
   3443e:	4631      	mov	r1, r6
   34440:	483b      	ldr	r0, [pc, #236]	; (34530 <z_impl_k_msgq_get+0x14c>)
   34442:	f004 feba 	bl	391ba <printk>
   34446:	2181      	movs	r1, #129	; 0x81
   34448:	4837      	ldr	r0, [pc, #220]	; (34528 <z_impl_k_msgq_get+0x144>)
   3444a:	f005 f90d 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   3444e:	4630      	mov	r0, r6
   34450:	f7ff feec 	bl	3422c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   34454:	6a63      	ldr	r3, [r4, #36]	; 0x24
   34456:	2b00      	cmp	r3, #0
   34458:	d035      	beq.n	344c6 <z_impl_k_msgq_get+0xe2>
   3445a:	68e2      	ldr	r2, [r4, #12]
   3445c:	69e1      	ldr	r1, [r4, #28]
   3445e:	4640      	mov	r0, r8
   34460:	f009 f904 	bl	3d66c <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   34464:	69e3      	ldr	r3, [r4, #28]
   34466:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   34468:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   3446a:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   3446c:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   3446e:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   34470:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   34472:	bf04      	itt	eq
   34474:	6963      	ldreq	r3, [r4, #20]
   34476:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   34478:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3447a:	3b01      	subs	r3, #1
   3447c:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3447e:	f001 fd4f 	bl	35f20 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   34482:	4605      	mov	r5, r0
   34484:	2800      	cmp	r0, #0
   34486:	d030      	beq.n	344ea <z_impl_k_msgq_get+0x106>
   34488:	6941      	ldr	r1, [r0, #20]
   3448a:	68e2      	ldr	r2, [r4, #12]
   3448c:	6a20      	ldr	r0, [r4, #32]
   3448e:	f009 f8ed 	bl	3d66c <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   34492:	6a23      	ldr	r3, [r4, #32]
   34494:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   34496:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   34498:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3449a:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3449c:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3449e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   344a0:	bf04      	itt	eq
   344a2:	6963      	ldreq	r3, [r4, #20]
   344a4:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   344a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   344a8:	3301      	adds	r3, #1
   344aa:	6263      	str	r3, [r4, #36]	; 0x24
   344ac:	2400      	movs	r4, #0
   344ae:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   344b0:	f000 ff2e 	bl	35310 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   344b4:	4649      	mov	r1, r9
   344b6:	4630      	mov	r0, r6
   344b8:	f000 ffba 	bl	35430 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   344bc:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   344be:	4628      	mov	r0, r5
   344c0:	b003      	add	sp, #12
   344c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   344c6:	ea57 0305 	orrs.w	r3, r7, r5
   344ca:	d00c      	beq.n	344e6 <z_impl_k_msgq_get+0x102>
		_current->base.swap_data = data;
   344cc:	4b19      	ldr	r3, [pc, #100]	; (34534 <z_impl_k_msgq_get+0x150>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   344ce:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   344d0:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   344d2:	4649      	mov	r1, r9
		_current->base.swap_data = data;
   344d4:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   344d8:	4630      	mov	r0, r6
   344da:	e9cd 7500 	strd	r7, r5, [sp]
   344de:	f001 fa0b 	bl	358f8 <z_pend_curr>
   344e2:	4605      	mov	r5, r0
		return result;
   344e4:	e7eb      	b.n	344be <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   344e6:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   344ea:	4630      	mov	r0, r6
   344ec:	f7ff fe90 	bl	34210 <z_spin_unlock_valid>
   344f0:	b968      	cbnz	r0, 3450e <z_impl_k_msgq_get+0x12a>
   344f2:	23ac      	movs	r3, #172	; 0xac
   344f4:	4a0c      	ldr	r2, [pc, #48]	; (34528 <z_impl_k_msgq_get+0x144>)
   344f6:	4910      	ldr	r1, [pc, #64]	; (34538 <z_impl_k_msgq_get+0x154>)
   344f8:	4809      	ldr	r0, [pc, #36]	; (34520 <z_impl_k_msgq_get+0x13c>)
   344fa:	f004 fe5e 	bl	391ba <printk>
   344fe:	4631      	mov	r1, r6
   34500:	480e      	ldr	r0, [pc, #56]	; (3453c <z_impl_k_msgq_get+0x158>)
   34502:	f004 fe5a 	bl	391ba <printk>
   34506:	21ac      	movs	r1, #172	; 0xac
   34508:	4807      	ldr	r0, [pc, #28]	; (34528 <z_impl_k_msgq_get+0x144>)
   3450a:	f005 f8ad 	bl	39668 <assert_post_action>
	__asm__ volatile(
   3450e:	f389 8811 	msr	BASEPRI, r9
   34512:	f3bf 8f6f 	isb	sy
	return result;
   34516:	e7d2      	b.n	344be <z_impl_k_msgq_get+0xda>
   34518:	00042994 	.word	0x00042994
   3451c:	00042b9c 	.word	0x00042b9c
   34520:	0003f0e1 	.word	0x0003f0e1
   34524:	0003f6c8 	.word	0x0003f6c8
   34528:	0003f1a1 	.word	0x0003f1a1
   3452c:	0003f1f3 	.word	0x0003f1f3
   34530:	0003f208 	.word	0x0003f208
   34534:	20017f60 	.word	0x20017f60
   34538:	0003f1c7 	.word	0x0003f1c7
   3453c:	0003f1de 	.word	0x0003f1de

00034540 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   34540:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34544:	4604      	mov	r4, r0
   34546:	4617      	mov	r7, r2
   34548:	461e      	mov	r6, r3
   3454a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   3454e:	b163      	cbz	r3, 3456a <z_impl_k_mutex_lock+0x2a>
   34550:	496d      	ldr	r1, [pc, #436]	; (34708 <z_impl_k_mutex_lock+0x1c8>)
   34552:	2365      	movs	r3, #101	; 0x65
   34554:	4a6d      	ldr	r2, [pc, #436]	; (3470c <z_impl_k_mutex_lock+0x1cc>)
   34556:	486e      	ldr	r0, [pc, #440]	; (34710 <z_impl_k_mutex_lock+0x1d0>)
   34558:	f004 fe2f 	bl	391ba <printk>
   3455c:	486d      	ldr	r0, [pc, #436]	; (34714 <z_impl_k_mutex_lock+0x1d4>)
   3455e:	f004 fe2c 	bl	391ba <printk>
   34562:	2165      	movs	r1, #101	; 0x65
   34564:	4869      	ldr	r0, [pc, #420]	; (3470c <z_impl_k_mutex_lock+0x1cc>)
   34566:	f005 f87f 	bl	39668 <assert_post_action>
	__asm__ volatile(
   3456a:	f04f 0320 	mov.w	r3, #32
   3456e:	f3ef 8811 	mrs	r8, BASEPRI
   34572:	f383 8811 	msr	BASEPRI, r3
   34576:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3457a:	4867      	ldr	r0, [pc, #412]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   3457c:	f7ff fe3a 	bl	341f4 <z_spin_lock_valid>
   34580:	b968      	cbnz	r0, 3459e <z_impl_k_mutex_lock+0x5e>
   34582:	2381      	movs	r3, #129	; 0x81
   34584:	4a65      	ldr	r2, [pc, #404]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   34586:	4966      	ldr	r1, [pc, #408]	; (34720 <z_impl_k_mutex_lock+0x1e0>)
   34588:	4861      	ldr	r0, [pc, #388]	; (34710 <z_impl_k_mutex_lock+0x1d0>)
   3458a:	f004 fe16 	bl	391ba <printk>
   3458e:	4962      	ldr	r1, [pc, #392]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   34590:	4864      	ldr	r0, [pc, #400]	; (34724 <z_impl_k_mutex_lock+0x1e4>)
   34592:	f004 fe12 	bl	391ba <printk>
   34596:	2181      	movs	r1, #129	; 0x81
   34598:	4860      	ldr	r0, [pc, #384]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   3459a:	f005 f865 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   3459e:	485e      	ldr	r0, [pc, #376]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   345a0:	f7ff fe44 	bl	3422c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   345a4:	68e3      	ldr	r3, [r4, #12]
   345a6:	4a60      	ldr	r2, [pc, #384]	; (34728 <z_impl_k_mutex_lock+0x1e8>)
   345a8:	b30b      	cbz	r3, 345ee <z_impl_k_mutex_lock+0xae>
   345aa:	68a0      	ldr	r0, [r4, #8]
   345ac:	6891      	ldr	r1, [r2, #8]
   345ae:	4288      	cmp	r0, r1
   345b0:	d03d      	beq.n	3462e <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   345b2:	ea57 0306 	orrs.w	r3, r7, r6
   345b6:	d13c      	bne.n	34632 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   345b8:	4857      	ldr	r0, [pc, #348]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   345ba:	f7ff fe29 	bl	34210 <z_spin_unlock_valid>
   345be:	b968      	cbnz	r0, 345dc <z_impl_k_mutex_lock+0x9c>
   345c0:	23ac      	movs	r3, #172	; 0xac
   345c2:	4a56      	ldr	r2, [pc, #344]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   345c4:	4959      	ldr	r1, [pc, #356]	; (3472c <z_impl_k_mutex_lock+0x1ec>)
   345c6:	4852      	ldr	r0, [pc, #328]	; (34710 <z_impl_k_mutex_lock+0x1d0>)
   345c8:	f004 fdf7 	bl	391ba <printk>
   345cc:	4952      	ldr	r1, [pc, #328]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   345ce:	4858      	ldr	r0, [pc, #352]	; (34730 <z_impl_k_mutex_lock+0x1f0>)
   345d0:	f004 fdf3 	bl	391ba <printk>
   345d4:	21ac      	movs	r1, #172	; 0xac
   345d6:	4851      	ldr	r0, [pc, #324]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   345d8:	f005 f846 	bl	39668 <assert_post_action>
	__asm__ volatile(
   345dc:	f388 8811 	msr	BASEPRI, r8
   345e0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   345e4:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   345e8:	b002      	add	sp, #8
   345ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   345ee:	6891      	ldr	r1, [r2, #8]
   345f0:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   345f4:	3301      	adds	r3, #1
   345f6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   345f8:	6893      	ldr	r3, [r2, #8]
   345fa:	4847      	ldr	r0, [pc, #284]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   345fc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   345fe:	60a3      	str	r3, [r4, #8]
   34600:	f7ff fe06 	bl	34210 <z_spin_unlock_valid>
   34604:	b968      	cbnz	r0, 34622 <z_impl_k_mutex_lock+0xe2>
   34606:	23ac      	movs	r3, #172	; 0xac
   34608:	4a44      	ldr	r2, [pc, #272]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   3460a:	4948      	ldr	r1, [pc, #288]	; (3472c <z_impl_k_mutex_lock+0x1ec>)
   3460c:	4840      	ldr	r0, [pc, #256]	; (34710 <z_impl_k_mutex_lock+0x1d0>)
   3460e:	f004 fdd4 	bl	391ba <printk>
   34612:	4941      	ldr	r1, [pc, #260]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   34614:	4846      	ldr	r0, [pc, #280]	; (34730 <z_impl_k_mutex_lock+0x1f0>)
   34616:	f004 fdd0 	bl	391ba <printk>
   3461a:	21ac      	movs	r1, #172	; 0xac
   3461c:	483f      	ldr	r0, [pc, #252]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   3461e:	f005 f823 	bl	39668 <assert_post_action>
   34622:	f388 8811 	msr	BASEPRI, r8
   34626:	f3bf 8f6f 	isb	sy
		return 0;
   3462a:	2000      	movs	r0, #0
   3462c:	e7dc      	b.n	345e8 <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
   3462e:	6921      	ldr	r1, [r4, #16]
   34630:	e7e0      	b.n	345f4 <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   34632:	f991 100e 	ldrsb.w	r1, [r1, #14]
   34636:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   3463a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   3463e:	4299      	cmp	r1, r3
   34640:	bfa8      	it	ge
   34642:	4619      	movge	r1, r3
   34644:	4291      	cmp	r1, r2
   34646:	bfb8      	it	lt
   34648:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   3464a:	428b      	cmp	r3, r1
   3464c:	dd53      	ble.n	346f6 <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
   3464e:	f008 feda 	bl	3d406 <adjust_owner_prio.isra.0>
   34652:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   34654:	4622      	mov	r2, r4
   34656:	4641      	mov	r1, r8
   34658:	e9cd 7600 	strd	r7, r6, [sp]
   3465c:	482e      	ldr	r0, [pc, #184]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   3465e:	f001 f94b 	bl	358f8 <z_pend_curr>
	if (got_mutex == 0) {
   34662:	2800      	cmp	r0, #0
   34664:	d0e1      	beq.n	3462a <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
   34666:	f04f 0320 	mov.w	r3, #32
   3466a:	f3ef 8611 	mrs	r6, BASEPRI
   3466e:	f383 8811 	msr	BASEPRI, r3
   34672:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34676:	4828      	ldr	r0, [pc, #160]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   34678:	f7ff fdbc 	bl	341f4 <z_spin_lock_valid>
   3467c:	b968      	cbnz	r0, 3469a <z_impl_k_mutex_lock+0x15a>
   3467e:	2381      	movs	r3, #129	; 0x81
   34680:	4a26      	ldr	r2, [pc, #152]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   34682:	4927      	ldr	r1, [pc, #156]	; (34720 <z_impl_k_mutex_lock+0x1e0>)
   34684:	4822      	ldr	r0, [pc, #136]	; (34710 <z_impl_k_mutex_lock+0x1d0>)
   34686:	f004 fd98 	bl	391ba <printk>
   3468a:	4923      	ldr	r1, [pc, #140]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   3468c:	4825      	ldr	r0, [pc, #148]	; (34724 <z_impl_k_mutex_lock+0x1e4>)
   3468e:	f004 fd94 	bl	391ba <printk>
   34692:	2181      	movs	r1, #129	; 0x81
   34694:	4821      	ldr	r0, [pc, #132]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   34696:	f004 ffe7 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   3469a:	481f      	ldr	r0, [pc, #124]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   3469c:	f7ff fdc6 	bl	3422c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   346a0:	6823      	ldr	r3, [r4, #0]
   346a2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   346a4:	429c      	cmp	r4, r3
   346a6:	d00a      	beq.n	346be <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   346a8:	b14b      	cbz	r3, 346be <z_impl_k_mutex_lock+0x17e>
   346aa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   346ae:	4299      	cmp	r1, r3
   346b0:	bfa8      	it	ge
   346b2:	4619      	movge	r1, r3
   346b4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   346b8:	4299      	cmp	r1, r3
   346ba:	bfb8      	it	lt
   346bc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   346be:	68a0      	ldr	r0, [r4, #8]
   346c0:	f008 fea1 	bl	3d406 <adjust_owner_prio.isra.0>
   346c4:	b9c8      	cbnz	r0, 346fa <z_impl_k_mutex_lock+0x1ba>
   346c6:	b9c5      	cbnz	r5, 346fa <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   346c8:	4813      	ldr	r0, [pc, #76]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   346ca:	f7ff fda1 	bl	34210 <z_spin_unlock_valid>
   346ce:	b968      	cbnz	r0, 346ec <z_impl_k_mutex_lock+0x1ac>
   346d0:	23ac      	movs	r3, #172	; 0xac
   346d2:	4a12      	ldr	r2, [pc, #72]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   346d4:	4915      	ldr	r1, [pc, #84]	; (3472c <z_impl_k_mutex_lock+0x1ec>)
   346d6:	480e      	ldr	r0, [pc, #56]	; (34710 <z_impl_k_mutex_lock+0x1d0>)
   346d8:	f004 fd6f 	bl	391ba <printk>
   346dc:	490e      	ldr	r1, [pc, #56]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   346de:	4814      	ldr	r0, [pc, #80]	; (34730 <z_impl_k_mutex_lock+0x1f0>)
   346e0:	f004 fd6b 	bl	391ba <printk>
   346e4:	21ac      	movs	r1, #172	; 0xac
   346e6:	480d      	ldr	r0, [pc, #52]	; (3471c <z_impl_k_mutex_lock+0x1dc>)
   346e8:	f004 ffbe 	bl	39668 <assert_post_action>
	__asm__ volatile(
   346ec:	f386 8811 	msr	BASEPRI, r6
   346f0:	f3bf 8f6f 	isb	sy
   346f4:	e005      	b.n	34702 <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
   346f6:	2500      	movs	r5, #0
   346f8:	e7ac      	b.n	34654 <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
   346fa:	4631      	mov	r1, r6
   346fc:	4806      	ldr	r0, [pc, #24]	; (34718 <z_impl_k_mutex_lock+0x1d8>)
   346fe:	f000 fe97 	bl	35430 <z_reschedule>
	return -EAGAIN;
   34702:	f06f 000a 	mvn.w	r0, #10
   34706:	e76f      	b.n	345e8 <z_impl_k_mutex_lock+0xa8>
   34708:	00042aef 	.word	0x00042aef
   3470c:	00042bbe 	.word	0x00042bbe
   34710:	0003f0e1 	.word	0x0003f0e1
   34714:	00042be0 	.word	0x00042be0
   34718:	20017f90 	.word	0x20017f90
   3471c:	0003f1a1 	.word	0x0003f1a1
   34720:	0003f1f3 	.word	0x0003f1f3
   34724:	0003f208 	.word	0x0003f208
   34728:	20017f60 	.word	0x20017f60
   3472c:	0003f1c7 	.word	0x0003f1c7
   34730:	0003f1de 	.word	0x0003f1de

00034734 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   34734:	b538      	push	{r3, r4, r5, lr}
   34736:	4604      	mov	r4, r0
   34738:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   3473c:	b163      	cbz	r3, 34758 <z_impl_k_mutex_unlock+0x24>
   3473e:	4950      	ldr	r1, [pc, #320]	; (34880 <z_impl_k_mutex_unlock+0x14c>)
   34740:	23c7      	movs	r3, #199	; 0xc7
   34742:	4a50      	ldr	r2, [pc, #320]	; (34884 <z_impl_k_mutex_unlock+0x150>)
   34744:	4850      	ldr	r0, [pc, #320]	; (34888 <z_impl_k_mutex_unlock+0x154>)
   34746:	f004 fd38 	bl	391ba <printk>
   3474a:	4850      	ldr	r0, [pc, #320]	; (3488c <z_impl_k_mutex_unlock+0x158>)
   3474c:	f004 fd35 	bl	391ba <printk>
   34750:	21c7      	movs	r1, #199	; 0xc7
   34752:	484c      	ldr	r0, [pc, #304]	; (34884 <z_impl_k_mutex_unlock+0x150>)
   34754:	f004 ff88 	bl	39668 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   34758:	68a3      	ldr	r3, [r4, #8]
   3475a:	2b00      	cmp	r3, #0
   3475c:	f000 8089 	beq.w	34872 <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   34760:	4d4b      	ldr	r5, [pc, #300]	; (34890 <z_impl_k_mutex_unlock+0x15c>)
   34762:	68aa      	ldr	r2, [r5, #8]
   34764:	4293      	cmp	r3, r2
   34766:	f040 8087 	bne.w	34878 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   3476a:	68e3      	ldr	r3, [r4, #12]
   3476c:	b94b      	cbnz	r3, 34782 <z_impl_k_mutex_unlock+0x4e>
   3476e:	4949      	ldr	r1, [pc, #292]	; (34894 <z_impl_k_mutex_unlock+0x160>)
   34770:	4845      	ldr	r0, [pc, #276]	; (34888 <z_impl_k_mutex_unlock+0x154>)
   34772:	23df      	movs	r3, #223	; 0xdf
   34774:	4a43      	ldr	r2, [pc, #268]	; (34884 <z_impl_k_mutex_unlock+0x150>)
   34776:	f004 fd20 	bl	391ba <printk>
   3477a:	21df      	movs	r1, #223	; 0xdf
   3477c:	4841      	ldr	r0, [pc, #260]	; (34884 <z_impl_k_mutex_unlock+0x150>)
   3477e:	f004 ff73 	bl	39668 <assert_post_action>
   34782:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   34786:	b163      	cbz	r3, 347a2 <z_impl_k_mutex_unlock+0x6e>
   34788:	493d      	ldr	r1, [pc, #244]	; (34880 <z_impl_k_mutex_unlock+0x14c>)
   3478a:	23fd      	movs	r3, #253	; 0xfd
   3478c:	4a42      	ldr	r2, [pc, #264]	; (34898 <z_impl_k_mutex_unlock+0x164>)
   3478e:	483e      	ldr	r0, [pc, #248]	; (34888 <z_impl_k_mutex_unlock+0x154>)
   34790:	f004 fd13 	bl	391ba <printk>
   34794:	4841      	ldr	r0, [pc, #260]	; (3489c <z_impl_k_mutex_unlock+0x168>)
   34796:	f004 fd10 	bl	391ba <printk>
   3479a:	21fd      	movs	r1, #253	; 0xfd
   3479c:	483e      	ldr	r0, [pc, #248]	; (34898 <z_impl_k_mutex_unlock+0x164>)
   3479e:	f004 ff63 	bl	39668 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   347a2:	68ab      	ldr	r3, [r5, #8]
   347a4:	7bdb      	ldrb	r3, [r3, #15]
   347a6:	2b01      	cmp	r3, #1
   347a8:	d10c      	bne.n	347c4 <z_impl_k_mutex_unlock+0x90>
   347aa:	493d      	ldr	r1, [pc, #244]	; (348a0 <z_impl_k_mutex_unlock+0x16c>)
   347ac:	23fe      	movs	r3, #254	; 0xfe
   347ae:	4a3a      	ldr	r2, [pc, #232]	; (34898 <z_impl_k_mutex_unlock+0x164>)
   347b0:	4835      	ldr	r0, [pc, #212]	; (34888 <z_impl_k_mutex_unlock+0x154>)
   347b2:	f004 fd02 	bl	391ba <printk>
   347b6:	4839      	ldr	r0, [pc, #228]	; (3489c <z_impl_k_mutex_unlock+0x168>)
   347b8:	f004 fcff 	bl	391ba <printk>
   347bc:	21fe      	movs	r1, #254	; 0xfe
   347be:	4836      	ldr	r0, [pc, #216]	; (34898 <z_impl_k_mutex_unlock+0x164>)
   347c0:	f004 ff52 	bl	39668 <assert_post_action>

	--_current->base.sched_locked;
   347c4:	68aa      	ldr	r2, [r5, #8]
   347c6:	7bd3      	ldrb	r3, [r2, #15]
   347c8:	3b01      	subs	r3, #1
   347ca:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   347cc:	68e3      	ldr	r3, [r4, #12]
   347ce:	2b01      	cmp	r3, #1
   347d0:	d905      	bls.n	347de <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   347d2:	3b01      	subs	r3, #1
   347d4:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   347d6:	f000 ff37 	bl	35648 <k_sched_unlock>

	return 0;
   347da:	2000      	movs	r0, #0
}
   347dc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   347de:	f04f 0320 	mov.w	r3, #32
   347e2:	f3ef 8511 	mrs	r5, BASEPRI
   347e6:	f383 8811 	msr	BASEPRI, r3
   347ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   347ee:	482d      	ldr	r0, [pc, #180]	; (348a4 <z_impl_k_mutex_unlock+0x170>)
   347f0:	f7ff fd00 	bl	341f4 <z_spin_lock_valid>
   347f4:	b968      	cbnz	r0, 34812 <z_impl_k_mutex_unlock+0xde>
   347f6:	2381      	movs	r3, #129	; 0x81
   347f8:	4a2b      	ldr	r2, [pc, #172]	; (348a8 <z_impl_k_mutex_unlock+0x174>)
   347fa:	492c      	ldr	r1, [pc, #176]	; (348ac <z_impl_k_mutex_unlock+0x178>)
   347fc:	4822      	ldr	r0, [pc, #136]	; (34888 <z_impl_k_mutex_unlock+0x154>)
   347fe:	f004 fcdc 	bl	391ba <printk>
   34802:	4928      	ldr	r1, [pc, #160]	; (348a4 <z_impl_k_mutex_unlock+0x170>)
   34804:	482a      	ldr	r0, [pc, #168]	; (348b0 <z_impl_k_mutex_unlock+0x17c>)
   34806:	f004 fcd8 	bl	391ba <printk>
   3480a:	2181      	movs	r1, #129	; 0x81
   3480c:	4826      	ldr	r0, [pc, #152]	; (348a8 <z_impl_k_mutex_unlock+0x174>)
   3480e:	f004 ff2b 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   34812:	4824      	ldr	r0, [pc, #144]	; (348a4 <z_impl_k_mutex_unlock+0x170>)
   34814:	f7ff fd0a 	bl	3422c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   34818:	6921      	ldr	r1, [r4, #16]
   3481a:	68a0      	ldr	r0, [r4, #8]
   3481c:	f008 fdf3 	bl	3d406 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   34820:	4620      	mov	r0, r4
   34822:	f001 fb7d 	bl	35f20 <z_unpend_first_thread>
	mutex->owner = new_owner;
   34826:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   34828:	b158      	cbz	r0, 34842 <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
   3482a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   3482e:	6122      	str	r2, [r4, #16]
   34830:	2200      	movs	r2, #0
   34832:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   34834:	f000 fd6c 	bl	35310 <z_ready_thread>
		z_reschedule(&lock, key);
   34838:	4629      	mov	r1, r5
   3483a:	481a      	ldr	r0, [pc, #104]	; (348a4 <z_impl_k_mutex_unlock+0x170>)
   3483c:	f000 fdf8 	bl	35430 <z_reschedule>
   34840:	e7c9      	b.n	347d6 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   34842:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34844:	4817      	ldr	r0, [pc, #92]	; (348a4 <z_impl_k_mutex_unlock+0x170>)
   34846:	f7ff fce3 	bl	34210 <z_spin_unlock_valid>
   3484a:	b968      	cbnz	r0, 34868 <z_impl_k_mutex_unlock+0x134>
   3484c:	23ac      	movs	r3, #172	; 0xac
   3484e:	4a16      	ldr	r2, [pc, #88]	; (348a8 <z_impl_k_mutex_unlock+0x174>)
   34850:	4918      	ldr	r1, [pc, #96]	; (348b4 <z_impl_k_mutex_unlock+0x180>)
   34852:	480d      	ldr	r0, [pc, #52]	; (34888 <z_impl_k_mutex_unlock+0x154>)
   34854:	f004 fcb1 	bl	391ba <printk>
   34858:	4912      	ldr	r1, [pc, #72]	; (348a4 <z_impl_k_mutex_unlock+0x170>)
   3485a:	4817      	ldr	r0, [pc, #92]	; (348b8 <z_impl_k_mutex_unlock+0x184>)
   3485c:	f004 fcad 	bl	391ba <printk>
   34860:	21ac      	movs	r1, #172	; 0xac
   34862:	4811      	ldr	r0, [pc, #68]	; (348a8 <z_impl_k_mutex_unlock+0x174>)
   34864:	f004 ff00 	bl	39668 <assert_post_action>
	__asm__ volatile(
   34868:	f385 8811 	msr	BASEPRI, r5
   3486c:	f3bf 8f6f 	isb	sy
   34870:	e7b1      	b.n	347d6 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   34872:	f06f 0015 	mvn.w	r0, #21
   34876:	e7b1      	b.n	347dc <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   34878:	f04f 30ff 	mov.w	r0, #4294967295
   3487c:	e7ae      	b.n	347dc <z_impl_k_mutex_unlock+0xa8>
   3487e:	bf00      	nop
   34880:	00042aef 	.word	0x00042aef
   34884:	00042bbe 	.word	0x00042bbe
   34888:	0003f0e1 	.word	0x0003f0e1
   3488c:	00042be0 	.word	0x00042be0
   34890:	20017f60 	.word	0x20017f60
   34894:	00042c05 	.word	0x00042c05
   34898:	00042c1c 	.word	0x00042c1c
   3489c:	0003f6c8 	.word	0x0003f6c8
   348a0:	00042c47 	.word	0x00042c47
   348a4:	20017f90 	.word	0x20017f90
   348a8:	0003f1a1 	.word	0x0003f1a1
   348ac:	0003f1f3 	.word	0x0003f1f3
   348b0:	0003f208 	.word	0x0003f208
   348b4:	0003f1c7 	.word	0x0003f1c7
   348b8:	0003f1de 	.word	0x0003f1de

000348bc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   348bc:	b538      	push	{r3, r4, r5, lr}
   348be:	4604      	mov	r4, r0
	__asm__ volatile(
   348c0:	f04f 0320 	mov.w	r3, #32
   348c4:	f3ef 8511 	mrs	r5, BASEPRI
   348c8:	f383 8811 	msr	BASEPRI, r3
   348cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   348d0:	4817      	ldr	r0, [pc, #92]	; (34930 <z_impl_k_sem_give+0x74>)
   348d2:	f7ff fc8f 	bl	341f4 <z_spin_lock_valid>
   348d6:	b968      	cbnz	r0, 348f4 <z_impl_k_sem_give+0x38>
   348d8:	2381      	movs	r3, #129	; 0x81
   348da:	4a16      	ldr	r2, [pc, #88]	; (34934 <z_impl_k_sem_give+0x78>)
   348dc:	4916      	ldr	r1, [pc, #88]	; (34938 <z_impl_k_sem_give+0x7c>)
   348de:	4817      	ldr	r0, [pc, #92]	; (3493c <z_impl_k_sem_give+0x80>)
   348e0:	f004 fc6b 	bl	391ba <printk>
   348e4:	4912      	ldr	r1, [pc, #72]	; (34930 <z_impl_k_sem_give+0x74>)
   348e6:	4816      	ldr	r0, [pc, #88]	; (34940 <z_impl_k_sem_give+0x84>)
   348e8:	f004 fc67 	bl	391ba <printk>
   348ec:	2181      	movs	r1, #129	; 0x81
   348ee:	4811      	ldr	r0, [pc, #68]	; (34934 <z_impl_k_sem_give+0x78>)
   348f0:	f004 feba 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   348f4:	480e      	ldr	r0, [pc, #56]	; (34930 <z_impl_k_sem_give+0x74>)
   348f6:	f7ff fc99 	bl	3422c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   348fa:	4620      	mov	r0, r4
   348fc:	f001 fb10 	bl	35f20 <z_unpend_first_thread>

	if (thread != NULL) {
   34900:	b148      	cbz	r0, 34916 <z_impl_k_sem_give+0x5a>
   34902:	2200      	movs	r2, #0
   34904:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   34906:	f000 fd03 	bl	35310 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   3490a:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   3490c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   34910:	4807      	ldr	r0, [pc, #28]	; (34930 <z_impl_k_sem_give+0x74>)
   34912:	f000 bd8d 	b.w	35430 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   34916:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   3491a:	429a      	cmp	r2, r3
   3491c:	bf18      	it	ne
   3491e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   34920:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   34922:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   34924:	f104 0010 	add.w	r0, r4, #16
   34928:	f008 fe54 	bl	3d5d4 <z_handle_obj_poll_events>
}
   3492c:	e7ed      	b.n	3490a <z_impl_k_sem_give+0x4e>
   3492e:	bf00      	nop
   34930:	20017f94 	.word	0x20017f94
   34934:	0003f1a1 	.word	0x0003f1a1
   34938:	0003f1f3 	.word	0x0003f1f3
   3493c:	0003f0e1 	.word	0x0003f0e1
   34940:	0003f208 	.word	0x0003f208

00034944 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   34944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34946:	4604      	mov	r4, r0
   34948:	4617      	mov	r7, r2
   3494a:	461d      	mov	r5, r3
   3494c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   34950:	b17b      	cbz	r3, 34972 <z_impl_k_sem_take+0x2e>
   34952:	ea52 0305 	orrs.w	r3, r2, r5
   34956:	d00c      	beq.n	34972 <z_impl_k_sem_take+0x2e>
   34958:	4935      	ldr	r1, [pc, #212]	; (34a30 <z_impl_k_sem_take+0xec>)
   3495a:	2379      	movs	r3, #121	; 0x79
   3495c:	4a35      	ldr	r2, [pc, #212]	; (34a34 <z_impl_k_sem_take+0xf0>)
   3495e:	4836      	ldr	r0, [pc, #216]	; (34a38 <z_impl_k_sem_take+0xf4>)
   34960:	f004 fc2b 	bl	391ba <printk>
   34964:	4835      	ldr	r0, [pc, #212]	; (34a3c <z_impl_k_sem_take+0xf8>)
   34966:	f004 fc28 	bl	391ba <printk>
   3496a:	2179      	movs	r1, #121	; 0x79
   3496c:	4831      	ldr	r0, [pc, #196]	; (34a34 <z_impl_k_sem_take+0xf0>)
   3496e:	f004 fe7b 	bl	39668 <assert_post_action>
   34972:	f04f 0320 	mov.w	r3, #32
   34976:	f3ef 8611 	mrs	r6, BASEPRI
   3497a:	f383 8811 	msr	BASEPRI, r3
   3497e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34982:	482f      	ldr	r0, [pc, #188]	; (34a40 <z_impl_k_sem_take+0xfc>)
   34984:	f7ff fc36 	bl	341f4 <z_spin_lock_valid>
   34988:	b968      	cbnz	r0, 349a6 <z_impl_k_sem_take+0x62>
   3498a:	2381      	movs	r3, #129	; 0x81
   3498c:	4a2d      	ldr	r2, [pc, #180]	; (34a44 <z_impl_k_sem_take+0x100>)
   3498e:	492e      	ldr	r1, [pc, #184]	; (34a48 <z_impl_k_sem_take+0x104>)
   34990:	4829      	ldr	r0, [pc, #164]	; (34a38 <z_impl_k_sem_take+0xf4>)
   34992:	f004 fc12 	bl	391ba <printk>
   34996:	492a      	ldr	r1, [pc, #168]	; (34a40 <z_impl_k_sem_take+0xfc>)
   34998:	482c      	ldr	r0, [pc, #176]	; (34a4c <z_impl_k_sem_take+0x108>)
   3499a:	f004 fc0e 	bl	391ba <printk>
   3499e:	2181      	movs	r1, #129	; 0x81
   349a0:	4828      	ldr	r0, [pc, #160]	; (34a44 <z_impl_k_sem_take+0x100>)
   349a2:	f004 fe61 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   349a6:	4826      	ldr	r0, [pc, #152]	; (34a40 <z_impl_k_sem_take+0xfc>)
   349a8:	f7ff fc40 	bl	3422c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   349ac:	68a3      	ldr	r3, [r4, #8]
   349ae:	b1d3      	cbz	r3, 349e6 <z_impl_k_sem_take+0xa2>
		sem->count--;
   349b0:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   349b2:	4823      	ldr	r0, [pc, #140]	; (34a40 <z_impl_k_sem_take+0xfc>)
   349b4:	60a3      	str	r3, [r4, #8]
   349b6:	f7ff fc2b 	bl	34210 <z_spin_unlock_valid>
   349ba:	b968      	cbnz	r0, 349d8 <z_impl_k_sem_take+0x94>
   349bc:	23ac      	movs	r3, #172	; 0xac
   349be:	4a21      	ldr	r2, [pc, #132]	; (34a44 <z_impl_k_sem_take+0x100>)
   349c0:	4923      	ldr	r1, [pc, #140]	; (34a50 <z_impl_k_sem_take+0x10c>)
   349c2:	481d      	ldr	r0, [pc, #116]	; (34a38 <z_impl_k_sem_take+0xf4>)
   349c4:	f004 fbf9 	bl	391ba <printk>
   349c8:	491d      	ldr	r1, [pc, #116]	; (34a40 <z_impl_k_sem_take+0xfc>)
   349ca:	4822      	ldr	r0, [pc, #136]	; (34a54 <z_impl_k_sem_take+0x110>)
   349cc:	f004 fbf5 	bl	391ba <printk>
   349d0:	21ac      	movs	r1, #172	; 0xac
   349d2:	481c      	ldr	r0, [pc, #112]	; (34a44 <z_impl_k_sem_take+0x100>)
   349d4:	f004 fe48 	bl	39668 <assert_post_action>
	__asm__ volatile(
   349d8:	f386 8811 	msr	BASEPRI, r6
   349dc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   349e0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   349e2:	b003      	add	sp, #12
   349e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   349e6:	ea57 0305 	orrs.w	r3, r7, r5
   349ea:	d118      	bne.n	34a1e <z_impl_k_sem_take+0xda>
   349ec:	4814      	ldr	r0, [pc, #80]	; (34a40 <z_impl_k_sem_take+0xfc>)
   349ee:	f7ff fc0f 	bl	34210 <z_spin_unlock_valid>
   349f2:	b968      	cbnz	r0, 34a10 <z_impl_k_sem_take+0xcc>
   349f4:	23ac      	movs	r3, #172	; 0xac
   349f6:	4a13      	ldr	r2, [pc, #76]	; (34a44 <z_impl_k_sem_take+0x100>)
   349f8:	4915      	ldr	r1, [pc, #84]	; (34a50 <z_impl_k_sem_take+0x10c>)
   349fa:	480f      	ldr	r0, [pc, #60]	; (34a38 <z_impl_k_sem_take+0xf4>)
   349fc:	f004 fbdd 	bl	391ba <printk>
   34a00:	490f      	ldr	r1, [pc, #60]	; (34a40 <z_impl_k_sem_take+0xfc>)
   34a02:	4814      	ldr	r0, [pc, #80]	; (34a54 <z_impl_k_sem_take+0x110>)
   34a04:	f004 fbd9 	bl	391ba <printk>
   34a08:	21ac      	movs	r1, #172	; 0xac
   34a0a:	480e      	ldr	r0, [pc, #56]	; (34a44 <z_impl_k_sem_take+0x100>)
   34a0c:	f004 fe2c 	bl	39668 <assert_post_action>
   34a10:	f386 8811 	msr	BASEPRI, r6
   34a14:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   34a18:	f06f 000f 	mvn.w	r0, #15
   34a1c:	e7e1      	b.n	349e2 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   34a1e:	4622      	mov	r2, r4
   34a20:	4631      	mov	r1, r6
   34a22:	e9cd 7500 	strd	r7, r5, [sp]
   34a26:	4806      	ldr	r0, [pc, #24]	; (34a40 <z_impl_k_sem_take+0xfc>)
   34a28:	f000 ff66 	bl	358f8 <z_pend_curr>
	return ret;
   34a2c:	e7d9      	b.n	349e2 <z_impl_k_sem_take+0x9e>
   34a2e:	bf00      	nop
   34a30:	00042c98 	.word	0x00042c98
   34a34:	00042c78 	.word	0x00042c78
   34a38:	0003f0e1 	.word	0x0003f0e1
   34a3c:	0003f6c8 	.word	0x0003f6c8
   34a40:	20017f94 	.word	0x20017f94
   34a44:	0003f1a1 	.word	0x0003f1a1
   34a48:	0003f1f3 	.word	0x0003f1f3
   34a4c:	0003f208 	.word	0x0003f208
   34a50:	0003f1c7 	.word	0x0003f1c7
   34a54:	0003f1de 	.word	0x0003f1de

00034a58 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   34a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34a5c:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34a5e:	4d7d      	ldr	r5, [pc, #500]	; (34c54 <work_queue_main+0x1fc>)
	return list->head;
   34a60:	4f7d      	ldr	r7, [pc, #500]	; (34c58 <work_queue_main+0x200>)
   34a62:	b085      	sub	sp, #20
	__asm__ volatile(
   34a64:	f04f 0320 	mov.w	r3, #32
   34a68:	f3ef 8811 	mrs	r8, BASEPRI
   34a6c:	f383 8811 	msr	BASEPRI, r3
   34a70:	f3bf 8f6f 	isb	sy
   34a74:	4628      	mov	r0, r5
   34a76:	f7ff fbbd 	bl	341f4 <z_spin_lock_valid>
   34a7a:	b968      	cbnz	r0, 34a98 <work_queue_main+0x40>
   34a7c:	2381      	movs	r3, #129	; 0x81
   34a7e:	4a77      	ldr	r2, [pc, #476]	; (34c5c <work_queue_main+0x204>)
   34a80:	4977      	ldr	r1, [pc, #476]	; (34c60 <work_queue_main+0x208>)
   34a82:	4878      	ldr	r0, [pc, #480]	; (34c64 <work_queue_main+0x20c>)
   34a84:	f004 fb99 	bl	391ba <printk>
   34a88:	4629      	mov	r1, r5
   34a8a:	4877      	ldr	r0, [pc, #476]	; (34c68 <work_queue_main+0x210>)
   34a8c:	f004 fb95 	bl	391ba <printk>
   34a90:	2181      	movs	r1, #129	; 0x81
   34a92:	4872      	ldr	r0, [pc, #456]	; (34c5c <work_queue_main+0x204>)
   34a94:	f004 fde8 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   34a98:	4628      	mov	r0, r5
   34a9a:	f7ff fbc7 	bl	3422c <z_spin_lock_set_owner>
   34a9e:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   34aa2:	b9b6      	cbnz	r6, 34ad2 <work_queue_main+0x7a>
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   34aa4:	2102      	movs	r1, #2
   34aa6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   34aaa:	f008 fccb 	bl	3d444 <flag_test_and_clear>
   34aae:	2800      	cmp	r0, #0
   34ab0:	f040 8094 	bne.w	34bdc <work_queue_main+0x184>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   34ab4:	2300      	movs	r3, #0
   34ab6:	f04f 32ff 	mov.w	r2, #4294967295
   34aba:	9302      	str	r3, [sp, #8]
   34abc:	f04f 33ff 	mov.w	r3, #4294967295
   34ac0:	4641      	mov	r1, r8
   34ac2:	e9cd 2300 	strd	r2, r3, [sp]
   34ac6:	4628      	mov	r0, r5
   34ac8:	f104 0288 	add.w	r2, r4, #136	; 0x88
   34acc:	f001 fd30 	bl	36530 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   34ad0:	e7c8      	b.n	34a64 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   34ad2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   34ad6:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   34ad8:	4296      	cmp	r6, r2
	list->tail = node;
   34ada:	bf08      	it	eq
   34adc:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	list->head = node;
   34ae0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	*flagp |= BIT(bit);
   34ae4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34ae8:	4628      	mov	r0, r5
   34aea:	f043 0302 	orr.w	r3, r3, #2
   34aee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   34af2:	68f3      	ldr	r3, [r6, #12]
			handler = work->handler;
   34af4:	f8d6 9004 	ldr.w	r9, [r6, #4]
	*flagp &= ~BIT(bit);
   34af8:	f023 0304 	bic.w	r3, r3, #4
   34afc:	f043 0301 	orr.w	r3, r3, #1
   34b00:	60f3      	str	r3, [r6, #12]
   34b02:	f7ff fb85 	bl	34210 <z_spin_unlock_valid>
   34b06:	b968      	cbnz	r0, 34b24 <work_queue_main+0xcc>
   34b08:	23ac      	movs	r3, #172	; 0xac
   34b0a:	4a54      	ldr	r2, [pc, #336]	; (34c5c <work_queue_main+0x204>)
   34b0c:	4957      	ldr	r1, [pc, #348]	; (34c6c <work_queue_main+0x214>)
   34b0e:	4855      	ldr	r0, [pc, #340]	; (34c64 <work_queue_main+0x20c>)
   34b10:	f004 fb53 	bl	391ba <printk>
   34b14:	4629      	mov	r1, r5
   34b16:	4856      	ldr	r0, [pc, #344]	; (34c70 <work_queue_main+0x218>)
   34b18:	f004 fb4f 	bl	391ba <printk>
   34b1c:	21ac      	movs	r1, #172	; 0xac
   34b1e:	484f      	ldr	r0, [pc, #316]	; (34c5c <work_queue_main+0x204>)
   34b20:	f004 fda2 	bl	39668 <assert_post_action>
	__asm__ volatile(
   34b24:	f388 8811 	msr	BASEPRI, r8
   34b28:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   34b2c:	f1b9 0f00 	cmp.w	r9, #0
   34b30:	d10b      	bne.n	34b4a <work_queue_main+0xf2>
   34b32:	4950      	ldr	r1, [pc, #320]	; (34c74 <work_queue_main+0x21c>)
   34b34:	484b      	ldr	r0, [pc, #300]	; (34c64 <work_queue_main+0x20c>)
   34b36:	f240 237d 	movw	r3, #637	; 0x27d
   34b3a:	4a4f      	ldr	r2, [pc, #316]	; (34c78 <work_queue_main+0x220>)
   34b3c:	f004 fb3d 	bl	391ba <printk>
   34b40:	f240 217d 	movw	r1, #637	; 0x27d
   34b44:	484c      	ldr	r0, [pc, #304]	; (34c78 <work_queue_main+0x220>)
   34b46:	f004 fd8f 	bl	39668 <assert_post_action>
			handler(work);
   34b4a:	4630      	mov	r0, r6
   34b4c:	47c8      	blx	r9
	__asm__ volatile(
   34b4e:	f04f 0320 	mov.w	r3, #32
   34b52:	f3ef 8811 	mrs	r8, BASEPRI
   34b56:	f383 8811 	msr	BASEPRI, r3
   34b5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34b5e:	4628      	mov	r0, r5
   34b60:	f7ff fb48 	bl	341f4 <z_spin_lock_valid>
   34b64:	b968      	cbnz	r0, 34b82 <work_queue_main+0x12a>
   34b66:	2381      	movs	r3, #129	; 0x81
   34b68:	4a3c      	ldr	r2, [pc, #240]	; (34c5c <work_queue_main+0x204>)
   34b6a:	493d      	ldr	r1, [pc, #244]	; (34c60 <work_queue_main+0x208>)
   34b6c:	483d      	ldr	r0, [pc, #244]	; (34c64 <work_queue_main+0x20c>)
   34b6e:	f004 fb24 	bl	391ba <printk>
   34b72:	4629      	mov	r1, r5
   34b74:	483c      	ldr	r0, [pc, #240]	; (34c68 <work_queue_main+0x210>)
   34b76:	f004 fb20 	bl	391ba <printk>
   34b7a:	2181      	movs	r1, #129	; 0x81
   34b7c:	4837      	ldr	r0, [pc, #220]	; (34c5c <work_queue_main+0x204>)
   34b7e:	f004 fd73 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   34b82:	4628      	mov	r0, r5
   34b84:	f7ff fb52 	bl	3422c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   34b88:	68f3      	ldr	r3, [r6, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34b8a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   34b8c:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34b90:	d42e      	bmi.n	34bf0 <work_queue_main+0x198>
	*flagp &= ~BIT(bit);
   34b92:	60f2      	str	r2, [r6, #12]
   34b94:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34b98:	4628      	mov	r0, r5
   34b9a:	f023 0302 	bic.w	r3, r3, #2
   34b9e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   34ba2:	f3c3 2600 	ubfx	r6, r3, #8, #1
   34ba6:	f7ff fb33 	bl	34210 <z_spin_unlock_valid>
   34baa:	b968      	cbnz	r0, 34bc8 <work_queue_main+0x170>
   34bac:	23ac      	movs	r3, #172	; 0xac
   34bae:	4a2b      	ldr	r2, [pc, #172]	; (34c5c <work_queue_main+0x204>)
   34bb0:	492e      	ldr	r1, [pc, #184]	; (34c6c <work_queue_main+0x214>)
   34bb2:	482c      	ldr	r0, [pc, #176]	; (34c64 <work_queue_main+0x20c>)
   34bb4:	f004 fb01 	bl	391ba <printk>
   34bb8:	4629      	mov	r1, r5
   34bba:	482d      	ldr	r0, [pc, #180]	; (34c70 <work_queue_main+0x218>)
   34bbc:	f004 fafd 	bl	391ba <printk>
   34bc0:	21ac      	movs	r1, #172	; 0xac
   34bc2:	4826      	ldr	r0, [pc, #152]	; (34c5c <work_queue_main+0x204>)
   34bc4:	f004 fd50 	bl	39668 <assert_post_action>
	__asm__ volatile(
   34bc8:	f388 8811 	msr	BASEPRI, r8
   34bcc:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   34bd0:	2e00      	cmp	r6, #0
   34bd2:	f47f af47 	bne.w	34a64 <work_queue_main+0xc>
	z_impl_k_yield();
   34bd6:	f001 fa01 	bl	35fdc <z_impl_k_yield>
}
   34bda:	e743      	b.n	34a64 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   34bdc:	f104 0690 	add.w	r6, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   34be0:	2200      	movs	r2, #0
   34be2:	2101      	movs	r1, #1
   34be4:	4630      	mov	r0, r6
   34be6:	f001 fc47 	bl	36478 <z_sched_wake>
   34bea:	2800      	cmp	r0, #0
   34bec:	d1f8      	bne.n	34be0 <work_queue_main+0x188>
   34bee:	e761      	b.n	34ab4 <work_queue_main+0x5c>
	return list->head;
   34bf0:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   34bf2:	f023 0303 	bic.w	r3, r3, #3
   34bf6:	60f3      	str	r3, [r6, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   34bf8:	2800      	cmp	r0, #0
   34bfa:	d0cb      	beq.n	34b94 <work_queue_main+0x13c>
	return node->next;
   34bfc:	f04f 0900 	mov.w	r9, #0
	parent->next = child;
   34c00:	46cb      	mov	fp, r9
	return node->next;
   34c02:	f8d0 a000 	ldr.w	sl, [r0]
   34c06:	2800      	cmp	r0, #0
   34c08:	d0c4      	beq.n	34b94 <work_queue_main+0x13c>
		if (wc->work == work) {
   34c0a:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   34c0c:	4602      	mov	r2, r0
		if (wc->work == work) {
   34c0e:	429e      	cmp	r6, r3
   34c10:	d10d      	bne.n	34c2e <work_queue_main+0x1d6>
   34c12:	6803      	ldr	r3, [r0, #0]
	return list->tail;
   34c14:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   34c16:	f1b9 0f00 	cmp.w	r9, #0
   34c1a:	d111      	bne.n	34c40 <work_queue_main+0x1e8>
   34c1c:	4290      	cmp	r0, r2
	list->head = node;
   34c1e:	603b      	str	r3, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   34c20:	d100      	bne.n	34c24 <work_queue_main+0x1cc>
	list->tail = node;
   34c22:	607b      	str	r3, [r7, #4]
	parent->next = child;
   34c24:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   34c28:	f7ff fe48 	bl	348bc <z_impl_k_sem_give>
}
   34c2c:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   34c2e:	f1ba 0f00 	cmp.w	sl, #0
   34c32:	d00c      	beq.n	34c4e <work_queue_main+0x1f6>
	return node->next;
   34c34:	f8da 3000 	ldr.w	r3, [sl]
   34c38:	4650      	mov	r0, sl
   34c3a:	4691      	mov	r9, r2
   34c3c:	469a      	mov	sl, r3
   34c3e:	e7e2      	b.n	34c06 <work_queue_main+0x1ae>
Z_GENLIST_REMOVE(slist, snode)
   34c40:	4290      	cmp	r0, r2
	parent->next = child;
   34c42:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   34c46:	bf08      	it	eq
   34c48:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   34c4c:	e7ea      	b.n	34c24 <work_queue_main+0x1cc>
   34c4e:	4653      	mov	r3, sl
   34c50:	e7f2      	b.n	34c38 <work_queue_main+0x1e0>
   34c52:	bf00      	nop
   34c54:	20017fa0 	.word	0x20017fa0
   34c58:	20017f98 	.word	0x20017f98
   34c5c:	0003f1a1 	.word	0x0003f1a1
   34c60:	0003f1f3 	.word	0x0003f1f3
   34c64:	0003f0e1 	.word	0x0003f0e1
   34c68:	0003f208 	.word	0x0003f208
   34c6c:	0003f1c7 	.word	0x0003f1c7
   34c70:	0003f1de 	.word	0x0003f1de
   34c74:	00042d06 	.word	0x00042d06
   34c78:	00042ce5 	.word	0x00042ce5

00034c7c <submit_to_queue_locked>:
{
   34c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   34c7e:	68c3      	ldr	r3, [r0, #12]
{
   34c80:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34c82:	0799      	lsls	r1, r3, #30
{
   34c84:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34c86:	f3c3 0640 	ubfx	r6, r3, #1, #1
   34c8a:	d439      	bmi.n	34d00 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   34c8c:	075a      	lsls	r2, r3, #29
   34c8e:	d425      	bmi.n	34cdc <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   34c90:	683a      	ldr	r2, [r7, #0]
   34c92:	b90a      	cbnz	r2, 34c98 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   34c94:	6882      	ldr	r2, [r0, #8]
   34c96:	603a      	str	r2, [r7, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   34c98:	07dd      	lsls	r5, r3, #31
   34c9a:	d522      	bpl.n	34ce2 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   34c9c:	68a3      	ldr	r3, [r4, #8]
   34c9e:	b95b      	cbnz	r3, 34cb8 <submit_to_queue_locked+0x3c>
   34ca0:	4928      	ldr	r1, [pc, #160]	; (34d44 <submit_to_queue_locked+0xc8>)
   34ca2:	4829      	ldr	r0, [pc, #164]	; (34d48 <submit_to_queue_locked+0xcc>)
   34ca4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   34ca8:	4a28      	ldr	r2, [pc, #160]	; (34d4c <submit_to_queue_locked+0xd0>)
   34caa:	f004 fa86 	bl	391ba <printk>
   34cae:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   34cb2:	4826      	ldr	r0, [pc, #152]	; (34d4c <submit_to_queue_locked+0xd0>)
   34cb4:	f004 fcd8 	bl	39668 <assert_post_action>
			ret = 2;
   34cb8:	2602      	movs	r6, #2
			*queuep = work->queue;
   34cba:	68a3      	ldr	r3, [r4, #8]
   34cbc:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   34cbe:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   34cc0:	2d00      	cmp	r5, #0
   34cc2:	d03c      	beq.n	34d3e <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   34cc4:	4b22      	ldr	r3, [pc, #136]	; (34d50 <submit_to_queue_locked+0xd4>)
   34cc6:	689b      	ldr	r3, [r3, #8]
   34cc8:	42ab      	cmp	r3, r5
   34cca:	d00c      	beq.n	34ce6 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   34ccc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   34cd0:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   34cd2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   34cd6:	d416      	bmi.n	34d06 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   34cd8:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   34cdc:	2300      	movs	r3, #0
   34cde:	603b      	str	r3, [r7, #0]
	return ret;
   34ce0:	e027      	b.n	34d32 <submit_to_queue_locked+0xb6>
		ret = 1;
   34ce2:	2601      	movs	r6, #1
   34ce4:	e7eb      	b.n	34cbe <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   34ce6:	f008 fb7a 	bl	3d3de <k_is_in_isr>
   34cea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   34cee:	2800      	cmp	r0, #0
   34cf0:	d1ee      	bne.n	34cd0 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   34cf2:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   34cf4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   34cf8:	d5ee      	bpl.n	34cd8 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   34cfa:	b152      	cbz	r2, 34d12 <submit_to_queue_locked+0x96>
   34cfc:	075b      	lsls	r3, r3, #29
   34cfe:	d408      	bmi.n	34d12 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   34d00:	f06f 060f 	mvn.w	r6, #15
   34d04:	e7ea      	b.n	34cdc <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   34d06:	2a00      	cmp	r2, #0
   34d08:	d1fa      	bne.n	34d00 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   34d0a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   34d0e:	2b00      	cmp	r3, #0
   34d10:	d1f6      	bne.n	34d00 <submit_to_queue_locked+0x84>
	parent->next = child;
   34d12:	2300      	movs	r3, #0
   34d14:	6023      	str	r3, [r4, #0]
	return list->tail;
   34d16:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   34d1a:	b963      	cbnz	r3, 34d36 <submit_to_queue_locked+0xba>
	list->head = node;
   34d1c:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   34d20:	4628      	mov	r0, r5
   34d22:	f008 fb9a 	bl	3d45a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   34d26:	68e3      	ldr	r3, [r4, #12]
   34d28:	f043 0304 	orr.w	r3, r3, #4
   34d2c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   34d2e:	683b      	ldr	r3, [r7, #0]
   34d30:	60a3      	str	r3, [r4, #8]
}
   34d32:	4630      	mov	r0, r6
   34d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   34d36:	601c      	str	r4, [r3, #0]
	list->tail = node;
   34d38:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   34d3c:	e7f0      	b.n	34d20 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   34d3e:	f06f 0615 	mvn.w	r6, #21
   34d42:	e7cb      	b.n	34cdc <submit_to_queue_locked+0x60>
   34d44:	00042d1d 	.word	0x00042d1d
   34d48:	0003f0e1 	.word	0x0003f0e1
   34d4c:	00042ce5 	.word	0x00042ce5
   34d50:	20017f60 	.word	0x20017f60

00034d54 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   34d54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34d56:	4604      	mov	r4, r0
	__asm__ volatile(
   34d58:	f04f 0320 	mov.w	r3, #32
   34d5c:	f3ef 8511 	mrs	r5, BASEPRI
   34d60:	f383 8811 	msr	BASEPRI, r3
   34d64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34d68:	481d      	ldr	r0, [pc, #116]	; (34de0 <work_timeout+0x8c>)
   34d6a:	f7ff fa43 	bl	341f4 <z_spin_lock_valid>
   34d6e:	b968      	cbnz	r0, 34d8c <work_timeout+0x38>
   34d70:	2381      	movs	r3, #129	; 0x81
   34d72:	4a1c      	ldr	r2, [pc, #112]	; (34de4 <work_timeout+0x90>)
   34d74:	491c      	ldr	r1, [pc, #112]	; (34de8 <work_timeout+0x94>)
   34d76:	481d      	ldr	r0, [pc, #116]	; (34dec <work_timeout+0x98>)
   34d78:	f004 fa1f 	bl	391ba <printk>
   34d7c:	4918      	ldr	r1, [pc, #96]	; (34de0 <work_timeout+0x8c>)
   34d7e:	481c      	ldr	r0, [pc, #112]	; (34df0 <work_timeout+0x9c>)
   34d80:	f004 fa1b 	bl	391ba <printk>
   34d84:	2181      	movs	r1, #129	; 0x81
   34d86:	4817      	ldr	r0, [pc, #92]	; (34de4 <work_timeout+0x90>)
   34d88:	f004 fc6e 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   34d8c:	4814      	ldr	r0, [pc, #80]	; (34de0 <work_timeout+0x8c>)
   34d8e:	f7ff fa4d 	bl	3422c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   34d92:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   34d94:	2103      	movs	r1, #3
   34d96:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   34d98:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   34d9a:	f1a4 0610 	sub.w	r6, r4, #16
   34d9e:	f008 fb51 	bl	3d444 <flag_test_and_clear>
   34da2:	b128      	cbz	r0, 34db0 <work_timeout+0x5c>
		queue = dw->queue;
   34da4:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   34da6:	4630      	mov	r0, r6
   34da8:	a901      	add	r1, sp, #4
		queue = dw->queue;
   34daa:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   34dac:	f7ff ff66 	bl	34c7c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34db0:	480b      	ldr	r0, [pc, #44]	; (34de0 <work_timeout+0x8c>)
   34db2:	f7ff fa2d 	bl	34210 <z_spin_unlock_valid>
   34db6:	b968      	cbnz	r0, 34dd4 <work_timeout+0x80>
   34db8:	23ac      	movs	r3, #172	; 0xac
   34dba:	4a0a      	ldr	r2, [pc, #40]	; (34de4 <work_timeout+0x90>)
   34dbc:	490d      	ldr	r1, [pc, #52]	; (34df4 <work_timeout+0xa0>)
   34dbe:	480b      	ldr	r0, [pc, #44]	; (34dec <work_timeout+0x98>)
   34dc0:	f004 f9fb 	bl	391ba <printk>
   34dc4:	4906      	ldr	r1, [pc, #24]	; (34de0 <work_timeout+0x8c>)
   34dc6:	480c      	ldr	r0, [pc, #48]	; (34df8 <work_timeout+0xa4>)
   34dc8:	f004 f9f7 	bl	391ba <printk>
   34dcc:	21ac      	movs	r1, #172	; 0xac
   34dce:	4805      	ldr	r0, [pc, #20]	; (34de4 <work_timeout+0x90>)
   34dd0:	f004 fc4a 	bl	39668 <assert_post_action>
	__asm__ volatile(
   34dd4:	f385 8811 	msr	BASEPRI, r5
   34dd8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   34ddc:	b002      	add	sp, #8
   34dde:	bd70      	pop	{r4, r5, r6, pc}
   34de0:	20017fa0 	.word	0x20017fa0
   34de4:	0003f1a1 	.word	0x0003f1a1
   34de8:	0003f1f3 	.word	0x0003f1f3
   34dec:	0003f0e1 	.word	0x0003f0e1
   34df0:	0003f208 	.word	0x0003f208
   34df4:	0003f1c7 	.word	0x0003f1c7
   34df8:	0003f1de 	.word	0x0003f1de

00034dfc <k_work_submit_to_queue>:
{
   34dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   34dfe:	460c      	mov	r4, r1
{
   34e00:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   34e02:	b959      	cbnz	r1, 34e1c <k_work_submit_to_queue+0x20>
   34e04:	4926      	ldr	r1, [pc, #152]	; (34ea0 <k_work_submit_to_queue+0xa4>)
   34e06:	4827      	ldr	r0, [pc, #156]	; (34ea4 <k_work_submit_to_queue+0xa8>)
   34e08:	f240 1369 	movw	r3, #361	; 0x169
   34e0c:	4a26      	ldr	r2, [pc, #152]	; (34ea8 <k_work_submit_to_queue+0xac>)
   34e0e:	f004 f9d4 	bl	391ba <printk>
   34e12:	f240 1169 	movw	r1, #361	; 0x169
   34e16:	4824      	ldr	r0, [pc, #144]	; (34ea8 <k_work_submit_to_queue+0xac>)
   34e18:	f004 fc26 	bl	39668 <assert_post_action>
	__asm__ volatile(
   34e1c:	f04f 0320 	mov.w	r3, #32
   34e20:	f3ef 8511 	mrs	r5, BASEPRI
   34e24:	f383 8811 	msr	BASEPRI, r3
   34e28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34e2c:	481f      	ldr	r0, [pc, #124]	; (34eac <k_work_submit_to_queue+0xb0>)
   34e2e:	f7ff f9e1 	bl	341f4 <z_spin_lock_valid>
   34e32:	b968      	cbnz	r0, 34e50 <k_work_submit_to_queue+0x54>
   34e34:	2381      	movs	r3, #129	; 0x81
   34e36:	4a1e      	ldr	r2, [pc, #120]	; (34eb0 <k_work_submit_to_queue+0xb4>)
   34e38:	491e      	ldr	r1, [pc, #120]	; (34eb4 <k_work_submit_to_queue+0xb8>)
   34e3a:	481a      	ldr	r0, [pc, #104]	; (34ea4 <k_work_submit_to_queue+0xa8>)
   34e3c:	f004 f9bd 	bl	391ba <printk>
   34e40:	491a      	ldr	r1, [pc, #104]	; (34eac <k_work_submit_to_queue+0xb0>)
   34e42:	481d      	ldr	r0, [pc, #116]	; (34eb8 <k_work_submit_to_queue+0xbc>)
   34e44:	f004 f9b9 	bl	391ba <printk>
   34e48:	2181      	movs	r1, #129	; 0x81
   34e4a:	4819      	ldr	r0, [pc, #100]	; (34eb0 <k_work_submit_to_queue+0xb4>)
   34e4c:	f004 fc0c 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   34e50:	4816      	ldr	r0, [pc, #88]	; (34eac <k_work_submit_to_queue+0xb0>)
   34e52:	f7ff f9eb 	bl	3422c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   34e56:	4620      	mov	r0, r4
   34e58:	a901      	add	r1, sp, #4
   34e5a:	f7ff ff0f 	bl	34c7c <submit_to_queue_locked>
   34e5e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34e60:	4812      	ldr	r0, [pc, #72]	; (34eac <k_work_submit_to_queue+0xb0>)
   34e62:	f7ff f9d5 	bl	34210 <z_spin_unlock_valid>
   34e66:	b968      	cbnz	r0, 34e84 <k_work_submit_to_queue+0x88>
   34e68:	23ac      	movs	r3, #172	; 0xac
   34e6a:	4a11      	ldr	r2, [pc, #68]	; (34eb0 <k_work_submit_to_queue+0xb4>)
   34e6c:	4913      	ldr	r1, [pc, #76]	; (34ebc <k_work_submit_to_queue+0xc0>)
   34e6e:	480d      	ldr	r0, [pc, #52]	; (34ea4 <k_work_submit_to_queue+0xa8>)
   34e70:	f004 f9a3 	bl	391ba <printk>
   34e74:	490d      	ldr	r1, [pc, #52]	; (34eac <k_work_submit_to_queue+0xb0>)
   34e76:	4812      	ldr	r0, [pc, #72]	; (34ec0 <k_work_submit_to_queue+0xc4>)
   34e78:	f004 f99f 	bl	391ba <printk>
   34e7c:	21ac      	movs	r1, #172	; 0xac
   34e7e:	480c      	ldr	r0, [pc, #48]	; (34eb0 <k_work_submit_to_queue+0xb4>)
   34e80:	f004 fbf2 	bl	39668 <assert_post_action>
	__asm__ volatile(
   34e84:	f385 8811 	msr	BASEPRI, r5
   34e88:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   34e8c:	2c00      	cmp	r4, #0
   34e8e:	dd04      	ble.n	34e9a <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   34e90:	f001 fa2e 	bl	362f0 <z_impl_k_is_preempt_thread>
   34e94:	b108      	cbz	r0, 34e9a <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   34e96:	f001 f8a1 	bl	35fdc <z_impl_k_yield>
}
   34e9a:	4620      	mov	r0, r4
   34e9c:	b003      	add	sp, #12
   34e9e:	bd30      	pop	{r4, r5, pc}
   34ea0:	00042d79 	.word	0x00042d79
   34ea4:	0003f0e1 	.word	0x0003f0e1
   34ea8:	00042ce5 	.word	0x00042ce5
   34eac:	20017fa0 	.word	0x20017fa0
   34eb0:	0003f1a1 	.word	0x0003f1a1
   34eb4:	0003f1f3 	.word	0x0003f1f3
   34eb8:	0003f208 	.word	0x0003f208
   34ebc:	0003f1c7 	.word	0x0003f1c7
   34ec0:	0003f1de 	.word	0x0003f1de

00034ec4 <k_work_queue_start>:
{
   34ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34ec8:	b088      	sub	sp, #32
   34eca:	460e      	mov	r6, r1
   34ecc:	4617      	mov	r7, r2
   34ece:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   34ed0:	4604      	mov	r4, r0
{
   34ed2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   34ed4:	b958      	cbnz	r0, 34eee <k_work_queue_start+0x2a>
   34ed6:	492e      	ldr	r1, [pc, #184]	; (34f90 <k_work_queue_start+0xcc>)
   34ed8:	482e      	ldr	r0, [pc, #184]	; (34f94 <k_work_queue_start+0xd0>)
   34eda:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   34ede:	4a2e      	ldr	r2, [pc, #184]	; (34f98 <k_work_queue_start+0xd4>)
   34ee0:	f004 f96b 	bl	391ba <printk>
   34ee4:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   34ee8:	482b      	ldr	r0, [pc, #172]	; (34f98 <k_work_queue_start+0xd4>)
   34eea:	f004 fbbd 	bl	39668 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   34eee:	b95e      	cbnz	r6, 34f08 <k_work_queue_start+0x44>
   34ef0:	492a      	ldr	r1, [pc, #168]	; (34f9c <k_work_queue_start+0xd8>)
   34ef2:	4828      	ldr	r0, [pc, #160]	; (34f94 <k_work_queue_start+0xd0>)
   34ef4:	f240 23a1 	movw	r3, #673	; 0x2a1
   34ef8:	4a27      	ldr	r2, [pc, #156]	; (34f98 <k_work_queue_start+0xd4>)
   34efa:	f004 f95e 	bl	391ba <printk>
   34efe:	f240 21a1 	movw	r1, #673	; 0x2a1
   34f02:	4825      	ldr	r0, [pc, #148]	; (34f98 <k_work_queue_start+0xd4>)
   34f04:	f004 fbb0 	bl	39668 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   34f08:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   34f0c:	07db      	lsls	r3, r3, #31
   34f0e:	d50b      	bpl.n	34f28 <k_work_queue_start+0x64>
   34f10:	4923      	ldr	r1, [pc, #140]	; (34fa0 <k_work_queue_start+0xdc>)
   34f12:	4820      	ldr	r0, [pc, #128]	; (34f94 <k_work_queue_start+0xd0>)
   34f14:	f240 23a2 	movw	r3, #674	; 0x2a2
   34f18:	4a1f      	ldr	r2, [pc, #124]	; (34f98 <k_work_queue_start+0xd4>)
   34f1a:	f004 f94e 	bl	391ba <printk>
   34f1e:	f240 21a2 	movw	r1, #674	; 0x2a2
   34f22:	481d      	ldr	r0, [pc, #116]	; (34f98 <k_work_queue_start+0xd4>)
   34f24:	f004 fba0 	bl	39668 <assert_post_action>
	list->head = NULL;
   34f28:	2300      	movs	r3, #0
	list->tail = NULL;
   34f2a:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   34f2e:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   34f32:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   34f36:	f104 0390 	add.w	r3, r4, #144	; 0x90
   34f3a:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   34f3e:	b32d      	cbz	r5, 34f8c <k_work_queue_start+0xc8>
   34f40:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   34f42:	f240 1101 	movw	r1, #257	; 0x101
   34f46:	2b00      	cmp	r3, #0
   34f48:	bf08      	it	eq
   34f4a:	2101      	moveq	r1, #1
	*flagp = flags;
   34f4c:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   34f50:	f04f 32ff 	mov.w	r2, #4294967295
   34f54:	f04f 33ff 	mov.w	r3, #4294967295
   34f58:	e9cd 2306 	strd	r2, r3, [sp, #24]
   34f5c:	2200      	movs	r2, #0
   34f5e:	4631      	mov	r1, r6
   34f60:	e9cd 8203 	strd	r8, r2, [sp, #12]
   34f64:	e9cd 2201 	strd	r2, r2, [sp, #4]
   34f68:	4620      	mov	r0, r4
   34f6a:	463a      	mov	r2, r7
   34f6c:	4b0d      	ldr	r3, [pc, #52]	; (34fa4 <k_work_queue_start+0xe0>)
   34f6e:	9400      	str	r4, [sp, #0]
   34f70:	f7ff f868 	bl	34044 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   34f74:	b125      	cbz	r5, 34f80 <k_work_queue_start+0xbc>
   34f76:	6829      	ldr	r1, [r5, #0]
   34f78:	b111      	cbz	r1, 34f80 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   34f7a:	4620      	mov	r0, r4
   34f7c:	f008 fa35 	bl	3d3ea <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   34f80:	4620      	mov	r0, r4
}
   34f82:	b008      	add	sp, #32
   34f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   34f88:	f008 ba34 	b.w	3d3f4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   34f8c:	2101      	movs	r1, #1
   34f8e:	e7dd      	b.n	34f4c <k_work_queue_start+0x88>
   34f90:	00042d38 	.word	0x00042d38
   34f94:	0003f0e1 	.word	0x0003f0e1
   34f98:	00042ce5 	.word	0x00042ce5
   34f9c:	00042d3e 	.word	0x00042d3e
   34fa0:	00042d44 	.word	0x00042d44
   34fa4:	00034a59 	.word	0x00034a59

00034fa8 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   34fa8:	b538      	push	{r3, r4, r5, lr}
   34faa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   34fac:	4604      	mov	r4, r0
   34fae:	b958      	cbnz	r0, 34fc8 <k_work_init_delayable+0x20>
   34fb0:	4911      	ldr	r1, [pc, #68]	; (34ff8 <k_work_init_delayable+0x50>)
   34fb2:	4812      	ldr	r0, [pc, #72]	; (34ffc <k_work_init_delayable+0x54>)
   34fb4:	f44f 7346 	mov.w	r3, #792	; 0x318
   34fb8:	4a11      	ldr	r2, [pc, #68]	; (35000 <k_work_init_delayable+0x58>)
   34fba:	f004 f8fe 	bl	391ba <printk>
   34fbe:	f44f 7146 	mov.w	r1, #792	; 0x318
   34fc2:	480f      	ldr	r0, [pc, #60]	; (35000 <k_work_init_delayable+0x58>)
   34fc4:	f004 fb50 	bl	39668 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   34fc8:	b95d      	cbnz	r5, 34fe2 <k_work_init_delayable+0x3a>
   34fca:	490e      	ldr	r1, [pc, #56]	; (35004 <k_work_init_delayable+0x5c>)
   34fcc:	480b      	ldr	r0, [pc, #44]	; (34ffc <k_work_init_delayable+0x54>)
   34fce:	f240 3319 	movw	r3, #793	; 0x319
   34fd2:	4a0b      	ldr	r2, [pc, #44]	; (35000 <k_work_init_delayable+0x58>)
   34fd4:	f004 f8f1 	bl	391ba <printk>
   34fd8:	f240 3119 	movw	r1, #793	; 0x319
   34fdc:	4808      	ldr	r0, [pc, #32]	; (35000 <k_work_init_delayable+0x58>)
   34fde:	f004 fb43 	bl	39668 <assert_post_action>

	*dwork = (struct k_work_delayable){
   34fe2:	2230      	movs	r2, #48	; 0x30
   34fe4:	2100      	movs	r1, #0
   34fe6:	4620      	mov	r0, r4
   34fe8:	f008 fb4d 	bl	3d686 <memset>
   34fec:	f44f 7380 	mov.w	r3, #256	; 0x100
   34ff0:	6065      	str	r5, [r4, #4]
   34ff2:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   34ff4:	bd38      	pop	{r3, r4, r5, pc}
   34ff6:	bf00      	nop
   34ff8:	00042d78 	.word	0x00042d78
   34ffc:	0003f0e1 	.word	0x0003f0e1
   35000:	00042ce5 	.word	0x00042ce5
   35004:	00042d06 	.word	0x00042d06

00035008 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   35008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3500a:	4616      	mov	r6, r2
   3500c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   3500e:	460c      	mov	r4, r1
{
   35010:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   35012:	b959      	cbnz	r1, 3502c <k_work_schedule_for_queue+0x24>
   35014:	492e      	ldr	r1, [pc, #184]	; (350d0 <k_work_schedule_for_queue+0xc8>)
   35016:	482f      	ldr	r0, [pc, #188]	; (350d4 <k_work_schedule_for_queue+0xcc>)
   35018:	f240 338f 	movw	r3, #911	; 0x38f
   3501c:	4a2e      	ldr	r2, [pc, #184]	; (350d8 <k_work_schedule_for_queue+0xd0>)
   3501e:	f004 f8cc 	bl	391ba <printk>
   35022:	f240 318f 	movw	r1, #911	; 0x38f
   35026:	482c      	ldr	r0, [pc, #176]	; (350d8 <k_work_schedule_for_queue+0xd0>)
   35028:	f004 fb1e 	bl	39668 <assert_post_action>
	__asm__ volatile(
   3502c:	f04f 0320 	mov.w	r3, #32
   35030:	f3ef 8711 	mrs	r7, BASEPRI
   35034:	f383 8811 	msr	BASEPRI, r3
   35038:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3503c:	4827      	ldr	r0, [pc, #156]	; (350dc <k_work_schedule_for_queue+0xd4>)
   3503e:	f7ff f8d9 	bl	341f4 <z_spin_lock_valid>
   35042:	b968      	cbnz	r0, 35060 <k_work_schedule_for_queue+0x58>
   35044:	2381      	movs	r3, #129	; 0x81
   35046:	4a26      	ldr	r2, [pc, #152]	; (350e0 <k_work_schedule_for_queue+0xd8>)
   35048:	4926      	ldr	r1, [pc, #152]	; (350e4 <k_work_schedule_for_queue+0xdc>)
   3504a:	4822      	ldr	r0, [pc, #136]	; (350d4 <k_work_schedule_for_queue+0xcc>)
   3504c:	f004 f8b5 	bl	391ba <printk>
   35050:	4922      	ldr	r1, [pc, #136]	; (350dc <k_work_schedule_for_queue+0xd4>)
   35052:	4825      	ldr	r0, [pc, #148]	; (350e8 <k_work_schedule_for_queue+0xe0>)
   35054:	f004 f8b1 	bl	391ba <printk>
   35058:	2181      	movs	r1, #129	; 0x81
   3505a:	4821      	ldr	r0, [pc, #132]	; (350e0 <k_work_schedule_for_queue+0xd8>)
   3505c:	f004 fb04 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35060:	481e      	ldr	r0, [pc, #120]	; (350dc <k_work_schedule_for_queue+0xd4>)
   35062:	f7ff f8e3 	bl	3422c <z_spin_lock_set_owner>
	return *flagp;
   35066:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   35068:	f013 0f0e 	tst.w	r3, #14
   3506c:	d12e      	bne.n	350cc <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3506e:	ea55 0206 	orrs.w	r2, r5, r6
   35072:	d11d      	bne.n	350b0 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   35074:	4620      	mov	r0, r4
   35076:	a901      	add	r1, sp, #4
   35078:	f7ff fe00 	bl	34c7c <submit_to_queue_locked>
   3507c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3507e:	4817      	ldr	r0, [pc, #92]	; (350dc <k_work_schedule_for_queue+0xd4>)
   35080:	f7ff f8c6 	bl	34210 <z_spin_unlock_valid>
   35084:	b968      	cbnz	r0, 350a2 <k_work_schedule_for_queue+0x9a>
   35086:	23ac      	movs	r3, #172	; 0xac
   35088:	4a15      	ldr	r2, [pc, #84]	; (350e0 <k_work_schedule_for_queue+0xd8>)
   3508a:	4918      	ldr	r1, [pc, #96]	; (350ec <k_work_schedule_for_queue+0xe4>)
   3508c:	4811      	ldr	r0, [pc, #68]	; (350d4 <k_work_schedule_for_queue+0xcc>)
   3508e:	f004 f894 	bl	391ba <printk>
   35092:	4912      	ldr	r1, [pc, #72]	; (350dc <k_work_schedule_for_queue+0xd4>)
   35094:	4816      	ldr	r0, [pc, #88]	; (350f0 <k_work_schedule_for_queue+0xe8>)
   35096:	f004 f890 	bl	391ba <printk>
   3509a:	21ac      	movs	r1, #172	; 0xac
   3509c:	4810      	ldr	r0, [pc, #64]	; (350e0 <k_work_schedule_for_queue+0xd8>)
   3509e:	f004 fae3 	bl	39668 <assert_post_action>
	__asm__ volatile(
   350a2:	f387 8811 	msr	BASEPRI, r7
   350a6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   350aa:	4620      	mov	r0, r4
   350ac:	b003      	add	sp, #12
   350ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   350b0:	f043 0308 	orr.w	r3, r3, #8
   350b4:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   350b6:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   350b8:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   350bc:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   350be:	4632      	mov	r2, r6
   350c0:	462b      	mov	r3, r5
   350c2:	490c      	ldr	r1, [pc, #48]	; (350f4 <k_work_schedule_for_queue+0xec>)
   350c4:	f001 faae 	bl	36624 <z_add_timeout>
	return ret;
   350c8:	2401      	movs	r4, #1
   350ca:	e7d8      	b.n	3507e <k_work_schedule_for_queue+0x76>
	int ret = 0;
   350cc:	2400      	movs	r4, #0
   350ce:	e7d6      	b.n	3507e <k_work_schedule_for_queue+0x76>
   350d0:	00042d78 	.word	0x00042d78
   350d4:	0003f0e1 	.word	0x0003f0e1
   350d8:	00042ce5 	.word	0x00042ce5
   350dc:	20017fa0 	.word	0x20017fa0
   350e0:	0003f1a1 	.word	0x0003f1a1
   350e4:	0003f1f3 	.word	0x0003f1f3
   350e8:	0003f208 	.word	0x0003f208
   350ec:	0003f1c7 	.word	0x0003f1c7
   350f0:	0003f1de 	.word	0x0003f1de
   350f4:	00034d55 	.word	0x00034d55

000350f8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   350f8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   350fa:	4801      	ldr	r0, [pc, #4]	; (35100 <k_work_schedule+0x8>)
   350fc:	f7ff bf84 	b.w	35008 <k_work_schedule_for_queue>
   35100:	200175f8 	.word	0x200175f8

00035104 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   35104:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   35106:	4c08      	ldr	r4, [pc, #32]	; (35128 <z_reset_time_slice+0x24>)
   35108:	6823      	ldr	r3, [r4, #0]
   3510a:	b15b      	cbz	r3, 35124 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   3510c:	f7f0 fb16 	bl	2573c <sys_clock_elapsed>
   35110:	4603      	mov	r3, r0
   35112:	6820      	ldr	r0, [r4, #0]
   35114:	4a05      	ldr	r2, [pc, #20]	; (3512c <z_reset_time_slice+0x28>)
   35116:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   35118:	2100      	movs	r1, #0
	}
}
   3511a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   3511e:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   35120:	f001 bbde 	b.w	368e0 <z_set_timeout_expiry>
}
   35124:	bd10      	pop	{r4, pc}
   35126:	bf00      	nop
   35128:	20017fac 	.word	0x20017fac
   3512c:	20017f60 	.word	0x20017f60

00035130 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   35130:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   35132:	4c16      	ldr	r4, [pc, #88]	; (3518c <update_cache+0x5c>)
   35134:	4623      	mov	r3, r4
   35136:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3513a:	429d      	cmp	r5, r3
   3513c:	d000      	beq.n	35140 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   3513e:	b905      	cbnz	r5, 35142 <update_cache+0x12>
   35140:	68e5      	ldr	r5, [r4, #12]
	__ASSERT(_current != NULL, "");
   35142:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
   35144:	b120      	cbz	r0, 35150 <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   35146:	68a3      	ldr	r3, [r4, #8]
   35148:	42ab      	cmp	r3, r5
   3514a:	d11b      	bne.n	35184 <update_cache+0x54>
			z_reset_time_slice();
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   3514c:	462b      	mov	r3, r5
   3514e:	e017      	b.n	35180 <update_cache+0x50>
	__ASSERT(_current != NULL, "");
   35150:	b963      	cbnz	r3, 3516c <update_cache+0x3c>
   35152:	490f      	ldr	r1, [pc, #60]	; (35190 <update_cache+0x60>)
   35154:	2381      	movs	r3, #129	; 0x81
   35156:	4a0f      	ldr	r2, [pc, #60]	; (35194 <update_cache+0x64>)
   35158:	480f      	ldr	r0, [pc, #60]	; (35198 <update_cache+0x68>)
   3515a:	f004 f82e 	bl	391ba <printk>
   3515e:	480f      	ldr	r0, [pc, #60]	; (3519c <update_cache+0x6c>)
   35160:	f004 f82b 	bl	391ba <printk>
   35164:	2181      	movs	r1, #129	; 0x81
   35166:	480b      	ldr	r0, [pc, #44]	; (35194 <update_cache+0x64>)
   35168:	f004 fa7e 	bl	39668 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   3516c:	68a3      	ldr	r3, [r4, #8]
   3516e:	7b5a      	ldrb	r2, [r3, #13]
   35170:	06d2      	lsls	r2, r2, #27
   35172:	d1e8      	bne.n	35146 <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   35174:	69aa      	ldr	r2, [r5, #24]
   35176:	2a00      	cmp	r2, #0
   35178:	d1e5      	bne.n	35146 <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
   3517a:	89da      	ldrh	r2, [r3, #14]
   3517c:	2a7f      	cmp	r2, #127	; 0x7f
   3517e:	d9e2      	bls.n	35146 <update_cache+0x16>
		_kernel.ready_q.cache = thread;
   35180:	6263      	str	r3, [r4, #36]	; 0x24
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   35182:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice();
   35184:	f7ff ffbe 	bl	35104 <z_reset_time_slice>
   35188:	e7e0      	b.n	3514c <update_cache+0x1c>
   3518a:	bf00      	nop
   3518c:	20017f60 	.word	0x20017f60
   35190:	00042daf 	.word	0x00042daf
   35194:	00042d8d 	.word	0x00042d8d
   35198:	0003f0e1 	.word	0x0003f0e1
   3519c:	0003f6c8 	.word	0x0003f6c8

000351a0 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   351a0:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   351a2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   351a6:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   351a8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   351aa:	7b43      	ldrb	r3, [r0, #13]
   351ac:	db3c      	blt.n	35228 <ready_thread+0x88>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   351ae:	06da      	lsls	r2, r3, #27
   351b0:	d13a      	bne.n	35228 <ready_thread+0x88>
   351b2:	6982      	ldr	r2, [r0, #24]
   351b4:	2a00      	cmp	r2, #0
   351b6:	d137      	bne.n	35228 <ready_thread+0x88>
	thread->base.thread_state |= _THREAD_QUEUED;
   351b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   351bc:	7343      	strb	r3, [r0, #13]

ALWAYS_INLINE void z_priq_dumb_add(sys_dlist_t *pq, struct k_thread *thread)
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   351be:	4b1b      	ldr	r3, [pc, #108]	; (3522c <ready_thread+0x8c>)
   351c0:	4298      	cmp	r0, r3
   351c2:	d10b      	bne.n	351dc <ready_thread+0x3c>
   351c4:	491a      	ldr	r1, [pc, #104]	; (35230 <ready_thread+0x90>)
   351c6:	481b      	ldr	r0, [pc, #108]	; (35234 <ready_thread+0x94>)
   351c8:	f240 33a6 	movw	r3, #934	; 0x3a6
   351cc:	4a1a      	ldr	r2, [pc, #104]	; (35238 <ready_thread+0x98>)
   351ce:	f003 fff4 	bl	391ba <printk>
   351d2:	f240 31a6 	movw	r1, #934	; 0x3a6
   351d6:	4818      	ldr	r0, [pc, #96]	; (35238 <ready_thread+0x98>)
   351d8:	f004 fa46 	bl	39668 <assert_post_action>
	return list->head == list;
   351dc:	4a17      	ldr	r2, [pc, #92]	; (3523c <ready_thread+0x9c>)
   351de:	4610      	mov	r0, r2
   351e0:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   351e4:	4283      	cmp	r3, r0
   351e6:	d11d      	bne.n	35224 <ready_thread+0x84>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   351e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   351ea:	e9c4 0100 	strd	r0, r1, [r4]

	tail->next = node;
   351ee:	600c      	str	r4, [r1, #0]
	list->tail = node;
   351f0:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   351f2:	e012      	b.n	3521a <ready_thread+0x7a>
	return (node == list->tail) ? NULL : node->next;
   351f4:	428b      	cmp	r3, r1
   351f6:	d0f8      	beq.n	351ea <ready_thread+0x4a>
   351f8:	681b      	ldr	r3, [r3, #0]

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   351fa:	2b00      	cmp	r3, #0
   351fc:	d0f5      	beq.n	351ea <ready_thread+0x4a>
	int32_t b1 = thread_1->base.prio;
   351fe:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   35202:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   35206:	42ae      	cmp	r6, r5
   35208:	d0f4      	beq.n	351f4 <ready_thread+0x54>
		return b2 - b1;
   3520a:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   3520c:	2d00      	cmp	r5, #0
   3520e:	ddf1      	ble.n	351f4 <ready_thread+0x54>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   35210:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   35212:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   35216:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   35218:	605c      	str	r4, [r3, #4]
		update_cache(0);
   3521a:	2000      	movs	r0, #0
}
   3521c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   35220:	f7ff bf86 	b.w	35130 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   35224:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   35226:	e7e8      	b.n	351fa <ready_thread+0x5a>
}
   35228:	bd70      	pop	{r4, r5, r6, pc}
   3522a:	bf00      	nop
   3522c:	200154f0 	.word	0x200154f0
   35230:	00042dd6 	.word	0x00042dd6
   35234:	0003f0e1 	.word	0x0003f0e1
   35238:	00042d8d 	.word	0x00042d8d
   3523c:	20017f60 	.word	0x20017f60

00035240 <k_sched_time_slice_set>:
{
   35240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35244:	4604      	mov	r4, r0
   35246:	460d      	mov	r5, r1
	__asm__ volatile(
   35248:	f04f 0320 	mov.w	r3, #32
   3524c:	f3ef 8811 	mrs	r8, BASEPRI
   35250:	f383 8811 	msr	BASEPRI, r3
   35254:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35258:	4823      	ldr	r0, [pc, #140]	; (352e8 <k_sched_time_slice_set+0xa8>)
   3525a:	f7fe ffcb 	bl	341f4 <z_spin_lock_valid>
   3525e:	b968      	cbnz	r0, 3527c <k_sched_time_slice_set+0x3c>
   35260:	2381      	movs	r3, #129	; 0x81
   35262:	4a22      	ldr	r2, [pc, #136]	; (352ec <k_sched_time_slice_set+0xac>)
   35264:	4922      	ldr	r1, [pc, #136]	; (352f0 <k_sched_time_slice_set+0xb0>)
   35266:	4823      	ldr	r0, [pc, #140]	; (352f4 <k_sched_time_slice_set+0xb4>)
   35268:	f003 ffa7 	bl	391ba <printk>
   3526c:	491e      	ldr	r1, [pc, #120]	; (352e8 <k_sched_time_slice_set+0xa8>)
   3526e:	4822      	ldr	r0, [pc, #136]	; (352f8 <k_sched_time_slice_set+0xb8>)
   35270:	f003 ffa3 	bl	391ba <printk>
   35274:	2181      	movs	r1, #129	; 0x81
   35276:	481d      	ldr	r0, [pc, #116]	; (352ec <k_sched_time_slice_set+0xac>)
   35278:	f004 f9f6 	bl	39668 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   3527c:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   3527e:	481a      	ldr	r0, [pc, #104]	; (352e8 <k_sched_time_slice_set+0xa8>)
   35280:	f7fe ffd4 	bl	3422c <z_spin_lock_set_owner>
   35284:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   35288:	f240 30e7 	movw	r0, #999	; 0x3e7
   3528c:	4631      	mov	r1, r6
   3528e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   35292:	2300      	movs	r3, #0
   35294:	fbe4 0107 	umlal	r0, r1, r4, r7
   35298:	f7eb ff9e 	bl	211d8 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   3529c:	42b4      	cmp	r4, r6
   3529e:	dd02      	ble.n	352a6 <k_sched_time_slice_set+0x66>
			slice_time = MAX(2, slice_time);
   352a0:	2802      	cmp	r0, #2
   352a2:	bfb8      	it	lt
   352a4:	2002      	movlt	r0, #2
		_current_cpu->slice_ticks = 0;
   352a6:	4b15      	ldr	r3, [pc, #84]	; (352fc <k_sched_time_slice_set+0xbc>)
   352a8:	611e      	str	r6, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
   352aa:	4b15      	ldr	r3, [pc, #84]	; (35300 <k_sched_time_slice_set+0xc0>)
   352ac:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   352ae:	4b15      	ldr	r3, [pc, #84]	; (35304 <k_sched_time_slice_set+0xc4>)
   352b0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   352b2:	f7ff ff27 	bl	35104 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   352b6:	480c      	ldr	r0, [pc, #48]	; (352e8 <k_sched_time_slice_set+0xa8>)
   352b8:	f7fe ffaa 	bl	34210 <z_spin_unlock_valid>
   352bc:	b968      	cbnz	r0, 352da <k_sched_time_slice_set+0x9a>
   352be:	23ac      	movs	r3, #172	; 0xac
   352c0:	4a0a      	ldr	r2, [pc, #40]	; (352ec <k_sched_time_slice_set+0xac>)
   352c2:	4911      	ldr	r1, [pc, #68]	; (35308 <k_sched_time_slice_set+0xc8>)
   352c4:	480b      	ldr	r0, [pc, #44]	; (352f4 <k_sched_time_slice_set+0xb4>)
   352c6:	f003 ff78 	bl	391ba <printk>
   352ca:	4907      	ldr	r1, [pc, #28]	; (352e8 <k_sched_time_slice_set+0xa8>)
   352cc:	480f      	ldr	r0, [pc, #60]	; (3530c <k_sched_time_slice_set+0xcc>)
   352ce:	f003 ff74 	bl	391ba <printk>
   352d2:	21ac      	movs	r1, #172	; 0xac
   352d4:	4805      	ldr	r0, [pc, #20]	; (352ec <k_sched_time_slice_set+0xac>)
   352d6:	f004 f9c7 	bl	39668 <assert_post_action>
	__asm__ volatile(
   352da:	f388 8811 	msr	BASEPRI, r8
   352de:	f3bf 8f6f 	isb	sy
}
   352e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   352e6:	bf00      	nop
   352e8:	20017fb0 	.word	0x20017fb0
   352ec:	0003f1a1 	.word	0x0003f1a1
   352f0:	0003f1f3 	.word	0x0003f1f3
   352f4:	0003f0e1 	.word	0x0003f0e1
   352f8:	0003f208 	.word	0x0003f208
   352fc:	20017f60 	.word	0x20017f60
   35300:	20017fac 	.word	0x20017fac
   35304:	20017fa8 	.word	0x20017fa8
   35308:	0003f1c7 	.word	0x0003f1c7
   3530c:	0003f1de 	.word	0x0003f1de

00035310 <z_ready_thread>:
{
   35310:	b538      	push	{r3, r4, r5, lr}
   35312:	4604      	mov	r4, r0
	__asm__ volatile(
   35314:	f04f 0320 	mov.w	r3, #32
   35318:	f3ef 8511 	mrs	r5, BASEPRI
   3531c:	f383 8811 	msr	BASEPRI, r3
   35320:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35324:	4817      	ldr	r0, [pc, #92]	; (35384 <z_ready_thread+0x74>)
   35326:	f7fe ff65 	bl	341f4 <z_spin_lock_valid>
   3532a:	b968      	cbnz	r0, 35348 <z_ready_thread+0x38>
   3532c:	2381      	movs	r3, #129	; 0x81
   3532e:	4a16      	ldr	r2, [pc, #88]	; (35388 <z_ready_thread+0x78>)
   35330:	4916      	ldr	r1, [pc, #88]	; (3538c <z_ready_thread+0x7c>)
   35332:	4817      	ldr	r0, [pc, #92]	; (35390 <z_ready_thread+0x80>)
   35334:	f003 ff41 	bl	391ba <printk>
   35338:	4912      	ldr	r1, [pc, #72]	; (35384 <z_ready_thread+0x74>)
   3533a:	4816      	ldr	r0, [pc, #88]	; (35394 <z_ready_thread+0x84>)
   3533c:	f003 ff3d 	bl	391ba <printk>
   35340:	2181      	movs	r1, #129	; 0x81
   35342:	4811      	ldr	r0, [pc, #68]	; (35388 <z_ready_thread+0x78>)
   35344:	f004 f990 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35348:	480e      	ldr	r0, [pc, #56]	; (35384 <z_ready_thread+0x74>)
   3534a:	f7fe ff6f 	bl	3422c <z_spin_lock_set_owner>
			ready_thread(thread);
   3534e:	4620      	mov	r0, r4
   35350:	f7ff ff26 	bl	351a0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35354:	480b      	ldr	r0, [pc, #44]	; (35384 <z_ready_thread+0x74>)
   35356:	f7fe ff5b 	bl	34210 <z_spin_unlock_valid>
   3535a:	b968      	cbnz	r0, 35378 <z_ready_thread+0x68>
   3535c:	23ac      	movs	r3, #172	; 0xac
   3535e:	4a0a      	ldr	r2, [pc, #40]	; (35388 <z_ready_thread+0x78>)
   35360:	490d      	ldr	r1, [pc, #52]	; (35398 <z_ready_thread+0x88>)
   35362:	480b      	ldr	r0, [pc, #44]	; (35390 <z_ready_thread+0x80>)
   35364:	f003 ff29 	bl	391ba <printk>
   35368:	4906      	ldr	r1, [pc, #24]	; (35384 <z_ready_thread+0x74>)
   3536a:	480c      	ldr	r0, [pc, #48]	; (3539c <z_ready_thread+0x8c>)
   3536c:	f003 ff25 	bl	391ba <printk>
   35370:	21ac      	movs	r1, #172	; 0xac
   35372:	4805      	ldr	r0, [pc, #20]	; (35388 <z_ready_thread+0x78>)
   35374:	f004 f978 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35378:	f385 8811 	msr	BASEPRI, r5
   3537c:	f3bf 8f6f 	isb	sy
}
   35380:	bd38      	pop	{r3, r4, r5, pc}
   35382:	bf00      	nop
   35384:	20017fb0 	.word	0x20017fb0
   35388:	0003f1a1 	.word	0x0003f1a1
   3538c:	0003f1f3 	.word	0x0003f1f3
   35390:	0003f0e1 	.word	0x0003f0e1
   35394:	0003f208 	.word	0x0003f208
   35398:	0003f1c7 	.word	0x0003f1c7
   3539c:	0003f1de 	.word	0x0003f1de

000353a0 <z_unpend_thread_no_timeout>:
{
   353a0:	b538      	push	{r3, r4, r5, lr}
   353a2:	4604      	mov	r4, r0
	__asm__ volatile(
   353a4:	f04f 0320 	mov.w	r3, #32
   353a8:	f3ef 8511 	mrs	r5, BASEPRI
   353ac:	f383 8811 	msr	BASEPRI, r3
   353b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   353b4:	4817      	ldr	r0, [pc, #92]	; (35414 <z_unpend_thread_no_timeout+0x74>)
   353b6:	f7fe ff1d 	bl	341f4 <z_spin_lock_valid>
   353ba:	b968      	cbnz	r0, 353d8 <z_unpend_thread_no_timeout+0x38>
   353bc:	2381      	movs	r3, #129	; 0x81
   353be:	4a16      	ldr	r2, [pc, #88]	; (35418 <z_unpend_thread_no_timeout+0x78>)
   353c0:	4916      	ldr	r1, [pc, #88]	; (3541c <z_unpend_thread_no_timeout+0x7c>)
   353c2:	4817      	ldr	r0, [pc, #92]	; (35420 <z_unpend_thread_no_timeout+0x80>)
   353c4:	f003 fef9 	bl	391ba <printk>
   353c8:	4912      	ldr	r1, [pc, #72]	; (35414 <z_unpend_thread_no_timeout+0x74>)
   353ca:	4816      	ldr	r0, [pc, #88]	; (35424 <z_unpend_thread_no_timeout+0x84>)
   353cc:	f003 fef5 	bl	391ba <printk>
   353d0:	2181      	movs	r1, #129	; 0x81
   353d2:	4811      	ldr	r0, [pc, #68]	; (35418 <z_unpend_thread_no_timeout+0x78>)
   353d4:	f004 f948 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   353d8:	480e      	ldr	r0, [pc, #56]	; (35414 <z_unpend_thread_no_timeout+0x74>)
   353da:	f7fe ff27 	bl	3422c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   353de:	4620      	mov	r0, r4
   353e0:	f000 fc88 	bl	35cf4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   353e4:	480b      	ldr	r0, [pc, #44]	; (35414 <z_unpend_thread_no_timeout+0x74>)
   353e6:	f7fe ff13 	bl	34210 <z_spin_unlock_valid>
   353ea:	b968      	cbnz	r0, 35408 <z_unpend_thread_no_timeout+0x68>
   353ec:	23ac      	movs	r3, #172	; 0xac
   353ee:	4a0a      	ldr	r2, [pc, #40]	; (35418 <z_unpend_thread_no_timeout+0x78>)
   353f0:	490d      	ldr	r1, [pc, #52]	; (35428 <z_unpend_thread_no_timeout+0x88>)
   353f2:	480b      	ldr	r0, [pc, #44]	; (35420 <z_unpend_thread_no_timeout+0x80>)
   353f4:	f003 fee1 	bl	391ba <printk>
   353f8:	4906      	ldr	r1, [pc, #24]	; (35414 <z_unpend_thread_no_timeout+0x74>)
   353fa:	480c      	ldr	r0, [pc, #48]	; (3542c <z_unpend_thread_no_timeout+0x8c>)
   353fc:	f003 fedd 	bl	391ba <printk>
   35400:	21ac      	movs	r1, #172	; 0xac
   35402:	4805      	ldr	r0, [pc, #20]	; (35418 <z_unpend_thread_no_timeout+0x78>)
   35404:	f004 f930 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35408:	f385 8811 	msr	BASEPRI, r5
   3540c:	f3bf 8f6f 	isb	sy
}
   35410:	bd38      	pop	{r3, r4, r5, pc}
   35412:	bf00      	nop
   35414:	20017fb0 	.word	0x20017fb0
   35418:	0003f1a1 	.word	0x0003f1a1
   3541c:	0003f1f3 	.word	0x0003f1f3
   35420:	0003f0e1 	.word	0x0003f0e1
   35424:	0003f208 	.word	0x0003f208
   35428:	0003f1c7 	.word	0x0003f1c7
   3542c:	0003f1de 	.word	0x0003f1de

00035430 <z_reschedule>:
{
   35430:	b538      	push	{r3, r4, r5, lr}
   35432:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   35434:	460d      	mov	r5, r1
   35436:	b9e9      	cbnz	r1, 35474 <z_reschedule+0x44>
   35438:	f3ef 8305 	mrs	r3, IPSR
   3543c:	b9d3      	cbnz	r3, 35474 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   3543e:	4b19      	ldr	r3, [pc, #100]	; (354a4 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   35440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   35442:	689b      	ldr	r3, [r3, #8]
   35444:	429a      	cmp	r2, r3
   35446:	d015      	beq.n	35474 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35448:	f7fe fee2 	bl	34210 <z_spin_unlock_valid>
   3544c:	b968      	cbnz	r0, 3546a <z_reschedule+0x3a>
   3544e:	23c3      	movs	r3, #195	; 0xc3
   35450:	4a15      	ldr	r2, [pc, #84]	; (354a8 <z_reschedule+0x78>)
   35452:	4916      	ldr	r1, [pc, #88]	; (354ac <z_reschedule+0x7c>)
   35454:	4816      	ldr	r0, [pc, #88]	; (354b0 <z_reschedule+0x80>)
   35456:	f003 feb0 	bl	391ba <printk>
   3545a:	4621      	mov	r1, r4
   3545c:	4815      	ldr	r0, [pc, #84]	; (354b4 <z_reschedule+0x84>)
   3545e:	f003 feac 	bl	391ba <printk>
   35462:	21c3      	movs	r1, #195	; 0xc3
   35464:	4810      	ldr	r0, [pc, #64]	; (354a8 <z_reschedule+0x78>)
   35466:	f004 f8ff 	bl	39668 <assert_post_action>
}
   3546a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   3546e:	2000      	movs	r0, #0
   35470:	f7f0 b9d8 	b.w	25824 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35474:	4620      	mov	r0, r4
   35476:	f7fe fecb 	bl	34210 <z_spin_unlock_valid>
   3547a:	b968      	cbnz	r0, 35498 <z_reschedule+0x68>
   3547c:	23ac      	movs	r3, #172	; 0xac
   3547e:	4a0a      	ldr	r2, [pc, #40]	; (354a8 <z_reschedule+0x78>)
   35480:	490a      	ldr	r1, [pc, #40]	; (354ac <z_reschedule+0x7c>)
   35482:	480b      	ldr	r0, [pc, #44]	; (354b0 <z_reschedule+0x80>)
   35484:	f003 fe99 	bl	391ba <printk>
   35488:	4621      	mov	r1, r4
   3548a:	480a      	ldr	r0, [pc, #40]	; (354b4 <z_reschedule+0x84>)
   3548c:	f003 fe95 	bl	391ba <printk>
   35490:	21ac      	movs	r1, #172	; 0xac
   35492:	4805      	ldr	r0, [pc, #20]	; (354a8 <z_reschedule+0x78>)
   35494:	f004 f8e8 	bl	39668 <assert_post_action>
   35498:	f385 8811 	msr	BASEPRI, r5
   3549c:	f3bf 8f6f 	isb	sy
   354a0:	bd38      	pop	{r3, r4, r5, pc}
   354a2:	bf00      	nop
   354a4:	20017f60 	.word	0x20017f60
   354a8:	0003f1a1 	.word	0x0003f1a1
   354ac:	0003f1c7 	.word	0x0003f1c7
   354b0:	0003f0e1 	.word	0x0003f0e1
   354b4:	0003f1de 	.word	0x0003f1de

000354b8 <z_sched_start>:
{
   354b8:	b538      	push	{r3, r4, r5, lr}
   354ba:	4604      	mov	r4, r0
	__asm__ volatile(
   354bc:	f04f 0320 	mov.w	r3, #32
   354c0:	f3ef 8511 	mrs	r5, BASEPRI
   354c4:	f383 8811 	msr	BASEPRI, r3
   354c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   354cc:	481d      	ldr	r0, [pc, #116]	; (35544 <z_sched_start+0x8c>)
   354ce:	f7fe fe91 	bl	341f4 <z_spin_lock_valid>
   354d2:	b968      	cbnz	r0, 354f0 <z_sched_start+0x38>
   354d4:	2381      	movs	r3, #129	; 0x81
   354d6:	4a1c      	ldr	r2, [pc, #112]	; (35548 <z_sched_start+0x90>)
   354d8:	491c      	ldr	r1, [pc, #112]	; (3554c <z_sched_start+0x94>)
   354da:	481d      	ldr	r0, [pc, #116]	; (35550 <z_sched_start+0x98>)
   354dc:	f003 fe6d 	bl	391ba <printk>
   354e0:	4918      	ldr	r1, [pc, #96]	; (35544 <z_sched_start+0x8c>)
   354e2:	481c      	ldr	r0, [pc, #112]	; (35554 <z_sched_start+0x9c>)
   354e4:	f003 fe69 	bl	391ba <printk>
   354e8:	2181      	movs	r1, #129	; 0x81
   354ea:	4817      	ldr	r0, [pc, #92]	; (35548 <z_sched_start+0x90>)
   354ec:	f004 f8bc 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   354f0:	4814      	ldr	r0, [pc, #80]	; (35544 <z_sched_start+0x8c>)
   354f2:	f7fe fe9b 	bl	3422c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   354f6:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   354f8:	075a      	lsls	r2, r3, #29
   354fa:	d416      	bmi.n	3552a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   354fc:	4811      	ldr	r0, [pc, #68]	; (35544 <z_sched_start+0x8c>)
   354fe:	f7fe fe87 	bl	34210 <z_spin_unlock_valid>
   35502:	b968      	cbnz	r0, 35520 <z_sched_start+0x68>
   35504:	23ac      	movs	r3, #172	; 0xac
   35506:	4a10      	ldr	r2, [pc, #64]	; (35548 <z_sched_start+0x90>)
   35508:	4913      	ldr	r1, [pc, #76]	; (35558 <z_sched_start+0xa0>)
   3550a:	4811      	ldr	r0, [pc, #68]	; (35550 <z_sched_start+0x98>)
   3550c:	f003 fe55 	bl	391ba <printk>
   35510:	490c      	ldr	r1, [pc, #48]	; (35544 <z_sched_start+0x8c>)
   35512:	4812      	ldr	r0, [pc, #72]	; (3555c <z_sched_start+0xa4>)
   35514:	f003 fe51 	bl	391ba <printk>
   35518:	21ac      	movs	r1, #172	; 0xac
   3551a:	480b      	ldr	r0, [pc, #44]	; (35548 <z_sched_start+0x90>)
   3551c:	f004 f8a4 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35520:	f385 8811 	msr	BASEPRI, r5
   35524:	f3bf 8f6f 	isb	sy
}
   35528:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3552a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   3552e:	4620      	mov	r0, r4
   35530:	7363      	strb	r3, [r4, #13]
   35532:	f7ff fe35 	bl	351a0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   35536:	4629      	mov	r1, r5
}
   35538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3553c:	4801      	ldr	r0, [pc, #4]	; (35544 <z_sched_start+0x8c>)
   3553e:	f7ff bf77 	b.w	35430 <z_reschedule>
   35542:	bf00      	nop
   35544:	20017fb0 	.word	0x20017fb0
   35548:	0003f1a1 	.word	0x0003f1a1
   3554c:	0003f1f3 	.word	0x0003f1f3
   35550:	0003f0e1 	.word	0x0003f0e1
   35554:	0003f208 	.word	0x0003f208
   35558:	0003f1c7 	.word	0x0003f1c7
   3555c:	0003f1de 	.word	0x0003f1de

00035560 <k_sched_lock>:
{
   35560:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   35562:	f04f 0320 	mov.w	r3, #32
   35566:	f3ef 8511 	mrs	r5, BASEPRI
   3556a:	f383 8811 	msr	BASEPRI, r3
   3556e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35572:	4829      	ldr	r0, [pc, #164]	; (35618 <k_sched_lock+0xb8>)
   35574:	f7fe fe3e 	bl	341f4 <z_spin_lock_valid>
   35578:	b968      	cbnz	r0, 35596 <k_sched_lock+0x36>
   3557a:	2381      	movs	r3, #129	; 0x81
   3557c:	4a27      	ldr	r2, [pc, #156]	; (3561c <k_sched_lock+0xbc>)
   3557e:	4928      	ldr	r1, [pc, #160]	; (35620 <k_sched_lock+0xc0>)
   35580:	4828      	ldr	r0, [pc, #160]	; (35624 <k_sched_lock+0xc4>)
   35582:	f003 fe1a 	bl	391ba <printk>
   35586:	4924      	ldr	r1, [pc, #144]	; (35618 <k_sched_lock+0xb8>)
   35588:	4827      	ldr	r0, [pc, #156]	; (35628 <k_sched_lock+0xc8>)
   3558a:	f003 fe16 	bl	391ba <printk>
   3558e:	2181      	movs	r1, #129	; 0x81
   35590:	4822      	ldr	r0, [pc, #136]	; (3561c <k_sched_lock+0xbc>)
   35592:	f004 f869 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35596:	4820      	ldr	r0, [pc, #128]	; (35618 <k_sched_lock+0xb8>)
   35598:	f7fe fe48 	bl	3422c <z_spin_lock_set_owner>
   3559c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   355a0:	b163      	cbz	r3, 355bc <k_sched_lock+0x5c>
   355a2:	4922      	ldr	r1, [pc, #136]	; (3562c <k_sched_lock+0xcc>)
   355a4:	23fd      	movs	r3, #253	; 0xfd
   355a6:	4a22      	ldr	r2, [pc, #136]	; (35630 <k_sched_lock+0xd0>)
   355a8:	481e      	ldr	r0, [pc, #120]	; (35624 <k_sched_lock+0xc4>)
   355aa:	f003 fe06 	bl	391ba <printk>
   355ae:	4821      	ldr	r0, [pc, #132]	; (35634 <k_sched_lock+0xd4>)
   355b0:	f003 fe03 	bl	391ba <printk>
   355b4:	21fd      	movs	r1, #253	; 0xfd
   355b6:	481e      	ldr	r0, [pc, #120]	; (35630 <k_sched_lock+0xd0>)
   355b8:	f004 f856 	bl	39668 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   355bc:	4c1e      	ldr	r4, [pc, #120]	; (35638 <k_sched_lock+0xd8>)
   355be:	68a3      	ldr	r3, [r4, #8]
   355c0:	7bdb      	ldrb	r3, [r3, #15]
   355c2:	2b01      	cmp	r3, #1
   355c4:	d10c      	bne.n	355e0 <k_sched_lock+0x80>
   355c6:	491d      	ldr	r1, [pc, #116]	; (3563c <k_sched_lock+0xdc>)
   355c8:	23fe      	movs	r3, #254	; 0xfe
   355ca:	4a19      	ldr	r2, [pc, #100]	; (35630 <k_sched_lock+0xd0>)
   355cc:	4815      	ldr	r0, [pc, #84]	; (35624 <k_sched_lock+0xc4>)
   355ce:	f003 fdf4 	bl	391ba <printk>
   355d2:	4818      	ldr	r0, [pc, #96]	; (35634 <k_sched_lock+0xd4>)
   355d4:	f003 fdf1 	bl	391ba <printk>
   355d8:	21fe      	movs	r1, #254	; 0xfe
   355da:	4815      	ldr	r0, [pc, #84]	; (35630 <k_sched_lock+0xd0>)
   355dc:	f004 f844 	bl	39668 <assert_post_action>
	--_current->base.sched_locked;
   355e0:	68a2      	ldr	r2, [r4, #8]
   355e2:	7bd3      	ldrb	r3, [r2, #15]
   355e4:	3b01      	subs	r3, #1
   355e6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   355e8:	480b      	ldr	r0, [pc, #44]	; (35618 <k_sched_lock+0xb8>)
   355ea:	f7fe fe11 	bl	34210 <z_spin_unlock_valid>
   355ee:	b968      	cbnz	r0, 3560c <k_sched_lock+0xac>
   355f0:	23ac      	movs	r3, #172	; 0xac
   355f2:	4a0a      	ldr	r2, [pc, #40]	; (3561c <k_sched_lock+0xbc>)
   355f4:	4912      	ldr	r1, [pc, #72]	; (35640 <k_sched_lock+0xe0>)
   355f6:	480b      	ldr	r0, [pc, #44]	; (35624 <k_sched_lock+0xc4>)
   355f8:	f003 fddf 	bl	391ba <printk>
   355fc:	4906      	ldr	r1, [pc, #24]	; (35618 <k_sched_lock+0xb8>)
   355fe:	4811      	ldr	r0, [pc, #68]	; (35644 <k_sched_lock+0xe4>)
   35600:	f003 fddb 	bl	391ba <printk>
   35604:	21ac      	movs	r1, #172	; 0xac
   35606:	4805      	ldr	r0, [pc, #20]	; (3561c <k_sched_lock+0xbc>)
   35608:	f004 f82e 	bl	39668 <assert_post_action>
	__asm__ volatile(
   3560c:	f385 8811 	msr	BASEPRI, r5
   35610:	f3bf 8f6f 	isb	sy
}
   35614:	bd38      	pop	{r3, r4, r5, pc}
   35616:	bf00      	nop
   35618:	20017fb0 	.word	0x20017fb0
   3561c:	0003f1a1 	.word	0x0003f1a1
   35620:	0003f1f3 	.word	0x0003f1f3
   35624:	0003f0e1 	.word	0x0003f0e1
   35628:	0003f208 	.word	0x0003f208
   3562c:	00042aef 	.word	0x00042aef
   35630:	00042c1c 	.word	0x00042c1c
   35634:	0003f6c8 	.word	0x0003f6c8
   35638:	20017f60 	.word	0x20017f60
   3563c:	00042c47 	.word	0x00042c47
   35640:	0003f1c7 	.word	0x0003f1c7
   35644:	0003f1de 	.word	0x0003f1de

00035648 <k_sched_unlock>:
{
   35648:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3564a:	f04f 0320 	mov.w	r3, #32
   3564e:	f3ef 8511 	mrs	r5, BASEPRI
   35652:	f383 8811 	msr	BASEPRI, r3
   35656:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3565a:	482d      	ldr	r0, [pc, #180]	; (35710 <k_sched_unlock+0xc8>)
   3565c:	f7fe fdca 	bl	341f4 <z_spin_lock_valid>
   35660:	b968      	cbnz	r0, 3567e <k_sched_unlock+0x36>
   35662:	2381      	movs	r3, #129	; 0x81
   35664:	4a2b      	ldr	r2, [pc, #172]	; (35714 <k_sched_unlock+0xcc>)
   35666:	492c      	ldr	r1, [pc, #176]	; (35718 <k_sched_unlock+0xd0>)
   35668:	482c      	ldr	r0, [pc, #176]	; (3571c <k_sched_unlock+0xd4>)
   3566a:	f003 fda6 	bl	391ba <printk>
   3566e:	4928      	ldr	r1, [pc, #160]	; (35710 <k_sched_unlock+0xc8>)
   35670:	482b      	ldr	r0, [pc, #172]	; (35720 <k_sched_unlock+0xd8>)
   35672:	f003 fda2 	bl	391ba <printk>
   35676:	2181      	movs	r1, #129	; 0x81
   35678:	4826      	ldr	r0, [pc, #152]	; (35714 <k_sched_unlock+0xcc>)
   3567a:	f003 fff5 	bl	39668 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   3567e:	4c29      	ldr	r4, [pc, #164]	; (35724 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   35680:	4823      	ldr	r0, [pc, #140]	; (35710 <k_sched_unlock+0xc8>)
   35682:	f7fe fdd3 	bl	3422c <z_spin_lock_set_owner>
   35686:	68a3      	ldr	r3, [r4, #8]
   35688:	7bdb      	ldrb	r3, [r3, #15]
   3568a:	b973      	cbnz	r3, 356aa <k_sched_unlock+0x62>
   3568c:	4926      	ldr	r1, [pc, #152]	; (35728 <k_sched_unlock+0xe0>)
   3568e:	f44f 7351 	mov.w	r3, #836	; 0x344
   35692:	4a26      	ldr	r2, [pc, #152]	; (3572c <k_sched_unlock+0xe4>)
   35694:	4821      	ldr	r0, [pc, #132]	; (3571c <k_sched_unlock+0xd4>)
   35696:	f003 fd90 	bl	391ba <printk>
   3569a:	4825      	ldr	r0, [pc, #148]	; (35730 <k_sched_unlock+0xe8>)
   3569c:	f003 fd8d 	bl	391ba <printk>
   356a0:	f44f 7151 	mov.w	r1, #836	; 0x344
   356a4:	4821      	ldr	r0, [pc, #132]	; (3572c <k_sched_unlock+0xe4>)
   356a6:	f003 ffdf 	bl	39668 <assert_post_action>
   356aa:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   356ae:	b173      	cbz	r3, 356ce <k_sched_unlock+0x86>
   356b0:	4920      	ldr	r1, [pc, #128]	; (35734 <k_sched_unlock+0xec>)
   356b2:	f240 3345 	movw	r3, #837	; 0x345
   356b6:	4a1d      	ldr	r2, [pc, #116]	; (3572c <k_sched_unlock+0xe4>)
   356b8:	4818      	ldr	r0, [pc, #96]	; (3571c <k_sched_unlock+0xd4>)
   356ba:	f003 fd7e 	bl	391ba <printk>
   356be:	481c      	ldr	r0, [pc, #112]	; (35730 <k_sched_unlock+0xe8>)
   356c0:	f003 fd7b 	bl	391ba <printk>
   356c4:	f240 3145 	movw	r1, #837	; 0x345
   356c8:	4818      	ldr	r0, [pc, #96]	; (3572c <k_sched_unlock+0xe4>)
   356ca:	f003 ffcd 	bl	39668 <assert_post_action>
		++_current->base.sched_locked;
   356ce:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   356d0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   356d2:	7bd3      	ldrb	r3, [r2, #15]
   356d4:	3301      	adds	r3, #1
   356d6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   356d8:	f7ff fd2a 	bl	35130 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   356dc:	480c      	ldr	r0, [pc, #48]	; (35710 <k_sched_unlock+0xc8>)
   356de:	f7fe fd97 	bl	34210 <z_spin_unlock_valid>
   356e2:	b968      	cbnz	r0, 35700 <k_sched_unlock+0xb8>
   356e4:	23ac      	movs	r3, #172	; 0xac
   356e6:	4a0b      	ldr	r2, [pc, #44]	; (35714 <k_sched_unlock+0xcc>)
   356e8:	4913      	ldr	r1, [pc, #76]	; (35738 <k_sched_unlock+0xf0>)
   356ea:	480c      	ldr	r0, [pc, #48]	; (3571c <k_sched_unlock+0xd4>)
   356ec:	f003 fd65 	bl	391ba <printk>
   356f0:	4907      	ldr	r1, [pc, #28]	; (35710 <k_sched_unlock+0xc8>)
   356f2:	4812      	ldr	r0, [pc, #72]	; (3573c <k_sched_unlock+0xf4>)
   356f4:	f003 fd61 	bl	391ba <printk>
   356f8:	21ac      	movs	r1, #172	; 0xac
   356fa:	4806      	ldr	r0, [pc, #24]	; (35714 <k_sched_unlock+0xcc>)
   356fc:	f003 ffb4 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35700:	f385 8811 	msr	BASEPRI, r5
   35704:	f3bf 8f6f 	isb	sy
}
   35708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   3570c:	f007 bec1 	b.w	3d492 <z_reschedule_unlocked>
   35710:	20017fb0 	.word	0x20017fb0
   35714:	0003f1a1 	.word	0x0003f1a1
   35718:	0003f1f3 	.word	0x0003f1f3
   3571c:	0003f0e1 	.word	0x0003f0e1
   35720:	0003f208 	.word	0x0003f208
   35724:	20017f60 	.word	0x20017f60
   35728:	00042df7 	.word	0x00042df7
   3572c:	00042d8d 	.word	0x00042d8d
   35730:	0003f6c8 	.word	0x0003f6c8
   35734:	00042aef 	.word	0x00042aef
   35738:	0003f1c7 	.word	0x0003f1c7
   3573c:	0003f1de 	.word	0x0003f1de

00035740 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35740:	4b0c      	ldr	r3, [pc, #48]	; (35774 <z_priq_dumb_remove+0x34>)
{
   35742:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35744:	4299      	cmp	r1, r3
{
   35746:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35748:	d10b      	bne.n	35762 <z_priq_dumb_remove+0x22>
   3574a:	490b      	ldr	r1, [pc, #44]	; (35778 <z_priq_dumb_remove+0x38>)
   3574c:	480b      	ldr	r0, [pc, #44]	; (3577c <z_priq_dumb_remove+0x3c>)
   3574e:	f240 33b5 	movw	r3, #949	; 0x3b5
   35752:	4a0b      	ldr	r2, [pc, #44]	; (35780 <z_priq_dumb_remove+0x40>)
   35754:	f003 fd31 	bl	391ba <printk>
   35758:	f240 31b5 	movw	r1, #949	; 0x3b5
   3575c:	4808      	ldr	r0, [pc, #32]	; (35780 <z_priq_dumb_remove+0x40>)
   3575e:	f003 ff83 	bl	39668 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   35762:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   35766:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   35768:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3576a:	2300      	movs	r3, #0
	node->prev = NULL;
   3576c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   35770:	bd10      	pop	{r4, pc}
   35772:	bf00      	nop
   35774:	200154f0 	.word	0x200154f0
   35778:	00042dd6 	.word	0x00042dd6
   3577c:	0003f0e1 	.word	0x0003f0e1
   35780:	00042d8d 	.word	0x00042d8d

00035784 <unready_thread>:
{
   35784:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   35786:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   3578a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   3578c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   3578e:	7b43      	ldrb	r3, [r0, #13]
   35790:	da06      	bge.n	357a0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   35796:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35798:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   3579a:	4806      	ldr	r0, [pc, #24]	; (357b4 <unready_thread+0x30>)
   3579c:	f7ff ffd0 	bl	35740 <z_priq_dumb_remove>
	update_cache(thread == _current);
   357a0:	4b05      	ldr	r3, [pc, #20]	; (357b8 <unready_thread+0x34>)
   357a2:	6898      	ldr	r0, [r3, #8]
   357a4:	1b03      	subs	r3, r0, r4
   357a6:	4258      	negs	r0, r3
   357a8:	4158      	adcs	r0, r3
}
   357aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   357ae:	f7ff bcbf 	b.w	35130 <update_cache>
   357b2:	bf00      	nop
   357b4:	20017f88 	.word	0x20017f88
   357b8:	20017f60 	.word	0x20017f60

000357bc <add_to_waitq_locked>:
{
   357bc:	b538      	push	{r3, r4, r5, lr}
   357be:	4604      	mov	r4, r0
   357c0:	460d      	mov	r5, r1
	unready_thread(thread);
   357c2:	f7ff ffdf 	bl	35784 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   357c6:	7b63      	ldrb	r3, [r4, #13]
   357c8:	f043 0302 	orr.w	r3, r3, #2
   357cc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   357ce:	b365      	cbz	r5, 3582a <add_to_waitq_locked+0x6e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   357d0:	4b16      	ldr	r3, [pc, #88]	; (3582c <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
   357d2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   357d4:	429c      	cmp	r4, r3
   357d6:	d10b      	bne.n	357f0 <add_to_waitq_locked+0x34>
   357d8:	4915      	ldr	r1, [pc, #84]	; (35830 <add_to_waitq_locked+0x74>)
   357da:	4816      	ldr	r0, [pc, #88]	; (35834 <add_to_waitq_locked+0x78>)
   357dc:	f240 33a6 	movw	r3, #934	; 0x3a6
   357e0:	4a15      	ldr	r2, [pc, #84]	; (35838 <add_to_waitq_locked+0x7c>)
   357e2:	f003 fcea 	bl	391ba <printk>
   357e6:	f240 31a6 	movw	r1, #934	; 0x3a6
   357ea:	4813      	ldr	r0, [pc, #76]	; (35838 <add_to_waitq_locked+0x7c>)
   357ec:	f003 ff3c 	bl	39668 <assert_post_action>
	return list->head == list;
   357f0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   357f2:	429d      	cmp	r5, r3
   357f4:	d109      	bne.n	3580a <add_to_waitq_locked+0x4e>
	sys_dnode_t *const tail = list->tail;
   357f6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   357f8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   357fc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   357fe:	606c      	str	r4, [r5, #4]
}
   35800:	e013      	b.n	3582a <add_to_waitq_locked+0x6e>
	return (node == list->tail) ? NULL : node->next;
   35802:	686a      	ldr	r2, [r5, #4]
   35804:	429a      	cmp	r2, r3
   35806:	d0f6      	beq.n	357f6 <add_to_waitq_locked+0x3a>
   35808:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3580a:	2b00      	cmp	r3, #0
   3580c:	d0f3      	beq.n	357f6 <add_to_waitq_locked+0x3a>
	int32_t b1 = thread_1->base.prio;
   3580e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   35812:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   35816:	4291      	cmp	r1, r2
   35818:	d0f3      	beq.n	35802 <add_to_waitq_locked+0x46>
		return b2 - b1;
   3581a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   3581c:	2a00      	cmp	r2, #0
   3581e:	ddf0      	ble.n	35802 <add_to_waitq_locked+0x46>
	sys_dnode_t *const prev = successor->prev;
   35820:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   35822:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   35826:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   35828:	605c      	str	r4, [r3, #4]
}
   3582a:	bd38      	pop	{r3, r4, r5, pc}
   3582c:	200154f0 	.word	0x200154f0
   35830:	00042dd6 	.word	0x00042dd6
   35834:	0003f0e1 	.word	0x0003f0e1
   35838:	00042d8d 	.word	0x00042d8d

0003583c <pend>:
{
   3583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35840:	4604      	mov	r4, r0
   35842:	4688      	mov	r8, r1
   35844:	4616      	mov	r6, r2
   35846:	461d      	mov	r5, r3
	__asm__ volatile(
   35848:	f04f 0320 	mov.w	r3, #32
   3584c:	f3ef 8711 	mrs	r7, BASEPRI
   35850:	f383 8811 	msr	BASEPRI, r3
   35854:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35858:	481f      	ldr	r0, [pc, #124]	; (358d8 <pend+0x9c>)
   3585a:	f7fe fccb 	bl	341f4 <z_spin_lock_valid>
   3585e:	b968      	cbnz	r0, 3587c <pend+0x40>
   35860:	2381      	movs	r3, #129	; 0x81
   35862:	4a1e      	ldr	r2, [pc, #120]	; (358dc <pend+0xa0>)
   35864:	491e      	ldr	r1, [pc, #120]	; (358e0 <pend+0xa4>)
   35866:	481f      	ldr	r0, [pc, #124]	; (358e4 <pend+0xa8>)
   35868:	f003 fca7 	bl	391ba <printk>
   3586c:	491a      	ldr	r1, [pc, #104]	; (358d8 <pend+0x9c>)
   3586e:	481e      	ldr	r0, [pc, #120]	; (358e8 <pend+0xac>)
   35870:	f003 fca3 	bl	391ba <printk>
   35874:	2181      	movs	r1, #129	; 0x81
   35876:	4819      	ldr	r0, [pc, #100]	; (358dc <pend+0xa0>)
   35878:	f003 fef6 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   3587c:	4816      	ldr	r0, [pc, #88]	; (358d8 <pend+0x9c>)
   3587e:	f7fe fcd5 	bl	3422c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   35882:	4620      	mov	r0, r4
   35884:	4641      	mov	r1, r8
   35886:	f7ff ff99 	bl	357bc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3588a:	4813      	ldr	r0, [pc, #76]	; (358d8 <pend+0x9c>)
   3588c:	f7fe fcc0 	bl	34210 <z_spin_unlock_valid>
   35890:	b968      	cbnz	r0, 358ae <pend+0x72>
   35892:	23ac      	movs	r3, #172	; 0xac
   35894:	4a11      	ldr	r2, [pc, #68]	; (358dc <pend+0xa0>)
   35896:	4915      	ldr	r1, [pc, #84]	; (358ec <pend+0xb0>)
   35898:	4812      	ldr	r0, [pc, #72]	; (358e4 <pend+0xa8>)
   3589a:	f003 fc8e 	bl	391ba <printk>
   3589e:	490e      	ldr	r1, [pc, #56]	; (358d8 <pend+0x9c>)
   358a0:	4813      	ldr	r0, [pc, #76]	; (358f0 <pend+0xb4>)
   358a2:	f003 fc8a 	bl	391ba <printk>
   358a6:	21ac      	movs	r1, #172	; 0xac
   358a8:	480c      	ldr	r0, [pc, #48]	; (358dc <pend+0xa0>)
   358aa:	f003 fedd 	bl	39668 <assert_post_action>
	__asm__ volatile(
   358ae:	f387 8811 	msr	BASEPRI, r7
   358b2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   358b6:	f1b5 3fff 	cmp.w	r5, #4294967295
   358ba:	bf08      	it	eq
   358bc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   358c0:	d008      	beq.n	358d4 <pend+0x98>
   358c2:	4632      	mov	r2, r6
   358c4:	462b      	mov	r3, r5
   358c6:	f104 0018 	add.w	r0, r4, #24
   358ca:	490a      	ldr	r1, [pc, #40]	; (358f4 <pend+0xb8>)
}
   358cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   358d0:	f000 bea8 	b.w	36624 <z_add_timeout>
   358d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   358d8:	20017fb0 	.word	0x20017fb0
   358dc:	0003f1a1 	.word	0x0003f1a1
   358e0:	0003f1f3 	.word	0x0003f1f3
   358e4:	0003f0e1 	.word	0x0003f0e1
   358e8:	0003f208 	.word	0x0003f208
   358ec:	0003f1c7 	.word	0x0003f1c7
   358f0:	0003f1de 	.word	0x0003f1de
   358f4:	00035dd1 	.word	0x00035dd1

000358f8 <z_pend_curr>:
{
   358f8:	b538      	push	{r3, r4, r5, lr}
   358fa:	4604      	mov	r4, r0
	pending_current = _current;
   358fc:	4b10      	ldr	r3, [pc, #64]	; (35940 <z_pend_curr+0x48>)
{
   358fe:	460d      	mov	r5, r1
	pending_current = _current;
   35900:	6898      	ldr	r0, [r3, #8]
   35902:	4b10      	ldr	r3, [pc, #64]	; (35944 <z_pend_curr+0x4c>)
{
   35904:	4611      	mov	r1, r2
	pending_current = _current;
   35906:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   35908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3590c:	f7ff ff96 	bl	3583c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35910:	4620      	mov	r0, r4
   35912:	f7fe fc7d 	bl	34210 <z_spin_unlock_valid>
   35916:	b968      	cbnz	r0, 35934 <z_pend_curr+0x3c>
   35918:	23c3      	movs	r3, #195	; 0xc3
   3591a:	4a0b      	ldr	r2, [pc, #44]	; (35948 <z_pend_curr+0x50>)
   3591c:	490b      	ldr	r1, [pc, #44]	; (3594c <z_pend_curr+0x54>)
   3591e:	480c      	ldr	r0, [pc, #48]	; (35950 <z_pend_curr+0x58>)
   35920:	f003 fc4b 	bl	391ba <printk>
   35924:	4621      	mov	r1, r4
   35926:	480b      	ldr	r0, [pc, #44]	; (35954 <z_pend_curr+0x5c>)
   35928:	f003 fc47 	bl	391ba <printk>
   3592c:	21c3      	movs	r1, #195	; 0xc3
   3592e:	4806      	ldr	r0, [pc, #24]	; (35948 <z_pend_curr+0x50>)
   35930:	f003 fe9a 	bl	39668 <assert_post_action>
   35934:	4628      	mov	r0, r5
}
   35936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3593a:	f7ef bf73 	b.w	25824 <arch_swap>
   3593e:	bf00      	nop
   35940:	20017f60 	.word	0x20017f60
   35944:	20017fa4 	.word	0x20017fa4
   35948:	0003f1a1 	.word	0x0003f1a1
   3594c:	0003f1c7 	.word	0x0003f1c7
   35950:	0003f0e1 	.word	0x0003f0e1
   35954:	0003f1de 	.word	0x0003f1de

00035958 <z_impl_k_thread_suspend>:
{
   35958:	b570      	push	{r4, r5, r6, lr}
   3595a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   3595c:	3018      	adds	r0, #24
   3595e:	f000 ff29 	bl	367b4 <z_abort_timeout>
	__asm__ volatile(
   35962:	f04f 0320 	mov.w	r3, #32
   35966:	f3ef 8611 	mrs	r6, BASEPRI
   3596a:	f383 8811 	msr	BASEPRI, r3
   3596e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35972:	4825      	ldr	r0, [pc, #148]	; (35a08 <z_impl_k_thread_suspend+0xb0>)
   35974:	f7fe fc3e 	bl	341f4 <z_spin_lock_valid>
   35978:	b968      	cbnz	r0, 35996 <z_impl_k_thread_suspend+0x3e>
   3597a:	2381      	movs	r3, #129	; 0x81
   3597c:	4a23      	ldr	r2, [pc, #140]	; (35a0c <z_impl_k_thread_suspend+0xb4>)
   3597e:	4924      	ldr	r1, [pc, #144]	; (35a10 <z_impl_k_thread_suspend+0xb8>)
   35980:	4824      	ldr	r0, [pc, #144]	; (35a14 <z_impl_k_thread_suspend+0xbc>)
   35982:	f003 fc1a 	bl	391ba <printk>
   35986:	4920      	ldr	r1, [pc, #128]	; (35a08 <z_impl_k_thread_suspend+0xb0>)
   35988:	4823      	ldr	r0, [pc, #140]	; (35a18 <z_impl_k_thread_suspend+0xc0>)
   3598a:	f003 fc16 	bl	391ba <printk>
   3598e:	2181      	movs	r1, #129	; 0x81
   35990:	481e      	ldr	r0, [pc, #120]	; (35a0c <z_impl_k_thread_suspend+0xb4>)
   35992:	f003 fe69 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35996:	481c      	ldr	r0, [pc, #112]	; (35a08 <z_impl_k_thread_suspend+0xb0>)
   35998:	f7fe fc48 	bl	3422c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3599c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   359a0:	7b63      	ldrb	r3, [r4, #13]
   359a2:	2a00      	cmp	r2, #0
   359a4:	da06      	bge.n	359b4 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   359a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   359aa:	4621      	mov	r1, r4
   359ac:	481b      	ldr	r0, [pc, #108]	; (35a1c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   359ae:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   359b0:	f7ff fec6 	bl	35740 <z_priq_dumb_remove>
		update_cache(thread == _current);
   359b4:	4d1a      	ldr	r5, [pc, #104]	; (35a20 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   359b6:	7b63      	ldrb	r3, [r4, #13]
   359b8:	68a8      	ldr	r0, [r5, #8]
   359ba:	f043 0310 	orr.w	r3, r3, #16
   359be:	7363      	strb	r3, [r4, #13]
   359c0:	1b03      	subs	r3, r0, r4
   359c2:	4258      	negs	r0, r3
   359c4:	4158      	adcs	r0, r3
   359c6:	f7ff fbb3 	bl	35130 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   359ca:	480f      	ldr	r0, [pc, #60]	; (35a08 <z_impl_k_thread_suspend+0xb0>)
   359cc:	f7fe fc20 	bl	34210 <z_spin_unlock_valid>
   359d0:	b968      	cbnz	r0, 359ee <z_impl_k_thread_suspend+0x96>
   359d2:	23ac      	movs	r3, #172	; 0xac
   359d4:	4a0d      	ldr	r2, [pc, #52]	; (35a0c <z_impl_k_thread_suspend+0xb4>)
   359d6:	4913      	ldr	r1, [pc, #76]	; (35a24 <z_impl_k_thread_suspend+0xcc>)
   359d8:	480e      	ldr	r0, [pc, #56]	; (35a14 <z_impl_k_thread_suspend+0xbc>)
   359da:	f003 fbee 	bl	391ba <printk>
   359de:	490a      	ldr	r1, [pc, #40]	; (35a08 <z_impl_k_thread_suspend+0xb0>)
   359e0:	4811      	ldr	r0, [pc, #68]	; (35a28 <z_impl_k_thread_suspend+0xd0>)
   359e2:	f003 fbea 	bl	391ba <printk>
   359e6:	21ac      	movs	r1, #172	; 0xac
   359e8:	4808      	ldr	r0, [pc, #32]	; (35a0c <z_impl_k_thread_suspend+0xb4>)
   359ea:	f003 fe3d 	bl	39668 <assert_post_action>
	__asm__ volatile(
   359ee:	f386 8811 	msr	BASEPRI, r6
   359f2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   359f6:	68ab      	ldr	r3, [r5, #8]
   359f8:	42a3      	cmp	r3, r4
   359fa:	d103      	bne.n	35a04 <z_impl_k_thread_suspend+0xac>
}
   359fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   35a00:	f007 bd47 	b.w	3d492 <z_reschedule_unlocked>
}
   35a04:	bd70      	pop	{r4, r5, r6, pc}
   35a06:	bf00      	nop
   35a08:	20017fb0 	.word	0x20017fb0
   35a0c:	0003f1a1 	.word	0x0003f1a1
   35a10:	0003f1f3 	.word	0x0003f1f3
   35a14:	0003f0e1 	.word	0x0003f0e1
   35a18:	0003f208 	.word	0x0003f208
   35a1c:	20017f88 	.word	0x20017f88
   35a20:	20017f60 	.word	0x20017f60
   35a24:	0003f1c7 	.word	0x0003f1c7
   35a28:	0003f1de 	.word	0x0003f1de

00035a2c <move_thread_to_end_of_prio_q>:
{
   35a2c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   35a2e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   35a32:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   35a34:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   35a36:	7b43      	ldrb	r3, [r0, #13]
   35a38:	da06      	bge.n	35a48 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   35a3e:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35a40:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   35a42:	481e      	ldr	r0, [pc, #120]	; (35abc <move_thread_to_end_of_prio_q+0x90>)
   35a44:	f7ff fe7c 	bl	35740 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   35a48:	7b63      	ldrb	r3, [r4, #13]
   35a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   35a4e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35a50:	4b1b      	ldr	r3, [pc, #108]	; (35ac0 <move_thread_to_end_of_prio_q+0x94>)
   35a52:	429c      	cmp	r4, r3
   35a54:	d10b      	bne.n	35a6e <move_thread_to_end_of_prio_q+0x42>
   35a56:	491b      	ldr	r1, [pc, #108]	; (35ac4 <move_thread_to_end_of_prio_q+0x98>)
   35a58:	481b      	ldr	r0, [pc, #108]	; (35ac8 <move_thread_to_end_of_prio_q+0x9c>)
   35a5a:	f240 33a6 	movw	r3, #934	; 0x3a6
   35a5e:	4a1b      	ldr	r2, [pc, #108]	; (35acc <move_thread_to_end_of_prio_q+0xa0>)
   35a60:	f003 fbab 	bl	391ba <printk>
   35a64:	f240 31a6 	movw	r1, #934	; 0x3a6
   35a68:	4818      	ldr	r0, [pc, #96]	; (35acc <move_thread_to_end_of_prio_q+0xa0>)
   35a6a:	f003 fdfd 	bl	39668 <assert_post_action>
	return list->head == list;
   35a6e:	4a18      	ldr	r2, [pc, #96]	; (35ad0 <move_thread_to_end_of_prio_q+0xa4>)
   35a70:	4610      	mov	r0, r2
   35a72:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node == list->tail) ? NULL : node->next;
   35a76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35a78:	4283      	cmp	r3, r0
   35a7a:	d107      	bne.n	35a8c <move_thread_to_end_of_prio_q+0x60>
	node->prev = tail;
   35a7c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   35a80:	600c      	str	r4, [r1, #0]
	list->tail = node;
   35a82:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   35a84:	e012      	b.n	35aac <move_thread_to_end_of_prio_q+0x80>
	return (node == list->tail) ? NULL : node->next;
   35a86:	4299      	cmp	r1, r3
   35a88:	d0f8      	beq.n	35a7c <move_thread_to_end_of_prio_q+0x50>
   35a8a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   35a8c:	2b00      	cmp	r3, #0
   35a8e:	d0f5      	beq.n	35a7c <move_thread_to_end_of_prio_q+0x50>
	int32_t b1 = thread_1->base.prio;
   35a90:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   35a94:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   35a98:	42ae      	cmp	r6, r5
   35a9a:	d0f4      	beq.n	35a86 <move_thread_to_end_of_prio_q+0x5a>
		return b2 - b1;
   35a9c:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   35a9e:	2d00      	cmp	r5, #0
   35aa0:	ddf1      	ble.n	35a86 <move_thread_to_end_of_prio_q+0x5a>
	sys_dnode_t *const prev = successor->prev;
   35aa2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   35aa4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   35aa8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   35aaa:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   35aac:	6890      	ldr	r0, [r2, #8]
   35aae:	1b03      	subs	r3, r0, r4
   35ab0:	4258      	negs	r0, r3
   35ab2:	4158      	adcs	r0, r3
}
   35ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   35ab8:	f7ff bb3a 	b.w	35130 <update_cache>
   35abc:	20017f88 	.word	0x20017f88
   35ac0:	200154f0 	.word	0x200154f0
   35ac4:	00042dd6 	.word	0x00042dd6
   35ac8:	0003f0e1 	.word	0x0003f0e1
   35acc:	00042d8d 	.word	0x00042d8d
   35ad0:	20017f60 	.word	0x20017f60

00035ad4 <z_time_slice>:
{
   35ad4:	b538      	push	{r3, r4, r5, lr}
   35ad6:	4604      	mov	r4, r0
	__asm__ volatile(
   35ad8:	f04f 0320 	mov.w	r3, #32
   35adc:	f3ef 8511 	mrs	r5, BASEPRI
   35ae0:	f383 8811 	msr	BASEPRI, r3
   35ae4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35ae8:	4829      	ldr	r0, [pc, #164]	; (35b90 <z_time_slice+0xbc>)
   35aea:	f7fe fb83 	bl	341f4 <z_spin_lock_valid>
   35aee:	b968      	cbnz	r0, 35b0c <z_time_slice+0x38>
   35af0:	2381      	movs	r3, #129	; 0x81
   35af2:	4a28      	ldr	r2, [pc, #160]	; (35b94 <z_time_slice+0xc0>)
   35af4:	4928      	ldr	r1, [pc, #160]	; (35b98 <z_time_slice+0xc4>)
   35af6:	4829      	ldr	r0, [pc, #164]	; (35b9c <z_time_slice+0xc8>)
   35af8:	f003 fb5f 	bl	391ba <printk>
   35afc:	4924      	ldr	r1, [pc, #144]	; (35b90 <z_time_slice+0xbc>)
   35afe:	4828      	ldr	r0, [pc, #160]	; (35ba0 <z_time_slice+0xcc>)
   35b00:	f003 fb5b 	bl	391ba <printk>
   35b04:	2181      	movs	r1, #129	; 0x81
   35b06:	4823      	ldr	r0, [pc, #140]	; (35b94 <z_time_slice+0xc0>)
   35b08:	f003 fdae 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35b0c:	4820      	ldr	r0, [pc, #128]	; (35b90 <z_time_slice+0xbc>)
   35b0e:	f7fe fb8d 	bl	3422c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   35b12:	4b24      	ldr	r3, [pc, #144]	; (35ba4 <z_time_slice+0xd0>)
   35b14:	4a24      	ldr	r2, [pc, #144]	; (35ba8 <z_time_slice+0xd4>)
   35b16:	6898      	ldr	r0, [r3, #8]
   35b18:	6811      	ldr	r1, [r2, #0]
   35b1a:	4288      	cmp	r0, r1
   35b1c:	d118      	bne.n	35b50 <z_time_slice+0x7c>
			z_reset_time_slice();
   35b1e:	f7ff faf1 	bl	35104 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35b22:	481b      	ldr	r0, [pc, #108]	; (35b90 <z_time_slice+0xbc>)
   35b24:	f7fe fb74 	bl	34210 <z_spin_unlock_valid>
   35b28:	b968      	cbnz	r0, 35b46 <z_time_slice+0x72>
   35b2a:	23ac      	movs	r3, #172	; 0xac
   35b2c:	4a19      	ldr	r2, [pc, #100]	; (35b94 <z_time_slice+0xc0>)
   35b2e:	491f      	ldr	r1, [pc, #124]	; (35bac <z_time_slice+0xd8>)
   35b30:	481a      	ldr	r0, [pc, #104]	; (35b9c <z_time_slice+0xc8>)
   35b32:	f003 fb42 	bl	391ba <printk>
   35b36:	4916      	ldr	r1, [pc, #88]	; (35b90 <z_time_slice+0xbc>)
   35b38:	481d      	ldr	r0, [pc, #116]	; (35bb0 <z_time_slice+0xdc>)
   35b3a:	f003 fb3e 	bl	391ba <printk>
   35b3e:	21ac      	movs	r1, #172	; 0xac
   35b40:	4814      	ldr	r0, [pc, #80]	; (35b94 <z_time_slice+0xc0>)
   35b42:	f003 fd91 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35b46:	f385 8811 	msr	BASEPRI, r5
   35b4a:	f3bf 8f6f 	isb	sy
}
   35b4e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   35b50:	2100      	movs	r1, #0
   35b52:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   35b54:	4a17      	ldr	r2, [pc, #92]	; (35bb4 <z_time_slice+0xe0>)
   35b56:	6812      	ldr	r2, [r2, #0]
   35b58:	b1ba      	cbz	r2, 35b8a <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
   35b5a:	89c2      	ldrh	r2, [r0, #14]
   35b5c:	2a7f      	cmp	r2, #127	; 0x7f
   35b5e:	d814      	bhi.n	35b8a <z_time_slice+0xb6>
		&& !z_is_thread_prevented_from_running(thread)
   35b60:	7b42      	ldrb	r2, [r0, #13]
   35b62:	06d2      	lsls	r2, r2, #27
   35b64:	d111      	bne.n	35b8a <z_time_slice+0xb6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   35b66:	4a14      	ldr	r2, [pc, #80]	; (35bb8 <z_time_slice+0xe4>)
   35b68:	f990 100e 	ldrsb.w	r1, [r0, #14]
   35b6c:	6812      	ldr	r2, [r2, #0]
   35b6e:	4291      	cmp	r1, r2
   35b70:	db0b      	blt.n	35b8a <z_time_slice+0xb6>
		&& !z_is_idle_thread_object(thread);
   35b72:	4a12      	ldr	r2, [pc, #72]	; (35bbc <z_time_slice+0xe8>)
   35b74:	4290      	cmp	r0, r2
   35b76:	d008      	beq.n	35b8a <z_time_slice+0xb6>
		if (ticks >= _current_cpu->slice_ticks) {
   35b78:	691a      	ldr	r2, [r3, #16]
   35b7a:	42a2      	cmp	r2, r4
   35b7c:	dc02      	bgt.n	35b84 <z_time_slice+0xb0>
			move_thread_to_end_of_prio_q(_current);
   35b7e:	f7ff ff55 	bl	35a2c <move_thread_to_end_of_prio_q>
   35b82:	e7cc      	b.n	35b1e <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   35b84:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   35b86:	611a      	str	r2, [r3, #16]
   35b88:	e7cb      	b.n	35b22 <z_time_slice+0x4e>
   35b8a:	2200      	movs	r2, #0
   35b8c:	e7fb      	b.n	35b86 <z_time_slice+0xb2>
   35b8e:	bf00      	nop
   35b90:	20017fb0 	.word	0x20017fb0
   35b94:	0003f1a1 	.word	0x0003f1a1
   35b98:	0003f1f3 	.word	0x0003f1f3
   35b9c:	0003f0e1 	.word	0x0003f0e1
   35ba0:	0003f208 	.word	0x0003f208
   35ba4:	20017f60 	.word	0x20017f60
   35ba8:	20017fa4 	.word	0x20017fa4
   35bac:	0003f1c7 	.word	0x0003f1c7
   35bb0:	0003f1de 	.word	0x0003f1de
   35bb4:	20017fac 	.word	0x20017fac
   35bb8:	20017fa8 	.word	0x20017fa8
   35bbc:	200154f0 	.word	0x200154f0

00035bc0 <z_set_prio>:
{
   35bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35bc2:	4604      	mov	r4, r0
   35bc4:	460d      	mov	r5, r1
	__asm__ volatile(
   35bc6:	f04f 0320 	mov.w	r3, #32
   35bca:	f3ef 8611 	mrs	r6, BASEPRI
   35bce:	f383 8811 	msr	BASEPRI, r3
   35bd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35bd6:	483b      	ldr	r0, [pc, #236]	; (35cc4 <z_set_prio+0x104>)
   35bd8:	f7fe fb0c 	bl	341f4 <z_spin_lock_valid>
   35bdc:	b968      	cbnz	r0, 35bfa <z_set_prio+0x3a>
   35bde:	2381      	movs	r3, #129	; 0x81
   35be0:	4a39      	ldr	r2, [pc, #228]	; (35cc8 <z_set_prio+0x108>)
   35be2:	493a      	ldr	r1, [pc, #232]	; (35ccc <z_set_prio+0x10c>)
   35be4:	483a      	ldr	r0, [pc, #232]	; (35cd0 <z_set_prio+0x110>)
   35be6:	f003 fae8 	bl	391ba <printk>
   35bea:	4936      	ldr	r1, [pc, #216]	; (35cc4 <z_set_prio+0x104>)
   35bec:	4839      	ldr	r0, [pc, #228]	; (35cd4 <z_set_prio+0x114>)
   35bee:	f003 fae4 	bl	391ba <printk>
   35bf2:	2181      	movs	r1, #129	; 0x81
   35bf4:	4834      	ldr	r0, [pc, #208]	; (35cc8 <z_set_prio+0x108>)
   35bf6:	f003 fd37 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35bfa:	4832      	ldr	r0, [pc, #200]	; (35cc4 <z_set_prio+0x104>)
   35bfc:	f7fe fb16 	bl	3422c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   35c00:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   35c02:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   35c04:	06da      	lsls	r2, r3, #27
   35c06:	d128      	bne.n	35c5a <z_set_prio+0x9a>
   35c08:	69a2      	ldr	r2, [r4, #24]
   35c0a:	bb32      	cbnz	r2, 35c5a <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   35c10:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   35c12:	4621      	mov	r1, r4
   35c14:	4830      	ldr	r0, [pc, #192]	; (35cd8 <z_set_prio+0x118>)
   35c16:	f7ff fd93 	bl	35740 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   35c1a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   35c1c:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   35c1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   35c22:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35c24:	4b2d      	ldr	r3, [pc, #180]	; (35cdc <z_set_prio+0x11c>)
   35c26:	429c      	cmp	r4, r3
   35c28:	d10b      	bne.n	35c42 <z_set_prio+0x82>
   35c2a:	492d      	ldr	r1, [pc, #180]	; (35ce0 <z_set_prio+0x120>)
   35c2c:	4828      	ldr	r0, [pc, #160]	; (35cd0 <z_set_prio+0x110>)
   35c2e:	f240 33a6 	movw	r3, #934	; 0x3a6
   35c32:	4a2c      	ldr	r2, [pc, #176]	; (35ce4 <z_set_prio+0x124>)
   35c34:	f003 fac1 	bl	391ba <printk>
   35c38:	f240 31a6 	movw	r1, #934	; 0x3a6
   35c3c:	4829      	ldr	r0, [pc, #164]	; (35ce4 <z_set_prio+0x124>)
   35c3e:	f003 fd13 	bl	39668 <assert_post_action>
	return list->head == list;
   35c42:	4a29      	ldr	r2, [pc, #164]	; (35ce8 <z_set_prio+0x128>)
   35c44:	4610      	mov	r0, r2
   35c46:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35c4a:	4283      	cmp	r3, r0
   35c4c:	d137      	bne.n	35cbe <z_set_prio+0xfe>
	return (node == list->tail) ? NULL : node->next;
   35c4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	node->prev = tail;
   35c50:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   35c54:	600c      	str	r4, [r1, #0]
	list->tail = node;
   35c56:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   35c58:	e02c      	b.n	35cb4 <z_set_prio+0xf4>
			thread->base.prio = prio;
   35c5a:	73a5      	strb	r5, [r4, #14]
   35c5c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35c5e:	4819      	ldr	r0, [pc, #100]	; (35cc4 <z_set_prio+0x104>)
   35c60:	f7fe fad6 	bl	34210 <z_spin_unlock_valid>
   35c64:	b968      	cbnz	r0, 35c82 <z_set_prio+0xc2>
   35c66:	23ac      	movs	r3, #172	; 0xac
   35c68:	4a17      	ldr	r2, [pc, #92]	; (35cc8 <z_set_prio+0x108>)
   35c6a:	4920      	ldr	r1, [pc, #128]	; (35cec <z_set_prio+0x12c>)
   35c6c:	4818      	ldr	r0, [pc, #96]	; (35cd0 <z_set_prio+0x110>)
   35c6e:	f003 faa4 	bl	391ba <printk>
   35c72:	4914      	ldr	r1, [pc, #80]	; (35cc4 <z_set_prio+0x104>)
   35c74:	481e      	ldr	r0, [pc, #120]	; (35cf0 <z_set_prio+0x130>)
   35c76:	f003 faa0 	bl	391ba <printk>
   35c7a:	21ac      	movs	r1, #172	; 0xac
   35c7c:	4812      	ldr	r0, [pc, #72]	; (35cc8 <z_set_prio+0x108>)
   35c7e:	f003 fcf3 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35c82:	f386 8811 	msr	BASEPRI, r6
   35c86:	f3bf 8f6f 	isb	sy
}
   35c8a:	4620      	mov	r0, r4
   35c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   35c8e:	428b      	cmp	r3, r1
   35c90:	d0de      	beq.n	35c50 <z_set_prio+0x90>
   35c92:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   35c94:	2b00      	cmp	r3, #0
   35c96:	d0db      	beq.n	35c50 <z_set_prio+0x90>
	int32_t b1 = thread_1->base.prio;
   35c98:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   35c9c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   35ca0:	42af      	cmp	r7, r5
   35ca2:	d0f4      	beq.n	35c8e <z_set_prio+0xce>
		return b2 - b1;
   35ca4:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   35ca6:	2d00      	cmp	r5, #0
   35ca8:	ddf1      	ble.n	35c8e <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   35caa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   35cac:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   35cb0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   35cb2:	605c      	str	r4, [r3, #4]
			update_cache(1);
   35cb4:	2001      	movs	r0, #1
   35cb6:	f7ff fa3b 	bl	35130 <update_cache>
   35cba:	2401      	movs	r4, #1
   35cbc:	e7cf      	b.n	35c5e <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
   35cbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   35cc0:	e7e8      	b.n	35c94 <z_set_prio+0xd4>
   35cc2:	bf00      	nop
   35cc4:	20017fb0 	.word	0x20017fb0
   35cc8:	0003f1a1 	.word	0x0003f1a1
   35ccc:	0003f1f3 	.word	0x0003f1f3
   35cd0:	0003f0e1 	.word	0x0003f0e1
   35cd4:	0003f208 	.word	0x0003f208
   35cd8:	20017f88 	.word	0x20017f88
   35cdc:	200154f0 	.word	0x200154f0
   35ce0:	00042dd6 	.word	0x00042dd6
   35ce4:	00042d8d 	.word	0x00042d8d
   35ce8:	20017f60 	.word	0x20017f60
   35cec:	0003f1c7 	.word	0x0003f1c7
   35cf0:	0003f1de 	.word	0x0003f1de

00035cf4 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   35cf4:	6883      	ldr	r3, [r0, #8]
{
   35cf6:	b510      	push	{r4, lr}
   35cf8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   35cfa:	b95b      	cbnz	r3, 35d14 <unpend_thread_no_timeout+0x20>
   35cfc:	490b      	ldr	r1, [pc, #44]	; (35d2c <unpend_thread_no_timeout+0x38>)
   35cfe:	480c      	ldr	r0, [pc, #48]	; (35d30 <unpend_thread_no_timeout+0x3c>)
   35d00:	f240 2342 	movw	r3, #578	; 0x242
   35d04:	4a0b      	ldr	r2, [pc, #44]	; (35d34 <unpend_thread_no_timeout+0x40>)
   35d06:	f003 fa58 	bl	391ba <printk>
   35d0a:	f240 2142 	movw	r1, #578	; 0x242
   35d0e:	4809      	ldr	r0, [pc, #36]	; (35d34 <unpend_thread_no_timeout+0x40>)
   35d10:	f003 fcaa 	bl	39668 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   35d14:	4621      	mov	r1, r4
   35d16:	68a0      	ldr	r0, [r4, #8]
   35d18:	f7ff fd12 	bl	35740 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   35d1c:	7b63      	ldrb	r3, [r4, #13]
   35d1e:	f023 0302 	bic.w	r3, r3, #2
   35d22:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   35d24:	2300      	movs	r3, #0
   35d26:	60a3      	str	r3, [r4, #8]
}
   35d28:	bd10      	pop	{r4, pc}
   35d2a:	bf00      	nop
   35d2c:	00042e28 	.word	0x00042e28
   35d30:	0003f0e1 	.word	0x0003f0e1
   35d34:	00042d8d 	.word	0x00042d8d

00035d38 <z_unpend_thread>:
{
   35d38:	b538      	push	{r3, r4, r5, lr}
   35d3a:	4604      	mov	r4, r0
	__asm__ volatile(
   35d3c:	f04f 0320 	mov.w	r3, #32
   35d40:	f3ef 8511 	mrs	r5, BASEPRI
   35d44:	f383 8811 	msr	BASEPRI, r3
   35d48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35d4c:	4819      	ldr	r0, [pc, #100]	; (35db4 <z_unpend_thread+0x7c>)
   35d4e:	f7fe fa51 	bl	341f4 <z_spin_lock_valid>
   35d52:	b968      	cbnz	r0, 35d70 <z_unpend_thread+0x38>
   35d54:	2381      	movs	r3, #129	; 0x81
   35d56:	4a18      	ldr	r2, [pc, #96]	; (35db8 <z_unpend_thread+0x80>)
   35d58:	4918      	ldr	r1, [pc, #96]	; (35dbc <z_unpend_thread+0x84>)
   35d5a:	4819      	ldr	r0, [pc, #100]	; (35dc0 <z_unpend_thread+0x88>)
   35d5c:	f003 fa2d 	bl	391ba <printk>
   35d60:	4914      	ldr	r1, [pc, #80]	; (35db4 <z_unpend_thread+0x7c>)
   35d62:	4818      	ldr	r0, [pc, #96]	; (35dc4 <z_unpend_thread+0x8c>)
   35d64:	f003 fa29 	bl	391ba <printk>
   35d68:	2181      	movs	r1, #129	; 0x81
   35d6a:	4813      	ldr	r0, [pc, #76]	; (35db8 <z_unpend_thread+0x80>)
   35d6c:	f003 fc7c 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35d70:	4810      	ldr	r0, [pc, #64]	; (35db4 <z_unpend_thread+0x7c>)
   35d72:	f7fe fa5b 	bl	3422c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   35d76:	4620      	mov	r0, r4
   35d78:	f7ff ffbc 	bl	35cf4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35d7c:	480d      	ldr	r0, [pc, #52]	; (35db4 <z_unpend_thread+0x7c>)
   35d7e:	f7fe fa47 	bl	34210 <z_spin_unlock_valid>
   35d82:	b968      	cbnz	r0, 35da0 <z_unpend_thread+0x68>
   35d84:	23ac      	movs	r3, #172	; 0xac
   35d86:	4a0c      	ldr	r2, [pc, #48]	; (35db8 <z_unpend_thread+0x80>)
   35d88:	490f      	ldr	r1, [pc, #60]	; (35dc8 <z_unpend_thread+0x90>)
   35d8a:	480d      	ldr	r0, [pc, #52]	; (35dc0 <z_unpend_thread+0x88>)
   35d8c:	f003 fa15 	bl	391ba <printk>
   35d90:	4908      	ldr	r1, [pc, #32]	; (35db4 <z_unpend_thread+0x7c>)
   35d92:	480e      	ldr	r0, [pc, #56]	; (35dcc <z_unpend_thread+0x94>)
   35d94:	f003 fa11 	bl	391ba <printk>
   35d98:	21ac      	movs	r1, #172	; 0xac
   35d9a:	4807      	ldr	r0, [pc, #28]	; (35db8 <z_unpend_thread+0x80>)
   35d9c:	f003 fc64 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35da0:	f385 8811 	msr	BASEPRI, r5
   35da4:	f3bf 8f6f 	isb	sy
   35da8:	f104 0018 	add.w	r0, r4, #24
}
   35dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   35db0:	f000 bd00 	b.w	367b4 <z_abort_timeout>
   35db4:	20017fb0 	.word	0x20017fb0
   35db8:	0003f1a1 	.word	0x0003f1a1
   35dbc:	0003f1f3 	.word	0x0003f1f3
   35dc0:	0003f0e1 	.word	0x0003f0e1
   35dc4:	0003f208 	.word	0x0003f208
   35dc8:	0003f1c7 	.word	0x0003f1c7
   35dcc:	0003f1de 	.word	0x0003f1de

00035dd0 <z_thread_timeout>:
{
   35dd0:	b570      	push	{r4, r5, r6, lr}
   35dd2:	4604      	mov	r4, r0
	__asm__ volatile(
   35dd4:	f04f 0320 	mov.w	r3, #32
   35dd8:	f3ef 8611 	mrs	r6, BASEPRI
   35ddc:	f383 8811 	msr	BASEPRI, r3
   35de0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35de4:	4820      	ldr	r0, [pc, #128]	; (35e68 <z_thread_timeout+0x98>)
   35de6:	f7fe fa05 	bl	341f4 <z_spin_lock_valid>
   35dea:	b968      	cbnz	r0, 35e08 <z_thread_timeout+0x38>
   35dec:	2381      	movs	r3, #129	; 0x81
   35dee:	4a1f      	ldr	r2, [pc, #124]	; (35e6c <z_thread_timeout+0x9c>)
   35df0:	491f      	ldr	r1, [pc, #124]	; (35e70 <z_thread_timeout+0xa0>)
   35df2:	4820      	ldr	r0, [pc, #128]	; (35e74 <z_thread_timeout+0xa4>)
   35df4:	f003 f9e1 	bl	391ba <printk>
   35df8:	491b      	ldr	r1, [pc, #108]	; (35e68 <z_thread_timeout+0x98>)
   35dfa:	481f      	ldr	r0, [pc, #124]	; (35e78 <z_thread_timeout+0xa8>)
   35dfc:	f003 f9dd 	bl	391ba <printk>
   35e00:	2181      	movs	r1, #129	; 0x81
   35e02:	481a      	ldr	r0, [pc, #104]	; (35e6c <z_thread_timeout+0x9c>)
   35e04:	f003 fc30 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35e08:	4817      	ldr	r0, [pc, #92]	; (35e68 <z_thread_timeout+0x98>)
   35e0a:	f7fe fa0f 	bl	3422c <z_spin_lock_set_owner>
		if (!killed) {
   35e0e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   35e12:	f013 0f28 	tst.w	r3, #40	; 0x28
   35e16:	d110      	bne.n	35e3a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   35e18:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   35e1c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   35e20:	b113      	cbz	r3, 35e28 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   35e22:	4628      	mov	r0, r5
   35e24:	f7ff ff66 	bl	35cf4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   35e28:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   35e2c:	4628      	mov	r0, r5
   35e2e:	f023 0314 	bic.w	r3, r3, #20
   35e32:	f804 3c0b 	strb.w	r3, [r4, #-11]
   35e36:	f7ff f9b3 	bl	351a0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35e3a:	480b      	ldr	r0, [pc, #44]	; (35e68 <z_thread_timeout+0x98>)
   35e3c:	f7fe f9e8 	bl	34210 <z_spin_unlock_valid>
   35e40:	b968      	cbnz	r0, 35e5e <z_thread_timeout+0x8e>
   35e42:	23ac      	movs	r3, #172	; 0xac
   35e44:	4a09      	ldr	r2, [pc, #36]	; (35e6c <z_thread_timeout+0x9c>)
   35e46:	490d      	ldr	r1, [pc, #52]	; (35e7c <z_thread_timeout+0xac>)
   35e48:	480a      	ldr	r0, [pc, #40]	; (35e74 <z_thread_timeout+0xa4>)
   35e4a:	f003 f9b6 	bl	391ba <printk>
   35e4e:	4906      	ldr	r1, [pc, #24]	; (35e68 <z_thread_timeout+0x98>)
   35e50:	480b      	ldr	r0, [pc, #44]	; (35e80 <z_thread_timeout+0xb0>)
   35e52:	f003 f9b2 	bl	391ba <printk>
   35e56:	21ac      	movs	r1, #172	; 0xac
   35e58:	4804      	ldr	r0, [pc, #16]	; (35e6c <z_thread_timeout+0x9c>)
   35e5a:	f003 fc05 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35e5e:	f386 8811 	msr	BASEPRI, r6
   35e62:	f3bf 8f6f 	isb	sy
}
   35e66:	bd70      	pop	{r4, r5, r6, pc}
   35e68:	20017fb0 	.word	0x20017fb0
   35e6c:	0003f1a1 	.word	0x0003f1a1
   35e70:	0003f1f3 	.word	0x0003f1f3
   35e74:	0003f0e1 	.word	0x0003f0e1
   35e78:	0003f208 	.word	0x0003f208
   35e7c:	0003f1c7 	.word	0x0003f1c7
   35e80:	0003f1de 	.word	0x0003f1de

00035e84 <z_unpend1_no_timeout>:
{
   35e84:	b570      	push	{r4, r5, r6, lr}
   35e86:	4605      	mov	r5, r0
	__asm__ volatile(
   35e88:	f04f 0320 	mov.w	r3, #32
   35e8c:	f3ef 8611 	mrs	r6, BASEPRI
   35e90:	f383 8811 	msr	BASEPRI, r3
   35e94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35e98:	481a      	ldr	r0, [pc, #104]	; (35f04 <z_unpend1_no_timeout+0x80>)
   35e9a:	f7fe f9ab 	bl	341f4 <z_spin_lock_valid>
   35e9e:	b968      	cbnz	r0, 35ebc <z_unpend1_no_timeout+0x38>
   35ea0:	2381      	movs	r3, #129	; 0x81
   35ea2:	4a19      	ldr	r2, [pc, #100]	; (35f08 <z_unpend1_no_timeout+0x84>)
   35ea4:	4919      	ldr	r1, [pc, #100]	; (35f0c <z_unpend1_no_timeout+0x88>)
   35ea6:	481a      	ldr	r0, [pc, #104]	; (35f10 <z_unpend1_no_timeout+0x8c>)
   35ea8:	f003 f987 	bl	391ba <printk>
   35eac:	4915      	ldr	r1, [pc, #84]	; (35f04 <z_unpend1_no_timeout+0x80>)
   35eae:	4819      	ldr	r0, [pc, #100]	; (35f14 <z_unpend1_no_timeout+0x90>)
   35eb0:	f003 f983 	bl	391ba <printk>
   35eb4:	2181      	movs	r1, #129	; 0x81
   35eb6:	4814      	ldr	r0, [pc, #80]	; (35f08 <z_unpend1_no_timeout+0x84>)
   35eb8:	f003 fbd6 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35ebc:	4811      	ldr	r0, [pc, #68]	; (35f04 <z_unpend1_no_timeout+0x80>)
   35ebe:	f7fe f9b5 	bl	3422c <z_spin_lock_set_owner>
	return list->head == list;
   35ec2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35ec4:	42a5      	cmp	r5, r4
   35ec6:	d01b      	beq.n	35f00 <z_unpend1_no_timeout+0x7c>
		if (thread != NULL) {
   35ec8:	b114      	cbz	r4, 35ed0 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   35eca:	4620      	mov	r0, r4
   35ecc:	f7ff ff12 	bl	35cf4 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35ed0:	480c      	ldr	r0, [pc, #48]	; (35f04 <z_unpend1_no_timeout+0x80>)
   35ed2:	f7fe f99d 	bl	34210 <z_spin_unlock_valid>
   35ed6:	b968      	cbnz	r0, 35ef4 <z_unpend1_no_timeout+0x70>
   35ed8:	23ac      	movs	r3, #172	; 0xac
   35eda:	4a0b      	ldr	r2, [pc, #44]	; (35f08 <z_unpend1_no_timeout+0x84>)
   35edc:	490e      	ldr	r1, [pc, #56]	; (35f18 <z_unpend1_no_timeout+0x94>)
   35ede:	480c      	ldr	r0, [pc, #48]	; (35f10 <z_unpend1_no_timeout+0x8c>)
   35ee0:	f003 f96b 	bl	391ba <printk>
   35ee4:	4907      	ldr	r1, [pc, #28]	; (35f04 <z_unpend1_no_timeout+0x80>)
   35ee6:	480d      	ldr	r0, [pc, #52]	; (35f1c <z_unpend1_no_timeout+0x98>)
   35ee8:	f003 f967 	bl	391ba <printk>
   35eec:	21ac      	movs	r1, #172	; 0xac
   35eee:	4806      	ldr	r0, [pc, #24]	; (35f08 <z_unpend1_no_timeout+0x84>)
   35ef0:	f003 fbba 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35ef4:	f386 8811 	msr	BASEPRI, r6
   35ef8:	f3bf 8f6f 	isb	sy
}
   35efc:	4620      	mov	r0, r4
   35efe:	bd70      	pop	{r4, r5, r6, pc}
   35f00:	2400      	movs	r4, #0
   35f02:	e7e5      	b.n	35ed0 <z_unpend1_no_timeout+0x4c>
   35f04:	20017fb0 	.word	0x20017fb0
   35f08:	0003f1a1 	.word	0x0003f1a1
   35f0c:	0003f1f3 	.word	0x0003f1f3
   35f10:	0003f0e1 	.word	0x0003f0e1
   35f14:	0003f208 	.word	0x0003f208
   35f18:	0003f1c7 	.word	0x0003f1c7
   35f1c:	0003f1de 	.word	0x0003f1de

00035f20 <z_unpend_first_thread>:
{
   35f20:	b570      	push	{r4, r5, r6, lr}
   35f22:	4605      	mov	r5, r0
	__asm__ volatile(
   35f24:	f04f 0320 	mov.w	r3, #32
   35f28:	f3ef 8611 	mrs	r6, BASEPRI
   35f2c:	f383 8811 	msr	BASEPRI, r3
   35f30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35f34:	481c      	ldr	r0, [pc, #112]	; (35fa8 <z_unpend_first_thread+0x88>)
   35f36:	f7fe f95d 	bl	341f4 <z_spin_lock_valid>
   35f3a:	b968      	cbnz	r0, 35f58 <z_unpend_first_thread+0x38>
   35f3c:	2381      	movs	r3, #129	; 0x81
   35f3e:	4a1b      	ldr	r2, [pc, #108]	; (35fac <z_unpend_first_thread+0x8c>)
   35f40:	491b      	ldr	r1, [pc, #108]	; (35fb0 <z_unpend_first_thread+0x90>)
   35f42:	481c      	ldr	r0, [pc, #112]	; (35fb4 <z_unpend_first_thread+0x94>)
   35f44:	f003 f939 	bl	391ba <printk>
   35f48:	4917      	ldr	r1, [pc, #92]	; (35fa8 <z_unpend_first_thread+0x88>)
   35f4a:	481b      	ldr	r0, [pc, #108]	; (35fb8 <z_unpend_first_thread+0x98>)
   35f4c:	f003 f935 	bl	391ba <printk>
   35f50:	2181      	movs	r1, #129	; 0x81
   35f52:	4816      	ldr	r0, [pc, #88]	; (35fac <z_unpend_first_thread+0x8c>)
   35f54:	f003 fb88 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   35f58:	4813      	ldr	r0, [pc, #76]	; (35fa8 <z_unpend_first_thread+0x88>)
   35f5a:	f7fe f967 	bl	3422c <z_spin_lock_set_owner>
	return list->head == list;
   35f5e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35f60:	42a5      	cmp	r5, r4
   35f62:	d01f      	beq.n	35fa4 <z_unpend_first_thread+0x84>
		if (thread != NULL) {
   35f64:	b134      	cbz	r4, 35f74 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   35f66:	4620      	mov	r0, r4
   35f68:	f7ff fec4 	bl	35cf4 <unpend_thread_no_timeout>
   35f6c:	f104 0018 	add.w	r0, r4, #24
   35f70:	f000 fc20 	bl	367b4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35f74:	480c      	ldr	r0, [pc, #48]	; (35fa8 <z_unpend_first_thread+0x88>)
   35f76:	f7fe f94b 	bl	34210 <z_spin_unlock_valid>
   35f7a:	b968      	cbnz	r0, 35f98 <z_unpend_first_thread+0x78>
   35f7c:	23ac      	movs	r3, #172	; 0xac
   35f7e:	4a0b      	ldr	r2, [pc, #44]	; (35fac <z_unpend_first_thread+0x8c>)
   35f80:	490e      	ldr	r1, [pc, #56]	; (35fbc <z_unpend_first_thread+0x9c>)
   35f82:	480c      	ldr	r0, [pc, #48]	; (35fb4 <z_unpend_first_thread+0x94>)
   35f84:	f003 f919 	bl	391ba <printk>
   35f88:	4907      	ldr	r1, [pc, #28]	; (35fa8 <z_unpend_first_thread+0x88>)
   35f8a:	480d      	ldr	r0, [pc, #52]	; (35fc0 <z_unpend_first_thread+0xa0>)
   35f8c:	f003 f915 	bl	391ba <printk>
   35f90:	21ac      	movs	r1, #172	; 0xac
   35f92:	4806      	ldr	r0, [pc, #24]	; (35fac <z_unpend_first_thread+0x8c>)
   35f94:	f003 fb68 	bl	39668 <assert_post_action>
	__asm__ volatile(
   35f98:	f386 8811 	msr	BASEPRI, r6
   35f9c:	f3bf 8f6f 	isb	sy
}
   35fa0:	4620      	mov	r0, r4
   35fa2:	bd70      	pop	{r4, r5, r6, pc}
   35fa4:	2400      	movs	r4, #0
   35fa6:	e7e5      	b.n	35f74 <z_unpend_first_thread+0x54>
   35fa8:	20017fb0 	.word	0x20017fb0
   35fac:	0003f1a1 	.word	0x0003f1a1
   35fb0:	0003f1f3 	.word	0x0003f1f3
   35fb4:	0003f0e1 	.word	0x0003f0e1
   35fb8:	0003f208 	.word	0x0003f208
   35fbc:	0003f1c7 	.word	0x0003f1c7
   35fc0:	0003f1de 	.word	0x0003f1de

00035fc4 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   35fc4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   35fc6:	4b04      	ldr	r3, [pc, #16]	; (35fd8 <z_sched_init+0x14>)
   35fc8:	4608      	mov	r0, r1
   35fca:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   35fce:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   35fd2:	f7ff b935 	b.w	35240 <k_sched_time_slice_set>
   35fd6:	bf00      	nop
   35fd8:	20017f60 	.word	0x20017f60

00035fdc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   35fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35fde:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   35fe2:	b173      	cbz	r3, 36002 <z_impl_k_yield+0x26>
   35fe4:	4940      	ldr	r1, [pc, #256]	; (360e8 <z_impl_k_yield+0x10c>)
   35fe6:	f240 43a1 	movw	r3, #1185	; 0x4a1
   35fea:	4a40      	ldr	r2, [pc, #256]	; (360ec <z_impl_k_yield+0x110>)
   35fec:	4840      	ldr	r0, [pc, #256]	; (360f0 <z_impl_k_yield+0x114>)
   35fee:	f003 f8e4 	bl	391ba <printk>
   35ff2:	4840      	ldr	r0, [pc, #256]	; (360f4 <z_impl_k_yield+0x118>)
   35ff4:	f003 f8e1 	bl	391ba <printk>
   35ff8:	f240 41a1 	movw	r1, #1185	; 0x4a1
   35ffc:	483b      	ldr	r0, [pc, #236]	; (360ec <z_impl_k_yield+0x110>)
   35ffe:	f003 fb33 	bl	39668 <assert_post_action>
	__asm__ volatile(
   36002:	f04f 0320 	mov.w	r3, #32
   36006:	f3ef 8611 	mrs	r6, BASEPRI
   3600a:	f383 8811 	msr	BASEPRI, r3
   3600e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36012:	4839      	ldr	r0, [pc, #228]	; (360f8 <z_impl_k_yield+0x11c>)
   36014:	f7fe f8ee 	bl	341f4 <z_spin_lock_valid>
   36018:	b968      	cbnz	r0, 36036 <z_impl_k_yield+0x5a>
   3601a:	2381      	movs	r3, #129	; 0x81
   3601c:	4a37      	ldr	r2, [pc, #220]	; (360fc <z_impl_k_yield+0x120>)
   3601e:	4938      	ldr	r1, [pc, #224]	; (36100 <z_impl_k_yield+0x124>)
   36020:	4833      	ldr	r0, [pc, #204]	; (360f0 <z_impl_k_yield+0x114>)
   36022:	f003 f8ca 	bl	391ba <printk>
   36026:	4934      	ldr	r1, [pc, #208]	; (360f8 <z_impl_k_yield+0x11c>)
   36028:	4836      	ldr	r0, [pc, #216]	; (36104 <z_impl_k_yield+0x128>)
   3602a:	f003 f8c6 	bl	391ba <printk>
   3602e:	2181      	movs	r1, #129	; 0x81
   36030:	4832      	ldr	r0, [pc, #200]	; (360fc <z_impl_k_yield+0x120>)
   36032:	f003 fb19 	bl	39668 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   36036:	4d34      	ldr	r5, [pc, #208]	; (36108 <z_impl_k_yield+0x12c>)
	z_spin_lock_set_owner(l);
   36038:	482f      	ldr	r0, [pc, #188]	; (360f8 <z_impl_k_yield+0x11c>)
   3603a:	f7fe f8f7 	bl	3422c <z_spin_lock_set_owner>
   3603e:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
   36040:	f105 0028 	add.w	r0, r5, #40	; 0x28
	thread->base.thread_state &= ~_THREAD_QUEUED;
   36044:	7b4b      	ldrb	r3, [r1, #13]
   36046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3604a:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   3604c:	f7ff fb78 	bl	35740 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   36050:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   36052:	7b63      	ldrb	r3, [r4, #13]
   36054:	f063 037f 	orn	r3, r3, #127	; 0x7f
   36058:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3605a:	4b2c      	ldr	r3, [pc, #176]	; (3610c <z_impl_k_yield+0x130>)
   3605c:	429c      	cmp	r4, r3
   3605e:	d10b      	bne.n	36078 <z_impl_k_yield+0x9c>
   36060:	492b      	ldr	r1, [pc, #172]	; (36110 <z_impl_k_yield+0x134>)
   36062:	4823      	ldr	r0, [pc, #140]	; (360f0 <z_impl_k_yield+0x114>)
   36064:	f240 33a6 	movw	r3, #934	; 0x3a6
   36068:	4a20      	ldr	r2, [pc, #128]	; (360ec <z_impl_k_yield+0x110>)
   3606a:	f003 f8a6 	bl	391ba <printk>
   3606e:	f240 31a6 	movw	r1, #934	; 0x3a6
   36072:	481e      	ldr	r0, [pc, #120]	; (360ec <z_impl_k_yield+0x110>)
   36074:	f003 faf8 	bl	39668 <assert_post_action>
	return list->head == list;
   36078:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3607a:	4826      	ldr	r0, [pc, #152]	; (36114 <z_impl_k_yield+0x138>)
	return (node == list->tail) ? NULL : node->next;
   3607c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3607e:	4283      	cmp	r3, r0
   36080:	d107      	bne.n	36092 <z_impl_k_yield+0xb6>
	node->prev = tail;
   36082:	e9c4 0200 	strd	r0, r2, [r4]
	tail->next = node;
   36086:	6014      	str	r4, [r2, #0]
	list->tail = node;
   36088:	62ec      	str	r4, [r5, #44]	; 0x2c
}
   3608a:	e012      	b.n	360b2 <z_impl_k_yield+0xd6>
	return (node == list->tail) ? NULL : node->next;
   3608c:	429a      	cmp	r2, r3
   3608e:	d0f8      	beq.n	36082 <z_impl_k_yield+0xa6>
   36090:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   36092:	2b00      	cmp	r3, #0
   36094:	d0f5      	beq.n	36082 <z_impl_k_yield+0xa6>
	int32_t b1 = thread_1->base.prio;
   36096:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   3609a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   3609e:	428f      	cmp	r7, r1
   360a0:	d0f4      	beq.n	3608c <z_impl_k_yield+0xb0>
		return b2 - b1;
   360a2:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   360a4:	2900      	cmp	r1, #0
   360a6:	ddf1      	ble.n	3608c <z_impl_k_yield+0xb0>
	sys_dnode_t *const prev = successor->prev;
   360a8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   360aa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   360ae:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   360b0:	605c      	str	r4, [r3, #4]
	update_cache(1);
   360b2:	2001      	movs	r0, #1
   360b4:	f7ff f83c 	bl	35130 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   360b8:	480f      	ldr	r0, [pc, #60]	; (360f8 <z_impl_k_yield+0x11c>)
   360ba:	f7fe f8a9 	bl	34210 <z_spin_unlock_valid>
   360be:	b968      	cbnz	r0, 360dc <z_impl_k_yield+0x100>
   360c0:	23c3      	movs	r3, #195	; 0xc3
   360c2:	4a0e      	ldr	r2, [pc, #56]	; (360fc <z_impl_k_yield+0x120>)
   360c4:	4914      	ldr	r1, [pc, #80]	; (36118 <z_impl_k_yield+0x13c>)
   360c6:	480a      	ldr	r0, [pc, #40]	; (360f0 <z_impl_k_yield+0x114>)
   360c8:	f003 f877 	bl	391ba <printk>
   360cc:	490a      	ldr	r1, [pc, #40]	; (360f8 <z_impl_k_yield+0x11c>)
   360ce:	4813      	ldr	r0, [pc, #76]	; (3611c <z_impl_k_yield+0x140>)
   360d0:	f003 f873 	bl	391ba <printk>
   360d4:	21c3      	movs	r1, #195	; 0xc3
   360d6:	4809      	ldr	r0, [pc, #36]	; (360fc <z_impl_k_yield+0x120>)
   360d8:	f003 fac6 	bl	39668 <assert_post_action>
   360dc:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   360de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   360e2:	f7ef bb9f 	b.w	25824 <arch_swap>
   360e6:	bf00      	nop
   360e8:	00042aef 	.word	0x00042aef
   360ec:	00042d8d 	.word	0x00042d8d
   360f0:	0003f0e1 	.word	0x0003f0e1
   360f4:	0003f6c8 	.word	0x0003f6c8
   360f8:	20017fb0 	.word	0x20017fb0
   360fc:	0003f1a1 	.word	0x0003f1a1
   36100:	0003f1f3 	.word	0x0003f1f3
   36104:	0003f208 	.word	0x0003f208
   36108:	20017f60 	.word	0x20017f60
   3610c:	200154f0 	.word	0x200154f0
   36110:	00042dd6 	.word	0x00042dd6
   36114:	20017f88 	.word	0x20017f88
   36118:	0003f1c7 	.word	0x0003f1c7
   3611c:	0003f1de 	.word	0x0003f1de

00036120 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   36120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36124:	4605      	mov	r5, r0
   36126:	460e      	mov	r6, r1
   36128:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   3612c:	b173      	cbz	r3, 3614c <z_tick_sleep+0x2c>
   3612e:	4943      	ldr	r1, [pc, #268]	; (3623c <z_tick_sleep+0x11c>)
   36130:	f240 43be 	movw	r3, #1214	; 0x4be
   36134:	4a42      	ldr	r2, [pc, #264]	; (36240 <z_tick_sleep+0x120>)
   36136:	4843      	ldr	r0, [pc, #268]	; (36244 <z_tick_sleep+0x124>)
   36138:	f003 f83f 	bl	391ba <printk>
   3613c:	4842      	ldr	r0, [pc, #264]	; (36248 <z_tick_sleep+0x128>)
   3613e:	f003 f83c 	bl	391ba <printk>
   36142:	f240 41be 	movw	r1, #1214	; 0x4be
   36146:	483e      	ldr	r0, [pc, #248]	; (36240 <z_tick_sleep+0x120>)
   36148:	f003 fa8e 	bl	39668 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3614c:	ea55 0306 	orrs.w	r3, r5, r6
   36150:	d103      	bne.n	3615a <z_tick_sleep+0x3a>
	z_impl_k_yield();
   36152:	f7ff ff43 	bl	35fdc <z_impl_k_yield>
		k_yield();
		return 0;
   36156:	2000      	movs	r0, #0
   36158:	e06d      	b.n	36236 <z_tick_sleep+0x116>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   3615a:	f06f 0401 	mvn.w	r4, #1
   3615e:	f04f 33ff 	mov.w	r3, #4294967295
   36162:	1b64      	subs	r4, r4, r5
   36164:	eb63 0306 	sbc.w	r3, r3, r6
   36168:	2c01      	cmp	r4, #1
   3616a:	f173 0300 	sbcs.w	r3, r3, #0
   3616e:	da02      	bge.n	36176 <z_tick_sleep+0x56>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   36170:	f007 f9a9 	bl	3d4c6 <sys_clock_tick_get_32>
   36174:	1944      	adds	r4, r0, r5
   36176:	f04f 0320 	mov.w	r3, #32
   3617a:	f3ef 8811 	mrs	r8, BASEPRI
   3617e:	f383 8811 	msr	BASEPRI, r3
   36182:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36186:	4831      	ldr	r0, [pc, #196]	; (3624c <z_tick_sleep+0x12c>)
   36188:	f7fe f834 	bl	341f4 <z_spin_lock_valid>
   3618c:	b968      	cbnz	r0, 361aa <z_tick_sleep+0x8a>
   3618e:	2381      	movs	r3, #129	; 0x81
   36190:	4a2f      	ldr	r2, [pc, #188]	; (36250 <z_tick_sleep+0x130>)
   36192:	4930      	ldr	r1, [pc, #192]	; (36254 <z_tick_sleep+0x134>)
   36194:	482b      	ldr	r0, [pc, #172]	; (36244 <z_tick_sleep+0x124>)
   36196:	f003 f810 	bl	391ba <printk>
   3619a:	492c      	ldr	r1, [pc, #176]	; (3624c <z_tick_sleep+0x12c>)
   3619c:	482e      	ldr	r0, [pc, #184]	; (36258 <z_tick_sleep+0x138>)
   3619e:	f003 f80c 	bl	391ba <printk>
   361a2:	2181      	movs	r1, #129	; 0x81
   361a4:	482a      	ldr	r0, [pc, #168]	; (36250 <z_tick_sleep+0x130>)
   361a6:	f003 fa5f 	bl	39668 <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   361aa:	4f2c      	ldr	r7, [pc, #176]	; (3625c <z_tick_sleep+0x13c>)
	z_spin_lock_set_owner(l);
   361ac:	4827      	ldr	r0, [pc, #156]	; (3624c <z_tick_sleep+0x12c>)
   361ae:	f7fe f83d 	bl	3422c <z_spin_lock_set_owner>
   361b2:	68b8      	ldr	r0, [r7, #8]
   361b4:	4b2a      	ldr	r3, [pc, #168]	; (36260 <z_tick_sleep+0x140>)
   361b6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   361b8:	f7ff fae4 	bl	35784 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   361bc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   361be:	462a      	mov	r2, r5
   361c0:	4633      	mov	r3, r6
   361c2:	3018      	adds	r0, #24
   361c4:	4927      	ldr	r1, [pc, #156]	; (36264 <z_tick_sleep+0x144>)
   361c6:	f000 fa2d 	bl	36624 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   361ca:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   361cc:	481f      	ldr	r0, [pc, #124]	; (3624c <z_tick_sleep+0x12c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   361ce:	7b53      	ldrb	r3, [r2, #13]
   361d0:	f043 0310 	orr.w	r3, r3, #16
   361d4:	7353      	strb	r3, [r2, #13]
   361d6:	f7fe f81b 	bl	34210 <z_spin_unlock_valid>
   361da:	b968      	cbnz	r0, 361f8 <z_tick_sleep+0xd8>
   361dc:	23c3      	movs	r3, #195	; 0xc3
   361de:	4a1c      	ldr	r2, [pc, #112]	; (36250 <z_tick_sleep+0x130>)
   361e0:	4921      	ldr	r1, [pc, #132]	; (36268 <z_tick_sleep+0x148>)
   361e2:	4818      	ldr	r0, [pc, #96]	; (36244 <z_tick_sleep+0x124>)
   361e4:	f002 ffe9 	bl	391ba <printk>
   361e8:	4918      	ldr	r1, [pc, #96]	; (3624c <z_tick_sleep+0x12c>)
   361ea:	4820      	ldr	r0, [pc, #128]	; (3626c <z_tick_sleep+0x14c>)
   361ec:	f002 ffe5 	bl	391ba <printk>
   361f0:	21c3      	movs	r1, #195	; 0xc3
   361f2:	4817      	ldr	r0, [pc, #92]	; (36250 <z_tick_sleep+0x130>)
   361f4:	f003 fa38 	bl	39668 <assert_post_action>
   361f8:	4640      	mov	r0, r8
   361fa:	f7ef fb13 	bl	25824 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   361fe:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   36200:	7b5b      	ldrb	r3, [r3, #13]
   36202:	06db      	lsls	r3, r3, #27
   36204:	d50e      	bpl.n	36224 <z_tick_sleep+0x104>
   36206:	491a      	ldr	r1, [pc, #104]	; (36270 <z_tick_sleep+0x150>)
   36208:	f240 43df 	movw	r3, #1247	; 0x4df
   3620c:	4a0c      	ldr	r2, [pc, #48]	; (36240 <z_tick_sleep+0x120>)
   3620e:	480d      	ldr	r0, [pc, #52]	; (36244 <z_tick_sleep+0x124>)
   36210:	f002 ffd3 	bl	391ba <printk>
   36214:	480c      	ldr	r0, [pc, #48]	; (36248 <z_tick_sleep+0x128>)
   36216:	f002 ffd0 	bl	391ba <printk>
   3621a:	f240 41df 	movw	r1, #1247	; 0x4df
   3621e:	4808      	ldr	r0, [pc, #32]	; (36240 <z_tick_sleep+0x120>)
   36220:	f003 fa22 	bl	39668 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   36224:	f007 f94f 	bl	3d4c6 <sys_clock_tick_get_32>
   36228:	1a20      	subs	r0, r4, r0
   3622a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   3622e:	2801      	cmp	r0, #1
   36230:	f173 0300 	sbcs.w	r3, r3, #0
   36234:	db8f      	blt.n	36156 <z_tick_sleep+0x36>
		return ticks;
	}
#endif

	return 0;
}
   36236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3623a:	bf00      	nop
   3623c:	00042aef 	.word	0x00042aef
   36240:	00042d8d 	.word	0x00042d8d
   36244:	0003f0e1 	.word	0x0003f0e1
   36248:	0003f6c8 	.word	0x0003f6c8
   3624c:	20017fb0 	.word	0x20017fb0
   36250:	0003f1a1 	.word	0x0003f1a1
   36254:	0003f1f3 	.word	0x0003f1f3
   36258:	0003f208 	.word	0x0003f208
   3625c:	20017f60 	.word	0x20017f60
   36260:	20017fa4 	.word	0x20017fa4
   36264:	00035dd1 	.word	0x00035dd1
   36268:	0003f1c7 	.word	0x0003f1c7
   3626c:	0003f1de 	.word	0x0003f1de
   36270:	00042e3f 	.word	0x00042e3f

00036274 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   36274:	b538      	push	{r3, r4, r5, lr}
   36276:	4605      	mov	r5, r0
   36278:	460c      	mov	r4, r1
   3627a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   3627e:	b173      	cbz	r3, 3629e <z_impl_k_sleep+0x2a>
   36280:	4913      	ldr	r1, [pc, #76]	; (362d0 <z_impl_k_sleep+0x5c>)
   36282:	f240 43ee 	movw	r3, #1262	; 0x4ee
   36286:	4a13      	ldr	r2, [pc, #76]	; (362d4 <z_impl_k_sleep+0x60>)
   36288:	4813      	ldr	r0, [pc, #76]	; (362d8 <z_impl_k_sleep+0x64>)
   3628a:	f002 ff96 	bl	391ba <printk>
   3628e:	4813      	ldr	r0, [pc, #76]	; (362dc <z_impl_k_sleep+0x68>)
   36290:	f002 ff93 	bl	391ba <printk>
   36294:	f240 41ee 	movw	r1, #1262	; 0x4ee
   36298:	480e      	ldr	r0, [pc, #56]	; (362d4 <z_impl_k_sleep+0x60>)
   3629a:	f003 f9e5 	bl	39668 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3629e:	f1b4 3fff 	cmp.w	r4, #4294967295
   362a2:	bf08      	it	eq
   362a4:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   362a8:	d106      	bne.n	362b8 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
   362aa:	4b0d      	ldr	r3, [pc, #52]	; (362e0 <z_impl_k_sleep+0x6c>)
   362ac:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   362ae:	f7ff fb53 	bl	35958 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   362b2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   362b6:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   362b8:	4628      	mov	r0, r5
   362ba:	4621      	mov	r1, r4
   362bc:	f7ff ff30 	bl	36120 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   362c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   362c4:	fb80 0303 	smull	r0, r3, r0, r3
   362c8:	0bc0      	lsrs	r0, r0, #15
   362ca:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   362ce:	e7f2      	b.n	362b6 <z_impl_k_sleep+0x42>
   362d0:	00042aef 	.word	0x00042aef
   362d4:	00042d8d 	.word	0x00042d8d
   362d8:	0003f0e1 	.word	0x0003f0e1
   362dc:	0003f6c8 	.word	0x0003f6c8
   362e0:	20017f60 	.word	0x20017f60

000362e4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   362e4:	4b01      	ldr	r3, [pc, #4]	; (362ec <z_impl_k_current_get+0x8>)
   362e6:	6898      	ldr	r0, [r3, #8]
   362e8:	4770      	bx	lr
   362ea:	bf00      	nop
   362ec:	20017f60 	.word	0x20017f60

000362f0 <z_impl_k_is_preempt_thread>:
   362f0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   362f4:	b93b      	cbnz	r3, 36306 <z_impl_k_is_preempt_thread+0x16>
   362f6:	4b05      	ldr	r3, [pc, #20]	; (3630c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   362f8:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   362fa:	89d8      	ldrh	r0, [r3, #14]
   362fc:	287f      	cmp	r0, #127	; 0x7f
   362fe:	bf8c      	ite	hi
   36300:	2000      	movhi	r0, #0
   36302:	2001      	movls	r0, #1
   36304:	4770      	bx	lr
   36306:	2000      	movs	r0, #0
}
   36308:	4770      	bx	lr
   3630a:	bf00      	nop
   3630c:	20017f60 	.word	0x20017f60

00036310 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   36310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36314:	4604      	mov	r4, r0
   36316:	f04f 0320 	mov.w	r3, #32
   3631a:	f3ef 8611 	mrs	r6, BASEPRI
   3631e:	f383 8811 	msr	BASEPRI, r3
   36322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36326:	4848      	ldr	r0, [pc, #288]	; (36448 <z_thread_abort+0x138>)
   36328:	f7fd ff64 	bl	341f4 <z_spin_lock_valid>
   3632c:	b968      	cbnz	r0, 3634a <z_thread_abort+0x3a>
   3632e:	2381      	movs	r3, #129	; 0x81
   36330:	4a46      	ldr	r2, [pc, #280]	; (3644c <z_thread_abort+0x13c>)
   36332:	4947      	ldr	r1, [pc, #284]	; (36450 <z_thread_abort+0x140>)
   36334:	4847      	ldr	r0, [pc, #284]	; (36454 <z_thread_abort+0x144>)
   36336:	f002 ff40 	bl	391ba <printk>
   3633a:	4943      	ldr	r1, [pc, #268]	; (36448 <z_thread_abort+0x138>)
   3633c:	4846      	ldr	r0, [pc, #280]	; (36458 <z_thread_abort+0x148>)
   3633e:	f002 ff3c 	bl	391ba <printk>
   36342:	2181      	movs	r1, #129	; 0x81
   36344:	4841      	ldr	r0, [pc, #260]	; (3644c <z_thread_abort+0x13c>)
   36346:	f003 f98f 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   3634a:	483f      	ldr	r0, [pc, #252]	; (36448 <z_thread_abort+0x138>)
   3634c:	f7fd ff6e 	bl	3422c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   36350:	7b63      	ldrb	r3, [r4, #13]
   36352:	071a      	lsls	r2, r3, #28
   36354:	d517      	bpl.n	36386 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36356:	483c      	ldr	r0, [pc, #240]	; (36448 <z_thread_abort+0x138>)
   36358:	f7fd ff5a 	bl	34210 <z_spin_unlock_valid>
   3635c:	b968      	cbnz	r0, 3637a <z_thread_abort+0x6a>
   3635e:	23ac      	movs	r3, #172	; 0xac
   36360:	4a3a      	ldr	r2, [pc, #232]	; (3644c <z_thread_abort+0x13c>)
   36362:	493e      	ldr	r1, [pc, #248]	; (3645c <z_thread_abort+0x14c>)
   36364:	483b      	ldr	r0, [pc, #236]	; (36454 <z_thread_abort+0x144>)
   36366:	f002 ff28 	bl	391ba <printk>
   3636a:	4937      	ldr	r1, [pc, #220]	; (36448 <z_thread_abort+0x138>)
   3636c:	483c      	ldr	r0, [pc, #240]	; (36460 <z_thread_abort+0x150>)
   3636e:	f002 ff24 	bl	391ba <printk>
   36372:	21ac      	movs	r1, #172	; 0xac
   36374:	4835      	ldr	r0, [pc, #212]	; (3644c <z_thread_abort+0x13c>)
   36376:	f003 f977 	bl	39668 <assert_post_action>
	__asm__ volatile(
   3637a:	f386 8811 	msr	BASEPRI, r6
   3637e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   36382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   36386:	f023 0220 	bic.w	r2, r3, #32
   3638a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   3638e:	09d2      	lsrs	r2, r2, #7
   36390:	d142      	bne.n	36418 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   36392:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   36394:	68a3      	ldr	r3, [r4, #8]
   36396:	b113      	cbz	r3, 3639e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   36398:	4620      	mov	r0, r4
   3639a:	f7ff fcab 	bl	35cf4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   3639e:	f104 0018 	add.w	r0, r4, #24
   363a2:	f000 fa07 	bl	367b4 <z_abort_timeout>
   363a6:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   363aa:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   363ae:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   363b0:	42bd      	cmp	r5, r7
   363b2:	d001      	beq.n	363b8 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   363b4:	2d00      	cmp	r5, #0
   363b6:	d139      	bne.n	3642c <z_thread_abort+0x11c>
		update_cache(1);
   363b8:	2001      	movs	r0, #1
   363ba:	f7fe feb9 	bl	35130 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   363be:	4b29      	ldr	r3, [pc, #164]	; (36464 <z_thread_abort+0x154>)
   363c0:	689b      	ldr	r3, [r3, #8]
   363c2:	42a3      	cmp	r3, r4
   363c4:	d1c7      	bne.n	36356 <z_thread_abort+0x46>
   363c6:	f3ef 8305 	mrs	r3, IPSR
   363ca:	2b00      	cmp	r3, #0
   363cc:	d1c3      	bne.n	36356 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   363ce:	481e      	ldr	r0, [pc, #120]	; (36448 <z_thread_abort+0x138>)
   363d0:	f7fd ff1e 	bl	34210 <z_spin_unlock_valid>
   363d4:	b968      	cbnz	r0, 363f2 <z_thread_abort+0xe2>
   363d6:	23c3      	movs	r3, #195	; 0xc3
   363d8:	4a1c      	ldr	r2, [pc, #112]	; (3644c <z_thread_abort+0x13c>)
   363da:	4920      	ldr	r1, [pc, #128]	; (3645c <z_thread_abort+0x14c>)
   363dc:	481d      	ldr	r0, [pc, #116]	; (36454 <z_thread_abort+0x144>)
   363de:	f002 feec 	bl	391ba <printk>
   363e2:	4919      	ldr	r1, [pc, #100]	; (36448 <z_thread_abort+0x138>)
   363e4:	481e      	ldr	r0, [pc, #120]	; (36460 <z_thread_abort+0x150>)
   363e6:	f002 fee8 	bl	391ba <printk>
   363ea:	21c3      	movs	r1, #195	; 0xc3
   363ec:	4817      	ldr	r0, [pc, #92]	; (3644c <z_thread_abort+0x13c>)
   363ee:	f003 f93b 	bl	39668 <assert_post_action>
   363f2:	4630      	mov	r0, r6
   363f4:	f7ef fa16 	bl	25824 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   363f8:	f240 6301 	movw	r3, #1537	; 0x601
   363fc:	4a1a      	ldr	r2, [pc, #104]	; (36468 <z_thread_abort+0x158>)
   363fe:	491b      	ldr	r1, [pc, #108]	; (3646c <z_thread_abort+0x15c>)
   36400:	4814      	ldr	r0, [pc, #80]	; (36454 <z_thread_abort+0x144>)
   36402:	f002 feda 	bl	391ba <printk>
   36406:	481a      	ldr	r0, [pc, #104]	; (36470 <z_thread_abort+0x160>)
   36408:	f002 fed7 	bl	391ba <printk>
   3640c:	f240 6101 	movw	r1, #1537	; 0x601
   36410:	4815      	ldr	r0, [pc, #84]	; (36468 <z_thread_abort+0x158>)
   36412:	f003 f929 	bl	39668 <assert_post_action>
   36416:	e79e      	b.n	36356 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   36418:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   3641c:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   36420:	4621      	mov	r1, r4
   36422:	4814      	ldr	r0, [pc, #80]	; (36474 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   36424:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   36426:	f7ff f98b 	bl	35740 <z_priq_dumb_remove>
}
   3642a:	e7b3      	b.n	36394 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   3642c:	4628      	mov	r0, r5
   3642e:	f7ff fc61 	bl	35cf4 <unpend_thread_no_timeout>
   36432:	f105 0018 	add.w	r0, r5, #24
   36436:	f000 f9bd 	bl	367b4 <z_abort_timeout>
		ready_thread(thread);
   3643a:	4628      	mov	r0, r5
   3643c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   36440:	f7fe feae 	bl	351a0 <ready_thread>
   36444:	e7b3      	b.n	363ae <z_thread_abort+0x9e>
   36446:	bf00      	nop
   36448:	20017fb0 	.word	0x20017fb0
   3644c:	0003f1a1 	.word	0x0003f1a1
   36450:	0003f1f3 	.word	0x0003f1f3
   36454:	0003f0e1 	.word	0x0003f0e1
   36458:	0003f208 	.word	0x0003f208
   3645c:	0003f1c7 	.word	0x0003f1c7
   36460:	0003f1de 	.word	0x0003f1de
   36464:	20017f60 	.word	0x20017f60
   36468:	00042d8d 	.word	0x00042d8d
   3646c:	000422ae 	.word	0x000422ae
   36470:	00042e7f 	.word	0x00042e7f
   36474:	20017f88 	.word	0x20017f88

00036478 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   36478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3647c:	4605      	mov	r5, r0
   3647e:	460f      	mov	r7, r1
   36480:	4616      	mov	r6, r2
	__asm__ volatile(
   36482:	f04f 0320 	mov.w	r3, #32
   36486:	f3ef 8811 	mrs	r8, BASEPRI
   3648a:	f383 8811 	msr	BASEPRI, r3
   3648e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36492:	4820      	ldr	r0, [pc, #128]	; (36514 <z_sched_wake+0x9c>)
   36494:	f7fd feae 	bl	341f4 <z_spin_lock_valid>
   36498:	b968      	cbnz	r0, 364b6 <z_sched_wake+0x3e>
   3649a:	2381      	movs	r3, #129	; 0x81
   3649c:	4a1e      	ldr	r2, [pc, #120]	; (36518 <z_sched_wake+0xa0>)
   3649e:	491f      	ldr	r1, [pc, #124]	; (3651c <z_sched_wake+0xa4>)
   364a0:	481f      	ldr	r0, [pc, #124]	; (36520 <z_sched_wake+0xa8>)
   364a2:	f002 fe8a 	bl	391ba <printk>
   364a6:	491b      	ldr	r1, [pc, #108]	; (36514 <z_sched_wake+0x9c>)
   364a8:	481e      	ldr	r0, [pc, #120]	; (36524 <z_sched_wake+0xac>)
   364aa:	f002 fe86 	bl	391ba <printk>
   364ae:	2181      	movs	r1, #129	; 0x81
   364b0:	4819      	ldr	r0, [pc, #100]	; (36518 <z_sched_wake+0xa0>)
   364b2:	f003 f8d9 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   364b6:	4817      	ldr	r0, [pc, #92]	; (36514 <z_sched_wake+0x9c>)
   364b8:	f7fd feb8 	bl	3422c <z_spin_lock_set_owner>
	return list->head == list;
   364bc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   364be:	42a5      	cmp	r5, r4
   364c0:	d026      	beq.n	36510 <z_sched_wake+0x98>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   364c2:	b164      	cbz	r4, 364de <z_sched_wake+0x66>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   364c4:	4620      	mov	r0, r4
   364c6:	67e7      	str	r7, [r4, #124]	; 0x7c
   364c8:	6166      	str	r6, [r4, #20]
   364ca:	f7ff fc13 	bl	35cf4 <unpend_thread_no_timeout>
   364ce:	f104 0018 	add.w	r0, r4, #24
   364d2:	f000 f96f 	bl	367b4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   364d6:	4620      	mov	r0, r4
   364d8:	f7fe fe62 	bl	351a0 <ready_thread>
			ret = true;
   364dc:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   364de:	480d      	ldr	r0, [pc, #52]	; (36514 <z_sched_wake+0x9c>)
   364e0:	f7fd fe96 	bl	34210 <z_spin_unlock_valid>
   364e4:	b968      	cbnz	r0, 36502 <z_sched_wake+0x8a>
   364e6:	23ac      	movs	r3, #172	; 0xac
   364e8:	4a0b      	ldr	r2, [pc, #44]	; (36518 <z_sched_wake+0xa0>)
   364ea:	490f      	ldr	r1, [pc, #60]	; (36528 <z_sched_wake+0xb0>)
   364ec:	480c      	ldr	r0, [pc, #48]	; (36520 <z_sched_wake+0xa8>)
   364ee:	f002 fe64 	bl	391ba <printk>
   364f2:	4908      	ldr	r1, [pc, #32]	; (36514 <z_sched_wake+0x9c>)
   364f4:	480d      	ldr	r0, [pc, #52]	; (3652c <z_sched_wake+0xb4>)
   364f6:	f002 fe60 	bl	391ba <printk>
   364fa:	21ac      	movs	r1, #172	; 0xac
   364fc:	4806      	ldr	r0, [pc, #24]	; (36518 <z_sched_wake+0xa0>)
   364fe:	f003 f8b3 	bl	39668 <assert_post_action>
	__asm__ volatile(
   36502:	f388 8811 	msr	BASEPRI, r8
   36506:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3650a:	4620      	mov	r0, r4
   3650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool ret = false;
   36510:	2400      	movs	r4, #0
   36512:	e7e4      	b.n	364de <z_sched_wake+0x66>
   36514:	20017fb0 	.word	0x20017fb0
   36518:	0003f1a1 	.word	0x0003f1a1
   3651c:	0003f1f3 	.word	0x0003f1f3
   36520:	0003f0e1 	.word	0x0003f0e1
   36524:	0003f208 	.word	0x0003f208
   36528:	0003f1c7 	.word	0x0003f1c7
   3652c:	0003f1de 	.word	0x0003f1de

00036530 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   36530:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   36532:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   36536:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   36538:	e9cd 6700 	strd	r6, r7, [sp]
   3653c:	f7ff f9dc 	bl	358f8 <z_pend_curr>

	if (data != NULL) {
   36540:	b11c      	cbz	r4, 3654a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   36542:	4b03      	ldr	r3, [pc, #12]	; (36550 <z_sched_wait+0x20>)
   36544:	689b      	ldr	r3, [r3, #8]
   36546:	695b      	ldr	r3, [r3, #20]
   36548:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   3654a:	b002      	add	sp, #8
   3654c:	bdd0      	pop	{r4, r6, r7, pc}
   3654e:	bf00      	nop
   36550:	20017f60 	.word	0x20017f60

00036554 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   36554:	b508      	push	{r3, lr}
   36556:	4806      	ldr	r0, [pc, #24]	; (36570 <z_data_copy+0x1c>)
   36558:	4a06      	ldr	r2, [pc, #24]	; (36574 <z_data_copy+0x20>)
   3655a:	4907      	ldr	r1, [pc, #28]	; (36578 <z_data_copy+0x24>)
   3655c:	1a12      	subs	r2, r2, r0
   3655e:	f007 f885 	bl	3d66c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   36562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   36566:	4a05      	ldr	r2, [pc, #20]	; (3657c <z_data_copy+0x28>)
   36568:	4905      	ldr	r1, [pc, #20]	; (36580 <z_data_copy+0x2c>)
   3656a:	4806      	ldr	r0, [pc, #24]	; (36584 <z_data_copy+0x30>)
   3656c:	f007 b87e 	b.w	3d66c <memcpy>
   36570:	20014500 	.word	0x20014500
   36574:	20014be0 	.word	0x20014be0
   36578:	00043458 	.word	0x00043458
   3657c:	00000000 	.word	0x00000000
   36580:	00043440 	.word	0x00043440
   36584:	20014500 	.word	0x20014500

00036588 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   36588:	4b03      	ldr	r3, [pc, #12]	; (36598 <elapsed+0x10>)
   3658a:	681b      	ldr	r3, [r3, #0]
   3658c:	b90b      	cbnz	r3, 36592 <elapsed+0xa>
   3658e:	f7ef b8d5 	b.w	2573c <sys_clock_elapsed>
}
   36592:	2000      	movs	r0, #0
   36594:	4770      	bx	lr
   36596:	bf00      	nop
   36598:	20017fb4 	.word	0x20017fb4

0003659c <next_timeout>:
	return list->head == list;
   3659c:	4b12      	ldr	r3, [pc, #72]	; (365e8 <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
   3659e:	b510      	push	{r4, lr}
   365a0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   365a2:	429c      	cmp	r4, r3
   365a4:	d104      	bne.n	365b0 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   365a6:	f7ff ffef 	bl	36588 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   365aa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   365ae:	e012      	b.n	365d6 <next_timeout+0x3a>
	int32_t ticks_elapsed = elapsed();
   365b0:	f7ff ffea 	bl	36588 <elapsed>
   365b4:	4601      	mov	r1, r0
	int32_t ret = to == NULL ? MAX_WAIT
   365b6:	2c00      	cmp	r4, #0
   365b8:	d0f7      	beq.n	365aa <next_timeout+0xe>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   365ba:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   365be:	1a40      	subs	r0, r0, r1
   365c0:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   365c4:	2801      	cmp	r0, #1
   365c6:	f173 0200 	sbcs.w	r2, r3, #0
   365ca:	db0b      	blt.n	365e4 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   365cc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   365d0:	f173 0300 	sbcs.w	r3, r3, #0
   365d4:	dae9      	bge.n	365aa <next_timeout+0xe>

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   365d6:	4b05      	ldr	r3, [pc, #20]	; (365ec <next_timeout+0x50>)
   365d8:	691b      	ldr	r3, [r3, #16]
   365da:	b113      	cbz	r3, 365e2 <next_timeout+0x46>
   365dc:	4298      	cmp	r0, r3
   365de:	bfa8      	it	ge
   365e0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   365e2:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   365e4:	2000      	movs	r0, #0
   365e6:	e7f6      	b.n	365d6 <next_timeout+0x3a>
   365e8:	20014794 	.word	0x20014794
   365ec:	20017f60 	.word	0x20017f60

000365f0 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
   365f0:	4a0b      	ldr	r2, [pc, #44]	; (36620 <remove_timeout+0x30>)
{
   365f2:	b530      	push	{r4, r5, lr}
   365f4:	6852      	ldr	r2, [r2, #4]
   365f6:	6803      	ldr	r3, [r0, #0]
   365f8:	4290      	cmp	r0, r2
   365fa:	d009      	beq.n	36610 <remove_timeout+0x20>
	if (next(t) != NULL) {
   365fc:	b143      	cbz	r3, 36610 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
   365fe:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   36602:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   36606:	1912      	adds	r2, r2, r4
   36608:	eb41 0105 	adc.w	r1, r1, r5
   3660c:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   36610:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   36612:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   36614:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   36616:	2300      	movs	r3, #0
	node->prev = NULL;
   36618:	e9c0 3300 	strd	r3, r3, [r0]
}
   3661c:	bd30      	pop	{r4, r5, pc}
   3661e:	bf00      	nop
   36620:	20014794 	.word	0x20014794

00036624 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   36624:	f1b3 3fff 	cmp.w	r3, #4294967295
   36628:	bf08      	it	eq
   3662a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   3662e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36632:	4604      	mov	r4, r0
   36634:	460e      	mov	r6, r1
   36636:	461d      	mov	r5, r3
   36638:	4617      	mov	r7, r2
   3663a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3663c:	f000 8095 	beq.w	3676a <z_add_timeout+0x146>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   36640:	6803      	ldr	r3, [r0, #0]
   36642:	b163      	cbz	r3, 3665e <z_add_timeout+0x3a>
   36644:	494e      	ldr	r1, [pc, #312]	; (36780 <z_add_timeout+0x15c>)
   36646:	235d      	movs	r3, #93	; 0x5d
   36648:	4a4e      	ldr	r2, [pc, #312]	; (36784 <z_add_timeout+0x160>)
   3664a:	484f      	ldr	r0, [pc, #316]	; (36788 <z_add_timeout+0x164>)
   3664c:	f002 fdb5 	bl	391ba <printk>
   36650:	484e      	ldr	r0, [pc, #312]	; (3678c <z_add_timeout+0x168>)
   36652:	f002 fdb2 	bl	391ba <printk>
   36656:	215d      	movs	r1, #93	; 0x5d
   36658:	484a      	ldr	r0, [pc, #296]	; (36784 <z_add_timeout+0x160>)
   3665a:	f003 f805 	bl	39668 <assert_post_action>
	to->fn = fn;
   3665e:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   36660:	f04f 0320 	mov.w	r3, #32
   36664:	f3ef 8611 	mrs	r6, BASEPRI
   36668:	f383 8811 	msr	BASEPRI, r3
   3666c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36670:	4847      	ldr	r0, [pc, #284]	; (36790 <z_add_timeout+0x16c>)
   36672:	f7fd fdbf 	bl	341f4 <z_spin_lock_valid>
   36676:	b968      	cbnz	r0, 36694 <z_add_timeout+0x70>
   36678:	2381      	movs	r3, #129	; 0x81
   3667a:	4a46      	ldr	r2, [pc, #280]	; (36794 <z_add_timeout+0x170>)
   3667c:	4946      	ldr	r1, [pc, #280]	; (36798 <z_add_timeout+0x174>)
   3667e:	4842      	ldr	r0, [pc, #264]	; (36788 <z_add_timeout+0x164>)
   36680:	f002 fd9b 	bl	391ba <printk>
   36684:	4942      	ldr	r1, [pc, #264]	; (36790 <z_add_timeout+0x16c>)
   36686:	4845      	ldr	r0, [pc, #276]	; (3679c <z_add_timeout+0x178>)
   36688:	f002 fd97 	bl	391ba <printk>
   3668c:	2181      	movs	r1, #129	; 0x81
   3668e:	4841      	ldr	r0, [pc, #260]	; (36794 <z_add_timeout+0x170>)
   36690:	f002 ffea 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   36694:	483e      	ldr	r0, [pc, #248]	; (36790 <z_add_timeout+0x16c>)
   36696:	f7fd fdc9 	bl	3422c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   3669a:	f06f 0301 	mvn.w	r3, #1
   3669e:	f04f 3cff 	mov.w	ip, #4294967295
   366a2:	1bda      	subs	r2, r3, r7
   366a4:	eb6c 0208 	sbc.w	r2, ip, r8
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   366a8:	2a00      	cmp	r2, #0
   366aa:	db1e      	blt.n	366ea <z_add_timeout+0xc6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   366ac:	493c      	ldr	r1, [pc, #240]	; (367a0 <z_add_timeout+0x17c>)
   366ae:	e9d1 2000 	ldrd	r2, r0, [r1]
   366b2:	1a9b      	subs	r3, r3, r2
   366b4:	eb6c 0000 	sbc.w	r0, ip, r0
   366b8:	1bda      	subs	r2, r3, r7
   366ba:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
   366be:	2a01      	cmp	r2, #1
   366c0:	f170 0300 	sbcs.w	r3, r0, #0
   366c4:	da01      	bge.n	366ca <z_add_timeout+0xa6>
   366c6:	2201      	movs	r2, #1
   366c8:	2000      	movs	r0, #0
   366ca:	e9c4 2004 	strd	r2, r0, [r4, #16]
	return list->head == list;
   366ce:	4a35      	ldr	r2, [pc, #212]	; (367a4 <z_add_timeout+0x180>)
   366d0:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
   366d2:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   366d6:	4293      	cmp	r3, r2
   366d8:	bf08      	it	eq
   366da:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   366dc:	b973      	cbnz	r3, 366fc <z_add_timeout+0xd8>
	node->prev = tail;
   366de:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   366e2:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   366e6:	6054      	str	r4, [r2, #4]
}
   366e8:	e01a      	b.n	36720 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   366ea:	f7ff ff4d 	bl	36588 <elapsed>
   366ee:	1c7a      	adds	r2, r7, #1
   366f0:	f145 0500 	adc.w	r5, r5, #0
   366f4:	1812      	adds	r2, r2, r0
   366f6:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   366fa:	e7e6      	b.n	366ca <z_add_timeout+0xa6>
			if (t->dticks > to->dticks) {
   366fc:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   36700:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   36704:	4281      	cmp	r1, r0
   36706:	eb75 0e07 	sbcs.w	lr, r5, r7
   3670a:	da30      	bge.n	3676e <z_add_timeout+0x14a>
				t->dticks -= to->dticks;
   3670c:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
   3670e:	6859      	ldr	r1, [r3, #4]
   36710:	eb67 0705 	sbc.w	r7, r7, r5
   36714:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
   36718:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   3671c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3671e:	605c      	str	r4, [r3, #4]
	return list->head == list;
   36720:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36722:	4293      	cmp	r3, r2
   36724:	d00b      	beq.n	3673e <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   36726:	429c      	cmp	r4, r3
   36728:	d109      	bne.n	3673e <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   3672a:	f7ff ff37 	bl	3659c <next_timeout>

			if (next_time == 0 ||
   3672e:	b118      	cbz	r0, 36738 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   36730:	4b1d      	ldr	r3, [pc, #116]	; (367a8 <z_add_timeout+0x184>)
			if (next_time == 0 ||
   36732:	691b      	ldr	r3, [r3, #16]
   36734:	4283      	cmp	r3, r0
   36736:	d002      	beq.n	3673e <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   36738:	2100      	movs	r1, #0
   3673a:	f7ee ffcd 	bl	256d8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3673e:	4814      	ldr	r0, [pc, #80]	; (36790 <z_add_timeout+0x16c>)
   36740:	f7fd fd66 	bl	34210 <z_spin_unlock_valid>
   36744:	b968      	cbnz	r0, 36762 <z_add_timeout+0x13e>
   36746:	23ac      	movs	r3, #172	; 0xac
   36748:	4a12      	ldr	r2, [pc, #72]	; (36794 <z_add_timeout+0x170>)
   3674a:	4918      	ldr	r1, [pc, #96]	; (367ac <z_add_timeout+0x188>)
   3674c:	480e      	ldr	r0, [pc, #56]	; (36788 <z_add_timeout+0x164>)
   3674e:	f002 fd34 	bl	391ba <printk>
   36752:	490f      	ldr	r1, [pc, #60]	; (36790 <z_add_timeout+0x16c>)
   36754:	4816      	ldr	r0, [pc, #88]	; (367b0 <z_add_timeout+0x18c>)
   36756:	f002 fd30 	bl	391ba <printk>
   3675a:	21ac      	movs	r1, #172	; 0xac
   3675c:	480d      	ldr	r0, [pc, #52]	; (36794 <z_add_timeout+0x170>)
   3675e:	f002 ff83 	bl	39668 <assert_post_action>
	__asm__ volatile(
   36762:	f386 8811 	msr	BASEPRI, r6
   36766:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   3676a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			to->dticks -= t->dticks;
   3676e:	1a09      	subs	r1, r1, r0
   36770:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   36774:	4563      	cmp	r3, ip
   36776:	e9c4 1504 	strd	r1, r5, [r4, #16]
   3677a:	d0b0      	beq.n	366de <z_add_timeout+0xba>
   3677c:	681b      	ldr	r3, [r3, #0]
   3677e:	e7ad      	b.n	366dc <z_add_timeout+0xb8>
   36780:	00042ec5 	.word	0x00042ec5
   36784:	00042ea1 	.word	0x00042ea1
   36788:	0003f0e1 	.word	0x0003f0e1
   3678c:	0003f6c8 	.word	0x0003f6c8
   36790:	20017fb8 	.word	0x20017fb8
   36794:	0003f1a1 	.word	0x0003f1a1
   36798:	0003f1f3 	.word	0x0003f1f3
   3679c:	0003f208 	.word	0x0003f208
   367a0:	200155f0 	.word	0x200155f0
   367a4:	20014794 	.word	0x20014794
   367a8:	20017f60 	.word	0x20017f60
   367ac:	0003f1c7 	.word	0x0003f1c7
   367b0:	0003f1de 	.word	0x0003f1de

000367b4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   367b4:	b538      	push	{r3, r4, r5, lr}
   367b6:	4604      	mov	r4, r0
	__asm__ volatile(
   367b8:	f04f 0320 	mov.w	r3, #32
   367bc:	f3ef 8511 	mrs	r5, BASEPRI
   367c0:	f383 8811 	msr	BASEPRI, r3
   367c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   367c8:	481a      	ldr	r0, [pc, #104]	; (36834 <z_abort_timeout+0x80>)
   367ca:	f7fd fd13 	bl	341f4 <z_spin_lock_valid>
   367ce:	b968      	cbnz	r0, 367ec <z_abort_timeout+0x38>
   367d0:	2381      	movs	r3, #129	; 0x81
   367d2:	4a19      	ldr	r2, [pc, #100]	; (36838 <z_abort_timeout+0x84>)
   367d4:	4919      	ldr	r1, [pc, #100]	; (3683c <z_abort_timeout+0x88>)
   367d6:	481a      	ldr	r0, [pc, #104]	; (36840 <z_abort_timeout+0x8c>)
   367d8:	f002 fcef 	bl	391ba <printk>
   367dc:	4915      	ldr	r1, [pc, #84]	; (36834 <z_abort_timeout+0x80>)
   367de:	4819      	ldr	r0, [pc, #100]	; (36844 <z_abort_timeout+0x90>)
   367e0:	f002 fceb 	bl	391ba <printk>
   367e4:	2181      	movs	r1, #129	; 0x81
   367e6:	4814      	ldr	r0, [pc, #80]	; (36838 <z_abort_timeout+0x84>)
   367e8:	f002 ff3e 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   367ec:	4811      	ldr	r0, [pc, #68]	; (36834 <z_abort_timeout+0x80>)
   367ee:	f7fd fd1d 	bl	3422c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   367f2:	6823      	ldr	r3, [r4, #0]
   367f4:	b1db      	cbz	r3, 3682e <z_abort_timeout+0x7a>
			remove_timeout(to);
   367f6:	4620      	mov	r0, r4
   367f8:	f7ff fefa 	bl	365f0 <remove_timeout>
			ret = 0;
   367fc:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   367fe:	480d      	ldr	r0, [pc, #52]	; (36834 <z_abort_timeout+0x80>)
   36800:	f7fd fd06 	bl	34210 <z_spin_unlock_valid>
   36804:	b968      	cbnz	r0, 36822 <z_abort_timeout+0x6e>
   36806:	23ac      	movs	r3, #172	; 0xac
   36808:	4a0b      	ldr	r2, [pc, #44]	; (36838 <z_abort_timeout+0x84>)
   3680a:	490f      	ldr	r1, [pc, #60]	; (36848 <z_abort_timeout+0x94>)
   3680c:	480c      	ldr	r0, [pc, #48]	; (36840 <z_abort_timeout+0x8c>)
   3680e:	f002 fcd4 	bl	391ba <printk>
   36812:	4908      	ldr	r1, [pc, #32]	; (36834 <z_abort_timeout+0x80>)
   36814:	480d      	ldr	r0, [pc, #52]	; (3684c <z_abort_timeout+0x98>)
   36816:	f002 fcd0 	bl	391ba <printk>
   3681a:	21ac      	movs	r1, #172	; 0xac
   3681c:	4806      	ldr	r0, [pc, #24]	; (36838 <z_abort_timeout+0x84>)
   3681e:	f002 ff23 	bl	39668 <assert_post_action>
	__asm__ volatile(
   36822:	f385 8811 	msr	BASEPRI, r5
   36826:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3682a:	4620      	mov	r0, r4
   3682c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3682e:	f06f 0415 	mvn.w	r4, #21
   36832:	e7e4      	b.n	367fe <z_abort_timeout+0x4a>
   36834:	20017fb8 	.word	0x20017fb8
   36838:	0003f1a1 	.word	0x0003f1a1
   3683c:	0003f1f3 	.word	0x0003f1f3
   36840:	0003f0e1 	.word	0x0003f0e1
   36844:	0003f208 	.word	0x0003f208
   36848:	0003f1c7 	.word	0x0003f1c7
   3684c:	0003f1de 	.word	0x0003f1de

00036850 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   36850:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   36852:	f04f 0320 	mov.w	r3, #32
   36856:	f3ef 8511 	mrs	r5, BASEPRI
   3685a:	f383 8811 	msr	BASEPRI, r3
   3685e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36862:	4818      	ldr	r0, [pc, #96]	; (368c4 <z_get_next_timeout_expiry+0x74>)
   36864:	f7fd fcc6 	bl	341f4 <z_spin_lock_valid>
   36868:	b968      	cbnz	r0, 36886 <z_get_next_timeout_expiry+0x36>
   3686a:	2381      	movs	r3, #129	; 0x81
   3686c:	4a16      	ldr	r2, [pc, #88]	; (368c8 <z_get_next_timeout_expiry+0x78>)
   3686e:	4917      	ldr	r1, [pc, #92]	; (368cc <z_get_next_timeout_expiry+0x7c>)
   36870:	4817      	ldr	r0, [pc, #92]	; (368d0 <z_get_next_timeout_expiry+0x80>)
   36872:	f002 fca2 	bl	391ba <printk>
   36876:	4913      	ldr	r1, [pc, #76]	; (368c4 <z_get_next_timeout_expiry+0x74>)
   36878:	4816      	ldr	r0, [pc, #88]	; (368d4 <z_get_next_timeout_expiry+0x84>)
   3687a:	f002 fc9e 	bl	391ba <printk>
   3687e:	2181      	movs	r1, #129	; 0x81
   36880:	4811      	ldr	r0, [pc, #68]	; (368c8 <z_get_next_timeout_expiry+0x78>)
   36882:	f002 fef1 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   36886:	480f      	ldr	r0, [pc, #60]	; (368c4 <z_get_next_timeout_expiry+0x74>)
   36888:	f7fd fcd0 	bl	3422c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3688c:	f7ff fe86 	bl	3659c <next_timeout>
   36890:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36892:	480c      	ldr	r0, [pc, #48]	; (368c4 <z_get_next_timeout_expiry+0x74>)
   36894:	f7fd fcbc 	bl	34210 <z_spin_unlock_valid>
   36898:	b968      	cbnz	r0, 368b6 <z_get_next_timeout_expiry+0x66>
   3689a:	23ac      	movs	r3, #172	; 0xac
   3689c:	4a0a      	ldr	r2, [pc, #40]	; (368c8 <z_get_next_timeout_expiry+0x78>)
   3689e:	490e      	ldr	r1, [pc, #56]	; (368d8 <z_get_next_timeout_expiry+0x88>)
   368a0:	480b      	ldr	r0, [pc, #44]	; (368d0 <z_get_next_timeout_expiry+0x80>)
   368a2:	f002 fc8a 	bl	391ba <printk>
   368a6:	4907      	ldr	r1, [pc, #28]	; (368c4 <z_get_next_timeout_expiry+0x74>)
   368a8:	480c      	ldr	r0, [pc, #48]	; (368dc <z_get_next_timeout_expiry+0x8c>)
   368aa:	f002 fc86 	bl	391ba <printk>
   368ae:	21ac      	movs	r1, #172	; 0xac
   368b0:	4805      	ldr	r0, [pc, #20]	; (368c8 <z_get_next_timeout_expiry+0x78>)
   368b2:	f002 fed9 	bl	39668 <assert_post_action>
	__asm__ volatile(
   368b6:	f385 8811 	msr	BASEPRI, r5
   368ba:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   368be:	4620      	mov	r0, r4
   368c0:	bd38      	pop	{r3, r4, r5, pc}
   368c2:	bf00      	nop
   368c4:	20017fb8 	.word	0x20017fb8
   368c8:	0003f1a1 	.word	0x0003f1a1
   368cc:	0003f1f3 	.word	0x0003f1f3
   368d0:	0003f0e1 	.word	0x0003f0e1
   368d4:	0003f208 	.word	0x0003f208
   368d8:	0003f1c7 	.word	0x0003f1c7
   368dc:	0003f1de 	.word	0x0003f1de

000368e0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   368e0:	b570      	push	{r4, r5, r6, lr}
   368e2:	4604      	mov	r4, r0
   368e4:	460d      	mov	r5, r1
	__asm__ volatile(
   368e6:	f04f 0320 	mov.w	r3, #32
   368ea:	f3ef 8611 	mrs	r6, BASEPRI
   368ee:	f383 8811 	msr	BASEPRI, r3
   368f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   368f6:	481c      	ldr	r0, [pc, #112]	; (36968 <z_set_timeout_expiry+0x88>)
   368f8:	f7fd fc7c 	bl	341f4 <z_spin_lock_valid>
   368fc:	b968      	cbnz	r0, 3691a <z_set_timeout_expiry+0x3a>
   368fe:	2381      	movs	r3, #129	; 0x81
   36900:	4a1a      	ldr	r2, [pc, #104]	; (3696c <z_set_timeout_expiry+0x8c>)
   36902:	491b      	ldr	r1, [pc, #108]	; (36970 <z_set_timeout_expiry+0x90>)
   36904:	481b      	ldr	r0, [pc, #108]	; (36974 <z_set_timeout_expiry+0x94>)
   36906:	f002 fc58 	bl	391ba <printk>
   3690a:	4917      	ldr	r1, [pc, #92]	; (36968 <z_set_timeout_expiry+0x88>)
   3690c:	481a      	ldr	r0, [pc, #104]	; (36978 <z_set_timeout_expiry+0x98>)
   3690e:	f002 fc54 	bl	391ba <printk>
   36912:	2181      	movs	r1, #129	; 0x81
   36914:	4815      	ldr	r0, [pc, #84]	; (3696c <z_set_timeout_expiry+0x8c>)
   36916:	f002 fea7 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   3691a:	4813      	ldr	r0, [pc, #76]	; (36968 <z_set_timeout_expiry+0x88>)
   3691c:	f7fd fc86 	bl	3422c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   36920:	f7ff fe3c 	bl	3659c <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   36924:	2801      	cmp	r0, #1
   36926:	dd07      	ble.n	36938 <z_set_timeout_expiry+0x58>
   36928:	42a0      	cmp	r0, r4
   3692a:	db05      	blt.n	36938 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   3692c:	42a0      	cmp	r0, r4
   3692e:	4629      	mov	r1, r5
   36930:	bfa8      	it	ge
   36932:	4620      	movge	r0, r4
   36934:	f7ee fed0 	bl	256d8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36938:	480b      	ldr	r0, [pc, #44]	; (36968 <z_set_timeout_expiry+0x88>)
   3693a:	f7fd fc69 	bl	34210 <z_spin_unlock_valid>
   3693e:	b968      	cbnz	r0, 3695c <z_set_timeout_expiry+0x7c>
   36940:	23ac      	movs	r3, #172	; 0xac
   36942:	4a0a      	ldr	r2, [pc, #40]	; (3696c <z_set_timeout_expiry+0x8c>)
   36944:	490d      	ldr	r1, [pc, #52]	; (3697c <z_set_timeout_expiry+0x9c>)
   36946:	480b      	ldr	r0, [pc, #44]	; (36974 <z_set_timeout_expiry+0x94>)
   36948:	f002 fc37 	bl	391ba <printk>
   3694c:	4906      	ldr	r1, [pc, #24]	; (36968 <z_set_timeout_expiry+0x88>)
   3694e:	480c      	ldr	r0, [pc, #48]	; (36980 <z_set_timeout_expiry+0xa0>)
   36950:	f002 fc33 	bl	391ba <printk>
   36954:	21ac      	movs	r1, #172	; 0xac
   36956:	4805      	ldr	r0, [pc, #20]	; (3696c <z_set_timeout_expiry+0x8c>)
   36958:	f002 fe86 	bl	39668 <assert_post_action>
	__asm__ volatile(
   3695c:	f386 8811 	msr	BASEPRI, r6
   36960:	f3bf 8f6f 	isb	sy
		}
	}
}
   36964:	bd70      	pop	{r4, r5, r6, pc}
   36966:	bf00      	nop
   36968:	20017fb8 	.word	0x20017fb8
   3696c:	0003f1a1 	.word	0x0003f1a1
   36970:	0003f1f3 	.word	0x0003f1f3
   36974:	0003f0e1 	.word	0x0003f0e1
   36978:	0003f208 	.word	0x0003f208
   3697c:	0003f1c7 	.word	0x0003f1c7
   36980:	0003f1de 	.word	0x0003f1de

00036984 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   36984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36988:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3698a:	f7ff f8a3 	bl	35ad4 <z_time_slice>
	__asm__ volatile(
   3698e:	f04f 0320 	mov.w	r3, #32
   36992:	f3ef 8511 	mrs	r5, BASEPRI
   36996:	f383 8811 	msr	BASEPRI, r3
   3699a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3699e:	484c      	ldr	r0, [pc, #304]	; (36ad0 <sys_clock_announce+0x14c>)
   369a0:	f7fd fc28 	bl	341f4 <z_spin_lock_valid>
   369a4:	b968      	cbnz	r0, 369c2 <sys_clock_announce+0x3e>
   369a6:	2381      	movs	r3, #129	; 0x81
   369a8:	4a4a      	ldr	r2, [pc, #296]	; (36ad4 <sys_clock_announce+0x150>)
   369aa:	494b      	ldr	r1, [pc, #300]	; (36ad8 <sys_clock_announce+0x154>)
   369ac:	484b      	ldr	r0, [pc, #300]	; (36adc <sys_clock_announce+0x158>)
   369ae:	f002 fc04 	bl	391ba <printk>
   369b2:	4947      	ldr	r1, [pc, #284]	; (36ad0 <sys_clock_announce+0x14c>)
   369b4:	484a      	ldr	r0, [pc, #296]	; (36ae0 <sys_clock_announce+0x15c>)
   369b6:	f002 fc00 	bl	391ba <printk>
   369ba:	2181      	movs	r1, #129	; 0x81
   369bc:	4845      	ldr	r0, [pc, #276]	; (36ad4 <sys_clock_announce+0x150>)
   369be:	f002 fe53 	bl	39668 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   369c2:	4f48      	ldr	r7, [pc, #288]	; (36ae4 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
   369c4:	4842      	ldr	r0, [pc, #264]	; (36ad0 <sys_clock_announce+0x14c>)
	return list->head == list;
   369c6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 36ae8 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   369ca:	4e48      	ldr	r6, [pc, #288]	; (36aec <sys_clock_announce+0x168>)
   369cc:	f7fd fc2e 	bl	3422c <z_spin_lock_set_owner>
	announce_remaining = ticks;
   369d0:	603c      	str	r4, [r7, #0]
   369d2:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   369d6:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   369d8:	4544      	cmp	r4, r8
   369da:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   369de:	e9d6 1e00 	ldrd	r1, lr, [r6]
   369e2:	d00b      	beq.n	369fc <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   369e4:	b154      	cbz	r4, 369fc <sys_clock_announce+0x78>
   369e6:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   369ea:	429a      	cmp	r2, r3
   369ec:	eb70 090c 	sbcs.w	r9, r0, ip
   369f0:	da28      	bge.n	36a44 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   369f2:	1a9b      	subs	r3, r3, r2
   369f4:	eb6c 0c00 	sbc.w	ip, ip, r0
   369f8:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   369fc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   369fe:	1851      	adds	r1, r2, r1
   36a00:	eb4e 0000 	adc.w	r0, lr, r0
   36a04:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
   36a08:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   36a0a:	f7ff fdc7 	bl	3659c <next_timeout>
   36a0e:	4621      	mov	r1, r4
   36a10:	f7ee fe62 	bl	256d8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36a14:	482e      	ldr	r0, [pc, #184]	; (36ad0 <sys_clock_announce+0x14c>)
   36a16:	f7fd fbfb 	bl	34210 <z_spin_unlock_valid>
   36a1a:	b968      	cbnz	r0, 36a38 <sys_clock_announce+0xb4>
   36a1c:	23ac      	movs	r3, #172	; 0xac
   36a1e:	4a2d      	ldr	r2, [pc, #180]	; (36ad4 <sys_clock_announce+0x150>)
   36a20:	4933      	ldr	r1, [pc, #204]	; (36af0 <sys_clock_announce+0x16c>)
   36a22:	482e      	ldr	r0, [pc, #184]	; (36adc <sys_clock_announce+0x158>)
   36a24:	f002 fbc9 	bl	391ba <printk>
   36a28:	4929      	ldr	r1, [pc, #164]	; (36ad0 <sys_clock_announce+0x14c>)
   36a2a:	4832      	ldr	r0, [pc, #200]	; (36af4 <sys_clock_announce+0x170>)
   36a2c:	f002 fbc5 	bl	391ba <printk>
   36a30:	21ac      	movs	r1, #172	; 0xac
   36a32:	4828      	ldr	r0, [pc, #160]	; (36ad4 <sys_clock_announce+0x150>)
   36a34:	f002 fe18 	bl	39668 <assert_post_action>
	__asm__ volatile(
   36a38:	f385 8811 	msr	BASEPRI, r5
   36a3c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   36a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   36a44:	1859      	adds	r1, r3, r1
   36a46:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   36a4a:	1ad3      	subs	r3, r2, r3
   36a4c:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   36a4e:	2200      	movs	r2, #0
   36a50:	2300      	movs	r3, #0
		curr_tick += dt;
   36a52:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   36a56:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   36a5a:	4620      	mov	r0, r4
   36a5c:	f7ff fdc8 	bl	365f0 <remove_timeout>
   36a60:	481b      	ldr	r0, [pc, #108]	; (36ad0 <sys_clock_announce+0x14c>)
   36a62:	f7fd fbd5 	bl	34210 <z_spin_unlock_valid>
   36a66:	b968      	cbnz	r0, 36a84 <sys_clock_announce+0x100>
   36a68:	23ac      	movs	r3, #172	; 0xac
   36a6a:	4a1a      	ldr	r2, [pc, #104]	; (36ad4 <sys_clock_announce+0x150>)
   36a6c:	4920      	ldr	r1, [pc, #128]	; (36af0 <sys_clock_announce+0x16c>)
   36a6e:	481b      	ldr	r0, [pc, #108]	; (36adc <sys_clock_announce+0x158>)
   36a70:	f002 fba3 	bl	391ba <printk>
   36a74:	4916      	ldr	r1, [pc, #88]	; (36ad0 <sys_clock_announce+0x14c>)
   36a76:	481f      	ldr	r0, [pc, #124]	; (36af4 <sys_clock_announce+0x170>)
   36a78:	f002 fb9f 	bl	391ba <printk>
   36a7c:	21ac      	movs	r1, #172	; 0xac
   36a7e:	4815      	ldr	r0, [pc, #84]	; (36ad4 <sys_clock_announce+0x150>)
   36a80:	f002 fdf2 	bl	39668 <assert_post_action>
   36a84:	f385 8811 	msr	BASEPRI, r5
   36a88:	f3bf 8f6f 	isb	sy
		t->fn(t);
   36a8c:	4620      	mov	r0, r4
   36a8e:	68a3      	ldr	r3, [r4, #8]
   36a90:	4798      	blx	r3
	__asm__ volatile(
   36a92:	f04f 0320 	mov.w	r3, #32
   36a96:	f3ef 8511 	mrs	r5, BASEPRI
   36a9a:	f383 8811 	msr	BASEPRI, r3
   36a9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36aa2:	480b      	ldr	r0, [pc, #44]	; (36ad0 <sys_clock_announce+0x14c>)
   36aa4:	f7fd fba6 	bl	341f4 <z_spin_lock_valid>
   36aa8:	b968      	cbnz	r0, 36ac6 <sys_clock_announce+0x142>
   36aaa:	2381      	movs	r3, #129	; 0x81
   36aac:	4a09      	ldr	r2, [pc, #36]	; (36ad4 <sys_clock_announce+0x150>)
   36aae:	490a      	ldr	r1, [pc, #40]	; (36ad8 <sys_clock_announce+0x154>)
   36ab0:	480a      	ldr	r0, [pc, #40]	; (36adc <sys_clock_announce+0x158>)
   36ab2:	f002 fb82 	bl	391ba <printk>
   36ab6:	4906      	ldr	r1, [pc, #24]	; (36ad0 <sys_clock_announce+0x14c>)
   36ab8:	4809      	ldr	r0, [pc, #36]	; (36ae0 <sys_clock_announce+0x15c>)
   36aba:	f002 fb7e 	bl	391ba <printk>
   36abe:	2181      	movs	r1, #129	; 0x81
   36ac0:	4804      	ldr	r0, [pc, #16]	; (36ad4 <sys_clock_announce+0x150>)
   36ac2:	f002 fdd1 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   36ac6:	4802      	ldr	r0, [pc, #8]	; (36ad0 <sys_clock_announce+0x14c>)
   36ac8:	f7fd fbb0 	bl	3422c <z_spin_lock_set_owner>
	return k;
   36acc:	e781      	b.n	369d2 <sys_clock_announce+0x4e>
   36ace:	bf00      	nop
   36ad0:	20017fb8 	.word	0x20017fb8
   36ad4:	0003f1a1 	.word	0x0003f1a1
   36ad8:	0003f1f3 	.word	0x0003f1f3
   36adc:	0003f0e1 	.word	0x0003f0e1
   36ae0:	0003f208 	.word	0x0003f208
   36ae4:	20017fb4 	.word	0x20017fb4
   36ae8:	20014794 	.word	0x20014794
   36aec:	200155f0 	.word	0x200155f0
   36af0:	0003f1c7 	.word	0x0003f1c7
   36af4:	0003f1de 	.word	0x0003f1de

00036af8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   36af8:	b570      	push	{r4, r5, r6, lr}
   36afa:	f04f 0320 	mov.w	r3, #32
   36afe:	f3ef 8611 	mrs	r6, BASEPRI
   36b02:	f383 8811 	msr	BASEPRI, r3
   36b06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36b0a:	481b      	ldr	r0, [pc, #108]	; (36b78 <sys_clock_tick_get+0x80>)
   36b0c:	f7fd fb72 	bl	341f4 <z_spin_lock_valid>
   36b10:	b968      	cbnz	r0, 36b2e <sys_clock_tick_get+0x36>
   36b12:	2381      	movs	r3, #129	; 0x81
   36b14:	4a19      	ldr	r2, [pc, #100]	; (36b7c <sys_clock_tick_get+0x84>)
   36b16:	491a      	ldr	r1, [pc, #104]	; (36b80 <sys_clock_tick_get+0x88>)
   36b18:	481a      	ldr	r0, [pc, #104]	; (36b84 <sys_clock_tick_get+0x8c>)
   36b1a:	f002 fb4e 	bl	391ba <printk>
   36b1e:	4916      	ldr	r1, [pc, #88]	; (36b78 <sys_clock_tick_get+0x80>)
   36b20:	4819      	ldr	r0, [pc, #100]	; (36b88 <sys_clock_tick_get+0x90>)
   36b22:	f002 fb4a 	bl	391ba <printk>
   36b26:	2181      	movs	r1, #129	; 0x81
   36b28:	4814      	ldr	r0, [pc, #80]	; (36b7c <sys_clock_tick_get+0x84>)
   36b2a:	f002 fd9d 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   36b2e:	4812      	ldr	r0, [pc, #72]	; (36b78 <sys_clock_tick_get+0x80>)
   36b30:	f7fd fb7c 	bl	3422c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   36b34:	f7ee fe02 	bl	2573c <sys_clock_elapsed>
   36b38:	4a14      	ldr	r2, [pc, #80]	; (36b8c <sys_clock_tick_get+0x94>)
   36b3a:	e9d2 4500 	ldrd	r4, r5, [r2]
   36b3e:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36b40:	480d      	ldr	r0, [pc, #52]	; (36b78 <sys_clock_tick_get+0x80>)
   36b42:	f145 0500 	adc.w	r5, r5, #0
   36b46:	f7fd fb63 	bl	34210 <z_spin_unlock_valid>
   36b4a:	b968      	cbnz	r0, 36b68 <sys_clock_tick_get+0x70>
   36b4c:	23ac      	movs	r3, #172	; 0xac
   36b4e:	4a0b      	ldr	r2, [pc, #44]	; (36b7c <sys_clock_tick_get+0x84>)
   36b50:	490f      	ldr	r1, [pc, #60]	; (36b90 <sys_clock_tick_get+0x98>)
   36b52:	480c      	ldr	r0, [pc, #48]	; (36b84 <sys_clock_tick_get+0x8c>)
   36b54:	f002 fb31 	bl	391ba <printk>
   36b58:	4907      	ldr	r1, [pc, #28]	; (36b78 <sys_clock_tick_get+0x80>)
   36b5a:	480e      	ldr	r0, [pc, #56]	; (36b94 <sys_clock_tick_get+0x9c>)
   36b5c:	f002 fb2d 	bl	391ba <printk>
   36b60:	21ac      	movs	r1, #172	; 0xac
   36b62:	4806      	ldr	r0, [pc, #24]	; (36b7c <sys_clock_tick_get+0x84>)
   36b64:	f002 fd80 	bl	39668 <assert_post_action>
	__asm__ volatile(
   36b68:	f386 8811 	msr	BASEPRI, r6
   36b6c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   36b70:	4620      	mov	r0, r4
   36b72:	4629      	mov	r1, r5
   36b74:	bd70      	pop	{r4, r5, r6, pc}
   36b76:	bf00      	nop
   36b78:	20017fb8 	.word	0x20017fb8
   36b7c:	0003f1a1 	.word	0x0003f1a1
   36b80:	0003f1f3 	.word	0x0003f1f3
   36b84:	0003f0e1 	.word	0x0003f0e1
   36b88:	0003f208 	.word	0x0003f208
   36b8c:	200155f0 	.word	0x200155f0
   36b90:	0003f1c7 	.word	0x0003f1c7
   36b94:	0003f1de 	.word	0x0003f1de

00036b98 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   36b98:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   36b9a:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   36b9e:	3301      	adds	r3, #1
   36ba0:	f142 0200 	adc.w	r2, r2, #0
   36ba4:	2b02      	cmp	r3, #2
   36ba6:	f172 0200 	sbcs.w	r2, r2, #0
{
   36baa:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   36bac:	d304      	bcc.n	36bb8 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   36bae:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   36bb2:	490d      	ldr	r1, [pc, #52]	; (36be8 <z_timer_expiration_handler+0x50>)
   36bb4:	f7ff fd36 	bl	36624 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   36bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   36bba:	3301      	adds	r3, #1
   36bbc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   36bbe:	6a23      	ldr	r3, [r4, #32]
   36bc0:	b10b      	cbz	r3, 36bc6 <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   36bc2:	4620      	mov	r0, r4
   36bc4:	4798      	blx	r3
	return list->head == list;
   36bc6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36bca:	42a5      	cmp	r5, r4
   36bcc:	d00a      	beq.n	36be4 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   36bce:	b14d      	cbz	r5, 36be4 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   36bd0:	4628      	mov	r0, r5
   36bd2:	f7fe fbe5 	bl	353a0 <z_unpend_thread_no_timeout>
   36bd6:	2300      	movs	r3, #0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   36bd8:	4628      	mov	r0, r5
   36bda:	67eb      	str	r3, [r5, #124]	; 0x7c
}
   36bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   36be0:	f7fe bb96 	b.w	35310 <z_ready_thread>
}
   36be4:	bd38      	pop	{r3, r4, r5, pc}
   36be6:	bf00      	nop
   36be8:	00036b99 	.word	0x00036b99

00036bec <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   36bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36bf0:	4611      	mov	r1, r2
   36bf2:	4605      	mov	r5, r0
   36bf4:	4618      	mov	r0, r3
   36bf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   36bfa:	f1b0 3fff 	cmp.w	r0, #4294967295
   36bfe:	bf08      	it	eq
   36c00:	f1b1 3fff 	cmpeq.w	r1, #4294967295
   36c04:	4688      	mov	r8, r1
   36c06:	4607      	mov	r7, r0
   36c08:	d03c      	beq.n	36c84 <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   36c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
   36c0e:	bf08      	it	eq
   36c10:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   36c14:	4614      	mov	r4, r2
   36c16:	461e      	mov	r6, r3
   36c18:	d013      	beq.n	36c42 <z_impl_k_timer_start+0x56>
   36c1a:	431a      	orrs	r2, r3
   36c1c:	d011      	beq.n	36c42 <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
   36c1e:	f06f 0201 	mvn.w	r2, #1
   36c22:	1b12      	subs	r2, r2, r4
   36c24:	f04f 32ff 	mov.w	r2, #4294967295
   36c28:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   36c2c:	2a00      	cmp	r2, #0
   36c2e:	da08      	bge.n	36c42 <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
   36c30:	3c01      	subs	r4, #1
   36c32:	f163 0600 	sbc.w	r6, r3, #0
   36c36:	2c01      	cmp	r4, #1
   36c38:	f176 0300 	sbcs.w	r3, r6, #0
   36c3c:	bfbc      	itt	lt
   36c3e:	2401      	movlt	r4, #1
   36c40:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   36c42:	f06f 0301 	mvn.w	r3, #1
   36c46:	1a5b      	subs	r3, r3, r1
   36c48:	f04f 33ff 	mov.w	r3, #4294967295
   36c4c:	eb63 0300 	sbc.w	r3, r3, r0
   36c50:	2b00      	cmp	r3, #0
   36c52:	da08      	bge.n	36c66 <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   36c54:	3901      	subs	r1, #1
   36c56:	f160 0700 	sbc.w	r7, r0, #0
   36c5a:	2f00      	cmp	r7, #0
   36c5c:	4688      	mov	r8, r1
   36c5e:	bfbc      	itt	lt
   36c60:	f04f 0800 	movlt.w	r8, #0
   36c64:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   36c66:	4628      	mov	r0, r5
   36c68:	f7ff fda4 	bl	367b4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   36c6c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   36c6e:	4642      	mov	r2, r8
	timer->status = 0U;
   36c70:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   36c72:	4628      	mov	r0, r5
   36c74:	463b      	mov	r3, r7
	timer->period = period;
   36c76:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28
		     duration);
}
   36c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   36c7e:	4902      	ldr	r1, [pc, #8]	; (36c88 <z_impl_k_timer_start+0x9c>)
   36c80:	f7ff bcd0 	b.w	36624 <z_add_timeout>
}
   36c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36c88:	00036b99 	.word	0x00036b99

00036c8c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   36c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   36c90:	2700      	movs	r7, #0
{
   36c92:	468a      	mov	sl, r1
   36c94:	4615      	mov	r5, r2
   36c96:	4604      	mov	r4, r0
	int events_registered = 0;
   36c98:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36c9a:	4e78      	ldr	r6, [pc, #480]	; (36e7c <register_events+0x1f0>)
   36c9c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 36e80 <register_events+0x1f4>
{
   36ca0:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   36ca2:	4557      	cmp	r7, sl
   36ca4:	db03      	blt.n	36cae <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   36ca6:	4648      	mov	r0, r9
   36ca8:	b003      	add	sp, #12
   36caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   36cae:	f04f 0320 	mov.w	r3, #32
   36cb2:	f3ef 8b11 	mrs	fp, BASEPRI
   36cb6:	f383 8811 	msr	BASEPRI, r3
   36cba:	f3bf 8f6f 	isb	sy
   36cbe:	4630      	mov	r0, r6
   36cc0:	f7fd fa98 	bl	341f4 <z_spin_lock_valid>
   36cc4:	b968      	cbnz	r0, 36ce2 <register_events+0x56>
   36cc6:	2381      	movs	r3, #129	; 0x81
   36cc8:	4642      	mov	r2, r8
   36cca:	496e      	ldr	r1, [pc, #440]	; (36e84 <register_events+0x1f8>)
   36ccc:	486e      	ldr	r0, [pc, #440]	; (36e88 <register_events+0x1fc>)
   36cce:	f002 fa74 	bl	391ba <printk>
   36cd2:	4631      	mov	r1, r6
   36cd4:	486d      	ldr	r0, [pc, #436]	; (36e8c <register_events+0x200>)
   36cd6:	f002 fa70 	bl	391ba <printk>
   36cda:	2181      	movs	r1, #129	; 0x81
   36cdc:	4640      	mov	r0, r8
   36cde:	f002 fcc3 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   36ce2:	4630      	mov	r0, r6
   36ce4:	f7fd faa2 	bl	3422c <z_spin_lock_set_owner>
	switch (event->type) {
   36ce8:	7b63      	ldrb	r3, [r4, #13]
   36cea:	f003 031f 	and.w	r3, r3, #31
   36cee:	2b08      	cmp	r3, #8
   36cf0:	d84f      	bhi.n	36d92 <register_events+0x106>
   36cf2:	e8df f003 	tbb	[pc, r3]
   36cf6:	4230      	.short	0x4230
   36cf8:	4e2c4e05 	.word	0x4e2c4e05
   36cfc:	4e4e      	.short	0x4e4e
   36cfe:	48          	.byte	0x48
   36cff:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   36d00:	6923      	ldr	r3, [r4, #16]
   36d02:	689b      	ldr	r3, [r3, #8]
   36d04:	b33b      	cbz	r3, 36d56 <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   36d06:	2302      	movs	r3, #2
	event->poller = NULL;
   36d08:	2100      	movs	r1, #0
	event->state |= state;
   36d0a:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   36d0c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   36d0e:	f3c2 3045 	ubfx	r0, r2, #13, #6
   36d12:	4303      	orrs	r3, r0
   36d14:	f363 3252 	bfi	r2, r3, #13, #6
   36d18:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   36d1a:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d1c:	4630      	mov	r0, r6
   36d1e:	f7fd fa77 	bl	34210 <z_spin_unlock_valid>
   36d22:	b968      	cbnz	r0, 36d40 <register_events+0xb4>
   36d24:	23ac      	movs	r3, #172	; 0xac
   36d26:	4642      	mov	r2, r8
   36d28:	4959      	ldr	r1, [pc, #356]	; (36e90 <register_events+0x204>)
   36d2a:	4857      	ldr	r0, [pc, #348]	; (36e88 <register_events+0x1fc>)
   36d2c:	f002 fa45 	bl	391ba <printk>
   36d30:	4631      	mov	r1, r6
   36d32:	4858      	ldr	r0, [pc, #352]	; (36e94 <register_events+0x208>)
   36d34:	f002 fa41 	bl	391ba <printk>
   36d38:	21ac      	movs	r1, #172	; 0xac
   36d3a:	4640      	mov	r0, r8
   36d3c:	f002 fc94 	bl	39668 <assert_post_action>
	__asm__ volatile(
   36d40:	f38b 8811 	msr	BASEPRI, fp
   36d44:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   36d48:	3701      	adds	r7, #1
   36d4a:	3414      	adds	r4, #20
   36d4c:	e7a9      	b.n	36ca2 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   36d4e:	6923      	ldr	r3, [r4, #16]
   36d50:	681b      	ldr	r3, [r3, #0]
   36d52:	2b00      	cmp	r3, #0
   36d54:	d12e      	bne.n	36db4 <register_events+0x128>
		} else if (!just_check && poller->is_polling) {
   36d56:	9b01      	ldr	r3, [sp, #4]
   36d58:	2b00      	cmp	r3, #0
   36d5a:	d1df      	bne.n	36d1c <register_events+0x90>
   36d5c:	782b      	ldrb	r3, [r5, #0]
   36d5e:	2b00      	cmp	r3, #0
   36d60:	d0dc      	beq.n	36d1c <register_events+0x90>
	switch (event->type) {
   36d62:	7b63      	ldrb	r3, [r4, #13]
   36d64:	f003 031f 	and.w	r3, r3, #31
   36d68:	2b08      	cmp	r3, #8
   36d6a:	d879      	bhi.n	36e60 <register_events+0x1d4>
   36d6c:	e8df f003 	tbb	[pc, r3]
   36d70:	78245139 	.word	0x78245139
   36d74:	7878783d 	.word	0x7878783d
   36d78:	64          	.byte	0x64
   36d79:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   36d7a:	6923      	ldr	r3, [r4, #16]
   36d7c:	689b      	ldr	r3, [r3, #8]
   36d7e:	2b00      	cmp	r3, #0
   36d80:	d0e9      	beq.n	36d56 <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   36d82:	2301      	movs	r3, #1
   36d84:	e7c0      	b.n	36d08 <register_events+0x7c>
		if (event->msgq->used_msgs > 0) {
   36d86:	6923      	ldr	r3, [r4, #16]
   36d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   36d8a:	2b00      	cmp	r3, #0
   36d8c:	d0e3      	beq.n	36d56 <register_events+0xca>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   36d8e:	2310      	movs	r3, #16
   36d90:	e7ba      	b.n	36d08 <register_events+0x7c>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   36d92:	235c      	movs	r3, #92	; 0x5c
   36d94:	4a40      	ldr	r2, [pc, #256]	; (36e98 <register_events+0x20c>)
   36d96:	4941      	ldr	r1, [pc, #260]	; (36e9c <register_events+0x210>)
   36d98:	483b      	ldr	r0, [pc, #236]	; (36e88 <register_events+0x1fc>)
   36d9a:	f002 fa0e 	bl	391ba <printk>
   36d9e:	7b61      	ldrb	r1, [r4, #13]
   36da0:	483f      	ldr	r0, [pc, #252]	; (36ea0 <register_events+0x214>)
   36da2:	f001 011f 	and.w	r1, r1, #31
   36da6:	f002 fa08 	bl	391ba <printk>
   36daa:	215c      	movs	r1, #92	; 0x5c
   36dac:	483a      	ldr	r0, [pc, #232]	; (36e98 <register_events+0x20c>)
   36dae:	f002 fc5b 	bl	39668 <assert_post_action>
		break;
   36db2:	e7d0      	b.n	36d56 <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   36db4:	2304      	movs	r3, #4
   36db6:	e7a7      	b.n	36d08 <register_events+0x7c>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   36db8:	6923      	ldr	r3, [r4, #16]
   36dba:	b963      	cbnz	r3, 36dd6 <register_events+0x14a>
   36dbc:	4939      	ldr	r1, [pc, #228]	; (36ea4 <register_events+0x218>)
   36dbe:	2386      	movs	r3, #134	; 0x86
   36dc0:	4a35      	ldr	r2, [pc, #212]	; (36e98 <register_events+0x20c>)
   36dc2:	4831      	ldr	r0, [pc, #196]	; (36e88 <register_events+0x1fc>)
   36dc4:	f002 f9f9 	bl	391ba <printk>
   36dc8:	4837      	ldr	r0, [pc, #220]	; (36ea8 <register_events+0x21c>)
   36dca:	f002 f9f6 	bl	391ba <printk>
   36dce:	2186      	movs	r1, #134	; 0x86
   36dd0:	4831      	ldr	r0, [pc, #196]	; (36e98 <register_events+0x20c>)
   36dd2:	f002 fc49 	bl	39668 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   36dd6:	462a      	mov	r2, r5
   36dd8:	4621      	mov	r1, r4
   36dda:	6920      	ldr	r0, [r4, #16]
   36ddc:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   36dde:	f006 fbc7 	bl	3d570 <add_event>
	event->poller = poller;
   36de2:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   36de4:	f109 0901 	add.w	r9, r9, #1
   36de8:	e798      	b.n	36d1c <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   36dea:	6923      	ldr	r3, [r4, #16]
   36dec:	b963      	cbnz	r3, 36e08 <register_events+0x17c>
   36dee:	492f      	ldr	r1, [pc, #188]	; (36eac <register_events+0x220>)
   36df0:	238a      	movs	r3, #138	; 0x8a
   36df2:	4a29      	ldr	r2, [pc, #164]	; (36e98 <register_events+0x20c>)
   36df4:	4824      	ldr	r0, [pc, #144]	; (36e88 <register_events+0x1fc>)
   36df6:	f002 f9e0 	bl	391ba <printk>
   36dfa:	482d      	ldr	r0, [pc, #180]	; (36eb0 <register_events+0x224>)
   36dfc:	f002 f9dd 	bl	391ba <printk>
   36e00:	218a      	movs	r1, #138	; 0x8a
   36e02:	4825      	ldr	r0, [pc, #148]	; (36e98 <register_events+0x20c>)
   36e04:	f002 fc30 	bl	39668 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   36e08:	6920      	ldr	r0, [r4, #16]
   36e0a:	462a      	mov	r2, r5
   36e0c:	4621      	mov	r1, r4
   36e0e:	3014      	adds	r0, #20
   36e10:	e7e5      	b.n	36dde <register_events+0x152>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   36e12:	6923      	ldr	r3, [r4, #16]
   36e14:	b963      	cbnz	r3, 36e30 <register_events+0x1a4>
   36e16:	4927      	ldr	r1, [pc, #156]	; (36eb4 <register_events+0x228>)
   36e18:	238e      	movs	r3, #142	; 0x8e
   36e1a:	4a1f      	ldr	r2, [pc, #124]	; (36e98 <register_events+0x20c>)
   36e1c:	481a      	ldr	r0, [pc, #104]	; (36e88 <register_events+0x1fc>)
   36e1e:	f002 f9cc 	bl	391ba <printk>
   36e22:	4825      	ldr	r0, [pc, #148]	; (36eb8 <register_events+0x22c>)
   36e24:	f002 f9c9 	bl	391ba <printk>
   36e28:	218e      	movs	r1, #142	; 0x8e
   36e2a:	481b      	ldr	r0, [pc, #108]	; (36e98 <register_events+0x20c>)
   36e2c:	f002 fc1c 	bl	39668 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   36e30:	462a      	mov	r2, r5
   36e32:	4621      	mov	r1, r4
   36e34:	6920      	ldr	r0, [r4, #16]
   36e36:	e7d2      	b.n	36dde <register_events+0x152>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   36e38:	6923      	ldr	r3, [r4, #16]
   36e3a:	b963      	cbnz	r3, 36e56 <register_events+0x1ca>
   36e3c:	491f      	ldr	r1, [pc, #124]	; (36ebc <register_events+0x230>)
   36e3e:	2392      	movs	r3, #146	; 0x92
   36e40:	4a15      	ldr	r2, [pc, #84]	; (36e98 <register_events+0x20c>)
   36e42:	4811      	ldr	r0, [pc, #68]	; (36e88 <register_events+0x1fc>)
   36e44:	f002 f9b9 	bl	391ba <printk>
   36e48:	481d      	ldr	r0, [pc, #116]	; (36ec0 <register_events+0x234>)
   36e4a:	f002 f9b6 	bl	391ba <printk>
   36e4e:	2192      	movs	r1, #146	; 0x92
   36e50:	4811      	ldr	r0, [pc, #68]	; (36e98 <register_events+0x20c>)
   36e52:	f002 fc09 	bl	39668 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   36e56:	6920      	ldr	r0, [r4, #16]
   36e58:	462a      	mov	r2, r5
   36e5a:	4621      	mov	r1, r4
   36e5c:	3028      	adds	r0, #40	; 0x28
   36e5e:	e7be      	b.n	36dde <register_events+0x152>
		__ASSERT(false, "invalid event type\n");
   36e60:	2399      	movs	r3, #153	; 0x99
   36e62:	4a0d      	ldr	r2, [pc, #52]	; (36e98 <register_events+0x20c>)
   36e64:	490d      	ldr	r1, [pc, #52]	; (36e9c <register_events+0x210>)
   36e66:	4808      	ldr	r0, [pc, #32]	; (36e88 <register_events+0x1fc>)
   36e68:	f002 f9a7 	bl	391ba <printk>
   36e6c:	4815      	ldr	r0, [pc, #84]	; (36ec4 <register_events+0x238>)
   36e6e:	f002 f9a4 	bl	391ba <printk>
   36e72:	2199      	movs	r1, #153	; 0x99
   36e74:	4808      	ldr	r0, [pc, #32]	; (36e98 <register_events+0x20c>)
   36e76:	f002 fbf7 	bl	39668 <assert_post_action>
		break;
   36e7a:	e7b2      	b.n	36de2 <register_events+0x156>
   36e7c:	20017fbc 	.word	0x20017fbc
   36e80:	0003f1a1 	.word	0x0003f1a1
   36e84:	0003f1f3 	.word	0x0003f1f3
   36e88:	0003f0e1 	.word	0x0003f0e1
   36e8c:	0003f208 	.word	0x0003f208
   36e90:	0003f1c7 	.word	0x0003f1c7
   36e94:	0003f1de 	.word	0x0003f1de
   36e98:	00042ee5 	.word	0x00042ee5
   36e9c:	000422ae 	.word	0x000422ae
   36ea0:	00042f06 	.word	0x00042f06
   36ea4:	00042f23 	.word	0x00042f23
   36ea8:	00042f3d 	.word	0x00042f3d
   36eac:	00042f52 	.word	0x00042f52
   36eb0:	00042f6e 	.word	0x00042f6e
   36eb4:	00042f7f 	.word	0x00042f7f
   36eb8:	00042f9c 	.word	0x00042f9c
   36ebc:	00042fb3 	.word	0x00042fb3
   36ec0:	00042fce 	.word	0x00042fce
   36ec4:	00042fe7 	.word	0x00042fe7

00036ec8 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   36ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   36ecc:	6884      	ldr	r4, [r0, #8]
{
   36ece:	4605      	mov	r5, r0
   36ed0:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   36ed2:	b1d4      	cbz	r4, 36f0a <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   36ed4:	7863      	ldrb	r3, [r4, #1]
   36ed6:	2b01      	cmp	r3, #1
   36ed8:	d141      	bne.n	36f5e <signal_poll_event+0x96>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   36eda:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   36ede:	d10e      	bne.n	36efe <signal_poll_event+0x36>
   36ee0:	23f9      	movs	r3, #249	; 0xf9
   36ee2:	4a2f      	ldr	r2, [pc, #188]	; (36fa0 <signal_poll_event+0xd8>)
   36ee4:	492f      	ldr	r1, [pc, #188]	; (36fa4 <signal_poll_event+0xdc>)
   36ee6:	4830      	ldr	r0, [pc, #192]	; (36fa8 <signal_poll_event+0xe0>)
   36ee8:	f002 f967 	bl	391ba <printk>
   36eec:	482f      	ldr	r0, [pc, #188]	; (36fac <signal_poll_event+0xe4>)
   36eee:	f002 f964 	bl	391ba <printk>
   36ef2:	21f9      	movs	r1, #249	; 0xf9
   36ef4:	482a      	ldr	r0, [pc, #168]	; (36fa0 <signal_poll_event+0xd8>)
   36ef6:	f002 fbb7 	bl	39668 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   36efa:	7b7b      	ldrb	r3, [r7, #13]
   36efc:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   36efe:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   36f02:	f013 0302 	ands.w	r3, r3, #2
   36f06:	d10a      	bne.n	36f1e <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   36f08:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   36f0a:	2000      	movs	r0, #0
	event->state |= state;
   36f0c:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   36f0e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   36f10:	f3c3 3245 	ubfx	r2, r3, #13, #6
   36f14:	4316      	orrs	r6, r2
   36f16:	f366 3352 	bfi	r3, r6, #13, #6
   36f1a:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   36f1c:	e03e      	b.n	36f9c <signal_poll_event+0xd4>
	if (z_is_thread_timeout_expired(thread)) {
   36f1e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   36f22:	f1b3 3fff 	cmp.w	r3, #4294967295
   36f26:	bf08      	it	eq
   36f28:	f112 0f02 	cmneq.w	r2, #2
   36f2c:	d032      	beq.n	36f94 <signal_poll_event+0xcc>
	z_unpend_thread(thread);
   36f2e:	4638      	mov	r0, r7
   36f30:	f7fe ff02 	bl	35d38 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   36f34:	2e08      	cmp	r6, #8
   36f36:	bf0c      	ite	eq
   36f38:	f06f 0303 	mvneq.w	r3, #3
   36f3c:	2300      	movne	r3, #0
   36f3e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   36f40:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   36f44:	06db      	lsls	r3, r3, #27
   36f46:	d10c      	bne.n	36f62 <signal_poll_event+0x9a>
   36f48:	f854 8c48 	ldr.w	r8, [r4, #-72]
   36f4c:	f1b8 0f00 	cmp.w	r8, #0
   36f50:	d107      	bne.n	36f62 <signal_poll_event+0x9a>
	z_ready_thread(thread);
   36f52:	4638      	mov	r0, r7
   36f54:	f7fe f9dc 	bl	35310 <z_ready_thread>
		poller->is_polling = false;
   36f58:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   36f5c:	e7d5      	b.n	36f0a <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   36f5e:	2b02      	cmp	r3, #2
   36f60:	d001      	beq.n	36f66 <signal_poll_event+0x9e>
		poller->is_polling = false;
   36f62:	2300      	movs	r3, #0
   36f64:	e7d0      	b.n	36f08 <signal_poll_event+0x40>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   36f66:	7823      	ldrb	r3, [r4, #0]
   36f68:	2b00      	cmp	r3, #0
   36f6a:	d0ce      	beq.n	36f0a <signal_poll_event+0x42>
   36f6c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   36f70:	b177      	cbz	r7, 36f90 <signal_poll_event+0xc8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   36f72:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   36f76:	f1a4 0914 	sub.w	r9, r4, #20
   36f7a:	f104 0014 	add.w	r0, r4, #20
   36f7e:	f7ff fc19 	bl	367b4 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   36f82:	4649      	mov	r1, r9
   36f84:	4638      	mov	r0, r7
		twork->poll_result = 0;
   36f86:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   36f8a:	f7fd ff37 	bl	34dfc <k_work_submit_to_queue>
   36f8e:	e7e3      	b.n	36f58 <signal_poll_event+0x90>
		poller->is_polling = false;
   36f90:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   36f92:	e7ba      	b.n	36f0a <signal_poll_event+0x42>
		poller->is_polling = false;
   36f94:	2300      	movs	r3, #0
		return -EAGAIN;
   36f96:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   36f9a:	7023      	strb	r3, [r4, #0]
}
   36f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   36fa0:	00042ee5 	.word	0x00042ee5
   36fa4:	00042ffd 	.word	0x00042ffd
   36fa8:	0003f0e1 	.word	0x0003f0e1
   36fac:	00043013 	.word	0x00043013

00036fb0 <clear_event_registrations>:
{
   36fb0:	2314      	movs	r3, #20
   36fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36fb6:	4616      	mov	r6, r2
	while (num_events--) {
   36fb8:	460d      	mov	r5, r1
   36fba:	fb03 0401 	mla	r4, r3, r1, r0
		__ASSERT(false, "invalid event type\n");
   36fbe:	f8df 814c 	ldr.w	r8, [pc, #332]	; 3710c <clear_event_registrations+0x15c>
   36fc2:	f8df 914c 	ldr.w	r9, [pc, #332]	; 37110 <clear_event_registrations+0x160>
   36fc6:	4f53      	ldr	r7, [pc, #332]	; (37114 <clear_event_registrations+0x164>)
	while (num_events--) {
   36fc8:	b90d      	cbnz	r5, 36fce <clear_event_registrations+0x1e>
}
   36fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   36fce:	2300      	movs	r3, #0
   36fd0:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   36fd4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   36fd8:	f1a4 0a14 	sub.w	sl, r4, #20
   36fdc:	f003 031f 	and.w	r3, r3, #31
   36fe0:	2b08      	cmp	r3, #8
   36fe2:	d84f      	bhi.n	37084 <clear_event_registrations+0xd4>
   36fe4:	e8df f003 	tbb	[pc, r3]
   36fe8:	4e05305b 	.word	0x4e05305b
   36fec:	4e4e4e21 	.word	0x4e4e4e21
   36ff0:	3f          	.byte	0x3f
   36ff1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   36ff2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   36ff6:	b963      	cbnz	r3, 37012 <clear_event_registrations+0x62>
   36ff8:	4947      	ldr	r1, [pc, #284]	; (37118 <clear_event_registrations+0x168>)
   36ffa:	23a9      	movs	r3, #169	; 0xa9
   36ffc:	4a43      	ldr	r2, [pc, #268]	; (3710c <clear_event_registrations+0x15c>)
   36ffe:	4845      	ldr	r0, [pc, #276]	; (37114 <clear_event_registrations+0x164>)
   37000:	f002 f8db 	bl	391ba <printk>
   37004:	4845      	ldr	r0, [pc, #276]	; (3711c <clear_event_registrations+0x16c>)
   37006:	f002 f8d8 	bl	391ba <printk>
   3700a:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   3700c:	483f      	ldr	r0, [pc, #252]	; (3710c <clear_event_registrations+0x15c>)
   3700e:	f002 fb2b 	bl	39668 <assert_post_action>
	return node->next != NULL;
   37012:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   37016:	2b00      	cmp	r3, #0
   37018:	d041      	beq.n	3709e <clear_event_registrations+0xee>
	sys_dnode_t *const prev = node->prev;
   3701a:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   3701e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   37020:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   37022:	2300      	movs	r3, #0
	node->prev = NULL;
   37024:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   37028:	e039      	b.n	3709e <clear_event_registrations+0xee>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3702a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3702e:	2b00      	cmp	r3, #0
   37030:	d1ef      	bne.n	37012 <clear_event_registrations+0x62>
   37032:	493b      	ldr	r1, [pc, #236]	; (37120 <clear_event_registrations+0x170>)
   37034:	23ad      	movs	r3, #173	; 0xad
   37036:	4a35      	ldr	r2, [pc, #212]	; (3710c <clear_event_registrations+0x15c>)
   37038:	4836      	ldr	r0, [pc, #216]	; (37114 <clear_event_registrations+0x164>)
   3703a:	f002 f8be 	bl	391ba <printk>
   3703e:	4839      	ldr	r0, [pc, #228]	; (37124 <clear_event_registrations+0x174>)
   37040:	f002 f8bb 	bl	391ba <printk>
   37044:	21ad      	movs	r1, #173	; 0xad
   37046:	e7e1      	b.n	3700c <clear_event_registrations+0x5c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   37048:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3704c:	2b00      	cmp	r3, #0
   3704e:	d1e0      	bne.n	37012 <clear_event_registrations+0x62>
   37050:	4935      	ldr	r1, [pc, #212]	; (37128 <clear_event_registrations+0x178>)
   37052:	23b1      	movs	r3, #177	; 0xb1
   37054:	4a2d      	ldr	r2, [pc, #180]	; (3710c <clear_event_registrations+0x15c>)
   37056:	482f      	ldr	r0, [pc, #188]	; (37114 <clear_event_registrations+0x164>)
   37058:	f002 f8af 	bl	391ba <printk>
   3705c:	4833      	ldr	r0, [pc, #204]	; (3712c <clear_event_registrations+0x17c>)
   3705e:	f002 f8ac 	bl	391ba <printk>
   37062:	21b1      	movs	r1, #177	; 0xb1
   37064:	e7d2      	b.n	3700c <clear_event_registrations+0x5c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   37066:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3706a:	2b00      	cmp	r3, #0
   3706c:	d1d1      	bne.n	37012 <clear_event_registrations+0x62>
   3706e:	4930      	ldr	r1, [pc, #192]	; (37130 <clear_event_registrations+0x180>)
   37070:	23b5      	movs	r3, #181	; 0xb5
   37072:	4a26      	ldr	r2, [pc, #152]	; (3710c <clear_event_registrations+0x15c>)
   37074:	4827      	ldr	r0, [pc, #156]	; (37114 <clear_event_registrations+0x164>)
   37076:	f002 f8a0 	bl	391ba <printk>
   3707a:	482e      	ldr	r0, [pc, #184]	; (37134 <clear_event_registrations+0x184>)
   3707c:	f002 f89d 	bl	391ba <printk>
   37080:	21b5      	movs	r1, #181	; 0xb5
   37082:	e7c3      	b.n	3700c <clear_event_registrations+0x5c>
		__ASSERT(false, "invalid event type\n");
   37084:	4649      	mov	r1, r9
   37086:	23bc      	movs	r3, #188	; 0xbc
   37088:	4642      	mov	r2, r8
   3708a:	4638      	mov	r0, r7
   3708c:	f002 f895 	bl	391ba <printk>
   37090:	4829      	ldr	r0, [pc, #164]	; (37138 <clear_event_registrations+0x188>)
   37092:	f002 f892 	bl	391ba <printk>
   37096:	21bc      	movs	r1, #188	; 0xbc
   37098:	4640      	mov	r0, r8
   3709a:	f002 fae5 	bl	39668 <assert_post_action>
   3709e:	4827      	ldr	r0, [pc, #156]	; (3713c <clear_event_registrations+0x18c>)
   370a0:	f7fd f8b6 	bl	34210 <z_spin_unlock_valid>
   370a4:	b968      	cbnz	r0, 370c2 <clear_event_registrations+0x112>
   370a6:	23ac      	movs	r3, #172	; 0xac
   370a8:	4638      	mov	r0, r7
   370aa:	4a25      	ldr	r2, [pc, #148]	; (37140 <clear_event_registrations+0x190>)
   370ac:	4925      	ldr	r1, [pc, #148]	; (37144 <clear_event_registrations+0x194>)
   370ae:	f002 f884 	bl	391ba <printk>
   370b2:	4922      	ldr	r1, [pc, #136]	; (3713c <clear_event_registrations+0x18c>)
   370b4:	4824      	ldr	r0, [pc, #144]	; (37148 <clear_event_registrations+0x198>)
   370b6:	f002 f880 	bl	391ba <printk>
   370ba:	21ac      	movs	r1, #172	; 0xac
   370bc:	4820      	ldr	r0, [pc, #128]	; (37140 <clear_event_registrations+0x190>)
   370be:	f002 fad3 	bl	39668 <assert_post_action>
   370c2:	f386 8811 	msr	BASEPRI, r6
   370c6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   370ca:	f04f 0320 	mov.w	r3, #32
   370ce:	f3ef 8611 	mrs	r6, BASEPRI
   370d2:	f383 8811 	msr	BASEPRI, r3
   370d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   370da:	4818      	ldr	r0, [pc, #96]	; (3713c <clear_event_registrations+0x18c>)
   370dc:	f7fd f88a 	bl	341f4 <z_spin_lock_valid>
   370e0:	b968      	cbnz	r0, 370fe <clear_event_registrations+0x14e>
   370e2:	2381      	movs	r3, #129	; 0x81
   370e4:	4638      	mov	r0, r7
   370e6:	4a16      	ldr	r2, [pc, #88]	; (37140 <clear_event_registrations+0x190>)
   370e8:	4918      	ldr	r1, [pc, #96]	; (3714c <clear_event_registrations+0x19c>)
   370ea:	f002 f866 	bl	391ba <printk>
   370ee:	4913      	ldr	r1, [pc, #76]	; (3713c <clear_event_registrations+0x18c>)
   370f0:	4817      	ldr	r0, [pc, #92]	; (37150 <clear_event_registrations+0x1a0>)
   370f2:	f002 f862 	bl	391ba <printk>
   370f6:	2181      	movs	r1, #129	; 0x81
   370f8:	4811      	ldr	r0, [pc, #68]	; (37140 <clear_event_registrations+0x190>)
   370fa:	f002 fab5 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   370fe:	480f      	ldr	r0, [pc, #60]	; (3713c <clear_event_registrations+0x18c>)
   37100:	f7fd f894 	bl	3422c <z_spin_lock_set_owner>
	return k;
   37104:	4654      	mov	r4, sl
   37106:	3d01      	subs	r5, #1
   37108:	e75e      	b.n	36fc8 <clear_event_registrations+0x18>
   3710a:	bf00      	nop
   3710c:	00042ee5 	.word	0x00042ee5
   37110:	000422ae 	.word	0x000422ae
   37114:	0003f0e1 	.word	0x0003f0e1
   37118:	00042f23 	.word	0x00042f23
   3711c:	00042f3d 	.word	0x00042f3d
   37120:	00042f52 	.word	0x00042f52
   37124:	00042f6e 	.word	0x00042f6e
   37128:	00042f7f 	.word	0x00042f7f
   3712c:	00042f9c 	.word	0x00042f9c
   37130:	00042fb3 	.word	0x00042fb3
   37134:	00042fce 	.word	0x00042fce
   37138:	00042fe7 	.word	0x00042fe7
   3713c:	20017fbc 	.word	0x20017fbc
   37140:	0003f1a1 	.word	0x0003f1a1
   37144:	0003f1c7 	.word	0x0003f1c7
   37148:	0003f1de 	.word	0x0003f1de
   3714c:	0003f1f3 	.word	0x0003f1f3
   37150:	0003f208 	.word	0x0003f208

00037154 <z_impl_k_poll>:
{
   37154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   37158:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   3715a:	4b75      	ldr	r3, [pc, #468]	; (37330 <z_impl_k_poll+0x1dc>)
{
   3715c:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   3715e:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   37160:	2301      	movs	r3, #1
{
   37162:	4688      	mov	r8, r1
   37164:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   37166:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   3716a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   3716e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   37172:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   37176:	b173      	cbz	r3, 37196 <z_impl_k_poll+0x42>
   37178:	496e      	ldr	r1, [pc, #440]	; (37334 <z_impl_k_poll+0x1e0>)
   3717a:	f44f 738d 	mov.w	r3, #282	; 0x11a
   3717e:	4a6e      	ldr	r2, [pc, #440]	; (37338 <z_impl_k_poll+0x1e4>)
   37180:	486e      	ldr	r0, [pc, #440]	; (3733c <z_impl_k_poll+0x1e8>)
   37182:	f002 f81a 	bl	391ba <printk>
   37186:	486e      	ldr	r0, [pc, #440]	; (37340 <z_impl_k_poll+0x1ec>)
   37188:	f002 f817 	bl	391ba <printk>
   3718c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   37190:	4869      	ldr	r0, [pc, #420]	; (37338 <z_impl_k_poll+0x1e4>)
   37192:	f002 fa69 	bl	39668 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   37196:	b974      	cbnz	r4, 371b6 <z_impl_k_poll+0x62>
   37198:	496a      	ldr	r1, [pc, #424]	; (37344 <z_impl_k_poll+0x1f0>)
   3719a:	f240 131b 	movw	r3, #283	; 0x11b
   3719e:	4a66      	ldr	r2, [pc, #408]	; (37338 <z_impl_k_poll+0x1e4>)
   371a0:	4866      	ldr	r0, [pc, #408]	; (3733c <z_impl_k_poll+0x1e8>)
   371a2:	f002 f80a 	bl	391ba <printk>
   371a6:	4868      	ldr	r0, [pc, #416]	; (37348 <z_impl_k_poll+0x1f4>)
   371a8:	f002 f807 	bl	391ba <printk>
   371ac:	f240 111b 	movw	r1, #283	; 0x11b
   371b0:	4861      	ldr	r0, [pc, #388]	; (37338 <z_impl_k_poll+0x1e4>)
   371b2:	f002 fa59 	bl	39668 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   371b6:	f1b8 0f00 	cmp.w	r8, #0
   371ba:	da0e      	bge.n	371da <z_impl_k_poll+0x86>
   371bc:	4963      	ldr	r1, [pc, #396]	; (3734c <z_impl_k_poll+0x1f8>)
   371be:	f44f 738e 	mov.w	r3, #284	; 0x11c
   371c2:	4a5d      	ldr	r2, [pc, #372]	; (37338 <z_impl_k_poll+0x1e4>)
   371c4:	485d      	ldr	r0, [pc, #372]	; (3733c <z_impl_k_poll+0x1e8>)
   371c6:	f001 fff8 	bl	391ba <printk>
   371ca:	4861      	ldr	r0, [pc, #388]	; (37350 <z_impl_k_poll+0x1fc>)
   371cc:	f001 fff5 	bl	391ba <printk>
   371d0:	f44f 718e 	mov.w	r1, #284	; 0x11c
   371d4:	4858      	ldr	r0, [pc, #352]	; (37338 <z_impl_k_poll+0x1e4>)
   371d6:	f002 fa47 	bl	39668 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   371da:	ea56 0305 	orrs.w	r3, r6, r5
   371de:	bf0c      	ite	eq
   371e0:	2301      	moveq	r3, #1
   371e2:	2300      	movne	r3, #0
   371e4:	4641      	mov	r1, r8
   371e6:	464a      	mov	r2, r9
   371e8:	4620      	mov	r0, r4
   371ea:	f7ff fd4f 	bl	36c8c <register_events>
   371ee:	4680      	mov	r8, r0
   371f0:	f04f 0320 	mov.w	r3, #32
   371f4:	f3ef 8911 	mrs	r9, BASEPRI
   371f8:	f383 8811 	msr	BASEPRI, r3
   371fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37200:	4854      	ldr	r0, [pc, #336]	; (37354 <z_impl_k_poll+0x200>)
   37202:	f7fc fff7 	bl	341f4 <z_spin_lock_valid>
   37206:	b968      	cbnz	r0, 37224 <z_impl_k_poll+0xd0>
   37208:	2381      	movs	r3, #129	; 0x81
   3720a:	4a53      	ldr	r2, [pc, #332]	; (37358 <z_impl_k_poll+0x204>)
   3720c:	4953      	ldr	r1, [pc, #332]	; (3735c <z_impl_k_poll+0x208>)
   3720e:	484b      	ldr	r0, [pc, #300]	; (3733c <z_impl_k_poll+0x1e8>)
   37210:	f001 ffd3 	bl	391ba <printk>
   37214:	494f      	ldr	r1, [pc, #316]	; (37354 <z_impl_k_poll+0x200>)
   37216:	4852      	ldr	r0, [pc, #328]	; (37360 <z_impl_k_poll+0x20c>)
   37218:	f001 ffcf 	bl	391ba <printk>
   3721c:	2181      	movs	r1, #129	; 0x81
   3721e:	484e      	ldr	r0, [pc, #312]	; (37358 <z_impl_k_poll+0x204>)
   37220:	f002 fa22 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   37224:	484b      	ldr	r0, [pc, #300]	; (37354 <z_impl_k_poll+0x200>)
   37226:	f7fd f801 	bl	3422c <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   3722a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   3722e:	b9fb      	cbnz	r3, 37270 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   37230:	4620      	mov	r0, r4
   37232:	464a      	mov	r2, r9
   37234:	4641      	mov	r1, r8
   37236:	f7ff febb 	bl	36fb0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3723a:	4846      	ldr	r0, [pc, #280]	; (37354 <z_impl_k_poll+0x200>)
   3723c:	f7fc ffe8 	bl	34210 <z_spin_unlock_valid>
   37240:	b968      	cbnz	r0, 3725e <z_impl_k_poll+0x10a>
   37242:	23ac      	movs	r3, #172	; 0xac
   37244:	4a44      	ldr	r2, [pc, #272]	; (37358 <z_impl_k_poll+0x204>)
   37246:	4947      	ldr	r1, [pc, #284]	; (37364 <z_impl_k_poll+0x210>)
   37248:	483c      	ldr	r0, [pc, #240]	; (3733c <z_impl_k_poll+0x1e8>)
   3724a:	f001 ffb6 	bl	391ba <printk>
   3724e:	4941      	ldr	r1, [pc, #260]	; (37354 <z_impl_k_poll+0x200>)
   37250:	4845      	ldr	r0, [pc, #276]	; (37368 <z_impl_k_poll+0x214>)
   37252:	f001 ffb2 	bl	391ba <printk>
   37256:	21ac      	movs	r1, #172	; 0xac
   37258:	483f      	ldr	r0, [pc, #252]	; (37358 <z_impl_k_poll+0x204>)
   3725a:	f002 fa05 	bl	39668 <assert_post_action>
	__asm__ volatile(
   3725e:	f389 8811 	msr	BASEPRI, r9
   37262:	f3bf 8f6f 	isb	sy
		return 0;
   37266:	2500      	movs	r5, #0
}
   37268:	4628      	mov	r0, r5
   3726a:	b003      	add	sp, #12
   3726c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   37270:	2300      	movs	r3, #0
   37272:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   37276:	ea56 0305 	orrs.w	r3, r6, r5
   3727a:	d118      	bne.n	372ae <z_impl_k_poll+0x15a>
   3727c:	4835      	ldr	r0, [pc, #212]	; (37354 <z_impl_k_poll+0x200>)
   3727e:	f7fc ffc7 	bl	34210 <z_spin_unlock_valid>
   37282:	b968      	cbnz	r0, 372a0 <z_impl_k_poll+0x14c>
   37284:	23ac      	movs	r3, #172	; 0xac
   37286:	4a34      	ldr	r2, [pc, #208]	; (37358 <z_impl_k_poll+0x204>)
   37288:	4936      	ldr	r1, [pc, #216]	; (37364 <z_impl_k_poll+0x210>)
   3728a:	482c      	ldr	r0, [pc, #176]	; (3733c <z_impl_k_poll+0x1e8>)
   3728c:	f001 ff95 	bl	391ba <printk>
   37290:	4930      	ldr	r1, [pc, #192]	; (37354 <z_impl_k_poll+0x200>)
   37292:	4835      	ldr	r0, [pc, #212]	; (37368 <z_impl_k_poll+0x214>)
   37294:	f001 ff91 	bl	391ba <printk>
   37298:	21ac      	movs	r1, #172	; 0xac
   3729a:	482f      	ldr	r0, [pc, #188]	; (37358 <z_impl_k_poll+0x204>)
   3729c:	f002 f9e4 	bl	39668 <assert_post_action>
   372a0:	f389 8811 	msr	BASEPRI, r9
   372a4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   372a8:	f06f 050a 	mvn.w	r5, #10
   372ac:	e7dc      	b.n	37268 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   372ae:	e9cd 6500 	strd	r6, r5, [sp]
   372b2:	4649      	mov	r1, r9
   372b4:	4a2d      	ldr	r2, [pc, #180]	; (3736c <z_impl_k_poll+0x218>)
   372b6:	4827      	ldr	r0, [pc, #156]	; (37354 <z_impl_k_poll+0x200>)
   372b8:	f7fe fb1e 	bl	358f8 <z_pend_curr>
   372bc:	4605      	mov	r5, r0
	__asm__ volatile(
   372be:	f04f 0320 	mov.w	r3, #32
   372c2:	f3ef 8611 	mrs	r6, BASEPRI
   372c6:	f383 8811 	msr	BASEPRI, r3
   372ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   372ce:	4821      	ldr	r0, [pc, #132]	; (37354 <z_impl_k_poll+0x200>)
   372d0:	f7fc ff90 	bl	341f4 <z_spin_lock_valid>
   372d4:	b968      	cbnz	r0, 372f2 <z_impl_k_poll+0x19e>
   372d6:	2381      	movs	r3, #129	; 0x81
   372d8:	4a1f      	ldr	r2, [pc, #124]	; (37358 <z_impl_k_poll+0x204>)
   372da:	4920      	ldr	r1, [pc, #128]	; (3735c <z_impl_k_poll+0x208>)
   372dc:	4817      	ldr	r0, [pc, #92]	; (3733c <z_impl_k_poll+0x1e8>)
   372de:	f001 ff6c 	bl	391ba <printk>
   372e2:	491c      	ldr	r1, [pc, #112]	; (37354 <z_impl_k_poll+0x200>)
   372e4:	481e      	ldr	r0, [pc, #120]	; (37360 <z_impl_k_poll+0x20c>)
   372e6:	f001 ff68 	bl	391ba <printk>
   372ea:	2181      	movs	r1, #129	; 0x81
   372ec:	481a      	ldr	r0, [pc, #104]	; (37358 <z_impl_k_poll+0x204>)
   372ee:	f002 f9bb 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   372f2:	4818      	ldr	r0, [pc, #96]	; (37354 <z_impl_k_poll+0x200>)
   372f4:	f7fc ff9a 	bl	3422c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   372f8:	4620      	mov	r0, r4
   372fa:	4632      	mov	r2, r6
   372fc:	4641      	mov	r1, r8
   372fe:	f7ff fe57 	bl	36fb0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37302:	4814      	ldr	r0, [pc, #80]	; (37354 <z_impl_k_poll+0x200>)
   37304:	f7fc ff84 	bl	34210 <z_spin_unlock_valid>
   37308:	b968      	cbnz	r0, 37326 <z_impl_k_poll+0x1d2>
   3730a:	23ac      	movs	r3, #172	; 0xac
   3730c:	4a12      	ldr	r2, [pc, #72]	; (37358 <z_impl_k_poll+0x204>)
   3730e:	4915      	ldr	r1, [pc, #84]	; (37364 <z_impl_k_poll+0x210>)
   37310:	480a      	ldr	r0, [pc, #40]	; (3733c <z_impl_k_poll+0x1e8>)
   37312:	f001 ff52 	bl	391ba <printk>
   37316:	490f      	ldr	r1, [pc, #60]	; (37354 <z_impl_k_poll+0x200>)
   37318:	4813      	ldr	r0, [pc, #76]	; (37368 <z_impl_k_poll+0x214>)
   3731a:	f001 ff4e 	bl	391ba <printk>
   3731e:	21ac      	movs	r1, #172	; 0xac
   37320:	480d      	ldr	r0, [pc, #52]	; (37358 <z_impl_k_poll+0x204>)
   37322:	f002 f9a1 	bl	39668 <assert_post_action>
	__asm__ volatile(
   37326:	f386 8811 	msr	BASEPRI, r6
   3732a:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3732e:	e79b      	b.n	37268 <z_impl_k_poll+0x114>
   37330:	20017f60 	.word	0x20017f60
   37334:	00042aef 	.word	0x00042aef
   37338:	00042ee5 	.word	0x00042ee5
   3733c:	0003f0e1 	.word	0x0003f0e1
   37340:	0003f6c8 	.word	0x0003f6c8
   37344:	00043032 	.word	0x00043032
   37348:	00043048 	.word	0x00043048
   3734c:	00043057 	.word	0x00043057
   37350:	00043067 	.word	0x00043067
   37354:	20017fbc 	.word	0x20017fbc
   37358:	0003f1a1 	.word	0x0003f1a1
   3735c:	0003f1f3 	.word	0x0003f1f3
   37360:	0003f208 	.word	0x0003f208
   37364:	0003f1c7 	.word	0x0003f1c7
   37368:	0003f1de 	.word	0x0003f1de
   3736c:	2001479c 	.word	0x2001479c

00037370 <z_impl_k_poll_signal_raise>:
{
   37370:	b570      	push	{r4, r5, r6, lr}
   37372:	4604      	mov	r4, r0
   37374:	460d      	mov	r5, r1
	__asm__ volatile(
   37376:	f04f 0320 	mov.w	r3, #32
   3737a:	f3ef 8611 	mrs	r6, BASEPRI
   3737e:	f383 8811 	msr	BASEPRI, r3
   37382:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37386:	4821      	ldr	r0, [pc, #132]	; (3740c <z_impl_k_poll_signal_raise+0x9c>)
   37388:	f7fc ff34 	bl	341f4 <z_spin_lock_valid>
   3738c:	b968      	cbnz	r0, 373aa <z_impl_k_poll_signal_raise+0x3a>
   3738e:	2381      	movs	r3, #129	; 0x81
   37390:	4a1f      	ldr	r2, [pc, #124]	; (37410 <z_impl_k_poll_signal_raise+0xa0>)
   37392:	4920      	ldr	r1, [pc, #128]	; (37414 <z_impl_k_poll_signal_raise+0xa4>)
   37394:	4820      	ldr	r0, [pc, #128]	; (37418 <z_impl_k_poll_signal_raise+0xa8>)
   37396:	f001 ff10 	bl	391ba <printk>
   3739a:	491c      	ldr	r1, [pc, #112]	; (3740c <z_impl_k_poll_signal_raise+0x9c>)
   3739c:	481f      	ldr	r0, [pc, #124]	; (3741c <z_impl_k_poll_signal_raise+0xac>)
   3739e:	f001 ff0c 	bl	391ba <printk>
   373a2:	2181      	movs	r1, #129	; 0x81
   373a4:	481a      	ldr	r0, [pc, #104]	; (37410 <z_impl_k_poll_signal_raise+0xa0>)
   373a6:	f002 f95f 	bl	39668 <assert_post_action>
	z_spin_lock_set_owner(l);
   373aa:	4818      	ldr	r0, [pc, #96]	; (3740c <z_impl_k_poll_signal_raise+0x9c>)
   373ac:	f7fc ff3e 	bl	3422c <z_spin_lock_set_owner>
	sig->signaled = 1U;
   373b0:	2101      	movs	r1, #1
	return list->head == list;
   373b2:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   373b4:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   373b6:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   373b8:	60a1      	str	r1, [r4, #8]
   373ba:	d117      	bne.n	373ec <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   373bc:	4813      	ldr	r0, [pc, #76]	; (3740c <z_impl_k_poll_signal_raise+0x9c>)
   373be:	f7fc ff27 	bl	34210 <z_spin_unlock_valid>
   373c2:	b968      	cbnz	r0, 373e0 <z_impl_k_poll_signal_raise+0x70>
   373c4:	23ac      	movs	r3, #172	; 0xac
   373c6:	4a12      	ldr	r2, [pc, #72]	; (37410 <z_impl_k_poll_signal_raise+0xa0>)
   373c8:	4915      	ldr	r1, [pc, #84]	; (37420 <z_impl_k_poll_signal_raise+0xb0>)
   373ca:	4813      	ldr	r0, [pc, #76]	; (37418 <z_impl_k_poll_signal_raise+0xa8>)
   373cc:	f001 fef5 	bl	391ba <printk>
   373d0:	490e      	ldr	r1, [pc, #56]	; (3740c <z_impl_k_poll_signal_raise+0x9c>)
   373d2:	4814      	ldr	r0, [pc, #80]	; (37424 <z_impl_k_poll_signal_raise+0xb4>)
   373d4:	f001 fef1 	bl	391ba <printk>
   373d8:	21ac      	movs	r1, #172	; 0xac
   373da:	480d      	ldr	r0, [pc, #52]	; (37410 <z_impl_k_poll_signal_raise+0xa0>)
   373dc:	f002 f944 	bl	39668 <assert_post_action>
	__asm__ volatile(
   373e0:	f386 8811 	msr	BASEPRI, r6
   373e4:	f3bf 8f6f 	isb	sy
		return 0;
   373e8:	2400      	movs	r4, #0
   373ea:	e00d      	b.n	37408 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   373ec:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   373f0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   373f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   373f4:	2300      	movs	r3, #0
	node->prev = NULL;
   373f6:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   373fa:	f7ff fd65 	bl	36ec8 <signal_poll_event>
	z_reschedule(&lock, key);
   373fe:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   37400:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   37402:	4802      	ldr	r0, [pc, #8]	; (3740c <z_impl_k_poll_signal_raise+0x9c>)
   37404:	f7fe f814 	bl	35430 <z_reschedule>
}
   37408:	4620      	mov	r0, r4
   3740a:	bd70      	pop	{r4, r5, r6, pc}
   3740c:	20017fbc 	.word	0x20017fbc
   37410:	0003f1a1 	.word	0x0003f1a1
   37414:	0003f1f3 	.word	0x0003f1f3
   37418:	0003f0e1 	.word	0x0003f0e1
   3741c:	0003f208 	.word	0x0003f208
   37420:	0003f1c7 	.word	0x0003f1c7
   37424:	0003f1de 	.word	0x0003f1de

00037428 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   37428:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   3742a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   3742e:	4606      	mov	r6, r0
   37430:	460d      	mov	r5, r1
   37432:	d20b      	bcs.n	3744c <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   37434:	f04f 0800 	mov.w	r8, #0
   37438:	f04f 0900 	mov.w	r9, #0
   3743c:	f041 0104 	orr.w	r1, r1, #4
   37440:	e9cd 8900 	strd	r8, r9, [sp]
   37444:	f7fc fb98 	bl	33b78 <k_heap_aligned_alloc>
	if (mem == NULL) {
   37448:	4604      	mov	r4, r0
   3744a:	b920      	cbnz	r0, 37456 <z_heap_aligned_alloc+0x2e>
		return NULL;
   3744c:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   3744e:	4620      	mov	r0, r4
   37450:	b002      	add	sp, #8
   37452:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   37456:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   3745a:	2d00      	cmp	r5, #0
   3745c:	d0f7      	beq.n	3744e <z_heap_aligned_alloc+0x26>
   3745e:	1e6b      	subs	r3, r5, #1
   37460:	421c      	tst	r4, r3
   37462:	d0f4      	beq.n	3744e <z_heap_aligned_alloc+0x26>
   37464:	2325      	movs	r3, #37	; 0x25
   37466:	4a07      	ldr	r2, [pc, #28]	; (37484 <z_heap_aligned_alloc+0x5c>)
   37468:	4907      	ldr	r1, [pc, #28]	; (37488 <z_heap_aligned_alloc+0x60>)
   3746a:	4808      	ldr	r0, [pc, #32]	; (3748c <z_heap_aligned_alloc+0x64>)
   3746c:	f001 fea5 	bl	391ba <printk>
   37470:	4621      	mov	r1, r4
   37472:	462a      	mov	r2, r5
   37474:	4806      	ldr	r0, [pc, #24]	; (37490 <z_heap_aligned_alloc+0x68>)
   37476:	f001 fea0 	bl	391ba <printk>
   3747a:	2125      	movs	r1, #37	; 0x25
   3747c:	4801      	ldr	r0, [pc, #4]	; (37484 <z_heap_aligned_alloc+0x5c>)
   3747e:	f002 f8f3 	bl	39668 <assert_post_action>
   37482:	e7e4      	b.n	3744e <z_heap_aligned_alloc+0x26>
   37484:	00043074 	.word	0x00043074
   37488:	00043098 	.word	0x00043098
   3748c:	0003f0e1 	.word	0x0003f0e1
   37490:	000430ca 	.word	0x000430ca

00037494 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   37494:	2803      	cmp	r0, #3
{
   37496:	b538      	push	{r3, r4, r5, lr}
   37498:	4604      	mov	r4, r0
   3749a:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   3749c:	d901      	bls.n	374a2 <k_aligned_alloc+0xe>
   3749e:	0783      	lsls	r3, r0, #30
   374a0:	d00c      	beq.n	374bc <k_aligned_alloc+0x28>
   374a2:	4912      	ldr	r1, [pc, #72]	; (374ec <k_aligned_alloc+0x58>)
   374a4:	2342      	movs	r3, #66	; 0x42
   374a6:	4a12      	ldr	r2, [pc, #72]	; (374f0 <k_aligned_alloc+0x5c>)
   374a8:	4812      	ldr	r0, [pc, #72]	; (374f4 <k_aligned_alloc+0x60>)
   374aa:	f001 fe86 	bl	391ba <printk>
   374ae:	4812      	ldr	r0, [pc, #72]	; (374f8 <k_aligned_alloc+0x64>)
   374b0:	f001 fe83 	bl	391ba <printk>
   374b4:	2142      	movs	r1, #66	; 0x42
   374b6:	480e      	ldr	r0, [pc, #56]	; (374f0 <k_aligned_alloc+0x5c>)
   374b8:	f002 f8d6 	bl	39668 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   374bc:	1e63      	subs	r3, r4, #1
   374be:	4223      	tst	r3, r4
   374c0:	d00c      	beq.n	374dc <k_aligned_alloc+0x48>
   374c2:	490e      	ldr	r1, [pc, #56]	; (374fc <k_aligned_alloc+0x68>)
   374c4:	2346      	movs	r3, #70	; 0x46
   374c6:	4a0a      	ldr	r2, [pc, #40]	; (374f0 <k_aligned_alloc+0x5c>)
   374c8:	480a      	ldr	r0, [pc, #40]	; (374f4 <k_aligned_alloc+0x60>)
   374ca:	f001 fe76 	bl	391ba <printk>
   374ce:	480c      	ldr	r0, [pc, #48]	; (37500 <k_aligned_alloc+0x6c>)
   374d0:	f001 fe73 	bl	391ba <printk>
   374d4:	2146      	movs	r1, #70	; 0x46
   374d6:	4806      	ldr	r0, [pc, #24]	; (374f0 <k_aligned_alloc+0x5c>)
   374d8:	f002 f8c6 	bl	39668 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   374dc:	462a      	mov	r2, r5
   374de:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   374e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   374e4:	4807      	ldr	r0, [pc, #28]	; (37504 <k_aligned_alloc+0x70>)
   374e6:	f7ff bf9f 	b.w	37428 <z_heap_aligned_alloc>
   374ea:	bf00      	nop
   374ec:	000430f2 	.word	0x000430f2
   374f0:	00043074 	.word	0x00043074
   374f4:	0003f0e1 	.word	0x0003f0e1
   374f8:	0004312f 	.word	0x0004312f
   374fc:	0003f2ec 	.word	0x0003f2ec
   37500:	0003f307 	.word	0x0003f307
   37504:	20014a18 	.word	0x20014a18

00037508 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   37508:	4a02      	ldr	r2, [pc, #8]	; (37514 <boot_banner+0xc>)
   3750a:	4903      	ldr	r1, [pc, #12]	; (37518 <boot_banner+0x10>)
   3750c:	4803      	ldr	r0, [pc, #12]	; (3751c <boot_banner+0x14>)
   3750e:	f001 be54 	b.w	391ba <printk>
   37512:	bf00      	nop
   37514:	0003f6ca 	.word	0x0003f6ca
   37518:	0004315c 	.word	0x0004315c
   3751c:	00043169 	.word	0x00043169

00037520 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   37520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   37522:	2400      	movs	r4, #0
   37524:	4b08      	ldr	r3, [pc, #32]	; (37548 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   37526:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   3752a:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   3752c:	ab02      	add	r3, sp, #8
   3752e:	9300      	str	r3, [sp, #0]
   37530:	4906      	ldr	r1, [pc, #24]	; (3754c <k_sys_work_q_init+0x2c>)
   37532:	f04f 33ff 	mov.w	r3, #4294967295
   37536:	4806      	ldr	r0, [pc, #24]	; (37550 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   37538:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   3753c:	f7fd fcc2 	bl	34ec4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   37540:	4620      	mov	r0, r4
   37542:	b004      	add	sp, #16
   37544:	bd10      	pop	{r4, pc}
   37546:	bf00      	nop
   37548:	00043190 	.word	0x00043190
   3754c:	2001b870 	.word	0x2001b870
   37550:	200175f8 	.word	0x200175f8

00037554 <__assert_func>:
   37554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   37556:	4614      	mov	r4, r2
   37558:	461a      	mov	r2, r3
   3755a:	4b09      	ldr	r3, [pc, #36]	; (37580 <__assert_func+0x2c>)
   3755c:	4605      	mov	r5, r0
   3755e:	681b      	ldr	r3, [r3, #0]
   37560:	68d8      	ldr	r0, [r3, #12]
   37562:	b954      	cbnz	r4, 3757a <__assert_func+0x26>
   37564:	4b07      	ldr	r3, [pc, #28]	; (37584 <__assert_func+0x30>)
   37566:	461c      	mov	r4, r3
   37568:	9100      	str	r1, [sp, #0]
   3756a:	4907      	ldr	r1, [pc, #28]	; (37588 <__assert_func+0x34>)
   3756c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   37570:	462b      	mov	r3, r5
   37572:	f000 f80d 	bl	37590 <fiprintf>
   37576:	f006 fa3c 	bl	3d9f2 <abort>
   3757a:	4b04      	ldr	r3, [pc, #16]	; (3758c <__assert_func+0x38>)
   3757c:	e7f4      	b.n	37568 <__assert_func+0x14>
   3757e:	bf00      	nop
   37580:	200147a4 	.word	0x200147a4
   37584:	0003f6ca 	.word	0x0003f6ca
   37588:	000431a6 	.word	0x000431a6
   3758c:	00043199 	.word	0x00043199

00037590 <fiprintf>:
   37590:	b40e      	push	{r1, r2, r3}
   37592:	b503      	push	{r0, r1, lr}
   37594:	ab03      	add	r3, sp, #12
   37596:	4601      	mov	r1, r0
   37598:	4805      	ldr	r0, [pc, #20]	; (375b0 <fiprintf+0x20>)
   3759a:	f853 2b04 	ldr.w	r2, [r3], #4
   3759e:	6800      	ldr	r0, [r0, #0]
   375a0:	9301      	str	r3, [sp, #4]
   375a2:	f000 f8bb 	bl	3771c <_vfiprintf_r>
   375a6:	b002      	add	sp, #8
   375a8:	f85d eb04 	ldr.w	lr, [sp], #4
   375ac:	b003      	add	sp, #12
   375ae:	4770      	bx	lr
   375b0:	200147a4 	.word	0x200147a4

000375b4 <malloc>:
   375b4:	4b02      	ldr	r3, [pc, #8]	; (375c0 <malloc+0xc>)
   375b6:	4601      	mov	r1, r0
   375b8:	6818      	ldr	r0, [r3, #0]
   375ba:	f000 b855 	b.w	37668 <_malloc_r>
   375be:	bf00      	nop
   375c0:	200147a4 	.word	0x200147a4

000375c4 <free>:
   375c4:	4b02      	ldr	r3, [pc, #8]	; (375d0 <free+0xc>)
   375c6:	4601      	mov	r1, r0
   375c8:	6818      	ldr	r0, [r3, #0]
   375ca:	f000 b803 	b.w	375d4 <_free_r>
   375ce:	bf00      	nop
   375d0:	200147a4 	.word	0x200147a4

000375d4 <_free_r>:
   375d4:	b538      	push	{r3, r4, r5, lr}
   375d6:	4605      	mov	r5, r0
   375d8:	2900      	cmp	r1, #0
   375da:	d041      	beq.n	37660 <_free_r+0x8c>
   375dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   375e0:	1f0c      	subs	r4, r1, #4
   375e2:	2b00      	cmp	r3, #0
   375e4:	bfb8      	it	lt
   375e6:	18e4      	addlt	r4, r4, r3
   375e8:	f7ef f822 	bl	26630 <__malloc_lock>
   375ec:	4a1d      	ldr	r2, [pc, #116]	; (37664 <_free_r+0x90>)
   375ee:	6813      	ldr	r3, [r2, #0]
   375f0:	b933      	cbnz	r3, 37600 <_free_r+0x2c>
   375f2:	6063      	str	r3, [r4, #4]
   375f4:	6014      	str	r4, [r2, #0]
   375f6:	4628      	mov	r0, r5
   375f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   375fc:	f7ef b822 	b.w	26644 <__malloc_unlock>
   37600:	42a3      	cmp	r3, r4
   37602:	d908      	bls.n	37616 <_free_r+0x42>
   37604:	6820      	ldr	r0, [r4, #0]
   37606:	1821      	adds	r1, r4, r0
   37608:	428b      	cmp	r3, r1
   3760a:	bf01      	itttt	eq
   3760c:	6819      	ldreq	r1, [r3, #0]
   3760e:	685b      	ldreq	r3, [r3, #4]
   37610:	1809      	addeq	r1, r1, r0
   37612:	6021      	streq	r1, [r4, #0]
   37614:	e7ed      	b.n	375f2 <_free_r+0x1e>
   37616:	461a      	mov	r2, r3
   37618:	685b      	ldr	r3, [r3, #4]
   3761a:	b10b      	cbz	r3, 37620 <_free_r+0x4c>
   3761c:	42a3      	cmp	r3, r4
   3761e:	d9fa      	bls.n	37616 <_free_r+0x42>
   37620:	6811      	ldr	r1, [r2, #0]
   37622:	1850      	adds	r0, r2, r1
   37624:	42a0      	cmp	r0, r4
   37626:	d10b      	bne.n	37640 <_free_r+0x6c>
   37628:	6820      	ldr	r0, [r4, #0]
   3762a:	4401      	add	r1, r0
   3762c:	1850      	adds	r0, r2, r1
   3762e:	6011      	str	r1, [r2, #0]
   37630:	4283      	cmp	r3, r0
   37632:	d1e0      	bne.n	375f6 <_free_r+0x22>
   37634:	6818      	ldr	r0, [r3, #0]
   37636:	685b      	ldr	r3, [r3, #4]
   37638:	4408      	add	r0, r1
   3763a:	6053      	str	r3, [r2, #4]
   3763c:	6010      	str	r0, [r2, #0]
   3763e:	e7da      	b.n	375f6 <_free_r+0x22>
   37640:	d902      	bls.n	37648 <_free_r+0x74>
   37642:	230c      	movs	r3, #12
   37644:	602b      	str	r3, [r5, #0]
   37646:	e7d6      	b.n	375f6 <_free_r+0x22>
   37648:	6820      	ldr	r0, [r4, #0]
   3764a:	1821      	adds	r1, r4, r0
   3764c:	428b      	cmp	r3, r1
   3764e:	bf02      	ittt	eq
   37650:	6819      	ldreq	r1, [r3, #0]
   37652:	685b      	ldreq	r3, [r3, #4]
   37654:	1809      	addeq	r1, r1, r0
   37656:	6063      	str	r3, [r4, #4]
   37658:	bf08      	it	eq
   3765a:	6021      	streq	r1, [r4, #0]
   3765c:	6054      	str	r4, [r2, #4]
   3765e:	e7ca      	b.n	375f6 <_free_r+0x22>
   37660:	bd38      	pop	{r3, r4, r5, pc}
   37662:	bf00      	nop
   37664:	20017fc4 	.word	0x20017fc4

00037668 <_malloc_r>:
   37668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3766a:	1ccd      	adds	r5, r1, #3
   3766c:	4606      	mov	r6, r0
   3766e:	f025 0503 	bic.w	r5, r5, #3
   37672:	3508      	adds	r5, #8
   37674:	2d0c      	cmp	r5, #12
   37676:	bf38      	it	cc
   37678:	250c      	movcc	r5, #12
   3767a:	2d00      	cmp	r5, #0
   3767c:	db01      	blt.n	37682 <_malloc_r+0x1a>
   3767e:	42a9      	cmp	r1, r5
   37680:	d903      	bls.n	3768a <_malloc_r+0x22>
   37682:	230c      	movs	r3, #12
   37684:	6033      	str	r3, [r6, #0]
   37686:	2000      	movs	r0, #0
   37688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3768a:	f7ee ffd1 	bl	26630 <__malloc_lock>
   3768e:	4921      	ldr	r1, [pc, #132]	; (37714 <_malloc_r+0xac>)
   37690:	680a      	ldr	r2, [r1, #0]
   37692:	4614      	mov	r4, r2
   37694:	b99c      	cbnz	r4, 376be <_malloc_r+0x56>
   37696:	4f20      	ldr	r7, [pc, #128]	; (37718 <_malloc_r+0xb0>)
   37698:	683b      	ldr	r3, [r7, #0]
   3769a:	b923      	cbnz	r3, 376a6 <_malloc_r+0x3e>
   3769c:	4621      	mov	r1, r4
   3769e:	4630      	mov	r0, r6
   376a0:	f000 fccc 	bl	3803c <_sbrk_r>
   376a4:	6038      	str	r0, [r7, #0]
   376a6:	4629      	mov	r1, r5
   376a8:	4630      	mov	r0, r6
   376aa:	f000 fcc7 	bl	3803c <_sbrk_r>
   376ae:	1c43      	adds	r3, r0, #1
   376b0:	d123      	bne.n	376fa <_malloc_r+0x92>
   376b2:	230c      	movs	r3, #12
   376b4:	4630      	mov	r0, r6
   376b6:	6033      	str	r3, [r6, #0]
   376b8:	f7ee ffc4 	bl	26644 <__malloc_unlock>
   376bc:	e7e3      	b.n	37686 <_malloc_r+0x1e>
   376be:	6823      	ldr	r3, [r4, #0]
   376c0:	1b5b      	subs	r3, r3, r5
   376c2:	d417      	bmi.n	376f4 <_malloc_r+0x8c>
   376c4:	2b0b      	cmp	r3, #11
   376c6:	d903      	bls.n	376d0 <_malloc_r+0x68>
   376c8:	6023      	str	r3, [r4, #0]
   376ca:	441c      	add	r4, r3
   376cc:	6025      	str	r5, [r4, #0]
   376ce:	e004      	b.n	376da <_malloc_r+0x72>
   376d0:	6863      	ldr	r3, [r4, #4]
   376d2:	42a2      	cmp	r2, r4
   376d4:	bf0c      	ite	eq
   376d6:	600b      	streq	r3, [r1, #0]
   376d8:	6053      	strne	r3, [r2, #4]
   376da:	4630      	mov	r0, r6
   376dc:	f7ee ffb2 	bl	26644 <__malloc_unlock>
   376e0:	f104 000b 	add.w	r0, r4, #11
   376e4:	1d23      	adds	r3, r4, #4
   376e6:	f020 0007 	bic.w	r0, r0, #7
   376ea:	1ac2      	subs	r2, r0, r3
   376ec:	bf1c      	itt	ne
   376ee:	1a1b      	subne	r3, r3, r0
   376f0:	50a3      	strne	r3, [r4, r2]
   376f2:	e7c9      	b.n	37688 <_malloc_r+0x20>
   376f4:	4622      	mov	r2, r4
   376f6:	6864      	ldr	r4, [r4, #4]
   376f8:	e7cc      	b.n	37694 <_malloc_r+0x2c>
   376fa:	1cc4      	adds	r4, r0, #3
   376fc:	f024 0403 	bic.w	r4, r4, #3
   37700:	42a0      	cmp	r0, r4
   37702:	d0e3      	beq.n	376cc <_malloc_r+0x64>
   37704:	1a21      	subs	r1, r4, r0
   37706:	4630      	mov	r0, r6
   37708:	f000 fc98 	bl	3803c <_sbrk_r>
   3770c:	3001      	adds	r0, #1
   3770e:	d1dd      	bne.n	376cc <_malloc_r+0x64>
   37710:	e7cf      	b.n	376b2 <_malloc_r+0x4a>
   37712:	bf00      	nop
   37714:	20017fc4 	.word	0x20017fc4
   37718:	20017fc0 	.word	0x20017fc0

0003771c <_vfiprintf_r>:
   3771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37720:	460d      	mov	r5, r1
   37722:	b09d      	sub	sp, #116	; 0x74
   37724:	4614      	mov	r4, r2
   37726:	4698      	mov	r8, r3
   37728:	4606      	mov	r6, r0
   3772a:	b118      	cbz	r0, 37734 <_vfiprintf_r+0x18>
   3772c:	6983      	ldr	r3, [r0, #24]
   3772e:	b90b      	cbnz	r3, 37734 <_vfiprintf_r+0x18>
   37730:	f000 ffa6 	bl	38680 <__sinit>
   37734:	4b87      	ldr	r3, [pc, #540]	; (37954 <_vfiprintf_r+0x238>)
   37736:	429d      	cmp	r5, r3
   37738:	d11b      	bne.n	37772 <_vfiprintf_r+0x56>
   3773a:	6875      	ldr	r5, [r6, #4]
   3773c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3773e:	07d9      	lsls	r1, r3, #31
   37740:	d405      	bmi.n	3774e <_vfiprintf_r+0x32>
   37742:	89ab      	ldrh	r3, [r5, #12]
   37744:	059a      	lsls	r2, r3, #22
   37746:	d402      	bmi.n	3774e <_vfiprintf_r+0x32>
   37748:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3774a:	f006 fa9b 	bl	3dc84 <__retarget_lock_acquire_recursive>
   3774e:	89ab      	ldrh	r3, [r5, #12]
   37750:	071b      	lsls	r3, r3, #28
   37752:	d501      	bpl.n	37758 <_vfiprintf_r+0x3c>
   37754:	692b      	ldr	r3, [r5, #16]
   37756:	b9eb      	cbnz	r3, 37794 <_vfiprintf_r+0x78>
   37758:	4629      	mov	r1, r5
   3775a:	4630      	mov	r0, r6
   3775c:	f000 fea6 	bl	384ac <__swsetup_r>
   37760:	b1c0      	cbz	r0, 37794 <_vfiprintf_r+0x78>
   37762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   37764:	07dc      	lsls	r4, r3, #31
   37766:	d50e      	bpl.n	37786 <_vfiprintf_r+0x6a>
   37768:	f04f 30ff 	mov.w	r0, #4294967295
   3776c:	b01d      	add	sp, #116	; 0x74
   3776e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37772:	4b79      	ldr	r3, [pc, #484]	; (37958 <_vfiprintf_r+0x23c>)
   37774:	429d      	cmp	r5, r3
   37776:	d101      	bne.n	3777c <_vfiprintf_r+0x60>
   37778:	68b5      	ldr	r5, [r6, #8]
   3777a:	e7df      	b.n	3773c <_vfiprintf_r+0x20>
   3777c:	4b77      	ldr	r3, [pc, #476]	; (3795c <_vfiprintf_r+0x240>)
   3777e:	429d      	cmp	r5, r3
   37780:	bf08      	it	eq
   37782:	68f5      	ldreq	r5, [r6, #12]
   37784:	e7da      	b.n	3773c <_vfiprintf_r+0x20>
   37786:	89ab      	ldrh	r3, [r5, #12]
   37788:	0598      	lsls	r0, r3, #22
   3778a:	d4ed      	bmi.n	37768 <_vfiprintf_r+0x4c>
   3778c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3778e:	f006 fa7a 	bl	3dc86 <__retarget_lock_release_recursive>
   37792:	e7e9      	b.n	37768 <_vfiprintf_r+0x4c>
   37794:	2300      	movs	r3, #0
   37796:	f8cd 800c 	str.w	r8, [sp, #12]
   3779a:	f04f 0901 	mov.w	r9, #1
   3779e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 37960 <_vfiprintf_r+0x244>
   377a2:	9309      	str	r3, [sp, #36]	; 0x24
   377a4:	2320      	movs	r3, #32
   377a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   377aa:	2330      	movs	r3, #48	; 0x30
   377ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   377b0:	4623      	mov	r3, r4
   377b2:	469a      	mov	sl, r3
   377b4:	f813 2b01 	ldrb.w	r2, [r3], #1
   377b8:	b10a      	cbz	r2, 377be <_vfiprintf_r+0xa2>
   377ba:	2a25      	cmp	r2, #37	; 0x25
   377bc:	d1f9      	bne.n	377b2 <_vfiprintf_r+0x96>
   377be:	ebba 0b04 	subs.w	fp, sl, r4
   377c2:	d00b      	beq.n	377dc <_vfiprintf_r+0xc0>
   377c4:	465b      	mov	r3, fp
   377c6:	4622      	mov	r2, r4
   377c8:	4629      	mov	r1, r5
   377ca:	4630      	mov	r0, r6
   377cc:	f005 ff78 	bl	3d6c0 <__sfputs_r>
   377d0:	3001      	adds	r0, #1
   377d2:	f000 80a6 	beq.w	37922 <_vfiprintf_r+0x206>
   377d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   377d8:	445a      	add	r2, fp
   377da:	9209      	str	r2, [sp, #36]	; 0x24
   377dc:	f89a 3000 	ldrb.w	r3, [sl]
   377e0:	2b00      	cmp	r3, #0
   377e2:	f000 809e 	beq.w	37922 <_vfiprintf_r+0x206>
   377e6:	2300      	movs	r3, #0
   377e8:	f04f 32ff 	mov.w	r2, #4294967295
   377ec:	f10a 0a01 	add.w	sl, sl, #1
   377f0:	9304      	str	r3, [sp, #16]
   377f2:	9307      	str	r3, [sp, #28]
   377f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   377f8:	931a      	str	r3, [sp, #104]	; 0x68
   377fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
   377fe:	4654      	mov	r4, sl
   37800:	2205      	movs	r2, #5
   37802:	4857      	ldr	r0, [pc, #348]	; (37960 <_vfiprintf_r+0x244>)
   37804:	f814 1b01 	ldrb.w	r1, [r4], #1
   37808:	f005 ff12 	bl	3d630 <memchr>
   3780c:	9b04      	ldr	r3, [sp, #16]
   3780e:	b9d0      	cbnz	r0, 37846 <_vfiprintf_r+0x12a>
   37810:	06d9      	lsls	r1, r3, #27
   37812:	bf44      	itt	mi
   37814:	2220      	movmi	r2, #32
   37816:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3781a:	071a      	lsls	r2, r3, #28
   3781c:	bf44      	itt	mi
   3781e:	222b      	movmi	r2, #43	; 0x2b
   37820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   37824:	f89a 2000 	ldrb.w	r2, [sl]
   37828:	2a2a      	cmp	r2, #42	; 0x2a
   3782a:	d014      	beq.n	37856 <_vfiprintf_r+0x13a>
   3782c:	9a07      	ldr	r2, [sp, #28]
   3782e:	4654      	mov	r4, sl
   37830:	2000      	movs	r0, #0
   37832:	f04f 0c0a 	mov.w	ip, #10
   37836:	4621      	mov	r1, r4
   37838:	f811 3b01 	ldrb.w	r3, [r1], #1
   3783c:	3b30      	subs	r3, #48	; 0x30
   3783e:	2b09      	cmp	r3, #9
   37840:	d94a      	bls.n	378d8 <_vfiprintf_r+0x1bc>
   37842:	b970      	cbnz	r0, 37862 <_vfiprintf_r+0x146>
   37844:	e014      	b.n	37870 <_vfiprintf_r+0x154>
   37846:	eba0 0008 	sub.w	r0, r0, r8
   3784a:	46a2      	mov	sl, r4
   3784c:	fa09 f000 	lsl.w	r0, r9, r0
   37850:	4318      	orrs	r0, r3
   37852:	9004      	str	r0, [sp, #16]
   37854:	e7d3      	b.n	377fe <_vfiprintf_r+0xe2>
   37856:	9a03      	ldr	r2, [sp, #12]
   37858:	1d11      	adds	r1, r2, #4
   3785a:	6812      	ldr	r2, [r2, #0]
   3785c:	2a00      	cmp	r2, #0
   3785e:	9103      	str	r1, [sp, #12]
   37860:	db01      	blt.n	37866 <_vfiprintf_r+0x14a>
   37862:	9207      	str	r2, [sp, #28]
   37864:	e004      	b.n	37870 <_vfiprintf_r+0x154>
   37866:	4252      	negs	r2, r2
   37868:	f043 0302 	orr.w	r3, r3, #2
   3786c:	9207      	str	r2, [sp, #28]
   3786e:	9304      	str	r3, [sp, #16]
   37870:	7823      	ldrb	r3, [r4, #0]
   37872:	2b2e      	cmp	r3, #46	; 0x2e
   37874:	d10a      	bne.n	3788c <_vfiprintf_r+0x170>
   37876:	7863      	ldrb	r3, [r4, #1]
   37878:	2b2a      	cmp	r3, #42	; 0x2a
   3787a:	d132      	bne.n	378e2 <_vfiprintf_r+0x1c6>
   3787c:	9b03      	ldr	r3, [sp, #12]
   3787e:	3402      	adds	r4, #2
   37880:	1d1a      	adds	r2, r3, #4
   37882:	681b      	ldr	r3, [r3, #0]
   37884:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   37888:	9203      	str	r2, [sp, #12]
   3788a:	9305      	str	r3, [sp, #20]
   3788c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 37964 <_vfiprintf_r+0x248>
   37890:	2203      	movs	r2, #3
   37892:	7821      	ldrb	r1, [r4, #0]
   37894:	4650      	mov	r0, sl
   37896:	f005 fecb 	bl	3d630 <memchr>
   3789a:	b138      	cbz	r0, 378ac <_vfiprintf_r+0x190>
   3789c:	eba0 000a 	sub.w	r0, r0, sl
   378a0:	2240      	movs	r2, #64	; 0x40
   378a2:	9b04      	ldr	r3, [sp, #16]
   378a4:	3401      	adds	r4, #1
   378a6:	4082      	lsls	r2, r0
   378a8:	4313      	orrs	r3, r2
   378aa:	9304      	str	r3, [sp, #16]
   378ac:	f814 1b01 	ldrb.w	r1, [r4], #1
   378b0:	2206      	movs	r2, #6
   378b2:	482d      	ldr	r0, [pc, #180]	; (37968 <_vfiprintf_r+0x24c>)
   378b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   378b8:	f005 feba 	bl	3d630 <memchr>
   378bc:	2800      	cmp	r0, #0
   378be:	d03f      	beq.n	37940 <_vfiprintf_r+0x224>
   378c0:	4b2a      	ldr	r3, [pc, #168]	; (3796c <_vfiprintf_r+0x250>)
   378c2:	bb1b      	cbnz	r3, 3790c <_vfiprintf_r+0x1f0>
   378c4:	9b03      	ldr	r3, [sp, #12]
   378c6:	3307      	adds	r3, #7
   378c8:	f023 0307 	bic.w	r3, r3, #7
   378cc:	3308      	adds	r3, #8
   378ce:	9303      	str	r3, [sp, #12]
   378d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   378d2:	443b      	add	r3, r7
   378d4:	9309      	str	r3, [sp, #36]	; 0x24
   378d6:	e76b      	b.n	377b0 <_vfiprintf_r+0x94>
   378d8:	fb0c 3202 	mla	r2, ip, r2, r3
   378dc:	460c      	mov	r4, r1
   378de:	2001      	movs	r0, #1
   378e0:	e7a9      	b.n	37836 <_vfiprintf_r+0x11a>
   378e2:	2300      	movs	r3, #0
   378e4:	3401      	adds	r4, #1
   378e6:	f04f 0c0a 	mov.w	ip, #10
   378ea:	4619      	mov	r1, r3
   378ec:	9305      	str	r3, [sp, #20]
   378ee:	4620      	mov	r0, r4
   378f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   378f4:	3a30      	subs	r2, #48	; 0x30
   378f6:	2a09      	cmp	r2, #9
   378f8:	d903      	bls.n	37902 <_vfiprintf_r+0x1e6>
   378fa:	2b00      	cmp	r3, #0
   378fc:	d0c6      	beq.n	3788c <_vfiprintf_r+0x170>
   378fe:	9105      	str	r1, [sp, #20]
   37900:	e7c4      	b.n	3788c <_vfiprintf_r+0x170>
   37902:	fb0c 2101 	mla	r1, ip, r1, r2
   37906:	4604      	mov	r4, r0
   37908:	2301      	movs	r3, #1
   3790a:	e7f0      	b.n	378ee <_vfiprintf_r+0x1d2>
   3790c:	ab03      	add	r3, sp, #12
   3790e:	462a      	mov	r2, r5
   37910:	a904      	add	r1, sp, #16
   37912:	4630      	mov	r0, r6
   37914:	9300      	str	r3, [sp, #0]
   37916:	4b16      	ldr	r3, [pc, #88]	; (37970 <_vfiprintf_r+0x254>)
   37918:	f000 f82c 	bl	37974 <_printf_float>
   3791c:	4607      	mov	r7, r0
   3791e:	1c78      	adds	r0, r7, #1
   37920:	d1d6      	bne.n	378d0 <_vfiprintf_r+0x1b4>
   37922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   37924:	07d9      	lsls	r1, r3, #31
   37926:	d405      	bmi.n	37934 <_vfiprintf_r+0x218>
   37928:	89ab      	ldrh	r3, [r5, #12]
   3792a:	059a      	lsls	r2, r3, #22
   3792c:	d402      	bmi.n	37934 <_vfiprintf_r+0x218>
   3792e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   37930:	f006 f9a9 	bl	3dc86 <__retarget_lock_release_recursive>
   37934:	89ab      	ldrh	r3, [r5, #12]
   37936:	065b      	lsls	r3, r3, #25
   37938:	f53f af16 	bmi.w	37768 <_vfiprintf_r+0x4c>
   3793c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3793e:	e715      	b.n	3776c <_vfiprintf_r+0x50>
   37940:	ab03      	add	r3, sp, #12
   37942:	462a      	mov	r2, r5
   37944:	a904      	add	r1, sp, #16
   37946:	4630      	mov	r0, r6
   37948:	9300      	str	r3, [sp, #0]
   3794a:	4b09      	ldr	r3, [pc, #36]	; (37970 <_vfiprintf_r+0x254>)
   3794c:	f000 fa48 	bl	37de0 <_printf_i>
   37950:	e7e4      	b.n	3791c <_vfiprintf_r+0x200>
   37952:	bf00      	nop
   37954:	0003ede8 	.word	0x0003ede8
   37958:	0003edc8 	.word	0x0003edc8
   3795c:	0003eda8 	.word	0x0003eda8
   37960:	000432d6 	.word	0x000432d6
   37964:	000432dc 	.word	0x000432dc
   37968:	000432e0 	.word	0x000432e0
   3796c:	00037975 	.word	0x00037975
   37970:	0003d6c1 	.word	0x0003d6c1

00037974 <_printf_float>:
   37974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37978:	b091      	sub	sp, #68	; 0x44
   3797a:	460c      	mov	r4, r1
   3797c:	4616      	mov	r6, r2
   3797e:	461f      	mov	r7, r3
   37980:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   37984:	4605      	mov	r5, r0
   37986:	f000 fef9 	bl	3877c <_localeconv_r>
   3798a:	6803      	ldr	r3, [r0, #0]
   3798c:	4618      	mov	r0, r3
   3798e:	9308      	str	r3, [sp, #32]
   37990:	f7e9 fe6d 	bl	2166e <strlen>
   37994:	2300      	movs	r3, #0
   37996:	9009      	str	r0, [sp, #36]	; 0x24
   37998:	930e      	str	r3, [sp, #56]	; 0x38
   3799a:	f8d8 3000 	ldr.w	r3, [r8]
   3799e:	f894 a018 	ldrb.w	sl, [r4, #24]
   379a2:	3307      	adds	r3, #7
   379a4:	f8d4 b000 	ldr.w	fp, [r4]
   379a8:	f023 0307 	bic.w	r3, r3, #7
   379ac:	f103 0208 	add.w	r2, r3, #8
   379b0:	f8c8 2000 	str.w	r2, [r8]
   379b4:	f04f 32ff 	mov.w	r2, #4294967295
   379b8:	e9d3 8900 	ldrd	r8, r9, [r3]
   379bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   379c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   379c4:	930b      	str	r3, [sp, #44]	; 0x2c
   379c6:	4b9d      	ldr	r3, [pc, #628]	; (37c3c <_printf_float+0x2c8>)
   379c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   379cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   379d0:	f7e9 fca4 	bl	2131c <__aeabi_dcmpun>
   379d4:	bb70      	cbnz	r0, 37a34 <_printf_float+0xc0>
   379d6:	f04f 32ff 	mov.w	r2, #4294967295
   379da:	4b98      	ldr	r3, [pc, #608]	; (37c3c <_printf_float+0x2c8>)
   379dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   379e0:	f7e9 fc7e 	bl	212e0 <__aeabi_dcmple>
   379e4:	bb30      	cbnz	r0, 37a34 <_printf_float+0xc0>
   379e6:	2200      	movs	r2, #0
   379e8:	2300      	movs	r3, #0
   379ea:	4640      	mov	r0, r8
   379ec:	4649      	mov	r1, r9
   379ee:	f7e9 fc6d 	bl	212cc <__aeabi_dcmplt>
   379f2:	b110      	cbz	r0, 379fa <_printf_float+0x86>
   379f4:	232d      	movs	r3, #45	; 0x2d
   379f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   379fa:	4a91      	ldr	r2, [pc, #580]	; (37c40 <_printf_float+0x2cc>)
   379fc:	4b91      	ldr	r3, [pc, #580]	; (37c44 <_printf_float+0x2d0>)
   379fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   37a02:	bf94      	ite	ls
   37a04:	4690      	movls	r8, r2
   37a06:	4698      	movhi	r8, r3
   37a08:	2303      	movs	r3, #3
   37a0a:	f04f 0900 	mov.w	r9, #0
   37a0e:	6123      	str	r3, [r4, #16]
   37a10:	f02b 0304 	bic.w	r3, fp, #4
   37a14:	6023      	str	r3, [r4, #0]
   37a16:	4633      	mov	r3, r6
   37a18:	aa0f      	add	r2, sp, #60	; 0x3c
   37a1a:	4621      	mov	r1, r4
   37a1c:	4628      	mov	r0, r5
   37a1e:	9700      	str	r7, [sp, #0]
   37a20:	f005 ff00 	bl	3d824 <_printf_common>
   37a24:	3001      	adds	r0, #1
   37a26:	f040 8099 	bne.w	37b5c <_printf_float+0x1e8>
   37a2a:	f04f 30ff 	mov.w	r0, #4294967295
   37a2e:	b011      	add	sp, #68	; 0x44
   37a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37a34:	4642      	mov	r2, r8
   37a36:	464b      	mov	r3, r9
   37a38:	4640      	mov	r0, r8
   37a3a:	4649      	mov	r1, r9
   37a3c:	f7e9 fc6e 	bl	2131c <__aeabi_dcmpun>
   37a40:	b140      	cbz	r0, 37a54 <_printf_float+0xe0>
   37a42:	464b      	mov	r3, r9
   37a44:	4a80      	ldr	r2, [pc, #512]	; (37c48 <_printf_float+0x2d4>)
   37a46:	2b00      	cmp	r3, #0
   37a48:	bfbc      	itt	lt
   37a4a:	232d      	movlt	r3, #45	; 0x2d
   37a4c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   37a50:	4b7e      	ldr	r3, [pc, #504]	; (37c4c <_printf_float+0x2d8>)
   37a52:	e7d4      	b.n	379fe <_printf_float+0x8a>
   37a54:	6863      	ldr	r3, [r4, #4]
   37a56:	1c5a      	adds	r2, r3, #1
   37a58:	d129      	bne.n	37aae <_printf_float+0x13a>
   37a5a:	2306      	movs	r3, #6
   37a5c:	6063      	str	r3, [r4, #4]
   37a5e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   37a62:	2200      	movs	r2, #0
   37a64:	4628      	mov	r0, r5
   37a66:	6023      	str	r3, [r4, #0]
   37a68:	9206      	str	r2, [sp, #24]
   37a6a:	aa0e      	add	r2, sp, #56	; 0x38
   37a6c:	e9cd a204 	strd	sl, r2, [sp, #16]
   37a70:	aa0d      	add	r2, sp, #52	; 0x34
   37a72:	9203      	str	r2, [sp, #12]
   37a74:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   37a78:	e9cd 3201 	strd	r3, r2, [sp, #4]
   37a7c:	6863      	ldr	r3, [r4, #4]
   37a7e:	4642      	mov	r2, r8
   37a80:	9300      	str	r3, [sp, #0]
   37a82:	464b      	mov	r3, r9
   37a84:	f005 fe2e 	bl	3d6e4 <__cvt>
   37a88:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   37a8c:	4680      	mov	r8, r0
   37a8e:	990d      	ldr	r1, [sp, #52]	; 0x34
   37a90:	d115      	bne.n	37abe <_printf_float+0x14a>
   37a92:	1ccb      	adds	r3, r1, #3
   37a94:	db3b      	blt.n	37b0e <_printf_float+0x19a>
   37a96:	6863      	ldr	r3, [r4, #4]
   37a98:	4299      	cmp	r1, r3
   37a9a:	dc38      	bgt.n	37b0e <_printf_float+0x19a>
   37a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   37a9e:	4299      	cmp	r1, r3
   37aa0:	db55      	blt.n	37b4e <_printf_float+0x1da>
   37aa2:	6823      	ldr	r3, [r4, #0]
   37aa4:	6121      	str	r1, [r4, #16]
   37aa6:	07d8      	lsls	r0, r3, #31
   37aa8:	d545      	bpl.n	37b36 <_printf_float+0x1c2>
   37aaa:	1c4b      	adds	r3, r1, #1
   37aac:	e042      	b.n	37b34 <_printf_float+0x1c0>
   37aae:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   37ab2:	2a47      	cmp	r2, #71	; 0x47
   37ab4:	d1d3      	bne.n	37a5e <_printf_float+0xea>
   37ab6:	2b00      	cmp	r3, #0
   37ab8:	d1d1      	bne.n	37a5e <_printf_float+0xea>
   37aba:	2301      	movs	r3, #1
   37abc:	e7ce      	b.n	37a5c <_printf_float+0xe8>
   37abe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   37ac2:	d107      	bne.n	37ad4 <_printf_float+0x160>
   37ac4:	1cc8      	adds	r0, r1, #3
   37ac6:	db25      	blt.n	37b14 <_printf_float+0x1a0>
   37ac8:	6863      	ldr	r3, [r4, #4]
   37aca:	428b      	cmp	r3, r1
   37acc:	db22      	blt.n	37b14 <_printf_float+0x1a0>
   37ace:	f04f 0a67 	mov.w	sl, #103	; 0x67
   37ad2:	e7e3      	b.n	37a9c <_printf_float+0x128>
   37ad4:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   37ad8:	d81f      	bhi.n	37b1a <_printf_float+0x1a6>
   37ada:	3901      	subs	r1, #1
   37adc:	4652      	mov	r2, sl
   37ade:	f104 0050 	add.w	r0, r4, #80	; 0x50
   37ae2:	910d      	str	r1, [sp, #52]	; 0x34
   37ae4:	f005 fe65 	bl	3d7b2 <__exponent>
   37ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37aea:	4681      	mov	r9, r0
   37aec:	1813      	adds	r3, r2, r0
   37aee:	2a01      	cmp	r2, #1
   37af0:	6123      	str	r3, [r4, #16]
   37af2:	dc02      	bgt.n	37afa <_printf_float+0x186>
   37af4:	6822      	ldr	r2, [r4, #0]
   37af6:	07d2      	lsls	r2, r2, #31
   37af8:	d501      	bpl.n	37afe <_printf_float+0x18a>
   37afa:	3301      	adds	r3, #1
   37afc:	6123      	str	r3, [r4, #16]
   37afe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   37b02:	2b00      	cmp	r3, #0
   37b04:	d087      	beq.n	37a16 <_printf_float+0xa2>
   37b06:	232d      	movs	r3, #45	; 0x2d
   37b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   37b0c:	e783      	b.n	37a16 <_printf_float+0xa2>
   37b0e:	f04f 0a65 	mov.w	sl, #101	; 0x65
   37b12:	e7e2      	b.n	37ada <_printf_float+0x166>
   37b14:	f04f 0a45 	mov.w	sl, #69	; 0x45
   37b18:	e7df      	b.n	37ada <_printf_float+0x166>
   37b1a:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   37b1e:	d1bd      	bne.n	37a9c <_printf_float+0x128>
   37b20:	2900      	cmp	r1, #0
   37b22:	6863      	ldr	r3, [r4, #4]
   37b24:	dd0b      	ble.n	37b3e <_printf_float+0x1ca>
   37b26:	6121      	str	r1, [r4, #16]
   37b28:	b913      	cbnz	r3, 37b30 <_printf_float+0x1bc>
   37b2a:	6822      	ldr	r2, [r4, #0]
   37b2c:	07d0      	lsls	r0, r2, #31
   37b2e:	d502      	bpl.n	37b36 <_printf_float+0x1c2>
   37b30:	3301      	adds	r3, #1
   37b32:	440b      	add	r3, r1
   37b34:	6123      	str	r3, [r4, #16]
   37b36:	f04f 0900 	mov.w	r9, #0
   37b3a:	65a1      	str	r1, [r4, #88]	; 0x58
   37b3c:	e7df      	b.n	37afe <_printf_float+0x18a>
   37b3e:	b913      	cbnz	r3, 37b46 <_printf_float+0x1d2>
   37b40:	6822      	ldr	r2, [r4, #0]
   37b42:	07d2      	lsls	r2, r2, #31
   37b44:	d501      	bpl.n	37b4a <_printf_float+0x1d6>
   37b46:	3302      	adds	r3, #2
   37b48:	e7f4      	b.n	37b34 <_printf_float+0x1c0>
   37b4a:	2301      	movs	r3, #1
   37b4c:	e7f2      	b.n	37b34 <_printf_float+0x1c0>
   37b4e:	2900      	cmp	r1, #0
   37b50:	bfd4      	ite	le
   37b52:	f1c1 0202 	rsble	r2, r1, #2
   37b56:	2201      	movgt	r2, #1
   37b58:	4413      	add	r3, r2
   37b5a:	e7eb      	b.n	37b34 <_printf_float+0x1c0>
   37b5c:	6823      	ldr	r3, [r4, #0]
   37b5e:	055a      	lsls	r2, r3, #21
   37b60:	d407      	bmi.n	37b72 <_printf_float+0x1fe>
   37b62:	6923      	ldr	r3, [r4, #16]
   37b64:	4642      	mov	r2, r8
   37b66:	4631      	mov	r1, r6
   37b68:	4628      	mov	r0, r5
   37b6a:	47b8      	blx	r7
   37b6c:	3001      	adds	r0, #1
   37b6e:	d12b      	bne.n	37bc8 <_printf_float+0x254>
   37b70:	e75b      	b.n	37a2a <_printf_float+0xb6>
   37b72:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   37b76:	f240 80dc 	bls.w	37d32 <_printf_float+0x3be>
   37b7a:	2200      	movs	r2, #0
   37b7c:	2300      	movs	r3, #0
   37b7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   37b82:	f7e9 fb99 	bl	212b8 <__aeabi_dcmpeq>
   37b86:	2800      	cmp	r0, #0
   37b88:	d033      	beq.n	37bf2 <_printf_float+0x27e>
   37b8a:	2301      	movs	r3, #1
   37b8c:	4a30      	ldr	r2, [pc, #192]	; (37c50 <_printf_float+0x2dc>)
   37b8e:	4631      	mov	r1, r6
   37b90:	4628      	mov	r0, r5
   37b92:	47b8      	blx	r7
   37b94:	3001      	adds	r0, #1
   37b96:	f43f af48 	beq.w	37a2a <_printf_float+0xb6>
   37b9a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   37b9e:	4543      	cmp	r3, r8
   37ba0:	db02      	blt.n	37ba8 <_printf_float+0x234>
   37ba2:	6823      	ldr	r3, [r4, #0]
   37ba4:	07d8      	lsls	r0, r3, #31
   37ba6:	d50f      	bpl.n	37bc8 <_printf_float+0x254>
   37ba8:	4631      	mov	r1, r6
   37baa:	4628      	mov	r0, r5
   37bac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   37bb0:	47b8      	blx	r7
   37bb2:	3001      	adds	r0, #1
   37bb4:	f43f af39 	beq.w	37a2a <_printf_float+0xb6>
   37bb8:	f04f 0900 	mov.w	r9, #0
   37bbc:	f108 38ff 	add.w	r8, r8, #4294967295
   37bc0:	f104 0a1a 	add.w	sl, r4, #26
   37bc4:	45c8      	cmp	r8, r9
   37bc6:	dc09      	bgt.n	37bdc <_printf_float+0x268>
   37bc8:	6823      	ldr	r3, [r4, #0]
   37bca:	079b      	lsls	r3, r3, #30
   37bcc:	f100 8102 	bmi.w	37dd4 <_printf_float+0x460>
   37bd0:	68e0      	ldr	r0, [r4, #12]
   37bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   37bd4:	4298      	cmp	r0, r3
   37bd6:	bfb8      	it	lt
   37bd8:	4618      	movlt	r0, r3
   37bda:	e728      	b.n	37a2e <_printf_float+0xba>
   37bdc:	2301      	movs	r3, #1
   37bde:	4652      	mov	r2, sl
   37be0:	4631      	mov	r1, r6
   37be2:	4628      	mov	r0, r5
   37be4:	47b8      	blx	r7
   37be6:	3001      	adds	r0, #1
   37be8:	f43f af1f 	beq.w	37a2a <_printf_float+0xb6>
   37bec:	f109 0901 	add.w	r9, r9, #1
   37bf0:	e7e8      	b.n	37bc4 <_printf_float+0x250>
   37bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   37bf4:	2b00      	cmp	r3, #0
   37bf6:	dc38      	bgt.n	37c6a <_printf_float+0x2f6>
   37bf8:	2301      	movs	r3, #1
   37bfa:	4a15      	ldr	r2, [pc, #84]	; (37c50 <_printf_float+0x2dc>)
   37bfc:	4631      	mov	r1, r6
   37bfe:	4628      	mov	r0, r5
   37c00:	47b8      	blx	r7
   37c02:	3001      	adds	r0, #1
   37c04:	f43f af11 	beq.w	37a2a <_printf_float+0xb6>
   37c08:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   37c0c:	ea59 0303 	orrs.w	r3, r9, r3
   37c10:	d102      	bne.n	37c18 <_printf_float+0x2a4>
   37c12:	6823      	ldr	r3, [r4, #0]
   37c14:	07d9      	lsls	r1, r3, #31
   37c16:	d5d7      	bpl.n	37bc8 <_printf_float+0x254>
   37c18:	4631      	mov	r1, r6
   37c1a:	4628      	mov	r0, r5
   37c1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   37c20:	47b8      	blx	r7
   37c22:	3001      	adds	r0, #1
   37c24:	f43f af01 	beq.w	37a2a <_printf_float+0xb6>
   37c28:	f04f 0a00 	mov.w	sl, #0
   37c2c:	f104 0b1a 	add.w	fp, r4, #26
   37c30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   37c32:	425b      	negs	r3, r3
   37c34:	4553      	cmp	r3, sl
   37c36:	dc0d      	bgt.n	37c54 <_printf_float+0x2e0>
   37c38:	464b      	mov	r3, r9
   37c3a:	e793      	b.n	37b64 <_printf_float+0x1f0>
   37c3c:	7fefffff 	.word	0x7fefffff
   37c40:	000432e7 	.word	0x000432e7
   37c44:	0003f61d 	.word	0x0003f61d
   37c48:	000432eb 	.word	0x000432eb
   37c4c:	000432ef 	.word	0x000432ef
   37c50:	000422ae 	.word	0x000422ae
   37c54:	2301      	movs	r3, #1
   37c56:	465a      	mov	r2, fp
   37c58:	4631      	mov	r1, r6
   37c5a:	4628      	mov	r0, r5
   37c5c:	47b8      	blx	r7
   37c5e:	3001      	adds	r0, #1
   37c60:	f43f aee3 	beq.w	37a2a <_printf_float+0xb6>
   37c64:	f10a 0a01 	add.w	sl, sl, #1
   37c68:	e7e2      	b.n	37c30 <_printf_float+0x2bc>
   37c6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   37c6c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   37c70:	4553      	cmp	r3, sl
   37c72:	bfa8      	it	ge
   37c74:	4653      	movge	r3, sl
   37c76:	2b00      	cmp	r3, #0
   37c78:	4699      	mov	r9, r3
   37c7a:	dc36      	bgt.n	37cea <_printf_float+0x376>
   37c7c:	f04f 0b00 	mov.w	fp, #0
   37c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   37c84:	f104 021a 	add.w	r2, r4, #26
   37c88:	6da3      	ldr	r3, [r4, #88]	; 0x58
   37c8a:	930a      	str	r3, [sp, #40]	; 0x28
   37c8c:	eba3 0309 	sub.w	r3, r3, r9
   37c90:	455b      	cmp	r3, fp
   37c92:	dc31      	bgt.n	37cf8 <_printf_float+0x384>
   37c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   37c96:	459a      	cmp	sl, r3
   37c98:	dc3a      	bgt.n	37d10 <_printf_float+0x39c>
   37c9a:	6823      	ldr	r3, [r4, #0]
   37c9c:	07da      	lsls	r2, r3, #31
   37c9e:	d437      	bmi.n	37d10 <_printf_float+0x39c>
   37ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   37ca2:	ebaa 0903 	sub.w	r9, sl, r3
   37ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   37ca8:	ebaa 0303 	sub.w	r3, sl, r3
   37cac:	4599      	cmp	r9, r3
   37cae:	bfa8      	it	ge
   37cb0:	4699      	movge	r9, r3
   37cb2:	f1b9 0f00 	cmp.w	r9, #0
   37cb6:	dc33      	bgt.n	37d20 <_printf_float+0x3ac>
   37cb8:	f04f 0800 	mov.w	r8, #0
   37cbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   37cc0:	f104 0b1a 	add.w	fp, r4, #26
   37cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   37cc6:	ebaa 0303 	sub.w	r3, sl, r3
   37cca:	eba3 0309 	sub.w	r3, r3, r9
   37cce:	4543      	cmp	r3, r8
   37cd0:	f77f af7a 	ble.w	37bc8 <_printf_float+0x254>
   37cd4:	2301      	movs	r3, #1
   37cd6:	465a      	mov	r2, fp
   37cd8:	4631      	mov	r1, r6
   37cda:	4628      	mov	r0, r5
   37cdc:	47b8      	blx	r7
   37cde:	3001      	adds	r0, #1
   37ce0:	f43f aea3 	beq.w	37a2a <_printf_float+0xb6>
   37ce4:	f108 0801 	add.w	r8, r8, #1
   37ce8:	e7ec      	b.n	37cc4 <_printf_float+0x350>
   37cea:	4642      	mov	r2, r8
   37cec:	4631      	mov	r1, r6
   37cee:	4628      	mov	r0, r5
   37cf0:	47b8      	blx	r7
   37cf2:	3001      	adds	r0, #1
   37cf4:	d1c2      	bne.n	37c7c <_printf_float+0x308>
   37cf6:	e698      	b.n	37a2a <_printf_float+0xb6>
   37cf8:	2301      	movs	r3, #1
   37cfa:	4631      	mov	r1, r6
   37cfc:	4628      	mov	r0, r5
   37cfe:	920a      	str	r2, [sp, #40]	; 0x28
   37d00:	47b8      	blx	r7
   37d02:	3001      	adds	r0, #1
   37d04:	f43f ae91 	beq.w	37a2a <_printf_float+0xb6>
   37d08:	f10b 0b01 	add.w	fp, fp, #1
   37d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   37d0e:	e7bb      	b.n	37c88 <_printf_float+0x314>
   37d10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   37d14:	4631      	mov	r1, r6
   37d16:	4628      	mov	r0, r5
   37d18:	47b8      	blx	r7
   37d1a:	3001      	adds	r0, #1
   37d1c:	d1c0      	bne.n	37ca0 <_printf_float+0x32c>
   37d1e:	e684      	b.n	37a2a <_printf_float+0xb6>
   37d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   37d22:	464b      	mov	r3, r9
   37d24:	4631      	mov	r1, r6
   37d26:	4628      	mov	r0, r5
   37d28:	4442      	add	r2, r8
   37d2a:	47b8      	blx	r7
   37d2c:	3001      	adds	r0, #1
   37d2e:	d1c3      	bne.n	37cb8 <_printf_float+0x344>
   37d30:	e67b      	b.n	37a2a <_printf_float+0xb6>
   37d32:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   37d36:	f1ba 0f01 	cmp.w	sl, #1
   37d3a:	dc01      	bgt.n	37d40 <_printf_float+0x3cc>
   37d3c:	07db      	lsls	r3, r3, #31
   37d3e:	d536      	bpl.n	37dae <_printf_float+0x43a>
   37d40:	2301      	movs	r3, #1
   37d42:	4642      	mov	r2, r8
   37d44:	4631      	mov	r1, r6
   37d46:	4628      	mov	r0, r5
   37d48:	47b8      	blx	r7
   37d4a:	3001      	adds	r0, #1
   37d4c:	f43f ae6d 	beq.w	37a2a <_printf_float+0xb6>
   37d50:	4631      	mov	r1, r6
   37d52:	4628      	mov	r0, r5
   37d54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   37d58:	47b8      	blx	r7
   37d5a:	3001      	adds	r0, #1
   37d5c:	f43f ae65 	beq.w	37a2a <_printf_float+0xb6>
   37d60:	2200      	movs	r2, #0
   37d62:	2300      	movs	r3, #0
   37d64:	f10a 3aff 	add.w	sl, sl, #4294967295
   37d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   37d6c:	f7e9 faa4 	bl	212b8 <__aeabi_dcmpeq>
   37d70:	b9c0      	cbnz	r0, 37da4 <_printf_float+0x430>
   37d72:	4653      	mov	r3, sl
   37d74:	f108 0201 	add.w	r2, r8, #1
   37d78:	4631      	mov	r1, r6
   37d7a:	4628      	mov	r0, r5
   37d7c:	47b8      	blx	r7
   37d7e:	3001      	adds	r0, #1
   37d80:	d10c      	bne.n	37d9c <_printf_float+0x428>
   37d82:	e652      	b.n	37a2a <_printf_float+0xb6>
   37d84:	2301      	movs	r3, #1
   37d86:	465a      	mov	r2, fp
   37d88:	4631      	mov	r1, r6
   37d8a:	4628      	mov	r0, r5
   37d8c:	47b8      	blx	r7
   37d8e:	3001      	adds	r0, #1
   37d90:	f43f ae4b 	beq.w	37a2a <_printf_float+0xb6>
   37d94:	f108 0801 	add.w	r8, r8, #1
   37d98:	45d0      	cmp	r8, sl
   37d9a:	dbf3      	blt.n	37d84 <_printf_float+0x410>
   37d9c:	464b      	mov	r3, r9
   37d9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
   37da2:	e6e0      	b.n	37b66 <_printf_float+0x1f2>
   37da4:	f04f 0800 	mov.w	r8, #0
   37da8:	f104 0b1a 	add.w	fp, r4, #26
   37dac:	e7f4      	b.n	37d98 <_printf_float+0x424>
   37dae:	2301      	movs	r3, #1
   37db0:	4642      	mov	r2, r8
   37db2:	e7e1      	b.n	37d78 <_printf_float+0x404>
   37db4:	2301      	movs	r3, #1
   37db6:	464a      	mov	r2, r9
   37db8:	4631      	mov	r1, r6
   37dba:	4628      	mov	r0, r5
   37dbc:	47b8      	blx	r7
   37dbe:	3001      	adds	r0, #1
   37dc0:	f43f ae33 	beq.w	37a2a <_printf_float+0xb6>
   37dc4:	f108 0801 	add.w	r8, r8, #1
   37dc8:	68e3      	ldr	r3, [r4, #12]
   37dca:	990f      	ldr	r1, [sp, #60]	; 0x3c
   37dcc:	1a5b      	subs	r3, r3, r1
   37dce:	4543      	cmp	r3, r8
   37dd0:	dcf0      	bgt.n	37db4 <_printf_float+0x440>
   37dd2:	e6fd      	b.n	37bd0 <_printf_float+0x25c>
   37dd4:	f04f 0800 	mov.w	r8, #0
   37dd8:	f104 0919 	add.w	r9, r4, #25
   37ddc:	e7f4      	b.n	37dc8 <_printf_float+0x454>
   37dde:	bf00      	nop

00037de0 <_printf_i>:
   37de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   37de4:	7e0f      	ldrb	r7, [r1, #24]
   37de6:	4691      	mov	r9, r2
   37de8:	4680      	mov	r8, r0
   37dea:	460c      	mov	r4, r1
   37dec:	2f78      	cmp	r7, #120	; 0x78
   37dee:	469a      	mov	sl, r3
   37df0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   37df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
   37df6:	d807      	bhi.n	37e08 <_printf_i+0x28>
   37df8:	2f62      	cmp	r7, #98	; 0x62
   37dfa:	d80a      	bhi.n	37e12 <_printf_i+0x32>
   37dfc:	2f00      	cmp	r7, #0
   37dfe:	f000 80e0 	beq.w	37fc2 <_printf_i+0x1e2>
   37e02:	2f58      	cmp	r7, #88	; 0x58
   37e04:	f000 80bb 	beq.w	37f7e <_printf_i+0x19e>
   37e08:	f104 0642 	add.w	r6, r4, #66	; 0x42
   37e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   37e10:	e03a      	b.n	37e88 <_printf_i+0xa8>
   37e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   37e16:	2b15      	cmp	r3, #21
   37e18:	d8f6      	bhi.n	37e08 <_printf_i+0x28>
   37e1a:	a101      	add	r1, pc, #4	; (adr r1, 37e20 <_printf_i+0x40>)
   37e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   37e20:	00037e79 	.word	0x00037e79
   37e24:	00037e8d 	.word	0x00037e8d
   37e28:	00037e09 	.word	0x00037e09
   37e2c:	00037e09 	.word	0x00037e09
   37e30:	00037e09 	.word	0x00037e09
   37e34:	00037e09 	.word	0x00037e09
   37e38:	00037e8d 	.word	0x00037e8d
   37e3c:	00037e09 	.word	0x00037e09
   37e40:	00037e09 	.word	0x00037e09
   37e44:	00037e09 	.word	0x00037e09
   37e48:	00037e09 	.word	0x00037e09
   37e4c:	00037fa9 	.word	0x00037fa9
   37e50:	00037f1d 	.word	0x00037f1d
   37e54:	00037f5f 	.word	0x00037f5f
   37e58:	00037e09 	.word	0x00037e09
   37e5c:	00037e09 	.word	0x00037e09
   37e60:	00037fcb 	.word	0x00037fcb
   37e64:	00037e09 	.word	0x00037e09
   37e68:	00037f1d 	.word	0x00037f1d
   37e6c:	00037e09 	.word	0x00037e09
   37e70:	00037e09 	.word	0x00037e09
   37e74:	00037f67 	.word	0x00037f67
   37e78:	682b      	ldr	r3, [r5, #0]
   37e7a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   37e7e:	1d1a      	adds	r2, r3, #4
   37e80:	681b      	ldr	r3, [r3, #0]
   37e82:	602a      	str	r2, [r5, #0]
   37e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   37e88:	2301      	movs	r3, #1
   37e8a:	e0ab      	b.n	37fe4 <_printf_i+0x204>
   37e8c:	6823      	ldr	r3, [r4, #0]
   37e8e:	6829      	ldr	r1, [r5, #0]
   37e90:	061f      	lsls	r7, r3, #24
   37e92:	f101 0004 	add.w	r0, r1, #4
   37e96:	6028      	str	r0, [r5, #0]
   37e98:	d501      	bpl.n	37e9e <_printf_i+0xbe>
   37e9a:	680d      	ldr	r5, [r1, #0]
   37e9c:	e003      	b.n	37ea6 <_printf_i+0xc6>
   37e9e:	065e      	lsls	r6, r3, #25
   37ea0:	d5fb      	bpl.n	37e9a <_printf_i+0xba>
   37ea2:	f9b1 5000 	ldrsh.w	r5, [r1]
   37ea6:	2d00      	cmp	r5, #0
   37ea8:	6861      	ldr	r1, [r4, #4]
   37eaa:	da7a      	bge.n	37fa2 <_printf_i+0x1c2>
   37eac:	202d      	movs	r0, #45	; 0x2d
   37eae:	2900      	cmp	r1, #0
   37eb0:	60a1      	str	r1, [r4, #8]
   37eb2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   37eb6:	da2d      	bge.n	37f14 <_printf_i+0x134>
   37eb8:	426d      	negs	r5, r5
   37eba:	485e      	ldr	r0, [pc, #376]	; (38034 <_printf_i+0x254>)
   37ebc:	230a      	movs	r3, #10
   37ebe:	4616      	mov	r6, r2
   37ec0:	fbb5 f1f3 	udiv	r1, r5, r3
   37ec4:	fb03 5711 	mls	r7, r3, r1, r5
   37ec8:	5dc7      	ldrb	r7, [r0, r7]
   37eca:	f806 7d01 	strb.w	r7, [r6, #-1]!
   37ece:	462f      	mov	r7, r5
   37ed0:	460d      	mov	r5, r1
   37ed2:	42bb      	cmp	r3, r7
   37ed4:	d9f4      	bls.n	37ec0 <_printf_i+0xe0>
   37ed6:	2b08      	cmp	r3, #8
   37ed8:	d10b      	bne.n	37ef2 <_printf_i+0x112>
   37eda:	6823      	ldr	r3, [r4, #0]
   37edc:	07df      	lsls	r7, r3, #31
   37ede:	d508      	bpl.n	37ef2 <_printf_i+0x112>
   37ee0:	6923      	ldr	r3, [r4, #16]
   37ee2:	6861      	ldr	r1, [r4, #4]
   37ee4:	4299      	cmp	r1, r3
   37ee6:	bfde      	ittt	le
   37ee8:	2330      	movle	r3, #48	; 0x30
   37eea:	f806 3c01 	strble.w	r3, [r6, #-1]
   37eee:	f106 36ff 	addle.w	r6, r6, #4294967295
   37ef2:	1b92      	subs	r2, r2, r6
   37ef4:	6122      	str	r2, [r4, #16]
   37ef6:	464b      	mov	r3, r9
   37ef8:	aa03      	add	r2, sp, #12
   37efa:	4621      	mov	r1, r4
   37efc:	4640      	mov	r0, r8
   37efe:	f8cd a000 	str.w	sl, [sp]
   37f02:	f005 fc8f 	bl	3d824 <_printf_common>
   37f06:	3001      	adds	r0, #1
   37f08:	d171      	bne.n	37fee <_printf_i+0x20e>
   37f0a:	f04f 30ff 	mov.w	r0, #4294967295
   37f0e:	b004      	add	sp, #16
   37f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37f14:	f023 0304 	bic.w	r3, r3, #4
   37f18:	6023      	str	r3, [r4, #0]
   37f1a:	e7cd      	b.n	37eb8 <_printf_i+0xd8>
   37f1c:	682b      	ldr	r3, [r5, #0]
   37f1e:	6820      	ldr	r0, [r4, #0]
   37f20:	1d19      	adds	r1, r3, #4
   37f22:	6029      	str	r1, [r5, #0]
   37f24:	0605      	lsls	r5, r0, #24
   37f26:	d501      	bpl.n	37f2c <_printf_i+0x14c>
   37f28:	681d      	ldr	r5, [r3, #0]
   37f2a:	e002      	b.n	37f32 <_printf_i+0x152>
   37f2c:	0641      	lsls	r1, r0, #25
   37f2e:	d5fb      	bpl.n	37f28 <_printf_i+0x148>
   37f30:	881d      	ldrh	r5, [r3, #0]
   37f32:	2f6f      	cmp	r7, #111	; 0x6f
   37f34:	483f      	ldr	r0, [pc, #252]	; (38034 <_printf_i+0x254>)
   37f36:	bf14      	ite	ne
   37f38:	230a      	movne	r3, #10
   37f3a:	2308      	moveq	r3, #8
   37f3c:	2100      	movs	r1, #0
   37f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   37f42:	6866      	ldr	r6, [r4, #4]
   37f44:	2e00      	cmp	r6, #0
   37f46:	60a6      	str	r6, [r4, #8]
   37f48:	dbb9      	blt.n	37ebe <_printf_i+0xde>
   37f4a:	6821      	ldr	r1, [r4, #0]
   37f4c:	f021 0104 	bic.w	r1, r1, #4
   37f50:	6021      	str	r1, [r4, #0]
   37f52:	2d00      	cmp	r5, #0
   37f54:	d1b3      	bne.n	37ebe <_printf_i+0xde>
   37f56:	2e00      	cmp	r6, #0
   37f58:	d1b1      	bne.n	37ebe <_printf_i+0xde>
   37f5a:	4616      	mov	r6, r2
   37f5c:	e7bb      	b.n	37ed6 <_printf_i+0xf6>
   37f5e:	6823      	ldr	r3, [r4, #0]
   37f60:	f043 0320 	orr.w	r3, r3, #32
   37f64:	6023      	str	r3, [r4, #0]
   37f66:	2778      	movs	r7, #120	; 0x78
   37f68:	4833      	ldr	r0, [pc, #204]	; (38038 <_printf_i+0x258>)
   37f6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   37f6e:	6829      	ldr	r1, [r5, #0]
   37f70:	6823      	ldr	r3, [r4, #0]
   37f72:	1d0e      	adds	r6, r1, #4
   37f74:	602e      	str	r6, [r5, #0]
   37f76:	061e      	lsls	r6, r3, #24
   37f78:	d503      	bpl.n	37f82 <_printf_i+0x1a2>
   37f7a:	680d      	ldr	r5, [r1, #0]
   37f7c:	e004      	b.n	37f88 <_printf_i+0x1a8>
   37f7e:	482d      	ldr	r0, [pc, #180]	; (38034 <_printf_i+0x254>)
   37f80:	e7f3      	b.n	37f6a <_printf_i+0x18a>
   37f82:	065d      	lsls	r5, r3, #25
   37f84:	d5f9      	bpl.n	37f7a <_printf_i+0x19a>
   37f86:	880d      	ldrh	r5, [r1, #0]
   37f88:	07d9      	lsls	r1, r3, #31
   37f8a:	bf44      	itt	mi
   37f8c:	f043 0320 	orrmi.w	r3, r3, #32
   37f90:	6023      	strmi	r3, [r4, #0]
   37f92:	b10d      	cbz	r5, 37f98 <_printf_i+0x1b8>
   37f94:	2310      	movs	r3, #16
   37f96:	e7d1      	b.n	37f3c <_printf_i+0x15c>
   37f98:	6823      	ldr	r3, [r4, #0]
   37f9a:	f023 0320 	bic.w	r3, r3, #32
   37f9e:	6023      	str	r3, [r4, #0]
   37fa0:	e7f8      	b.n	37f94 <_printf_i+0x1b4>
   37fa2:	4824      	ldr	r0, [pc, #144]	; (38034 <_printf_i+0x254>)
   37fa4:	230a      	movs	r3, #10
   37fa6:	e7cc      	b.n	37f42 <_printf_i+0x162>
   37fa8:	682b      	ldr	r3, [r5, #0]
   37faa:	6826      	ldr	r6, [r4, #0]
   37fac:	1d18      	adds	r0, r3, #4
   37fae:	6961      	ldr	r1, [r4, #20]
   37fb0:	6028      	str	r0, [r5, #0]
   37fb2:	0635      	lsls	r5, r6, #24
   37fb4:	681b      	ldr	r3, [r3, #0]
   37fb6:	d501      	bpl.n	37fbc <_printf_i+0x1dc>
   37fb8:	6019      	str	r1, [r3, #0]
   37fba:	e002      	b.n	37fc2 <_printf_i+0x1e2>
   37fbc:	0670      	lsls	r0, r6, #25
   37fbe:	d5fb      	bpl.n	37fb8 <_printf_i+0x1d8>
   37fc0:	8019      	strh	r1, [r3, #0]
   37fc2:	2300      	movs	r3, #0
   37fc4:	4616      	mov	r6, r2
   37fc6:	6123      	str	r3, [r4, #16]
   37fc8:	e795      	b.n	37ef6 <_printf_i+0x116>
   37fca:	682b      	ldr	r3, [r5, #0]
   37fcc:	2100      	movs	r1, #0
   37fce:	1d1a      	adds	r2, r3, #4
   37fd0:	602a      	str	r2, [r5, #0]
   37fd2:	681e      	ldr	r6, [r3, #0]
   37fd4:	6862      	ldr	r2, [r4, #4]
   37fd6:	4630      	mov	r0, r6
   37fd8:	f005 fb2a 	bl	3d630 <memchr>
   37fdc:	b108      	cbz	r0, 37fe2 <_printf_i+0x202>
   37fde:	1b80      	subs	r0, r0, r6
   37fe0:	6060      	str	r0, [r4, #4]
   37fe2:	6863      	ldr	r3, [r4, #4]
   37fe4:	6123      	str	r3, [r4, #16]
   37fe6:	2300      	movs	r3, #0
   37fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   37fec:	e783      	b.n	37ef6 <_printf_i+0x116>
   37fee:	6923      	ldr	r3, [r4, #16]
   37ff0:	4632      	mov	r2, r6
   37ff2:	4649      	mov	r1, r9
   37ff4:	4640      	mov	r0, r8
   37ff6:	47d0      	blx	sl
   37ff8:	3001      	adds	r0, #1
   37ffa:	d086      	beq.n	37f0a <_printf_i+0x12a>
   37ffc:	6823      	ldr	r3, [r4, #0]
   37ffe:	079b      	lsls	r3, r3, #30
   38000:	d414      	bmi.n	3802c <_printf_i+0x24c>
   38002:	68e0      	ldr	r0, [r4, #12]
   38004:	9b03      	ldr	r3, [sp, #12]
   38006:	4298      	cmp	r0, r3
   38008:	bfb8      	it	lt
   3800a:	4618      	movlt	r0, r3
   3800c:	e77f      	b.n	37f0e <_printf_i+0x12e>
   3800e:	2301      	movs	r3, #1
   38010:	4632      	mov	r2, r6
   38012:	4649      	mov	r1, r9
   38014:	4640      	mov	r0, r8
   38016:	47d0      	blx	sl
   38018:	3001      	adds	r0, #1
   3801a:	f43f af76 	beq.w	37f0a <_printf_i+0x12a>
   3801e:	3501      	adds	r5, #1
   38020:	68e3      	ldr	r3, [r4, #12]
   38022:	9903      	ldr	r1, [sp, #12]
   38024:	1a5b      	subs	r3, r3, r1
   38026:	42ab      	cmp	r3, r5
   38028:	dcf1      	bgt.n	3800e <_printf_i+0x22e>
   3802a:	e7ea      	b.n	38002 <_printf_i+0x222>
   3802c:	2500      	movs	r5, #0
   3802e:	f104 0619 	add.w	r6, r4, #25
   38032:	e7f5      	b.n	38020 <_printf_i+0x240>
   38034:	000432f3 	.word	0x000432f3
   38038:	00043304 	.word	0x00043304

0003803c <_sbrk_r>:
   3803c:	b538      	push	{r3, r4, r5, lr}
   3803e:	2300      	movs	r3, #0
   38040:	4d05      	ldr	r5, [pc, #20]	; (38058 <_sbrk_r+0x1c>)
   38042:	4604      	mov	r4, r0
   38044:	4608      	mov	r0, r1
   38046:	602b      	str	r3, [r5, #0]
   38048:	f7ee fade 	bl	26608 <_sbrk>
   3804c:	1c43      	adds	r3, r0, #1
   3804e:	d102      	bne.n	38056 <_sbrk_r+0x1a>
   38050:	682b      	ldr	r3, [r5, #0]
   38052:	b103      	cbz	r3, 38056 <_sbrk_r+0x1a>
   38054:	6023      	str	r3, [r4, #0]
   38056:	bd38      	pop	{r3, r4, r5, pc}
   38058:	20017fc8 	.word	0x20017fc8

0003805c <sniprintf>:
   3805c:	b40c      	push	{r2, r3}
   3805e:	4b18      	ldr	r3, [pc, #96]	; (380c0 <sniprintf+0x64>)
   38060:	b530      	push	{r4, r5, lr}
   38062:	1e0c      	subs	r4, r1, #0
   38064:	b09d      	sub	sp, #116	; 0x74
   38066:	681d      	ldr	r5, [r3, #0]
   38068:	da08      	bge.n	3807c <sniprintf+0x20>
   3806a:	238b      	movs	r3, #139	; 0x8b
   3806c:	f04f 30ff 	mov.w	r0, #4294967295
   38070:	602b      	str	r3, [r5, #0]
   38072:	b01d      	add	sp, #116	; 0x74
   38074:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   38078:	b002      	add	sp, #8
   3807a:	4770      	bx	lr
   3807c:	f44f 7302 	mov.w	r3, #520	; 0x208
   38080:	9002      	str	r0, [sp, #8]
   38082:	9006      	str	r0, [sp, #24]
   38084:	a902      	add	r1, sp, #8
   38086:	f8ad 3014 	strh.w	r3, [sp, #20]
   3808a:	bf14      	ite	ne
   3808c:	f104 33ff 	addne.w	r3, r4, #4294967295
   38090:	4623      	moveq	r3, r4
   38092:	9a20      	ldr	r2, [sp, #128]	; 0x80
   38094:	4628      	mov	r0, r5
   38096:	9304      	str	r3, [sp, #16]
   38098:	9307      	str	r3, [sp, #28]
   3809a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3809e:	f8ad 3016 	strh.w	r3, [sp, #22]
   380a2:	ab21      	add	r3, sp, #132	; 0x84
   380a4:	9301      	str	r3, [sp, #4]
   380a6:	f000 fecb 	bl	38e40 <_svfiprintf_r>
   380aa:	1c43      	adds	r3, r0, #1
   380ac:	bfbc      	itt	lt
   380ae:	238b      	movlt	r3, #139	; 0x8b
   380b0:	602b      	strlt	r3, [r5, #0]
   380b2:	2c00      	cmp	r4, #0
   380b4:	d0dd      	beq.n	38072 <sniprintf+0x16>
   380b6:	9b02      	ldr	r3, [sp, #8]
   380b8:	2200      	movs	r2, #0
   380ba:	701a      	strb	r2, [r3, #0]
   380bc:	e7d9      	b.n	38072 <sniprintf+0x16>
   380be:	bf00      	nop
   380c0:	200147a4 	.word	0x200147a4

000380c4 <_strtol_l.constprop.0>:
   380c4:	2b24      	cmp	r3, #36	; 0x24
   380c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   380ca:	4686      	mov	lr, r0
   380cc:	4690      	mov	r8, r2
   380ce:	d801      	bhi.n	380d4 <_strtol_l.constprop.0+0x10>
   380d0:	2b01      	cmp	r3, #1
   380d2:	d106      	bne.n	380e2 <_strtol_l.constprop.0+0x1e>
   380d4:	f001 ffe9 	bl	3a0aa <__errno>
   380d8:	2316      	movs	r3, #22
   380da:	6003      	str	r3, [r0, #0]
   380dc:	2000      	movs	r0, #0
   380de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   380e2:	460d      	mov	r5, r1
   380e4:	4835      	ldr	r0, [pc, #212]	; (381bc <_strtol_l.constprop.0+0xf8>)
   380e6:	462a      	mov	r2, r5
   380e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   380ec:	5d06      	ldrb	r6, [r0, r4]
   380ee:	f016 0608 	ands.w	r6, r6, #8
   380f2:	d1f8      	bne.n	380e6 <_strtol_l.constprop.0+0x22>
   380f4:	2c2d      	cmp	r4, #45	; 0x2d
   380f6:	d124      	bne.n	38142 <_strtol_l.constprop.0+0x7e>
   380f8:	782c      	ldrb	r4, [r5, #0]
   380fa:	2601      	movs	r6, #1
   380fc:	1c95      	adds	r5, r2, #2
   380fe:	bb2b      	cbnz	r3, 3814c <_strtol_l.constprop.0+0x88>
   38100:	2c30      	cmp	r4, #48	; 0x30
   38102:	d030      	beq.n	38166 <_strtol_l.constprop.0+0xa2>
   38104:	230a      	movs	r3, #10
   38106:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   3810a:	2200      	movs	r2, #0
   3810c:	f10c 3cff 	add.w	ip, ip, #4294967295
   38110:	4610      	mov	r0, r2
   38112:	fbbc f9f3 	udiv	r9, ip, r3
   38116:	fb03 ca19 	mls	sl, r3, r9, ip
   3811a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   3811e:	2f09      	cmp	r7, #9
   38120:	d828      	bhi.n	38174 <_strtol_l.constprop.0+0xb0>
   38122:	463c      	mov	r4, r7
   38124:	42a3      	cmp	r3, r4
   38126:	dd34      	ble.n	38192 <_strtol_l.constprop.0+0xce>
   38128:	1c57      	adds	r7, r2, #1
   3812a:	d007      	beq.n	3813c <_strtol_l.constprop.0+0x78>
   3812c:	4581      	cmp	r9, r0
   3812e:	d32d      	bcc.n	3818c <_strtol_l.constprop.0+0xc8>
   38130:	d101      	bne.n	38136 <_strtol_l.constprop.0+0x72>
   38132:	45a2      	cmp	sl, r4
   38134:	db2a      	blt.n	3818c <_strtol_l.constprop.0+0xc8>
   38136:	fb00 4003 	mla	r0, r0, r3, r4
   3813a:	2201      	movs	r2, #1
   3813c:	f815 4b01 	ldrb.w	r4, [r5], #1
   38140:	e7eb      	b.n	3811a <_strtol_l.constprop.0+0x56>
   38142:	2c2b      	cmp	r4, #43	; 0x2b
   38144:	bf04      	itt	eq
   38146:	782c      	ldrbeq	r4, [r5, #0]
   38148:	1c95      	addeq	r5, r2, #2
   3814a:	e7d8      	b.n	380fe <_strtol_l.constprop.0+0x3a>
   3814c:	2b10      	cmp	r3, #16
   3814e:	d1da      	bne.n	38106 <_strtol_l.constprop.0+0x42>
   38150:	2c30      	cmp	r4, #48	; 0x30
   38152:	d1d8      	bne.n	38106 <_strtol_l.constprop.0+0x42>
   38154:	782a      	ldrb	r2, [r5, #0]
   38156:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   3815a:	2a58      	cmp	r2, #88	; 0x58
   3815c:	d1d3      	bne.n	38106 <_strtol_l.constprop.0+0x42>
   3815e:	786c      	ldrb	r4, [r5, #1]
   38160:	2310      	movs	r3, #16
   38162:	3502      	adds	r5, #2
   38164:	e7cf      	b.n	38106 <_strtol_l.constprop.0+0x42>
   38166:	782b      	ldrb	r3, [r5, #0]
   38168:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3816c:	2b58      	cmp	r3, #88	; 0x58
   3816e:	d0f6      	beq.n	3815e <_strtol_l.constprop.0+0x9a>
   38170:	2308      	movs	r3, #8
   38172:	e7c8      	b.n	38106 <_strtol_l.constprop.0+0x42>
   38174:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   38178:	2f19      	cmp	r7, #25
   3817a:	d801      	bhi.n	38180 <_strtol_l.constprop.0+0xbc>
   3817c:	3c37      	subs	r4, #55	; 0x37
   3817e:	e7d1      	b.n	38124 <_strtol_l.constprop.0+0x60>
   38180:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   38184:	2f19      	cmp	r7, #25
   38186:	d804      	bhi.n	38192 <_strtol_l.constprop.0+0xce>
   38188:	3c57      	subs	r4, #87	; 0x57
   3818a:	e7cb      	b.n	38124 <_strtol_l.constprop.0+0x60>
   3818c:	f04f 32ff 	mov.w	r2, #4294967295
   38190:	e7d4      	b.n	3813c <_strtol_l.constprop.0+0x78>
   38192:	1c53      	adds	r3, r2, #1
   38194:	d108      	bne.n	381a8 <_strtol_l.constprop.0+0xe4>
   38196:	2322      	movs	r3, #34	; 0x22
   38198:	4660      	mov	r0, ip
   3819a:	f8ce 3000 	str.w	r3, [lr]
   3819e:	f1b8 0f00 	cmp.w	r8, #0
   381a2:	d09c      	beq.n	380de <_strtol_l.constprop.0+0x1a>
   381a4:	1e69      	subs	r1, r5, #1
   381a6:	e006      	b.n	381b6 <_strtol_l.constprop.0+0xf2>
   381a8:	b106      	cbz	r6, 381ac <_strtol_l.constprop.0+0xe8>
   381aa:	4240      	negs	r0, r0
   381ac:	f1b8 0f00 	cmp.w	r8, #0
   381b0:	d095      	beq.n	380de <_strtol_l.constprop.0+0x1a>
   381b2:	2a00      	cmp	r2, #0
   381b4:	d1f6      	bne.n	381a4 <_strtol_l.constprop.0+0xe0>
   381b6:	f8c8 1000 	str.w	r1, [r8]
   381ba:	e790      	b.n	380de <_strtol_l.constprop.0+0x1a>
   381bc:	000431d6 	.word	0x000431d6

000381c0 <strtol>:
   381c0:	4613      	mov	r3, r2
   381c2:	460a      	mov	r2, r1
   381c4:	4601      	mov	r1, r0
   381c6:	4802      	ldr	r0, [pc, #8]	; (381d0 <strtol+0x10>)
   381c8:	6800      	ldr	r0, [r0, #0]
   381ca:	f7ff bf7b 	b.w	380c4 <_strtol_l.constprop.0>
   381ce:	bf00      	nop
   381d0:	200147a4 	.word	0x200147a4

000381d4 <_strtoll_l.constprop.0>:
   381d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   381d8:	4690      	mov	r8, r2
   381da:	b085      	sub	sp, #20
   381dc:	4689      	mov	r9, r1
   381de:	461e      	mov	r6, r3
   381e0:	460d      	mov	r5, r1
   381e2:	4a45      	ldr	r2, [pc, #276]	; (382f8 <_strtoll_l.constprop.0+0x124>)
   381e4:	9002      	str	r0, [sp, #8]
   381e6:	462b      	mov	r3, r5
   381e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   381ec:	5d17      	ldrb	r7, [r2, r4]
   381ee:	f017 0708 	ands.w	r7, r7, #8
   381f2:	d1f8      	bne.n	381e6 <_strtoll_l.constprop.0+0x12>
   381f4:	2c2d      	cmp	r4, #45	; 0x2d
   381f6:	d141      	bne.n	3827c <_strtoll_l.constprop.0+0xa8>
   381f8:	782c      	ldrb	r4, [r5, #0]
   381fa:	2701      	movs	r7, #1
   381fc:	1c9d      	adds	r5, r3, #2
   381fe:	2e00      	cmp	r6, #0
   38200:	d141      	bne.n	38286 <_strtoll_l.constprop.0+0xb2>
   38202:	2c30      	cmp	r4, #48	; 0x30
   38204:	d04c      	beq.n	382a0 <_strtoll_l.constprop.0+0xcc>
   38206:	260a      	movs	r6, #10
   38208:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   3820c:	f107 3bff 	add.w	fp, r7, #4294967295
   38210:	17f3      	asrs	r3, r6, #31
   38212:	4632      	mov	r2, r6
   38214:	f10a 3aff 	add.w	sl, sl, #4294967295
   38218:	4658      	mov	r0, fp
   3821a:	9303      	str	r3, [sp, #12]
   3821c:	4651      	mov	r1, sl
   3821e:	f7e8 ffdb 	bl	211d8 <__aeabi_uldivmod>
   38222:	9201      	str	r2, [sp, #4]
   38224:	2200      	movs	r2, #0
   38226:	468e      	mov	lr, r1
   38228:	4684      	mov	ip, r0
   3822a:	4611      	mov	r1, r2
   3822c:	4610      	mov	r0, r2
   3822e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   38232:	2b09      	cmp	r3, #9
   38234:	d905      	bls.n	38242 <_strtoll_l.constprop.0+0x6e>
   38236:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   3823a:	2b19      	cmp	r3, #25
   3823c:	d837      	bhi.n	382ae <_strtoll_l.constprop.0+0xda>
   3823e:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   38242:	429e      	cmp	r6, r3
   38244:	dd3d      	ble.n	382c2 <_strtoll_l.constprop.0+0xee>
   38246:	1c54      	adds	r4, r2, #1
   38248:	d015      	beq.n	38276 <_strtoll_l.constprop.0+0xa2>
   3824a:	4584      	cmp	ip, r0
   3824c:	eb7e 0201 	sbcs.w	r2, lr, r1
   38250:	d334      	bcc.n	382bc <_strtoll_l.constprop.0+0xe8>
   38252:	458e      	cmp	lr, r1
   38254:	bf08      	it	eq
   38256:	4584      	cmpeq	ip, r0
   38258:	d102      	bne.n	38260 <_strtoll_l.constprop.0+0x8c>
   3825a:	9a01      	ldr	r2, [sp, #4]
   3825c:	429a      	cmp	r2, r3
   3825e:	db2d      	blt.n	382bc <_strtoll_l.constprop.0+0xe8>
   38260:	9a03      	ldr	r2, [sp, #12]
   38262:	4371      	muls	r1, r6
   38264:	fb00 1102 	mla	r1, r0, r2, r1
   38268:	fba6 0200 	umull	r0, r2, r6, r0
   3826c:	440a      	add	r2, r1
   3826e:	1818      	adds	r0, r3, r0
   38270:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
   38274:	2201      	movs	r2, #1
   38276:	f815 4b01 	ldrb.w	r4, [r5], #1
   3827a:	e7d8      	b.n	3822e <_strtoll_l.constprop.0+0x5a>
   3827c:	2c2b      	cmp	r4, #43	; 0x2b
   3827e:	bf04      	itt	eq
   38280:	782c      	ldrbeq	r4, [r5, #0]
   38282:	1c9d      	addeq	r5, r3, #2
   38284:	e7bb      	b.n	381fe <_strtoll_l.constprop.0+0x2a>
   38286:	2e10      	cmp	r6, #16
   38288:	d1be      	bne.n	38208 <_strtoll_l.constprop.0+0x34>
   3828a:	2c30      	cmp	r4, #48	; 0x30
   3828c:	d1bc      	bne.n	38208 <_strtoll_l.constprop.0+0x34>
   3828e:	782b      	ldrb	r3, [r5, #0]
   38290:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   38294:	2b58      	cmp	r3, #88	; 0x58
   38296:	d1b7      	bne.n	38208 <_strtoll_l.constprop.0+0x34>
   38298:	786c      	ldrb	r4, [r5, #1]
   3829a:	2610      	movs	r6, #16
   3829c:	3502      	adds	r5, #2
   3829e:	e7b3      	b.n	38208 <_strtoll_l.constprop.0+0x34>
   382a0:	782b      	ldrb	r3, [r5, #0]
   382a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   382a6:	2b58      	cmp	r3, #88	; 0x58
   382a8:	d0f6      	beq.n	38298 <_strtoll_l.constprop.0+0xc4>
   382aa:	2608      	movs	r6, #8
   382ac:	e7ac      	b.n	38208 <_strtoll_l.constprop.0+0x34>
   382ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   382b2:	2b19      	cmp	r3, #25
   382b4:	d805      	bhi.n	382c2 <_strtoll_l.constprop.0+0xee>
   382b6:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   382ba:	e7c2      	b.n	38242 <_strtoll_l.constprop.0+0x6e>
   382bc:	f04f 32ff 	mov.w	r2, #4294967295
   382c0:	e7d9      	b.n	38276 <_strtoll_l.constprop.0+0xa2>
   382c2:	1c53      	adds	r3, r2, #1
   382c4:	d10a      	bne.n	382dc <_strtoll_l.constprop.0+0x108>
   382c6:	2322      	movs	r3, #34	; 0x22
   382c8:	9a02      	ldr	r2, [sp, #8]
   382ca:	4658      	mov	r0, fp
   382cc:	4651      	mov	r1, sl
   382ce:	6013      	str	r3, [r2, #0]
   382d0:	f1b8 0f00 	cmp.w	r8, #0
   382d4:	d10a      	bne.n	382ec <_strtoll_l.constprop.0+0x118>
   382d6:	b005      	add	sp, #20
   382d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   382dc:	b117      	cbz	r7, 382e4 <_strtoll_l.constprop.0+0x110>
   382de:	4240      	negs	r0, r0
   382e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   382e4:	f1b8 0f00 	cmp.w	r8, #0
   382e8:	d0f5      	beq.n	382d6 <_strtoll_l.constprop.0+0x102>
   382ea:	b10a      	cbz	r2, 382f0 <_strtoll_l.constprop.0+0x11c>
   382ec:	f105 39ff 	add.w	r9, r5, #4294967295
   382f0:	f8c8 9000 	str.w	r9, [r8]
   382f4:	e7ef      	b.n	382d6 <_strtoll_l.constprop.0+0x102>
   382f6:	bf00      	nop
   382f8:	000431d6 	.word	0x000431d6

000382fc <strtoll>:
   382fc:	4613      	mov	r3, r2
   382fe:	460a      	mov	r2, r1
   38300:	4601      	mov	r1, r0
   38302:	4802      	ldr	r0, [pc, #8]	; (3830c <strtoll+0x10>)
   38304:	6800      	ldr	r0, [r0, #0]
   38306:	f7ff bf65 	b.w	381d4 <_strtoll_l.constprop.0>
   3830a:	bf00      	nop
   3830c:	200147a4 	.word	0x200147a4

00038310 <_strtoul_l.constprop.0>:
   38310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   38314:	4686      	mov	lr, r0
   38316:	460d      	mov	r5, r1
   38318:	4e35      	ldr	r6, [pc, #212]	; (383f0 <_strtoul_l.constprop.0+0xe0>)
   3831a:	4628      	mov	r0, r5
   3831c:	f815 4b01 	ldrb.w	r4, [r5], #1
   38320:	5d37      	ldrb	r7, [r6, r4]
   38322:	f017 0708 	ands.w	r7, r7, #8
   38326:	d1f8      	bne.n	3831a <_strtoul_l.constprop.0+0xa>
   38328:	2c2d      	cmp	r4, #45	; 0x2d
   3832a:	d126      	bne.n	3837a <_strtoul_l.constprop.0+0x6a>
   3832c:	782c      	ldrb	r4, [r5, #0]
   3832e:	2701      	movs	r7, #1
   38330:	1c85      	adds	r5, r0, #2
   38332:	bb3b      	cbnz	r3, 38384 <_strtoul_l.constprop.0+0x74>
   38334:	2c30      	cmp	r4, #48	; 0x30
   38336:	d032      	beq.n	3839e <_strtoul_l.constprop.0+0x8e>
   38338:	230a      	movs	r3, #10
   3833a:	f04f 38ff 	mov.w	r8, #4294967295
   3833e:	2600      	movs	r6, #0
   38340:	fbb8 f8f3 	udiv	r8, r8, r3
   38344:	fb03 f908 	mul.w	r9, r3, r8
   38348:	4630      	mov	r0, r6
   3834a:	ea6f 0909 	mvn.w	r9, r9
   3834e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   38352:	f1bc 0f09 	cmp.w	ip, #9
   38356:	d829      	bhi.n	383ac <_strtoul_l.constprop.0+0x9c>
   38358:	4664      	mov	r4, ip
   3835a:	42a3      	cmp	r3, r4
   3835c:	dd37      	ble.n	383ce <_strtoul_l.constprop.0+0xbe>
   3835e:	f1b6 3fff 	cmp.w	r6, #4294967295
   38362:	d007      	beq.n	38374 <_strtoul_l.constprop.0+0x64>
   38364:	4580      	cmp	r8, r0
   38366:	d32f      	bcc.n	383c8 <_strtoul_l.constprop.0+0xb8>
   38368:	d101      	bne.n	3836e <_strtoul_l.constprop.0+0x5e>
   3836a:	45a1      	cmp	r9, r4
   3836c:	db2c      	blt.n	383c8 <_strtoul_l.constprop.0+0xb8>
   3836e:	fb00 4003 	mla	r0, r0, r3, r4
   38372:	2601      	movs	r6, #1
   38374:	f815 4b01 	ldrb.w	r4, [r5], #1
   38378:	e7e9      	b.n	3834e <_strtoul_l.constprop.0+0x3e>
   3837a:	2c2b      	cmp	r4, #43	; 0x2b
   3837c:	bf04      	itt	eq
   3837e:	782c      	ldrbeq	r4, [r5, #0]
   38380:	1c85      	addeq	r5, r0, #2
   38382:	e7d6      	b.n	38332 <_strtoul_l.constprop.0+0x22>
   38384:	2b10      	cmp	r3, #16
   38386:	d1d8      	bne.n	3833a <_strtoul_l.constprop.0+0x2a>
   38388:	2c30      	cmp	r4, #48	; 0x30
   3838a:	d1d6      	bne.n	3833a <_strtoul_l.constprop.0+0x2a>
   3838c:	7828      	ldrb	r0, [r5, #0]
   3838e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   38392:	2858      	cmp	r0, #88	; 0x58
   38394:	d1d1      	bne.n	3833a <_strtoul_l.constprop.0+0x2a>
   38396:	786c      	ldrb	r4, [r5, #1]
   38398:	2310      	movs	r3, #16
   3839a:	3502      	adds	r5, #2
   3839c:	e7cd      	b.n	3833a <_strtoul_l.constprop.0+0x2a>
   3839e:	782b      	ldrb	r3, [r5, #0]
   383a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   383a4:	2b58      	cmp	r3, #88	; 0x58
   383a6:	d0f6      	beq.n	38396 <_strtoul_l.constprop.0+0x86>
   383a8:	2308      	movs	r3, #8
   383aa:	e7c6      	b.n	3833a <_strtoul_l.constprop.0+0x2a>
   383ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   383b0:	f1bc 0f19 	cmp.w	ip, #25
   383b4:	d801      	bhi.n	383ba <_strtoul_l.constprop.0+0xaa>
   383b6:	3c37      	subs	r4, #55	; 0x37
   383b8:	e7cf      	b.n	3835a <_strtoul_l.constprop.0+0x4a>
   383ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   383be:	f1bc 0f19 	cmp.w	ip, #25
   383c2:	d804      	bhi.n	383ce <_strtoul_l.constprop.0+0xbe>
   383c4:	3c57      	subs	r4, #87	; 0x57
   383c6:	e7c8      	b.n	3835a <_strtoul_l.constprop.0+0x4a>
   383c8:	f04f 36ff 	mov.w	r6, #4294967295
   383cc:	e7d2      	b.n	38374 <_strtoul_l.constprop.0+0x64>
   383ce:	1c73      	adds	r3, r6, #1
   383d0:	d106      	bne.n	383e0 <_strtoul_l.constprop.0+0xd0>
   383d2:	2322      	movs	r3, #34	; 0x22
   383d4:	4630      	mov	r0, r6
   383d6:	f8ce 3000 	str.w	r3, [lr]
   383da:	b932      	cbnz	r2, 383ea <_strtoul_l.constprop.0+0xda>
   383dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   383e0:	b107      	cbz	r7, 383e4 <_strtoul_l.constprop.0+0xd4>
   383e2:	4240      	negs	r0, r0
   383e4:	2a00      	cmp	r2, #0
   383e6:	d0f9      	beq.n	383dc <_strtoul_l.constprop.0+0xcc>
   383e8:	b106      	cbz	r6, 383ec <_strtoul_l.constprop.0+0xdc>
   383ea:	1e69      	subs	r1, r5, #1
   383ec:	6011      	str	r1, [r2, #0]
   383ee:	e7f5      	b.n	383dc <_strtoul_l.constprop.0+0xcc>
   383f0:	000431d6 	.word	0x000431d6

000383f4 <strtoul>:
   383f4:	4613      	mov	r3, r2
   383f6:	460a      	mov	r2, r1
   383f8:	4601      	mov	r1, r0
   383fa:	4802      	ldr	r0, [pc, #8]	; (38404 <strtoul+0x10>)
   383fc:	6800      	ldr	r0, [r0, #0]
   383fe:	f7ff bf87 	b.w	38310 <_strtoul_l.constprop.0>
   38402:	bf00      	nop
   38404:	200147a4 	.word	0x200147a4

00038408 <__swbuf_r>:
   38408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3840a:	460e      	mov	r6, r1
   3840c:	4614      	mov	r4, r2
   3840e:	4605      	mov	r5, r0
   38410:	b118      	cbz	r0, 3841a <__swbuf_r+0x12>
   38412:	6983      	ldr	r3, [r0, #24]
   38414:	b90b      	cbnz	r3, 3841a <__swbuf_r+0x12>
   38416:	f000 f933 	bl	38680 <__sinit>
   3841a:	4b21      	ldr	r3, [pc, #132]	; (384a0 <__swbuf_r+0x98>)
   3841c:	429c      	cmp	r4, r3
   3841e:	d110      	bne.n	38442 <__swbuf_r+0x3a>
   38420:	686c      	ldr	r4, [r5, #4]
   38422:	69a3      	ldr	r3, [r4, #24]
   38424:	60a3      	str	r3, [r4, #8]
   38426:	89a3      	ldrh	r3, [r4, #12]
   38428:	071a      	lsls	r2, r3, #28
   3842a:	d501      	bpl.n	38430 <__swbuf_r+0x28>
   3842c:	6923      	ldr	r3, [r4, #16]
   3842e:	b993      	cbnz	r3, 38456 <__swbuf_r+0x4e>
   38430:	4621      	mov	r1, r4
   38432:	4628      	mov	r0, r5
   38434:	f000 f83a 	bl	384ac <__swsetup_r>
   38438:	b168      	cbz	r0, 38456 <__swbuf_r+0x4e>
   3843a:	f04f 37ff 	mov.w	r7, #4294967295
   3843e:	4638      	mov	r0, r7
   38440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38442:	4b18      	ldr	r3, [pc, #96]	; (384a4 <__swbuf_r+0x9c>)
   38444:	429c      	cmp	r4, r3
   38446:	d101      	bne.n	3844c <__swbuf_r+0x44>
   38448:	68ac      	ldr	r4, [r5, #8]
   3844a:	e7ea      	b.n	38422 <__swbuf_r+0x1a>
   3844c:	4b16      	ldr	r3, [pc, #88]	; (384a8 <__swbuf_r+0xa0>)
   3844e:	429c      	cmp	r4, r3
   38450:	bf08      	it	eq
   38452:	68ec      	ldreq	r4, [r5, #12]
   38454:	e7e5      	b.n	38422 <__swbuf_r+0x1a>
   38456:	6923      	ldr	r3, [r4, #16]
   38458:	b2f6      	uxtb	r6, r6
   3845a:	6820      	ldr	r0, [r4, #0]
   3845c:	4637      	mov	r7, r6
   3845e:	1ac0      	subs	r0, r0, r3
   38460:	6963      	ldr	r3, [r4, #20]
   38462:	4283      	cmp	r3, r0
   38464:	dc05      	bgt.n	38472 <__swbuf_r+0x6a>
   38466:	4621      	mov	r1, r4
   38468:	4628      	mov	r0, r5
   3846a:	f000 f88b 	bl	38584 <_fflush_r>
   3846e:	2800      	cmp	r0, #0
   38470:	d1e3      	bne.n	3843a <__swbuf_r+0x32>
   38472:	68a3      	ldr	r3, [r4, #8]
   38474:	3001      	adds	r0, #1
   38476:	3b01      	subs	r3, #1
   38478:	60a3      	str	r3, [r4, #8]
   3847a:	6823      	ldr	r3, [r4, #0]
   3847c:	1c5a      	adds	r2, r3, #1
   3847e:	6022      	str	r2, [r4, #0]
   38480:	701e      	strb	r6, [r3, #0]
   38482:	6963      	ldr	r3, [r4, #20]
   38484:	4283      	cmp	r3, r0
   38486:	d004      	beq.n	38492 <__swbuf_r+0x8a>
   38488:	89a3      	ldrh	r3, [r4, #12]
   3848a:	07db      	lsls	r3, r3, #31
   3848c:	d5d7      	bpl.n	3843e <__swbuf_r+0x36>
   3848e:	2e0a      	cmp	r6, #10
   38490:	d1d5      	bne.n	3843e <__swbuf_r+0x36>
   38492:	4621      	mov	r1, r4
   38494:	4628      	mov	r0, r5
   38496:	f000 f875 	bl	38584 <_fflush_r>
   3849a:	2800      	cmp	r0, #0
   3849c:	d0cf      	beq.n	3843e <__swbuf_r+0x36>
   3849e:	e7cc      	b.n	3843a <__swbuf_r+0x32>
   384a0:	0003ede8 	.word	0x0003ede8
   384a4:	0003edc8 	.word	0x0003edc8
   384a8:	0003eda8 	.word	0x0003eda8

000384ac <__swsetup_r>:
   384ac:	4b31      	ldr	r3, [pc, #196]	; (38574 <__swsetup_r+0xc8>)
   384ae:	b570      	push	{r4, r5, r6, lr}
   384b0:	681d      	ldr	r5, [r3, #0]
   384b2:	4606      	mov	r6, r0
   384b4:	460c      	mov	r4, r1
   384b6:	b125      	cbz	r5, 384c2 <__swsetup_r+0x16>
   384b8:	69ab      	ldr	r3, [r5, #24]
   384ba:	b913      	cbnz	r3, 384c2 <__swsetup_r+0x16>
   384bc:	4628      	mov	r0, r5
   384be:	f000 f8df 	bl	38680 <__sinit>
   384c2:	4b2d      	ldr	r3, [pc, #180]	; (38578 <__swsetup_r+0xcc>)
   384c4:	429c      	cmp	r4, r3
   384c6:	d10e      	bne.n	384e6 <__swsetup_r+0x3a>
   384c8:	686c      	ldr	r4, [r5, #4]
   384ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   384ce:	071a      	lsls	r2, r3, #28
   384d0:	d42c      	bmi.n	3852c <__swsetup_r+0x80>
   384d2:	06dd      	lsls	r5, r3, #27
   384d4:	d411      	bmi.n	384fa <__swsetup_r+0x4e>
   384d6:	2209      	movs	r2, #9
   384d8:	6032      	str	r2, [r6, #0]
   384da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   384de:	f04f 30ff 	mov.w	r0, #4294967295
   384e2:	81a3      	strh	r3, [r4, #12]
   384e4:	e03d      	b.n	38562 <__swsetup_r+0xb6>
   384e6:	4b25      	ldr	r3, [pc, #148]	; (3857c <__swsetup_r+0xd0>)
   384e8:	429c      	cmp	r4, r3
   384ea:	d101      	bne.n	384f0 <__swsetup_r+0x44>
   384ec:	68ac      	ldr	r4, [r5, #8]
   384ee:	e7ec      	b.n	384ca <__swsetup_r+0x1e>
   384f0:	4b23      	ldr	r3, [pc, #140]	; (38580 <__swsetup_r+0xd4>)
   384f2:	429c      	cmp	r4, r3
   384f4:	bf08      	it	eq
   384f6:	68ec      	ldreq	r4, [r5, #12]
   384f8:	e7e7      	b.n	384ca <__swsetup_r+0x1e>
   384fa:	0758      	lsls	r0, r3, #29
   384fc:	d512      	bpl.n	38524 <__swsetup_r+0x78>
   384fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
   38500:	b141      	cbz	r1, 38514 <__swsetup_r+0x68>
   38502:	f104 0344 	add.w	r3, r4, #68	; 0x44
   38506:	4299      	cmp	r1, r3
   38508:	d002      	beq.n	38510 <__swsetup_r+0x64>
   3850a:	4630      	mov	r0, r6
   3850c:	f7ff f862 	bl	375d4 <_free_r>
   38510:	2300      	movs	r3, #0
   38512:	6363      	str	r3, [r4, #52]	; 0x34
   38514:	89a3      	ldrh	r3, [r4, #12]
   38516:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3851a:	81a3      	strh	r3, [r4, #12]
   3851c:	2300      	movs	r3, #0
   3851e:	6063      	str	r3, [r4, #4]
   38520:	6923      	ldr	r3, [r4, #16]
   38522:	6023      	str	r3, [r4, #0]
   38524:	89a3      	ldrh	r3, [r4, #12]
   38526:	f043 0308 	orr.w	r3, r3, #8
   3852a:	81a3      	strh	r3, [r4, #12]
   3852c:	6923      	ldr	r3, [r4, #16]
   3852e:	b94b      	cbnz	r3, 38544 <__swsetup_r+0x98>
   38530:	89a3      	ldrh	r3, [r4, #12]
   38532:	f403 7320 	and.w	r3, r3, #640	; 0x280
   38536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3853a:	d003      	beq.n	38544 <__swsetup_r+0x98>
   3853c:	4621      	mov	r1, r4
   3853e:	4630      	mov	r0, r6
   38540:	f000 f920 	bl	38784 <__smakebuf_r>
   38544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   38548:	f013 0201 	ands.w	r2, r3, #1
   3854c:	d00a      	beq.n	38564 <__swsetup_r+0xb8>
   3854e:	2200      	movs	r2, #0
   38550:	60a2      	str	r2, [r4, #8]
   38552:	6962      	ldr	r2, [r4, #20]
   38554:	4252      	negs	r2, r2
   38556:	61a2      	str	r2, [r4, #24]
   38558:	6922      	ldr	r2, [r4, #16]
   3855a:	b942      	cbnz	r2, 3856e <__swsetup_r+0xc2>
   3855c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   38560:	d1bb      	bne.n	384da <__swsetup_r+0x2e>
   38562:	bd70      	pop	{r4, r5, r6, pc}
   38564:	0799      	lsls	r1, r3, #30
   38566:	bf58      	it	pl
   38568:	6962      	ldrpl	r2, [r4, #20]
   3856a:	60a2      	str	r2, [r4, #8]
   3856c:	e7f4      	b.n	38558 <__swsetup_r+0xac>
   3856e:	2000      	movs	r0, #0
   38570:	e7f7      	b.n	38562 <__swsetup_r+0xb6>
   38572:	bf00      	nop
   38574:	200147a4 	.word	0x200147a4
   38578:	0003ede8 	.word	0x0003ede8
   3857c:	0003edc8 	.word	0x0003edc8
   38580:	0003eda8 	.word	0x0003eda8

00038584 <_fflush_r>:
   38584:	b538      	push	{r3, r4, r5, lr}
   38586:	690b      	ldr	r3, [r1, #16]
   38588:	4605      	mov	r5, r0
   3858a:	460c      	mov	r4, r1
   3858c:	b913      	cbnz	r3, 38594 <_fflush_r+0x10>
   3858e:	2500      	movs	r5, #0
   38590:	4628      	mov	r0, r5
   38592:	bd38      	pop	{r3, r4, r5, pc}
   38594:	b118      	cbz	r0, 3859e <_fflush_r+0x1a>
   38596:	6983      	ldr	r3, [r0, #24]
   38598:	b90b      	cbnz	r3, 3859e <_fflush_r+0x1a>
   3859a:	f000 f871 	bl	38680 <__sinit>
   3859e:	4b14      	ldr	r3, [pc, #80]	; (385f0 <_fflush_r+0x6c>)
   385a0:	429c      	cmp	r4, r3
   385a2:	d11b      	bne.n	385dc <_fflush_r+0x58>
   385a4:	686c      	ldr	r4, [r5, #4]
   385a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   385aa:	2b00      	cmp	r3, #0
   385ac:	d0ef      	beq.n	3858e <_fflush_r+0xa>
   385ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
   385b0:	07d0      	lsls	r0, r2, #31
   385b2:	d404      	bmi.n	385be <_fflush_r+0x3a>
   385b4:	0599      	lsls	r1, r3, #22
   385b6:	d402      	bmi.n	385be <_fflush_r+0x3a>
   385b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   385ba:	f005 fb63 	bl	3dc84 <__retarget_lock_acquire_recursive>
   385be:	4628      	mov	r0, r5
   385c0:	4621      	mov	r1, r4
   385c2:	f005 faaa 	bl	3db1a <__sflush_r>
   385c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   385c8:	4605      	mov	r5, r0
   385ca:	07da      	lsls	r2, r3, #31
   385cc:	d4e0      	bmi.n	38590 <_fflush_r+0xc>
   385ce:	89a3      	ldrh	r3, [r4, #12]
   385d0:	059b      	lsls	r3, r3, #22
   385d2:	d4dd      	bmi.n	38590 <_fflush_r+0xc>
   385d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   385d6:	f005 fb56 	bl	3dc86 <__retarget_lock_release_recursive>
   385da:	e7d9      	b.n	38590 <_fflush_r+0xc>
   385dc:	4b05      	ldr	r3, [pc, #20]	; (385f4 <_fflush_r+0x70>)
   385de:	429c      	cmp	r4, r3
   385e0:	d101      	bne.n	385e6 <_fflush_r+0x62>
   385e2:	68ac      	ldr	r4, [r5, #8]
   385e4:	e7df      	b.n	385a6 <_fflush_r+0x22>
   385e6:	4b04      	ldr	r3, [pc, #16]	; (385f8 <_fflush_r+0x74>)
   385e8:	429c      	cmp	r4, r3
   385ea:	bf08      	it	eq
   385ec:	68ec      	ldreq	r4, [r5, #12]
   385ee:	e7da      	b.n	385a6 <_fflush_r+0x22>
   385f0:	0003ede8 	.word	0x0003ede8
   385f4:	0003edc8 	.word	0x0003edc8
   385f8:	0003eda8 	.word	0x0003eda8

000385fc <std>:
   385fc:	2300      	movs	r3, #0
   385fe:	b510      	push	{r4, lr}
   38600:	4604      	mov	r4, r0
   38602:	6083      	str	r3, [r0, #8]
   38604:	8181      	strh	r1, [r0, #12]
   38606:	4619      	mov	r1, r3
   38608:	6643      	str	r3, [r0, #100]	; 0x64
   3860a:	81c2      	strh	r2, [r0, #14]
   3860c:	2208      	movs	r2, #8
   3860e:	6183      	str	r3, [r0, #24]
   38610:	e9c0 3300 	strd	r3, r3, [r0]
   38614:	e9c0 3304 	strd	r3, r3, [r0, #16]
   38618:	305c      	adds	r0, #92	; 0x5c
   3861a:	f005 f834 	bl	3d686 <memset>
   3861e:	4b05      	ldr	r3, [pc, #20]	; (38634 <std+0x38>)
   38620:	6224      	str	r4, [r4, #32]
   38622:	6263      	str	r3, [r4, #36]	; 0x24
   38624:	4b04      	ldr	r3, [pc, #16]	; (38638 <std+0x3c>)
   38626:	62a3      	str	r3, [r4, #40]	; 0x28
   38628:	4b04      	ldr	r3, [pc, #16]	; (3863c <std+0x40>)
   3862a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3862c:	4b04      	ldr	r3, [pc, #16]	; (38640 <std+0x44>)
   3862e:	6323      	str	r3, [r4, #48]	; 0x30
   38630:	bd10      	pop	{r4, pc}
   38632:	bf00      	nop
   38634:	0003df4b 	.word	0x0003df4b
   38638:	0003df6d 	.word	0x0003df6d
   3863c:	0003dfa5 	.word	0x0003dfa5
   38640:	0003dfc9 	.word	0x0003dfc9

00038644 <_cleanup_r>:
   38644:	4901      	ldr	r1, [pc, #4]	; (3864c <_cleanup_r+0x8>)
   38646:	f005 bafd 	b.w	3dc44 <_fwalk_reent>
   3864a:	bf00      	nop
   3864c:	00038585 	.word	0x00038585

00038650 <__sfp_lock_acquire>:
   38650:	4801      	ldr	r0, [pc, #4]	; (38658 <__sfp_lock_acquire+0x8>)
   38652:	f005 bb17 	b.w	3dc84 <__retarget_lock_acquire_recursive>
   38656:	bf00      	nop
   38658:	2001926c 	.word	0x2001926c

0003865c <__sfp_lock_release>:
   3865c:	4801      	ldr	r0, [pc, #4]	; (38664 <__sfp_lock_release+0x8>)
   3865e:	f005 bb12 	b.w	3dc86 <__retarget_lock_release_recursive>
   38662:	bf00      	nop
   38664:	2001926c 	.word	0x2001926c

00038668 <__sinit_lock_acquire>:
   38668:	4801      	ldr	r0, [pc, #4]	; (38670 <__sinit_lock_acquire+0x8>)
   3866a:	f005 bb0b 	b.w	3dc84 <__retarget_lock_acquire_recursive>
   3866e:	bf00      	nop
   38670:	2001926d 	.word	0x2001926d

00038674 <__sinit_lock_release>:
   38674:	4801      	ldr	r0, [pc, #4]	; (3867c <__sinit_lock_release+0x8>)
   38676:	f005 bb06 	b.w	3dc86 <__retarget_lock_release_recursive>
   3867a:	bf00      	nop
   3867c:	2001926d 	.word	0x2001926d

00038680 <__sinit>:
   38680:	b510      	push	{r4, lr}
   38682:	4604      	mov	r4, r0
   38684:	f7ff fff0 	bl	38668 <__sinit_lock_acquire>
   38688:	69a3      	ldr	r3, [r4, #24]
   3868a:	b11b      	cbz	r3, 38694 <__sinit+0x14>
   3868c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   38690:	f7ff bff0 	b.w	38674 <__sinit_lock_release>
   38694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   38698:	6523      	str	r3, [r4, #80]	; 0x50
   3869a:	4620      	mov	r0, r4
   3869c:	4b12      	ldr	r3, [pc, #72]	; (386e8 <__sinit+0x68>)
   3869e:	4a13      	ldr	r2, [pc, #76]	; (386ec <__sinit+0x6c>)
   386a0:	681b      	ldr	r3, [r3, #0]
   386a2:	62a2      	str	r2, [r4, #40]	; 0x28
   386a4:	42a3      	cmp	r3, r4
   386a6:	bf04      	itt	eq
   386a8:	2301      	moveq	r3, #1
   386aa:	61a3      	streq	r3, [r4, #24]
   386ac:	f000 f820 	bl	386f0 <__sfp>
   386b0:	6060      	str	r0, [r4, #4]
   386b2:	4620      	mov	r0, r4
   386b4:	f000 f81c 	bl	386f0 <__sfp>
   386b8:	60a0      	str	r0, [r4, #8]
   386ba:	4620      	mov	r0, r4
   386bc:	f000 f818 	bl	386f0 <__sfp>
   386c0:	2200      	movs	r2, #0
   386c2:	2104      	movs	r1, #4
   386c4:	60e0      	str	r0, [r4, #12]
   386c6:	6860      	ldr	r0, [r4, #4]
   386c8:	f7ff ff98 	bl	385fc <std>
   386cc:	2201      	movs	r2, #1
   386ce:	2109      	movs	r1, #9
   386d0:	68a0      	ldr	r0, [r4, #8]
   386d2:	f7ff ff93 	bl	385fc <std>
   386d6:	2202      	movs	r2, #2
   386d8:	2112      	movs	r1, #18
   386da:	68e0      	ldr	r0, [r4, #12]
   386dc:	f7ff ff8e 	bl	385fc <std>
   386e0:	2301      	movs	r3, #1
   386e2:	61a3      	str	r3, [r4, #24]
   386e4:	e7d2      	b.n	3868c <__sinit+0xc>
   386e6:	bf00      	nop
   386e8:	0003eda4 	.word	0x0003eda4
   386ec:	00038645 	.word	0x00038645

000386f0 <__sfp>:
   386f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   386f2:	4607      	mov	r7, r0
   386f4:	f7ff ffac 	bl	38650 <__sfp_lock_acquire>
   386f8:	4b1e      	ldr	r3, [pc, #120]	; (38774 <__sfp+0x84>)
   386fa:	681e      	ldr	r6, [r3, #0]
   386fc:	69b3      	ldr	r3, [r6, #24]
   386fe:	b913      	cbnz	r3, 38706 <__sfp+0x16>
   38700:	4630      	mov	r0, r6
   38702:	f7ff ffbd 	bl	38680 <__sinit>
   38706:	3648      	adds	r6, #72	; 0x48
   38708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3870c:	3b01      	subs	r3, #1
   3870e:	d503      	bpl.n	38718 <__sfp+0x28>
   38710:	6833      	ldr	r3, [r6, #0]
   38712:	b30b      	cbz	r3, 38758 <__sfp+0x68>
   38714:	6836      	ldr	r6, [r6, #0]
   38716:	e7f7      	b.n	38708 <__sfp+0x18>
   38718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3871c:	b9d5      	cbnz	r5, 38754 <__sfp+0x64>
   3871e:	4b16      	ldr	r3, [pc, #88]	; (38778 <__sfp+0x88>)
   38720:	f104 0058 	add.w	r0, r4, #88	; 0x58
   38724:	6665      	str	r5, [r4, #100]	; 0x64
   38726:	60e3      	str	r3, [r4, #12]
   38728:	f005 faab 	bl	3dc82 <__retarget_lock_init_recursive>
   3872c:	f7ff ff96 	bl	3865c <__sfp_lock_release>
   38730:	2208      	movs	r2, #8
   38732:	4629      	mov	r1, r5
   38734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   38738:	6025      	str	r5, [r4, #0]
   3873a:	61a5      	str	r5, [r4, #24]
   3873c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   38740:	e9c4 5504 	strd	r5, r5, [r4, #16]
   38744:	f004 ff9f 	bl	3d686 <memset>
   38748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3874c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   38750:	4620      	mov	r0, r4
   38752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38754:	3468      	adds	r4, #104	; 0x68
   38756:	e7d9      	b.n	3870c <__sfp+0x1c>
   38758:	2104      	movs	r1, #4
   3875a:	4638      	mov	r0, r7
   3875c:	f005 fa5c 	bl	3dc18 <__sfmoreglue>
   38760:	4604      	mov	r4, r0
   38762:	6030      	str	r0, [r6, #0]
   38764:	2800      	cmp	r0, #0
   38766:	d1d5      	bne.n	38714 <__sfp+0x24>
   38768:	f7ff ff78 	bl	3865c <__sfp_lock_release>
   3876c:	230c      	movs	r3, #12
   3876e:	603b      	str	r3, [r7, #0]
   38770:	e7ee      	b.n	38750 <__sfp+0x60>
   38772:	bf00      	nop
   38774:	0003eda4 	.word	0x0003eda4
   38778:	ffff0001 	.word	0xffff0001

0003877c <_localeconv_r>:
   3877c:	4800      	ldr	r0, [pc, #0]	; (38780 <_localeconv_r+0x4>)
   3877e:	4770      	bx	lr
   38780:	200148f8 	.word	0x200148f8

00038784 <__smakebuf_r>:
   38784:	898b      	ldrh	r3, [r1, #12]
   38786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   38788:	079d      	lsls	r5, r3, #30
   3878a:	4606      	mov	r6, r0
   3878c:	460c      	mov	r4, r1
   3878e:	d507      	bpl.n	387a0 <__smakebuf_r+0x1c>
   38790:	f104 0347 	add.w	r3, r4, #71	; 0x47
   38794:	6023      	str	r3, [r4, #0]
   38796:	6123      	str	r3, [r4, #16]
   38798:	2301      	movs	r3, #1
   3879a:	6163      	str	r3, [r4, #20]
   3879c:	b003      	add	sp, #12
   3879e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   387a0:	ab01      	add	r3, sp, #4
   387a2:	466a      	mov	r2, sp
   387a4:	f005 fa70 	bl	3dc88 <__swhatbuf_r>
   387a8:	9f00      	ldr	r7, [sp, #0]
   387aa:	4605      	mov	r5, r0
   387ac:	4630      	mov	r0, r6
   387ae:	4639      	mov	r1, r7
   387b0:	f7fe ff5a 	bl	37668 <_malloc_r>
   387b4:	b948      	cbnz	r0, 387ca <__smakebuf_r+0x46>
   387b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   387ba:	059a      	lsls	r2, r3, #22
   387bc:	d4ee      	bmi.n	3879c <__smakebuf_r+0x18>
   387be:	f023 0303 	bic.w	r3, r3, #3
   387c2:	f043 0302 	orr.w	r3, r3, #2
   387c6:	81a3      	strh	r3, [r4, #12]
   387c8:	e7e2      	b.n	38790 <__smakebuf_r+0xc>
   387ca:	4b0d      	ldr	r3, [pc, #52]	; (38800 <__smakebuf_r+0x7c>)
   387cc:	62b3      	str	r3, [r6, #40]	; 0x28
   387ce:	89a3      	ldrh	r3, [r4, #12]
   387d0:	6020      	str	r0, [r4, #0]
   387d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   387d6:	81a3      	strh	r3, [r4, #12]
   387d8:	9b01      	ldr	r3, [sp, #4]
   387da:	e9c4 0704 	strd	r0, r7, [r4, #16]
   387de:	b15b      	cbz	r3, 387f8 <__smakebuf_r+0x74>
   387e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   387e4:	4630      	mov	r0, r6
   387e6:	f000 fc75 	bl	390d4 <_isatty_r>
   387ea:	b128      	cbz	r0, 387f8 <__smakebuf_r+0x74>
   387ec:	89a3      	ldrh	r3, [r4, #12]
   387ee:	f023 0303 	bic.w	r3, r3, #3
   387f2:	f043 0301 	orr.w	r3, r3, #1
   387f6:	81a3      	strh	r3, [r4, #12]
   387f8:	89a3      	ldrh	r3, [r4, #12]
   387fa:	431d      	orrs	r5, r3
   387fc:	81a5      	strh	r5, [r4, #12]
   387fe:	e7cd      	b.n	3879c <__smakebuf_r+0x18>
   38800:	00038645 	.word	0x00038645

00038804 <_Balloc>:
   38804:	b570      	push	{r4, r5, r6, lr}
   38806:	6a46      	ldr	r6, [r0, #36]	; 0x24
   38808:	4604      	mov	r4, r0
   3880a:	460d      	mov	r5, r1
   3880c:	b976      	cbnz	r6, 3882c <_Balloc+0x28>
   3880e:	2010      	movs	r0, #16
   38810:	f7fe fed0 	bl	375b4 <malloc>
   38814:	4602      	mov	r2, r0
   38816:	6260      	str	r0, [r4, #36]	; 0x24
   38818:	b920      	cbnz	r0, 38824 <_Balloc+0x20>
   3881a:	4b18      	ldr	r3, [pc, #96]	; (3887c <_Balloc+0x78>)
   3881c:	2166      	movs	r1, #102	; 0x66
   3881e:	4818      	ldr	r0, [pc, #96]	; (38880 <_Balloc+0x7c>)
   38820:	f7fe fe98 	bl	37554 <__assert_func>
   38824:	e9c0 6601 	strd	r6, r6, [r0, #4]
   38828:	6006      	str	r6, [r0, #0]
   3882a:	60c6      	str	r6, [r0, #12]
   3882c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   3882e:	68f3      	ldr	r3, [r6, #12]
   38830:	b183      	cbz	r3, 38854 <_Balloc+0x50>
   38832:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38834:	68db      	ldr	r3, [r3, #12]
   38836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   3883a:	b9b8      	cbnz	r0, 3886c <_Balloc+0x68>
   3883c:	2101      	movs	r1, #1
   3883e:	4620      	mov	r0, r4
   38840:	fa01 f605 	lsl.w	r6, r1, r5
   38844:	1d72      	adds	r2, r6, #5
   38846:	0092      	lsls	r2, r2, #2
   38848:	f005 fac7 	bl	3ddda <_calloc_r>
   3884c:	b160      	cbz	r0, 38868 <_Balloc+0x64>
   3884e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   38852:	e00e      	b.n	38872 <_Balloc+0x6e>
   38854:	2221      	movs	r2, #33	; 0x21
   38856:	2104      	movs	r1, #4
   38858:	4620      	mov	r0, r4
   3885a:	f005 fabe 	bl	3ddda <_calloc_r>
   3885e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38860:	60f0      	str	r0, [r6, #12]
   38862:	68db      	ldr	r3, [r3, #12]
   38864:	2b00      	cmp	r3, #0
   38866:	d1e4      	bne.n	38832 <_Balloc+0x2e>
   38868:	2000      	movs	r0, #0
   3886a:	bd70      	pop	{r4, r5, r6, pc}
   3886c:	6802      	ldr	r2, [r0, #0]
   3886e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   38872:	2300      	movs	r3, #0
   38874:	e9c0 3303 	strd	r3, r3, [r0, #12]
   38878:	e7f7      	b.n	3886a <_Balloc+0x66>
   3887a:	bf00      	nop
   3887c:	00043322 	.word	0x00043322
   38880:	000433be 	.word	0x000433be

00038884 <_Bfree>:
   38884:	b570      	push	{r4, r5, r6, lr}
   38886:	6a46      	ldr	r6, [r0, #36]	; 0x24
   38888:	4605      	mov	r5, r0
   3888a:	460c      	mov	r4, r1
   3888c:	b976      	cbnz	r6, 388ac <_Bfree+0x28>
   3888e:	2010      	movs	r0, #16
   38890:	f7fe fe90 	bl	375b4 <malloc>
   38894:	4602      	mov	r2, r0
   38896:	6268      	str	r0, [r5, #36]	; 0x24
   38898:	b920      	cbnz	r0, 388a4 <_Bfree+0x20>
   3889a:	4b09      	ldr	r3, [pc, #36]	; (388c0 <_Bfree+0x3c>)
   3889c:	218a      	movs	r1, #138	; 0x8a
   3889e:	4809      	ldr	r0, [pc, #36]	; (388c4 <_Bfree+0x40>)
   388a0:	f7fe fe58 	bl	37554 <__assert_func>
   388a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   388a8:	6006      	str	r6, [r0, #0]
   388aa:	60c6      	str	r6, [r0, #12]
   388ac:	b13c      	cbz	r4, 388be <_Bfree+0x3a>
   388ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   388b0:	6862      	ldr	r2, [r4, #4]
   388b2:	68db      	ldr	r3, [r3, #12]
   388b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   388b8:	6021      	str	r1, [r4, #0]
   388ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   388be:	bd70      	pop	{r4, r5, r6, pc}
   388c0:	00043322 	.word	0x00043322
   388c4:	000433be 	.word	0x000433be

000388c8 <__multadd>:
   388c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   388cc:	f101 0c14 	add.w	ip, r1, #20
   388d0:	4607      	mov	r7, r0
   388d2:	460c      	mov	r4, r1
   388d4:	461e      	mov	r6, r3
   388d6:	690d      	ldr	r5, [r1, #16]
   388d8:	2000      	movs	r0, #0
   388da:	f8dc 3000 	ldr.w	r3, [ip]
   388de:	3001      	adds	r0, #1
   388e0:	b299      	uxth	r1, r3
   388e2:	4285      	cmp	r5, r0
   388e4:	fb02 6101 	mla	r1, r2, r1, r6
   388e8:	ea4f 4613 	mov.w	r6, r3, lsr #16
   388ec:	ea4f 4311 	mov.w	r3, r1, lsr #16
   388f0:	b289      	uxth	r1, r1
   388f2:	fb02 3306 	mla	r3, r2, r6, r3
   388f6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   388fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
   388fe:	f84c 1b04 	str.w	r1, [ip], #4
   38902:	dcea      	bgt.n	388da <__multadd+0x12>
   38904:	b30e      	cbz	r6, 3894a <__multadd+0x82>
   38906:	68a3      	ldr	r3, [r4, #8]
   38908:	42ab      	cmp	r3, r5
   3890a:	dc19      	bgt.n	38940 <__multadd+0x78>
   3890c:	6861      	ldr	r1, [r4, #4]
   3890e:	4638      	mov	r0, r7
   38910:	3101      	adds	r1, #1
   38912:	f7ff ff77 	bl	38804 <_Balloc>
   38916:	4680      	mov	r8, r0
   38918:	b928      	cbnz	r0, 38926 <__multadd+0x5e>
   3891a:	4602      	mov	r2, r0
   3891c:	4b0c      	ldr	r3, [pc, #48]	; (38950 <__multadd+0x88>)
   3891e:	21b5      	movs	r1, #181	; 0xb5
   38920:	480c      	ldr	r0, [pc, #48]	; (38954 <__multadd+0x8c>)
   38922:	f7fe fe17 	bl	37554 <__assert_func>
   38926:	6922      	ldr	r2, [r4, #16]
   38928:	f104 010c 	add.w	r1, r4, #12
   3892c:	300c      	adds	r0, #12
   3892e:	3202      	adds	r2, #2
   38930:	0092      	lsls	r2, r2, #2
   38932:	f004 fe9b 	bl	3d66c <memcpy>
   38936:	4621      	mov	r1, r4
   38938:	4644      	mov	r4, r8
   3893a:	4638      	mov	r0, r7
   3893c:	f7ff ffa2 	bl	38884 <_Bfree>
   38940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   38944:	3501      	adds	r5, #1
   38946:	615e      	str	r6, [r3, #20]
   38948:	6125      	str	r5, [r4, #16]
   3894a:	4620      	mov	r0, r4
   3894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38950:	000433ad 	.word	0x000433ad
   38954:	000433be 	.word	0x000433be

00038958 <__i2b>:
   38958:	b510      	push	{r4, lr}
   3895a:	460c      	mov	r4, r1
   3895c:	2101      	movs	r1, #1
   3895e:	f7ff ff51 	bl	38804 <_Balloc>
   38962:	4602      	mov	r2, r0
   38964:	b928      	cbnz	r0, 38972 <__i2b+0x1a>
   38966:	4b05      	ldr	r3, [pc, #20]	; (3897c <__i2b+0x24>)
   38968:	f44f 71a0 	mov.w	r1, #320	; 0x140
   3896c:	4804      	ldr	r0, [pc, #16]	; (38980 <__i2b+0x28>)
   3896e:	f7fe fdf1 	bl	37554 <__assert_func>
   38972:	2301      	movs	r3, #1
   38974:	6144      	str	r4, [r0, #20]
   38976:	6103      	str	r3, [r0, #16]
   38978:	bd10      	pop	{r4, pc}
   3897a:	bf00      	nop
   3897c:	000433ad 	.word	0x000433ad
   38980:	000433be 	.word	0x000433be

00038984 <__multiply>:
   38984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38988:	4614      	mov	r4, r2
   3898a:	690a      	ldr	r2, [r1, #16]
   3898c:	460f      	mov	r7, r1
   3898e:	b085      	sub	sp, #20
   38990:	6923      	ldr	r3, [r4, #16]
   38992:	429a      	cmp	r2, r3
   38994:	bfa2      	ittt	ge
   38996:	4623      	movge	r3, r4
   38998:	460c      	movge	r4, r1
   3899a:	461f      	movge	r7, r3
   3899c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   389a0:	68a3      	ldr	r3, [r4, #8]
   389a2:	f8d7 9010 	ldr.w	r9, [r7, #16]
   389a6:	6861      	ldr	r1, [r4, #4]
   389a8:	eb0a 0609 	add.w	r6, sl, r9
   389ac:	42b3      	cmp	r3, r6
   389ae:	bfb8      	it	lt
   389b0:	3101      	addlt	r1, #1
   389b2:	f7ff ff27 	bl	38804 <_Balloc>
   389b6:	b930      	cbnz	r0, 389c6 <__multiply+0x42>
   389b8:	4602      	mov	r2, r0
   389ba:	4b45      	ldr	r3, [pc, #276]	; (38ad0 <__multiply+0x14c>)
   389bc:	f240 115d 	movw	r1, #349	; 0x15d
   389c0:	4844      	ldr	r0, [pc, #272]	; (38ad4 <__multiply+0x150>)
   389c2:	f7fe fdc7 	bl	37554 <__assert_func>
   389c6:	f100 0514 	add.w	r5, r0, #20
   389ca:	2200      	movs	r2, #0
   389cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   389d0:	462b      	mov	r3, r5
   389d2:	4543      	cmp	r3, r8
   389d4:	d321      	bcc.n	38a1a <__multiply+0x96>
   389d6:	f107 0114 	add.w	r1, r7, #20
   389da:	f104 0214 	add.w	r2, r4, #20
   389de:	f104 0715 	add.w	r7, r4, #21
   389e2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   389e6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   389ea:	9302      	str	r3, [sp, #8]
   389ec:	1b13      	subs	r3, r2, r4
   389ee:	3b15      	subs	r3, #21
   389f0:	f023 0303 	bic.w	r3, r3, #3
   389f4:	3304      	adds	r3, #4
   389f6:	42ba      	cmp	r2, r7
   389f8:	bf38      	it	cc
   389fa:	2304      	movcc	r3, #4
   389fc:	9301      	str	r3, [sp, #4]
   389fe:	9b02      	ldr	r3, [sp, #8]
   38a00:	9103      	str	r1, [sp, #12]
   38a02:	428b      	cmp	r3, r1
   38a04:	d80c      	bhi.n	38a20 <__multiply+0x9c>
   38a06:	2e00      	cmp	r6, #0
   38a08:	dd03      	ble.n	38a12 <__multiply+0x8e>
   38a0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   38a0e:	2b00      	cmp	r3, #0
   38a10:	d05b      	beq.n	38aca <__multiply+0x146>
   38a12:	6106      	str	r6, [r0, #16]
   38a14:	b005      	add	sp, #20
   38a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38a1a:	f843 2b04 	str.w	r2, [r3], #4
   38a1e:	e7d8      	b.n	389d2 <__multiply+0x4e>
   38a20:	f8b1 a000 	ldrh.w	sl, [r1]
   38a24:	f1ba 0f00 	cmp.w	sl, #0
   38a28:	d024      	beq.n	38a74 <__multiply+0xf0>
   38a2a:	f104 0e14 	add.w	lr, r4, #20
   38a2e:	46a9      	mov	r9, r5
   38a30:	f04f 0c00 	mov.w	ip, #0
   38a34:	f85e 7b04 	ldr.w	r7, [lr], #4
   38a38:	f8d9 3000 	ldr.w	r3, [r9]
   38a3c:	fa1f fb87 	uxth.w	fp, r7
   38a40:	4572      	cmp	r2, lr
   38a42:	b29b      	uxth	r3, r3
   38a44:	ea4f 4717 	mov.w	r7, r7, lsr #16
   38a48:	fb0a 330b 	mla	r3, sl, fp, r3
   38a4c:	4463      	add	r3, ip
   38a4e:	f8d9 c000 	ldr.w	ip, [r9]
   38a52:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   38a56:	fb0a c707 	mla	r7, sl, r7, ip
   38a5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   38a5e:	b29b      	uxth	r3, r3
   38a60:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   38a64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   38a68:	f849 3b04 	str.w	r3, [r9], #4
   38a6c:	d8e2      	bhi.n	38a34 <__multiply+0xb0>
   38a6e:	9b01      	ldr	r3, [sp, #4]
   38a70:	f845 c003 	str.w	ip, [r5, r3]
   38a74:	9b03      	ldr	r3, [sp, #12]
   38a76:	3104      	adds	r1, #4
   38a78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   38a7c:	f1b9 0f00 	cmp.w	r9, #0
   38a80:	d021      	beq.n	38ac6 <__multiply+0x142>
   38a82:	682b      	ldr	r3, [r5, #0]
   38a84:	f104 0c14 	add.w	ip, r4, #20
   38a88:	46ae      	mov	lr, r5
   38a8a:	f04f 0a00 	mov.w	sl, #0
   38a8e:	f8bc b000 	ldrh.w	fp, [ip]
   38a92:	b29b      	uxth	r3, r3
   38a94:	f8be 7002 	ldrh.w	r7, [lr, #2]
   38a98:	fb09 770b 	mla	r7, r9, fp, r7
   38a9c:	4457      	add	r7, sl
   38a9e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   38aa2:	f84e 3b04 	str.w	r3, [lr], #4
   38aa6:	f85c 3b04 	ldr.w	r3, [ip], #4
   38aaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   38aae:	f8be 3000 	ldrh.w	r3, [lr]
   38ab2:	4562      	cmp	r2, ip
   38ab4:	fb09 330a 	mla	r3, r9, sl, r3
   38ab8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   38abc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   38ac0:	d8e5      	bhi.n	38a8e <__multiply+0x10a>
   38ac2:	9f01      	ldr	r7, [sp, #4]
   38ac4:	51eb      	str	r3, [r5, r7]
   38ac6:	3504      	adds	r5, #4
   38ac8:	e799      	b.n	389fe <__multiply+0x7a>
   38aca:	3e01      	subs	r6, #1
   38acc:	e79b      	b.n	38a06 <__multiply+0x82>
   38ace:	bf00      	nop
   38ad0:	000433ad 	.word	0x000433ad
   38ad4:	000433be 	.word	0x000433be

00038ad8 <__pow5mult>:
   38ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38adc:	4615      	mov	r5, r2
   38ade:	f012 0203 	ands.w	r2, r2, #3
   38ae2:	4607      	mov	r7, r0
   38ae4:	460e      	mov	r6, r1
   38ae6:	d007      	beq.n	38af8 <__pow5mult+0x20>
   38ae8:	3a01      	subs	r2, #1
   38aea:	4c25      	ldr	r4, [pc, #148]	; (38b80 <__pow5mult+0xa8>)
   38aec:	2300      	movs	r3, #0
   38aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   38af2:	f7ff fee9 	bl	388c8 <__multadd>
   38af6:	4606      	mov	r6, r0
   38af8:	10ad      	asrs	r5, r5, #2
   38afa:	d03d      	beq.n	38b78 <__pow5mult+0xa0>
   38afc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   38afe:	b97c      	cbnz	r4, 38b20 <__pow5mult+0x48>
   38b00:	2010      	movs	r0, #16
   38b02:	f7fe fd57 	bl	375b4 <malloc>
   38b06:	4602      	mov	r2, r0
   38b08:	6278      	str	r0, [r7, #36]	; 0x24
   38b0a:	b928      	cbnz	r0, 38b18 <__pow5mult+0x40>
   38b0c:	4b1d      	ldr	r3, [pc, #116]	; (38b84 <__pow5mult+0xac>)
   38b0e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   38b12:	481d      	ldr	r0, [pc, #116]	; (38b88 <__pow5mult+0xb0>)
   38b14:	f7fe fd1e 	bl	37554 <__assert_func>
   38b18:	e9c0 4401 	strd	r4, r4, [r0, #4]
   38b1c:	6004      	str	r4, [r0, #0]
   38b1e:	60c4      	str	r4, [r0, #12]
   38b20:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   38b24:	f8d8 4008 	ldr.w	r4, [r8, #8]
   38b28:	b94c      	cbnz	r4, 38b3e <__pow5mult+0x66>
   38b2a:	f240 2171 	movw	r1, #625	; 0x271
   38b2e:	4638      	mov	r0, r7
   38b30:	f7ff ff12 	bl	38958 <__i2b>
   38b34:	2300      	movs	r3, #0
   38b36:	4604      	mov	r4, r0
   38b38:	f8c8 0008 	str.w	r0, [r8, #8]
   38b3c:	6003      	str	r3, [r0, #0]
   38b3e:	f04f 0900 	mov.w	r9, #0
   38b42:	07eb      	lsls	r3, r5, #31
   38b44:	d50a      	bpl.n	38b5c <__pow5mult+0x84>
   38b46:	4631      	mov	r1, r6
   38b48:	4622      	mov	r2, r4
   38b4a:	4638      	mov	r0, r7
   38b4c:	f7ff ff1a 	bl	38984 <__multiply>
   38b50:	4680      	mov	r8, r0
   38b52:	4631      	mov	r1, r6
   38b54:	4638      	mov	r0, r7
   38b56:	4646      	mov	r6, r8
   38b58:	f7ff fe94 	bl	38884 <_Bfree>
   38b5c:	106d      	asrs	r5, r5, #1
   38b5e:	d00b      	beq.n	38b78 <__pow5mult+0xa0>
   38b60:	6820      	ldr	r0, [r4, #0]
   38b62:	b938      	cbnz	r0, 38b74 <__pow5mult+0x9c>
   38b64:	4622      	mov	r2, r4
   38b66:	4621      	mov	r1, r4
   38b68:	4638      	mov	r0, r7
   38b6a:	f7ff ff0b 	bl	38984 <__multiply>
   38b6e:	6020      	str	r0, [r4, #0]
   38b70:	f8c0 9000 	str.w	r9, [r0]
   38b74:	4604      	mov	r4, r0
   38b76:	e7e4      	b.n	38b42 <__pow5mult+0x6a>
   38b78:	4630      	mov	r0, r6
   38b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   38b7e:	bf00      	nop
   38b80:	0003ee08 	.word	0x0003ee08
   38b84:	00043322 	.word	0x00043322
   38b88:	000433be 	.word	0x000433be

00038b8c <__lshift>:
   38b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   38b90:	460c      	mov	r4, r1
   38b92:	4607      	mov	r7, r0
   38b94:	4691      	mov	r9, r2
   38b96:	ea4f 1a62 	mov.w	sl, r2, asr #5
   38b9a:	6923      	ldr	r3, [r4, #16]
   38b9c:	6849      	ldr	r1, [r1, #4]
   38b9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   38ba2:	68a3      	ldr	r3, [r4, #8]
   38ba4:	f108 0601 	add.w	r6, r8, #1
   38ba8:	42b3      	cmp	r3, r6
   38baa:	db0b      	blt.n	38bc4 <__lshift+0x38>
   38bac:	4638      	mov	r0, r7
   38bae:	f7ff fe29 	bl	38804 <_Balloc>
   38bb2:	4605      	mov	r5, r0
   38bb4:	b948      	cbnz	r0, 38bca <__lshift+0x3e>
   38bb6:	4602      	mov	r2, r0
   38bb8:	4b28      	ldr	r3, [pc, #160]	; (38c5c <__lshift+0xd0>)
   38bba:	f240 11d9 	movw	r1, #473	; 0x1d9
   38bbe:	4828      	ldr	r0, [pc, #160]	; (38c60 <__lshift+0xd4>)
   38bc0:	f7fe fcc8 	bl	37554 <__assert_func>
   38bc4:	3101      	adds	r1, #1
   38bc6:	005b      	lsls	r3, r3, #1
   38bc8:	e7ee      	b.n	38ba8 <__lshift+0x1c>
   38bca:	2300      	movs	r3, #0
   38bcc:	f100 0114 	add.w	r1, r0, #20
   38bd0:	f100 0210 	add.w	r2, r0, #16
   38bd4:	4618      	mov	r0, r3
   38bd6:	4553      	cmp	r3, sl
   38bd8:	db33      	blt.n	38c42 <__lshift+0xb6>
   38bda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   38bde:	f104 0314 	add.w	r3, r4, #20
   38be2:	6920      	ldr	r0, [r4, #16]
   38be4:	f019 091f 	ands.w	r9, r9, #31
   38be8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   38bec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   38bf0:	d02b      	beq.n	38c4a <__lshift+0xbe>
   38bf2:	f1c9 0e20 	rsb	lr, r9, #32
   38bf6:	468a      	mov	sl, r1
   38bf8:	2200      	movs	r2, #0
   38bfa:	6818      	ldr	r0, [r3, #0]
   38bfc:	fa00 f009 	lsl.w	r0, r0, r9
   38c00:	4310      	orrs	r0, r2
   38c02:	f84a 0b04 	str.w	r0, [sl], #4
   38c06:	f853 2b04 	ldr.w	r2, [r3], #4
   38c0a:	459c      	cmp	ip, r3
   38c0c:	fa22 f20e 	lsr.w	r2, r2, lr
   38c10:	d8f3      	bhi.n	38bfa <__lshift+0x6e>
   38c12:	ebac 0304 	sub.w	r3, ip, r4
   38c16:	f104 0015 	add.w	r0, r4, #21
   38c1a:	3b15      	subs	r3, #21
   38c1c:	f023 0303 	bic.w	r3, r3, #3
   38c20:	3304      	adds	r3, #4
   38c22:	4584      	cmp	ip, r0
   38c24:	bf38      	it	cc
   38c26:	2304      	movcc	r3, #4
   38c28:	50ca      	str	r2, [r1, r3]
   38c2a:	b10a      	cbz	r2, 38c30 <__lshift+0xa4>
   38c2c:	f108 0602 	add.w	r6, r8, #2
   38c30:	3e01      	subs	r6, #1
   38c32:	4638      	mov	r0, r7
   38c34:	4621      	mov	r1, r4
   38c36:	612e      	str	r6, [r5, #16]
   38c38:	f7ff fe24 	bl	38884 <_Bfree>
   38c3c:	4628      	mov	r0, r5
   38c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   38c42:	3301      	adds	r3, #1
   38c44:	f842 0f04 	str.w	r0, [r2, #4]!
   38c48:	e7c5      	b.n	38bd6 <__lshift+0x4a>
   38c4a:	3904      	subs	r1, #4
   38c4c:	f853 2b04 	ldr.w	r2, [r3], #4
   38c50:	459c      	cmp	ip, r3
   38c52:	f841 2f04 	str.w	r2, [r1, #4]!
   38c56:	d8f9      	bhi.n	38c4c <__lshift+0xc0>
   38c58:	e7ea      	b.n	38c30 <__lshift+0xa4>
   38c5a:	bf00      	nop
   38c5c:	000433ad 	.word	0x000433ad
   38c60:	000433be 	.word	0x000433be

00038c64 <__mdiff>:
   38c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38c68:	4689      	mov	r9, r1
   38c6a:	4606      	mov	r6, r0
   38c6c:	4611      	mov	r1, r2
   38c6e:	4614      	mov	r4, r2
   38c70:	4648      	mov	r0, r9
   38c72:	f005 f897 	bl	3dda4 <__mcmp>
   38c76:	1e05      	subs	r5, r0, #0
   38c78:	d112      	bne.n	38ca0 <__mdiff+0x3c>
   38c7a:	4629      	mov	r1, r5
   38c7c:	4630      	mov	r0, r6
   38c7e:	f7ff fdc1 	bl	38804 <_Balloc>
   38c82:	4602      	mov	r2, r0
   38c84:	b928      	cbnz	r0, 38c92 <__mdiff+0x2e>
   38c86:	4b40      	ldr	r3, [pc, #256]	; (38d88 <__mdiff+0x124>)
   38c88:	f240 2132 	movw	r1, #562	; 0x232
   38c8c:	483f      	ldr	r0, [pc, #252]	; (38d8c <__mdiff+0x128>)
   38c8e:	f7fe fc61 	bl	37554 <__assert_func>
   38c92:	2301      	movs	r3, #1
   38c94:	e9c0 3504 	strd	r3, r5, [r0, #16]
   38c98:	4610      	mov	r0, r2
   38c9a:	b003      	add	sp, #12
   38c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38ca0:	bfbc      	itt	lt
   38ca2:	464b      	movlt	r3, r9
   38ca4:	46a1      	movlt	r9, r4
   38ca6:	4630      	mov	r0, r6
   38ca8:	bfb8      	it	lt
   38caa:	2501      	movlt	r5, #1
   38cac:	f8d9 1004 	ldr.w	r1, [r9, #4]
   38cb0:	bfb4      	ite	lt
   38cb2:	461c      	movlt	r4, r3
   38cb4:	2500      	movge	r5, #0
   38cb6:	f7ff fda5 	bl	38804 <_Balloc>
   38cba:	4602      	mov	r2, r0
   38cbc:	b918      	cbnz	r0, 38cc6 <__mdiff+0x62>
   38cbe:	4b32      	ldr	r3, [pc, #200]	; (38d88 <__mdiff+0x124>)
   38cc0:	f44f 7110 	mov.w	r1, #576	; 0x240
   38cc4:	e7e2      	b.n	38c8c <__mdiff+0x28>
   38cc6:	f8d9 7010 	ldr.w	r7, [r9, #16]
   38cca:	f104 0e14 	add.w	lr, r4, #20
   38cce:	6926      	ldr	r6, [r4, #16]
   38cd0:	f100 0b14 	add.w	fp, r0, #20
   38cd4:	60c5      	str	r5, [r0, #12]
   38cd6:	f109 0514 	add.w	r5, r9, #20
   38cda:	f109 0310 	add.w	r3, r9, #16
   38cde:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   38ce2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   38ce6:	46d9      	mov	r9, fp
   38ce8:	f04f 0c00 	mov.w	ip, #0
   38cec:	9301      	str	r3, [sp, #4]
   38cee:	9b01      	ldr	r3, [sp, #4]
   38cf0:	f85e 0b04 	ldr.w	r0, [lr], #4
   38cf4:	f853 af04 	ldr.w	sl, [r3, #4]!
   38cf8:	b281      	uxth	r1, r0
   38cfa:	4576      	cmp	r6, lr
   38cfc:	9301      	str	r3, [sp, #4]
   38cfe:	fa1f f38a 	uxth.w	r3, sl
   38d02:	ea4f 4010 	mov.w	r0, r0, lsr #16
   38d06:	eba3 0301 	sub.w	r3, r3, r1
   38d0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   38d0e:	4463      	add	r3, ip
   38d10:	eb00 4023 	add.w	r0, r0, r3, asr #16
   38d14:	b29b      	uxth	r3, r3
   38d16:	ea4f 4c20 	mov.w	ip, r0, asr #16
   38d1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   38d1e:	f849 3b04 	str.w	r3, [r9], #4
   38d22:	d8e4      	bhi.n	38cee <__mdiff+0x8a>
   38d24:	1b33      	subs	r3, r6, r4
   38d26:	3415      	adds	r4, #21
   38d28:	3b15      	subs	r3, #21
   38d2a:	f023 0303 	bic.w	r3, r3, #3
   38d2e:	3304      	adds	r3, #4
   38d30:	42a6      	cmp	r6, r4
   38d32:	bf38      	it	cc
   38d34:	2304      	movcc	r3, #4
   38d36:	441d      	add	r5, r3
   38d38:	445b      	add	r3, fp
   38d3a:	462c      	mov	r4, r5
   38d3c:	461e      	mov	r6, r3
   38d3e:	4544      	cmp	r4, r8
   38d40:	d30e      	bcc.n	38d60 <__mdiff+0xfc>
   38d42:	f108 0103 	add.w	r1, r8, #3
   38d46:	1b49      	subs	r1, r1, r5
   38d48:	3d03      	subs	r5, #3
   38d4a:	f021 0103 	bic.w	r1, r1, #3
   38d4e:	45a8      	cmp	r8, r5
   38d50:	bf38      	it	cc
   38d52:	2100      	movcc	r1, #0
   38d54:	440b      	add	r3, r1
   38d56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   38d5a:	b199      	cbz	r1, 38d84 <__mdiff+0x120>
   38d5c:	6117      	str	r7, [r2, #16]
   38d5e:	e79b      	b.n	38c98 <__mdiff+0x34>
   38d60:	f854 1b04 	ldr.w	r1, [r4], #4
   38d64:	46e6      	mov	lr, ip
   38d66:	fa1f fc81 	uxth.w	ip, r1
   38d6a:	0c08      	lsrs	r0, r1, #16
   38d6c:	4471      	add	r1, lr
   38d6e:	44f4      	add	ip, lr
   38d70:	b289      	uxth	r1, r1
   38d72:	eb00 402c 	add.w	r0, r0, ip, asr #16
   38d76:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   38d7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
   38d7e:	f846 1b04 	str.w	r1, [r6], #4
   38d82:	e7dc      	b.n	38d3e <__mdiff+0xda>
   38d84:	3f01      	subs	r7, #1
   38d86:	e7e6      	b.n	38d56 <__mdiff+0xf2>
   38d88:	000433ad 	.word	0x000433ad
   38d8c:	000433be 	.word	0x000433be

00038d90 <__d2b>:
   38d90:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   38d94:	2101      	movs	r1, #1
   38d96:	4690      	mov	r8, r2
   38d98:	4699      	mov	r9, r3
   38d9a:	9e08      	ldr	r6, [sp, #32]
   38d9c:	f7ff fd32 	bl	38804 <_Balloc>
   38da0:	4604      	mov	r4, r0
   38da2:	b930      	cbnz	r0, 38db2 <__d2b+0x22>
   38da4:	4602      	mov	r2, r0
   38da6:	4b24      	ldr	r3, [pc, #144]	; (38e38 <__d2b+0xa8>)
   38da8:	f240 310a 	movw	r1, #778	; 0x30a
   38dac:	4823      	ldr	r0, [pc, #140]	; (38e3c <__d2b+0xac>)
   38dae:	f7fe fbd1 	bl	37554 <__assert_func>
   38db2:	f3c9 550a 	ubfx	r5, r9, #20, #11
   38db6:	f3c9 0313 	ubfx	r3, r9, #0, #20
   38dba:	b10d      	cbz	r5, 38dc0 <__d2b+0x30>
   38dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   38dc0:	9301      	str	r3, [sp, #4]
   38dc2:	f1b8 0300 	subs.w	r3, r8, #0
   38dc6:	d024      	beq.n	38e12 <__d2b+0x82>
   38dc8:	4668      	mov	r0, sp
   38dca:	9300      	str	r3, [sp, #0]
   38dcc:	f004 ffbd 	bl	3dd4a <__lo0bits>
   38dd0:	e9dd 1200 	ldrd	r1, r2, [sp]
   38dd4:	b1d8      	cbz	r0, 38e0e <__d2b+0x7e>
   38dd6:	f1c0 0320 	rsb	r3, r0, #32
   38dda:	fa02 f303 	lsl.w	r3, r2, r3
   38dde:	40c2      	lsrs	r2, r0
   38de0:	430b      	orrs	r3, r1
   38de2:	9201      	str	r2, [sp, #4]
   38de4:	6163      	str	r3, [r4, #20]
   38de6:	9b01      	ldr	r3, [sp, #4]
   38de8:	2b00      	cmp	r3, #0
   38dea:	61a3      	str	r3, [r4, #24]
   38dec:	bf0c      	ite	eq
   38dee:	2201      	moveq	r2, #1
   38df0:	2202      	movne	r2, #2
   38df2:	6122      	str	r2, [r4, #16]
   38df4:	b1ad      	cbz	r5, 38e22 <__d2b+0x92>
   38df6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   38dfa:	4405      	add	r5, r0
   38dfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   38e00:	6035      	str	r5, [r6, #0]
   38e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38e04:	6018      	str	r0, [r3, #0]
   38e06:	4620      	mov	r0, r4
   38e08:	b002      	add	sp, #8
   38e0a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   38e0e:	6161      	str	r1, [r4, #20]
   38e10:	e7e9      	b.n	38de6 <__d2b+0x56>
   38e12:	a801      	add	r0, sp, #4
   38e14:	f004 ff99 	bl	3dd4a <__lo0bits>
   38e18:	9b01      	ldr	r3, [sp, #4]
   38e1a:	3020      	adds	r0, #32
   38e1c:	2201      	movs	r2, #1
   38e1e:	6163      	str	r3, [r4, #20]
   38e20:	e7e7      	b.n	38df2 <__d2b+0x62>
   38e22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   38e26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   38e2a:	6030      	str	r0, [r6, #0]
   38e2c:	6918      	ldr	r0, [r3, #16]
   38e2e:	f004 ff6a 	bl	3dd06 <__hi0bits>
   38e32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   38e36:	e7e4      	b.n	38e02 <__d2b+0x72>
   38e38:	000433ad 	.word	0x000433ad
   38e3c:	000433be 	.word	0x000433be

00038e40 <_svfiprintf_r>:
   38e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38e44:	4698      	mov	r8, r3
   38e46:	898b      	ldrh	r3, [r1, #12]
   38e48:	b09d      	sub	sp, #116	; 0x74
   38e4a:	4607      	mov	r7, r0
   38e4c:	061b      	lsls	r3, r3, #24
   38e4e:	460d      	mov	r5, r1
   38e50:	4614      	mov	r4, r2
   38e52:	d510      	bpl.n	38e76 <_svfiprintf_r+0x36>
   38e54:	690b      	ldr	r3, [r1, #16]
   38e56:	b973      	cbnz	r3, 38e76 <_svfiprintf_r+0x36>
   38e58:	2140      	movs	r1, #64	; 0x40
   38e5a:	f7fe fc05 	bl	37668 <_malloc_r>
   38e5e:	6028      	str	r0, [r5, #0]
   38e60:	6128      	str	r0, [r5, #16]
   38e62:	b930      	cbnz	r0, 38e72 <_svfiprintf_r+0x32>
   38e64:	230c      	movs	r3, #12
   38e66:	603b      	str	r3, [r7, #0]
   38e68:	f04f 30ff 	mov.w	r0, #4294967295
   38e6c:	b01d      	add	sp, #116	; 0x74
   38e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38e72:	2340      	movs	r3, #64	; 0x40
   38e74:	616b      	str	r3, [r5, #20]
   38e76:	2300      	movs	r3, #0
   38e78:	f8cd 800c 	str.w	r8, [sp, #12]
   38e7c:	f04f 0901 	mov.w	r9, #1
   38e80:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 39024 <_svfiprintf_r+0x1e4>
   38e84:	9309      	str	r3, [sp, #36]	; 0x24
   38e86:	2320      	movs	r3, #32
   38e88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   38e8c:	2330      	movs	r3, #48	; 0x30
   38e8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   38e92:	4623      	mov	r3, r4
   38e94:	469a      	mov	sl, r3
   38e96:	f813 2b01 	ldrb.w	r2, [r3], #1
   38e9a:	b10a      	cbz	r2, 38ea0 <_svfiprintf_r+0x60>
   38e9c:	2a25      	cmp	r2, #37	; 0x25
   38e9e:	d1f9      	bne.n	38e94 <_svfiprintf_r+0x54>
   38ea0:	ebba 0b04 	subs.w	fp, sl, r4
   38ea4:	d00b      	beq.n	38ebe <_svfiprintf_r+0x7e>
   38ea6:	465b      	mov	r3, fp
   38ea8:	4622      	mov	r2, r4
   38eaa:	4629      	mov	r1, r5
   38eac:	4638      	mov	r0, r7
   38eae:	f004 ffc7 	bl	3de40 <__ssputs_r>
   38eb2:	3001      	adds	r0, #1
   38eb4:	f000 80a7 	beq.w	39006 <_svfiprintf_r+0x1c6>
   38eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38eba:	445a      	add	r2, fp
   38ebc:	9209      	str	r2, [sp, #36]	; 0x24
   38ebe:	f89a 3000 	ldrb.w	r3, [sl]
   38ec2:	2b00      	cmp	r3, #0
   38ec4:	f000 809f 	beq.w	39006 <_svfiprintf_r+0x1c6>
   38ec8:	2300      	movs	r3, #0
   38eca:	f04f 32ff 	mov.w	r2, #4294967295
   38ece:	f10a 0a01 	add.w	sl, sl, #1
   38ed2:	9304      	str	r3, [sp, #16]
   38ed4:	9307      	str	r3, [sp, #28]
   38ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   38eda:	931a      	str	r3, [sp, #104]	; 0x68
   38edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
   38ee0:	4654      	mov	r4, sl
   38ee2:	2205      	movs	r2, #5
   38ee4:	484f      	ldr	r0, [pc, #316]	; (39024 <_svfiprintf_r+0x1e4>)
   38ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
   38eea:	f004 fba1 	bl	3d630 <memchr>
   38eee:	9a04      	ldr	r2, [sp, #16]
   38ef0:	b9d8      	cbnz	r0, 38f2a <_svfiprintf_r+0xea>
   38ef2:	06d0      	lsls	r0, r2, #27
   38ef4:	bf44      	itt	mi
   38ef6:	2320      	movmi	r3, #32
   38ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   38efc:	0711      	lsls	r1, r2, #28
   38efe:	bf44      	itt	mi
   38f00:	232b      	movmi	r3, #43	; 0x2b
   38f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   38f06:	f89a 3000 	ldrb.w	r3, [sl]
   38f0a:	2b2a      	cmp	r3, #42	; 0x2a
   38f0c:	d015      	beq.n	38f3a <_svfiprintf_r+0xfa>
   38f0e:	9a07      	ldr	r2, [sp, #28]
   38f10:	4654      	mov	r4, sl
   38f12:	2000      	movs	r0, #0
   38f14:	f04f 0c0a 	mov.w	ip, #10
   38f18:	4621      	mov	r1, r4
   38f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
   38f1e:	3b30      	subs	r3, #48	; 0x30
   38f20:	2b09      	cmp	r3, #9
   38f22:	d94b      	bls.n	38fbc <_svfiprintf_r+0x17c>
   38f24:	b1b0      	cbz	r0, 38f54 <_svfiprintf_r+0x114>
   38f26:	9207      	str	r2, [sp, #28]
   38f28:	e014      	b.n	38f54 <_svfiprintf_r+0x114>
   38f2a:	eba0 0308 	sub.w	r3, r0, r8
   38f2e:	46a2      	mov	sl, r4
   38f30:	fa09 f303 	lsl.w	r3, r9, r3
   38f34:	4313      	orrs	r3, r2
   38f36:	9304      	str	r3, [sp, #16]
   38f38:	e7d2      	b.n	38ee0 <_svfiprintf_r+0xa0>
   38f3a:	9b03      	ldr	r3, [sp, #12]
   38f3c:	1d19      	adds	r1, r3, #4
   38f3e:	681b      	ldr	r3, [r3, #0]
   38f40:	2b00      	cmp	r3, #0
   38f42:	9103      	str	r1, [sp, #12]
   38f44:	bfbb      	ittet	lt
   38f46:	425b      	neglt	r3, r3
   38f48:	f042 0202 	orrlt.w	r2, r2, #2
   38f4c:	9307      	strge	r3, [sp, #28]
   38f4e:	9307      	strlt	r3, [sp, #28]
   38f50:	bfb8      	it	lt
   38f52:	9204      	strlt	r2, [sp, #16]
   38f54:	7823      	ldrb	r3, [r4, #0]
   38f56:	2b2e      	cmp	r3, #46	; 0x2e
   38f58:	d10a      	bne.n	38f70 <_svfiprintf_r+0x130>
   38f5a:	7863      	ldrb	r3, [r4, #1]
   38f5c:	2b2a      	cmp	r3, #42	; 0x2a
   38f5e:	d132      	bne.n	38fc6 <_svfiprintf_r+0x186>
   38f60:	9b03      	ldr	r3, [sp, #12]
   38f62:	3402      	adds	r4, #2
   38f64:	1d1a      	adds	r2, r3, #4
   38f66:	681b      	ldr	r3, [r3, #0]
   38f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   38f6c:	9203      	str	r2, [sp, #12]
   38f6e:	9305      	str	r3, [sp, #20]
   38f70:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 39028 <_svfiprintf_r+0x1e8>
   38f74:	2203      	movs	r2, #3
   38f76:	7821      	ldrb	r1, [r4, #0]
   38f78:	4650      	mov	r0, sl
   38f7a:	f004 fb59 	bl	3d630 <memchr>
   38f7e:	b138      	cbz	r0, 38f90 <_svfiprintf_r+0x150>
   38f80:	eba0 000a 	sub.w	r0, r0, sl
   38f84:	2240      	movs	r2, #64	; 0x40
   38f86:	9b04      	ldr	r3, [sp, #16]
   38f88:	3401      	adds	r4, #1
   38f8a:	4082      	lsls	r2, r0
   38f8c:	4313      	orrs	r3, r2
   38f8e:	9304      	str	r3, [sp, #16]
   38f90:	f814 1b01 	ldrb.w	r1, [r4], #1
   38f94:	2206      	movs	r2, #6
   38f96:	4825      	ldr	r0, [pc, #148]	; (3902c <_svfiprintf_r+0x1ec>)
   38f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   38f9c:	f004 fb48 	bl	3d630 <memchr>
   38fa0:	2800      	cmp	r0, #0
   38fa2:	d036      	beq.n	39012 <_svfiprintf_r+0x1d2>
   38fa4:	4b22      	ldr	r3, [pc, #136]	; (39030 <_svfiprintf_r+0x1f0>)
   38fa6:	bb1b      	cbnz	r3, 38ff0 <_svfiprintf_r+0x1b0>
   38fa8:	9b03      	ldr	r3, [sp, #12]
   38faa:	3307      	adds	r3, #7
   38fac:	f023 0307 	bic.w	r3, r3, #7
   38fb0:	3308      	adds	r3, #8
   38fb2:	9303      	str	r3, [sp, #12]
   38fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38fb6:	4433      	add	r3, r6
   38fb8:	9309      	str	r3, [sp, #36]	; 0x24
   38fba:	e76a      	b.n	38e92 <_svfiprintf_r+0x52>
   38fbc:	fb0c 3202 	mla	r2, ip, r2, r3
   38fc0:	460c      	mov	r4, r1
   38fc2:	2001      	movs	r0, #1
   38fc4:	e7a8      	b.n	38f18 <_svfiprintf_r+0xd8>
   38fc6:	2300      	movs	r3, #0
   38fc8:	3401      	adds	r4, #1
   38fca:	f04f 0c0a 	mov.w	ip, #10
   38fce:	4619      	mov	r1, r3
   38fd0:	9305      	str	r3, [sp, #20]
   38fd2:	4620      	mov	r0, r4
   38fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
   38fd8:	3a30      	subs	r2, #48	; 0x30
   38fda:	2a09      	cmp	r2, #9
   38fdc:	d903      	bls.n	38fe6 <_svfiprintf_r+0x1a6>
   38fde:	2b00      	cmp	r3, #0
   38fe0:	d0c6      	beq.n	38f70 <_svfiprintf_r+0x130>
   38fe2:	9105      	str	r1, [sp, #20]
   38fe4:	e7c4      	b.n	38f70 <_svfiprintf_r+0x130>
   38fe6:	fb0c 2101 	mla	r1, ip, r1, r2
   38fea:	4604      	mov	r4, r0
   38fec:	2301      	movs	r3, #1
   38fee:	e7f0      	b.n	38fd2 <_svfiprintf_r+0x192>
   38ff0:	ab03      	add	r3, sp, #12
   38ff2:	462a      	mov	r2, r5
   38ff4:	a904      	add	r1, sp, #16
   38ff6:	4638      	mov	r0, r7
   38ff8:	9300      	str	r3, [sp, #0]
   38ffa:	4b0e      	ldr	r3, [pc, #56]	; (39034 <_svfiprintf_r+0x1f4>)
   38ffc:	f7fe fcba 	bl	37974 <_printf_float>
   39000:	1c42      	adds	r2, r0, #1
   39002:	4606      	mov	r6, r0
   39004:	d1d6      	bne.n	38fb4 <_svfiprintf_r+0x174>
   39006:	89ab      	ldrh	r3, [r5, #12]
   39008:	065b      	lsls	r3, r3, #25
   3900a:	f53f af2d 	bmi.w	38e68 <_svfiprintf_r+0x28>
   3900e:	9809      	ldr	r0, [sp, #36]	; 0x24
   39010:	e72c      	b.n	38e6c <_svfiprintf_r+0x2c>
   39012:	ab03      	add	r3, sp, #12
   39014:	462a      	mov	r2, r5
   39016:	a904      	add	r1, sp, #16
   39018:	4638      	mov	r0, r7
   3901a:	9300      	str	r3, [sp, #0]
   3901c:	4b05      	ldr	r3, [pc, #20]	; (39034 <_svfiprintf_r+0x1f4>)
   3901e:	f7fe fedf 	bl	37de0 <_printf_i>
   39022:	e7ed      	b.n	39000 <_svfiprintf_r+0x1c0>
   39024:	000432d6 	.word	0x000432d6
   39028:	000432dc 	.word	0x000432dc
   3902c:	000432e0 	.word	0x000432e0
   39030:	00037975 	.word	0x00037975
   39034:	0003de41 	.word	0x0003de41

00039038 <raise>:
   39038:	4b02      	ldr	r3, [pc, #8]	; (39044 <raise+0xc>)
   3903a:	4601      	mov	r1, r0
   3903c:	6818      	ldr	r0, [r3, #0]
   3903e:	f004 bf5a 	b.w	3def6 <_raise_r>
   39042:	bf00      	nop
   39044:	200147a4 	.word	0x200147a4

00039048 <_kill_r>:
   39048:	b538      	push	{r3, r4, r5, lr}
   3904a:	2300      	movs	r3, #0
   3904c:	4d06      	ldr	r5, [pc, #24]	; (39068 <_kill_r+0x20>)
   3904e:	4604      	mov	r4, r0
   39050:	4608      	mov	r0, r1
   39052:	4611      	mov	r1, r2
   39054:	602b      	str	r3, [r5, #0]
   39056:	f001 f81f 	bl	3a098 <_kill>
   3905a:	1c43      	adds	r3, r0, #1
   3905c:	d102      	bne.n	39064 <_kill_r+0x1c>
   3905e:	682b      	ldr	r3, [r5, #0]
   39060:	b103      	cbz	r3, 39064 <_kill_r+0x1c>
   39062:	6023      	str	r3, [r4, #0]
   39064:	bd38      	pop	{r3, r4, r5, pc}
   39066:	bf00      	nop
   39068:	20017fc8 	.word	0x20017fc8

0003906c <_write_r>:
   3906c:	b538      	push	{r3, r4, r5, lr}
   3906e:	4604      	mov	r4, r0
   39070:	4d06      	ldr	r5, [pc, #24]	; (3908c <_write_r+0x20>)
   39072:	4608      	mov	r0, r1
   39074:	4611      	mov	r1, r2
   39076:	2200      	movs	r2, #0
   39078:	602a      	str	r2, [r5, #0]
   3907a:	461a      	mov	r2, r3
   3907c:	f000 fffe 	bl	3a07c <_write>
   39080:	1c43      	adds	r3, r0, #1
   39082:	d102      	bne.n	3908a <_write_r+0x1e>
   39084:	682b      	ldr	r3, [r5, #0]
   39086:	b103      	cbz	r3, 3908a <_write_r+0x1e>
   39088:	6023      	str	r3, [r4, #0]
   3908a:	bd38      	pop	{r3, r4, r5, pc}
   3908c:	20017fc8 	.word	0x20017fc8

00039090 <_close_r>:
   39090:	b538      	push	{r3, r4, r5, lr}
   39092:	2300      	movs	r3, #0
   39094:	4d05      	ldr	r5, [pc, #20]	; (390ac <_close_r+0x1c>)
   39096:	4604      	mov	r4, r0
   39098:	4608      	mov	r0, r1
   3909a:	602b      	str	r3, [r5, #0]
   3909c:	f000 fff2 	bl	3a084 <_close>
   390a0:	1c43      	adds	r3, r0, #1
   390a2:	d102      	bne.n	390aa <_close_r+0x1a>
   390a4:	682b      	ldr	r3, [r5, #0]
   390a6:	b103      	cbz	r3, 390aa <_close_r+0x1a>
   390a8:	6023      	str	r3, [r4, #0]
   390aa:	bd38      	pop	{r3, r4, r5, pc}
   390ac:	20017fc8 	.word	0x20017fc8

000390b0 <_fstat_r>:
   390b0:	b538      	push	{r3, r4, r5, lr}
   390b2:	2300      	movs	r3, #0
   390b4:	4d06      	ldr	r5, [pc, #24]	; (390d0 <_fstat_r+0x20>)
   390b6:	4604      	mov	r4, r0
   390b8:	4608      	mov	r0, r1
   390ba:	4611      	mov	r1, r2
   390bc:	602b      	str	r3, [r5, #0]
   390be:	f000 ffef 	bl	3a0a0 <_fstat>
   390c2:	1c43      	adds	r3, r0, #1
   390c4:	d102      	bne.n	390cc <_fstat_r+0x1c>
   390c6:	682b      	ldr	r3, [r5, #0]
   390c8:	b103      	cbz	r3, 390cc <_fstat_r+0x1c>
   390ca:	6023      	str	r3, [r4, #0]
   390cc:	bd38      	pop	{r3, r4, r5, pc}
   390ce:	bf00      	nop
   390d0:	20017fc8 	.word	0x20017fc8

000390d4 <_isatty_r>:
   390d4:	b538      	push	{r3, r4, r5, lr}
   390d6:	2300      	movs	r3, #0
   390d8:	4d05      	ldr	r5, [pc, #20]	; (390f0 <_isatty_r+0x1c>)
   390da:	4604      	mov	r4, r0
   390dc:	4608      	mov	r0, r1
   390de:	602b      	str	r3, [r5, #0]
   390e0:	f000 ffd5 	bl	3a08e <_isatty>
   390e4:	1c43      	adds	r3, r0, #1
   390e6:	d102      	bne.n	390ee <_isatty_r+0x1a>
   390e8:	682b      	ldr	r3, [r5, #0]
   390ea:	b103      	cbz	r3, 390ee <_isatty_r+0x1a>
   390ec:	6023      	str	r3, [r4, #0]
   390ee:	bd38      	pop	{r3, r4, r5, pc}
   390f0:	20017fc8 	.word	0x20017fc8

000390f4 <_lseek_r>:
   390f4:	b538      	push	{r3, r4, r5, lr}
   390f6:	4604      	mov	r4, r0
   390f8:	4d06      	ldr	r5, [pc, #24]	; (39114 <_lseek_r+0x20>)
   390fa:	4608      	mov	r0, r1
   390fc:	4611      	mov	r1, r2
   390fe:	2200      	movs	r2, #0
   39100:	602a      	str	r2, [r5, #0]
   39102:	461a      	mov	r2, r3
   39104:	f000 ffc1 	bl	3a08a <_lseek>
   39108:	1c43      	adds	r3, r0, #1
   3910a:	d102      	bne.n	39112 <_lseek_r+0x1e>
   3910c:	682b      	ldr	r3, [r5, #0]
   3910e:	b103      	cbz	r3, 39112 <_lseek_r+0x1e>
   39110:	6023      	str	r3, [r4, #0]
   39112:	bd38      	pop	{r3, r4, r5, pc}
   39114:	20017fc8 	.word	0x20017fc8

00039118 <_read_r>:
   39118:	b538      	push	{r3, r4, r5, lr}
   3911a:	4604      	mov	r4, r0
   3911c:	4d06      	ldr	r5, [pc, #24]	; (39138 <_read_r+0x20>)
   3911e:	4608      	mov	r0, r1
   39120:	4611      	mov	r1, r2
   39122:	2200      	movs	r2, #0
   39124:	602a      	str	r2, [r5, #0]
   39126:	461a      	mov	r2, r3
   39128:	f000 ffa4 	bl	3a074 <_read>
   3912c:	1c43      	adds	r3, r0, #1
   3912e:	d102      	bne.n	39136 <_read_r+0x1e>
   39130:	682b      	ldr	r3, [r5, #0]
   39132:	b103      	cbz	r3, 39136 <_read_r+0x1e>
   39134:	6023      	str	r3, [r4, #0]
   39136:	bd38      	pop	{r3, r4, r5, pc}
   39138:	20017fc8 	.word	0x20017fc8

0003913c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   3913c:	4770      	bx	lr

0003913e <main>:
void main(void){
   3913e:	b508      	push	{r3, lr}
	while(1){
		read_adc();
   39140:	f7e8 fa9e 	bl	21680 <read_adc>
		UART();
   39144:	f7e9 fad4 	bl	226f0 <UART>
	while(1){
   39148:	e7fa      	b.n	39140 <main+0x2>

0003914a <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   3914a:	b40c      	push	{r2, r3}
   3914c:	4603      	mov	r3, r0
   3914e:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   39150:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   39152:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   39154:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   39156:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   3915a:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3915c:	4798      	blx	r3
	va_end(args);

	return res;
}
   3915e:	b003      	add	sp, #12
   39160:	f85d eb04 	ldr.w	lr, [sp], #4
   39164:	b002      	add	sp, #8
   39166:	4770      	bx	lr

00039168 <sys_notify_validate>:
	if (notify == NULL) {
   39168:	4603      	mov	r3, r0
   3916a:	b140      	cbz	r0, 3917e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   3916c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3916e:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   39172:	2a02      	cmp	r2, #2
   39174:	d006      	beq.n	39184 <sys_notify_validate+0x1c>
   39176:	2a03      	cmp	r2, #3
   39178:	d004      	beq.n	39184 <sys_notify_validate+0x1c>
   3917a:	2a01      	cmp	r2, #1
   3917c:	d005      	beq.n	3918a <sys_notify_validate+0x22>
   3917e:	f06f 0015 	mvn.w	r0, #21
}
   39182:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   39184:	681a      	ldr	r2, [r3, #0]
   39186:	2a00      	cmp	r2, #0
   39188:	d0f9      	beq.n	3917e <sys_notify_validate+0x16>
		notify->result = 0;
   3918a:	2000      	movs	r0, #0
   3918c:	6098      	str	r0, [r3, #8]
   3918e:	4770      	bx	lr

00039190 <arch_printk_char_out>:
}
   39190:	2000      	movs	r0, #0
   39192:	4770      	bx	lr

00039194 <str_out>:
{
   39194:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   39196:	688a      	ldr	r2, [r1, #8]
   39198:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   3919a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3919c:	b114      	cbz	r4, 391a4 <str_out+0x10>
   3919e:	684b      	ldr	r3, [r1, #4]
   391a0:	4293      	cmp	r3, r2
   391a2:	dc01      	bgt.n	391a8 <str_out+0x14>
		ctx->count++;
   391a4:	608d      	str	r5, [r1, #8]
}
   391a6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   391a8:	3b01      	subs	r3, #1
   391aa:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   391ac:	bf08      	it	eq
   391ae:	2200      	moveq	r2, #0
   391b0:	608d      	str	r5, [r1, #8]
   391b2:	bf0c      	ite	eq
   391b4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   391b6:	54a0      	strbne	r0, [r4, r2]
   391b8:	e7f5      	b.n	391a6 <str_out+0x12>

000391ba <printk>:
{
   391ba:	b40f      	push	{r0, r1, r2, r3}
   391bc:	b507      	push	{r0, r1, r2, lr}
   391be:	a904      	add	r1, sp, #16
   391c0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   391c4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   391c6:	f7e9 fbd7 	bl	22978 <vprintk>
}
   391ca:	b003      	add	sp, #12
   391cc:	f85d eb04 	ldr.w	lr, [sp], #4
   391d0:	b004      	add	sp, #16
   391d2:	4770      	bx	lr

000391d4 <snprintk>:
{
   391d4:	b40c      	push	{r2, r3}
   391d6:	b507      	push	{r0, r1, r2, lr}
   391d8:	ab04      	add	r3, sp, #16
   391da:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   391de:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   391e0:	f7e9 fbd8 	bl	22994 <vsnprintk>
}
   391e4:	b003      	add	sp, #12
   391e6:	f85d eb04 	ldr.w	lr, [sp], #4
   391ea:	b002      	add	sp, #8
   391ec:	4770      	bx	lr

000391ee <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   391ee:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   391f0:	f013 0307 	ands.w	r3, r3, #7
   391f4:	d105      	bne.n	39202 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   391f6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   391f8:	2b00      	cmp	r3, #0
   391fa:	bf0c      	ite	eq
   391fc:	2000      	moveq	r0, #0
   391fe:	2003      	movne	r0, #3
   39200:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   39202:	2b02      	cmp	r3, #2
   39204:	d105      	bne.n	39212 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   39206:	8bc0      	ldrh	r0, [r0, #30]
   39208:	fab0 f080 	clz	r0, r0
   3920c:	0940      	lsrs	r0, r0, #5
   3920e:	0080      	lsls	r0, r0, #2
   39210:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   39212:	2b01      	cmp	r3, #1
   39214:	d105      	bne.n	39222 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   39216:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   39218:	2b00      	cmp	r3, #0
   3921a:	bf0c      	ite	eq
   3921c:	2000      	moveq	r0, #0
   3921e:	2005      	movne	r0, #5
   39220:	4770      	bx	lr
	int evt = EVT_NOP;
   39222:	2000      	movs	r0, #0
}
   39224:	4770      	bx	lr

00039226 <validate_args>:
{
   39226:	b510      	push	{r4, lr}
   39228:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   3922a:	b100      	cbz	r0, 3922e <validate_args+0x8>
   3922c:	b911      	cbnz	r1, 39234 <validate_args+0xe>
		return -EINVAL;
   3922e:	f06f 0015 	mvn.w	r0, #21
}
   39232:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   39234:	1d08      	adds	r0, r1, #4
   39236:	f7ff ff97 	bl	39168 <sys_notify_validate>
	if ((rv == 0)
   3923a:	2800      	cmp	r0, #0
   3923c:	d1f9      	bne.n	39232 <validate_args+0xc>
	    && ((cli->notify.flags
   3923e:	68a3      	ldr	r3, [r4, #8]
   39240:	2b03      	cmp	r3, #3
   39242:	d9f6      	bls.n	39232 <validate_args+0xc>
   39244:	e7f3      	b.n	3922e <validate_args+0x8>

00039246 <notify_one>:
{
   39246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3924a:	460d      	mov	r5, r1
   3924c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3924e:	4619      	mov	r1, r3
   39250:	1d28      	adds	r0, r5, #4
{
   39252:	4690      	mov	r8, r2
   39254:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   39256:	f7e9 fb53 	bl	22900 <sys_notify_finalize>
	if (cb) {
   3925a:	4604      	mov	r4, r0
   3925c:	b138      	cbz	r0, 3926e <notify_one+0x28>
		cb(mgr, cli, state, res);
   3925e:	4633      	mov	r3, r6
   39260:	4642      	mov	r2, r8
   39262:	4629      	mov	r1, r5
   39264:	4638      	mov	r0, r7
   39266:	46a4      	mov	ip, r4
}
   39268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   3926c:	4760      	bx	ip
}
   3926e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039272 <onoff_manager_init>:
{
   39272:	b538      	push	{r3, r4, r5, lr}
   39274:	460c      	mov	r4, r1
	if ((mgr == NULL)
   39276:	4605      	mov	r5, r0
   39278:	b158      	cbz	r0, 39292 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   3927a:	b151      	cbz	r1, 39292 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   3927c:	680b      	ldr	r3, [r1, #0]
   3927e:	b143      	cbz	r3, 39292 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   39280:	684b      	ldr	r3, [r1, #4]
   39282:	b133      	cbz	r3, 39292 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   39284:	2220      	movs	r2, #32
   39286:	2100      	movs	r1, #0
   39288:	f004 f9fd 	bl	3d686 <memset>
	return 0;
   3928c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3928e:	612c      	str	r4, [r5, #16]
}
   39290:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   39292:	f06f 0015 	mvn.w	r0, #21
   39296:	e7fb      	b.n	39290 <onoff_manager_init+0x1e>

00039298 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   39298:	4604      	mov	r4, r0
   3929a:	b508      	push	{r3, lr}
   3929c:	4608      	mov	r0, r1
   3929e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   392a0:	461a      	mov	r2, r3
   392a2:	47a0      	blx	r4
	return z_impl_k_current_get();
   392a4:	f7fd f81e 	bl	362e4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   392a8:	f7ec ff24 	bl	260f4 <z_impl_k_thread_abort>

000392ac <chunk_field>:
	if (big_heap(h)) {
   392ac:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   392ae:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   392b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   392b6:	bf2c      	ite	cs
   392b8:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   392bc:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   392c0:	4770      	bx	lr

000392c2 <chunk_set>:
	void *cmem = &buf[c];
   392c2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   392c6:	6880      	ldr	r0, [r0, #8]
   392c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   392cc:	bf2c      	ite	cs
   392ce:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   392d2:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   392d6:	4770      	bx	lr

000392d8 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   392d8:	2201      	movs	r2, #1
{
   392da:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   392dc:	f7ff ffe6 	bl	392ac <chunk_field>
}
   392e0:	40d0      	lsrs	r0, r2
   392e2:	bd08      	pop	{r3, pc}

000392e4 <set_chunk_used>:
	if (big_heap(h)) {
   392e4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   392e6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   392ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   392ee:	d308      	bcc.n	39302 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   392f0:	684b      	ldr	r3, [r1, #4]
		if (used) {
   392f2:	b11a      	cbz	r2, 392fc <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   392f4:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   392f8:	604b      	str	r3, [r1, #4]
   392fa:	4770      	bx	lr
   392fc:	f023 0301 	bic.w	r3, r3, #1
   39300:	e7fa      	b.n	392f8 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   39302:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   39304:	b11a      	cbz	r2, 3930e <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   39306:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3930a:	804b      	strh	r3, [r1, #2]
}
   3930c:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3930e:	f023 0301 	bic.w	r3, r3, #1
   39312:	e7fa      	b.n	3930a <set_chunk_used+0x26>

00039314 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   39314:	0053      	lsls	r3, r2, #1
   39316:	2201      	movs	r2, #1
   39318:	f7ff bfd3 	b.w	392c2 <chunk_set>

0003931c <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   3931c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   39320:	bf34      	ite	cc
   39322:	2304      	movcc	r3, #4
   39324:	2308      	movcs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   39326:	3107      	adds	r1, #7
   39328:	18c8      	adds	r0, r1, r3
}
   3932a:	08c0      	lsrs	r0, r0, #3
   3932c:	4770      	bx	lr

0003932e <bucket_idx.isra.0>:
static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
   3932e:	460a      	mov	r2, r1
   39330:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   39332:	2101      	movs	r1, #1
   39334:	f7ff fff2 	bl	3931c <bytes_to_chunksz.isra.0>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   39338:	3201      	adds	r2, #1
   3933a:	1a12      	subs	r2, r2, r0
	return 31 - __builtin_clz(usable_sz);
   3933c:	fab2 f082 	clz	r0, r2
}
   39340:	f1c0 001f 	rsb	r0, r0, #31
   39344:	bd08      	pop	{r3, pc}

00039346 <free_list_remove_bidx>:
{
   39346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3934a:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   3934c:	2203      	movs	r2, #3
   3934e:	460e      	mov	r6, r1
   39350:	4604      	mov	r4, r0
   39352:	f7ff ffab 	bl	392ac <chunk_field>
	if (next_free_chunk(h, c) == c) {
   39356:	4286      	cmp	r6, r0
   39358:	4605      	mov	r5, r0
   3935a:	f107 0804 	add.w	r8, r7, #4
   3935e:	d10a      	bne.n	39376 <free_list_remove_bidx+0x30>
		h->avail_buckets &= ~(1 << bidx);
   39360:	2201      	movs	r2, #1
   39362:	68e3      	ldr	r3, [r4, #12]
   39364:	40ba      	lsls	r2, r7
   39366:	ea23 0302 	bic.w	r3, r3, r2
   3936a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   3936c:	2300      	movs	r3, #0
   3936e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   39372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   39376:	4631      	mov	r1, r6
   39378:	2202      	movs	r2, #2
   3937a:	4620      	mov	r0, r4
   3937c:	f7ff ff96 	bl	392ac <chunk_field>
   39380:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   39382:	462b      	mov	r3, r5
   39384:	4601      	mov	r1, r0
   39386:	2203      	movs	r2, #3
   39388:	4620      	mov	r0, r4
		b->next = second;
   3938a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   3938e:	f7ff ff98 	bl	392c2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   39392:	4633      	mov	r3, r6
   39394:	4629      	mov	r1, r5
   39396:	4620      	mov	r0, r4
}
   39398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3939c:	2202      	movs	r2, #2
   3939e:	f7ff bf90 	b.w	392c2 <chunk_set>

000393a2 <free_list_remove>:
{
   393a2:	b570      	push	{r4, r5, r6, lr}
   393a4:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
   393a6:	6886      	ldr	r6, [r0, #8]
   393a8:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   393aa:	f7ff ff95 	bl	392d8 <chunk_size>
   393ae:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   393b2:	4601      	mov	r1, r0
   393b4:	d301      	bcc.n	393ba <free_list_remove+0x18>
   393b6:	2801      	cmp	r0, #1
   393b8:	d009      	beq.n	393ce <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   393ba:	4630      	mov	r0, r6
   393bc:	f7ff ffb7 	bl	3932e <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   393c0:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   393c2:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   393c4:	4620      	mov	r0, r4
}
   393c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   393ca:	f7ff bfbc 	b.w	39346 <free_list_remove_bidx>
}
   393ce:	bd70      	pop	{r4, r5, r6, pc}

000393d0 <alloc_chunk>:
{
   393d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   393d4:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   393d6:	6880      	ldr	r0, [r0, #8]
{
   393d8:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   393da:	f7ff ffa8 	bl	3932e <bucket_idx.isra.0>
   393de:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
	if (b->next) {
   393e2:	f8da 9010 	ldr.w	r9, [sl, #16]
	int bi = bucket_idx(h, sz);
   393e6:	4606      	mov	r6, r0
	if (b->next) {
   393e8:	f1b9 0f00 	cmp.w	r9, #0
   393ec:	d01b      	beq.n	39426 <alloc_chunk+0x56>
   393ee:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   393f0:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   393f4:	4628      	mov	r0, r5
   393f6:	4621      	mov	r1, r4
   393f8:	f7ff ff6e 	bl	392d8 <chunk_size>
   393fc:	4540      	cmp	r0, r8
   393fe:	d307      	bcc.n	39410 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   39400:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   39402:	4621      	mov	r1, r4
   39404:	4628      	mov	r0, r5
   39406:	f7ff ff9e 	bl	39346 <free_list_remove_bidx>
}
   3940a:	4620      	mov	r0, r4
   3940c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   39410:	2203      	movs	r2, #3
   39412:	4621      	mov	r1, r4
   39414:	4628      	mov	r0, r5
   39416:	f7ff ff49 	bl	392ac <chunk_field>
		} while (--i && b->next != first);
   3941a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   3941c:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   39420:	d001      	beq.n	39426 <alloc_chunk+0x56>
   39422:	4581      	cmp	r9, r0
   39424:	d1e4      	bne.n	393f0 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   39426:	f04f 34ff 	mov.w	r4, #4294967295
   3942a:	68eb      	ldr	r3, [r5, #12]
   3942c:	3601      	adds	r6, #1
   3942e:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   39430:	401c      	ands	r4, r3
   39432:	d0ea      	beq.n	3940a <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   39434:	fa94 f2a4 	rbit	r2, r4
   39438:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   3943c:	1d13      	adds	r3, r2, #4
   3943e:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   39442:	e7de      	b.n	39402 <alloc_chunk+0x32>

00039444 <split_chunks>:
{
   39444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39448:	4614      	mov	r4, r2
   3944a:	460e      	mov	r6, r1
   3944c:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
   3944e:	f7ff ff43 	bl	392d8 <chunk_size>
	chunksz_t lsz = rc - lc;
   39452:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   39456:	1b37      	subs	r7, r6, r4
   39458:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   3945a:	4642      	mov	r2, r8
   3945c:	4631      	mov	r1, r6
   3945e:	4628      	mov	r0, r5
   39460:	f7ff ff58 	bl	39314 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   39464:	463a      	mov	r2, r7
   39466:	4621      	mov	r1, r4
   39468:	4628      	mov	r0, r5
   3946a:	f7ff ff53 	bl	39314 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   3946e:	4643      	mov	r3, r8
   39470:	2200      	movs	r2, #0
   39472:	4621      	mov	r1, r4
   39474:	4628      	mov	r0, r5
   39476:	f7ff ff24 	bl	392c2 <chunk_set>
	return c + chunk_size(h, c);
   3947a:	4621      	mov	r1, r4
   3947c:	4628      	mov	r0, r5
   3947e:	f7ff ff2b 	bl	392d8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   39482:	463b      	mov	r3, r7
   39484:	1821      	adds	r1, r4, r0
   39486:	2200      	movs	r2, #0
   39488:	4628      	mov	r0, r5
}
   3948a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3948e:	f7ff bf18 	b.w	392c2 <chunk_set>

00039492 <merge_chunks>:
{
   39492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39496:	4616      	mov	r6, r2
   39498:	4604      	mov	r4, r0
   3949a:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   3949c:	f7ff ff1c 	bl	392d8 <chunk_size>
   394a0:	4631      	mov	r1, r6
   394a2:	4605      	mov	r5, r0
   394a4:	4620      	mov	r0, r4
   394a6:	f7ff ff17 	bl	392d8 <chunk_size>
   394aa:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   394ac:	462a      	mov	r2, r5
   394ae:	4639      	mov	r1, r7
   394b0:	4620      	mov	r0, r4
   394b2:	f7ff ff2f 	bl	39314 <set_chunk_size>
	return c + chunk_size(h, c);
   394b6:	4631      	mov	r1, r6
   394b8:	4620      	mov	r0, r4
   394ba:	f7ff ff0d 	bl	392d8 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   394be:	462b      	mov	r3, r5
   394c0:	1831      	adds	r1, r6, r0
   394c2:	2200      	movs	r2, #0
   394c4:	4620      	mov	r0, r4
}
   394c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   394ca:	f7ff befa 	b.w	392c2 <chunk_set>

000394ce <free_list_add>:
{
   394ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   394d2:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
   394d4:	6886      	ldr	r6, [r0, #8]
   394d6:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   394d8:	f7ff fefe 	bl	392d8 <chunk_size>
   394dc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   394e0:	4601      	mov	r1, r0
   394e2:	d301      	bcc.n	394e8 <free_list_add+0x1a>
   394e4:	2801      	cmp	r0, #1
   394e6:	d032      	beq.n	3954e <free_list_add+0x80>
		int bidx = bucket_idx(h, chunk_size(h, c));
   394e8:	4630      	mov	r0, r6
   394ea:	f7ff ff20 	bl	3932e <bucket_idx.isra.0>
	if (b->next == 0U) {
   394ee:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   394f2:	690e      	ldr	r6, [r1, #16]
   394f4:	b996      	cbnz	r6, 3951c <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
   394f6:	2201      	movs	r2, #1
   394f8:	68e3      	ldr	r3, [r4, #12]
   394fa:	4082      	lsls	r2, r0
   394fc:	4313      	orrs	r3, r2
   394fe:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   39500:	2202      	movs	r2, #2
		b->next = c;
   39502:	610d      	str	r5, [r1, #16]
   39504:	462b      	mov	r3, r5
   39506:	4629      	mov	r1, r5
   39508:	4620      	mov	r0, r4
   3950a:	f7ff feda 	bl	392c2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   3950e:	2203      	movs	r2, #3
   39510:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   39512:	4620      	mov	r0, r4
}
   39514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   39518:	f7ff bed3 	b.w	392c2 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   3951c:	2202      	movs	r2, #2
   3951e:	4631      	mov	r1, r6
   39520:	4620      	mov	r0, r4
   39522:	f7ff fec3 	bl	392ac <chunk_field>
   39526:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   39528:	4603      	mov	r3, r0
   3952a:	4629      	mov	r1, r5
   3952c:	4620      	mov	r0, r4
   3952e:	f7ff fec8 	bl	392c2 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   39532:	2203      	movs	r2, #3
   39534:	4633      	mov	r3, r6
   39536:	4629      	mov	r1, r5
   39538:	4620      	mov	r0, r4
   3953a:	f7ff fec2 	bl	392c2 <chunk_set>
   3953e:	4639      	mov	r1, r7
   39540:	462b      	mov	r3, r5
   39542:	4620      	mov	r0, r4
   39544:	f7ff febd 	bl	392c2 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   39548:	2202      	movs	r2, #2
   3954a:	4631      	mov	r1, r6
   3954c:	e7e1      	b.n	39512 <free_list_add+0x44>
   3954e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039552 <free_chunk>:
{
   39552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39554:	460c      	mov	r4, r1
   39556:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   39558:	f7ff febe 	bl	392d8 <chunk_size>
   3955c:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3955e:	2201      	movs	r2, #1
   39560:	4631      	mov	r1, r6
   39562:	4628      	mov	r0, r5
   39564:	f7ff fea2 	bl	392ac <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   39568:	07c3      	lsls	r3, r0, #31
   3956a:	d40c      	bmi.n	39586 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   3956c:	4631      	mov	r1, r6
   3956e:	4628      	mov	r0, r5
   39570:	f7ff ff17 	bl	393a2 <free_list_remove>
	return c + chunk_size(h, c);
   39574:	4621      	mov	r1, r4
   39576:	4628      	mov	r0, r5
   39578:	f7ff feae 	bl	392d8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   3957c:	4621      	mov	r1, r4
   3957e:	1822      	adds	r2, r4, r0
   39580:	4628      	mov	r0, r5
   39582:	f7ff ff86 	bl	39492 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   39586:	2200      	movs	r2, #0
   39588:	4621      	mov	r1, r4
   3958a:	4628      	mov	r0, r5
   3958c:	f7ff fe8e 	bl	392ac <chunk_field>
   39590:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   39592:	2201      	movs	r2, #1
   39594:	4639      	mov	r1, r7
   39596:	4628      	mov	r0, r5
   39598:	f7ff fe88 	bl	392ac <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   3959c:	ea10 0602 	ands.w	r6, r0, r2
   395a0:	d113      	bne.n	395ca <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   395a2:	4639      	mov	r1, r7
   395a4:	4628      	mov	r0, r5
   395a6:	f7ff fefc 	bl	393a2 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   395aa:	4621      	mov	r1, r4
   395ac:	4632      	mov	r2, r6
   395ae:	4628      	mov	r0, r5
   395b0:	f7ff fe7c 	bl	392ac <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   395b4:	4622      	mov	r2, r4
   395b6:	1a21      	subs	r1, r4, r0
   395b8:	4628      	mov	r0, r5
   395ba:	f7ff ff6a 	bl	39492 <merge_chunks>
   395be:	4621      	mov	r1, r4
   395c0:	4632      	mov	r2, r6
   395c2:	4628      	mov	r0, r5
   395c4:	f7ff fe72 	bl	392ac <chunk_field>
   395c8:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   395ca:	4621      	mov	r1, r4
   395cc:	4628      	mov	r0, r5
}
   395ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   395d2:	f7ff bf7c 	b.w	394ce <free_list_add>

000395d6 <sys_heap_alloc>:
{
   395d6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   395d8:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   395da:	b909      	cbnz	r1, 395e0 <sys_heap_alloc+0xa>
		return NULL;
   395dc:	2000      	movs	r0, #0
}
   395de:	bd70      	pop	{r4, r5, r6, pc}
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   395e0:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   395e2:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   395e6:	d9f9      	bls.n	395dc <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   395e8:	f7ff fe98 	bl	3931c <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   395ec:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   395ee:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   395f0:	4630      	mov	r0, r6
   395f2:	f7ff feed 	bl	393d0 <alloc_chunk>
	if (c == 0U) {
   395f6:	4604      	mov	r4, r0
   395f8:	2800      	cmp	r0, #0
   395fa:	d0ef      	beq.n	395dc <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   395fc:	4601      	mov	r1, r0
   395fe:	4630      	mov	r0, r6
   39600:	f7ff fe6a 	bl	392d8 <chunk_size>
   39604:	42a8      	cmp	r0, r5
   39606:	d909      	bls.n	3961c <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   39608:	4425      	add	r5, r4
   3960a:	4621      	mov	r1, r4
   3960c:	4630      	mov	r0, r6
   3960e:	462a      	mov	r2, r5
   39610:	f7ff ff18 	bl	39444 <split_chunks>
		free_list_add(h, c + chunk_sz);
   39614:	4629      	mov	r1, r5
   39616:	4630      	mov	r0, r6
   39618:	f7ff ff59 	bl	394ce <free_list_add>
	set_chunk_used(h, c, true);
   3961c:	4630      	mov	r0, r6
   3961e:	2201      	movs	r2, #1
   39620:	4621      	mov	r1, r4
   39622:	f7ff fe5f 	bl	392e4 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   39626:	68b3      	ldr	r3, [r6, #8]
   39628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   3962c:	bf34      	ite	cc
   3962e:	2304      	movcc	r3, #4
   39630:	2308      	movcs	r3, #8
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   39632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   39636:	4418      	add	r0, r3
	return chunk_mem(h, c);
   39638:	e7d1      	b.n	395de <sys_heap_alloc+0x8>

0003963a <outs>:
{
   3963a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3963e:	4607      	mov	r7, r0
   39640:	4688      	mov	r8, r1
   39642:	4615      	mov	r5, r2
   39644:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   39646:	4614      	mov	r4, r2
   39648:	42b4      	cmp	r4, r6
   3964a:	d305      	bcc.n	39658 <outs+0x1e>
   3964c:	b10e      	cbz	r6, 39652 <outs+0x18>
	return (int)count;
   3964e:	1b60      	subs	r0, r4, r5
   39650:	e008      	b.n	39664 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   39652:	7823      	ldrb	r3, [r4, #0]
   39654:	2b00      	cmp	r3, #0
   39656:	d0fa      	beq.n	3964e <outs+0x14>
		int rc = out((int)*sp++, ctx);
   39658:	4641      	mov	r1, r8
   3965a:	f814 0b01 	ldrb.w	r0, [r4], #1
   3965e:	47b8      	blx	r7
		if (rc < 0) {
   39660:	2800      	cmp	r0, #0
   39662:	daf1      	bge.n	39648 <outs+0xe>
}
   39664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039668 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   39668:	4040      	eors	r0, r0
   3966a:	f380 8811 	msr	BASEPRI, r0
   3966e:	f04f 0004 	mov.w	r0, #4
   39672:	df02      	svc	2
}
   39674:	4770      	bx	lr

00039676 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   39676:	4770      	bx	lr

00039678 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   39678:	b084      	sub	sp, #16
   3967a:	ab04      	add	r3, sp, #16
   3967c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   39680:	f89d 3004 	ldrb.w	r3, [sp, #4]
   39684:	2b06      	cmp	r3, #6
   39686:	d108      	bne.n	3969a <pm_power_state_set+0x22>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   39688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   3968c:	2201      	movs	r2, #1
   3968e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   39692:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   39696:	bf20      	wfe
    while (true)
   39698:	e7fd      	b.n	39696 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   3969a:	b004      	add	sp, #16
   3969c:	4770      	bx	lr

0003969e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   3969e:	b084      	sub	sp, #16
   396a0:	ab04      	add	r3, sp, #16
   396a2:	e903 0007 	stmdb	r3, {r0, r1, r2}
   396a6:	2300      	movs	r3, #0
   396a8:	f383 8811 	msr	BASEPRI, r3
   396ac:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   396b0:	b004      	add	sp, #16
   396b2:	4770      	bx	lr

000396b4 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   396b4:	2300      	movs	r3, #0
	list->head = NULL;
   396b6:	e9c0 3300 	strd	r3, r3, [r0]
}
   396ba:	4770      	bx	lr

000396bc <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   396bc:	6803      	ldr	r3, [r0, #0]
   396be:	b923      	cbnz	r3, 396ca <log_list_add_tail+0xe>
		list->head = msg;
   396c0:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   396c2:	2300      	movs	r3, #0
	list->tail = msg;
   396c4:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   396c6:	600b      	str	r3, [r1, #0]
}
   396c8:	4770      	bx	lr
		list->tail->next = msg;
   396ca:	6843      	ldr	r3, [r0, #4]
   396cc:	6019      	str	r1, [r3, #0]
   396ce:	e7f8      	b.n	396c2 <log_list_add_tail+0x6>

000396d0 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   396d0:	6800      	ldr	r0, [r0, #0]
   396d2:	4770      	bx	lr

000396d4 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   396d4:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   396d6:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   396d8:	b108      	cbz	r0, 396de <log_list_head_get+0xa>
		list->head = list->head->next;
   396da:	6802      	ldr	r2, [r0, #0]
   396dc:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   396de:	4770      	bx	lr

000396e0 <z_log_msg_std_alloc>:
{
   396e0:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   396e2:	f7ea fdad 	bl	24240 <log_msg_chunk_alloc>
	if (msg != NULL) {
   396e6:	b118      	cbz	r0, 396f0 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   396e8:	2301      	movs	r3, #1
   396ea:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   396ec:	2300      	movs	r3, #0
   396ee:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   396f0:	bd08      	pop	{r3, pc}

000396f2 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   396f2:	f7ec b831 	b.w	25758 <sys_clock_cycle_get_32>

000396f6 <dummy_timestamp>:
static log_timestamp_t dummy_timestamp(void)
   396f6:	2000      	movs	r0, #0
   396f8:	4770      	bx	lr

000396fa <log_0>:
{
   396fa:	b538      	push	{r3, r4, r5, lr}
   396fc:	4605      	mov	r5, r0
   396fe:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   39700:	f7ff ffee 	bl	396e0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   39704:	b128      	cbz	r0, 39712 <log_0+0x18>
		msg_finalize(msg, src_level);
   39706:	4621      	mov	r1, r4
		msg->str = str;
   39708:	6105      	str	r5, [r0, #16]
}
   3970a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   3970e:	f7ea bcdf 	b.w	240d0 <msg_finalize>
}
   39712:	bd38      	pop	{r3, r4, r5, pc}

00039714 <log_1>:
{
   39714:	b570      	push	{r4, r5, r6, lr}
   39716:	4606      	mov	r6, r0
   39718:	460d      	mov	r5, r1
   3971a:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   3971c:	f7ff ffe0 	bl	396e0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   39720:	b158      	cbz	r0, 3973a <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   39722:	2101      	movs	r1, #1
   39724:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   39726:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   39728:	f361 1207 	bfi	r2, r1, #4, #4
   3972c:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   3972e:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   39730:	6145      	str	r5, [r0, #20]
}
   39732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   39736:	f7ea bccb 	b.w	240d0 <msg_finalize>
}
   3973a:	bd70      	pop	{r4, r5, r6, pc}

0003973c <log_2>:
{
   3973c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39740:	4680      	mov	r8, r0
   39742:	460f      	mov	r7, r1
   39744:	4616      	mov	r6, r2
   39746:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   39748:	f7ff ffca 	bl	396e0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   3974c:	b168      	cbz	r0, 3976a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   3974e:	2202      	movs	r2, #2
   39750:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   39752:	4629      	mov	r1, r5
   39754:	f362 1307 	bfi	r3, r2, #4, #4
   39758:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   3975a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   3975e:	f8c0 8010 	str.w	r8, [r0, #16]
}
   39762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   39766:	f7ea bcb3 	b.w	240d0 <msg_finalize>
}
   3976a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003976e <log_3>:
{
   3976e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39772:	4680      	mov	r8, r0
   39774:	460f      	mov	r7, r1
   39776:	4616      	mov	r6, r2
   39778:	461d      	mov	r5, r3
   3977a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   3977e:	f7ff ffaf 	bl	396e0 <z_log_msg_std_alloc>

	if (msg != NULL) {
   39782:	b170      	cbz	r0, 397a2 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   39784:	2203      	movs	r2, #3
   39786:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   39788:	4649      	mov	r1, r9
   3978a:	f362 1307 	bfi	r3, r2, #4, #4
   3978e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   39790:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   39794:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   39798:	61c5      	str	r5, [r0, #28]
}
   3979a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   3979e:	f7ea bc97 	b.w	240d0 <msg_finalize>
}
   397a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000397a6 <log_n>:
{
   397a6:	b510      	push	{r4, lr}
   397a8:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   397aa:	f7ea fd99 	bl	242e0 <log_msg_create_n>
		if (msg == NULL) {
   397ae:	b120      	cbz	r0, 397ba <log_n+0x14>
		msg_finalize(msg, src_level);
   397b0:	4621      	mov	r1, r4
}
   397b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   397b6:	f7ea bc8b 	b.w	240d0 <msg_finalize>
}
   397ba:	bd10      	pop	{r4, pc}

000397bc <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   397bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   397c0:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   397c2:	8903      	ldrh	r3, [r0, #8]
{
   397c4:	460e      	mov	r6, r1
	uint32_t available_len = msg->hdr.params.hexdump.length;
   397c6:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   397ca:	42a3      	cmp	r3, r4
{
   397cc:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   397d0:	d803      	bhi.n	397da <log_msg_hexdump_data_op+0x1e>
		*length = 0;
   397d2:	2300      	movs	r3, #0
   397d4:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   397d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   397da:	6811      	ldr	r1, [r2, #0]
   397dc:	4421      	add	r1, r4
   397de:	4299      	cmp	r1, r3
		*length = available_len - offset;
   397e0:	bf84      	itt	hi
   397e2:	1b19      	subhi	r1, r3, r4
   397e4:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   397e6:	2b0c      	cmp	r3, #12
	req_len = *length;
   397e8:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   397ec:	d92b      	bls.n	39846 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   397ee:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   397f0:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   397f4:	d82e      	bhi.n	39854 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   397f6:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   397f8:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   397fa:	454b      	cmp	r3, r9
   397fc:	bf28      	it	cs
   397fe:	464b      	movcs	r3, r9
			(void)memcpy(&head_data[offset], data, cpy_len);
   39800:	4420      	add	r0, r4
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   39802:	461d      	mov	r5, r3
   39804:	461a      	mov	r2, r3
		if (put_op) {
   39806:	b317      	cbz	r7, 3984e <log_msg_hexdump_data_op+0x92>
   39808:	4631      	mov	r1, r6
   3980a:	f003 ff2f 	bl	3d66c <memcpy>
		req_len -= cpy_len;
   3980e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   39812:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   39814:	f1b9 0f00 	cmp.w	r9, #0
   39818:	d0dd      	beq.n	397d6 <log_msg_hexdump_data_op+0x1a>
   3981a:	f1b8 0f00 	cmp.w	r8, #0
   3981e:	d0da      	beq.n	397d6 <log_msg_hexdump_data_op+0x1a>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   39820:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   39824:	454d      	cmp	r5, r9
   39826:	bf28      	it	cs
   39828:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   3982a:	1d20      	adds	r0, r4, #4
   3982c:	462a      	mov	r2, r5
   3982e:	4440      	add	r0, r8
		if (put_op) {
   39830:	b1bf      	cbz	r7, 39862 <log_msg_hexdump_data_op+0xa6>
   39832:	4631      	mov	r1, r6
   39834:	f003 ff1a 	bl	3d66c <memcpy>
		offset = 0;
   39838:	2400      	movs	r4, #0
		cont = cont->next;
   3983a:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   3983e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   39842:	442e      	add	r6, r5
   39844:	e7e6      	b.n	39814 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   39846:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   3984a:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   3984c:	e7d5      	b.n	397fa <log_msg_hexdump_data_op+0x3e>
   3984e:	4601      	mov	r1, r0
   39850:	4630      	mov	r0, r6
   39852:	e7da      	b.n	3980a <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   39854:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   39856:	2c1b      	cmp	r4, #27
   39858:	d9dc      	bls.n	39814 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   3985a:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   3985e:	3c1c      	subs	r4, #28
   39860:	e7f9      	b.n	39856 <log_msg_hexdump_data_op+0x9a>
   39862:	4601      	mov	r1, r0
   39864:	4630      	mov	r0, r6
   39866:	e7e5      	b.n	39834 <log_msg_hexdump_data_op+0x78>

00039868 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   39868:	3004      	adds	r0, #4
   3986a:	e8d0 3fef 	ldaex	r3, [r0]
   3986e:	3301      	adds	r3, #1
   39870:	e8c0 3fe2 	stlex	r2, r3, [r0]
   39874:	2a00      	cmp	r2, #0
   39876:	d1f8      	bne.n	3986a <log_msg_get+0x2>
}
   39878:	4770      	bx	lr

0003987a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   3987a:	7a40      	ldrb	r0, [r0, #9]
}
   3987c:	0900      	lsrs	r0, r0, #4
   3987e:	4770      	bx	lr

00039880 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   39880:	7a43      	ldrb	r3, [r0, #9]
   39882:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   39886:	ea4f 1213 	mov.w	r2, r3, lsr #4
   3988a:	d216      	bcs.n	398ba <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   3988c:	2a03      	cmp	r2, #3
   3988e:	d803      	bhi.n	39898 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   39890:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   39894:	6940      	ldr	r0, [r0, #20]
   39896:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   39898:	2901      	cmp	r1, #1
   3989a:	d803      	bhi.n	398a4 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   3989c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   398a0:	6980      	ldr	r0, [r0, #24]
   398a2:	4770      	bx	lr
	cont = msg->payload.ext.next;
   398a4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   398a6:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   398a8:	2906      	cmp	r1, #6
   398aa:	d803      	bhi.n	398b4 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   398ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   398b0:	6858      	ldr	r0, [r3, #4]
   398b2:	4770      	bx	lr
		cont = cont->next;
   398b4:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   398b6:	3907      	subs	r1, #7
		cont = cont->next;
   398b8:	e7f6      	b.n	398a8 <log_msg_arg_get+0x28>
		return 0;
   398ba:	2000      	movs	r0, #0
}
   398bc:	4770      	bx	lr

000398be <log_msg_put>:
{
   398be:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   398c0:	1d02      	adds	r2, r0, #4
   398c2:	e8d2 cfef 	ldaex	ip, [r2]
   398c6:	f10c 3cff 	add.w	ip, ip, #4294967295
   398ca:	e8c2 cfe1 	stlex	r1, ip, [r2]
   398ce:	2900      	cmp	r1, #0
   398d0:	d1f7      	bne.n	398c2 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   398d2:	685b      	ldr	r3, [r3, #4]
   398d4:	b90b      	cbnz	r3, 398da <log_msg_put+0x1c>
		msg_free(msg);
   398d6:	f7ea bcc7 	b.w	24268 <msg_free>
}
   398da:	4770      	bx	lr

000398dc <log_msg_str_get>:
}
   398dc:	6900      	ldr	r0, [r0, #16]
   398de:	4770      	bx	lr

000398e0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   398e0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   398e2:	2400      	movs	r4, #0
   398e4:	9400      	str	r4, [sp, #0]
   398e6:	f7ff ff69 	bl	397bc <log_msg_hexdump_data_op>
}
   398ea:	b002      	add	sp, #8
   398ec:	bd10      	pop	{r4, pc}

000398ee <buffer_write>:
{
   398ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   398f0:	4606      	mov	r6, r0
   398f2:	460d      	mov	r5, r1
   398f4:	4614      	mov	r4, r2
   398f6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   398f8:	4621      	mov	r1, r4
   398fa:	4628      	mov	r0, r5
   398fc:	463a      	mov	r2, r7
   398fe:	47b0      	blx	r6
	} while (len != 0);
   39900:	1a24      	subs	r4, r4, r0
		buf += processed;
   39902:	4405      	add	r5, r0
	} while (len != 0);
   39904:	d1f8      	bne.n	398f8 <buffer_write+0xa>
}
   39906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00039908 <std_print>:
{
   39908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3990c:	b08e      	sub	sp, #56	; 0x38
   3990e:	af0e      	add	r7, sp, #56	; 0x38
   39910:	4680      	mov	r8, r0
   39912:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   39914:	f7ff ffe2 	bl	398dc <log_msg_str_get>
   39918:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   3991a:	4640      	mov	r0, r8
   3991c:	f7ff ffad 	bl	3987a <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   39920:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   39924:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   39926:	0083      	lsls	r3, r0, #2
   39928:	3307      	adds	r3, #7
   3992a:	f023 0307 	bic.w	r3, r3, #7
   3992e:	ebad 0d03 	sub.w	sp, sp, r3
   39932:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   39934:	45d1      	cmp	r9, sl
   39936:	d116      	bne.n	39966 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   39938:	4640      	mov	r0, r8
   3993a:	f7ff ff9e 	bl	3987a <log_msg_nargs_get>
   3993e:	280f      	cmp	r0, #15
   39940:	d81e      	bhi.n	39980 <std_print+0x78>
   39942:	e8df f010 	tbh	[pc, r0, lsl #1]
   39946:	0019      	.short	0x0019
   39948:	00260020 	.word	0x00260020
   3994c:	0036002d 	.word	0x0036002d
   39950:	004e0041 	.word	0x004e0041
   39954:	006e005d 	.word	0x006e005d
   39958:	00960081 	.word	0x00960081
   3995c:	00c600ad 	.word	0x00c600ad
   39960:	00fe00e1 	.word	0x00fe00e1
   39964:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   39966:	4649      	mov	r1, r9
   39968:	4640      	mov	r0, r8
   3996a:	f7ff ff89 	bl	39880 <log_msg_arg_get>
   3996e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   39972:	f109 0901 	add.w	r9, r9, #1
   39976:	e7dd      	b.n	39934 <std_print+0x2c>
		print_formatted(output, str);
   39978:	4631      	mov	r1, r6
   3997a:	4628      	mov	r0, r5
   3997c:	f7ea fd2a 	bl	243d4 <print_formatted>
}
   39980:	46bd      	mov	sp, r7
   39982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   39986:	4631      	mov	r1, r6
   39988:	4628      	mov	r0, r5
   3998a:	6822      	ldr	r2, [r4, #0]
   3998c:	f7ea fd22 	bl	243d4 <print_formatted>
		break;
   39990:	e7f6      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   39992:	4631      	mov	r1, r6
   39994:	e9d4 2300 	ldrd	r2, r3, [r4]
   39998:	4628      	mov	r0, r5
   3999a:	f7ea fd1b 	bl	243d4 <print_formatted>
		break;
   3999e:	e7ef      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   399a0:	68a3      	ldr	r3, [r4, #8]
   399a2:	4631      	mov	r1, r6
   399a4:	9300      	str	r3, [sp, #0]
   399a6:	4628      	mov	r0, r5
   399a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   399ac:	f7ea fd12 	bl	243d4 <print_formatted>
		break;
   399b0:	e7e6      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   399b2:	68e3      	ldr	r3, [r4, #12]
   399b4:	4631      	mov	r1, r6
   399b6:	9301      	str	r3, [sp, #4]
   399b8:	68a3      	ldr	r3, [r4, #8]
   399ba:	4628      	mov	r0, r5
   399bc:	9300      	str	r3, [sp, #0]
   399be:	e9d4 2300 	ldrd	r2, r3, [r4]
   399c2:	f7ea fd07 	bl	243d4 <print_formatted>
		break;
   399c6:	e7db      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   399c8:	6923      	ldr	r3, [r4, #16]
   399ca:	4631      	mov	r1, r6
   399cc:	9302      	str	r3, [sp, #8]
   399ce:	68e3      	ldr	r3, [r4, #12]
   399d0:	4628      	mov	r0, r5
   399d2:	9301      	str	r3, [sp, #4]
   399d4:	68a3      	ldr	r3, [r4, #8]
   399d6:	9300      	str	r3, [sp, #0]
   399d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   399dc:	f7ea fcfa 	bl	243d4 <print_formatted>
		break;
   399e0:	e7ce      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   399e2:	6963      	ldr	r3, [r4, #20]
   399e4:	4631      	mov	r1, r6
   399e6:	9303      	str	r3, [sp, #12]
   399e8:	6923      	ldr	r3, [r4, #16]
   399ea:	4628      	mov	r0, r5
   399ec:	9302      	str	r3, [sp, #8]
   399ee:	68e3      	ldr	r3, [r4, #12]
   399f0:	9301      	str	r3, [sp, #4]
   399f2:	68a3      	ldr	r3, [r4, #8]
   399f4:	9300      	str	r3, [sp, #0]
   399f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   399fa:	f7ea fceb 	bl	243d4 <print_formatted>
		break;
   399fe:	e7bf      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   39a00:	69a3      	ldr	r3, [r4, #24]
   39a02:	4631      	mov	r1, r6
   39a04:	9304      	str	r3, [sp, #16]
   39a06:	6963      	ldr	r3, [r4, #20]
   39a08:	4628      	mov	r0, r5
   39a0a:	9303      	str	r3, [sp, #12]
   39a0c:	6923      	ldr	r3, [r4, #16]
   39a0e:	9302      	str	r3, [sp, #8]
   39a10:	68e3      	ldr	r3, [r4, #12]
   39a12:	9301      	str	r3, [sp, #4]
   39a14:	68a3      	ldr	r3, [r4, #8]
   39a16:	9300      	str	r3, [sp, #0]
   39a18:	e9d4 2300 	ldrd	r2, r3, [r4]
   39a1c:	f7ea fcda 	bl	243d4 <print_formatted>
		break;
   39a20:	e7ae      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   39a22:	69e3      	ldr	r3, [r4, #28]
   39a24:	4631      	mov	r1, r6
   39a26:	9305      	str	r3, [sp, #20]
   39a28:	69a3      	ldr	r3, [r4, #24]
   39a2a:	4628      	mov	r0, r5
   39a2c:	9304      	str	r3, [sp, #16]
   39a2e:	6963      	ldr	r3, [r4, #20]
   39a30:	9303      	str	r3, [sp, #12]
   39a32:	6923      	ldr	r3, [r4, #16]
   39a34:	9302      	str	r3, [sp, #8]
   39a36:	68e3      	ldr	r3, [r4, #12]
   39a38:	9301      	str	r3, [sp, #4]
   39a3a:	68a3      	ldr	r3, [r4, #8]
   39a3c:	9300      	str	r3, [sp, #0]
   39a3e:	e9d4 2300 	ldrd	r2, r3, [r4]
   39a42:	f7ea fcc7 	bl	243d4 <print_formatted>
		break;
   39a46:	e79b      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   39a48:	6a23      	ldr	r3, [r4, #32]
   39a4a:	4631      	mov	r1, r6
   39a4c:	9306      	str	r3, [sp, #24]
   39a4e:	69e3      	ldr	r3, [r4, #28]
   39a50:	4628      	mov	r0, r5
   39a52:	9305      	str	r3, [sp, #20]
   39a54:	69a3      	ldr	r3, [r4, #24]
   39a56:	9304      	str	r3, [sp, #16]
   39a58:	6963      	ldr	r3, [r4, #20]
   39a5a:	9303      	str	r3, [sp, #12]
   39a5c:	6923      	ldr	r3, [r4, #16]
   39a5e:	9302      	str	r3, [sp, #8]
   39a60:	68e3      	ldr	r3, [r4, #12]
   39a62:	9301      	str	r3, [sp, #4]
   39a64:	68a3      	ldr	r3, [r4, #8]
   39a66:	9300      	str	r3, [sp, #0]
   39a68:	e9d4 2300 	ldrd	r2, r3, [r4]
   39a6c:	f7ea fcb2 	bl	243d4 <print_formatted>
		break;
   39a70:	e786      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   39a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39a74:	4631      	mov	r1, r6
   39a76:	9307      	str	r3, [sp, #28]
   39a78:	6a23      	ldr	r3, [r4, #32]
   39a7a:	4628      	mov	r0, r5
   39a7c:	9306      	str	r3, [sp, #24]
   39a7e:	69e3      	ldr	r3, [r4, #28]
   39a80:	9305      	str	r3, [sp, #20]
   39a82:	69a3      	ldr	r3, [r4, #24]
   39a84:	9304      	str	r3, [sp, #16]
   39a86:	6963      	ldr	r3, [r4, #20]
   39a88:	9303      	str	r3, [sp, #12]
   39a8a:	6923      	ldr	r3, [r4, #16]
   39a8c:	9302      	str	r3, [sp, #8]
   39a8e:	68e3      	ldr	r3, [r4, #12]
   39a90:	9301      	str	r3, [sp, #4]
   39a92:	68a3      	ldr	r3, [r4, #8]
   39a94:	9300      	str	r3, [sp, #0]
   39a96:	e9d4 2300 	ldrd	r2, r3, [r4]
   39a9a:	f7ea fc9b 	bl	243d4 <print_formatted>
		break;
   39a9e:	e76f      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   39aa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   39aa2:	4631      	mov	r1, r6
   39aa4:	9308      	str	r3, [sp, #32]
   39aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39aa8:	4628      	mov	r0, r5
   39aaa:	9307      	str	r3, [sp, #28]
   39aac:	6a23      	ldr	r3, [r4, #32]
   39aae:	9306      	str	r3, [sp, #24]
   39ab0:	69e3      	ldr	r3, [r4, #28]
   39ab2:	9305      	str	r3, [sp, #20]
   39ab4:	69a3      	ldr	r3, [r4, #24]
   39ab6:	9304      	str	r3, [sp, #16]
   39ab8:	6963      	ldr	r3, [r4, #20]
   39aba:	9303      	str	r3, [sp, #12]
   39abc:	6923      	ldr	r3, [r4, #16]
   39abe:	9302      	str	r3, [sp, #8]
   39ac0:	68e3      	ldr	r3, [r4, #12]
   39ac2:	9301      	str	r3, [sp, #4]
   39ac4:	68a3      	ldr	r3, [r4, #8]
   39ac6:	9300      	str	r3, [sp, #0]
   39ac8:	e9d4 2300 	ldrd	r2, r3, [r4]
   39acc:	f7ea fc82 	bl	243d4 <print_formatted>
		break;
   39ad0:	e756      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   39ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   39ad4:	4631      	mov	r1, r6
   39ad6:	9309      	str	r3, [sp, #36]	; 0x24
   39ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   39ada:	4628      	mov	r0, r5
   39adc:	9308      	str	r3, [sp, #32]
   39ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39ae0:	9307      	str	r3, [sp, #28]
   39ae2:	6a23      	ldr	r3, [r4, #32]
   39ae4:	9306      	str	r3, [sp, #24]
   39ae6:	69e3      	ldr	r3, [r4, #28]
   39ae8:	9305      	str	r3, [sp, #20]
   39aea:	69a3      	ldr	r3, [r4, #24]
   39aec:	9304      	str	r3, [sp, #16]
   39aee:	6963      	ldr	r3, [r4, #20]
   39af0:	9303      	str	r3, [sp, #12]
   39af2:	6923      	ldr	r3, [r4, #16]
   39af4:	9302      	str	r3, [sp, #8]
   39af6:	68e3      	ldr	r3, [r4, #12]
   39af8:	9301      	str	r3, [sp, #4]
   39afa:	68a3      	ldr	r3, [r4, #8]
   39afc:	9300      	str	r3, [sp, #0]
   39afe:	e9d4 2300 	ldrd	r2, r3, [r4]
   39b02:	f7ea fc67 	bl	243d4 <print_formatted>
		break;
   39b06:	e73b      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   39b08:	6b23      	ldr	r3, [r4, #48]	; 0x30
   39b0a:	4631      	mov	r1, r6
   39b0c:	930a      	str	r3, [sp, #40]	; 0x28
   39b0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   39b10:	4628      	mov	r0, r5
   39b12:	9309      	str	r3, [sp, #36]	; 0x24
   39b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   39b16:	9308      	str	r3, [sp, #32]
   39b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39b1a:	9307      	str	r3, [sp, #28]
   39b1c:	6a23      	ldr	r3, [r4, #32]
   39b1e:	9306      	str	r3, [sp, #24]
   39b20:	69e3      	ldr	r3, [r4, #28]
   39b22:	9305      	str	r3, [sp, #20]
   39b24:	69a3      	ldr	r3, [r4, #24]
   39b26:	9304      	str	r3, [sp, #16]
   39b28:	6963      	ldr	r3, [r4, #20]
   39b2a:	9303      	str	r3, [sp, #12]
   39b2c:	6923      	ldr	r3, [r4, #16]
   39b2e:	9302      	str	r3, [sp, #8]
   39b30:	68e3      	ldr	r3, [r4, #12]
   39b32:	9301      	str	r3, [sp, #4]
   39b34:	68a3      	ldr	r3, [r4, #8]
   39b36:	9300      	str	r3, [sp, #0]
   39b38:	e9d4 2300 	ldrd	r2, r3, [r4]
   39b3c:	f7ea fc4a 	bl	243d4 <print_formatted>
		break;
   39b40:	e71e      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   39b42:	6b63      	ldr	r3, [r4, #52]	; 0x34
   39b44:	4631      	mov	r1, r6
   39b46:	930b      	str	r3, [sp, #44]	; 0x2c
   39b48:	6b23      	ldr	r3, [r4, #48]	; 0x30
   39b4a:	4628      	mov	r0, r5
   39b4c:	930a      	str	r3, [sp, #40]	; 0x28
   39b4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   39b50:	9309      	str	r3, [sp, #36]	; 0x24
   39b52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   39b54:	9308      	str	r3, [sp, #32]
   39b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39b58:	9307      	str	r3, [sp, #28]
   39b5a:	6a23      	ldr	r3, [r4, #32]
   39b5c:	9306      	str	r3, [sp, #24]
   39b5e:	69e3      	ldr	r3, [r4, #28]
   39b60:	9305      	str	r3, [sp, #20]
   39b62:	69a3      	ldr	r3, [r4, #24]
   39b64:	9304      	str	r3, [sp, #16]
   39b66:	6963      	ldr	r3, [r4, #20]
   39b68:	9303      	str	r3, [sp, #12]
   39b6a:	6923      	ldr	r3, [r4, #16]
   39b6c:	9302      	str	r3, [sp, #8]
   39b6e:	68e3      	ldr	r3, [r4, #12]
   39b70:	9301      	str	r3, [sp, #4]
   39b72:	68a3      	ldr	r3, [r4, #8]
   39b74:	9300      	str	r3, [sp, #0]
   39b76:	e9d4 2300 	ldrd	r2, r3, [r4]
   39b7a:	f7ea fc2b 	bl	243d4 <print_formatted>
		break;
   39b7e:	e6ff      	b.n	39980 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   39b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   39b82:	4631      	mov	r1, r6
   39b84:	930c      	str	r3, [sp, #48]	; 0x30
   39b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   39b88:	4628      	mov	r0, r5
   39b8a:	930b      	str	r3, [sp, #44]	; 0x2c
   39b8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   39b8e:	930a      	str	r3, [sp, #40]	; 0x28
   39b90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   39b92:	9309      	str	r3, [sp, #36]	; 0x24
   39b94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   39b96:	9308      	str	r3, [sp, #32]
   39b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39b9a:	9307      	str	r3, [sp, #28]
   39b9c:	6a23      	ldr	r3, [r4, #32]
   39b9e:	9306      	str	r3, [sp, #24]
   39ba0:	69e3      	ldr	r3, [r4, #28]
   39ba2:	9305      	str	r3, [sp, #20]
   39ba4:	69a3      	ldr	r3, [r4, #24]
   39ba6:	9304      	str	r3, [sp, #16]
   39ba8:	6963      	ldr	r3, [r4, #20]
   39baa:	9303      	str	r3, [sp, #12]
   39bac:	6923      	ldr	r3, [r4, #16]
   39bae:	9302      	str	r3, [sp, #8]
   39bb0:	68e3      	ldr	r3, [r4, #12]
   39bb2:	9301      	str	r3, [sp, #4]
   39bb4:	68a3      	ldr	r3, [r4, #8]
   39bb6:	9300      	str	r3, [sp, #0]
   39bb8:	e9d4 2300 	ldrd	r2, r3, [r4]
   39bbc:	f7ea fc0a 	bl	243d4 <print_formatted>
}
   39bc0:	e6de      	b.n	39980 <std_print+0x78>

00039bc2 <log_output_flush>:
		     output->control_block->offset,
   39bc2:	6842      	ldr	r2, [r0, #4]
{
   39bc4:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   39bc6:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   39bca:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   39bcc:	6881      	ldr	r1, [r0, #8]
   39bce:	6800      	ldr	r0, [r0, #0]
   39bd0:	f7ff fe8d 	bl	398ee <buffer_write>
	output->control_block->offset = 0;
   39bd4:	2200      	movs	r2, #0
   39bd6:	6863      	ldr	r3, [r4, #4]
   39bd8:	601a      	str	r2, [r3, #0]
}
   39bda:	bd10      	pop	{r4, pc}

00039bdc <sntp_init>:
{
   39bdc:	b570      	push	{r4, r5, r6, lr}
   39bde:	460d      	mov	r5, r1
   39be0:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   39be2:	4604      	mov	r4, r0
   39be4:	b330      	cbz	r0, 39c34 <sntp_init+0x58>
   39be6:	b329      	cbz	r1, 39c34 <sntp_init+0x58>
__ssp_bos_icheck3(memset, void *, int)
   39be8:	2214      	movs	r2, #20
   39bea:	2100      	movs	r1, #0
   39bec:	f003 fd4b 	bl	3d686 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   39bf0:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   39bf2:	2211      	movs	r2, #17
   39bf4:	2102      	movs	r1, #2
   39bf6:	f7ea ff89 	bl	24b0c <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   39bfa:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   39bfc:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   39bfe:	da04      	bge.n	39c0a <sntp_init+0x2e>
		return -errno;
   39c00:	f000 fa53 	bl	3a0aa <__errno>
   39c04:	6800      	ldr	r0, [r0, #0]
   39c06:	4240      	negs	r0, r0
}
   39c08:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   39c0a:	4632      	mov	r2, r6
   39c0c:	4629      	mov	r1, r5
   39c0e:	f000 f854 	bl	39cba <z_impl_zsock_connect>
	if (ret < 0) {
   39c12:	2800      	cmp	r0, #0
   39c14:	68e0      	ldr	r0, [r4, #12]
   39c16:	da02      	bge.n	39c1e <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   39c18:	f000 f82b 	bl	39c72 <z_impl_zsock_close>
   39c1c:	e7f0      	b.n	39c00 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   39c1e:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   39c20:	68a3      	ldr	r3, [r4, #8]
   39c22:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   39c26:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   39c2a:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   39c2c:	8091      	strh	r1, [r2, #4]
	return 0;
   39c2e:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   39c30:	60a3      	str	r3, [r4, #8]
	return 0;
   39c32:	e7e9      	b.n	39c08 <sntp_init+0x2c>
		return -EFAULT;
   39c34:	f06f 000d 	mvn.w	r0, #13
   39c38:	e7e6      	b.n	39c08 <sntp_init+0x2c>

00039c3a <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   39c3a:	b110      	cbz	r0, 39c42 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   39c3c:	68c0      	ldr	r0, [r0, #12]
   39c3e:	f000 b818 	b.w	39c72 <z_impl_zsock_close>
	}
}
   39c42:	4770      	bx	lr

00039c44 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   39c44:	f7eb b8ee 	b.w	24e24 <socket_offload_getaddrinfo>

00039c48 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   39c48:	f7eb b926 	b.w	24e98 <socket_offload_freeaddrinfo>

00039c4c <z_fdtable_call_ioctl>:
{
   39c4c:	b40c      	push	{r2, r3}
   39c4e:	4603      	mov	r3, r0
   39c50:	b507      	push	{r0, r1, r2, lr}
   39c52:	aa04      	add	r2, sp, #16
   39c54:	4608      	mov	r0, r1
   39c56:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   39c5a:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   39c5c:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   39c5e:	4798      	blx	r3
}
   39c60:	b003      	add	sp, #12
   39c62:	f85d eb04 	ldr.w	lr, [sp], #4
   39c66:	b002      	add	sp, #8
   39c68:	4770      	bx	lr

00039c6a <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   39c6a:	f7fa bc69 	b.w	34540 <z_impl_k_mutex_lock>

00039c6e <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   39c6e:	f7fa bd61 	b.w	34734 <z_impl_k_mutex_unlock>

00039c72 <z_impl_zsock_close>:
{
   39c72:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   39c74:	4669      	mov	r1, sp
   39c76:	aa01      	add	r2, sp, #4
{
   39c78:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   39c7a:	f7e8 fdbb 	bl	227f4 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   39c7e:	4604      	mov	r4, r0
   39c80:	b940      	cbnz	r0, 39c94 <z_impl_zsock_close+0x22>
		errno = EBADF;
   39c82:	f000 fa12 	bl	3a0aa <__errno>
   39c86:	2309      	movs	r3, #9
		return -1;
   39c88:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   39c8c:	6003      	str	r3, [r0, #0]
}
   39c8e:	4620      	mov	r0, r4
   39c90:	b003      	add	sp, #12
   39c92:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   39c94:	f04f 32ff 	mov.w	r2, #4294967295
   39c98:	9801      	ldr	r0, [sp, #4]
   39c9a:	f04f 33ff 	mov.w	r3, #4294967295
   39c9e:	f7ff ffe4 	bl	39c6a <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   39ca2:	9b00      	ldr	r3, [sp, #0]
   39ca4:	4620      	mov	r0, r4
   39ca6:	689b      	ldr	r3, [r3, #8]
   39ca8:	4798      	blx	r3
   39caa:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   39cac:	9801      	ldr	r0, [sp, #4]
   39cae:	f7ff ffde 	bl	39c6e <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   39cb2:	4628      	mov	r0, r5
   39cb4:	f7e8 fe06 	bl	228c4 <z_free_fd>
	return ret;
   39cb8:	e7e9      	b.n	39c8e <z_impl_zsock_close+0x1c>

00039cba <z_impl_zsock_connect>:
{
   39cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   39cbc:	460d      	mov	r5, r1
   39cbe:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   39cc0:	4669      	mov	r1, sp
   39cc2:	aa01      	add	r2, sp, #4
   39cc4:	f7e8 fd96 	bl	227f4 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   39cc8:	4604      	mov	r4, r0
   39cca:	b110      	cbz	r0, 39cd2 <z_impl_zsock_connect+0x18>
   39ccc:	9b00      	ldr	r3, [sp, #0]
   39cce:	695b      	ldr	r3, [r3, #20]
   39cd0:	b943      	cbnz	r3, 39ce4 <z_impl_zsock_connect+0x2a>
   39cd2:	f000 f9ea 	bl	3a0aa <__errno>
   39cd6:	2309      	movs	r3, #9
   39cd8:	f04f 34ff 	mov.w	r4, #4294967295
   39cdc:	6003      	str	r3, [r0, #0]
}
   39cde:	4620      	mov	r0, r4
   39ce0:	b002      	add	sp, #8
   39ce2:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   39ce4:	9801      	ldr	r0, [sp, #4]
   39ce6:	f04f 32ff 	mov.w	r2, #4294967295
   39cea:	f04f 33ff 	mov.w	r3, #4294967295
   39cee:	f7ff ffbc 	bl	39c6a <k_mutex_lock.constprop.0.isra.0>
   39cf2:	9b00      	ldr	r3, [sp, #0]
   39cf4:	4632      	mov	r2, r6
   39cf6:	4629      	mov	r1, r5
   39cf8:	4620      	mov	r0, r4
   39cfa:	695b      	ldr	r3, [r3, #20]
   39cfc:	4798      	blx	r3
   39cfe:	4604      	mov	r4, r0
   39d00:	9801      	ldr	r0, [sp, #4]
   39d02:	f7ff ffb4 	bl	39c6e <k_mutex_unlock.isra.0>
   39d06:	e7ea      	b.n	39cde <z_impl_zsock_connect+0x24>

00039d08 <z_impl_zsock_sendto>:
{
   39d08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   39d0c:	460d      	mov	r5, r1
   39d0e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   39d10:	a902      	add	r1, sp, #8
   39d12:	aa03      	add	r2, sp, #12
{
   39d14:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   39d16:	f7e8 fd6d 	bl	227f4 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   39d1a:	4604      	mov	r4, r0
   39d1c:	b110      	cbz	r0, 39d24 <z_impl_zsock_sendto+0x1c>
   39d1e:	9b02      	ldr	r3, [sp, #8]
   39d20:	6a1b      	ldr	r3, [r3, #32]
   39d22:	b94b      	cbnz	r3, 39d38 <z_impl_zsock_sendto+0x30>
   39d24:	f000 f9c1 	bl	3a0aa <__errno>
   39d28:	2309      	movs	r3, #9
   39d2a:	f04f 34ff 	mov.w	r4, #4294967295
   39d2e:	6003      	str	r3, [r0, #0]
}
   39d30:	4620      	mov	r0, r4
   39d32:	b004      	add	sp, #16
   39d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   39d38:	9803      	ldr	r0, [sp, #12]
   39d3a:	f04f 32ff 	mov.w	r2, #4294967295
   39d3e:	f04f 33ff 	mov.w	r3, #4294967295
   39d42:	f7ff ff92 	bl	39c6a <k_mutex_lock.constprop.0.isra.0>
   39d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   39d48:	4632      	mov	r2, r6
   39d4a:	9301      	str	r3, [sp, #4]
   39d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   39d4e:	4629      	mov	r1, r5
   39d50:	9300      	str	r3, [sp, #0]
   39d52:	9b02      	ldr	r3, [sp, #8]
   39d54:	4620      	mov	r0, r4
   39d56:	f8d3 8020 	ldr.w	r8, [r3, #32]
   39d5a:	463b      	mov	r3, r7
   39d5c:	47c0      	blx	r8
   39d5e:	4604      	mov	r4, r0
   39d60:	9803      	ldr	r0, [sp, #12]
   39d62:	f7ff ff84 	bl	39c6e <k_mutex_unlock.isra.0>
   39d66:	e7e3      	b.n	39d30 <z_impl_zsock_sendto+0x28>

00039d68 <z_impl_zsock_recvfrom>:
{
   39d68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   39d6c:	460d      	mov	r5, r1
   39d6e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   39d70:	a902      	add	r1, sp, #8
   39d72:	aa03      	add	r2, sp, #12
{
   39d74:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   39d76:	f7e8 fd3d 	bl	227f4 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   39d7a:	4604      	mov	r4, r0
   39d7c:	b110      	cbz	r0, 39d84 <z_impl_zsock_recvfrom+0x1c>
   39d7e:	9b02      	ldr	r3, [sp, #8]
   39d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   39d82:	b94b      	cbnz	r3, 39d98 <z_impl_zsock_recvfrom+0x30>
   39d84:	f000 f991 	bl	3a0aa <__errno>
   39d88:	2309      	movs	r3, #9
   39d8a:	f04f 34ff 	mov.w	r4, #4294967295
   39d8e:	6003      	str	r3, [r0, #0]
}
   39d90:	4620      	mov	r0, r4
   39d92:	b004      	add	sp, #16
   39d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   39d98:	9803      	ldr	r0, [sp, #12]
   39d9a:	f04f 32ff 	mov.w	r2, #4294967295
   39d9e:	f04f 33ff 	mov.w	r3, #4294967295
   39da2:	f7ff ff62 	bl	39c6a <k_mutex_lock.constprop.0.isra.0>
   39da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   39da8:	4632      	mov	r2, r6
   39daa:	9301      	str	r3, [sp, #4]
   39dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   39dae:	4629      	mov	r1, r5
   39db0:	9300      	str	r3, [sp, #0]
   39db2:	9b02      	ldr	r3, [sp, #8]
   39db4:	4620      	mov	r0, r4
   39db6:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   39dba:	463b      	mov	r3, r7
   39dbc:	47c0      	blx	r8
   39dbe:	4604      	mov	r4, r0
   39dc0:	9803      	ldr	r0, [sp, #12]
   39dc2:	f7ff ff54 	bl	39c6e <k_mutex_unlock.isra.0>
   39dc6:	e7e3      	b.n	39d90 <z_impl_zsock_recvfrom+0x28>

00039dc8 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   39dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   39dcc:	1e14      	subs	r4, r2, #0
{
   39dce:	4605      	mov	r5, r0
   39dd0:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   39dd2:	db13      	blt.n	39dfc <z_impl_zsock_poll+0x34>
   39dd4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   39dd8:	f240 30e7 	movw	r0, #999	; 0x3e7
   39ddc:	2100      	movs	r1, #0
   39dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39de2:	2300      	movs	r3, #0
   39de4:	fbc4 0107 	smlal	r0, r1, r4, r7
   39de8:	f7e7 f9f6 	bl	211d8 <__aeabi_uldivmod>
   39dec:	4602      	mov	r2, r0
   39dee:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   39df0:	4631      	mov	r1, r6
   39df2:	4628      	mov	r0, r5
}
   39df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   39df8:	f7ea bedc 	b.w	24bb4 <zsock_poll_internal>
		timeout = K_FOREVER;
   39dfc:	f04f 32ff 	mov.w	r2, #4294967295
   39e00:	4613      	mov	r3, r2
   39e02:	e7f5      	b.n	39df0 <z_impl_zsock_poll+0x28>

00039e04 <device_get_binding>:
   39e04:	f7f9 bd3a 	b.w	3387c <z_impl_device_get_binding>

00039e08 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   39e08:	4770      	bx	lr

00039e0a <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   39e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   39e0e:	1e0c      	subs	r4, r1, #0
{
   39e10:	4605      	mov	r5, r0
   39e12:	4617      	mov	r7, r2
   39e14:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   39e16:	db10      	blt.n	39e3a <flash_area_read+0x30>
   39e18:	6882      	ldr	r2, [r0, #8]
   39e1a:	18e3      	adds	r3, r4, r3
   39e1c:	4293      	cmp	r3, r2
   39e1e:	d80c      	bhi.n	39e3a <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   39e20:	68c0      	ldr	r0, [r0, #12]
   39e22:	f7ff ffef 	bl	39e04 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   39e26:	6869      	ldr	r1, [r5, #4]
   39e28:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   39e2a:	6883      	ldr	r3, [r0, #8]
   39e2c:	463a      	mov	r2, r7
   39e2e:	681c      	ldr	r4, [r3, #0]
   39e30:	4633      	mov	r3, r6
   39e32:	46a4      	mov	ip, r4
}
   39e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   39e38:	4760      	bx	ip
   39e3a:	f06f 0015 	mvn.w	r0, #21
   39e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039e42 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   39e42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   39e46:	f1b1 0900 	subs.w	r9, r1, #0
{
   39e4a:	4680      	mov	r8, r0
   39e4c:	4617      	mov	r7, r2
   39e4e:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   39e50:	db27      	blt.n	39ea2 <flash_area_write+0x60>
   39e52:	6882      	ldr	r2, [r0, #8]
   39e54:	444b      	add	r3, r9
   39e56:	4293      	cmp	r3, r2
   39e58:	d823      	bhi.n	39ea2 <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   39e5a:	68c0      	ldr	r0, [r0, #12]
   39e5c:	f7ff ffd2 	bl	39e04 <device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   39e60:	f8d8 3004 	ldr.w	r3, [r8, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
   39e64:	4605      	mov	r5, r0
	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   39e66:	4499      	add	r9, r3
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
   39e68:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   39e6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   39e70:	b96b      	cbnz	r3, 39e8e <flash_area_write+0x4c>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
   39e72:	4633      	mov	r3, r6
   39e74:	f8d8 4004 	ldr.w	r4, [r8, #4]
   39e78:	463a      	mov	r2, r7
   39e7a:	4649      	mov	r1, r9
   39e7c:	4628      	mov	r0, r5
   39e7e:	47a0      	blx	r4

	if (api->write_protection != NULL) {
   39e80:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
   39e84:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   39e86:	b943      	cbnz	r3, 39e9a <flash_area_write+0x58>

	return rc;
}
   39e88:	4620      	mov	r0, r4
   39e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   39e8e:	2100      	movs	r1, #0
   39e90:	4798      	blx	r3
		if (rc) {
   39e92:	4604      	mov	r4, r0
   39e94:	2800      	cmp	r0, #0
   39e96:	d0ec      	beq.n	39e72 <flash_area_write+0x30>
   39e98:	e7f6      	b.n	39e88 <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
   39e9a:	2101      	movs	r1, #1
   39e9c:	4628      	mov	r0, r5
   39e9e:	4798      	blx	r3
   39ea0:	e7f2      	b.n	39e88 <flash_area_write+0x46>
		return -EINVAL;
   39ea2:	f06f 0415 	mvn.w	r4, #21
   39ea6:	e7ef      	b.n	39e88 <flash_area_write+0x46>

00039ea8 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   39ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   39eac:	1e0c      	subs	r4, r1, #0
{
   39eae:	4605      	mov	r5, r0
   39eb0:	4617      	mov	r7, r2
	return (off >= 0) && ((off + len) <= fa->fa_size);
   39eb2:	db25      	blt.n	39f00 <flash_area_erase+0x58>
   39eb4:	18a3      	adds	r3, r4, r2
   39eb6:	6882      	ldr	r2, [r0, #8]
   39eb8:	4293      	cmp	r3, r2
   39eba:	d821      	bhi.n	39f00 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   39ebc:	68c0      	ldr	r0, [r0, #12]
   39ebe:	f7ff ffa1 	bl	39e04 <device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   39ec2:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
   39ec4:	4606      	mov	r6, r0
	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   39ec6:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   39ec8:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   39ecc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   39ed0:	b963      	cbnz	r3, 39eec <flash_area_erase+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
   39ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   39ed6:	463a      	mov	r2, r7
   39ed8:	4629      	mov	r1, r5
   39eda:	4630      	mov	r0, r6
   39edc:	4798      	blx	r3

	if (api->write_protection != NULL) {
   39ede:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
   39ee2:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   39ee4:	b943      	cbnz	r3, 39ef8 <flash_area_erase+0x50>

	return rc;
}
   39ee6:	4620      	mov	r0, r4
   39ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
   39eec:	2100      	movs	r1, #0
   39eee:	4798      	blx	r3
		if (rc) {
   39ef0:	4604      	mov	r4, r0
   39ef2:	2800      	cmp	r0, #0
   39ef4:	d0ed      	beq.n	39ed2 <flash_area_erase+0x2a>
   39ef6:	e7f6      	b.n	39ee6 <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
   39ef8:	2101      	movs	r1, #1
   39efa:	4630      	mov	r0, r6
   39efc:	4798      	blx	r3
   39efe:	e7f2      	b.n	39ee6 <flash_area_erase+0x3e>
		return -EINVAL;
   39f00:	f06f 0415 	mvn.w	r4, #21
   39f04:	e7ef      	b.n	39ee6 <flash_area_erase+0x3e>

00039f06 <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   39f06:	68c0      	ldr	r0, [r0, #12]
   39f08:	f7ff bf7c 	b.w	39e04 <device_get_binding>

00039f0c <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   39f0c:	2200      	movs	r2, #0
   39f0e:	e9c0 2200 	strd	r2, r2, [r0]
   39f12:	6082      	str	r2, [r0, #8]
}
   39f14:	4770      	bx	lr

00039f16 <set_on_state>:
	__asm__ volatile(
   39f16:	f04f 0320 	mov.w	r3, #32
   39f1a:	f3ef 8211 	mrs	r2, BASEPRI
   39f1e:	f383 8811 	msr	BASEPRI, r3
   39f22:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   39f26:	6803      	ldr	r3, [r0, #0]
   39f28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   39f2c:	f043 0302 	orr.w	r3, r3, #2
   39f30:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   39f32:	f382 8811 	msr	BASEPRI, r2
   39f36:	f3bf 8f6f 	isb	sy
}
   39f3a:	4770      	bx	lr

00039f3c <async_start>:
{
   39f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39f3e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   39f40:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   39f42:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   39f44:	f04f 0520 	mov.w	r5, #32
   39f48:	f3ef 8611 	mrs	r6, BASEPRI
   39f4c:	f385 8811 	msr	BASEPRI, r5
   39f50:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   39f54:	250c      	movs	r5, #12
   39f56:	4369      	muls	r1, r5
   39f58:	440c      	add	r4, r1
   39f5a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   39f5c:	f005 0c07 	and.w	ip, r5, #7
   39f60:	f1bc 0f01 	cmp.w	ip, #1
   39f64:	d10b      	bne.n	39f7e <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   39f66:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   39f68:	f386 8811 	msr	BASEPRI, r6
   39f6c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   39f70:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   39f74:	6843      	ldr	r3, [r0, #4]
   39f76:	585b      	ldr	r3, [r3, r1]
   39f78:	4798      	blx	r3
	return 0;
   39f7a:	2000      	movs	r0, #0
}
   39f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   39f7e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   39f82:	42af      	cmp	r7, r5
   39f84:	f386 8811 	msr	BASEPRI, r6
   39f88:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   39f8c:	bf0c      	ite	eq
   39f8e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   39f92:	f04f 30ff 	movne.w	r0, #4294967295
   39f96:	e7f1      	b.n	39f7c <async_start+0x40>

00039f98 <api_start>:
{
   39f98:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   39f9a:	2480      	movs	r4, #128	; 0x80
   39f9c:	9400      	str	r4, [sp, #0]
   39f9e:	f7ff ffcd 	bl	39f3c <async_start>
}
   39fa2:	b002      	add	sp, #8
   39fa4:	bd10      	pop	{r4, pc}

00039fa6 <onoff_started_callback>:
	return &data->mgr[type];
   39fa6:	6900      	ldr	r0, [r0, #16]
   39fa8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   39faa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   39fae:	2100      	movs	r1, #0
   39fb0:	4710      	bx	r2

00039fb2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   39fb2:	2000      	movs	r0, #0
   39fb4:	f7f1 ba84 	b.w	2b4c0 <nrfx_clock_start>

00039fb8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   39fb8:	2000      	movs	r0, #0
   39fba:	f7f1 bad3 	b.w	2b564 <nrfx_clock_stop>

00039fbe <api_stop>:
	return stop(dev, subsys, CTX_API);
   39fbe:	2280      	movs	r2, #128	; 0x80
   39fc0:	f7eb b900 	b.w	251c4 <stop>

00039fc4 <blocking_start_callback>:
{
   39fc4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   39fc6:	f7fa bc79 	b.w	348bc <z_impl_k_sem_give>

00039fca <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   39fca:	4770      	bx	lr

00039fcc <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   39fcc:	b510      	push	{r4, lr}
   39fce:	b40f      	push	{r0, r1, r2, r3}
   39fd0:	f7eb fc14 	bl	257fc <before_nse>
   39fd4:	bc0f      	pop	{r0, r1, r2, r3}
   39fd6:	f7e6 f807 	bl	1ffe8 <spm_request_random_number_nse>
   39fda:	b40f      	push	{r0, r1, r2, r3}
   39fdc:	f7eb fc18 	bl	25810 <after_nse>
   39fe0:	bc0f      	pop	{r0, r1, r2, r3}
   39fe2:	bd10      	pop	{r4, pc}

00039fe4 <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   39fe4:	b510      	push	{r4, lr}
   39fe6:	b40f      	push	{r0, r1, r2, r3}
   39fe8:	f7eb fc08 	bl	257fc <before_nse>
   39fec:	bc0f      	pop	{r0, r1, r2, r3}
   39fee:	f7e5 ffff 	bl	1fff0 <spm_request_read_nse>
   39ff2:	b40f      	push	{r0, r1, r2, r3}
   39ff4:	f7eb fc0c 	bl	25810 <after_nse>
   39ff8:	bc0f      	pop	{r0, r1, r2, r3}
   39ffa:	bd10      	pop	{r4, pc}

00039ffc <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   39ffc:	2100      	movs	r1, #0
   39ffe:	2001      	movs	r0, #1
   3a000:	f7eb bd10 	b.w	25a24 <z_arm_fatal_error>

0003a004 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3a004:	6e83      	ldr	r3, [r0, #104]	; 0x68
   3a006:	f383 880b 	msr	PSPLIM, r3
}
   3a00a:	4770      	bx	lr

0003a00c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3a00c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3a00e:	6800      	ldr	r0, [r0, #0]
   3a010:	f7eb bd08 	b.w	25a24 <z_arm_fatal_error>

0003a014 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3a014:	b508      	push	{r3, lr}
	handler();
   3a016:	f7eb fd3d 	bl	25a94 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3a01a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3a01e:	f7ec b805 	b.w	2602c <z_arm_exc_exit>

0003a022 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   3a022:	4770      	bx	lr

0003a024 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   3a024:	4770      	bx	lr

0003a026 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3a026:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   3a02a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   3a02e:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   3a030:	bf08      	it	eq
   3a032:	f06f 0015 	mvneq.w	r0, #21
   3a036:	4770      	bx	lr

0003a038 <mpu_configure_region>:
{
   3a038:	b530      	push	{r4, r5, lr}
		&new_region->attr, new_region->start, new_region->size);
   3a03a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   3a03c:	680c      	ldr	r4, [r1, #0]
{
   3a03e:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   3a040:	890a      	ldrh	r2, [r1, #8]
   3a042:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   3a044:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3a046:	3b01      	subs	r3, #1
   3a048:	f024 041f 	bic.w	r4, r4, #31
   3a04c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   3a04e:	f002 021f 	and.w	r2, r2, #31
   3a052:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3a056:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   3a05a:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   3a05c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3a060:	9303      	str	r3, [sp, #12]
   3a062:	f7ec f88f 	bl	26184 <region_allocate_and_init>
}
   3a066:	b005      	add	sp, #20
   3a068:	bd30      	pop	{r4, r5, pc}

0003a06a <_stdout_hook_default>:
}
   3a06a:	f04f 30ff 	mov.w	r0, #4294967295
   3a06e:	4770      	bx	lr

0003a070 <_stdin_hook_default>:
}
   3a070:	2000      	movs	r0, #0
   3a072:	4770      	bx	lr

0003a074 <_read>:
{
   3a074:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3a076:	4611      	mov	r1, r2
   3a078:	f7ec ba92 	b.w	265a0 <z_impl_zephyr_read_stdin>

0003a07c <_write>:
{
   3a07c:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3a07e:	4611      	mov	r1, r2
   3a080:	f7ec baa2 	b.w	265c8 <z_impl_zephyr_write_stdout>

0003a084 <_close>:
int _close(int file)
   3a084:	f04f 30ff 	mov.w	r0, #4294967295
   3a088:	4770      	bx	lr

0003a08a <_lseek>:
}
   3a08a:	2000      	movs	r0, #0
   3a08c:	4770      	bx	lr

0003a08e <_isatty>:
}
   3a08e:	2802      	cmp	r0, #2
   3a090:	bfcc      	ite	gt
   3a092:	2000      	movgt	r0, #0
   3a094:	2001      	movle	r0, #1
   3a096:	4770      	bx	lr

0003a098 <_kill>:
}
   3a098:	2000      	movs	r0, #0
   3a09a:	4770      	bx	lr

0003a09c <_getpid>:
}
   3a09c:	2000      	movs	r0, #0
   3a09e:	4770      	bx	lr

0003a0a0 <_fstat>:
	st->st_mode = S_IFCHR;
   3a0a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3a0a4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3a0a6:	604b      	str	r3, [r1, #4]
}
   3a0a8:	4770      	bx	lr

0003a0aa <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3a0aa:	f7f9 bc11 	b.w	338d0 <z_impl_z_errno>

0003a0ae <lfs_api_sync>:
}
   3a0ae:	2000      	movs	r0, #0
   3a0b0:	4770      	bx	lr

0003a0b2 <get_page_cb>:
{
   3a0b2:	b530      	push	{r4, r5, lr}
	size_t info_end = info_start + info->size - 1U;
   3a0b4:	e9d0 4200 	ldrd	r4, r2, [r0]
	size_t area_start = ctx->area->fa_off;
   3a0b8:	680d      	ldr	r5, [r1, #0]
	size_t info_end = info_start + info->size - 1U;
   3a0ba:	1e53      	subs	r3, r2, #1
	size_t area_start = ctx->area->fa_off;
   3a0bc:	6868      	ldr	r0, [r5, #4]
	size_t info_end = info_start + info->size - 1U;
   3a0be:	4423      	add	r3, r4
	if (info_end < area_start) {
   3a0c0:	4283      	cmp	r3, r0
   3a0c2:	d308      	bcc.n	3a0d6 <get_page_cb+0x24>
	size_t area_end = area_start + ctx->area->fa_size - 1U;
   3a0c4:	68ab      	ldr	r3, [r5, #8]
   3a0c6:	3b01      	subs	r3, #1
   3a0c8:	4403      	add	r3, r0
	if (info_start > area_end) {
   3a0ca:	429c      	cmp	r4, r3
   3a0cc:	d805      	bhi.n	3a0da <get_page_cb+0x28>
	if (info->size > ctx->max_size) {
   3a0ce:	684b      	ldr	r3, [r1, #4]
   3a0d0:	429a      	cmp	r2, r3
		ctx->max_size = info->size;
   3a0d2:	bf88      	it	hi
   3a0d4:	604a      	strhi	r2, [r1, #4]
		return true;
   3a0d6:	2001      	movs	r0, #1
}
   3a0d8:	bd30      	pop	{r4, r5, pc}
		return false;
   3a0da:	2000      	movs	r0, #0
   3a0dc:	e7fc      	b.n	3a0d8 <get_page_cb+0x26>

0003a0de <lfs_api_erase>:
{
   3a0de:	b508      	push	{r3, lr}
	int rc = flash_area_erase(fa, offset, c->block_size);
   3a0e0:	69c2      	ldr	r2, [r0, #28]
   3a0e2:	6800      	ldr	r0, [r0, #0]
   3a0e4:	4351      	muls	r1, r2
   3a0e6:	f7ff fedf 	bl	39ea8 <flash_area_erase>
}
   3a0ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return errno_to_lfs(rc);
   3a0ee:	f7ec bb71 	b.w	267d4 <errno_to_lfs>

0003a0f2 <lfs_api_prog>:
{
   3a0f2:	b538      	push	{r3, r4, r5, lr}
   3a0f4:	4614      	mov	r4, r2
	size_t offset = block * c->block_size + off;
   3a0f6:	69c5      	ldr	r5, [r0, #28]
{
   3a0f8:	461a      	mov	r2, r3
	int rc = flash_area_write(fa, offset, buffer, size);
   3a0fa:	fb05 4101 	mla	r1, r5, r1, r4
   3a0fe:	9b04      	ldr	r3, [sp, #16]
   3a100:	6800      	ldr	r0, [r0, #0]
   3a102:	f7ff fe9e 	bl	39e42 <flash_area_write>
}
   3a106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return errno_to_lfs(rc);
   3a10a:	f7ec bb63 	b.w	267d4 <errno_to_lfs>

0003a10e <lfs_api_read>:
{
   3a10e:	b538      	push	{r3, r4, r5, lr}
   3a110:	4614      	mov	r4, r2
	size_t offset = block * c->block_size + off;
   3a112:	69c5      	ldr	r5, [r0, #28]
{
   3a114:	461a      	mov	r2, r3
	int rc = flash_area_read(fa, offset, buffer, size);
   3a116:	fb05 4101 	mla	r1, r5, r1, r4
   3a11a:	9b04      	ldr	r3, [sp, #16]
   3a11c:	6800      	ldr	r0, [r0, #0]
   3a11e:	f7ff fe74 	bl	39e0a <flash_area_read>
}
   3a122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return errno_to_lfs(rc);
   3a126:	f7ec bb55 	b.w	267d4 <errno_to_lfs>

0003a12a <info_to_dirent>:
{
   3a12a:	b510      	push	{r4, lr}
   3a12c:	460c      	mov	r4, r1
		       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   3a12e:	7803      	ldrb	r3, [r0, #0]
   3a130:	1e9a      	subs	r2, r3, #2
   3a132:	4253      	negs	r3, r2
   3a134:	4153      	adcs	r3, r2
   3a136:	700b      	strb	r3, [r1, #0]
	entry->size = info->size;
   3a138:	6843      	ldr	r3, [r0, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   3a13a:	f240 1201 	movw	r2, #257	; 0x101
   3a13e:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
   3a142:	f100 0108 	add.w	r1, r0, #8
   3a146:	1c60      	adds	r0, r4, #1
   3a148:	f003 fc0e 	bl	3d968 <strncpy>
	entry->name[sizeof(entry->name) - 1] = '\0';
   3a14c:	2300      	movs	r3, #0
   3a14e:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
}
   3a152:	bd10      	pop	{r4, pc}

0003a154 <fs_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3a154:	f04f 32ff 	mov.w	r2, #4294967295
   3a158:	f04f 33ff 	mov.w	r3, #4294967295
   3a15c:	30ec      	adds	r0, #236	; 0xec
   3a15e:	f7fa b9ef 	b.w	34540 <z_impl_k_mutex_lock>

0003a162 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3a162:	f7fa bae7 	b.w	34734 <z_impl_k_mutex_unlock>

0003a166 <littlefs_read>:
{
   3a166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a168:	460e      	mov	r6, r1
   3a16a:	4617      	mov	r7, r2
   3a16c:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   3a16e:	6843      	ldr	r3, [r0, #4]
   3a170:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   3a172:	4628      	mov	r0, r5
   3a174:	f7ff ffee 	bl	3a154 <fs_lock>
	ssize_t ret = lfs_file_read(&fs->lfs, LFS_FILEP(fp), ptr, len);
   3a178:	463b      	mov	r3, r7
   3a17a:	4632      	mov	r2, r6
   3a17c:	6821      	ldr	r1, [r4, #0]
   3a17e:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3a182:	f7f4 fa4d 	bl	2e620 <lfs_file_read>
   3a186:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a188:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   3a18c:	f7ff ffe9 	bl	3a162 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   3a190:	4620      	mov	r0, r4
}
   3a192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   3a196:	f7ec bb0f 	b.w	267b8 <lfs_to_errno>

0003a19a <littlefs_write>:
{
   3a19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a19c:	460e      	mov	r6, r1
   3a19e:	4617      	mov	r7, r2
   3a1a0:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   3a1a2:	6843      	ldr	r3, [r0, #4]
   3a1a4:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   3a1a6:	4628      	mov	r0, r5
   3a1a8:	f7ff ffd4 	bl	3a154 <fs_lock>
	ssize_t ret = lfs_file_write(&fs->lfs, LFS_FILEP(fp), ptr, len);
   3a1ac:	463b      	mov	r3, r7
   3a1ae:	4632      	mov	r2, r6
   3a1b0:	6821      	ldr	r1, [r4, #0]
   3a1b2:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3a1b6:	f7f4 f81b 	bl	2e1f0 <lfs_file_write>
   3a1ba:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a1bc:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   3a1c0:	f7ff ffcf 	bl	3a162 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   3a1c4:	4620      	mov	r0, r4
}
   3a1c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   3a1ca:	f7ec baf5 	b.w	267b8 <lfs_to_errno>

0003a1ce <littlefs_seek>:
{
   3a1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a1d0:	460e      	mov	r6, r1
   3a1d2:	4617      	mov	r7, r2
   3a1d4:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   3a1d6:	6843      	ldr	r3, [r0, #4]
   3a1d8:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   3a1da:	4628      	mov	r0, r5
   3a1dc:	f7ff ffba 	bl	3a154 <fs_lock>
	off_t ret = lfs_file_seek(&fs->lfs, LFS_FILEP(fp), off, whence);
   3a1e0:	463b      	mov	r3, r7
   3a1e2:	4632      	mov	r2, r6
   3a1e4:	6821      	ldr	r1, [r4, #0]
   3a1e6:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3a1ea:	f7f4 fab9 	bl	2e760 <lfs_file_seek>
   3a1ee:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a1f0:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   3a1f4:	f7ff ffb5 	bl	3a162 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   3a1f8:	ea04 70e4 	and.w	r0, r4, r4, asr #31
}
   3a1fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   3a200:	f7ec bada 	b.w	267b8 <lfs_to_errno>

0003a204 <littlefs_tell>:
{
   3a204:	b538      	push	{r3, r4, r5, lr}
   3a206:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   3a208:	6843      	ldr	r3, [r0, #4]
   3a20a:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   3a20c:	4628      	mov	r0, r5
   3a20e:	f7ff ffa1 	bl	3a154 <fs_lock>
	off_t ret = lfs_file_tell(&fs->lfs, LFS_FILEP(fp));
   3a212:	6821      	ldr	r1, [r4, #0]
   3a214:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3a218:	f7f3 fd06 	bl	2dc28 <lfs_file_tell>
   3a21c:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a21e:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   3a222:	f7ff ff9e 	bl	3a162 <k_mutex_unlock.isra.0>
}
   3a226:	4620      	mov	r0, r4
   3a228:	bd38      	pop	{r3, r4, r5, pc}

0003a22a <littlefs_truncate>:
{
   3a22a:	b570      	push	{r4, r5, r6, lr}
   3a22c:	460e      	mov	r6, r1
   3a22e:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   3a230:	6843      	ldr	r3, [r0, #4]
   3a232:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   3a234:	4628      	mov	r0, r5
   3a236:	f7ff ff8d 	bl	3a154 <fs_lock>
	int ret = lfs_file_truncate(&fs->lfs, LFS_FILEP(fp), length);
   3a23a:	4632      	mov	r2, r6
   3a23c:	6821      	ldr	r1, [r4, #0]
   3a23e:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3a242:	f7f4 fabf 	bl	2e7c4 <lfs_file_truncate>
   3a246:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a248:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   3a24c:	f7ff ff89 	bl	3a162 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   3a250:	4620      	mov	r0, r4
}
   3a252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   3a256:	f7ec baaf 	b.w	267b8 <lfs_to_errno>

0003a25a <littlefs_sync>:
{
   3a25a:	b538      	push	{r3, r4, r5, lr}
   3a25c:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   3a25e:	6843      	ldr	r3, [r0, #4]
   3a260:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   3a262:	4628      	mov	r0, r5
   3a264:	f7ff ff76 	bl	3a154 <fs_lock>
	int ret = lfs_file_sync(&fs->lfs, LFS_FILEP(fp));
   3a268:	6821      	ldr	r1, [r4, #0]
   3a26a:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3a26e:	f7f5 f89d 	bl	2f3ac <lfs_file_sync>
   3a272:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a274:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   3a278:	f7ff ff73 	bl	3a162 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   3a27c:	4620      	mov	r0, r4
}
   3a27e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   3a282:	f7ec ba99 	b.w	267b8 <lfs_to_errno>

0003a286 <littlefs_close>:
{
   3a286:	b570      	push	{r4, r5, r6, lr}
   3a288:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   3a28a:	6843      	ldr	r3, [r0, #4]
   3a28c:	691e      	ldr	r6, [r3, #16]
	fs_lock(fs);
   3a28e:	4630      	mov	r0, r6
   3a290:	f7ff ff60 	bl	3a154 <fs_lock>
	int ret = lfs_file_close(&fs->lfs, LFS_FILEP(fp));
   3a294:	6821      	ldr	r1, [r4, #0]
   3a296:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3a29a:	f7f5 f8e9 	bl	2f470 <lfs_file_close>
   3a29e:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   3a2a0:	f106 00ec 	add.w	r0, r6, #236	; 0xec
   3a2a4:	f7ff ff5d 	bl	3a162 <k_mutex_unlock.isra.0>
	release_file_data(fp);
   3a2a8:	4620      	mov	r0, r4
   3a2aa:	f7ec fa71 	bl	26790 <release_file_data>
	return lfs_to_errno(ret);
   3a2ae:	4628      	mov	r0, r5
}
   3a2b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   3a2b4:	f7ec ba80 	b.w	267b8 <lfs_to_errno>

0003a2b8 <littlefs_readdir>:
{
   3a2b8:	b570      	push	{r4, r5, r6, lr}
   3a2ba:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   3a2bc:	6843      	ldr	r3, [r0, #4]
{
   3a2be:	b0c2      	sub	sp, #264	; 0x108
	struct fs_littlefs *fs = dp->mp->fs_data;
   3a2c0:	691e      	ldr	r6, [r3, #16]
{
   3a2c2:	460d      	mov	r5, r1
	fs_lock(fs);
   3a2c4:	4630      	mov	r0, r6
   3a2c6:	f7ff ff45 	bl	3a154 <fs_lock>
	int ret = lfs_dir_read(&fs->lfs, dp->dirp, &info);
   3a2ca:	6821      	ldr	r1, [r4, #0]
   3a2cc:	466a      	mov	r2, sp
   3a2ce:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3a2d2:	f7f3 fc59 	bl	2db88 <lfs_dir_read>
   3a2d6:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a2d8:	f106 00ec 	add.w	r0, r6, #236	; 0xec
   3a2dc:	f7ff ff41 	bl	3a162 <k_mutex_unlock.isra.0>
	if (ret > 0) {
   3a2e0:	2c00      	cmp	r4, #0
   3a2e2:	dd0a      	ble.n	3a2fa <littlefs_readdir+0x42>
		info_to_dirent(&info, entry);
   3a2e4:	4629      	mov	r1, r5
   3a2e6:	4668      	mov	r0, sp
   3a2e8:	f7ff ff1f 	bl	3a12a <info_to_dirent>
		ret = 0;
   3a2ec:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   3a2ee:	4620      	mov	r0, r4
}
   3a2f0:	b042      	add	sp, #264	; 0x108
   3a2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   3a2f6:	f7ec ba5f 	b.w	267b8 <lfs_to_errno>
	} else if (ret == 0) {
   3a2fa:	d1f8      	bne.n	3a2ee <littlefs_readdir+0x36>
		entry->name[0] = 0;
   3a2fc:	706c      	strb	r4, [r5, #1]
   3a2fe:	e7f5      	b.n	3a2ec <littlefs_readdir+0x34>

0003a300 <littlefs_unlink>:
{
   3a300:	b538      	push	{r3, r4, r5, lr}
   3a302:	4603      	mov	r3, r0
   3a304:	4608      	mov	r0, r1
	path = fs_impl_strip_prefix(path, mountp);
   3a306:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   3a308:	691d      	ldr	r5, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   3a30a:	f7ec fa2f 	bl	2676c <fs_impl_strip_prefix>
   3a30e:	4604      	mov	r4, r0
	fs_lock(fs);
   3a310:	4628      	mov	r0, r5
   3a312:	f7ff ff1f 	bl	3a154 <fs_lock>
	int ret = lfs_remove(&fs->lfs, path);
   3a316:	4621      	mov	r1, r4
   3a318:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3a31c:	f7f5 f9fa 	bl	2f714 <lfs_remove>
   3a320:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a322:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   3a326:	f7ff ff1c 	bl	3a162 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   3a32a:	4620      	mov	r0, r4
}
   3a32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   3a330:	f7ec ba42 	b.w	267b8 <lfs_to_errno>

0003a334 <littlefs_rename>:
{
   3a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a336:	4604      	mov	r4, r0
   3a338:	4608      	mov	r0, r1
	from = fs_impl_strip_prefix(from, mountp);
   3a33a:	4621      	mov	r1, r4
{
   3a33c:	4617      	mov	r7, r2
	struct fs_littlefs *fs = mountp->fs_data;
   3a33e:	6925      	ldr	r5, [r4, #16]
	from = fs_impl_strip_prefix(from, mountp);
   3a340:	f7ec fa14 	bl	2676c <fs_impl_strip_prefix>
	to = fs_impl_strip_prefix(to, mountp);
   3a344:	4621      	mov	r1, r4
	from = fs_impl_strip_prefix(from, mountp);
   3a346:	4606      	mov	r6, r0
	to = fs_impl_strip_prefix(to, mountp);
   3a348:	4638      	mov	r0, r7
   3a34a:	f7ec fa0f 	bl	2676c <fs_impl_strip_prefix>
   3a34e:	4604      	mov	r4, r0
	fs_lock(fs);
   3a350:	4628      	mov	r0, r5
   3a352:	f7ff feff 	bl	3a154 <fs_lock>
	int ret = lfs_rename(&fs->lfs, from, to);
   3a356:	4622      	mov	r2, r4
   3a358:	4631      	mov	r1, r6
   3a35a:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3a35e:	f7f5 fa45 	bl	2f7ec <lfs_rename>
   3a362:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a364:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   3a368:	f7ff fefb 	bl	3a162 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   3a36c:	4620      	mov	r0, r4
}
   3a36e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   3a372:	f7ec ba21 	b.w	267b8 <lfs_to_errno>

0003a376 <littlefs_mkdir>:
{
   3a376:	b538      	push	{r3, r4, r5, lr}
   3a378:	4603      	mov	r3, r0
   3a37a:	4608      	mov	r0, r1
	path = fs_impl_strip_prefix(path, mountp);
   3a37c:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   3a37e:	691d      	ldr	r5, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   3a380:	f7ec f9f4 	bl	2676c <fs_impl_strip_prefix>
   3a384:	4604      	mov	r4, r0
	fs_lock(fs);
   3a386:	4628      	mov	r0, r5
   3a388:	f7ff fee4 	bl	3a154 <fs_lock>
	int ret = lfs_mkdir(&fs->lfs, path);
   3a38c:	4621      	mov	r1, r4
   3a38e:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3a392:	f7f4 ff67 	bl	2f264 <lfs_mkdir>
   3a396:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a398:	f105 00ec 	add.w	r0, r5, #236	; 0xec
   3a39c:	f7ff fee1 	bl	3a162 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   3a3a0:	4620      	mov	r0, r4
}
   3a3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   3a3a6:	f7ec ba07 	b.w	267b8 <lfs_to_errno>

0003a3aa <littlefs_stat>:
{
   3a3aa:	4603      	mov	r3, r0
   3a3ac:	b570      	push	{r4, r5, r6, lr}
   3a3ae:	4608      	mov	r0, r1
   3a3b0:	b0c2      	sub	sp, #264	; 0x108
	path = fs_impl_strip_prefix(path, mountp);
   3a3b2:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   3a3b4:	691e      	ldr	r6, [r3, #16]
{
   3a3b6:	4615      	mov	r5, r2
	path = fs_impl_strip_prefix(path, mountp);
   3a3b8:	f7ec f9d8 	bl	2676c <fs_impl_strip_prefix>
   3a3bc:	4604      	mov	r4, r0
	fs_lock(fs);
   3a3be:	4630      	mov	r0, r6
   3a3c0:	f7ff fec8 	bl	3a154 <fs_lock>
	int ret = lfs_stat(&fs->lfs, path, &info);
   3a3c4:	4621      	mov	r1, r4
   3a3c6:	466a      	mov	r2, sp
   3a3c8:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3a3cc:	f001 fcfc 	bl	3bdc8 <lfs_stat>
   3a3d0:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   3a3d2:	f106 00ec 	add.w	r0, r6, #236	; 0xec
   3a3d6:	f7ff fec4 	bl	3a162 <k_mutex_unlock.isra.0>
	if (ret >= 0) {
   3a3da:	2c00      	cmp	r4, #0
   3a3dc:	db04      	blt.n	3a3e8 <littlefs_stat+0x3e>
		info_to_dirent(&info, entry);
   3a3de:	4629      	mov	r1, r5
   3a3e0:	4668      	mov	r0, sp
   3a3e2:	f7ff fea2 	bl	3a12a <info_to_dirent>
		ret = 0;
   3a3e6:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   3a3e8:	4620      	mov	r0, r4
}
   3a3ea:	b042      	add	sp, #264	; 0x108
   3a3ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   3a3f0:	f7ec b9e2 	b.w	267b8 <lfs_to_errno>

0003a3f4 <littlefs_statvfs>:
{
   3a3f4:	4603      	mov	r3, r0
   3a3f6:	b570      	push	{r4, r5, r6, lr}
   3a3f8:	4614      	mov	r4, r2
	struct fs_littlefs *fs = mountp->fs_data;
   3a3fa:	691e      	ldr	r6, [r3, #16]
{
   3a3fc:	4608      	mov	r0, r1
	stat->f_bsize = lfs->cfg->prog_size;
   3a3fe:	f8d6 20d8 	ldr.w	r2, [r6, #216]	; 0xd8
   3a402:	6991      	ldr	r1, [r2, #24]
   3a404:	6021      	str	r1, [r4, #0]
	stat->f_frsize = lfs->cfg->block_size;
   3a406:	69d1      	ldr	r1, [r2, #28]
	stat->f_blocks = lfs->cfg->block_count;
   3a408:	6a12      	ldr	r2, [r2, #32]
	stat->f_frsize = lfs->cfg->block_size;
   3a40a:	6061      	str	r1, [r4, #4]
	stat->f_blocks = lfs->cfg->block_count;
   3a40c:	60a2      	str	r2, [r4, #8]
	path = fs_impl_strip_prefix(path, mountp);
   3a40e:	4619      	mov	r1, r3
   3a410:	f7ec f9ac 	bl	2676c <fs_impl_strip_prefix>
	fs_lock(fs);
   3a414:	4630      	mov	r0, r6
   3a416:	f7ff fe9d 	bl	3a154 <fs_lock>
	ssize_t ret = lfs_fs_size(lfs);
   3a41a:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3a41e:	f7f4 fa51 	bl	2e8c4 <lfs_fs_size>
   3a422:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   3a424:	f106 00ec 	add.w	r0, r6, #236	; 0xec
   3a428:	f7ff fe9b 	bl	3a162 <k_mutex_unlock.isra.0>
	if (ret >= 0) {
   3a42c:	2d00      	cmp	r5, #0
		stat->f_bfree = stat->f_blocks - ret;
   3a42e:	bfa1      	itttt	ge
   3a430:	68a3      	ldrge	r3, [r4, #8]
   3a432:	1b5b      	subge	r3, r3, r5
		ret = 0;
   3a434:	2500      	movge	r5, #0
		stat->f_bfree = stat->f_blocks - ret;
   3a436:	60e3      	strge	r3, [r4, #12]
	return lfs_to_errno(ret);
   3a438:	4628      	mov	r0, r5
}
   3a43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   3a43e:	f7ec b9bb 	b.w	267b8 <lfs_to_errno>

0003a442 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3a442:	b508      	push	{r3, lr}
	net_if_init();
   3a444:	f7ec fcb4 	bl	26db0 <net_if_init>
	net_if_post_init();
   3a448:	f7ec fcec 	bl	26e24 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3a44c:	2000      	movs	r0, #0
   3a44e:	bd08      	pop	{r3, pc}

0003a450 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3a450:	b110      	cbz	r0, 3a458 <net_if_l2+0x8>
   3a452:	6800      	ldr	r0, [r0, #0]
   3a454:	b100      	cbz	r0, 3a458 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3a456:	6840      	ldr	r0, [r0, #4]
}
   3a458:	4770      	bx	lr

0003a45a <net_if_flag_is_set>:
	if (iface == NULL) {
   3a45a:	b130      	cbz	r0, 3a46a <net_if_flag_is_set+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a45c:	6803      	ldr	r3, [r0, #0]
   3a45e:	330c      	adds	r3, #12
   3a460:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3a464:	4108      	asrs	r0, r1
   3a466:	f000 0001 	and.w	r0, r0, #1
}
   3a46a:	4770      	bx	lr

0003a46c <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   3a46c:	b510      	push	{r4, lr}
   3a46e:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3a470:	f7ff ffee 	bl	3a450 <net_if_l2>
   3a474:	b128      	cbz	r0, 3a482 <l2_flags_get.isra.0+0x16>
   3a476:	68c2      	ldr	r2, [r0, #12]
   3a478:	b11a      	cbz	r2, 3a482 <l2_flags_get.isra.0+0x16>
}
   3a47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3a47e:	4618      	mov	r0, r3
   3a480:	4710      	bx	r2
}
   3a482:	bd10      	pop	{r4, pc}

0003a484 <adc_context_on_timer_expired>:
{
   3a484:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   3a486:	f1a0 0308 	sub.w	r3, r0, #8
   3a48a:	e8d3 2fef 	ldaex	r2, [r3]
   3a48e:	1c51      	adds	r1, r2, #1
   3a490:	e8c3 1fe4 	stlex	r4, r1, [r3]
   3a494:	2c00      	cmp	r4, #0
   3a496:	d1f8      	bne.n	3a48a <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   3a498:	b922      	cbnz	r2, 3a4a4 <adc_context_on_timer_expired+0x20>
		adc_context_start_sampling(ctx);
   3a49a:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
}
   3a49e:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   3a4a0:	f7ec bd7e 	b.w	26fa0 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   3a4a4:	f06f 030f 	mvn.w	r3, #15
}
   3a4a8:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   3a4aa:	6683      	str	r3, [r0, #104]	; 0x68
}
   3a4ac:	4770      	bx	lr

0003a4ae <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3a4ae:	6843      	ldr	r3, [r0, #4]
}
   3a4b0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3a4b2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3a4b4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3a4b6:	600b      	str	r3, [r1, #0]
}
   3a4b8:	4770      	bx	lr

0003a4ba <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3a4ba:	6843      	ldr	r3, [r0, #4]
   3a4bc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   3a4be:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3a4c0:	4042      	eors	r2, r0
   3a4c2:	400a      	ands	r2, r1
   3a4c4:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3a4c6:	605a      	str	r2, [r3, #4]
}
   3a4c8:	2000      	movs	r0, #0
   3a4ca:	4770      	bx	lr

0003a4cc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3a4cc:	6843      	ldr	r3, [r0, #4]
}
   3a4ce:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3a4d0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3a4d2:	6099      	str	r1, [r3, #8]
}
   3a4d4:	4770      	bx	lr

0003a4d6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3a4d6:	6843      	ldr	r3, [r0, #4]
}
   3a4d8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3a4da:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3a4dc:	60d9      	str	r1, [r3, #12]
}
   3a4de:	4770      	bx	lr

0003a4e0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3a4e0:	6843      	ldr	r3, [r0, #4]
}
   3a4e2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3a4e4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3a4e6:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3a4e8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   3a4ea:	6053      	str	r3, [r2, #4]
}
   3a4ec:	4770      	bx	lr

0003a4ee <nrf_gpio_cfg_sense_set>:
{
   3a4ee:	b513      	push	{r0, r1, r4, lr}
   3a4f0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3a4f2:	a801      	add	r0, sp, #4
{
   3a4f4:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3a4f6:	f7ec ff45 	bl	27384 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   3a4fa:	9b01      	ldr	r3, [sp, #4]
   3a4fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   3a500:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   3a504:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   3a508:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   3a50c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   3a510:	b002      	add	sp, #8
   3a512:	bd10      	pop	{r4, pc}

0003a514 <i2c_transfer>:
}


extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
   3a514:	b410      	push	{r4}
				      uint16_t addr)
{
	const struct i2c_driver_api *api =
		(const struct i2c_driver_api *)dev->api;

	return api->transfer(dev, msgs, num_msgs, addr);
   3a516:	6884      	ldr	r4, [r0, #8]
   3a518:	6864      	ldr	r4, [r4, #4]
   3a51a:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
   3a51c:	bc10      	pop	{r4}
   3a51e:	4760      	bx	ip

0003a520 <lis2dh_i2c_write_data>:
{
   3a520:	b530      	push	{r4, r5, lr}
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
   3a522:	f061 017f 	orn	r1, r1, #127	; 0x7f
{
   3a526:	b089      	sub	sp, #36	; 0x24
   3a528:	461d      	mov	r5, r3
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
   3a52a:	6903      	ldr	r3, [r0, #16]
{
   3a52c:	4604      	mov	r4, r0
   3a52e:	f88d 1007 	strb.w	r1, [sp, #7]
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
   3a532:	f10d 0107 	add.w	r1, sp, #7
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
   3a536:	6818      	ldr	r0, [r3, #0]
   3a538:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   3a53a:	2101      	movs	r1, #1
   3a53c:	6863      	ldr	r3, [r4, #4]
   3a53e:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   3a540:	2100      	movs	r1, #0
   3a542:	891b      	ldrh	r3, [r3, #8]
   3a544:	e9cd 2505 	strd	r2, r5, [sp, #20]

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3a548:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   3a54a:	f88d 1010 	strb.w	r1, [sp, #16]

	return i2c_transfer(dev, msg, 2, dev_addr);
   3a54e:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3a550:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
   3a554:	f7ff ffde 	bl	3a514 <i2c_transfer>
}
   3a558:	b009      	add	sp, #36	; 0x24
   3a55a:	bd30      	pop	{r4, r5, pc}

0003a55c <lis2dh_i2c_read_data>:
{
   3a55c:	b530      	push	{r4, r5, lr}
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
   3a55e:	f061 017f 	orn	r1, r1, #127	; 0x7f
{
   3a562:	b089      	sub	sp, #36	; 0x24
   3a564:	4604      	mov	r4, r0
   3a566:	461d      	mov	r5, r3
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
   3a568:	6903      	ldr	r3, [r0, #16]
   3a56a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   3a56e:	f10d 0107 	add.w	r1, sp, #7
   3a572:	6818      	ldr	r0, [r3, #0]
   3a574:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   3a576:	2101      	movs	r1, #1
   3a578:	6863      	ldr	r3, [r4, #4]
   3a57a:	9103      	str	r1, [sp, #12]
   3a57c:	891b      	ldrh	r3, [r3, #8]
	msg[0].flags = I2C_MSG_WRITE;
   3a57e:	2100      	movs	r1, #0
   3a580:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3a584:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   3a586:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3a58a:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   3a58e:	a902      	add	r1, sp, #8
   3a590:	2202      	movs	r2, #2
   3a592:	f7ff ffbf 	bl	3a514 <i2c_transfer>
}
   3a596:	b009      	add	sp, #36	; 0x24
   3a598:	bd30      	pop	{r4, r5, pc}

0003a59a <lis2dh_i2c_write_reg>:
{
   3a59a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3a59c:	4603      	mov	r3, r0
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   3a59e:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   3a5a2:	2202      	movs	r2, #2
	return i2c_reg_write_byte(data->bus,
   3a5a4:	6900      	ldr	r0, [r0, #16]
				  cfg->bus_cfg.i2c_slv_addr,
   3a5a6:	685b      	ldr	r3, [r3, #4]
	return i2c_reg_write_byte(data->bus,
   3a5a8:	6800      	ldr	r0, [r0, #0]
				  cfg->bus_cfg.i2c_slv_addr,
   3a5aa:	891b      	ldrh	r3, [r3, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   3a5ac:	f88d 1000 	strb.w	r1, [sp]
	msg.len = num_bytes;
   3a5b0:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3a5b2:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
   3a5b6:	a901      	add	r1, sp, #4
   3a5b8:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
   3a5ba:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
   3a5be:	f7ff ffa9 	bl	3a514 <i2c_transfer>
}
   3a5c2:	b005      	add	sp, #20
   3a5c4:	f85d fb04 	ldr.w	pc, [sp], #4

0003a5c8 <lis2dh_i2c_read_reg>:
{
   3a5c8:	b510      	push	{r4, lr}
   3a5ca:	4603      	mov	r3, r0
   3a5cc:	b088      	sub	sp, #32
	return i2c_reg_read_byte(data->bus,
   3a5ce:	6900      	ldr	r0, [r0, #16]
   3a5d0:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   3a5d4:	f10d 0107 	add.w	r1, sp, #7
   3a5d8:	6800      	ldr	r0, [r0, #0]
   3a5da:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   3a5dc:	2101      	movs	r1, #1
				 cfg->bus_cfg.i2c_slv_addr,
   3a5de:	685b      	ldr	r3, [r3, #4]
	msg[0].flags = I2C_MSG_WRITE;
   3a5e0:	2400      	movs	r4, #0
   3a5e2:	891b      	ldrh	r3, [r3, #8]
	msg[1].len = num_read;
   3a5e4:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3a5e8:	2207      	movs	r2, #7
	msg[0].len = num_write;
   3a5ea:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3a5ec:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   3a5f0:	a902      	add	r1, sp, #8
   3a5f2:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   3a5f4:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
   3a5f8:	f7ff ff8c 	bl	3a514 <i2c_transfer>
}
   3a5fc:	b008      	add	sp, #32
   3a5fe:	bd10      	pop	{r4, pc}

0003a600 <lis2dh_i2c_update_reg>:
{
   3a600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a604:	4698      	mov	r8, r3
	return i2c_reg_update_byte(data->bus,
   3a606:	6903      	ldr	r3, [r0, #16]
	msg[0].len = num_write;
   3a608:	2701      	movs	r7, #1
   3a60a:	f8d3 9000 	ldr.w	r9, [r3]
				   cfg->bus_cfg.i2c_slv_addr,
   3a60e:	6843      	ldr	r3, [r0, #4]
{
   3a610:	b088      	sub	sp, #32
   3a612:	f893 a008 	ldrb.w	sl, [r3, #8]
	msg[0].flags = I2C_MSG_WRITE;
   3a616:	2300      	movs	r3, #0
   3a618:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   3a61c:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   3a620:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3a624:	2307      	movs	r3, #7
   3a626:	460e      	mov	r6, r1
   3a628:	4614      	mov	r4, r2
				      uint8_t value)
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   3a62a:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   3a62e:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3a630:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   3a634:	2202      	movs	r2, #2
   3a636:	4653      	mov	r3, sl
   3a638:	4648      	mov	r0, r9
   3a63a:	a902      	add	r1, sp, #8
	msg[0].buf = (uint8_t *)write_buf;
   3a63c:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   3a63e:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
   3a640:	f7ff ff68 	bl	3a514 <i2c_transfer>
	if (rc != 0) {
   3a644:	b9b8      	cbnz	r0, 3a676 <lis2dh_i2c_update_reg+0x76>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
   3a646:	f89d 2003 	ldrb.w	r2, [sp, #3]
   3a64a:	ea22 0304 	bic.w	r3, r2, r4
   3a64e:	ea04 0408 	and.w	r4, r4, r8
   3a652:	431c      	orrs	r4, r3
	if (new_value == old_value) {
   3a654:	42a2      	cmp	r2, r4
   3a656:	d00e      	beq.n	3a676 <lis2dh_i2c_update_reg+0x76>
	msg.len = num_bytes;
   3a658:	2302      	movs	r3, #2
	return i2c_transfer(dev, &msg, 1, addr);
   3a65a:	463a      	mov	r2, r7
	msg.len = num_bytes;
   3a65c:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3a65e:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
   3a662:	4648      	mov	r0, r9
   3a664:	4653      	mov	r3, sl
   3a666:	a902      	add	r1, sp, #8
	uint8_t tx_buf[2] = {reg_addr, value};
   3a668:	f88d 6004 	strb.w	r6, [sp, #4]
   3a66c:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   3a670:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
   3a672:	f7ff ff4f 	bl	3a514 <i2c_transfer>
}
   3a676:	b008      	add	sp, #32
   3a678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003a67c <_spi_context_cs_control>:
{
   3a67c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   3a67e:	6805      	ldr	r5, [r0, #0]
{
   3a680:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   3a682:	b1fd      	cbz	r5, 3a6c4 <_spi_context_cs_control+0x48>
   3a684:	68ab      	ldr	r3, [r5, #8]
   3a686:	b1eb      	cbz	r3, 3a6c4 <_spi_context_cs_control+0x48>
   3a688:	6818      	ldr	r0, [r3, #0]
   3a68a:	b1d8      	cbz	r0, 3a6c4 <_spi_context_cs_control+0x48>
		if (on) {
   3a68c:	b151      	cbz	r1, 3a6a4 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   3a68e:	7a19      	ldrb	r1, [r3, #8]
   3a690:	2201      	movs	r2, #1
   3a692:	f7ed fb29 	bl	27ce8 <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   3a696:	6823      	ldr	r3, [r4, #0]
   3a698:	689b      	ldr	r3, [r3, #8]
   3a69a:	6858      	ldr	r0, [r3, #4]
}
   3a69c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   3a6a0:	f002 bf17 	b.w	3d4d2 <z_impl_k_busy_wait>
			if (!force_off &&
   3a6a4:	b912      	cbnz	r2, 3a6ac <_spi_context_cs_control+0x30>
   3a6a6:	88aa      	ldrh	r2, [r5, #4]
   3a6a8:	0492      	lsls	r2, r2, #18
   3a6aa:	d40b      	bmi.n	3a6c4 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
   3a6ac:	6858      	ldr	r0, [r3, #4]
   3a6ae:	f002 ff10 	bl	3d4d2 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   3a6b2:	6823      	ldr	r3, [r4, #0]
   3a6b4:	2200      	movs	r2, #0
   3a6b6:	689b      	ldr	r3, [r3, #8]
   3a6b8:	7a19      	ldrb	r1, [r3, #8]
   3a6ba:	6818      	ldr	r0, [r3, #0]
}
   3a6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   3a6c0:	f7ed bb12 	b.w	27ce8 <gpio_pin_set.isra.0>
}
   3a6c4:	bd38      	pop	{r3, r4, r5, pc}

0003a6c6 <spi_context_unlock_unconditionally>:
{
   3a6c6:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   3a6c8:	2201      	movs	r2, #1
   3a6ca:	2100      	movs	r1, #0
{
   3a6cc:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   3a6ce:	f7ff ffd5 	bl	3a67c <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   3a6d2:	6923      	ldr	r3, [r4, #16]
   3a6d4:	b933      	cbnz	r3, 3a6e4 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   3a6d6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   3a6d8:	f104 0008 	add.w	r0, r4, #8
}
   3a6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a6e0:	f7fa b8ec 	b.w	348bc <z_impl_k_sem_give>
   3a6e4:	bd10      	pop	{r4, pc}

0003a6e6 <spi_nrfx_release>:
	return dev->data;
   3a6e6:	6900      	ldr	r0, [r0, #16]
{
   3a6e8:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   3a6ea:	6803      	ldr	r3, [r0, #0]
   3a6ec:	428b      	cmp	r3, r1
   3a6ee:	d106      	bne.n	3a6fe <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   3a6f0:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   3a6f4:	b934      	cbnz	r4, 3a704 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   3a6f6:	f7ff ffe6 	bl	3a6c6 <spi_context_unlock_unconditionally>
	return 0;
   3a6fa:	4620      	mov	r0, r4
}
   3a6fc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3a6fe:	f06f 0015 	mvn.w	r0, #21
   3a702:	e7fb      	b.n	3a6fc <spi_nrfx_release+0x16>
		return -EBUSY;
   3a704:	f06f 000f 	mvn.w	r0, #15
   3a708:	e7f8      	b.n	3a6fc <spi_nrfx_release+0x16>

0003a70a <spi_nor_pages_layout>:
	*layout = &cfg->layout;
   3a70a:	6843      	ldr	r3, [r0, #4]
   3a70c:	3314      	adds	r3, #20
   3a70e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   3a710:	2301      	movs	r3, #1
   3a712:	6013      	str	r3, [r2, #0]
}
   3a714:	4770      	bx	lr

0003a716 <release_device.isra.0>:
   3a716:	f7fa b8d1 	b.w	348bc <z_impl_k_sem_give>

0003a71a <acquire_device.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   3a71a:	f04f 32ff 	mov.w	r2, #4294967295
   3a71e:	f04f 33ff 	mov.w	r3, #4294967295
   3a722:	f7fa b90f 	b.w	34944 <z_impl_k_sem_take>

0003a726 <spi_nor_access>:
{
   3a726:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct spi_nor_config *const driver_cfg = dev->config;
   3a728:	6844      	ldr	r4, [r0, #4]
	struct spi_nor_data *const driver_data = dev->data;
   3a72a:	6907      	ldr	r7, [r0, #16]
	uint8_t buf[5] = { 0 };
   3a72c:	2000      	movs	r0, #0
{
   3a72e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buf[5] = { 0 };
   3a730:	9000      	str	r0, [sp, #0]
   3a732:	f88d 0004 	strb.w	r0, [sp, #4]
	struct spi_buf spi_buf[2] = {
   3a736:	2001      	movs	r0, #1
{
   3a738:	9d11      	ldr	r5, [sp, #68]	; 0x44
	struct spi_buf spi_buf[2] = {
   3a73a:	9007      	str	r0, [sp, #28]
   3a73c:	9810      	ldr	r0, [sp, #64]	; 0x40
	bool is_write = (access & NOR_ACCESS_WRITE) != 0U;
   3a73e:	f002 0680 	and.w	r6, r2, #128	; 0x80
	struct spi_buf spi_buf[2] = {
   3a742:	e9cd 0508 	strd	r0, r5, [sp, #32]
	if (is_addressed) {
   3a746:	07d0      	lsls	r0, r2, #31
	struct spi_buf spi_buf[2] = {
   3a748:	f8cd d018 	str.w	sp, [sp, #24]
	buf[0] = opcode;
   3a74c:	f88d 1000 	strb.w	r1, [sp]
	if (is_addressed) {
   3a750:	d512      	bpl.n	3a778 <spi_nor_access+0x52>
				      && driver_data->flag_access_32bit));
   3a752:	7f3a      	ldrb	r2, [r7, #28]
		union {
   3a754:	ba1b      	rev	r3, r3
		if (use_32bit) {
   3a756:	07d1      	lsls	r1, r2, #31
		} addr32 = {
   3a758:	9304      	str	r3, [sp, #16]
			memcpy(&buf[1], &addr32.u8[1], 3);
   3a75a:	bf57      	itett	pl
   3a75c:	f8bd 3011 	ldrhpl.w	r3, [sp, #17]
			memcpy(&buf[1], &addr32.u8[0], 4);
   3a760:	f8cd 3001 	strmi.w	r3, [sp, #1]
			memcpy(&buf[1], &addr32.u8[1], 3);
   3a764:	f8ad 3001 	strhpl.w	r3, [sp, #1]
   3a768:	f89d 3013 	ldrbpl.w	r3, [sp, #19]
   3a76c:	bf4e      	itee	mi
   3a76e:	2305      	movmi	r3, #5
   3a770:	f88d 3003 	strbpl.w	r3, [sp, #3]
   3a774:	2304      	movpl	r3, #4
			spi_buf[0].len += 4;
   3a776:	9307      	str	r3, [sp, #28]
		.count = (length != 0) ? 2 : 1,
   3a778:	2d00      	cmp	r5, #0
   3a77a:	bf0c      	ite	eq
   3a77c:	2201      	moveq	r2, #1
   3a77e:	2202      	movne	r2, #2
	const struct spi_buf_set tx_set = {
   3a780:	ab06      	add	r3, sp, #24
 * @retval a value from spi_write()
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
	return spi_write(spec->bus, &spec->config, tx_bufs);
   3a782:	4621      	mov	r1, r4
	const struct spi_buf_set rx_set = {
   3a784:	e9cd 2303 	strd	r2, r3, [sp, #12]
	const struct spi_buf_set tx_set = {
   3a788:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set rx_set = {
   3a78a:	2302      	movs	r3, #2
   3a78c:	f851 0b04 	ldr.w	r0, [r1], #4
   3a790:	9305      	str	r3, [sp, #20]
	if (is_write) {
   3a792:	b136      	cbz	r6, 3a7a2 <spi_nor_access+0x7c>
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   3a794:	6883      	ldr	r3, [r0, #8]
   3a796:	681c      	ldr	r4, [r3, #0]
   3a798:	2300      	movs	r3, #0
   3a79a:	aa02      	add	r2, sp, #8
   3a79c:	47a0      	blx	r4
}
   3a79e:	b00b      	add	sp, #44	; 0x2c
   3a7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3a7a2:	6883      	ldr	r3, [r0, #8]
   3a7a4:	681c      	ldr	r4, [r3, #0]
   3a7a6:	ab04      	add	r3, sp, #16
   3a7a8:	e7f7      	b.n	3a79a <spi_nor_access+0x74>

0003a7aa <spi_nor_write_protection_set>:
	ret = spi_nor_cmd_write(dev, (write_protect) ?
   3a7aa:	2300      	movs	r3, #0
{
   3a7ac:	b507      	push	{r0, r1, r2, lr}
	ret = spi_nor_cmd_write(dev, (write_protect) ?
   3a7ae:	2900      	cmp	r1, #0
   3a7b0:	f04f 0280 	mov.w	r2, #128	; 0x80
   3a7b4:	bf0c      	ite	eq
   3a7b6:	2106      	moveq	r1, #6
   3a7b8:	2104      	movne	r1, #4
   3a7ba:	e9cd 3300 	strd	r3, r3, [sp]
   3a7be:	f7ff ffb2 	bl	3a726 <spi_nor_access>
}
   3a7c2:	b003      	add	sp, #12
   3a7c4:	f85d fb04 	ldr.w	pc, [sp], #4

0003a7c8 <spi_nor_read>:
{
   3a7c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3a7ca:	461e      	mov	r6, r3
	return cfg->flash_size;
   3a7cc:	6843      	ldr	r3, [r0, #4]
	if ((addr < 0) || ((addr + size) > flash_size)) {
   3a7ce:	1e0d      	subs	r5, r1, #0
{
   3a7d0:	4604      	mov	r4, r0
   3a7d2:	4617      	mov	r7, r2
	return cfg->flash_size;
   3a7d4:	691b      	ldr	r3, [r3, #16]
	if ((addr < 0) || ((addr + size) > flash_size)) {
   3a7d6:	db14      	blt.n	3a802 <spi_nor_read+0x3a>
   3a7d8:	19aa      	adds	r2, r5, r6
   3a7da:	429a      	cmp	r2, r3
   3a7dc:	d811      	bhi.n	3a802 <spi_nor_read+0x3a>
	acquire_device(dev);
   3a7de:	6900      	ldr	r0, [r0, #16]
   3a7e0:	f7ff ff9b 	bl	3a71a <acquire_device.isra.0>
	ret = spi_nor_cmd_addr_read(dev, SPI_NOR_CMD_READ, addr, dest, size);
   3a7e4:	462b      	mov	r3, r5
   3a7e6:	2201      	movs	r2, #1
   3a7e8:	2103      	movs	r1, #3
   3a7ea:	4620      	mov	r0, r4
   3a7ec:	e9cd 7600 	strd	r7, r6, [sp]
   3a7f0:	f7ff ff99 	bl	3a726 <spi_nor_access>
   3a7f4:	4605      	mov	r5, r0
	release_device(dev);
   3a7f6:	6920      	ldr	r0, [r4, #16]
   3a7f8:	f7ff ff8d 	bl	3a716 <release_device.isra.0>
}
   3a7fc:	4628      	mov	r0, r5
   3a7fe:	b003      	add	sp, #12
   3a800:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   3a802:	f06f 0515 	mvn.w	r5, #21
   3a806:	e7f9      	b.n	3a7fc <spi_nor_read+0x34>

0003a808 <spi_nor_wait_until_ready.isra.0>:
static int spi_nor_wait_until_ready(const struct device *dev)
   3a808:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3a80a:	4604      	mov	r4, r0
		ret = spi_nor_cmd_read(dev, SPI_NOR_CMD_RDSR, &reg, sizeof(reg));
   3a80c:	2501      	movs	r5, #1
   3a80e:	f10d 060f 	add.w	r6, sp, #15
   3a812:	2300      	movs	r3, #0
   3a814:	2105      	movs	r1, #5
   3a816:	461a      	mov	r2, r3
   3a818:	4620      	mov	r0, r4
   3a81a:	e9cd 6500 	strd	r6, r5, [sp]
   3a81e:	f7ff ff82 	bl	3a726 <spi_nor_access>
	} while (!ret && (reg & SPI_NOR_WIP_BIT));
   3a822:	b918      	cbnz	r0, 3a82c <spi_nor_wait_until_ready.isra.0+0x24>
   3a824:	f89d 300f 	ldrb.w	r3, [sp, #15]
   3a828:	07db      	lsls	r3, r3, #31
   3a82a:	d4f2      	bmi.n	3a812 <spi_nor_wait_until_ready.isra.0+0xa>
}
   3a82c:	b004      	add	sp, #16
   3a82e:	bd70      	pop	{r4, r5, r6, pc}

0003a830 <spi_nor_write>:
{
   3a830:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3a834:	4698      	mov	r8, r3
	return cfg->flash_size;
   3a836:	6843      	ldr	r3, [r0, #4]
	if ((addr < 0) || ((size + addr) > flash_size)) {
   3a838:	1e0c      	subs	r4, r1, #0
{
   3a83a:	4606      	mov	r6, r0
   3a83c:	4691      	mov	r9, r2
	return cfg->flash_size;
   3a83e:	691b      	ldr	r3, [r3, #16]
	if ((addr < 0) || ((size + addr) > flash_size)) {
   3a840:	db58      	blt.n	3a8f4 <spi_nor_write+0xc4>
   3a842:	eb04 0208 	add.w	r2, r4, r8
   3a846:	429a      	cmp	r2, r3
   3a848:	d854      	bhi.n	3a8f4 <spi_nor_write+0xc4>
	acquire_device(dev);
   3a84a:	6900      	ldr	r0, [r0, #16]
   3a84c:	f7ff ff65 	bl	3a71a <acquire_device.isra.0>
	ret = spi_nor_write_protection_set(dev, false);
   3a850:	2100      	movs	r1, #0
   3a852:	4630      	mov	r0, r6
   3a854:	f7ff ffa9 	bl	3a7aa <spi_nor_write_protection_set>
	if (ret == 0) {
   3a858:	4605      	mov	r5, r0
   3a85a:	b958      	cbnz	r0, 3a874 <spi_nor_write+0x44>
			spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   3a85c:	4682      	mov	sl, r0
		while (size > 0) {
   3a85e:	f1b8 0f00 	cmp.w	r8, #0
   3a862:	d112      	bne.n	3a88a <spi_nor_write+0x5a>
	int ret2 = spi_nor_write_protection_set(dev, false);
   3a864:	2100      	movs	r1, #0
   3a866:	4630      	mov	r0, r6
   3a868:	f7ff ff9f 	bl	3a7aa <spi_nor_write_protection_set>
   3a86c:	2d00      	cmp	r5, #0
   3a86e:	bf08      	it	eq
   3a870:	4605      	moveq	r5, r0
   3a872:	e003      	b.n	3a87c <spi_nor_write+0x4c>
   3a874:	2100      	movs	r1, #0
   3a876:	4630      	mov	r0, r6
   3a878:	f7ff ff97 	bl	3a7aa <spi_nor_write_protection_set>
	release_device(dev);
   3a87c:	6930      	ldr	r0, [r6, #16]
   3a87e:	f7ff ff4a 	bl	3a716 <release_device.isra.0>
}
   3a882:	4628      	mov	r0, r5
   3a884:	b002      	add	sp, #8
   3a886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (to_write >= page_size) {
   3a88a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   3a88e:	4647      	mov	r7, r8
   3a890:	bf28      	it	cs
   3a892:	f44f 7780 	movcs.w	r7, #256	; 0x100
			!= (addr / page_size)) {
   3a896:	4622      	mov	r2, r4
			if (((addr + to_write - 1U) / page_size)
   3a898:	19e3      	adds	r3, r4, r7
			!= (addr / page_size)) {
   3a89a:	2c00      	cmp	r4, #0
			if (((addr + to_write - 1U) / page_size)
   3a89c:	f103 33ff 	add.w	r3, r3, #4294967295
   3a8a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
			!= (addr / page_size)) {
   3a8a4:	bfb8      	it	lt
   3a8a6:	f104 02ff 	addlt.w	r2, r4, #255	; 0xff
			if (((addr + to_write - 1U) / page_size)
   3a8aa:	ebb3 2f22 	cmp.w	r3, r2, asr #8
   3a8ae:	d006      	beq.n	3a8be <spi_nor_write+0x8e>
				to_write = page_size - (addr % page_size);
   3a8b0:	4263      	negs	r3, r4
   3a8b2:	b2db      	uxtb	r3, r3
   3a8b4:	b2e7      	uxtb	r7, r4
   3a8b6:	bf58      	it	pl
   3a8b8:	425f      	negpl	r7, r3
   3a8ba:	f5c7 7780 	rsb	r7, r7, #256	; 0x100
			spi_nor_cmd_write(dev, SPI_NOR_CMD_WREN);
   3a8be:	2300      	movs	r3, #0
   3a8c0:	2280      	movs	r2, #128	; 0x80
   3a8c2:	2106      	movs	r1, #6
   3a8c4:	4630      	mov	r0, r6
   3a8c6:	e9cd aa00 	strd	sl, sl, [sp]
   3a8ca:	f7ff ff2c 	bl	3a726 <spi_nor_access>
			ret = spi_nor_cmd_addr_write(dev, SPI_NOR_CMD_PP, addr,
   3a8ce:	4623      	mov	r3, r4
   3a8d0:	2281      	movs	r2, #129	; 0x81
   3a8d2:	2102      	movs	r1, #2
   3a8d4:	4630      	mov	r0, r6
   3a8d6:	e9cd 9700 	strd	r9, r7, [sp]
   3a8da:	f7ff ff24 	bl	3a726 <spi_nor_access>
			if (ret != 0) {
   3a8de:	b938      	cbnz	r0, 3a8f0 <spi_nor_write+0xc0>
			spi_nor_wait_until_ready(dev);
   3a8e0:	4630      	mov	r0, r6
			size -= to_write;
   3a8e2:	eba8 0807 	sub.w	r8, r8, r7
			src = (const uint8_t *)src + to_write;
   3a8e6:	44b9      	add	r9, r7
			addr += to_write;
   3a8e8:	443c      	add	r4, r7
			spi_nor_wait_until_ready(dev);
   3a8ea:	f7ff ff8d 	bl	3a808 <spi_nor_wait_until_ready.isra.0>
   3a8ee:	e7b6      	b.n	3a85e <spi_nor_write+0x2e>
			ret = spi_nor_cmd_addr_write(dev, SPI_NOR_CMD_PP, addr,
   3a8f0:	4605      	mov	r5, r0
   3a8f2:	e7b7      	b.n	3a864 <spi_nor_write+0x34>
		return -EINVAL;
   3a8f4:	f06f 0515 	mvn.w	r5, #21
   3a8f8:	e7c3      	b.n	3a882 <spi_nor_write+0x52>

0003a8fa <is_regular_addr_valid>:
{
   3a8fa:	b538      	push	{r3, r4, r5, lr}
   3a8fc:	4604      	mov	r4, r0
   3a8fe:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   3a900:	f000 ffa8 	bl	3b854 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   3a904:	4284      	cmp	r4, r0
   3a906:	d209      	bcs.n	3a91c <is_regular_addr_valid+0x22>
   3a908:	2c00      	cmp	r4, #0
   3a90a:	db07      	blt.n	3a91c <is_regular_addr_valid+0x22>
	    addr < 0 ||
   3a90c:	42a8      	cmp	r0, r5
   3a90e:	d305      	bcc.n	3a91c <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   3a910:	442c      	add	r4, r5
	    len > flash_size ||
   3a912:	4284      	cmp	r4, r0
   3a914:	bf8c      	ite	hi
   3a916:	2000      	movhi	r0, #0
   3a918:	2001      	movls	r0, #1
}
   3a91a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   3a91c:	2000      	movs	r0, #0
   3a91e:	e7fc      	b.n	3a91a <is_regular_addr_valid+0x20>

0003a920 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3a920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   3a924:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   3a926:	6883      	ldr	r3, [r0, #8]
{
   3a928:	b086      	sub	sp, #24
   3a92a:	4688      	mov	r8, r1
   3a92c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3a92e:	695b      	ldr	r3, [r3, #20]
   3a930:	aa02      	add	r2, sp, #8
   3a932:	a901      	add	r1, sp, #4
   3a934:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   3a936:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3a938:	4625      	mov	r5, r4
   3a93a:	9b02      	ldr	r3, [sp, #8]
   3a93c:	42ab      	cmp	r3, r5
   3a93e:	d802      	bhi.n	3a946 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3a940:	b006      	add	sp, #24
   3a942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   3a946:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   3a948:	9f01      	ldr	r7, [sp, #4]
   3a94a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   3a94e:	687b      	ldr	r3, [r7, #4]
   3a950:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3a952:	683a      	ldr	r2, [r7, #0]
   3a954:	eb0a 0306 	add.w	r3, sl, r6
   3a958:	42b2      	cmp	r2, r6
   3a95a:	d802      	bhi.n	3a962 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3a95c:	469a      	mov	sl, r3
   3a95e:	3501      	adds	r5, #1
   3a960:	e7eb      	b.n	3a93a <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   3a962:	4649      	mov	r1, r9
			page_info.start_offset = off;
   3a964:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3a966:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3a968:	a803      	add	r0, sp, #12
   3a96a:	47c0      	blx	r8
   3a96c:	2800      	cmp	r0, #0
   3a96e:	d0e7      	beq.n	3a940 <flash_page_foreach+0x20>
			off += page_info.size;
   3a970:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3a972:	3601      	adds	r6, #1
			off += page_info.size;
   3a974:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   3a976:	e7ec      	b.n	3a952 <flash_page_foreach+0x32>

0003a978 <uarte_nrfx_config_get>:
{
   3a978:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   3a97a:	6902      	ldr	r2, [r0, #16]
   3a97c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   3a980:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3a984:	2000      	movs	r0, #0
   3a986:	4770      	bx	lr

0003a988 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3a988:	6843      	ldr	r3, [r0, #4]
   3a98a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3a98c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3a990:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3a994:	4770      	bx	lr

0003a996 <tx_start>:
{
   3a996:	b510      	push	{r4, lr}
	return dev->config;
   3a998:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   3a99a:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3a99c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3a9a0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3a9a4:	2200      	movs	r2, #0
   3a9a6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   3a9aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3a9ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   3a9b2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3a9b6:	6862      	ldr	r2, [r4, #4]
   3a9b8:	06d2      	lsls	r2, r2, #27
   3a9ba:	d50f      	bpl.n	3a9dc <tx_start+0x46>
	if (data->async) {
   3a9bc:	6902      	ldr	r2, [r0, #16]
   3a9be:	68d2      	ldr	r2, [r2, #12]
   3a9c0:	b12a      	cbz	r2, 3a9ce <tx_start+0x38>
		data->async->low_power_mask |= mask;
   3a9c2:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   3a9c6:	f041 0101 	orr.w	r1, r1, #1
   3a9ca:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3a9ce:	2208      	movs	r2, #8
   3a9d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   3a9d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   3a9d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3a9dc:	2201      	movs	r2, #1
   3a9de:	609a      	str	r2, [r3, #8]
}
   3a9e0:	bd10      	pop	{r4, pc}

0003a9e2 <user_callback>:
	if (data->async->user_callback) {
   3a9e2:	6903      	ldr	r3, [r0, #16]
   3a9e4:	68da      	ldr	r2, [r3, #12]
   3a9e6:	6813      	ldr	r3, [r2, #0]
   3a9e8:	b10b      	cbz	r3, 3a9ee <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   3a9ea:	6852      	ldr	r2, [r2, #4]
   3a9ec:	4718      	bx	r3
}
   3a9ee:	4770      	bx	lr

0003a9f0 <notify_uart_rx_rdy>:
{
   3a9f0:	b570      	push	{r4, r5, r6, lr}
   3a9f2:	b086      	sub	sp, #24
	return dev->data;
   3a9f4:	6906      	ldr	r6, [r0, #16]
{
   3a9f6:	4604      	mov	r4, r0
   3a9f8:	460d      	mov	r5, r1
	struct uart_event evt = {
   3a9fa:	2214      	movs	r2, #20
   3a9fc:	2100      	movs	r1, #0
   3a9fe:	a801      	add	r0, sp, #4
   3aa00:	f002 fe41 	bl	3d686 <memset>
   3aa04:	2302      	movs	r3, #2
   3aa06:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   3aa0a:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   3aa0c:	4620      	mov	r0, r4
	struct uart_event evt = {
   3aa0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3aa10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	user_callback(dev, &evt);
   3aa12:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   3aa14:	e9cd 3503 	strd	r3, r5, [sp, #12]
   3aa18:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   3aa1a:	f7ff ffe2 	bl	3a9e2 <user_callback>
}
   3aa1e:	b006      	add	sp, #24
   3aa20:	bd70      	pop	{r4, r5, r6, pc}

0003aa22 <notify_rx_buf_release>:
{
   3aa22:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   3aa24:	680f      	ldr	r7, [r1, #0]
{
   3aa26:	4606      	mov	r6, r0
   3aa28:	460c      	mov	r4, r1
   3aa2a:	4615      	mov	r5, r2
   3aa2c:	b087      	sub	sp, #28
	if (*buf) {
   3aa2e:	b187      	cbz	r7, 3aa52 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   3aa30:	2100      	movs	r1, #0
   3aa32:	2214      	movs	r2, #20
   3aa34:	a801      	add	r0, sp, #4
   3aa36:	f002 fe26 	bl	3d686 <memset>
   3aa3a:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   3aa3c:	4630      	mov	r0, r6
   3aa3e:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   3aa42:	f88d 3004 	strb.w	r3, [sp, #4]
   3aa46:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   3aa48:	f7ff ffcb 	bl	3a9e2 <user_callback>
		if (clear) {
   3aa4c:	b10d      	cbz	r5, 3aa52 <notify_rx_buf_release+0x30>
			*buf = NULL;
   3aa4e:	2300      	movs	r3, #0
   3aa50:	6023      	str	r3, [r4, #0]
}
   3aa52:	b007      	add	sp, #28
   3aa54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003aa56 <notify_rx_disable>:
{
   3aa56:	b510      	push	{r4, lr}
   3aa58:	b086      	sub	sp, #24
   3aa5a:	4604      	mov	r4, r0
	struct uart_event evt = {
   3aa5c:	2214      	movs	r2, #20
   3aa5e:	2100      	movs	r1, #0
   3aa60:	a801      	add	r0, sp, #4
   3aa62:	f002 fe10 	bl	3d686 <memset>
   3aa66:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   3aa68:	4620      	mov	r0, r4
   3aa6a:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   3aa6c:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   3aa70:	f7ff ffb7 	bl	3a9e2 <user_callback>
}
   3aa74:	b006      	add	sp, #24
   3aa76:	bd10      	pop	{r4, pc}

0003aa78 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   3aa78:	6843      	ldr	r3, [r0, #4]
{
   3aa7a:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   3aa7c:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   3aa7e:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   3aa80:	f04f 0020 	mov.w	r0, #32
   3aa84:	f3ef 8511 	mrs	r5, BASEPRI
   3aa88:	f380 8811 	msr	BASEPRI, r0
   3aa8c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   3aa90:	68e4      	ldr	r4, [r4, #12]
   3aa92:	6d20      	ldr	r0, [r4, #80]	; 0x50
   3aa94:	b190      	cbz	r0, 3aabc <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   3aa96:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   3aa98:	b998      	cbnz	r0, 3aac2 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   3aa9a:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3aa9e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3aaa2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   3aaa6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3aaaa:	f042 0220 	orr.w	r2, r2, #32
   3aaae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   3aab2:	f385 8811 	msr	BASEPRI, r5
   3aab6:	f3bf 8f6f 	isb	sy
}
   3aaba:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   3aabc:	f06f 000c 	mvn.w	r0, #12
   3aac0:	e7f7      	b.n	3aab2 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   3aac2:	f06f 000f 	mvn.w	r0, #15
   3aac6:	e7f4      	b.n	3aab2 <uarte_nrfx_rx_buf_rsp+0x3a>

0003aac8 <uarte_nrfx_callback_set>:
	if (!data->async) {
   3aac8:	6903      	ldr	r3, [r0, #16]
   3aaca:	68db      	ldr	r3, [r3, #12]
   3aacc:	b11b      	cbz	r3, 3aad6 <uarte_nrfx_callback_set+0xe>
	return 0;
   3aace:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   3aad0:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   3aad4:	4770      	bx	lr
		return -ENOTSUP;
   3aad6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   3aada:	4770      	bx	lr

0003aadc <uarte_nrfx_poll_in>:
	return dev->data;
   3aadc:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3aade:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   3aae0:	68d0      	ldr	r0, [r2, #12]
{
   3aae2:	b510      	push	{r4, lr}
	return config->uarte_regs;
   3aae4:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   3aae6:	b958      	cbnz	r0, 3ab00 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3aae8:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3aaec:	b15c      	cbz	r4, 3ab06 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   3aaee:	7d52      	ldrb	r2, [r2, #21]
   3aaf0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3aaf2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3aaf6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3aafa:	2201      	movs	r2, #1
   3aafc:	601a      	str	r2, [r3, #0]
}
   3aafe:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   3ab00:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ab04:	e7fb      	b.n	3aafe <uarte_nrfx_poll_in+0x22>
		return -1;
   3ab06:	f04f 30ff 	mov.w	r0, #4294967295
   3ab0a:	e7f8      	b.n	3aafe <uarte_nrfx_poll_in+0x22>

0003ab0c <uarte_nrfx_rx_disable>:
{
   3ab0c:	b538      	push	{r3, r4, r5, lr}
	return dev->data;
   3ab0e:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   3ab10:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   3ab12:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   3ab14:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   3ab16:	6d03      	ldr	r3, [r0, #80]	; 0x50
   3ab18:	b1b3      	cbz	r3, 3ab48 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   3ab1a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   3ab1c:	b153      	cbz	r3, 3ab34 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   3ab1e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   3ab22:	f023 0320 	bic.w	r3, r3, #32
   3ab26:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ab2a:	2300      	movs	r3, #0
   3ab2c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   3ab30:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
   3ab34:	3078      	adds	r0, #120	; 0x78
   3ab36:	f002 fcfe 	bl	3d536 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   3ab3a:	2000      	movs	r0, #0
   3ab3c:	68eb      	ldr	r3, [r5, #12]
   3ab3e:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ab42:	2301      	movs	r3, #1
   3ab44:	6063      	str	r3, [r4, #4]
}
   3ab46:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   3ab48:	f06f 000d 	mvn.w	r0, #13
   3ab4c:	e7fb      	b.n	3ab46 <uarte_nrfx_rx_disable+0x3a>

0003ab4e <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   3ab4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   3ab50:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   3ab52:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   3ab54:	460b      	mov	r3, r1
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   3ab56:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   3ab5a:	b1f1      	cbz	r1, 3ab9a <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   3ab5c:	2100      	movs	r1, #0
   3ab5e:	4618      	mov	r0, r3
   3ab60:	f002 fd91 	bl	3d686 <memset>
   3ab64:	4603      	mov	r3, r0
   3ab66:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3ab68:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ab6c:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ab6e:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   3ab70:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ab74:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   3ab78:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ab7c:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ab7e:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3ab82:	2800      	cmp	r0, #0
   3ab84:	d0fb      	beq.n	3ab7e <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ab86:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   3ab8a:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   3ab8e:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   3ab92:	b92b      	cbnz	r3, 3aba0 <rx_flush.isra.0+0x52>
			return rx_amount;
   3ab94:	b2c0      	uxtb	r0, r0
}
   3ab96:	b002      	add	sp, #8
   3ab98:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   3ab9a:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   3ab9c:	4669      	mov	r1, sp
   3ab9e:	e7e3      	b.n	3ab68 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   3aba0:	4285      	cmp	r5, r0
   3aba2:	d1f7      	bne.n	3ab94 <rx_flush.isra.0+0x46>
   3aba4:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   3aba6:	4293      	cmp	r3, r2
   3aba8:	d101      	bne.n	3abae <rx_flush.isra.0+0x60>
	return 0;
   3abaa:	2000      	movs	r0, #0
   3abac:	e7f3      	b.n	3ab96 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   3abae:	f813 1b01 	ldrb.w	r1, [r3], #1
   3abb2:	2900      	cmp	r1, #0
   3abb4:	d0f7      	beq.n	3aba6 <rx_flush.isra.0+0x58>
   3abb6:	e7ed      	b.n	3ab94 <rx_flush.isra.0+0x46>

0003abb8 <async_uart_release>:
{
   3abb8:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   3abba:	6903      	ldr	r3, [r0, #16]
{
   3abbc:	4604      	mov	r4, r0
	__asm__ volatile(
   3abbe:	f04f 0220 	mov.w	r2, #32
   3abc2:	f3ef 8611 	mrs	r6, BASEPRI
   3abc6:	f382 8811 	msr	BASEPRI, r2
   3abca:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   3abce:	68dd      	ldr	r5, [r3, #12]
   3abd0:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   3abd4:	ea23 0301 	bic.w	r3, r3, r1
   3abd8:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	if (!data->async->low_power_mask) {
   3abdc:	b973      	cbnz	r3, 3abfc <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   3abde:	2902      	cmp	r1, #2
   3abe0:	d107      	bne.n	3abf2 <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
   3abe2:	2205      	movs	r2, #5
   3abe4:	6840      	ldr	r0, [r0, #4]
   3abe6:	f105 01bc 	add.w	r1, r5, #188	; 0xbc
   3abea:	f7ff ffb0 	bl	3ab4e <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   3abee:	f885 00c1 	strb.w	r0, [r5, #193]	; 0xc1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3abf2:	2200      	movs	r2, #0
	return config->uarte_regs;
   3abf4:	6863      	ldr	r3, [r4, #4]
   3abf6:	681b      	ldr	r3, [r3, #0]
   3abf8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   3abfc:	f386 8811 	msr	BASEPRI, r6
   3ac00:	f3bf 8f6f 	isb	sy
}
   3ac04:	bd70      	pop	{r4, r5, r6, pc}

0003ac06 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   3ac06:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   3ac08:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ac0a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3ac0e:	b940      	cbnz	r0, 3ac22 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3ac10:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3ac12:	071b      	lsls	r3, r3, #28
   3ac14:	d406      	bmi.n	3ac24 <is_tx_ready.isra.0+0x1e>
   3ac16:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   3ac1a:	3800      	subs	r0, #0
   3ac1c:	bf18      	it	ne
   3ac1e:	2001      	movne	r0, #1
   3ac20:	4770      	bx	lr
   3ac22:	2001      	movs	r0, #1
}
   3ac24:	4770      	bx	lr

0003ac26 <uarte_nrfx_tx>:
{
   3ac26:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3ac2a:	4690      	mov	r8, r2
   3ac2c:	461c      	mov	r4, r3
   3ac2e:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
	return config->uarte_regs;
   3ac32:	6843      	ldr	r3, [r0, #4]
	if (!nrfx_is_in_ram(buf)) {
   3ac34:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
{
   3ac38:	4605      	mov	r5, r0
	return dev->data;
   3ac3a:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   3ac3e:	681b      	ldr	r3, [r3, #0]
	if (!nrfx_is_in_ram(buf)) {
   3ac40:	d150      	bne.n	3ace4 <uarte_nrfx_tx+0xbe>
	__asm__ volatile(
   3ac42:	f04f 0220 	mov.w	r2, #32
   3ac46:	f3ef 8a11 	mrs	sl, BASEPRI
   3ac4a:	f382 8811 	msr	BASEPRI, r2
   3ac4e:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   3ac52:	f8d9 600c 	ldr.w	r6, [r9, #12]
   3ac56:	68f2      	ldr	r2, [r6, #12]
   3ac58:	b142      	cbz	r2, 3ac6c <uarte_nrfx_tx+0x46>
	__asm__ volatile(
   3ac5a:	f38a 8811 	msr	BASEPRI, sl
   3ac5e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   3ac62:	f06f 000f 	mvn.w	r0, #15
}
   3ac66:	b002      	add	sp, #8
   3ac68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENSET = mask;
   3ac6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	data->async->tx_size = len;
   3ac70:	f8c6 800c 	str.w	r8, [r6, #12]
	if (!is_tx_ready(dev)) {
   3ac74:	6840      	ldr	r0, [r0, #4]
   3ac76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   3ac7a:	f7ff ffc4 	bl	3ac06 <is_tx_ready.isra.0>
   3ac7e:	b960      	cbnz	r0, 3ac9a <uarte_nrfx_tx+0x74>
		data->async->pend_tx_buf = (uint8_t *)buf;
   3ac80:	6131      	str	r1, [r6, #16]
   3ac82:	f38a 8811 	msr	BASEPRI, sl
   3ac86:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   3ac8a:	f899 300b 	ldrb.w	r3, [r9, #11]
   3ac8e:	2b01      	cmp	r3, #1
   3ac90:	d101      	bne.n	3ac96 <uarte_nrfx_tx+0x70>
	    && timeout != SYS_FOREVER_MS) {
   3ac92:	1c63      	adds	r3, r4, #1
   3ac94:	d10b      	bne.n	3acae <uarte_nrfx_tx+0x88>
	return 0;
   3ac96:	2000      	movs	r0, #0
   3ac98:	e7e5      	b.n	3ac66 <uarte_nrfx_tx+0x40>
		data->async->tx_amount = -1;
   3ac9a:	f04f 33ff 	mov.w	r3, #4294967295
		tx_start(dev, buf, len);
   3ac9e:	4642      	mov	r2, r8
   3aca0:	4628      	mov	r0, r5
		data->async->tx_buf = buf;
   3aca2:	60b1      	str	r1, [r6, #8]
		data->async->tx_amount = -1;
   3aca4:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
		tx_start(dev, buf, len);
   3aca8:	f7ff fe75 	bl	3a996 <tx_start>
   3acac:	e7e9      	b.n	3ac82 <uarte_nrfx_tx+0x5c>
   3acae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   3acb2:	f240 30e7 	movw	r0, #999	; 0x3e7
   3acb6:	2100      	movs	r1, #0
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   3acb8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3acbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3acc0:	2300      	movs	r3, #0
   3acc2:	fbc4 0106 	smlal	r0, r1, r4, r6
   3acc6:	f7e6 fa87 	bl	211d8 <__aeabi_uldivmod>
   3acca:	f8d9 500c 	ldr.w	r5, [r9, #12]
   3acce:	4602      	mov	r2, r0
   3acd0:	460b      	mov	r3, r1
   3acd2:	3518      	adds	r5, #24
	z_impl_k_timer_start(timer, duration, period);
   3acd4:	2000      	movs	r0, #0
   3acd6:	2100      	movs	r1, #0
   3acd8:	e9cd 0100 	strd	r0, r1, [sp]
   3acdc:	4628      	mov	r0, r5
   3acde:	f7fb ff85 	bl	36bec <z_impl_k_timer_start>
   3ace2:	e7d8      	b.n	3ac96 <uarte_nrfx_tx+0x70>
		return -ENOTSUP;
   3ace4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ace8:	e7bd      	b.n	3ac66 <uarte_nrfx_tx+0x40>

0003acea <rx_timeout>:
{
   3acea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   3acec:	6b47      	ldr	r7, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   3acee:	68fb      	ldr	r3, [r7, #12]
   3acf0:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
   3acf4:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   3acf8:	bb1a      	cbnz	r2, 3ad42 <rx_timeout+0x58>
    p_reg->INTENCLR = mask;
   3acfa:	2110      	movs	r1, #16
	const struct device *dev = data->dev;
   3acfc:	683d      	ldr	r5, [r7, #0]
	return config->uarte_regs;
   3acfe:	686a      	ldr	r2, [r5, #4]
   3ad00:	6812      	ldr	r2, [r2, #0]
   3ad02:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   3ad06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
	if (read != data->async->rx_total_byte_cnt) {
   3ad0a:	6e59      	ldr	r1, [r3, #100]	; 0x64
   3ad0c:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   3ad0e:	bf1c      	itt	ne
   3ad10:	665a      	strne	r2, [r3, #100]	; 0x64
		data->async->rx_timeout_left = data->async->rx_timeout;
   3ad12:	6eda      	ldrne	r2, [r3, #108]	; 0x6c
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   3ad14:	e9d3 1015 	ldrd	r1, r0, [r3, #84]	; 0x54
		data->async->rx_timeout_left = data->async->rx_timeout;
   3ad18:	bf18      	it	ne
   3ad1a:	675a      	strne	r2, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
   3ad1c:	e9d3 2c19 	ldrd	r2, ip, [r3, #100]	; 0x64
   3ad20:	eba2 020c 	sub.w	r2, r2, ip
	if (!hw_rx_counting_enabled(data) &&
   3ad24:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   3ad26:	4614      	mov	r4, r2
	if (!hw_rx_counting_enabled(data) &&
   3ad28:	da0c      	bge.n	3ad44 <rx_timeout+0x5a>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   3ad2a:	4288      	cmp	r0, r1
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   3ad2c:	f8c3 c0b0 	str.w	ip, [r3, #176]	; 0xb0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   3ad30:	d902      	bls.n	3ad38 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   3ad32:	1a0c      	subs	r4, r1, r0
	if (len > 0) {
   3ad34:	2c00      	cmp	r4, #0
   3ad36:	dc20      	bgt.n	3ad7a <rx_timeout+0x90>
    p_reg->INTENSET = mask;
   3ad38:	2210      	movs	r2, #16
	return config->uarte_regs;
   3ad3a:	686b      	ldr	r3, [r5, #4]
   3ad3c:	681b      	ldr	r3, [r3, #0]
   3ad3e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3ad42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   3ad44:	eb02 0c00 	add.w	ip, r2, r0
   3ad48:	458c      	cmp	ip, r1
   3ad4a:	d8f2      	bhi.n	3ad32 <rx_timeout+0x48>
	if (len > 0) {
   3ad4c:	2a00      	cmp	r2, #0
   3ad4e:	d0f3      	beq.n	3ad38 <rx_timeout+0x4e>
				< data->async->rx_timeout_slab)) {
   3ad50:	e9d3 121c 	ldrd	r1, r2, [r3, #112]	; 0x70
		if (clipped ||
   3ad54:	428a      	cmp	r2, r1
   3ad56:	da12      	bge.n	3ad7e <rx_timeout+0x94>
			notify_uart_rx_rdy(dev, len);
   3ad58:	4628      	mov	r0, r5
   3ad5a:	4621      	mov	r1, r4
   3ad5c:	f7ff fe48 	bl	3a9f0 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   3ad60:	68f8      	ldr	r0, [r7, #12]
   3ad62:	6d83      	ldr	r3, [r0, #88]	; 0x58
   3ad64:	4423      	add	r3, r4
   3ad66:	6583      	str	r3, [r0, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   3ad68:	6e83      	ldr	r3, [r0, #104]	; 0x68
   3ad6a:	4423      	add	r3, r4
   3ad6c:	6683      	str	r3, [r0, #104]	; 0x68
		if (clipped) {
   3ad6e:	2e00      	cmp	r6, #0
   3ad70:	d0e2      	beq.n	3ad38 <rx_timeout+0x4e>
	z_impl_k_timer_stop(timer);
   3ad72:	3078      	adds	r0, #120	; 0x78
   3ad74:	f002 fbdf 	bl	3d536 <z_impl_k_timer_stop>
}
   3ad78:	e7de      	b.n	3ad38 <rx_timeout+0x4e>
		clipped = true;
   3ad7a:	2601      	movs	r6, #1
   3ad7c:	e7ec      	b.n	3ad58 <rx_timeout+0x6e>
			data->async->rx_timeout_left -=
   3ad7e:	1a52      	subs	r2, r2, r1
   3ad80:	675a      	str	r2, [r3, #116]	; 0x74
		if (clipped) {
   3ad82:	e7d9      	b.n	3ad38 <rx_timeout+0x4e>

0003ad84 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   3ad84:	6843      	ldr	r3, [r0, #4]
{
   3ad86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   3ad8a:	681d      	ldr	r5, [r3, #0]
{
   3ad8c:	4604      	mov	r4, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ad8e:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	return dev->data;
   3ad92:	6903      	ldr	r3, [r0, #16]
{
   3ad94:	b088      	sub	sp, #32
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   3ad96:	b169      	cbz	r1, 3adb4 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ad98:	2200      	movs	r2, #0
   3ad9a:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   3ad9e:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   3ada2:	68da      	ldr	r2, [r3, #12]
   3ada4:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   3ada8:	3301      	adds	r3, #1
   3adaa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
   3adae:	b008      	add	sp, #32
   3adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3adb4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3adb8:	b313      	cbz	r3, 3ae00 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3adba:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   3adbe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3adc2:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   3adc6:	2214      	movs	r2, #20
    p_reg->ERRORSRC = errsrc_mask;
   3adc8:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
   3adcc:	a803      	add	r0, sp, #12
   3adce:	f002 fc5a 	bl	3d686 <memset>
   3add2:	2306      	movs	r3, #6
   3add4:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   3add8:	07f3      	lsls	r3, r6, #31
   3adda:	f100 80f4 	bmi.w	3afc6 <uarte_nrfx_isr_async+0x242>
   3adde:	07b7      	lsls	r7, r6, #30
   3ade0:	f100 80f3 	bmi.w	3afca <uarte_nrfx_isr_async+0x246>
   3ade4:	0770      	lsls	r0, r6, #29
   3ade6:	f100 80f2 	bmi.w	3afce <uarte_nrfx_isr_async+0x24a>
   3adea:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   3adee:	4620      	mov	r0, r4
   3adf0:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   3adf2:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   3adf6:	f7ff fdf4 	bl	3a9e2 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   3adfa:	4620      	mov	r0, r4
   3adfc:	f7ff fe86 	bl	3ab0c <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ae00:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   3ae04:	b37b      	cbz	r3, 3ae66 <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
   3ae06:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   3ae0a:	06d9      	lsls	r1, r3, #27
   3ae0c:	d52b      	bpl.n	3ae66 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ae0e:	f04f 0800 	mov.w	r8, #0
   3ae12:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   3ae16:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   3ae1a:	6863      	ldr	r3, [r4, #4]
	return dev->data;
   3ae1c:	6927      	ldr	r7, [r4, #16]
	return config->uarte_regs;
   3ae1e:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   3ae20:	2301      	movs	r3, #1
   3ae22:	68f8      	ldr	r0, [r7, #12]
   3ae24:	f880 30c4 	strb.w	r3, [r0, #196]	; 0xc4
	z_impl_k_timer_stop(timer);
   3ae28:	3078      	adds	r0, #120	; 0x78
   3ae2a:	f002 fb84 	bl	3d536 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   3ae2e:	68fa      	ldr	r2, [r7, #12]
    return p_reg->RXD.AMOUNT;
   3ae30:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   3ae34:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   3ae38:	6d90      	ldr	r0, [r2, #88]	; 0x58
	data->async->rx_flush_cnt = 0;
   3ae3a:	f882 80c1 	strb.w	r8, [r2, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   3ae3e:	1a1b      	subs	r3, r3, r0
   3ae40:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   3ae42:	6e90      	ldr	r0, [r2, #104]	; 0x68
	if (rx_len < 0) {
   3ae44:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   3ae48:	4408      	add	r0, r1
	if (rx_len > 0) {
   3ae4a:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   3ae4c:	6690      	str	r0, [r2, #104]	; 0x68
	if (rx_len > 0) {
   3ae4e:	dd02      	ble.n	3ae56 <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
   3ae50:	4620      	mov	r0, r4
   3ae52:	f7ff fdcd 	bl	3a9f0 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   3ae56:	68f9      	ldr	r1, [r7, #12]
   3ae58:	f891 30c2 	ldrb.w	r3, [r1, #194]	; 0xc2
   3ae5c:	2b00      	cmp	r3, #0
   3ae5e:	f040 80b8 	bne.w	3afd2 <uarte_nrfx_isr_async+0x24e>
		data->async->is_in_irq = false;
   3ae62:	f881 30c4 	strb.w	r3, [r1, #196]	; 0xc4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ae66:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   3ae6a:	b37b      	cbz	r3, 3aecc <uarte_nrfx_isr_async+0x148>
   3ae6c:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   3ae70:	bb66      	cbnz	r6, 3aecc <uarte_nrfx_isr_async+0x148>
	struct uart_event evt = {
   3ae72:	2214      	movs	r2, #20
   3ae74:	4631      	mov	r1, r6
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ae76:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   3ae7a:	a803      	add	r0, sp, #12
   3ae7c:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	return dev->data;
   3ae80:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   3ae82:	f002 fc00 	bl	3d686 <memset>
   3ae86:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   3ae88:	4620      	mov	r0, r4
   3ae8a:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   3ae8c:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   3ae90:	f7ff fda7 	bl	3a9e2 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   3ae94:	68ff      	ldr	r7, [r7, #12]
   3ae96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   3ae98:	1c5a      	adds	r2, r3, #1
   3ae9a:	d017      	beq.n	3aecc <uarte_nrfx_isr_async+0x148>
   3ae9c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   3aea0:	4631      	mov	r1, r6
   3aea2:	f240 30e7 	movw	r0, #999	; 0x3e7
		data->async->rx_timeout_left = data->async->rx_timeout;
   3aea6:	677b      	str	r3, [r7, #116]	; 0x74
			      K_MSEC(data->async->rx_timeout_slab),
   3aea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3aeaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3aeae:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   3aeb2:	fbcc 010e 	smlal	r0, r1, ip, lr
   3aeb6:	2300      	movs	r3, #0
   3aeb8:	f7e6 f98e 	bl	211d8 <__aeabi_uldivmod>
   3aebc:	4602      	mov	r2, r0
   3aebe:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   3aec0:	e9cd 0100 	strd	r0, r1, [sp]
   3aec4:	f107 0078 	add.w	r0, r7, #120	; 0x78
   3aec8:	f7fb fe90 	bl	36bec <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3aecc:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   3aed0:	b333      	cbz	r3, 3af20 <uarte_nrfx_isr_async+0x19c>
   3aed2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   3aed6:	bb1b      	cbnz	r3, 3af20 <uarte_nrfx_isr_async+0x19c>
	return dev->data;
   3aed8:	6926      	ldr	r6, [r4, #16]
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   3aeda:	2201      	movs	r2, #1
   3aedc:	68f1      	ldr	r1, [r6, #12]
   3aede:	4620      	mov	r0, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3aee0:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   3aee4:	3150      	adds	r1, #80	; 0x50
   3aee6:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   3aeea:	f7ff fd9a 	bl	3aa22 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   3aeee:	68f1      	ldr	r1, [r6, #12]
   3aef0:	2201      	movs	r2, #1
   3aef2:	4620      	mov	r0, r4
   3aef4:	315c      	adds	r1, #92	; 0x5c
   3aef6:	f7ff fd94 	bl	3aa22 <notify_rx_buf_release>
	if (!data->async->rx_enabled) {
   3aefa:	68f3      	ldr	r3, [r6, #12]
   3aefc:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   3af00:	b91a      	cbnz	r2, 3af0a <uarte_nrfx_isr_async+0x186>
		(void)rx_flush(dev, NULL, 0);
   3af02:	4611      	mov	r1, r2
   3af04:	6860      	ldr	r0, [r4, #4]
   3af06:	f7ff fe22 	bl	3ab4e <rx_flush.isra.0>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3af0a:	6863      	ldr	r3, [r4, #4]
   3af0c:	685b      	ldr	r3, [r3, #4]
   3af0e:	06d8      	lsls	r0, r3, #27
   3af10:	d503      	bpl.n	3af1a <uarte_nrfx_isr_async+0x196>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   3af12:	2102      	movs	r1, #2
   3af14:	4620      	mov	r0, r4
   3af16:	f7ff fe4f 	bl	3abb8 <async_uart_release>
	notify_rx_disable(dev);
   3af1a:	4620      	mov	r0, r4
   3af1c:	f7ff fd9b 	bl	3aa56 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3af20:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   3af24:	b1db      	cbz	r3, 3af5e <uarte_nrfx_isr_async+0x1da>
    return p_reg->INTENSET & mask;
   3af26:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   3af2a:	05d9      	lsls	r1, r3, #23
   3af2c:	d517      	bpl.n	3af5e <uarte_nrfx_isr_async+0x1da>
	return config->uarte_regs;
   3af2e:	6863      	ldr	r3, [r4, #4]
   3af30:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   3af32:	f04f 0120 	mov.w	r1, #32
   3af36:	f3ef 8211 	mrs	r2, BASEPRI
   3af3a:	f381 8811 	msr	BASEPRI, r1
   3af3e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3af42:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3af46:	b131      	cbz	r1, 3af56 <uarte_nrfx_isr_async+0x1d2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3af48:	2100      	movs	r1, #0
   3af4a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   3af4e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3af52:	2101      	movs	r1, #1
   3af54:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   3af56:	f382 8811 	msr	BASEPRI, r2
   3af5a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3af5e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   3af62:	2b00      	cmp	r3, #0
   3af64:	f43f af23 	beq.w	3adae <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   3af68:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   3af6c:	025a      	lsls	r2, r3, #9
   3af6e:	f57f af1e 	bpl.w	3adae <uarte_nrfx_isr_async+0x2a>
	return dev->config;
   3af72:	6863      	ldr	r3, [r4, #4]
	return dev->data;
   3af74:	6925      	ldr	r5, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3af76:	e9d3 6300 	ldrd	r6, r3, [r3]
   3af7a:	06db      	lsls	r3, r3, #27
   3af7c:	d457      	bmi.n	3b02e <uarte_nrfx_isr_async+0x2aa>
	if (!data->async->tx_buf) {
   3af7e:	68e8      	ldr	r0, [r5, #12]
   3af80:	6882      	ldr	r2, [r0, #8]
   3af82:	2a00      	cmp	r2, #0
   3af84:	d160      	bne.n	3b048 <uarte_nrfx_isr_async+0x2c4>
		if (data->async->pend_tx_buf) {
   3af86:	6903      	ldr	r3, [r0, #16]
   3af88:	2b00      	cmp	r3, #0
   3af8a:	f43f af10 	beq.w	3adae <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   3af8e:	f04f 0320 	mov.w	r3, #32
   3af92:	f3ef 8711 	mrs	r7, BASEPRI
   3af96:	f383 8811 	msr	BASEPRI, r3
   3af9a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3af9e:	f8d6 3158 	ldr.w	r3, [r6, #344]	; 0x158
			if (nrf_uarte_event_check(uarte,
   3afa2:	b15b      	cbz	r3, 3afbc <uarte_nrfx_isr_async+0x238>
				data->async->tx_buf = data->async->pend_tx_buf;
   3afa4:	68eb      	ldr	r3, [r5, #12]
				tx_start(dev, data->async->tx_buf,
   3afa6:	4620      	mov	r0, r4
				data->async->tx_buf = data->async->pend_tx_buf;
   3afa8:	6919      	ldr	r1, [r3, #16]
				data->async->pend_tx_buf = NULL;
   3afaa:	611a      	str	r2, [r3, #16]
				data->async->tx_amount = -1;
   3afac:	f04f 32ff 	mov.w	r2, #4294967295
   3afb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					 data->async->tx_size);
   3afb4:	68da      	ldr	r2, [r3, #12]
				data->async->tx_buf = data->async->pend_tx_buf;
   3afb6:	6099      	str	r1, [r3, #8]
				tx_start(dev, data->async->tx_buf,
   3afb8:	f7ff fced 	bl	3a996 <tx_start>
	__asm__ volatile(
   3afbc:	f387 8811 	msr	BASEPRI, r7
   3afc0:	f3bf 8f6f 	isb	sy
}
   3afc4:	e6f3      	b.n	3adae <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   3afc6:	2601      	movs	r6, #1
   3afc8:	e711      	b.n	3adee <uarte_nrfx_isr_async+0x6a>
   3afca:	2602      	movs	r6, #2
   3afcc:	e70f      	b.n	3adee <uarte_nrfx_isr_async+0x6a>
   3afce:	2604      	movs	r6, #4
   3afd0:	e70d      	b.n	3adee <uarte_nrfx_isr_async+0x6a>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   3afd2:	2200      	movs	r2, #0
   3afd4:	4620      	mov	r0, r4
   3afd6:	3150      	adds	r1, #80	; 0x50
   3afd8:	f7ff fd23 	bl	3aa22 <notify_rx_buf_release>
	__asm__ volatile(
   3afdc:	f04f 0320 	mov.w	r3, #32
   3afe0:	f3ef 8111 	mrs	r1, BASEPRI
   3afe4:	f383 8811 	msr	BASEPRI, r3
   3afe8:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   3afec:	68fb      	ldr	r3, [r7, #12]
   3afee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3aff0:	b1d2      	cbz	r2, 3b028 <uarte_nrfx_isr_async+0x2a4>
		data->async->rx_buf = data->async->rx_next_buf;
   3aff2:	651a      	str	r2, [r3, #80]	; 0x50
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   3aff4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   3aff6:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   3aff8:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   3affa:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
		data->async->rx_offset = 0;
   3affe:	659a      	str	r2, [r3, #88]	; 0x58
   3b000:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   3b004:	b90b      	cbnz	r3, 3b00a <uarte_nrfx_isr_async+0x286>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b006:	2301      	movs	r3, #1
   3b008:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   3b00a:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   3b00e:	f023 0320 	bic.w	r3, r3, #32
   3b012:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   3b016:	f381 8811 	msr	BASEPRI, r1
   3b01a:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   3b01e:	2200      	movs	r2, #0
   3b020:	68fb      	ldr	r3, [r7, #12]
   3b022:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
   3b026:	e71e      	b.n	3ae66 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b028:	2301      	movs	r3, #1
   3b02a:	6073      	str	r3, [r6, #4]
}
   3b02c:	e7f3      	b.n	3b016 <uarte_nrfx_isr_async+0x292>
    p_reg->INTENCLR = mask;
   3b02e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   3b032:	2101      	movs	r1, #1
   3b034:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
   3b038:	4620      	mov	r0, r4
   3b03a:	f7ff fdbd 	bl	3abb8 <async_uart_release>
		if (!data->async->tx_size) {
   3b03e:	68eb      	ldr	r3, [r5, #12]
   3b040:	68db      	ldr	r3, [r3, #12]
   3b042:	2b00      	cmp	r3, #0
   3b044:	d19b      	bne.n	3af7e <uarte_nrfx_isr_async+0x1fa>
   3b046:	e6b2      	b.n	3adae <uarte_nrfx_isr_async+0x2a>
	z_impl_k_timer_stop(timer);
   3b048:	3018      	adds	r0, #24
   3b04a:	f002 fa74 	bl	3d536 <z_impl_k_timer_stop>
	__asm__ volatile(
   3b04e:	f04f 0320 	mov.w	r3, #32
   3b052:	f3ef 8211 	mrs	r2, BASEPRI
   3b056:	f383 8811 	msr	BASEPRI, r3
   3b05a:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   3b05e:	68eb      	ldr	r3, [r5, #12]
   3b060:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   3b064:	2900      	cmp	r1, #0
   3b066:	bfac      	ite	ge
   3b068:	f8d3 70b4 	ldrge.w	r7, [r3, #180]	; 0xb4
    return p_reg->TXD.AMOUNT;
   3b06c:	f8d6 754c 	ldrlt.w	r7, [r6, #1356]	; 0x54c
	__asm__ volatile(
   3b070:	f382 8811 	msr	BASEPRI, r2
   3b074:	f3bf 8f6f 	isb	sy
	struct uart_event evt = {
   3b078:	2214      	movs	r2, #20
   3b07a:	2100      	movs	r1, #0
   3b07c:	a803      	add	r0, sp, #12
   3b07e:	f002 fb02 	bl	3d686 <memset>
		.data.tx.buf = data->async->tx_buf,
   3b082:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   3b084:	4620      	mov	r0, r4
	struct uart_event evt = {
   3b086:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   3b088:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   3b08a:	e9cd 2704 	strd	r2, r7, [sp, #16]
	if (amount == data->async->tx_size) {
   3b08e:	68da      	ldr	r2, [r3, #12]
   3b090:	4297      	cmp	r7, r2
		evt.type = UART_TX_ABORTED;
   3b092:	bf1c      	itt	ne
   3b094:	2201      	movne	r2, #1
   3b096:	f88d 200c 	strbne.w	r2, [sp, #12]
    p_reg->INTENCLR = mask;
   3b09a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   3b09e:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	data->async->tx_buf = NULL;
   3b0a2:	2200      	movs	r2, #0
   3b0a4:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   3b0a6:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   3b0a8:	f7ff fc9b 	bl	3a9e2 <user_callback>
   3b0ac:	e67f      	b.n	3adae <uarte_nrfx_isr_async+0x2a>

0003b0ae <uarte_nrfx_tx_abort>:
	return config->uarte_regs;
   3b0ae:	6843      	ldr	r3, [r0, #4]
{
   3b0b0:	b510      	push	{r4, lr}
	return config->uarte_regs;
   3b0b2:	681c      	ldr	r4, [r3, #0]
	if (data->async->tx_buf == NULL) {
   3b0b4:	6903      	ldr	r3, [r0, #16]
   3b0b6:	68d8      	ldr	r0, [r3, #12]
   3b0b8:	6883      	ldr	r3, [r0, #8]
   3b0ba:	b133      	cbz	r3, 3b0ca <uarte_nrfx_tx_abort+0x1c>
   3b0bc:	3018      	adds	r0, #24
   3b0be:	f002 fa3a 	bl	3d536 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b0c2:	2301      	movs	r3, #1
	return 0;
   3b0c4:	2000      	movs	r0, #0
   3b0c6:	60e3      	str	r3, [r4, #12]
}
   3b0c8:	bd10      	pop	{r4, pc}
		return -EFAULT;
   3b0ca:	f06f 000d 	mvn.w	r0, #13
   3b0ce:	e7fb      	b.n	3b0c8 <uarte_nrfx_tx_abort+0x1a>

0003b0d0 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   3b0d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   3b0d2:	6818      	ldr	r0, [r3, #0]
   3b0d4:	f7ff bfeb 	b.w	3b0ae <uarte_nrfx_tx_abort>

0003b0d8 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   3b0d8:	2000      	movs	r0, #0
   3b0da:	4770      	bx	lr

0003b0dc <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3b0dc:	4668      	mov	r0, sp
   3b0de:	f020 0107 	bic.w	r1, r0, #7
   3b0e2:	468d      	mov	sp, r1
   3b0e4:	b501      	push	{r0, lr}
	nrf_modem_os_trace_irq_handler();
   3b0e6:	f7f4 fdc3 	bl	2fc70 <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3b0ea:	f7ea fc3f 	bl	2596c <_arch_isr_direct_pm>
   3b0ee:	f7ea ff9d 	bl	2602c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3b0f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3b0f6:	4685      	mov	sp, r0
   3b0f8:	4770      	bx	lr

0003b0fa <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   3b0fa:	f002 b9ea 	b.w	3d4d2 <z_impl_k_busy_wait>

0003b0fe <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   3b0fe:	f002 b96e 	b.w	3d3de <k_is_in_isr>

0003b102 <trace_task_create>:
{
   3b102:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   3b104:	201d      	movs	r0, #29
   3b106:	2200      	movs	r2, #0
   3b108:	2106      	movs	r1, #6
   3b10a:	f7ea fbfd 	bl	25908 <z_arm_irq_priority_set>
}
   3b10e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   3b112:	201d      	movs	r0, #29
   3b114:	f7ea bbdc 	b.w	258d0 <arch_irq_enable>

0003b118 <read_task_create>:
{
   3b118:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   3b11a:	201c      	movs	r0, #28
   3b11c:	2200      	movs	r2, #0
   3b11e:	2106      	movs	r1, #6
   3b120:	f7ea fbf2 	bl	25908 <z_arm_irq_priority_set>
}
   3b124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   3b128:	201c      	movs	r0, #28
   3b12a:	f7ea bbd1 	b.w	258d0 <arch_irq_enable>

0003b12e <nrf_modem_os_trace_put>:
			transfer_len);
		remaining_bytes -= transfer_len;
	}
#endif
	return 0;
}
   3b12e:	2000      	movs	r0, #0
   3b130:	4770      	bx	lr

0003b132 <z_to_nrf_flags>:
{
   3b132:	4602      	mov	r2, r0
	if (z_flags & MSG_DONTWAIT) {
   3b134:	f3c0 1380 	ubfx	r3, r0, #6, #1
   3b138:	0058      	lsls	r0, r3, #1
	if (z_flags & MSG_PEEK) {
   3b13a:	0793      	lsls	r3, r2, #30
		nrf_flags |= NRF_MSG_PEEK;
   3b13c:	bf48      	it	mi
   3b13e:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   3b142:	0691      	lsls	r1, r2, #26
		nrf_flags |= NRF_MSG_TRUNC;
   3b144:	bf48      	it	mi
   3b146:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   3b14a:	05d3      	lsls	r3, r2, #23
		nrf_flags |= NRF_MSG_WAITALL;
   3b14c:	bf48      	it	mi
   3b14e:	f040 0010 	orrmi.w	r0, r0, #16
}
   3b152:	4770      	bx	lr

0003b154 <z_to_nrf_family>:
	switch (z_family) {
   3b154:	2806      	cmp	r0, #6
   3b156:	d809      	bhi.n	3b16c <z_to_nrf_family+0x18>
   3b158:	2806      	cmp	r0, #6
   3b15a:	d813      	bhi.n	3b184 <z_to_nrf_family+0x30>
   3b15c:	e8df f000 	tbb	[pc, r0]
   3b160:	0e150410 	.word	0x0e150410
   3b164:	1212      	.short	0x1212
   3b166:	0c          	.byte	0x0c
   3b167:	00          	.byte	0x00
		return NRF_AF_INET;
   3b168:	2002      	movs	r0, #2
   3b16a:	4770      	bx	lr
		return -EAFNOSUPPORT;
   3b16c:	2866      	cmp	r0, #102	; 0x66
   3b16e:	bf0c      	ite	eq
   3b170:	2066      	moveq	r0, #102	; 0x66
   3b172:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   3b176:	4770      	bx	lr
		return NRF_AF_LOCAL;
   3b178:	2001      	movs	r0, #1
   3b17a:	4770      	bx	lr
		return NRF_AF_PACKET;
   3b17c:	2005      	movs	r0, #5
   3b17e:	4770      	bx	lr
		return NRF_AF_UNSPEC;
   3b180:	2000      	movs	r0, #0
   3b182:	4770      	bx	lr
		return -EAFNOSUPPORT;
   3b184:	f06f 0069 	mvn.w	r0, #105	; 0x69
   3b188:	4770      	bx	lr
	switch (z_family) {
   3b18a:	200a      	movs	r0, #10
}
   3b18c:	4770      	bx	lr

0003b18e <z_to_nrf_protocol>:
	switch (proto) {
   3b18e:	f240 1311 	movw	r3, #273	; 0x111
   3b192:	4298      	cmp	r0, r3
   3b194:	d01f      	beq.n	3b1d6 <z_to_nrf_protocol+0x48>
   3b196:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   3b19a:	da10      	bge.n	3b1be <z_to_nrf_protocol+0x30>
   3b19c:	2811      	cmp	r0, #17
   3b19e:	d01d      	beq.n	3b1dc <z_to_nrf_protocol+0x4e>
   3b1a0:	dc07      	bgt.n	3b1b2 <z_to_nrf_protocol+0x24>
   3b1a2:	b1e0      	cbz	r0, 3b1de <z_to_nrf_protocol+0x50>
		return -EPROTONOSUPPORT;
   3b1a4:	2806      	cmp	r0, #6
   3b1a6:	bf08      	it	eq
   3b1a8:	2001      	moveq	r0, #1
   3b1aa:	bf18      	it	ne
   3b1ac:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3b1b0:	4770      	bx	lr
   3b1b2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3b1b6:	bf08      	it	eq
   3b1b8:	f44f 7082 	moveq.w	r0, #260	; 0x104
   3b1bc:	e7f5      	b.n	3b1aa <z_to_nrf_protocol+0x1c>
	switch (proto) {
   3b1be:	f240 2302 	movw	r3, #514	; 0x202
   3b1c2:	4298      	cmp	r0, r3
   3b1c4:	d00b      	beq.n	3b1de <z_to_nrf_protocol+0x50>
   3b1c6:	f240 2303 	movw	r3, #515	; 0x203
   3b1ca:	4298      	cmp	r0, r3
   3b1cc:	d007      	beq.n	3b1de <z_to_nrf_protocol+0x50>
   3b1ce:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   3b1d2:	4298      	cmp	r0, r3
   3b1d4:	e7e9      	b.n	3b1aa <z_to_nrf_protocol+0x1c>
		return NRF_SPROTO_DTLS1v2;
   3b1d6:	f44f 7087 	mov.w	r0, #270	; 0x10e
   3b1da:	4770      	bx	lr
	switch (proto) {
   3b1dc:	2002      	movs	r0, #2
}
   3b1de:	4770      	bx	lr

0003b1e0 <nrf91_socket_is_supported>:
}
   3b1e0:	2001      	movs	r0, #1
   3b1e2:	4770      	bx	lr

0003b1e4 <nrf91_socket_offload_setsockopt>:
{
   3b1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b1e8:	461e      	mov	r6, r3
	switch (z_in_level) {
   3b1ea:	f240 2302 	movw	r3, #514	; 0x202
{
   3b1ee:	b086      	sub	sp, #24
	switch (z_in_level) {
   3b1f0:	4299      	cmp	r1, r3
{
   3b1f2:	460c      	mov	r4, r1
   3b1f4:	4615      	mov	r5, r2
   3b1f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   3b1f8:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   3b1fc:	d005      	beq.n	3b20a <nrf91_socket_offload_setsockopt+0x26>
   3b1fe:	dc20      	bgt.n	3b242 <nrf91_socket_offload_setsockopt+0x5e>
   3b200:	2901      	cmp	r1, #1
   3b202:	d002      	beq.n	3b20a <nrf91_socket_offload_setsockopt+0x26>
   3b204:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3b208:	d126      	bne.n	3b258 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3b20a:	4629      	mov	r1, r5
   3b20c:	4620      	mov	r0, r4
   3b20e:	aa03      	add	r2, sp, #12
   3b210:	f7ee fa4e 	bl	296b0 <z_to_nrf_optname>
   3b214:	2800      	cmp	r0, #0
   3b216:	db1f      	blt.n	3b258 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3b218:	2c01      	cmp	r4, #1
   3b21a:	d116      	bne.n	3b24a <nrf91_socket_offload_setsockopt+0x66>
   3b21c:	3d14      	subs	r5, #20
   3b21e:	2d01      	cmp	r5, #1
   3b220:	d805      	bhi.n	3b22e <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   3b222:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3b224:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3b226:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3b228:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3b22a:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   3b22c:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3b22e:	4633      	mov	r3, r6
   3b230:	4621      	mov	r1, r4
   3b232:	4640      	mov	r0, r8
   3b234:	9a03      	ldr	r2, [sp, #12]
   3b236:	9700      	str	r7, [sp, #0]
   3b238:	f002 f82b 	bl	3d292 <nrf_setsockopt>
}
   3b23c:	b006      	add	sp, #24
   3b23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3b242:	f240 2303 	movw	r3, #515	; 0x203
   3b246:	4299      	cmp	r1, r3
   3b248:	e7de      	b.n	3b208 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3b24a:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3b24e:	d1ee      	bne.n	3b22e <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   3b250:	2d0a      	cmp	r5, #10
   3b252:	bf08      	it	eq
   3b254:	2701      	moveq	r7, #1
   3b256:	e7ea      	b.n	3b22e <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   3b258:	f7fe ff27 	bl	3a0aa <__errno>
   3b25c:	236d      	movs	r3, #109	; 0x6d
   3b25e:	6003      	str	r3, [r0, #0]
	return retval;
   3b260:	f04f 30ff 	mov.w	r0, #4294967295
   3b264:	e7ea      	b.n	3b23c <nrf91_socket_offload_setsockopt+0x58>

0003b266 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3b266:	6800      	ldr	r0, [r0, #0]
   3b268:	f001 bfde 	b.w	3d228 <nrf_listen>

0003b26c <nrf91_socket_offload_freeaddrinfo>:
{
   3b26c:	b538      	push	{r3, r4, r5, lr}
   3b26e:	4604      	mov	r4, r0
	while (next != NULL) {
   3b270:	b904      	cbnz	r4, 3b274 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3b272:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3b274:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   3b276:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   3b278:	f002 f9ba 	bl	3d5f0 <k_free>
		k_free(this);
   3b27c:	4620      	mov	r0, r4
   3b27e:	f002 f9b7 	bl	3d5f0 <k_free>
		next = next->ai_next;
   3b282:	462c      	mov	r4, r5
   3b284:	e7f4      	b.n	3b270 <nrf91_socket_offload_freeaddrinfo+0x4>

0003b286 <z_to_nrf_addrinfo_hints>:
{
   3b286:	b538      	push	{r3, r4, r5, lr}
   3b288:	460c      	mov	r4, r1
   3b28a:	4605      	mov	r5, r0
   3b28c:	2220      	movs	r2, #32
   3b28e:	2100      	movs	r1, #0
   3b290:	4620      	mov	r0, r4
   3b292:	f002 f9f8 	bl	3d686 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3b296:	686a      	ldr	r2, [r5, #4]
	if (flags & AI_NUMERICSERV) {
   3b298:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   3b29c:	04d2      	lsls	r2, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   3b29e:	bf48      	it	mi
   3b2a0:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3b2a4:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3b2a6:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   3b2a8:	2b03      	cmp	r3, #3
   3b2aa:	d003      	beq.n	3b2b4 <z_to_nrf_addrinfo_hints+0x2e>
   3b2ac:	2b04      	cmp	r3, #4
   3b2ae:	bf08      	it	eq
   3b2b0:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   3b2b4:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3b2b6:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3b2b8:	f7ff ff4c 	bl	3b154 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3b2bc:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3b2c0:	d00a      	beq.n	3b2d8 <z_to_nrf_addrinfo_hints+0x52>
	nrf_out->ai_family = family;
   3b2c2:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3b2c4:	6928      	ldr	r0, [r5, #16]
   3b2c6:	f7ff ff62 	bl	3b18e <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3b2ca:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3b2ce:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3b2d0:	d002      	beq.n	3b2d8 <z_to_nrf_addrinfo_hints+0x52>
	if (z_in->ai_canonname != NULL) {
   3b2d2:	69eb      	ldr	r3, [r5, #28]
   3b2d4:	b90b      	cbnz	r3, 3b2da <z_to_nrf_addrinfo_hints+0x54>
	return 0;
   3b2d6:	2000      	movs	r0, #0
}
   3b2d8:	bd38      	pop	{r3, r4, r5, pc}
		nrf_out->ai_canonname = z_in->ai_canonname;
   3b2da:	61a3      	str	r3, [r4, #24]
   3b2dc:	e7fb      	b.n	3b2d6 <z_to_nrf_addrinfo_hints+0x50>

0003b2de <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3b2de:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3b2e0:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3b2e2:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3b2e4:	4603      	mov	r3, r0
{
   3b2e6:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3b2e8:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3b2ec:	f101 0420 	add.w	r4, r1, #32
   3b2f0:	f101 0210 	add.w	r2, r1, #16
   3b2f4:	f852 5b04 	ldr.w	r5, [r2], #4
   3b2f8:	42a2      	cmp	r2, r4
   3b2fa:	f843 5b04 	str.w	r5, [r3], #4
   3b2fe:	d1f9      	bne.n	3b2f4 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3b300:	6a0b      	ldr	r3, [r1, #32]
   3b302:	7503      	strb	r3, [r0, #20]
}
   3b304:	bd30      	pop	{r4, r5, pc}

0003b306 <z_to_nrf_ipv6>:
{
   3b306:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3b308:	2124      	movs	r1, #36	; 0x24
   3b30a:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3b30c:	8841      	ldrh	r1, [r0, #2]
{
   3b30e:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3b310:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3b312:	210a      	movs	r1, #10
{
   3b314:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3b316:	6059      	str	r1, [r3, #4]
   3b318:	1d04      	adds	r4, r0, #4
   3b31a:	f103 0610 	add.w	r6, r3, #16
   3b31e:	f100 0714 	add.w	r7, r0, #20
   3b322:	4635      	mov	r5, r6
   3b324:	6820      	ldr	r0, [r4, #0]
   3b326:	6861      	ldr	r1, [r4, #4]
   3b328:	3408      	adds	r4, #8
   3b32a:	c503      	stmia	r5!, {r0, r1}
   3b32c:	42bc      	cmp	r4, r7
   3b32e:	462e      	mov	r6, r5
   3b330:	d1f7      	bne.n	3b322 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3b332:	7d12      	ldrb	r2, [r2, #20]
   3b334:	621a      	str	r2, [r3, #32]
}
   3b336:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003b338 <nrf91_socket_offload_sendto>:
{
   3b338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b33c:	b08d      	sub	sp, #52	; 0x34
   3b33e:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3b340:	460d      	mov	r5, r1
   3b342:	4616      	mov	r6, r2
   3b344:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   3b346:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   3b34a:	b964      	cbnz	r4, 3b366 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3b34c:	4618      	mov	r0, r3
   3b34e:	f7ff fef0 	bl	3b132 <z_to_nrf_flags>
   3b352:	4632      	mov	r2, r6
   3b354:	4603      	mov	r3, r0
   3b356:	4629      	mov	r1, r5
   3b358:	4640      	mov	r0, r8
   3b35a:	9415      	str	r4, [sp, #84]	; 0x54
}
   3b35c:	b00d      	add	sp, #52	; 0x34
   3b35e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3b362:	f001 bf1a 	b.w	3d19a <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   3b366:	8823      	ldrh	r3, [r4, #0]
   3b368:	2b01      	cmp	r3, #1
   3b36a:	d11a      	bne.n	3b3a2 <nrf91_socket_offload_sendto+0x6a>
	nrf_out->sin_port = ptr->sin_port;
   3b36c:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3b36e:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   3b372:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   3b376:	2302      	movs	r3, #2
   3b378:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3b37a:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3b37c:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3b37e:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3b380:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3b384:	f7ff fed5 	bl	3b132 <z_to_nrf_flags>
   3b388:	4603      	mov	r3, r0
   3b38a:	aa03      	add	r2, sp, #12
   3b38c:	f8cd 9004 	str.w	r9, [sp, #4]
   3b390:	9200      	str	r2, [sp, #0]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3b392:	4632      	mov	r2, r6
   3b394:	4629      	mov	r1, r5
   3b396:	4640      	mov	r0, r8
   3b398:	f001 feff 	bl	3d19a <nrf_sendto>
}
   3b39c:	b00d      	add	sp, #52	; 0x34
   3b39e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET6) {
   3b3a2:	2b02      	cmp	r3, #2
   3b3a4:	d10d      	bne.n	3b3c2 <nrf91_socket_offload_sendto+0x8a>
		z_to_nrf_ipv6(to, &ipv6);
   3b3a6:	f10d 090c 	add.w	r9, sp, #12
   3b3aa:	4649      	mov	r1, r9
   3b3ac:	4620      	mov	r0, r4
   3b3ae:	f7ff ffaa 	bl	3b306 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3b3b2:	4638      	mov	r0, r7
   3b3b4:	f7ff febd 	bl	3b132 <z_to_nrf_flags>
   3b3b8:	2224      	movs	r2, #36	; 0x24
   3b3ba:	4603      	mov	r3, r0
   3b3bc:	e9cd 9200 	strd	r9, r2, [sp]
   3b3c0:	e7e7      	b.n	3b392 <nrf91_socket_offload_sendto+0x5a>
	errno = ENOTSUP;
   3b3c2:	f7fe fe72 	bl	3a0aa <__errno>
   3b3c6:	2386      	movs	r3, #134	; 0x86
   3b3c8:	6003      	str	r3, [r0, #0]
	return retval;
   3b3ca:	f04f 30ff 	mov.w	r0, #4294967295
   3b3ce:	e7e5      	b.n	3b39c <nrf91_socket_offload_sendto+0x64>

0003b3d0 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3b3d0:	2300      	movs	r3, #0
{
   3b3d2:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3b3d4:	e9cd 3300 	strd	r3, r3, [sp]
   3b3d8:	f7ff ffae 	bl	3b338 <nrf91_socket_offload_sendto>
}
   3b3dc:	b003      	add	sp, #12
   3b3de:	f85d fb04 	ldr.w	pc, [sp], #4

0003b3e2 <nrf91_socket_offload_connect>:
{
   3b3e2:	4603      	mov	r3, r0
   3b3e4:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3b3e6:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   3b3e8:	880b      	ldrh	r3, [r1, #0]
{
   3b3ea:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   3b3ec:	2b01      	cmp	r3, #1
{
   3b3ee:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3b3f0:	d10f      	bne.n	3b412 <nrf91_socket_offload_connect+0x30>
	nrf_out->sin_port = ptr->sin_port;
   3b3f2:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3b3f4:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3b3f6:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3b3fa:	2302      	movs	r3, #2
   3b3fc:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3b3fe:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3b400:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3b404:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3b406:	4620      	mov	r0, r4
   3b408:	a901      	add	r1, sp, #4
   3b40a:	f001 fefc 	bl	3d206 <nrf_connect>
}
   3b40e:	b00a      	add	sp, #40	; 0x28
   3b410:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3b412:	2b02      	cmp	r3, #2
   3b414:	d104      	bne.n	3b420 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   3b416:	a901      	add	r1, sp, #4
   3b418:	f7ff ff75 	bl	3b306 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3b41c:	2224      	movs	r2, #36	; 0x24
   3b41e:	e7f2      	b.n	3b406 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3b420:	4620      	mov	r0, r4
   3b422:	f001 fef0 	bl	3d206 <nrf_connect>
		if (retval < 0) {
   3b426:	2800      	cmp	r0, #0
   3b428:	daf1      	bge.n	3b40e <nrf91_socket_offload_connect+0x2c>
	errno = ENOTSUP;
   3b42a:	f7fe fe3e 	bl	3a0aa <__errno>
   3b42e:	2386      	movs	r3, #134	; 0x86
   3b430:	6003      	str	r3, [r0, #0]
	return retval;
   3b432:	f04f 30ff 	mov.w	r0, #4294967295
   3b436:	e7ea      	b.n	3b40e <nrf91_socket_offload_connect+0x2c>

0003b438 <nrf91_socket_offload_bind>:
{
   3b438:	4603      	mov	r3, r0
   3b43a:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3b43c:	681c      	ldr	r4, [r3, #0]
	if (addr->sa_family == AF_INET) {
   3b43e:	880b      	ldrh	r3, [r1, #0]
{
   3b440:	4608      	mov	r0, r1
	if (addr->sa_family == AF_INET) {
   3b442:	2b01      	cmp	r3, #1
{
   3b444:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3b446:	d10f      	bne.n	3b468 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   3b448:	884b      	ldrh	r3, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3b44a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3b44c:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3b450:	2302      	movs	r3, #2
   3b452:	9302      	str	r3, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3b454:	684b      	ldr	r3, [r1, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3b456:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3b45a:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3b45c:	4620      	mov	r0, r4
   3b45e:	a901      	add	r1, sp, #4
   3b460:	f001 ff06 	bl	3d270 <nrf_bind>
}
   3b464:	b00a      	add	sp, #40	; 0x28
   3b466:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3b468:	2b02      	cmp	r3, #2
   3b46a:	d104      	bne.n	3b476 <nrf91_socket_offload_bind+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   3b46c:	a901      	add	r1, sp, #4
   3b46e:	f7ff ff4a 	bl	3b306 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3b472:	2224      	movs	r2, #36	; 0x24
   3b474:	e7f2      	b.n	3b45c <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   3b476:	f7fe fe18 	bl	3a0aa <__errno>
   3b47a:	2386      	movs	r3, #134	; 0x86
   3b47c:	6003      	str	r3, [r0, #0]
	return retval;
   3b47e:	f04f 30ff 	mov.w	r0, #4294967295
   3b482:	e7ef      	b.n	3b464 <nrf91_socket_offload_bind+0x2c>

0003b484 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3b484:	f7f9 b85c 	b.w	34540 <z_impl_k_mutex_lock>

0003b488 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3b488:	f7f9 b954 	b.w	34734 <z_impl_k_mutex_unlock>

0003b48c <nrf91_socket_offload_recvfrom>:
{
   3b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b490:	4606      	mov	r6, r0
   3b492:	b08c      	sub	sp, #48	; 0x30
	k_mutex_unlock(ctx->lock);
   3b494:	6840      	ldr	r0, [r0, #4]
{
   3b496:	460d      	mov	r5, r1
   3b498:	e9dd 4914 	ldrd	r4, r9, [sp, #80]	; 0x50
   3b49c:	4617      	mov	r7, r2
   3b49e:	4698      	mov	r8, r3
	k_mutex_unlock(ctx->lock);
   3b4a0:	f7ff fff2 	bl	3b488 <k_mutex_unlock.isra.0>
	if (from == NULL) {
   3b4a4:	f8d6 a000 	ldr.w	sl, [r6]
   3b4a8:	b9b4      	cbnz	r4, 3b4d8 <nrf91_socket_offload_recvfrom+0x4c>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3b4aa:	4640      	mov	r0, r8
   3b4ac:	f7ff fe41 	bl	3b132 <z_to_nrf_flags>
   3b4b0:	4629      	mov	r1, r5
   3b4b2:	4603      	mov	r3, r0
   3b4b4:	463a      	mov	r2, r7
   3b4b6:	4650      	mov	r0, sl
   3b4b8:	e9cd 4400 	strd	r4, r4, [sp]
   3b4bc:	f001 fe88 	bl	3d1d0 <nrf_recvfrom>
   3b4c0:	4605      	mov	r5, r0
	k_mutex_lock(ctx->lock, K_FOREVER);
   3b4c2:	6870      	ldr	r0, [r6, #4]
   3b4c4:	f04f 32ff 	mov.w	r2, #4294967295
   3b4c8:	f04f 33ff 	mov.w	r3, #4294967295
   3b4cc:	f7ff ffda 	bl	3b484 <k_mutex_lock.constprop.0.isra.0>
}
   3b4d0:	4628      	mov	r0, r5
   3b4d2:	b00c      	add	sp, #48	; 0x30
   3b4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3b4d8:	2324      	movs	r3, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3b4da:	4640      	mov	r0, r8
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3b4dc:	9302      	str	r3, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3b4de:	f7ff fe28 	bl	3b132 <z_to_nrf_flags>
   3b4e2:	f10d 080c 	add.w	r8, sp, #12
   3b4e6:	aa02      	add	r2, sp, #8
   3b4e8:	4603      	mov	r3, r0
   3b4ea:	4629      	mov	r1, r5
   3b4ec:	9201      	str	r2, [sp, #4]
   3b4ee:	4650      	mov	r0, sl
   3b4f0:	463a      	mov	r2, r7
   3b4f2:	f8cd 8000 	str.w	r8, [sp]
   3b4f6:	f001 fe6b 	bl	3d1d0 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3b4fa:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3b4fc:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   3b4fe:	2b02      	cmp	r3, #2
   3b500:	d10a      	bne.n	3b518 <nrf91_socket_offload_recvfrom+0x8c>
	ptr->sin_port = nrf_in->sin_port;
   3b502:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   3b506:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   3b508:	2301      	movs	r3, #1
   3b50a:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3b50c:	9b06      	ldr	r3, [sp, #24]
   3b50e:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3b510:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   3b512:	f8c9 3000 	str.w	r3, [r9]
   3b516:	e7d4      	b.n	3b4c2 <nrf91_socket_offload_recvfrom+0x36>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3b518:	2b0a      	cmp	r3, #10
   3b51a:	d1d2      	bne.n	3b4c2 <nrf91_socket_offload_recvfrom+0x36>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3b51c:	4641      	mov	r1, r8
   3b51e:	4620      	mov	r0, r4
   3b520:	f7ff fedd 	bl	3b2de <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3b524:	2318      	movs	r3, #24
   3b526:	e7f4      	b.n	3b512 <nrf91_socket_offload_recvfrom+0x86>

0003b528 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3b528:	2300      	movs	r3, #0
{
   3b52a:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3b52c:	e9cd 3300 	strd	r3, r3, [sp]
   3b530:	f7ff ffac 	bl	3b48c <nrf91_socket_offload_recvfrom>
}
   3b534:	b003      	add	sp, #12
   3b536:	f85d fb04 	ldr.w	pc, [sp], #4

0003b53a <nrf91_socket_offload_close>:
{
   3b53a:	b538      	push	{r3, r4, r5, lr}
   3b53c:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   3b53e:	6800      	ldr	r0, [r0, #0]
   3b540:	f001 fe1e 	bl	3d180 <nrf_close>
	if (retval == 0) {
   3b544:	4604      	mov	r4, r0
   3b546:	b910      	cbnz	r0, 3b54e <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   3b548:	4628      	mov	r0, r5
   3b54a:	f7ee fc23 	bl	29d94 <release_ctx>
}
   3b54e:	4620      	mov	r0, r4
   3b550:	bd38      	pop	{r3, r4, r5, pc}

0003b552 <nrf91_socket_offload_getsockopt>:
{
   3b552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b556:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   3b558:	2300      	movs	r3, #0
{
   3b55a:	b086      	sub	sp, #24
   3b55c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3b560:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3b564:	f8d8 3000 	ldr.w	r3, [r8]
{
   3b568:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3b56a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3b56c:	f240 2302 	movw	r3, #514	; 0x202
   3b570:	4299      	cmp	r1, r3
{
   3b572:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   3b574:	6807      	ldr	r7, [r0, #0]
	switch (z_in_level) {
   3b576:	d005      	beq.n	3b584 <nrf91_socket_offload_getsockopt+0x32>
   3b578:	dc31      	bgt.n	3b5de <nrf91_socket_offload_getsockopt+0x8c>
   3b57a:	2901      	cmp	r1, #1
   3b57c:	d002      	beq.n	3b584 <nrf91_socket_offload_getsockopt+0x32>
   3b57e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3b582:	d13d      	bne.n	3b600 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3b584:	4631      	mov	r1, r6
   3b586:	4620      	mov	r0, r4
   3b588:	aa02      	add	r2, sp, #8
   3b58a:	f7ee f891 	bl	296b0 <z_to_nrf_optname>
   3b58e:	2800      	cmp	r0, #0
   3b590:	db36      	blt.n	3b600 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3b592:	2c01      	cmp	r4, #1
   3b594:	d127      	bne.n	3b5e6 <nrf91_socket_offload_getsockopt+0x94>
   3b596:	f1a6 0314 	sub.w	r3, r6, #20
   3b59a:	2b01      	cmp	r3, #1
   3b59c:	d823      	bhi.n	3b5e6 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   3b59e:	2308      	movs	r3, #8
   3b5a0:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3b5a2:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3b5a4:	aa03      	add	r2, sp, #12
   3b5a6:	4638      	mov	r0, r7
   3b5a8:	9200      	str	r2, [sp, #0]
   3b5aa:	4621      	mov	r1, r4
   3b5ac:	9a02      	ldr	r2, [sp, #8]
   3b5ae:	f001 fe8b 	bl	3d2c8 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3b5b2:	4607      	mov	r7, r0
   3b5b4:	b978      	cbnz	r0, 3b5d6 <nrf91_socket_offload_getsockopt+0x84>
   3b5b6:	b175      	cbz	r5, 3b5d6 <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   3b5b8:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3b5ba:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   3b5bc:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3b5c0:	d109      	bne.n	3b5d6 <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   3b5c2:	2e04      	cmp	r6, #4
   3b5c4:	d111      	bne.n	3b5ea <nrf91_socket_offload_getsockopt+0x98>
				if (*(int *)optval != 0) {
   3b5c6:	6828      	ldr	r0, [r5, #0]
   3b5c8:	b128      	cbz	r0, 3b5d6 <nrf91_socket_offload_getsockopt+0x84>
					nrf_modem_os_errno_set(*(int *)optval);
   3b5ca:	f7ed fe3b 	bl	29244 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   3b5ce:	f7fe fd6c 	bl	3a0aa <__errno>
   3b5d2:	6803      	ldr	r3, [r0, #0]
   3b5d4:	602b      	str	r3, [r5, #0]
}
   3b5d6:	4638      	mov	r0, r7
   3b5d8:	b006      	add	sp, #24
   3b5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3b5de:	f240 2303 	movw	r3, #515	; 0x203
   3b5e2:	4299      	cmp	r1, r3
   3b5e4:	e7cd      	b.n	3b582 <nrf91_socket_offload_getsockopt+0x30>
   3b5e6:	462b      	mov	r3, r5
   3b5e8:	e7dc      	b.n	3b5a4 <nrf91_socket_offload_getsockopt+0x52>
			} else if ((optname == SO_RCVTIMEO) ||
   3b5ea:	3e14      	subs	r6, #20
   3b5ec:	2e01      	cmp	r6, #1
   3b5ee:	d8f2      	bhi.n	3b5d6 <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   3b5f0:	9b04      	ldr	r3, [sp, #16]
   3b5f2:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   3b5f4:	9b05      	ldr	r3, [sp, #20]
   3b5f6:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   3b5f8:	2308      	movs	r3, #8
   3b5fa:	f8c8 3000 	str.w	r3, [r8]
   3b5fe:	e7ea      	b.n	3b5d6 <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   3b600:	f7fe fd53 	bl	3a0aa <__errno>
   3b604:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3b606:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   3b60a:	6003      	str	r3, [r0, #0]
	return retval;
   3b60c:	e7e3      	b.n	3b5d6 <nrf91_socket_offload_getsockopt+0x84>

0003b60e <k_mutex_unlock.isra.0>:
   3b60e:	f7f9 b891 	b.w	34734 <z_impl_k_mutex_unlock>

0003b612 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3b612:	280d      	cmp	r0, #13
   3b614:	d004      	beq.n	3b620 <is_lfcr+0xe>
   3b616:	f1a0 030a 	sub.w	r3, r0, #10
   3b61a:	4258      	negs	r0, r3
   3b61c:	4158      	adcs	r0, r3
   3b61e:	4770      	bx	lr
		return true;
   3b620:	2001      	movs	r0, #1
}
   3b622:	4770      	bx	lr

0003b624 <skip_command_prefix>:
{
   3b624:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3b626:	6801      	ldr	r1, [r0, #0]
{
   3b628:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   3b62a:	1c8b      	adds	r3, r1, #2
   3b62c:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3b62e:	788c      	ldrb	r4, [r1, #2]
   3b630:	4620      	mov	r0, r4
   3b632:	f7ff ffee 	bl	3b612 <is_lfcr>
   3b636:	b910      	cbnz	r0, 3b63e <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3b638:	b10c      	cbz	r4, 3b63e <skip_command_prefix+0x1a>
	(*cmd)++;
   3b63a:	3103      	adds	r1, #3
   3b63c:	6011      	str	r1, [r2, #0]
}
   3b63e:	bd10      	pop	{r4, pc}

0003b640 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   3b640:	6813      	ldr	r3, [r2, #0]
   3b642:	f7ef b9a1 	b.w	2a988 <at_parser_max_params_from_str>

0003b646 <at_params_list_init>:
{
   3b646:	b538      	push	{r3, r4, r5, lr}
   3b648:	460d      	mov	r5, r1
	if (list == NULL) {
   3b64a:	4604      	mov	r4, r0
   3b64c:	b140      	cbz	r0, 3b660 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3b64e:	2110      	movs	r1, #16
   3b650:	4628      	mov	r0, r5
   3b652:	f001 ffd8 	bl	3d606 <k_calloc>
   3b656:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3b658:	b128      	cbz	r0, 3b666 <at_params_list_init+0x20>
	return 0;
   3b65a:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3b65c:	6025      	str	r5, [r4, #0]
}
   3b65e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3b660:	f06f 0015 	mvn.w	r0, #21
   3b664:	e7fb      	b.n	3b65e <at_params_list_init+0x18>
		return -ENOMEM;
   3b666:	f06f 000b 	mvn.w	r0, #11
   3b66a:	e7f8      	b.n	3b65e <at_params_list_init+0x18>

0003b66c <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3b66c:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3b66e:	4604      	mov	r4, r0
   3b670:	b148      	cbz	r0, 3b686 <at_params_list_free+0x1a>
   3b672:	6843      	ldr	r3, [r0, #4]
   3b674:	b13b      	cbz	r3, 3b686 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   3b676:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3b678:	f7ef fa84 	bl	2ab84 <at_params_list_clear>
	k_free(list->params);
   3b67c:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   3b67e:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   3b680:	f001 ffb6 	bl	3d5f0 <k_free>
	list->params = NULL;
   3b684:	6065      	str	r5, [r4, #4]
}
   3b686:	bd38      	pop	{r3, r4, r5, pc}

0003b688 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   3b688:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   3b68a:	b910      	cbnz	r0, 3b692 <at_params_empty_put+0xa>
		return -EINVAL;
   3b68c:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3b690:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   3b692:	6843      	ldr	r3, [r0, #4]
   3b694:	2b00      	cmp	r3, #0
   3b696:	d0f9      	beq.n	3b68c <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   3b698:	f7ef fa0a 	bl	2aab0 <at_params_get>
	if (param == NULL) {
   3b69c:	4604      	mov	r4, r0
   3b69e:	2800      	cmp	r0, #0
   3b6a0:	d0f4      	beq.n	3b68c <at_params_empty_put+0x4>
	at_param_clear(param);
   3b6a2:	f7ef fa4b 	bl	2ab3c <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3b6a6:	2304      	movs	r3, #4
	param->value.int_val = 0;
   3b6a8:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   3b6aa:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3b6ac:	2300      	movs	r3, #0
	return 0;
   3b6ae:	2000      	movs	r0, #0
	param->value.int_val = 0;
   3b6b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
	return 0;
   3b6b4:	e7ec      	b.n	3b690 <at_params_empty_put+0x8>

0003b6b6 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   3b6b6:	b570      	push	{r4, r5, r6, lr}
   3b6b8:	4616      	mov	r6, r2
   3b6ba:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   3b6bc:	b910      	cbnz	r0, 3b6c4 <at_params_int_put+0xe>
		return -EINVAL;
   3b6be:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   3b6c2:	bd70      	pop	{r4, r5, r6, pc}
	if (list == NULL || list->params == NULL) {
   3b6c4:	6843      	ldr	r3, [r0, #4]
   3b6c6:	2b00      	cmp	r3, #0
   3b6c8:	d0f9      	beq.n	3b6be <at_params_int_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3b6ca:	f7ef f9f1 	bl	2aab0 <at_params_get>
	if (param == NULL) {
   3b6ce:	4604      	mov	r4, r0
   3b6d0:	2800      	cmp	r0, #0
   3b6d2:	d0f4      	beq.n	3b6be <at_params_int_put+0x8>
	at_param_clear(param);
   3b6d4:	f7ef fa32 	bl	2ab3c <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   3b6d8:	2301      	movs	r3, #1
	return 0;
   3b6da:	2000      	movs	r0, #0
	param->value.int_val = value;
   3b6dc:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   3b6e0:	7023      	strb	r3, [r4, #0]
	return 0;
   3b6e2:	e7ee      	b.n	3b6c2 <at_params_int_put+0xc>

0003b6e4 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b6e6:	4617      	mov	r7, r2
   3b6e8:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3b6ea:	b910      	cbnz	r0, 3b6f2 <at_params_string_put+0xe>
		return -EINVAL;
   3b6ec:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3b6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   3b6f2:	6843      	ldr	r3, [r0, #4]
   3b6f4:	2b00      	cmp	r3, #0
   3b6f6:	d0f9      	beq.n	3b6ec <at_params_string_put+0x8>
   3b6f8:	2a00      	cmp	r2, #0
   3b6fa:	d0f7      	beq.n	3b6ec <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3b6fc:	f7ef f9d8 	bl	2aab0 <at_params_get>
	if (param == NULL) {
   3b700:	4604      	mov	r4, r0
   3b702:	2800      	cmp	r0, #0
   3b704:	d0f2      	beq.n	3b6ec <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   3b706:	1c68      	adds	r0, r5, #1
   3b708:	f001 ff79 	bl	3d5fe <k_malloc>
	if (param_value == NULL) {
   3b70c:	4606      	mov	r6, r0
   3b70e:	b160      	cbz	r0, 3b72a <at_params_string_put+0x46>
   3b710:	462a      	mov	r2, r5
   3b712:	4639      	mov	r1, r7
   3b714:	f001 ffaa 	bl	3d66c <memcpy>
	at_param_clear(param);
   3b718:	4620      	mov	r0, r4
   3b71a:	f7ef fa0f 	bl	2ab3c <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3b71e:	2302      	movs	r3, #2
	return 0;
   3b720:	2000      	movs	r0, #0
	param->size = str_len;
   3b722:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3b724:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3b726:	60a6      	str	r6, [r4, #8]
	return 0;
   3b728:	e7e2      	b.n	3b6f0 <at_params_string_put+0xc>
		return -ENOMEM;
   3b72a:	f06f 000b 	mvn.w	r0, #11
   3b72e:	e7df      	b.n	3b6f0 <at_params_string_put+0xc>

0003b730 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   3b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b732:	4617      	mov	r7, r2
   3b734:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3b736:	b910      	cbnz	r0, 3b73e <at_params_array_put+0xe>
		return -EINVAL;
   3b738:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3b73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3b73e:	6843      	ldr	r3, [r0, #4]
   3b740:	2b00      	cmp	r3, #0
   3b742:	d0f9      	beq.n	3b738 <at_params_array_put+0x8>
   3b744:	2a00      	cmp	r2, #0
   3b746:	d0f7      	beq.n	3b738 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3b748:	f7ef f9b2 	bl	2aab0 <at_params_get>
	if (param == NULL) {
   3b74c:	4604      	mov	r4, r0
   3b74e:	2800      	cmp	r0, #0
   3b750:	d0f2      	beq.n	3b738 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   3b752:	4628      	mov	r0, r5
   3b754:	f001 ff53 	bl	3d5fe <k_malloc>
	if (param_value == NULL) {
   3b758:	4606      	mov	r6, r0
   3b75a:	b160      	cbz	r0, 3b776 <at_params_array_put+0x46>
   3b75c:	462a      	mov	r2, r5
   3b75e:	4639      	mov	r1, r7
   3b760:	f001 ff84 	bl	3d66c <memcpy>
	at_param_clear(param);
   3b764:	4620      	mov	r0, r4
   3b766:	f7ef f9e9 	bl	2ab3c <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3b76a:	2303      	movs	r3, #3
	return 0;
   3b76c:	2000      	movs	r0, #0
	param->size = array_len;
   3b76e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3b770:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   3b772:	60a6      	str	r6, [r4, #8]
	return 0;
   3b774:	e7e2      	b.n	3b73c <at_params_array_put+0xc>
		return -ENOMEM;
   3b776:	f06f 000b 	mvn.w	r0, #11
   3b77a:	e7df      	b.n	3b73c <at_params_array_put+0xc>

0003b77c <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   3b77c:	b510      	push	{r4, lr}
   3b77e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3b780:	b910      	cbnz	r0, 3b788 <at_params_int_get+0xc>
		return -EINVAL;
   3b782:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
}
   3b786:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3b788:	6843      	ldr	r3, [r0, #4]
   3b78a:	2b00      	cmp	r3, #0
   3b78c:	d0f9      	beq.n	3b782 <at_params_int_get+0x6>
   3b78e:	2a00      	cmp	r2, #0
   3b790:	d0f7      	beq.n	3b782 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3b792:	f7ef f98d 	bl	2aab0 <at_params_get>
	if (param == NULL) {
   3b796:	2800      	cmp	r0, #0
   3b798:	d0f3      	beq.n	3b782 <at_params_int_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3b79a:	7803      	ldrb	r3, [r0, #0]
   3b79c:	2b01      	cmp	r3, #1
   3b79e:	d1f0      	bne.n	3b782 <at_params_int_get+0x6>
	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   3b7a0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3b7a4:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   3b7a8:	f142 0200 	adc.w	r2, r2, #0
   3b7ac:	2a00      	cmp	r2, #0
   3b7ae:	d1e8      	bne.n	3b782 <at_params_int_get+0x6>
	return 0;
   3b7b0:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   3b7b2:	6023      	str	r3, [r4, #0]
	return 0;
   3b7b4:	e7e7      	b.n	3b786 <at_params_int_get+0xa>

0003b7b6 <at_params_string_get>:
	return 0;
}

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3b7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b7b8:	4617      	mov	r7, r2
   3b7ba:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3b7bc:	b910      	cbnz	r0, 3b7c4 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   3b7be:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   3b7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   3b7c4:	6843      	ldr	r3, [r0, #4]
   3b7c6:	2b00      	cmp	r3, #0
   3b7c8:	d0f9      	beq.n	3b7be <at_params_string_get+0x8>
   3b7ca:	2a00      	cmp	r2, #0
   3b7cc:	d0f7      	beq.n	3b7be <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   3b7ce:	2c00      	cmp	r4, #0
   3b7d0:	d0f5      	beq.n	3b7be <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   3b7d2:	f7ef f96d 	bl	2aab0 <at_params_get>
	if (param == NULL) {
   3b7d6:	4606      	mov	r6, r0
   3b7d8:	2800      	cmp	r0, #0
   3b7da:	d0f0      	beq.n	3b7be <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3b7dc:	7803      	ldrb	r3, [r0, #0]
   3b7de:	2b02      	cmp	r3, #2
   3b7e0:	d1ed      	bne.n	3b7be <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   3b7e2:	f7ef f987 	bl	2aaf4 <at_param_size>
	if (*len < param_len) {
   3b7e6:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3b7e8:	4605      	mov	r5, r0
	if (*len < param_len) {
   3b7ea:	4283      	cmp	r3, r0
   3b7ec:	d307      	bcc.n	3b7fe <at_params_string_get+0x48>
   3b7ee:	4602      	mov	r2, r0
   3b7f0:	68b1      	ldr	r1, [r6, #8]
   3b7f2:	4638      	mov	r0, r7
   3b7f4:	f001 ff3a 	bl	3d66c <memcpy>
	return 0;
   3b7f8:	2000      	movs	r0, #0
	*len = param_len;
   3b7fa:	6025      	str	r5, [r4, #0]
	return 0;
   3b7fc:	e7e1      	b.n	3b7c2 <at_params_string_get+0xc>
		return -ENOMEM;
   3b7fe:	f06f 000b 	mvn.w	r0, #11
   3b802:	e7de      	b.n	3b7c2 <at_params_string_get+0xc>

0003b804 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   3b804:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3b806:	4605      	mov	r5, r0
   3b808:	b180      	cbz	r0, 3b82c <at_params_valid_count_get+0x28>
   3b80a:	6843      	ldr	r3, [r0, #4]
   3b80c:	b173      	cbz	r3, 3b82c <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   3b80e:	2100      	movs	r1, #0
   3b810:	f7ef f94e 	bl	2aab0 <at_params_get>
	size_t valid_i = 0;
   3b814:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3b816:	b108      	cbz	r0, 3b81c <at_params_valid_count_get+0x18>
   3b818:	7803      	ldrb	r3, [r0, #0]
   3b81a:	b90b      	cbnz	r3, 3b820 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3b81c:	4620      	mov	r0, r4
   3b81e:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   3b820:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3b822:	4621      	mov	r1, r4
   3b824:	4628      	mov	r0, r5
   3b826:	f7ef f943 	bl	2aab0 <at_params_get>
   3b82a:	e7f4      	b.n	3b816 <at_params_valid_count_get+0x12>
		return -EINVAL;
   3b82c:	f06f 0415 	mvn.w	r4, #21
   3b830:	e7f4      	b.n	3b81c <at_params_valid_count_get+0x18>

0003b832 <k_uptime_get>:
{
   3b832:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   3b834:	f001 fe4b 	bl	3d4ce <z_impl_k_uptime_ticks>
   3b838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3b83c:	fba0 0302 	umull	r0, r3, r0, r2
   3b840:	fb02 3101 	mla	r1, r2, r1, r3
   3b844:	0bc0      	lsrs	r0, r0, #15
}
   3b846:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   3b84a:	0bc9      	lsrs	r1, r1, #15
   3b84c:	bd08      	pop	{r3, pc}

0003b84e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   3b84e:	4700      	bx	r0

0003b850 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   3b850:	f001 be3f 	b.w	3d4d2 <z_impl_k_busy_wait>

0003b854 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3b854:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   3b858:	4770      	bx	lr

0003b85a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3b85a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   3b85e:	4770      	bx	lr

0003b860 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3b860:	f44f 7080 	mov.w	r0, #256	; 0x100
   3b864:	4770      	bx	lr

0003b866 <nrf_gpio_pin_clear>:
{
   3b866:	b507      	push	{r0, r1, r2, lr}
   3b868:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b86a:	a801      	add	r0, sp, #4
   3b86c:	f7f0 f8ec 	bl	2ba48 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3b870:	2301      	movs	r3, #1
   3b872:	9a01      	ldr	r2, [sp, #4]
   3b874:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   3b876:	60c3      	str	r3, [r0, #12]
}
   3b878:	b003      	add	sp, #12
   3b87a:	f85d fb04 	ldr.w	pc, [sp], #4

0003b87e <nrf_gpio_pin_set>:
{
   3b87e:	b507      	push	{r0, r1, r2, lr}
   3b880:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b882:	a801      	add	r0, sp, #4
   3b884:	f7f0 f8e0 	bl	2ba48 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3b888:	2301      	movs	r3, #1
   3b88a:	9a01      	ldr	r2, [sp, #4]
   3b88c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3b88e:	6083      	str	r3, [r0, #8]
}
   3b890:	b003      	add	sp, #12
   3b892:	f85d fb04 	ldr.w	pc, [sp], #4

0003b896 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   3b896:	7b0a      	ldrb	r2, [r1, #12]
{
   3b898:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   3b89a:	2a03      	cmp	r2, #3
   3b89c:	d829      	bhi.n	3b8f2 <xfer_completeness_check+0x5c>
   3b89e:	e8df f002 	tbb	[pc, r2]
   3b8a2:	2521      	.short	0x2521
   3b8a4:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3b8a6:	688a      	ldr	r2, [r1, #8]
   3b8a8:	0350      	lsls	r0, r2, #13
   3b8aa:	d504      	bpl.n	3b8b6 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   3b8ac:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   3b8b0:	6908      	ldr	r0, [r1, #16]
   3b8b2:	4290      	cmp	r0, r2
   3b8b4:	d107      	bne.n	3b8c6 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3b8b6:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   3b8b8:	0352      	lsls	r2, r2, #13
   3b8ba:	d41a      	bmi.n	3b8f2 <xfer_completeness_check+0x5c>
   3b8bc:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3b8c0:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3b8c2:	4291      	cmp	r1, r2
   3b8c4:	d015      	beq.n	3b8f2 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3b8c6:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3b8c8:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3b8ca:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3b8ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   3b8d2:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   3b8d4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3b8d8:	6908      	ldr	r0, [r1, #16]
   3b8da:	4290      	cmp	r0, r2
   3b8dc:	d1f3      	bne.n	3b8c6 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   3b8de:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   3b8e2:	e7ed      	b.n	3b8c0 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   3b8e4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3b8e8:	6909      	ldr	r1, [r1, #16]
   3b8ea:	e7ea      	b.n	3b8c2 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   3b8ec:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   3b8f0:	e7fa      	b.n	3b8e8 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   3b8f2:	2001      	movs	r0, #1
}
   3b8f4:	4770      	bx	lr

0003b8f6 <nrf_gpio_pin_set>:
{
   3b8f6:	b507      	push	{r0, r1, r2, lr}
   3b8f8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b8fa:	a801      	add	r0, sp, #4
   3b8fc:	f7f0 fec2 	bl	2c684 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3b900:	2301      	movs	r3, #1
   3b902:	9a01      	ldr	r2, [sp, #4]
   3b904:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3b906:	6083      	str	r3, [r0, #8]
}
   3b908:	b003      	add	sp, #12
   3b90a:	f85d fb04 	ldr.w	pc, [sp], #4

0003b90e <lfs_pair_isnull>:
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   3b90e:	6803      	ldr	r3, [r0, #0]
   3b910:	3301      	adds	r3, #1
   3b912:	d004      	beq.n	3b91e <lfs_pair_isnull+0x10>
   3b914:	6840      	ldr	r0, [r0, #4]
   3b916:	1c43      	adds	r3, r0, #1
   3b918:	4258      	negs	r0, r3
   3b91a:	4158      	adcs	r0, r3
   3b91c:	4770      	bx	lr
   3b91e:	2001      	movs	r0, #1
}
   3b920:	4770      	bx	lr

0003b922 <lfs_pair_cmp>:
        const lfs_block_t pairb[2]) {
   3b922:	b510      	push	{r4, lr}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   3b924:	680b      	ldr	r3, [r1, #0]
   3b926:	6804      	ldr	r4, [r0, #0]
   3b928:	429c      	cmp	r4, r3
   3b92a:	d009      	beq.n	3b940 <lfs_pair_cmp+0x1e>
   3b92c:	6840      	ldr	r0, [r0, #4]
   3b92e:	6849      	ldr	r1, [r1, #4]
   3b930:	4288      	cmp	r0, r1
   3b932:	d005      	beq.n	3b940 <lfs_pair_cmp+0x1e>
   3b934:	428c      	cmp	r4, r1
   3b936:	d003      	beq.n	3b940 <lfs_pair_cmp+0x1e>
   3b938:	1a18      	subs	r0, r3, r0
   3b93a:	bf18      	it	ne
   3b93c:	2001      	movne	r0, #1
}
   3b93e:	bd10      	pop	{r4, pc}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   3b940:	2000      	movs	r0, #0
   3b942:	e7fc      	b.n	3b93e <lfs_pair_cmp+0x1c>

0003b944 <lfs_tag_dsize>:
    return ((int32_t)(tag << 22) >> 22) == -1;
   3b944:	f340 0309 	sbfx	r3, r0, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   3b948:	f1b3 3fff 	cmp.w	r3, #4294967295
   3b94c:	bf08      	it	eq
   3b94e:	3001      	addeq	r0, #1
    return tag & 0x000003ff;
   3b950:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
   3b954:	3004      	adds	r0, #4
   3b956:	4770      	bx	lr

0003b958 <lfs_gstate_xor>:
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
   3b958:	b510      	push	{r4, lr}
   3b95a:	1f03      	subs	r3, r0, #4
   3b95c:	3904      	subs	r1, #4
   3b95e:	3008      	adds	r0, #8
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   3b960:	f853 2f04 	ldr.w	r2, [r3, #4]!
   3b964:	f851 4f04 	ldr.w	r4, [r1, #4]!
    for (int i = 0; i < 3; i++) {
   3b968:	4283      	cmp	r3, r0
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   3b96a:	ea82 0204 	eor.w	r2, r2, r4
   3b96e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
   3b970:	d1f6      	bne.n	3b960 <lfs_gstate_xor+0x8>
}
   3b972:	bd10      	pop	{r4, pc}

0003b974 <lfs_gstate_hasmovehere>:
        const lfs_block_t *pair) {
   3b974:	b508      	push	{r3, lr}
    return (tag & 0x70000000) >> 20;
   3b976:	6803      	ldr	r3, [r0, #0]
        const lfs_block_t *pair) {
   3b978:	4602      	mov	r2, r0
    return (tag & 0x70000000) >> 20;
   3b97a:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   3b97c:	f413 60e0 	ands.w	r0, r3, #1792	; 0x700
   3b980:	d005      	beq.n	3b98e <lfs_gstate_hasmovehere+0x1a>
   3b982:	1d10      	adds	r0, r2, #4
   3b984:	f7ff ffcd 	bl	3b922 <lfs_pair_cmp>
   3b988:	fab0 f080 	clz	r0, r0
   3b98c:	0940      	lsrs	r0, r0, #5
}
   3b98e:	bd08      	pop	{r3, pc}

0003b990 <lfs_alloc_lookahead>:
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   3b990:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
   3b992:	b510      	push	{r4, lr}
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   3b994:	6a1a      	ldr	r2, [r3, #32]
   3b996:	6d43      	ldr	r3, [r0, #84]	; 0x54
   3b998:	1ad3      	subs	r3, r2, r3
   3b99a:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->free.off)
   3b99c:	fbb1 f3f2 	udiv	r3, r1, r2
   3b9a0:	fb02 1113 	mls	r1, r2, r3, r1
    if (off < lfs->free.size) {
   3b9a4:	6d83      	ldr	r3, [r0, #88]	; 0x58
   3b9a6:	428b      	cmp	r3, r1
   3b9a8:	d90a      	bls.n	3b9c0 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
   3b9aa:	2201      	movs	r2, #1
   3b9ac:	6e40      	ldr	r0, [r0, #100]	; 0x64
   3b9ae:	094c      	lsrs	r4, r1, #5
   3b9b0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   3b9b4:	f001 011f 	and.w	r1, r1, #31
   3b9b8:	408a      	lsls	r2, r1
   3b9ba:	4313      	orrs	r3, r2
   3b9bc:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
}
   3b9c0:	2000      	movs	r0, #0
   3b9c2:	bd10      	pop	{r4, pc}

0003b9c4 <lfs_dir_commit_size>:
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
   3b9c4:	4602      	mov	r2, r0
   3b9c6:	b508      	push	{r3, lr}
    *size += lfs_tag_dsize(tag);
   3b9c8:	4608      	mov	r0, r1
   3b9ca:	f7ff ffbb 	bl	3b944 <lfs_tag_dsize>
   3b9ce:	6813      	ldr	r3, [r2, #0]
   3b9d0:	4403      	add	r3, r0
   3b9d2:	6013      	str	r3, [r2, #0]
}
   3b9d4:	2000      	movs	r0, #0
   3b9d6:	bd08      	pop	{r3, pc}

0003b9d8 <lfs_fs_size_count>:
    *size += 1;
   3b9d8:	6803      	ldr	r3, [r0, #0]
   3b9da:	3301      	adds	r3, #1
   3b9dc:	6003      	str	r3, [r0, #0]
}
   3b9de:	2000      	movs	r0, #0
   3b9e0:	4770      	bx	lr

0003b9e2 <lfs_deinit>:
    if (!lfs->cfg->read_buffer) {
   3b9e2:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_deinit(lfs_t *lfs) {
   3b9e4:	b510      	push	{r4, lr}
    if (!lfs->cfg->read_buffer) {
   3b9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
static int lfs_deinit(lfs_t *lfs) {
   3b9e8:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
   3b9ea:	b913      	cbnz	r3, 3b9f2 <lfs_deinit+0x10>
    free(p);
   3b9ec:	68c0      	ldr	r0, [r0, #12]
   3b9ee:	f7fb fde9 	bl	375c4 <free>
    if (!lfs->cfg->prog_buffer) {
   3b9f2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   3b9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3b9f6:	b913      	cbnz	r3, 3b9fe <lfs_deinit+0x1c>
   3b9f8:	69e0      	ldr	r0, [r4, #28]
   3b9fa:	f7fb fde3 	bl	375c4 <free>
    if (!lfs->cfg->lookahead_buffer) {
   3b9fe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   3ba00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   3ba02:	b913      	cbnz	r3, 3ba0a <lfs_deinit+0x28>
   3ba04:	6e60      	ldr	r0, [r4, #100]	; 0x64
   3ba06:	f7fb fddd 	bl	375c4 <free>
}
   3ba0a:	2000      	movs	r0, #0
   3ba0c:	bd10      	pop	{r4, pc}

0003ba0e <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
   3ba0e:	b530      	push	{r4, r5, lr}
   3ba10:	4613      	mov	r3, r2
   3ba12:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
   3ba14:	6802      	ldr	r2, [r0, #0]
    int err = lfs_bd_read(lfs,
   3ba16:	2008      	movs	r0, #8
        lfs_tag_t tag, const void *buffer) {
   3ba18:	b087      	sub	sp, #28
    int err = lfs_bd_read(lfs,
   3ba1a:	ad04      	add	r5, sp, #16
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
   3ba1c:	6e91      	ldr	r1, [r2, #104]	; 0x68
    int err = lfs_bd_read(lfs,
   3ba1e:	9003      	str	r0, [sp, #12]
   3ba20:	9502      	str	r5, [sp, #8]
   3ba22:	6858      	ldr	r0, [r3, #4]
   3ba24:	9001      	str	r0, [sp, #4]
   3ba26:	681b      	ldr	r3, [r3, #0]
   3ba28:	4610      	mov	r0, r2
   3ba2a:	9300      	str	r3, [sp, #0]
   3ba2c:	69cb      	ldr	r3, [r1, #28]
   3ba2e:	f102 0110 	add.w	r1, r2, #16
   3ba32:	f7f0 ff41 	bl	2c8b8 <lfs_bd_read>
    if (err) {
   3ba36:	b930      	cbnz	r0, 3ba46 <lfs_fs_parent_match+0x38>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
   3ba38:	4628      	mov	r0, r5
   3ba3a:	1d21      	adds	r1, r4, #4
   3ba3c:	f7ff ff71 	bl	3b922 <lfs_pair_cmp>
   3ba40:	3800      	subs	r0, #0
   3ba42:	bf18      	it	ne
   3ba44:	2001      	movne	r0, #1
}
   3ba46:	b007      	add	sp, #28
   3ba48:	bd30      	pop	{r4, r5, pc}

0003ba4a <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
   3ba4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   3ba4c:	2300      	movs	r3, #0
   3ba4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   3ba52:	9301      	str	r3, [sp, #4]
   3ba54:	f04f 33ff 	mov.w	r3, #4294967295
   3ba58:	9300      	str	r3, [sp, #0]
   3ba5a:	f7f1 f807 	bl	2ca6c <lfs_dir_fetchmatch>
}
   3ba5e:	b005      	add	sp, #20
   3ba60:	f85d fb04 	ldr.w	pc, [sp], #4

0003ba64 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   3ba64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdir->tail[1] = 1;
   3ba68:	2301      	movs	r3, #1
   3ba6a:	2400      	movs	r4, #0
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   3ba6c:	4606      	mov	r6, r0
   3ba6e:	4688      	mov	r8, r1
   3ba70:	4615      	mov	r5, r2
    pdir->tail[1] = 1;
   3ba72:	e9c2 4306 	strd	r4, r3, [r2, #24]
    while (!lfs_pair_isnull(pdir->tail)) {
   3ba76:	f102 0718 	add.w	r7, r2, #24
   3ba7a:	4638      	mov	r0, r7
   3ba7c:	f7ff ff47 	bl	3b90e <lfs_pair_isnull>
   3ba80:	b110      	cbz	r0, 3ba88 <lfs_fs_pred+0x24>
    return LFS_ERR_NOENT;
   3ba82:	f06f 0001 	mvn.w	r0, #1
   3ba86:	e011      	b.n	3baac <lfs_fs_pred+0x48>
        if (cycle >= lfs->cfg->block_count/2) {
   3ba88:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   3ba8a:	6a1b      	ldr	r3, [r3, #32]
   3ba8c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   3ba90:	d20e      	bcs.n	3bab0 <lfs_fs_pred+0x4c>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
   3ba92:	4641      	mov	r1, r8
   3ba94:	4638      	mov	r0, r7
        cycle += 1;
   3ba96:	3401      	adds	r4, #1
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
   3ba98:	f7ff ff43 	bl	3b922 <lfs_pair_cmp>
   3ba9c:	b130      	cbz	r0, 3baac <lfs_fs_pred+0x48>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
   3ba9e:	463a      	mov	r2, r7
   3baa0:	4629      	mov	r1, r5
   3baa2:	4630      	mov	r0, r6
   3baa4:	f7ff ffd1 	bl	3ba4a <lfs_dir_fetch>
        if (err) {
   3baa8:	2800      	cmp	r0, #0
   3baaa:	d0e6      	beq.n	3ba7a <lfs_fs_pred+0x16>
}
   3baac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LFS_ERR_CORRUPT;
   3bab0:	f06f 0053 	mvn.w	r0, #83	; 0x53
   3bab4:	e7fa      	b.n	3baac <lfs_fs_pred+0x48>

0003bab6 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
   3bab6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return tag & 0x000003ff;
   3bab8:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
   3babc:	9402      	str	r4, [sp, #8]
   3babe:	9c06      	ldr	r4, [sp, #24]
   3bac0:	9401      	str	r4, [sp, #4]
   3bac2:	2400      	movs	r4, #0
   3bac4:	9400      	str	r4, [sp, #0]
   3bac6:	f7f1 faf5 	bl	2d0b4 <lfs_dir_getslice>
}
   3baca:	b004      	add	sp, #16
   3bacc:	bd10      	pop	{r4, pc}

0003bace <lfs_bd_cmp.constprop.0>:
static int lfs_bd_cmp(lfs_t *lfs,
   3bace:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bad2:	b089      	sub	sp, #36	; 0x24
   3bad4:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   3bad8:	4607      	mov	r7, r0
   3bada:	4698      	mov	r8, r3
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   3badc:	462c      	mov	r4, r5
        int err = lfs_bd_read(lfs,
   3bade:	f04f 0a01 	mov.w	sl, #1
static int lfs_bd_cmp(lfs_t *lfs,
   3bae2:	9105      	str	r1, [sp, #20]
   3bae4:	442e      	add	r6, r5
        int err = lfs_bd_read(lfs,
   3bae6:	eb05 0902 	add.w	r9, r5, r2
   3baea:	f10d 0b1f 	add.w	fp, sp, #31
    for (lfs_off_t i = 0; i < size; i++) {
   3baee:	42b4      	cmp	r4, r6
   3baf0:	d101      	bne.n	3baf6 <lfs_bd_cmp.constprop.0+0x28>
    return LFS_CMP_EQ;
   3baf2:	2000      	movs	r0, #0
   3baf4:	e017      	b.n	3bb26 <lfs_bd_cmp.constprop.0+0x58>
        int err = lfs_bd_read(lfs,
   3baf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3baf8:	2100      	movs	r1, #0
   3bafa:	1b5b      	subs	r3, r3, r5
   3bafc:	4423      	add	r3, r4
   3bafe:	e9cd 8300 	strd	r8, r3, [sp]
   3bb02:	4638      	mov	r0, r7
   3bb04:	e9cd ba02 	strd	fp, sl, [sp, #8]
   3bb08:	9a05      	ldr	r2, [sp, #20]
   3bb0a:	eba9 0304 	sub.w	r3, r9, r4
   3bb0e:	f7f0 fed3 	bl	2c8b8 <lfs_bd_read>
        if (err) {
   3bb12:	b940      	cbnz	r0, 3bb26 <lfs_bd_cmp.constprop.0+0x58>
        if (dat != data[i]) {
   3bb14:	f814 2b01 	ldrb.w	r2, [r4], #1
   3bb18:	f89d 301f 	ldrb.w	r3, [sp, #31]
   3bb1c:	429a      	cmp	r2, r3
   3bb1e:	d0e6      	beq.n	3baee <lfs_bd_cmp.constprop.0+0x20>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   3bb20:	bf8c      	ite	hi
   3bb22:	2001      	movhi	r0, #1
   3bb24:	2002      	movls	r0, #2
}
   3bb26:	b009      	add	sp, #36	; 0x24
   3bb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003bb2c <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
   3bb2c:	4613      	mov	r3, r2
    return (a < b) ? a : b;
   3bb2e:	6882      	ldr	r2, [r0, #8]
   3bb30:	b530      	push	{r4, r5, lr}
    return tag & 0x000003ff;
   3bb32:	f3c1 0509 	ubfx	r5, r1, #0, #10
   3bb36:	42aa      	cmp	r2, r5
   3bb38:	bf28      	it	cs
   3bb3a:	462a      	movcs	r2, r5
        lfs_tag_t tag, const void *buffer) {
   3bb3c:	b085      	sub	sp, #20
    int res = lfs_bd_cmp(lfs,
   3bb3e:	9202      	str	r2, [sp, #8]
   3bb40:	6841      	ldr	r1, [r0, #4]
        lfs_tag_t tag, const void *buffer) {
   3bb42:	4604      	mov	r4, r0
    int res = lfs_bd_cmp(lfs,
   3bb44:	9101      	str	r1, [sp, #4]
   3bb46:	6859      	ldr	r1, [r3, #4]
   3bb48:	9100      	str	r1, [sp, #0]
   3bb4a:	6801      	ldr	r1, [r0, #0]
   3bb4c:	681b      	ldr	r3, [r3, #0]
   3bb4e:	4608      	mov	r0, r1
   3bb50:	f7ff ffbd 	bl	3bace <lfs_bd_cmp.constprop.0>
    if (res != LFS_CMP_EQ) {
   3bb54:	b928      	cbnz	r0, 3bb62 <lfs_dir_find_match+0x36>
    if (name->size != lfs_tag_size(tag)) {
   3bb56:	68a3      	ldr	r3, [r4, #8]
   3bb58:	42ab      	cmp	r3, r5
   3bb5a:	d002      	beq.n	3bb62 <lfs_dir_find_match+0x36>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   3bb5c:	bf34      	ite	cc
   3bb5e:	2001      	movcc	r0, #1
   3bb60:	2002      	movcs	r0, #2
}
   3bb62:	b005      	add	sp, #20
   3bb64:	bd30      	pop	{r4, r5, pc}

0003bb66 <lfs_ctz_index.isra.0>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   3bb66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   3bb68:	69c6      	ldr	r6, [r0, #28]
    lfs_off_t size = *off;
   3bb6a:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   3bb6c:	3e08      	subs	r6, #8
    if (i == 0) {
   3bb6e:	42b5      	cmp	r5, r6
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   3bb70:	460f      	mov	r7, r1
    if (i == 0) {
   3bb72:	d313      	bcc.n	3bb9c <lfs_ctz_index.isra.0+0x36>
    lfs_off_t i = size / b;
   3bb74:	fbb5 f0f6 	udiv	r0, r5, r6
    return __builtin_popcount(a);
   3bb78:	3801      	subs	r0, #1
   3bb7a:	f7e5 fc0d 	bl	21398 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   3bb7e:	1c84      	adds	r4, r0, #2
   3bb80:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
   3bb84:	fbb4 f4f6 	udiv	r4, r4, r6
   3bb88:	4620      	mov	r0, r4
   3bb8a:	f7e5 fc05 	bl	21398 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
   3bb8e:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
    return i;
   3bb92:	4620      	mov	r0, r4
    *off = size - b*i - 4*lfs_popc(i);
   3bb94:	fb04 5516 	mls	r5, r4, r6, r5
   3bb98:	603d      	str	r5, [r7, #0]
}
   3bb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   3bb9c:	2000      	movs	r0, #0
   3bb9e:	e7fc      	b.n	3bb9a <lfs_ctz_index.isra.0+0x34>

0003bba0 <lfs_ctz_find.constprop.0>:
static int lfs_ctz_find(lfs_t *lfs,
   3bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bba4:	b089      	sub	sp, #36	; 0x24
   3bba6:	4606      	mov	r6, r0
   3bba8:	460f      	mov	r7, r1
   3bbaa:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   3bbae:	9205      	str	r2, [sp, #20]
    if (size == 0) {
   3bbb0:	b94b      	cbnz	r3, 3bbc6 <lfs_ctz_find.constprop.0+0x26>
        *block = LFS_BLOCK_NULL;
   3bbb2:	f04f 32ff 	mov.w	r2, #4294967295
   3bbb6:	f8c8 2000 	str.w	r2, [r8]
        return 0;
   3bbba:	2000      	movs	r0, #0
    *off = pos;
   3bbbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3bbbe:	6013      	str	r3, [r2, #0]
}
   3bbc0:	b009      	add	sp, #36	; 0x24
   3bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   3bbc6:	6e84      	ldr	r4, [r0, #104]	; 0x68
   3bbc8:	3b01      	subs	r3, #1
   3bbca:	a907      	add	r1, sp, #28
   3bbcc:	4620      	mov	r0, r4
   3bbce:	9307      	str	r3, [sp, #28]
   3bbd0:	f7ff ffc9 	bl	3bb66 <lfs_ctz_index.isra.0>
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   3bbd4:	a912      	add	r1, sp, #72	; 0x48
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   3bbd6:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   3bbd8:	4620      	mov	r0, r4
   3bbda:	f7ff ffc4 	bl	3bb66 <lfs_ctz_index.isra.0>
        int err = lfs_bd_read(lfs,
   3bbde:	f04f 0a04 	mov.w	sl, #4
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   3bbe2:	4681      	mov	r9, r0
        int err = lfs_bd_read(lfs,
   3bbe4:	f10d 0b14 	add.w	fp, sp, #20
    while (current > target) {
   3bbe8:	45a9      	cmp	r9, r5
        int err = lfs_bd_read(lfs,
   3bbea:	9a05      	ldr	r2, [sp, #20]
    while (current > target) {
   3bbec:	d303      	bcc.n	3bbf6 <lfs_ctz_find.constprop.0+0x56>
    *off = pos;
   3bbee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    *block = head;
   3bbf0:	f8c8 2000 	str.w	r2, [r8]
    return 0;
   3bbf4:	e7e1      	b.n	3bbba <lfs_ctz_find.constprop.0+0x1a>
    return __builtin_ctz(a);
   3bbf6:	fa95 f3a5 	rbit	r3, r5
                lfs_npw2(current-target+1) - 1,
   3bbfa:	eba5 0409 	sub.w	r4, r5, r9
    return 32 - __builtin_clz(a-1);
   3bbfe:	fab4 f484 	clz	r4, r4
    return __builtin_ctz(a);
   3bc02:	fab3 f383 	clz	r3, r3
        lfs_size_t skip = lfs_min(
   3bc06:	f1c4 041f 	rsb	r4, r4, #31
    return (a < b) ? a : b;
   3bc0a:	429c      	cmp	r4, r3
   3bc0c:	bf28      	it	cs
   3bc0e:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
   3bc10:	00a3      	lsls	r3, r4, #2
   3bc12:	e9cd 2300 	strd	r2, r3, [sp]
   3bc16:	2100      	movs	r1, #0
   3bc18:	2304      	movs	r3, #4
   3bc1a:	463a      	mov	r2, r7
   3bc1c:	4630      	mov	r0, r6
   3bc1e:	e9cd ba02 	strd	fp, sl, [sp, #8]
   3bc22:	f7f0 fe49 	bl	2c8b8 <lfs_bd_read>
        if (err) {
   3bc26:	2800      	cmp	r0, #0
   3bc28:	d1ca      	bne.n	3bbc0 <lfs_ctz_find.constprop.0+0x20>
        current -= 1 << skip;
   3bc2a:	2301      	movs	r3, #1
   3bc2c:	40a3      	lsls	r3, r4
   3bc2e:	1aed      	subs	r5, r5, r3
   3bc30:	e7da      	b.n	3bbe8 <lfs_ctz_find.constprop.0+0x48>

0003bc32 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
   3bc32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bc36:	b089      	sub	sp, #36	; 0x24
   3bc38:	4607      	mov	r7, r0
   3bc3a:	e9dd 0a12 	ldrd	r0, sl, [sp, #72]	; 0x48
   3bc3e:	4688      	mov	r8, r1
   3bc40:	4691      	mov	r9, r2
   3bc42:	461e      	mov	r6, r3
    if (size == 0) {
   3bc44:	b1e0      	cbz	r0, 3bc80 <lfs_ctz_traverse+0x4e>
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   3bc46:	3801      	subs	r0, #1
   3bc48:	9005      	str	r0, [sp, #20]
   3bc4a:	a905      	add	r1, sp, #20
   3bc4c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   3bc4e:	f7ff ff8a 	bl	3bb66 <lfs_ctz_index.isra.0>
   3bc52:	4604      	mov	r4, r0
        err = lfs_bd_read(lfs,
   3bc54:	f10d 0b18 	add.w	fp, sp, #24
        int err = cb(data, head);
   3bc58:	4631      	mov	r1, r6
   3bc5a:	9814      	ldr	r0, [sp, #80]	; 0x50
   3bc5c:	47d0      	blx	sl
        if (err) {
   3bc5e:	b978      	cbnz	r0, 3bc80 <lfs_ctz_traverse+0x4e>
        if (index == 0) {
   3bc60:	b174      	cbz	r4, 3bc80 <lfs_ctz_traverse+0x4e>
        int count = 2 - (index & 1);
   3bc62:	f004 0501 	and.w	r5, r4, #1
   3bc66:	f1c5 0302 	rsb	r3, r5, #2
        err = lfs_bd_read(lfs,
   3bc6a:	009b      	lsls	r3, r3, #2
   3bc6c:	e9cd 6000 	strd	r6, r0, [sp]
   3bc70:	464a      	mov	r2, r9
   3bc72:	4641      	mov	r1, r8
   3bc74:	4638      	mov	r0, r7
   3bc76:	e9cd b302 	strd	fp, r3, [sp, #8]
   3bc7a:	f7f0 fe1d 	bl	2c8b8 <lfs_bd_read>
        if (err) {
   3bc7e:	b110      	cbz	r0, 3bc86 <lfs_ctz_traverse+0x54>
}
   3bc80:	b009      	add	sp, #36	; 0x24
   3bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            err = cb(data, heads[i]);
   3bc86:	9906      	ldr	r1, [sp, #24]
        for (int i = 0; i < count-1; i++) {
   3bc88:	b925      	cbnz	r5, 3bc94 <lfs_ctz_traverse+0x62>
            err = cb(data, heads[i]);
   3bc8a:	9814      	ldr	r0, [sp, #80]	; 0x50
   3bc8c:	47d0      	blx	sl
            if (err) {
   3bc8e:	2800      	cmp	r0, #0
   3bc90:	d1f6      	bne.n	3bc80 <lfs_ctz_traverse+0x4e>
        for (int i = 0; i < count-1; i++) {
   3bc92:	2001      	movs	r0, #1
        head = heads[count-1];
   3bc94:	ab08      	add	r3, sp, #32
   3bc96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        index -= count;
   3bc9a:	3d02      	subs	r5, #2
        head = heads[count-1];
   3bc9c:	f850 6c08 	ldr.w	r6, [r0, #-8]
        index -= count;
   3bca0:	442c      	add	r4, r5
    while (true) {
   3bca2:	e7d9      	b.n	3bc58 <lfs_ctz_traverse+0x26>

0003bca4 <lfs_cache_zero.isra.0>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
   3bca4:	b510      	push	{r4, lr}
   3bca6:	460c      	mov	r4, r1
__ssp_bos_icheck3(memset, void *, int)
   3bca8:	6a82      	ldr	r2, [r0, #40]	; 0x28
   3bcaa:	21ff      	movs	r1, #255	; 0xff
   3bcac:	68e0      	ldr	r0, [r4, #12]
   3bcae:	f001 fcea 	bl	3d686 <memset>
    pcache->block = LFS_BLOCK_NULL;
   3bcb2:	f04f 33ff 	mov.w	r3, #4294967295
   3bcb6:	6023      	str	r3, [r4, #0]
}
   3bcb8:	bd10      	pop	{r4, pc}

0003bcba <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
   3bcba:	b5f0      	push	{r4, r5, r6, r7, lr}
   3bcbc:	b085      	sub	sp, #20
    int err = lfs_bd_prog(lfs,
   3bcbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
        const void *buffer, lfs_size_t size) {
   3bcc2:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
   3bcc4:	684b      	ldr	r3, [r1, #4]
        const void *buffer, lfs_size_t size) {
   3bcc6:	460c      	mov	r4, r1
    int err = lfs_bd_prog(lfs,
   3bcc8:	9301      	str	r3, [sp, #4]
   3bcca:	680b      	ldr	r3, [r1, #0]
        const void *buffer, lfs_size_t size) {
   3bccc:	4617      	mov	r7, r2
    int err = lfs_bd_prog(lfs,
   3bcce:	9300      	str	r3, [sp, #0]
   3bcd0:	4602      	mov	r2, r0
   3bcd2:	2300      	movs	r3, #0
   3bcd4:	f100 0110 	add.w	r1, r0, #16
   3bcd8:	f7f1 fda6 	bl	2d828 <lfs_bd_prog>
    if (err) {
   3bcdc:	4606      	mov	r6, r0
   3bcde:	b940      	cbnz	r0, 3bcf2 <lfs_dir_commitprog+0x38>
    commit->crc = lfs_crc(commit->crc, buffer, size);
   3bce0:	462a      	mov	r2, r5
   3bce2:	4639      	mov	r1, r7
   3bce4:	68e0      	ldr	r0, [r4, #12]
   3bce6:	f7f3 ff01 	bl	2faec <lfs_crc>
    commit->off += size;
   3bcea:	6863      	ldr	r3, [r4, #4]
    commit->crc = lfs_crc(commit->crc, buffer, size);
   3bcec:	60e0      	str	r0, [r4, #12]
    commit->off += size;
   3bcee:	442b      	add	r3, r5
   3bcf0:	6063      	str	r3, [r4, #4]
}
   3bcf2:	4630      	mov	r0, r6
   3bcf4:	b005      	add	sp, #20
   3bcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003bcf8 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
   3bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bcfc:	4606      	mov	r6, r0
   3bcfe:	b087      	sub	sp, #28
    lfs_size_t dsize = lfs_tag_dsize(tag);
   3bd00:	4610      	mov	r0, r2
        lfs_tag_t tag, const void *buffer) {
   3bd02:	4699      	mov	r9, r3
    lfs_size_t dsize = lfs_tag_dsize(tag);
   3bd04:	f7ff fe1e 	bl	3b944 <lfs_tag_dsize>
    if (commit->off + dsize > commit->end) {
   3bd08:	684b      	ldr	r3, [r1, #4]
        lfs_tag_t tag, const void *buffer) {
   3bd0a:	4693      	mov	fp, r2
    if (commit->off + dsize > commit->end) {
   3bd0c:	694a      	ldr	r2, [r1, #20]
   3bd0e:	4403      	add	r3, r0
   3bd10:	4293      	cmp	r3, r2
        lfs_tag_t tag, const void *buffer) {
   3bd12:	460c      	mov	r4, r1
    lfs_size_t dsize = lfs_tag_dsize(tag);
   3bd14:	4680      	mov	r8, r0
    if (commit->off + dsize > commit->end) {
   3bd16:	d841      	bhi.n	3bd9c <lfs_dir_commitattr+0xa4>
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
   3bd18:	688b      	ldr	r3, [r1, #8]
   3bd1a:	f02b 4a00 	bic.w	sl, fp, #2147483648	; 0x80000000
   3bd1e:	ea8a 0303 	eor.w	r3, sl, r3
    return __builtin_bswap32(a);
   3bd22:	ba1b      	rev	r3, r3
   3bd24:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
   3bd26:	4630      	mov	r0, r6
   3bd28:	2304      	movs	r3, #4
   3bd2a:	aa05      	add	r2, sp, #20
   3bd2c:	f7ff ffc5 	bl	3bcba <lfs_dir_commitprog>
    if (err) {
   3bd30:	4605      	mov	r5, r0
   3bd32:	bb78      	cbnz	r0, 3bd94 <lfs_dir_commitattr+0x9c>
    if (!(tag & 0x80000000)) {
   3bd34:	f1bb 0f00 	cmp.w	fp, #0
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   3bd38:	f1a8 0704 	sub.w	r7, r8, #4
    if (!(tag & 0x80000000)) {
   3bd3c:	da20      	bge.n	3bd80 <lfs_dir_commitattr+0x88>
            err = lfs_bd_read(lfs,
   3bd3e:	f10d 0b13 	add.w	fp, sp, #19
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   3bd42:	b32f      	cbz	r7, 3bd90 <lfs_dir_commitattr+0x98>
            err = lfs_bd_read(lfs,
   3bd44:	2301      	movs	r3, #1
   3bd46:	e9cd b302 	strd	fp, r3, [sp, #8]
   3bd4a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3bd4e:	4632      	mov	r2, r6
   3bd50:	3b04      	subs	r3, #4
   3bd52:	4443      	add	r3, r8
   3bd54:	1bdb      	subs	r3, r3, r7
   3bd56:	9301      	str	r3, [sp, #4]
   3bd58:	f8d9 3000 	ldr.w	r3, [r9]
   3bd5c:	2100      	movs	r1, #0
   3bd5e:	9300      	str	r3, [sp, #0]
   3bd60:	4630      	mov	r0, r6
   3bd62:	463b      	mov	r3, r7
   3bd64:	f7f0 fda8 	bl	2c8b8 <lfs_bd_read>
            if (err) {
   3bd68:	b940      	cbnz	r0, 3bd7c <lfs_dir_commitattr+0x84>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
   3bd6a:	2301      	movs	r3, #1
   3bd6c:	465a      	mov	r2, fp
   3bd6e:	4621      	mov	r1, r4
   3bd70:	4630      	mov	r0, r6
   3bd72:	f7ff ffa2 	bl	3bcba <lfs_dir_commitprog>
            if (err) {
   3bd76:	3f01      	subs	r7, #1
   3bd78:	2800      	cmp	r0, #0
   3bd7a:	d0e2      	beq.n	3bd42 <lfs_dir_commitattr+0x4a>
   3bd7c:	4605      	mov	r5, r0
   3bd7e:	e009      	b.n	3bd94 <lfs_dir_commitattr+0x9c>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   3bd80:	463b      	mov	r3, r7
   3bd82:	464a      	mov	r2, r9
   3bd84:	4621      	mov	r1, r4
   3bd86:	4630      	mov	r0, r6
   3bd88:	f7ff ff97 	bl	3bcba <lfs_dir_commitprog>
        if (err) {
   3bd8c:	2800      	cmp	r0, #0
   3bd8e:	d1f5      	bne.n	3bd7c <lfs_dir_commitattr+0x84>
    commit->ptag = tag & 0x7fffffff;
   3bd90:	f8c4 a008 	str.w	sl, [r4, #8]
}
   3bd94:	4628      	mov	r0, r5
   3bd96:	b007      	add	sp, #28
   3bd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_NOSPC;
   3bd9c:	f06f 051b 	mvn.w	r5, #27
   3bda0:	e7f8      	b.n	3bd94 <lfs_dir_commitattr+0x9c>

0003bda2 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
   3bda2:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
   3bda4:	460a      	mov	r2, r1
   3bda6:	e9d0 0100 	ldrd	r0, r1, [r0]
   3bdaa:	f7ff bfa5 	b.w	3bcf8 <lfs_dir_commitattr>

0003bdae <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   3bdae:	6a83      	ldr	r3, [r0, #40]	; 0x28
   3bdb0:	f100 0228 	add.w	r2, r0, #40	; 0x28
   3bdb4:	b11b      	cbz	r3, 3bdbe <lfs_dir_close+0x10>
        if (*p == (struct lfs_mlist*)dir) {
   3bdb6:	428b      	cmp	r3, r1
            *p = (*p)->next;
   3bdb8:	6818      	ldr	r0, [r3, #0]
        if (*p == (struct lfs_mlist*)dir) {
   3bdba:	d102      	bne.n	3bdc2 <lfs_dir_close+0x14>
            *p = (*p)->next;
   3bdbc:	6010      	str	r0, [r2, #0]
}
   3bdbe:	2000      	movs	r0, #0
   3bdc0:	4770      	bx	lr
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   3bdc2:	461a      	mov	r2, r3
            *p = (*p)->next;
   3bdc4:	4603      	mov	r3, r0
   3bdc6:	e7f5      	b.n	3bdb4 <lfs_dir_close+0x6>

0003bdc8 <lfs_stat>:
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   3bdc8:	b530      	push	{r4, r5, lr}
   3bdca:	b08b      	sub	sp, #44	; 0x2c
   3bdcc:	9101      	str	r1, [sp, #4]
   3bdce:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   3bdd0:	2300      	movs	r3, #0
   3bdd2:	aa01      	add	r2, sp, #4
   3bdd4:	a902      	add	r1, sp, #8
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   3bdd6:	4604      	mov	r4, r0
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   3bdd8:	f7f1 fa5e 	bl	2d298 <lfs_dir_find>
    if (tag < 0) {
   3bddc:	2800      	cmp	r0, #0
   3bdde:	db06      	blt.n	3bdee <lfs_stat+0x26>
    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
   3bde0:	f3c0 2289 	ubfx	r2, r0, #10, #10
   3bde4:	462b      	mov	r3, r5
   3bde6:	4620      	mov	r0, r4
   3bde8:	a902      	add	r1, sp, #8
   3bdea:	f7f1 fa0f 	bl	2d20c <lfs_dir_getinfo>
}
   3bdee:	b00b      	add	sp, #44	; 0x2c
   3bdf0:	bd30      	pop	{r4, r5, pc}

0003bdf2 <lfs_unmount>:
    int err = lfs_deinit(lfs);
   3bdf2:	f7ff bdf6 	b.w	3b9e2 <lfs_deinit>

0003bdf6 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   3bdf6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3bdf8:	460c      	mov	r4, r1
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   3bdfa:	3104      	adds	r1, #4
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   3bdfc:	4606      	mov	r6, r0
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   3bdfe:	f7f2 f8ed 	bl	2dfdc <lfs_alloc>
        if (err) {
   3be02:	4605      	mov	r5, r0
   3be04:	bb28      	cbnz	r0, 3be52 <lfs_dir_alloc+0x5c>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   3be06:	4621      	mov	r1, r4
   3be08:	4630      	mov	r0, r6
   3be0a:	f7f2 f8e7 	bl	2dfdc <lfs_alloc>
        if (err) {
   3be0e:	4605      	mov	r5, r0
   3be10:	b9f8      	cbnz	r0, 3be52 <lfs_dir_alloc+0x5c>
    dir->rev = 0;
   3be12:	4622      	mov	r2, r4
    int err = lfs_bd_read(lfs,
   3be14:	2304      	movs	r3, #4
    dir->rev = 0;
   3be16:	f842 0f08 	str.w	r0, [r2, #8]!
    int err = lfs_bd_read(lfs,
   3be1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3be1e:	9001      	str	r0, [sp, #4]
   3be20:	6822      	ldr	r2, [r4, #0]
   3be22:	4601      	mov	r1, r0
   3be24:	9200      	str	r2, [sp, #0]
   3be26:	4630      	mov	r0, r6
   3be28:	4632      	mov	r2, r6
   3be2a:	f7f0 fd45 	bl	2c8b8 <lfs_bd_read>
    if (err && err != LFS_ERR_CORRUPT) {
   3be2e:	b110      	cbz	r0, 3be36 <lfs_dir_alloc+0x40>
   3be30:	f110 0f54 	cmn.w	r0, #84	; 0x54
   3be34:	d110      	bne.n	3be58 <lfs_dir_alloc+0x62>
    dir->rev += dir->rev & 1;
   3be36:	68a3      	ldr	r3, [r4, #8]
    dir->etag = 0xffffffff;
   3be38:	2204      	movs	r2, #4
    dir->rev += dir->rev & 1;
   3be3a:	3301      	adds	r3, #1
   3be3c:	f023 0301 	bic.w	r3, r3, #1
   3be40:	60a3      	str	r3, [r4, #8]
    dir->etag = 0xffffffff;
   3be42:	f04f 33ff 	mov.w	r3, #4294967295
   3be46:	e9c4 2303 	strd	r2, r3, [r4, #12]
    dir->count = 0;
   3be4a:	2200      	movs	r2, #0
    dir->tail[0] = LFS_BLOCK_NULL;
   3be4c:	e9c4 2305 	strd	r2, r3, [r4, #20]
    dir->tail[1] = LFS_BLOCK_NULL;
   3be50:	61e3      	str	r3, [r4, #28]
}
   3be52:	4628      	mov	r0, r5
   3be54:	b004      	add	sp, #16
   3be56:	bd70      	pop	{r4, r5, r6, pc}
   3be58:	4605      	mov	r5, r0
   3be5a:	e7fa      	b.n	3be52 <lfs_dir_alloc+0x5c>

0003be5c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   3be5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3be60:	4698      	mov	r8, r3
    lfs->free.ack = lfs->cfg->block_count;
   3be62:	6e83      	ldr	r3, [r0, #104]	; 0x68
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   3be64:	b08d      	sub	sp, #52	; 0x34
    lfs->free.ack = lfs->cfg->block_count;
   3be66:	6a1b      	ldr	r3, [r3, #32]
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   3be68:	460c      	mov	r4, r1
    lfs->free.ack = lfs->cfg->block_count;
   3be6a:	6603      	str	r3, [r0, #96]	; 0x60
    int err = lfs_dir_alloc(lfs, &tail);
   3be6c:	a904      	add	r1, sp, #16
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   3be6e:	4606      	mov	r6, r0
   3be70:	4617      	mov	r7, r2
   3be72:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
    int err = lfs_dir_alloc(lfs, &tail);
   3be76:	f7ff ffbe 	bl	3bdf6 <lfs_dir_alloc>
    if (err) {
   3be7a:	4605      	mov	r5, r0
   3be7c:	bb28      	cbnz	r0, 3beca <lfs_dir_split+0x6e>
    tail.split = dir->split;
   3be7e:	7de3      	ldrb	r3, [r4, #23]
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   3be80:	463a      	mov	r2, r7
    tail.split = dir->split;
   3be82:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
   3be86:	69a3      	ldr	r3, [r4, #24]
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   3be88:	4630      	mov	r0, r6
    tail.tail[0] = dir->tail[0];
   3be8a:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
   3be8c:	69e3      	ldr	r3, [r4, #28]
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   3be8e:	a904      	add	r1, sp, #16
    tail.tail[1] = dir->tail[1];
   3be90:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   3be92:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   3be96:	e9cd 9301 	strd	r9, r3, [sp, #4]
   3be9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3be9c:	9300      	str	r3, [sp, #0]
   3be9e:	4643      	mov	r3, r8
   3bea0:	f7f2 fd1e 	bl	2e8e0 <lfs_dir_compact>
    if (err) {
   3bea4:	4605      	mov	r5, r0
   3bea6:	b980      	cbnz	r0, 3beca <lfs_dir_split+0x6e>
    dir->split = true;
   3bea8:	2301      	movs	r3, #1
    dir->tail[0] = tail.pair[0];
   3beaa:	9f04      	ldr	r7, [sp, #16]
    dir->tail[1] = tail.pair[1];
   3beac:	9a05      	ldr	r2, [sp, #20]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   3beae:	4620      	mov	r0, r4
    dir->tail[0] = tail.pair[0];
   3beb0:	61a7      	str	r7, [r4, #24]
    dir->tail[1] = tail.pair[1];
   3beb2:	61e2      	str	r2, [r4, #28]
    dir->split = true;
   3beb4:	75e3      	strb	r3, [r4, #23]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   3beb6:	f106 0120 	add.w	r1, r6, #32
   3beba:	f7ff fd32 	bl	3b922 <lfs_pair_cmp>
   3bebe:	b920      	cbnz	r0, 3beca <lfs_dir_split+0x6e>
   3bec0:	f1b9 0f00 	cmp.w	r9, #0
   3bec4:	d101      	bne.n	3beca <lfs_dir_split+0x6e>
        lfs->root[1] = tail.pair[1];
   3bec6:	e9c6 7208 	strd	r7, r2, [r6, #32]
}
   3beca:	4628      	mov	r0, r5
   3becc:	b00d      	add	sp, #52	; 0x34
   3bece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0003bed2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   3bed2:	f7f3 be27 	b.w	2fb24 <_DoInit>

0003bed6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   3bed6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   3bed8:	f7ff fffb 	bl	3bed2 <SEGGER_RTT_Init>

	return 0;
}
   3bedc:	2000      	movs	r0, #0
   3bede:	bd08      	pop	{r3, pc}

0003bee0 <rpc_handle_ctrl_message>:
   3bee0:	2902      	cmp	r1, #2
   3bee2:	b510      	push	{r4, lr}
   3bee4:	4604      	mov	r4, r0
   3bee6:	d005      	beq.n	3bef4 <rpc_handle_ctrl_message+0x14>
   3bee8:	2904      	cmp	r1, #4
   3beea:	d001      	beq.n	3bef0 <rpc_handle_ctrl_message+0x10>
   3beec:	2901      	cmp	r1, #1
   3beee:	d107      	bne.n	3bf00 <rpc_handle_ctrl_message+0x20>
   3bef0:	2000      	movs	r0, #0
   3bef2:	bd10      	pop	{r4, pc}
   3bef4:	6880      	ldr	r0, [r0, #8]
   3bef6:	2800      	cmp	r0, #0
   3bef8:	d0fa      	beq.n	3bef0 <rpc_handle_ctrl_message+0x10>
   3befa:	f000 f83b 	bl	3bf74 <rpc_transport_local_data_free>
   3befe:	e7f7      	b.n	3bef0 <rpc_handle_ctrl_message+0x10>
   3bf00:	6880      	ldr	r0, [r0, #8]
   3bf02:	b108      	cbz	r0, 3bf08 <rpc_handle_ctrl_message+0x28>
   3bf04:	f000 f836 	bl	3bf74 <rpc_transport_local_data_free>
   3bf08:	4620      	mov	r0, r4
   3bf0a:	f000 f82f 	bl	3bf6c <rpc_transport_msg_free>
   3bf0e:	e7ef      	b.n	3bef0 <rpc_handle_ctrl_message+0x10>

0003bf10 <rpc_message_send>:
   3bf10:	684b      	ldr	r3, [r1, #4]
   3bf12:	8008      	strh	r0, [r1, #0]
   3bf14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3bf18:	f043 0302 	orr.w	r3, r3, #2
   3bf1c:	4608      	mov	r0, r1
   3bf1e:	604b      	str	r3, [r1, #4]
   3bf20:	f000 b82c 	b.w	3bf7c <rpc_transport_data_msg_send>

0003bf24 <rpc_message_alloc>:
   3bf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3bf26:	2300      	movs	r3, #0
   3bf28:	4607      	mov	r7, r0
   3bf2a:	4616      	mov	r6, r2
   3bf2c:	460d      	mov	r5, r1
   3bf2e:	6013      	str	r3, [r2, #0]
   3bf30:	b131      	cbz	r1, 3bf40 <rpc_message_alloc+0x1c>
   3bf32:	4608      	mov	r0, r1
   3bf34:	f000 f81c 	bl	3bf70 <rpc_transport_data_alloc>
   3bf38:	4604      	mov	r4, r0
   3bf3a:	b910      	cbnz	r0, 3bf42 <rpc_message_alloc+0x1e>
   3bf3c:	200c      	movs	r0, #12
   3bf3e:	e008      	b.n	3bf52 <rpc_message_alloc+0x2e>
   3bf40:	460c      	mov	r4, r1
   3bf42:	f000 f811 	bl	3bf68 <rpc_transport_data_msg_alloc>
   3bf46:	b128      	cbz	r0, 3bf54 <rpc_message_alloc+0x30>
   3bf48:	60c5      	str	r5, [r0, #12]
   3bf4a:	6084      	str	r4, [r0, #8]
   3bf4c:	8007      	strh	r7, [r0, #0]
   3bf4e:	6030      	str	r0, [r6, #0]
   3bf50:	2000      	movs	r0, #0
   3bf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3bf54:	2c00      	cmp	r4, #0
   3bf56:	d0f1      	beq.n	3bf3c <rpc_message_alloc+0x18>
   3bf58:	4620      	mov	r0, r4
   3bf5a:	f000 f80b 	bl	3bf74 <rpc_transport_local_data_free>
   3bf5e:	e7ed      	b.n	3bf3c <rpc_message_alloc+0x18>

0003bf60 <rpc_message_free>:
   3bf60:	f000 b804 	b.w	3bf6c <rpc_transport_msg_free>

0003bf64 <rpc_message_data_free>:
   3bf64:	f000 b808 	b.w	3bf78 <rpc_transport_peer_data_free>

0003bf68 <rpc_transport_data_msg_alloc>:
   3bf68:	f7f3 bfee 	b.w	2ff48 <rpc_transport_ipc_data_msg_alloc>

0003bf6c <rpc_transport_msg_free>:
   3bf6c:	f7f4 b838 	b.w	2ffe0 <rpc_transport_ipc_msg_free>

0003bf70 <rpc_transport_data_alloc>:
   3bf70:	f7f4 b81c 	b.w	2ffac <rpc_transport_ipc_data_alloc>

0003bf74 <rpc_transport_local_data_free>:
   3bf74:	f000 b846 	b.w	3c004 <rpc_transport_ipc_local_data_free>

0003bf78 <rpc_transport_peer_data_free>:
   3bf78:	f7f4 b858 	b.w	3002c <rpc_transport_ipc_peer_data_free>

0003bf7c <rpc_transport_data_msg_send>:
   3bf7c:	f7f3 bfa8 	b.w	2fed0 <rpc_transport_ipc_data_msg_send>

0003bf80 <trace_write>:
   3bf80:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   3bf84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3bf86:	f8ad 3000 	strh.w	r3, [sp]
   3bf8a:	7803      	ldrb	r3, [r0, #0]
   3bf8c:	4604      	mov	r4, r0
   3bf8e:	f88d 3004 	strb.w	r3, [sp, #4]
   3bf92:	6843      	ldr	r3, [r0, #4]
   3bf94:	6882      	ldr	r2, [r0, #8]
   3bf96:	2105      	movs	r1, #5
   3bf98:	4293      	cmp	r3, r2
   3bf9a:	bf96      	itet	ls
   3bf9c:	6906      	ldrls	r6, [r0, #16]
   3bf9e:	1a9e      	subhi	r6, r3, r2
   3bfa0:	1ab6      	subls	r6, r6, r2
   3bfa2:	4293      	cmp	r3, r2
   3bfa4:	bf2c      	ite	cs
   3bfa6:	2500      	movcs	r5, #0
   3bfa8:	68c5      	ldrcc	r5, [r0, #12]
   3bfaa:	b2b6      	uxth	r6, r6
   3bfac:	bf38      	it	cc
   3bfae:	1b5b      	subcc	r3, r3, r5
   3bfb0:	4668      	mov	r0, sp
   3bfb2:	bf38      	it	cc
   3bfb4:	b29d      	uxthcc	r5, r3
   3bfb6:	f8ad 6002 	strh.w	r6, [sp, #2]
   3bfba:	f7ff f8b8 	bl	3b12e <nrf_modem_os_trace_put>
   3bfbe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3bfc2:	68a0      	ldr	r0, [r4, #8]
   3bfc4:	b289      	uxth	r1, r1
   3bfc6:	f7ff f8b2 	bl	3b12e <nrf_modem_os_trace_put>
   3bfca:	68a3      	ldr	r3, [r4, #8]
   3bfcc:	441e      	add	r6, r3
   3bfce:	6923      	ldr	r3, [r4, #16]
   3bfd0:	60a6      	str	r6, [r4, #8]
   3bfd2:	429e      	cmp	r6, r3
   3bfd4:	bf04      	itt	eq
   3bfd6:	68e3      	ldreq	r3, [r4, #12]
   3bfd8:	60a3      	streq	r3, [r4, #8]
   3bfda:	b18d      	cbz	r5, 3c000 <trace_write+0x80>
   3bfdc:	2105      	movs	r1, #5
   3bfde:	4668      	mov	r0, sp
   3bfe0:	f8ad 5002 	strh.w	r5, [sp, #2]
   3bfe4:	f7ff f8a3 	bl	3b12e <nrf_modem_os_trace_put>
   3bfe8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3bfec:	68e0      	ldr	r0, [r4, #12]
   3bfee:	b289      	uxth	r1, r1
   3bff0:	f7ff f89d 	bl	3b12e <nrf_modem_os_trace_put>
   3bff4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   3bff8:	68e2      	ldr	r2, [r4, #12]
   3bffa:	fa12 f383 	uxtah	r3, r2, r3
   3bffe:	60a3      	str	r3, [r4, #8]
   3c000:	b002      	add	sp, #8
   3c002:	bd70      	pop	{r4, r5, r6, pc}

0003c004 <rpc_transport_ipc_local_data_free>:
   3c004:	b508      	push	{r3, lr}
   3c006:	f7ed fb25 	bl	29654 <nrf_modem_os_shm_tx_free>
   3c00a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3c00e:	f7ed baeb 	b.w	295e8 <nrf_modem_os_application_irq_set>

0003c012 <at_client_evt_handler>:
   3c012:	460a      	mov	r2, r1
   3c014:	b118      	cbz	r0, 3c01e <at_client_evt_handler+0xc>
   3c016:	f850 1b08 	ldr.w	r1, [r0], #8
   3c01a:	0c09      	lsrs	r1, r1, #16
   3c01c:	4710      	bx	r2
   3c01e:	4770      	bx	lr

0003c020 <rpc_at_client_request_alloc>:
   3c020:	2300      	movs	r3, #0
   3c022:	b513      	push	{r0, r1, r4, lr}
   3c024:	4604      	mov	r4, r0
   3c026:	aa01      	add	r2, sp, #4
   3c028:	2003      	movs	r0, #3
   3c02a:	9301      	str	r3, [sp, #4]
   3c02c:	f7ff ff7a 	bl	3bf24 <rpc_message_alloc>
   3c030:	b918      	cbnz	r0, 3c03a <rpc_at_client_request_alloc+0x1a>
   3c032:	9b01      	ldr	r3, [sp, #4]
   3c034:	b10b      	cbz	r3, 3c03a <rpc_at_client_request_alloc+0x1a>
   3c036:	3308      	adds	r3, #8
   3c038:	6023      	str	r3, [r4, #0]
   3c03a:	b002      	add	sp, #8
   3c03c:	bd10      	pop	{r4, pc}

0003c03e <rpc_at_client_request_send>:
   3c03e:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   3c042:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3c046:	4601      	mov	r1, r0
   3c048:	2003      	movs	r0, #3
   3c04a:	f841 3d08 	str.w	r3, [r1, #-8]!
   3c04e:	f7ff bf5f 	b.w	3bf10 <rpc_message_send>

0003c052 <rpc_at_client_data_free>:
   3c052:	f7ff bf87 	b.w	3bf64 <rpc_message_data_free>

0003c056 <ip_client_event_handler>:
   3c056:	f850 1b08 	ldr.w	r1, [r0], #8
   3c05a:	0c09      	lsrs	r1, r1, #16
   3c05c:	f7f5 b876 	b.w	3114c <rpc_ip_event_handler>

0003c060 <rpc_ip_client_request_alloc>:
   3c060:	2300      	movs	r3, #0
   3c062:	b513      	push	{r0, r1, r4, lr}
   3c064:	4604      	mov	r4, r0
   3c066:	aa01      	add	r2, sp, #4
   3c068:	2004      	movs	r0, #4
   3c06a:	9301      	str	r3, [sp, #4]
   3c06c:	f7ff ff5a 	bl	3bf24 <rpc_message_alloc>
   3c070:	b918      	cbnz	r0, 3c07a <rpc_ip_client_request_alloc+0x1a>
   3c072:	9b01      	ldr	r3, [sp, #4]
   3c074:	b10b      	cbz	r3, 3c07a <rpc_ip_client_request_alloc+0x1a>
   3c076:	3308      	adds	r3, #8
   3c078:	6023      	str	r3, [r4, #0]
   3c07a:	b002      	add	sp, #8
   3c07c:	bd10      	pop	{r4, pc}

0003c07e <rpc_ip_client_request_send>:
   3c07e:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   3c082:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3c086:	4601      	mov	r1, r0
   3c088:	2004      	movs	r0, #4
   3c08a:	f841 3d08 	str.w	r3, [r1, #-8]!
   3c08e:	f7ff bf3f 	b.w	3bf10 <rpc_message_send>

0003c092 <rpc_ip_client_message_free>:
   3c092:	3808      	subs	r0, #8
   3c094:	f7ff bf64 	b.w	3bf60 <rpc_message_free>

0003c098 <rpc_ip_client_data_free>:
   3c098:	f7ff bf64 	b.w	3bf64 <rpc_message_data_free>

0003c09c <dfu_client_event_handler>:
   3c09c:	460b      	mov	r3, r1
   3c09e:	f850 1b08 	ldr.w	r1, [r0], #8
   3c0a2:	0c09      	lsrs	r1, r1, #16
   3c0a4:	4718      	bx	r3

0003c0a6 <rpc_dfu_client_request_alloc>:
   3c0a6:	2300      	movs	r3, #0
   3c0a8:	b513      	push	{r0, r1, r4, lr}
   3c0aa:	4604      	mov	r4, r0
   3c0ac:	aa01      	add	r2, sp, #4
   3c0ae:	2006      	movs	r0, #6
   3c0b0:	9301      	str	r3, [sp, #4]
   3c0b2:	f7ff ff37 	bl	3bf24 <rpc_message_alloc>
   3c0b6:	b918      	cbnz	r0, 3c0c0 <rpc_dfu_client_request_alloc+0x1a>
   3c0b8:	9b01      	ldr	r3, [sp, #4]
   3c0ba:	b10b      	cbz	r3, 3c0c0 <rpc_dfu_client_request_alloc+0x1a>
   3c0bc:	3308      	adds	r3, #8
   3c0be:	6023      	str	r3, [r4, #0]
   3c0c0:	b002      	add	sp, #8
   3c0c2:	bd10      	pop	{r4, pc}

0003c0c4 <rpc_dfu_client_request_send>:
   3c0c4:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   3c0c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3c0cc:	4601      	mov	r1, r0
   3c0ce:	2006      	movs	r0, #6
   3c0d0:	f841 3d08 	str.w	r3, [r1, #-8]!
   3c0d4:	f7ff bf1c 	b.w	3bf10 <rpc_message_send>

0003c0d8 <rpc_dfu_client_message_free>:
   3c0d8:	3808      	subs	r0, #8
   3c0da:	f7ff bf41 	b.w	3bf60 <rpc_message_free>

0003c0de <rpc_dfu_client_data_free>:
   3c0de:	f7ff bf41 	b.w	3bf64 <rpc_message_data_free>

0003c0e2 <rpc_gnss_client_request_alloc>:
   3c0e2:	2300      	movs	r3, #0
   3c0e4:	b513      	push	{r0, r1, r4, lr}
   3c0e6:	4604      	mov	r4, r0
   3c0e8:	aa01      	add	r2, sp, #4
   3c0ea:	2007      	movs	r0, #7
   3c0ec:	9301      	str	r3, [sp, #4]
   3c0ee:	f7ff ff19 	bl	3bf24 <rpc_message_alloc>
   3c0f2:	b918      	cbnz	r0, 3c0fc <rpc_gnss_client_request_alloc+0x1a>
   3c0f4:	9b01      	ldr	r3, [sp, #4]
   3c0f6:	b10b      	cbz	r3, 3c0fc <rpc_gnss_client_request_alloc+0x1a>
   3c0f8:	3308      	adds	r3, #8
   3c0fa:	6023      	str	r3, [r4, #0]
   3c0fc:	b002      	add	sp, #8
   3c0fe:	bd10      	pop	{r4, pc}

0003c100 <rpc_gnss_client_request_send>:
   3c100:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   3c104:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3c108:	4601      	mov	r1, r0
   3c10a:	2007      	movs	r0, #7
   3c10c:	f841 3d08 	str.w	r3, [r1, #-8]!
   3c110:	f7ff befe 	b.w	3bf10 <rpc_message_send>

0003c114 <rpc_gnss_client_message_free>:
   3c114:	3808      	subs	r0, #8
   3c116:	f7ff bf23 	b.w	3bf60 <rpc_message_free>

0003c11a <rpc_gnss_client_data_free>:
   3c11a:	f7ff bf23 	b.w	3bf64 <rpc_message_data_free>

0003c11e <rpc_gnss_serialize_utc>:
   3c11e:	b1c0      	cbz	r0, 3c152 <rpc_gnss_serialize_utc+0x34>
   3c120:	b1b9      	cbz	r1, 3c152 <rpc_gnss_serialize_utc+0x34>
   3c122:	2301      	movs	r3, #1
   3c124:	700b      	strb	r3, [r1, #0]
   3c126:	2300      	movs	r3, #0
   3c128:	704b      	strb	r3, [r1, #1]
   3c12a:	6843      	ldr	r3, [r0, #4]
   3c12c:	f8c1 3006 	str.w	r3, [r1, #6]
   3c130:	6803      	ldr	r3, [r0, #0]
   3c132:	f8c1 3002 	str.w	r3, [r1, #2]
   3c136:	7a83      	ldrb	r3, [r0, #10]
   3c138:	730b      	strb	r3, [r1, #12]
   3c13a:	7b43      	ldrb	r3, [r0, #13]
   3c13c:	73cb      	strb	r3, [r1, #15]
   3c13e:	7b03      	ldrb	r3, [r0, #12]
   3c140:	738b      	strb	r3, [r1, #14]
   3c142:	7a03      	ldrb	r3, [r0, #8]
   3c144:	728b      	strb	r3, [r1, #10]
   3c146:	7ac3      	ldrb	r3, [r0, #11]
   3c148:	734b      	strb	r3, [r1, #13]
   3c14a:	7a43      	ldrb	r3, [r0, #9]
   3c14c:	2010      	movs	r0, #16
   3c14e:	72cb      	strb	r3, [r1, #11]
   3c150:	4770      	bx	lr
   3c152:	f04f 30ff 	mov.w	r0, #4294967295
   3c156:	4770      	bx	lr

0003c158 <rpc_gnss_serialize_ephe>:
   3c158:	2800      	cmp	r0, #0
   3c15a:	d044      	beq.n	3c1e6 <rpc_gnss_serialize_ephe+0x8e>
   3c15c:	2900      	cmp	r1, #0
   3c15e:	d042      	beq.n	3c1e6 <rpc_gnss_serialize_ephe+0x8e>
   3c160:	2302      	movs	r3, #2
   3c162:	700b      	strb	r3, [r1, #0]
   3c164:	2300      	movs	r3, #0
   3c166:	704b      	strb	r3, [r1, #1]
   3c168:	68c3      	ldr	r3, [r0, #12]
   3c16a:	f8c1 300b 	str.w	r3, [r1, #11]
   3c16e:	8903      	ldrh	r3, [r0, #8]
   3c170:	f8a1 3009 	strh.w	r3, [r1, #9]
   3c174:	7983      	ldrb	r3, [r0, #6]
   3c176:	720b      	strb	r3, [r1, #8]
   3c178:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   3c17c:	878b      	strh	r3, [r1, #60]	; 0x3c
   3c17e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   3c180:	86cb      	strh	r3, [r1, #54]	; 0x36
   3c182:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   3c186:	874b      	strh	r3, [r1, #58]	; 0x3a
   3c188:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   3c18a:	868b      	strh	r3, [r1, #52]	; 0x34
   3c18c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   3c190:	87cb      	strh	r3, [r1, #62]	; 0x3e
   3c192:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   3c196:	870b      	strh	r3, [r1, #56]	; 0x38
   3c198:	8b83      	ldrh	r3, [r0, #28]
   3c19a:	830b      	strh	r3, [r1, #24]
   3c19c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   3c19e:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   3c1a2:	7c83      	ldrb	r3, [r0, #18]
   3c1a4:	744b      	strb	r3, [r1, #17]
   3c1a6:	7843      	ldrb	r3, [r0, #1]
   3c1a8:	70cb      	strb	r3, [r1, #3]
   3c1aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   3c1ac:	62cb      	str	r3, [r1, #44]	; 0x2c
   3c1ae:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   3c1b0:	84cb      	strh	r3, [r1, #38]	; 0x26
   3c1b2:	8843      	ldrh	r3, [r0, #2]
   3c1b4:	808b      	strh	r3, [r1, #4]
   3c1b6:	6a03      	ldr	r3, [r0, #32]
   3c1b8:	f8c1 301a 	str.w	r3, [r1, #26]
   3c1bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   3c1be:	630b      	str	r3, [r1, #48]	; 0x30
   3c1c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   3c1c2:	f8c1 301e 	str.w	r3, [r1, #30]
   3c1c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   3c1c8:	628b      	str	r3, [r1, #40]	; 0x28
   3c1ca:	7803      	ldrb	r3, [r0, #0]
   3c1cc:	708b      	strb	r3, [r1, #2]
   3c1ce:	7c03      	ldrb	r3, [r0, #16]
   3c1d0:	73cb      	strb	r3, [r1, #15]
   3c1d2:	8883      	ldrh	r3, [r0, #4]
   3c1d4:	80cb      	strh	r3, [r1, #6]
   3c1d6:	8a83      	ldrh	r3, [r0, #20]
   3c1d8:	824b      	strh	r3, [r1, #18]
   3c1da:	7c43      	ldrb	r3, [r0, #17]
   3c1dc:	740b      	strb	r3, [r1, #16]
   3c1de:	6983      	ldr	r3, [r0, #24]
   3c1e0:	2040      	movs	r0, #64	; 0x40
   3c1e2:	614b      	str	r3, [r1, #20]
   3c1e4:	4770      	bx	lr
   3c1e6:	f04f 30ff 	mov.w	r0, #4294967295
   3c1ea:	4770      	bx	lr

0003c1ec <rpc_gnss_serialize_alm>:
   3c1ec:	b340      	cbz	r0, 3c240 <rpc_gnss_serialize_alm+0x54>
   3c1ee:	b339      	cbz	r1, 3c240 <rpc_gnss_serialize_alm+0x54>
   3c1f0:	2303      	movs	r3, #3
   3c1f2:	700b      	strb	r3, [r1, #0]
   3c1f4:	2300      	movs	r3, #0
   3c1f6:	704b      	strb	r3, [r1, #1]
   3c1f8:	8b83      	ldrh	r3, [r0, #28]
   3c1fa:	f8a1 301d 	strh.w	r3, [r1, #29]
   3c1fe:	8bc3      	ldrh	r3, [r0, #30]
   3c200:	f8a1 301f 	strh.w	r3, [r1, #31]
   3c204:	88c3      	ldrh	r3, [r0, #6]
   3c206:	810b      	strh	r3, [r1, #8]
   3c208:	8883      	ldrh	r3, [r0, #4]
   3c20a:	80cb      	strh	r3, [r1, #6]
   3c20c:	78c3      	ldrb	r3, [r0, #3]
   3c20e:	714b      	strb	r3, [r1, #5]
   3c210:	6983      	ldr	r3, [r0, #24]
   3c212:	f8c1 3019 	str.w	r3, [r1, #25]
   3c216:	6903      	ldr	r3, [r0, #16]
   3c218:	f8c1 3011 	str.w	r3, [r1, #17]
   3c21c:	8903      	ldrh	r3, [r0, #8]
   3c21e:	814b      	strh	r3, [r1, #10]
   3c220:	68c3      	ldr	r3, [r0, #12]
   3c222:	f8c1 300d 	str.w	r3, [r1, #13]
   3c226:	7a83      	ldrb	r3, [r0, #10]
   3c228:	730b      	strb	r3, [r1, #12]
   3c22a:	7803      	ldrb	r3, [r0, #0]
   3c22c:	708b      	strb	r3, [r1, #2]
   3c22e:	7883      	ldrb	r3, [r0, #2]
   3c230:	710b      	strb	r3, [r1, #4]
   3c232:	6943      	ldr	r3, [r0, #20]
   3c234:	f8c1 3015 	str.w	r3, [r1, #21]
   3c238:	7843      	ldrb	r3, [r0, #1]
   3c23a:	2021      	movs	r0, #33	; 0x21
   3c23c:	70cb      	strb	r3, [r1, #3]
   3c23e:	4770      	bx	lr
   3c240:	f04f 30ff 	mov.w	r0, #4294967295
   3c244:	4770      	bx	lr

0003c246 <rpc_gnss_serialize_klob>:
   3c246:	b1b0      	cbz	r0, 3c276 <rpc_gnss_serialize_klob+0x30>
   3c248:	b1a9      	cbz	r1, 3c276 <rpc_gnss_serialize_klob+0x30>
   3c24a:	2304      	movs	r3, #4
   3c24c:	700b      	strb	r3, [r1, #0]
   3c24e:	2300      	movs	r3, #0
   3c250:	704b      	strb	r3, [r1, #1]
   3c252:	7803      	ldrb	r3, [r0, #0]
   3c254:	708b      	strb	r3, [r1, #2]
   3c256:	7843      	ldrb	r3, [r0, #1]
   3c258:	70cb      	strb	r3, [r1, #3]
   3c25a:	7883      	ldrb	r3, [r0, #2]
   3c25c:	710b      	strb	r3, [r1, #4]
   3c25e:	78c3      	ldrb	r3, [r0, #3]
   3c260:	714b      	strb	r3, [r1, #5]
   3c262:	7903      	ldrb	r3, [r0, #4]
   3c264:	718b      	strb	r3, [r1, #6]
   3c266:	7943      	ldrb	r3, [r0, #5]
   3c268:	71cb      	strb	r3, [r1, #7]
   3c26a:	7983      	ldrb	r3, [r0, #6]
   3c26c:	720b      	strb	r3, [r1, #8]
   3c26e:	79c3      	ldrb	r3, [r0, #7]
   3c270:	200a      	movs	r0, #10
   3c272:	724b      	strb	r3, [r1, #9]
   3c274:	4770      	bx	lr
   3c276:	f04f 30ff 	mov.w	r0, #4294967295
   3c27a:	4770      	bx	lr

0003c27c <rpc_gnss_serialize_nequick>:
   3c27c:	b180      	cbz	r0, 3c2a0 <rpc_gnss_serialize_nequick+0x24>
   3c27e:	b179      	cbz	r1, 3c2a0 <rpc_gnss_serialize_nequick+0x24>
   3c280:	2305      	movs	r3, #5
   3c282:	700b      	strb	r3, [r1, #0]
   3c284:	2300      	movs	r3, #0
   3c286:	704b      	strb	r3, [r1, #1]
   3c288:	8803      	ldrh	r3, [r0, #0]
   3c28a:	804b      	strh	r3, [r1, #2]
   3c28c:	8843      	ldrh	r3, [r0, #2]
   3c28e:	808b      	strh	r3, [r1, #4]
   3c290:	8883      	ldrh	r3, [r0, #4]
   3c292:	80cb      	strh	r3, [r1, #6]
   3c294:	7983      	ldrb	r3, [r0, #6]
   3c296:	720b      	strb	r3, [r1, #8]
   3c298:	79c3      	ldrb	r3, [r0, #7]
   3c29a:	200a      	movs	r0, #10
   3c29c:	724b      	strb	r3, [r1, #9]
   3c29e:	4770      	bx	lr
   3c2a0:	f04f 30ff 	mov.w	r0, #4294967295
   3c2a4:	4770      	bx	lr

0003c2a6 <rpc_gnss_serialize_time_and_sv_tow>:
   3c2a6:	b570      	push	{r4, r5, r6, lr}
   3c2a8:	b1e8      	cbz	r0, 3c2e6 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   3c2aa:	b1e1      	cbz	r1, 3c2e6 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   3c2ac:	2206      	movs	r2, #6
   3c2ae:	2300      	movs	r3, #0
   3c2b0:	700a      	strb	r2, [r1, #0]
   3c2b2:	8802      	ldrh	r2, [r0, #0]
   3c2b4:	704b      	strb	r3, [r1, #1]
   3c2b6:	804a      	strh	r2, [r1, #2]
   3c2b8:	68c2      	ldr	r2, [r0, #12]
   3c2ba:	f101 0410 	add.w	r4, r1, #16
   3c2be:	f8c1 200a 	str.w	r2, [r1, #10]
   3c2c2:	8902      	ldrh	r2, [r0, #8]
   3c2c4:	810a      	strh	r2, [r1, #8]
   3c2c6:	6842      	ldr	r2, [r0, #4]
   3c2c8:	604a      	str	r2, [r1, #4]
   3c2ca:	8a06      	ldrh	r6, [r0, #16]
   3c2cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   3c2d0:	188d      	adds	r5, r1, r2
   3c2d2:	81ee      	strh	r6, [r5, #14]
   3c2d4:	7c85      	ldrb	r5, [r0, #18]
   3c2d6:	3301      	adds	r3, #1
   3c2d8:	2b20      	cmp	r3, #32
   3c2da:	54a5      	strb	r5, [r4, r2]
   3c2dc:	f100 0004 	add.w	r0, r0, #4
   3c2e0:	d1f3      	bne.n	3c2ca <rpc_gnss_serialize_time_and_sv_tow+0x24>
   3c2e2:	206e      	movs	r0, #110	; 0x6e
   3c2e4:	bd70      	pop	{r4, r5, r6, pc}
   3c2e6:	f04f 30ff 	mov.w	r0, #4294967295
   3c2ea:	e7fb      	b.n	3c2e4 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

0003c2ec <rpc_gnss_serialize_location>:
   3c2ec:	b1c0      	cbz	r0, 3c320 <rpc_gnss_serialize_location+0x34>
   3c2ee:	b1b9      	cbz	r1, 3c320 <rpc_gnss_serialize_location+0x34>
   3c2f0:	2307      	movs	r3, #7
   3c2f2:	700b      	strb	r3, [r1, #0]
   3c2f4:	2300      	movs	r3, #0
   3c2f6:	704b      	strb	r3, [r1, #1]
   3c2f8:	8903      	ldrh	r3, [r0, #8]
   3c2fa:	814b      	strh	r3, [r1, #10]
   3c2fc:	7b83      	ldrb	r3, [r0, #14]
   3c2fe:	740b      	strb	r3, [r1, #16]
   3c300:	6803      	ldr	r3, [r0, #0]
   3c302:	f8c1 3002 	str.w	r3, [r1, #2]
   3c306:	6843      	ldr	r3, [r0, #4]
   3c308:	f8c1 3006 	str.w	r3, [r1, #6]
   3c30c:	7b03      	ldrb	r3, [r0, #12]
   3c30e:	738b      	strb	r3, [r1, #14]
   3c310:	7b43      	ldrb	r3, [r0, #13]
   3c312:	73cb      	strb	r3, [r1, #15]
   3c314:	7a83      	ldrb	r3, [r0, #10]
   3c316:	730b      	strb	r3, [r1, #12]
   3c318:	7ac3      	ldrb	r3, [r0, #11]
   3c31a:	2011      	movs	r0, #17
   3c31c:	734b      	strb	r3, [r1, #13]
   3c31e:	4770      	bx	lr
   3c320:	f04f 30ff 	mov.w	r0, #4294967295
   3c324:	4770      	bx	lr

0003c326 <rpc_gnss_serialize_integrity>:
   3c326:	b148      	cbz	r0, 3c33c <rpc_gnss_serialize_integrity+0x16>
   3c328:	b141      	cbz	r1, 3c33c <rpc_gnss_serialize_integrity+0x16>
   3c32a:	2308      	movs	r3, #8
   3c32c:	700b      	strb	r3, [r1, #0]
   3c32e:	2300      	movs	r3, #0
   3c330:	704b      	strb	r3, [r1, #1]
   3c332:	6803      	ldr	r3, [r0, #0]
   3c334:	2006      	movs	r0, #6
   3c336:	f8c1 3002 	str.w	r3, [r1, #2]
   3c33a:	4770      	bx	lr
   3c33c:	f04f 30ff 	mov.w	r0, #4294967295
   3c340:	4770      	bx	lr

0003c342 <packet_handler_alloc_and_init>:
   3c342:	b538      	push	{r3, r4, r5, lr}
   3c344:	4604      	mov	r4, r0
   3c346:	4608      	mov	r0, r1
   3c348:	4611      	mov	r1, r2
   3c34a:	4622      	mov	r2, r4
   3c34c:	f7f7 f980 	bl	33650 <packet_handler_create>
   3c350:	61e0      	str	r0, [r4, #28]
   3c352:	b158      	cbz	r0, 3c36c <packet_handler_alloc_and_init+0x2a>
   3c354:	6803      	ldr	r3, [r0, #0]
   3c356:	681b      	ldr	r3, [r3, #0]
   3c358:	4798      	blx	r3
   3c35a:	4605      	mov	r5, r0
   3c35c:	b120      	cbz	r0, 3c368 <packet_handler_alloc_and_init+0x26>
   3c35e:	69e0      	ldr	r0, [r4, #28]
   3c360:	f000 fe4b 	bl	3cffa <packet_handler_delete>
   3c364:	2300      	movs	r3, #0
   3c366:	61e3      	str	r3, [r4, #28]
   3c368:	4628      	mov	r0, r5
   3c36a:	bd38      	pop	{r3, r4, r5, pc}
   3c36c:	250c      	movs	r5, #12
   3c36e:	e7fb      	b.n	3c368 <packet_handler_alloc_and_init+0x26>

0003c370 <socket_free>:
   3c370:	b510      	push	{r4, lr}
   3c372:	4604      	mov	r4, r0
   3c374:	69c0      	ldr	r0, [r0, #28]
   3c376:	b108      	cbz	r0, 3c37c <socket_free+0xc>
   3c378:	f000 fe3f 	bl	3cffa <packet_handler_delete>
   3c37c:	4620      	mov	r0, r4
   3c37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3c382:	222c      	movs	r2, #44	; 0x2c
   3c384:	2100      	movs	r1, #0
   3c386:	f001 b97e 	b.w	3d686 <memset>

0003c38a <interface_socket_event_get>:
   3c38a:	b510      	push	{r4, lr}
   3c38c:	4604      	mov	r4, r0
   3c38e:	b189      	cbz	r1, 3c3b4 <interface_socket_event_get+0x2a>
   3c390:	f7f4 f856 	bl	30440 <interface_socket_from_handle_get>
   3c394:	b158      	cbz	r0, 3c3ae <interface_socket_event_get+0x24>
   3c396:	6803      	ldr	r3, [r0, #0]
   3c398:	0c1b      	lsrs	r3, r3, #16
   3c39a:	f003 020a 	and.w	r2, r3, #10
   3c39e:	2a0a      	cmp	r2, #10
   3c3a0:	bf14      	ite	ne
   3c3a2:	f003 030f 	andne.w	r3, r3, #15
   3c3a6:	f003 030d 	andeq.w	r3, r3, #13
   3c3aa:	600b      	str	r3, [r1, #0]
   3c3ac:	e002      	b.n	3c3b4 <interface_socket_event_get+0x2a>
   3c3ae:	2c00      	cmp	r4, #0
   3c3b0:	da01      	bge.n	3c3b6 <interface_socket_event_get+0x2c>
   3c3b2:	6008      	str	r0, [r1, #0]
   3c3b4:	bd10      	pop	{r4, pc}
   3c3b6:	2310      	movs	r3, #16
   3c3b8:	e7f7      	b.n	3c3aa <interface_socket_event_get+0x20>

0003c3ba <ip_recvd_packet_free_cb>:
   3c3ba:	b510      	push	{r4, lr}
   3c3bc:	4604      	mov	r4, r0
   3c3be:	6800      	ldr	r0, [r0, #0]
   3c3c0:	f7ff fe6a 	bl	3c098 <rpc_ip_client_data_free>
   3c3c4:	68a0      	ldr	r0, [r4, #8]
   3c3c6:	b118      	cbz	r0, 3c3d0 <ip_recvd_packet_free_cb+0x16>
   3c3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3c3cc:	f7ed b934 	b.w	29638 <nrf_modem_os_free>
   3c3d0:	bd10      	pop	{r4, pc}

0003c3d2 <protocol_verify>:
   3c3d2:	b508      	push	{r3, lr}
   3c3d4:	4603      	mov	r3, r0
   3c3d6:	4608      	mov	r0, r1
   3c3d8:	b169      	cbz	r1, 3c3f6 <protocol_verify+0x24>
   3c3da:	2b01      	cmp	r3, #1
   3c3dc:	d107      	bne.n	3c3ee <protocol_verify+0x1c>
   3c3de:	2901      	cmp	r1, #1
   3c3e0:	d013      	beq.n	3c40a <protocol_verify+0x38>
   3c3e2:	2029      	movs	r0, #41	; 0x29
   3c3e4:	f7ec ff2e 	bl	29244 <nrf_modem_os_errno_set>
   3c3e8:	f04f 30ff 	mov.w	r0, #4294967295
   3c3ec:	bd08      	pop	{r3, pc}
   3c3ee:	2b02      	cmp	r3, #2
   3c3f0:	d10b      	bne.n	3c40a <protocol_verify+0x38>
   3c3f2:	2902      	cmp	r1, #2
   3c3f4:	e7f4      	b.n	3c3e0 <protocol_verify+0xe>
   3c3f6:	2b01      	cmp	r3, #1
   3c3f8:	d101      	bne.n	3c3fe <protocol_verify+0x2c>
   3c3fa:	6013      	str	r3, [r2, #0]
   3c3fc:	e7f6      	b.n	3c3ec <protocol_verify+0x1a>
   3c3fe:	2b03      	cmp	r3, #3
   3c400:	d101      	bne.n	3c406 <protocol_verify+0x34>
   3c402:	6011      	str	r1, [r2, #0]
   3c404:	e7f2      	b.n	3c3ec <protocol_verify+0x1a>
   3c406:	2302      	movs	r3, #2
   3c408:	e7f7      	b.n	3c3fa <protocol_verify+0x28>
   3c40a:	2000      	movs	r0, #0
   3c40c:	e7ee      	b.n	3c3ec <protocol_verify+0x1a>

0003c40e <ip_addr_parse>:
   3c40e:	b570      	push	{r4, r5, r6, lr}
   3c410:	4604      	mov	r4, r0
   3c412:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
   3c416:	684d      	ldr	r5, [r1, #4]
   3c418:	42a5      	cmp	r5, r4
   3c41a:	d119      	bne.n	3c450 <ip_addr_parse+0x42>
   3c41c:	780c      	ldrb	r4, [r1, #0]
   3c41e:	4294      	cmp	r4, r2
   3c420:	d118      	bne.n	3c454 <ip_addr_parse+0x46>
   3c422:	2d02      	cmp	r5, #2
   3c424:	d10a      	bne.n	3c43c <ip_addr_parse+0x2e>
   3c426:	2c10      	cmp	r4, #16
   3c428:	d114      	bne.n	3c454 <ip_addr_parse+0x46>
   3c42a:	890a      	ldrh	r2, [r1, #8]
   3c42c:	310c      	adds	r1, #12
   3c42e:	8032      	strh	r2, [r6, #0]
   3c430:	2204      	movs	r2, #4
   3c432:	801a      	strh	r2, [r3, #0]
   3c434:	f001 f91a 	bl	3d66c <memcpy>
   3c438:	2000      	movs	r0, #0
   3c43a:	bd70      	pop	{r4, r5, r6, pc}
   3c43c:	2d0a      	cmp	r5, #10
   3c43e:	d109      	bne.n	3c454 <ip_addr_parse+0x46>
   3c440:	2c24      	cmp	r4, #36	; 0x24
   3c442:	d107      	bne.n	3c454 <ip_addr_parse+0x46>
   3c444:	890a      	ldrh	r2, [r1, #8]
   3c446:	8032      	strh	r2, [r6, #0]
   3c448:	2210      	movs	r2, #16
   3c44a:	801a      	strh	r2, [r3, #0]
   3c44c:	4411      	add	r1, r2
   3c44e:	e7f1      	b.n	3c434 <ip_addr_parse+0x26>
   3c450:	202f      	movs	r0, #47	; 0x2f
   3c452:	e7f2      	b.n	3c43a <ip_addr_parse+0x2c>
   3c454:	2016      	movs	r0, #22
   3c456:	e7f0      	b.n	3c43a <ip_addr_parse+0x2c>

0003c458 <ip_interface_request_create>:
   3c458:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3c45a:	4614      	mov	r4, r2
   3c45c:	2200      	movs	r2, #0
   3c45e:	4606      	mov	r6, r0
   3c460:	460d      	mov	r5, r1
   3c462:	a801      	add	r0, sp, #4
   3c464:	4619      	mov	r1, r3
   3c466:	9201      	str	r2, [sp, #4]
   3c468:	f7ff fdfa 	bl	3c060 <rpc_ip_client_request_alloc>
   3c46c:	4603      	mov	r3, r0
   3c46e:	9801      	ldr	r0, [sp, #4]
   3c470:	b943      	cbnz	r3, 3c484 <ip_interface_request_create+0x2c>
   3c472:	2208      	movs	r2, #8
   3c474:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   3c478:	60c4      	str	r4, [r0, #12]
   3c47a:	6105      	str	r5, [r0, #16]
   3c47c:	7202      	strb	r2, [r0, #8]
   3c47e:	7243      	strb	r3, [r0, #9]
   3c480:	7283      	strb	r3, [r0, #10]
   3c482:	72c3      	strb	r3, [r0, #11]
   3c484:	b002      	add	sp, #8
   3c486:	bd70      	pop	{r4, r5, r6, pc}

0003c488 <ip_interface_wait>:
   3c488:	b538      	push	{r3, r4, r5, lr}
   3c48a:	4605      	mov	r5, r0
   3c48c:	f7f3 ff9a 	bl	303c4 <interface_socket_wait>
   3c490:	4604      	mov	r4, r0
   3c492:	b938      	cbnz	r0, 3c4a4 <ip_interface_wait+0x1c>
   3c494:	4628      	mov	r0, r5
   3c496:	f7f3 ffd3 	bl	30440 <interface_socket_from_handle_get>
   3c49a:	b118      	cbz	r0, 3c4a4 <ip_interface_wait+0x1c>
   3c49c:	6844      	ldr	r4, [r0, #4]
   3c49e:	b10c      	cbz	r4, 3c4a4 <ip_interface_wait+0x1c>
   3c4a0:	2300      	movs	r3, #0
   3c4a2:	6043      	str	r3, [r0, #4]
   3c4a4:	4620      	mov	r0, r4
   3c4a6:	bd38      	pop	{r3, r4, r5, pc}

0003c4a8 <ip_interface_recvfrom>:
   3c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c4ac:	b087      	sub	sp, #28
   3c4ae:	4681      	mov	r9, r0
   3c4b0:	461e      	mov	r6, r3
   3c4b2:	4690      	mov	r8, r2
   3c4b4:	9f11      	ldr	r7, [sp, #68]	; 0x44
   3c4b6:	9101      	str	r1, [sp, #4]
   3c4b8:	2a00      	cmp	r2, #0
   3c4ba:	f000 80e3 	beq.w	3c684 <ip_interface_recvfrom+0x1dc>
   3c4be:	b11b      	cbz	r3, 3c4c8 <ip_interface_recvfrom+0x20>
   3c4c0:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   3c4c4:	f000 80e0 	beq.w	3c688 <ip_interface_recvfrom+0x1e0>
   3c4c8:	4648      	mov	r0, r9
   3c4ca:	f7f3 ffb9 	bl	30440 <interface_socket_from_handle_get>
   3c4ce:	4604      	mov	r4, r0
   3c4d0:	2800      	cmp	r0, #0
   3c4d2:	f000 80db 	beq.w	3c68c <ip_interface_recvfrom+0x1e4>
   3c4d6:	6803      	ldr	r3, [r0, #0]
   3c4d8:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   3c4dc:	d10f      	bne.n	3c4fe <ip_interface_recvfrom+0x56>
   3c4de:	6802      	ldr	r2, [r0, #0]
   3c4e0:	b292      	uxth	r2, r2
   3c4e2:	2a06      	cmp	r2, #6
   3c4e4:	f000 8094 	beq.w	3c610 <ip_interface_recvfrom+0x168>
   3c4e8:	6802      	ldr	r2, [r0, #0]
   3c4ea:	461e      	mov	r6, r3
   3c4ec:	b292      	uxth	r2, r2
   3c4ee:	2a07      	cmp	r2, #7
   3c4f0:	469a      	mov	sl, r3
   3c4f2:	f000 808f 	beq.w	3c614 <ip_interface_recvfrom+0x16c>
   3c4f6:	2239      	movs	r2, #57	; 0x39
   3c4f8:	f04f 35ff 	mov.w	r5, #4294967295
   3c4fc:	e07a      	b.n	3c5f4 <ip_interface_recvfrom+0x14c>
   3c4fe:	07b1      	lsls	r1, r6, #30
   3c500:	d422      	bmi.n	3c548 <ip_interface_recvfrom+0xa0>
   3c502:	6803      	ldr	r3, [r0, #0]
   3c504:	00da      	lsls	r2, r3, #3
   3c506:	d522      	bpl.n	3c54e <ip_interface_recvfrom+0xa6>
   3c508:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   3c50c:	f04f 35ff 	mov.w	r5, #4294967295
   3c510:	f006 0b10 	and.w	fp, r6, #16
   3c514:	6822      	ldr	r2, [r4, #0]
   3c516:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   3c51a:	d01b      	beq.n	3c554 <ip_interface_recvfrom+0xac>
   3c51c:	6822      	ldr	r2, [r4, #0]
   3c51e:	69e0      	ldr	r0, [r4, #28]
   3c520:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   3c524:	6022      	str	r2, [r4, #0]
   3c526:	6802      	ldr	r2, [r0, #0]
   3c528:	68d2      	ldr	r2, [r2, #12]
   3c52a:	4790      	blx	r2
   3c52c:	1c43      	adds	r3, r0, #1
   3c52e:	4605      	mov	r5, r0
   3c530:	d029      	beq.n	3c586 <ip_interface_recvfrom+0xde>
   3c532:	4580      	cmp	r8, r0
   3c534:	dd05      	ble.n	3c542 <ip_interface_recvfrom+0x9a>
   3c536:	6923      	ldr	r3, [r4, #16]
   3c538:	2b01      	cmp	r3, #1
   3c53a:	d102      	bne.n	3c542 <ip_interface_recvfrom+0x9a>
   3c53c:	f1bb 0f00 	cmp.w	fp, #0
   3c540:	d125      	bne.n	3c58e <ip_interface_recvfrom+0xe6>
   3c542:	f04f 0a00 	mov.w	sl, #0
   3c546:	e040      	b.n	3c5ca <ip_interface_recvfrom+0x122>
   3c548:	f04f 0a00 	mov.w	sl, #0
   3c54c:	e7de      	b.n	3c50c <ip_interface_recvfrom+0x64>
   3c54e:	f04f 0a01 	mov.w	sl, #1
   3c552:	e7db      	b.n	3c50c <ip_interface_recvfrom+0x64>
   3c554:	6821      	ldr	r1, [r4, #0]
   3c556:	0308      	lsls	r0, r1, #12
   3c558:	d515      	bpl.n	3c586 <ip_interface_recvfrom+0xde>
   3c55a:	6821      	ldr	r1, [r4, #0]
   3c55c:	b289      	uxth	r1, r1
   3c55e:	290d      	cmp	r1, #13
   3c560:	d011      	beq.n	3c586 <ip_interface_recvfrom+0xde>
   3c562:	6923      	ldr	r3, [r4, #16]
   3c564:	2b01      	cmp	r3, #1
   3c566:	f000 8099 	beq.w	3c69c <ip_interface_recvfrom+0x1f4>
   3c56a:	4692      	mov	sl, r2
   3c56c:	2239      	movs	r2, #57	; 0x39
   3c56e:	6823      	ldr	r3, [r4, #0]
   3c570:	0c1b      	lsrs	r3, r3, #16
   3c572:	041b      	lsls	r3, r3, #16
   3c574:	f043 030d 	orr.w	r3, r3, #13
   3c578:	6023      	str	r3, [r4, #0]
   3c57a:	6823      	ldr	r3, [r4, #0]
   3c57c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3c580:	6023      	str	r3, [r4, #0]
   3c582:	2600      	movs	r6, #0
   3c584:	e036      	b.n	3c5f4 <ip_interface_recvfrom+0x14c>
   3c586:	f1ba 0f00 	cmp.w	sl, #0
   3c58a:	f000 8088 	beq.w	3c69e <ip_interface_recvfrom+0x1f6>
   3c58e:	6a23      	ldr	r3, [r4, #32]
   3c590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3c594:	2b00      	cmp	r3, #0
   3c596:	bf08      	it	eq
   3c598:	f04f 33ff 	moveq.w	r3, #4294967295
   3c59c:	4611      	mov	r1, r2
   3c59e:	9302      	str	r3, [sp, #8]
   3c5a0:	4648      	mov	r0, r9
   3c5a2:	ab02      	add	r3, sp, #8
   3c5a4:	f7ff ff70 	bl	3c488 <ip_interface_wait>
   3c5a8:	4602      	mov	r2, r0
   3c5aa:	2800      	cmp	r0, #0
   3c5ac:	d070      	beq.n	3c690 <ip_interface_recvfrom+0x1e8>
   3c5ae:	6823      	ldr	r3, [r4, #0]
   3c5b0:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   3c5b4:	d06f      	beq.n	3c696 <ip_interface_recvfrom+0x1ee>
   3c5b6:	6823      	ldr	r3, [r4, #0]
   3c5b8:	b29b      	uxth	r3, r3
   3c5ba:	2b0d      	cmp	r3, #13
   3c5bc:	d06b      	beq.n	3c696 <ip_interface_recvfrom+0x1ee>
   3c5be:	6923      	ldr	r3, [r4, #16]
   3c5c0:	1e59      	subs	r1, r3, #1
   3c5c2:	f1d1 0a00 	rsbs	sl, r1, #0
   3c5c6:	eb4a 0a01 	adc.w	sl, sl, r1
   3c5ca:	b107      	cbz	r7, 3c5ce <ip_interface_recvfrom+0x126>
   3c5cc:	683f      	ldr	r7, [r7, #0]
   3c5ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3c5d0:	69e0      	ldr	r0, [r4, #28]
   3c5d2:	e9cd 2704 	strd	r2, r7, [sp, #16]
   3c5d6:	9b01      	ldr	r3, [sp, #4]
   3c5d8:	6802      	ldr	r2, [r0, #0]
   3c5da:	e9cd 3802 	strd	r3, r8, [sp, #8]
   3c5de:	6895      	ldr	r5, [r2, #8]
   3c5e0:	a902      	add	r1, sp, #8
   3c5e2:	4632      	mov	r2, r6
   3c5e4:	47a8      	blx	r5
   3c5e6:	1c42      	adds	r2, r0, #1
   3c5e8:	4605      	mov	r5, r0
   3c5ea:	bf0b      	itete	eq
   3c5ec:	2600      	moveq	r6, #0
   3c5ee:	2601      	movne	r6, #1
   3c5f0:	2223      	moveq	r2, #35	; 0x23
   3c5f2:	2200      	movne	r2, #0
   3c5f4:	69e0      	ldr	r0, [r4, #28]
   3c5f6:	9201      	str	r2, [sp, #4]
   3c5f8:	6801      	ldr	r1, [r0, #0]
   3c5fa:	68c9      	ldr	r1, [r1, #12]
   3c5fc:	4788      	blx	r1
   3c5fe:	3001      	adds	r0, #1
   3c600:	9a01      	ldr	r2, [sp, #4]
   3c602:	d009      	beq.n	3c618 <ip_interface_recvfrom+0x170>
   3c604:	6823      	ldr	r3, [r4, #0]
   3c606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3c60a:	6023      	str	r3, [r4, #0]
   3c60c:	b1a2      	cbz	r2, 3c638 <ip_interface_recvfrom+0x190>
   3c60e:	e028      	b.n	3c662 <ip_interface_recvfrom+0x1ba>
   3c610:	461e      	mov	r6, r3
   3c612:	469a      	mov	sl, r3
   3c614:	2209      	movs	r2, #9
   3c616:	e76f      	b.n	3c4f8 <ip_interface_recvfrom+0x50>
   3c618:	f1ba 0f00 	cmp.w	sl, #0
   3c61c:	d010      	beq.n	3c640 <ip_interface_recvfrom+0x198>
   3c61e:	2e00      	cmp	r6, #0
   3c620:	d1f4      	bne.n	3c60c <ip_interface_recvfrom+0x164>
   3c622:	4635      	mov	r5, r6
   3c624:	6823      	ldr	r3, [r4, #0]
   3c626:	0c1b      	lsrs	r3, r3, #16
   3c628:	041b      	lsls	r3, r3, #16
   3c62a:	f043 030d 	orr.w	r3, r3, #13
   3c62e:	6023      	str	r3, [r4, #0]
   3c630:	6823      	ldr	r3, [r4, #0]
   3c632:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3c636:	6023      	str	r3, [r4, #0]
   3c638:	4628      	mov	r0, r5
   3c63a:	b007      	add	sp, #28
   3c63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c640:	2e00      	cmp	r6, #0
   3c642:	d1e3      	bne.n	3c60c <ip_interface_recvfrom+0x164>
   3c644:	6823      	ldr	r3, [r4, #0]
   3c646:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   3c64a:	6823      	ldr	r3, [r4, #0]
   3c64c:	d00f      	beq.n	3c66e <ip_interface_recvfrom+0x1c6>
   3c64e:	2269      	movs	r2, #105	; 0x69
   3c650:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   3c654:	6023      	str	r3, [r4, #0]
   3c656:	6823      	ldr	r3, [r4, #0]
   3c658:	0c1b      	lsrs	r3, r3, #16
   3c65a:	041b      	lsls	r3, r3, #16
   3c65c:	f043 030d 	orr.w	r3, r3, #13
   3c660:	6023      	str	r3, [r4, #0]
   3c662:	4610      	mov	r0, r2
   3c664:	f7ec fdee 	bl	29244 <nrf_modem_os_errno_set>
   3c668:	f04f 35ff 	mov.w	r5, #4294967295
   3c66c:	e7e4      	b.n	3c638 <ip_interface_recvfrom+0x190>
   3c66e:	031b      	lsls	r3, r3, #12
   3c670:	d5cc      	bpl.n	3c60c <ip_interface_recvfrom+0x164>
   3c672:	6823      	ldr	r3, [r4, #0]
   3c674:	b29b      	uxth	r3, r3
   3c676:	2b0d      	cmp	r3, #13
   3c678:	d1c8      	bne.n	3c60c <ip_interface_recvfrom+0x164>
   3c67a:	68a3      	ldr	r3, [r4, #8]
   3c67c:	2b00      	cmp	r3, #0
   3c67e:	d0c5      	beq.n	3c60c <ip_interface_recvfrom+0x164>
   3c680:	68a2      	ldr	r2, [r4, #8]
   3c682:	e7c3      	b.n	3c60c <ip_interface_recvfrom+0x164>
   3c684:	2216      	movs	r2, #22
   3c686:	e7ec      	b.n	3c662 <ip_interface_recvfrom+0x1ba>
   3c688:	222d      	movs	r2, #45	; 0x2d
   3c68a:	e7ea      	b.n	3c662 <ip_interface_recvfrom+0x1ba>
   3c68c:	2209      	movs	r2, #9
   3c68e:	e7e8      	b.n	3c662 <ip_interface_recvfrom+0x1ba>
   3c690:	f04f 0a01 	mov.w	sl, #1
   3c694:	e73e      	b.n	3c514 <ip_interface_recvfrom+0x6c>
   3c696:	2600      	movs	r6, #0
   3c698:	46b2      	mov	sl, r6
   3c69a:	e7ab      	b.n	3c5f4 <ip_interface_recvfrom+0x14c>
   3c69c:	469a      	mov	sl, r3
   3c69e:	2223      	movs	r2, #35	; 0x23
   3c6a0:	e76f      	b.n	3c582 <ip_interface_recvfrom+0xda>

0003c6a2 <ip_interface_connect>:
   3c6a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3c6a6:	4606      	mov	r6, r0
   3c6a8:	4691      	mov	r9, r2
   3c6aa:	460f      	mov	r7, r1
   3c6ac:	b085      	sub	sp, #20
   3c6ae:	2900      	cmp	r1, #0
   3c6b0:	d062      	beq.n	3c778 <ip_interface_connect+0xd6>
   3c6b2:	2a00      	cmp	r2, #0
   3c6b4:	d060      	beq.n	3c778 <ip_interface_connect+0xd6>
   3c6b6:	f7f3 fec3 	bl	30440 <interface_socket_from_handle_get>
   3c6ba:	4604      	mov	r4, r0
   3c6bc:	2800      	cmp	r0, #0
   3c6be:	d05d      	beq.n	3c77c <ip_interface_connect+0xda>
   3c6c0:	6803      	ldr	r3, [r0, #0]
   3c6c2:	b29b      	uxth	r3, r3
   3c6c4:	2b02      	cmp	r3, #2
   3c6c6:	d003      	beq.n	3c6d0 <ip_interface_connect+0x2e>
   3c6c8:	6803      	ldr	r3, [r0, #0]
   3c6ca:	b29b      	uxth	r3, r3
   3c6cc:	2b04      	cmp	r3, #4
   3c6ce:	d14c      	bne.n	3c76a <ip_interface_connect+0xc8>
   3c6d0:	6823      	ldr	r3, [r4, #0]
   3c6d2:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   3c6d6:	d153      	bne.n	3c780 <ip_interface_connect+0xde>
   3c6d8:	f247 0202 	movw	r2, #28674	; 0x7002
   3c6dc:	4630      	mov	r0, r6
   3c6de:	69a1      	ldr	r1, [r4, #24]
   3c6e0:	f7ff feba 	bl	3c458 <ip_interface_request_create>
   3c6e4:	4605      	mov	r5, r0
   3c6e6:	2800      	cmp	r0, #0
   3c6e8:	d04c      	beq.n	3c784 <ip_interface_connect+0xe2>
   3c6ea:	f247 0802 	movw	r8, #28674	; 0x7002
   3c6ee:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   3c6f2:	60c3      	str	r3, [r0, #12]
   3c6f4:	69a3      	ldr	r3, [r4, #24]
   3c6f6:	464a      	mov	r2, r9
   3c6f8:	6103      	str	r3, [r0, #16]
   3c6fa:	6883      	ldr	r3, [r0, #8]
   3c6fc:	4639      	mov	r1, r7
   3c6fe:	3304      	adds	r3, #4
   3c700:	6083      	str	r3, [r0, #8]
   3c702:	f100 0318 	add.w	r3, r0, #24
   3c706:	9301      	str	r3, [sp, #4]
   3c708:	f100 0314 	add.w	r3, r0, #20
   3c70c:	9300      	str	r3, [sp, #0]
   3c70e:	f100 0316 	add.w	r3, r0, #22
   3c712:	68e0      	ldr	r0, [r4, #12]
   3c714:	f7ff fe7b 	bl	3c40e <ip_addr_parse>
   3c718:	bb00      	cbnz	r0, 3c75c <ip_interface_connect+0xba>
   3c71a:	68ab      	ldr	r3, [r5, #8]
   3c71c:	8aea      	ldrh	r2, [r5, #22]
   3c71e:	6827      	ldr	r7, [r4, #0]
   3c720:	4413      	add	r3, r2
   3c722:	60ab      	str	r3, [r5, #8]
   3c724:	6823      	ldr	r3, [r4, #0]
   3c726:	4641      	mov	r1, r8
   3c728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   3c72c:	6023      	str	r3, [r4, #0]
   3c72e:	4628      	mov	r0, r5
   3c730:	f7ff fca5 	bl	3c07e <rpc_ip_client_request_send>
   3c734:	6823      	ldr	r3, [r4, #0]
   3c736:	00db      	lsls	r3, r3, #3
   3c738:	d426      	bmi.n	3c788 <ip_interface_connect+0xe6>
   3c73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c73c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3c740:	2b00      	cmp	r3, #0
   3c742:	bf08      	it	eq
   3c744:	f04f 33ff 	moveq.w	r3, #4294967295
   3c748:	2105      	movs	r1, #5
   3c74a:	9303      	str	r3, [sp, #12]
   3c74c:	4630      	mov	r0, r6
   3c74e:	ab03      	add	r3, sp, #12
   3c750:	f7ff fe9a 	bl	3c488 <ip_interface_wait>
   3c754:	b130      	cbz	r0, 3c764 <ip_interface_connect+0xc2>
   3c756:	2873      	cmp	r0, #115	; 0x73
   3c758:	d000      	beq.n	3c75c <ip_interface_connect+0xba>
   3c75a:	6027      	str	r7, [r4, #0]
   3c75c:	f7ec fd72 	bl	29244 <nrf_modem_os_errno_set>
   3c760:	f04f 30ff 	mov.w	r0, #4294967295
   3c764:	b005      	add	sp, #20
   3c766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3c76a:	6803      	ldr	r3, [r0, #0]
   3c76c:	b29b      	uxth	r3, r3
   3c76e:	2b05      	cmp	r3, #5
   3c770:	bf14      	ite	ne
   3c772:	2009      	movne	r0, #9
   3c774:	2038      	moveq	r0, #56	; 0x38
   3c776:	e7f1      	b.n	3c75c <ip_interface_connect+0xba>
   3c778:	2016      	movs	r0, #22
   3c77a:	e7ef      	b.n	3c75c <ip_interface_connect+0xba>
   3c77c:	2009      	movs	r0, #9
   3c77e:	e7ed      	b.n	3c75c <ip_interface_connect+0xba>
   3c780:	2072      	movs	r0, #114	; 0x72
   3c782:	e7eb      	b.n	3c75c <ip_interface_connect+0xba>
   3c784:	200c      	movs	r0, #12
   3c786:	e7e9      	b.n	3c75c <ip_interface_connect+0xba>
   3c788:	2073      	movs	r0, #115	; 0x73
   3c78a:	e7e7      	b.n	3c75c <ip_interface_connect+0xba>

0003c78c <getopt_check_and_send_int>:
   3c78c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3c78e:	4604      	mov	r4, r0
   3c790:	460d      	mov	r5, r1
   3c792:	4618      	mov	r0, r3
   3c794:	4611      	mov	r1, r2
   3c796:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3c79a:	b193      	cbz	r3, 3c7c2 <getopt_check_and_send_int+0x36>
   3c79c:	681e      	ldr	r6, [r3, #0]
   3c79e:	2e04      	cmp	r6, #4
   3c7a0:	d10f      	bne.n	3c7c2 <getopt_check_and_send_int+0x36>
   3c7a2:	b172      	cbz	r2, 3c7c2 <getopt_check_and_send_int+0x36>
   3c7a4:	e9cd 2300 	strd	r2, r3, [sp]
   3c7a8:	462b      	mov	r3, r5
   3c7aa:	4622      	mov	r2, r4
   3c7ac:	f7f4 f8e2 	bl	30974 <ip_interface_socketoption_get>
   3c7b0:	4603      	mov	r3, r0
   3c7b2:	b118      	cbz	r0, 3c7bc <getopt_check_and_send_int+0x30>
   3c7b4:	f7ec fd46 	bl	29244 <nrf_modem_os_errno_set>
   3c7b8:	f04f 33ff 	mov.w	r3, #4294967295
   3c7bc:	4618      	mov	r0, r3
   3c7be:	b002      	add	sp, #8
   3c7c0:	bd70      	pop	{r4, r5, r6, pc}
   3c7c2:	2016      	movs	r0, #22
   3c7c4:	e7f6      	b.n	3c7b4 <getopt_check_and_send_int+0x28>

0003c7c6 <ip_interface_socketoption_send>:
   3c7c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c7ca:	4698      	mov	r8, r3
   3c7cc:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   3c7d0:	f04f 33ff 	mov.w	r3, #4294967295
   3c7d4:	9301      	str	r3, [sp, #4]
   3c7d6:	680b      	ldr	r3, [r1, #0]
   3c7d8:	4606      	mov	r6, r0
   3c7da:	025d      	lsls	r5, r3, #9
   3c7dc:	460c      	mov	r4, r1
   3c7de:	4692      	mov	sl, r2
   3c7e0:	d439      	bmi.n	3c856 <ip_interface_socketoption_send+0x90>
   3c7e2:	680b      	ldr	r3, [r1, #0]
   3c7e4:	0219      	lsls	r1, r3, #8
   3c7e6:	d436      	bmi.n	3c856 <ip_interface_socketoption_send+0x90>
   3c7e8:	6823      	ldr	r3, [r4, #0]
   3c7ea:	01da      	lsls	r2, r3, #7
   3c7ec:	d433      	bmi.n	3c856 <ip_interface_socketoption_send+0x90>
   3c7ee:	6823      	ldr	r3, [r4, #0]
   3c7f0:	019b      	lsls	r3, r3, #6
   3c7f2:	d430      	bmi.n	3c856 <ip_interface_socketoption_send+0x90>
   3c7f4:	f8d4 9000 	ldr.w	r9, [r4]
   3c7f8:	6823      	ldr	r3, [r4, #0]
   3c7fa:	f247 0203 	movw	r2, #28675	; 0x7003
   3c7fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   3c802:	6023      	str	r3, [r4, #0]
   3c804:	69a1      	ldr	r1, [r4, #24]
   3c806:	463b      	mov	r3, r7
   3c808:	f7ff fe26 	bl	3c458 <ip_interface_request_create>
   3c80c:	4605      	mov	r5, r0
   3c80e:	b300      	cbz	r0, 3c852 <ip_interface_socketoption_send+0x8c>
   3c810:	6883      	ldr	r3, [r0, #8]
   3c812:	f8c0 a014 	str.w	sl, [r0, #20]
   3c816:	3308      	adds	r3, #8
   3c818:	6083      	str	r3, [r0, #8]
   3c81a:	f8c0 8018 	str.w	r8, [r0, #24]
   3c81e:	b13f      	cbz	r7, 3c830 <ip_interface_socketoption_send+0x6a>
   3c820:	f1bb 0f00 	cmp.w	fp, #0
   3c824:	d004      	beq.n	3c830 <ip_interface_socketoption_send+0x6a>
   3c826:	463a      	mov	r2, r7
   3c828:	4659      	mov	r1, fp
   3c82a:	6800      	ldr	r0, [r0, #0]
   3c82c:	f000 ff1e 	bl	3d66c <memcpy>
   3c830:	f247 0103 	movw	r1, #28675	; 0x7003
   3c834:	4628      	mov	r0, r5
   3c836:	f7ff fc22 	bl	3c07e <rpc_ip_client_request_send>
   3c83a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3c83e:	4630      	mov	r0, r6
   3c840:	4611      	mov	r1, r2
   3c842:	ab01      	add	r3, sp, #4
   3c844:	f7ff fe20 	bl	3c488 <ip_interface_wait>
   3c848:	f8c4 9000 	str.w	r9, [r4]
   3c84c:	b003      	add	sp, #12
   3c84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c852:	200c      	movs	r0, #12
   3c854:	e7f8      	b.n	3c848 <ip_interface_socketoption_send+0x82>
   3c856:	2023      	movs	r0, #35	; 0x23
   3c858:	e7f8      	b.n	3c84c <ip_interface_socketoption_send+0x86>

0003c85a <setopt_check_and_send_int>:
   3c85a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3c85c:	4604      	mov	r4, r0
   3c85e:	460d      	mov	r5, r1
   3c860:	4618      	mov	r0, r3
   3c862:	4611      	mov	r1, r2
   3c864:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   3c868:	2a04      	cmp	r2, #4
   3c86a:	d10f      	bne.n	3c88c <setopt_check_and_send_int+0x32>
   3c86c:	b173      	cbz	r3, 3c88c <setopt_check_and_send_int+0x32>
   3c86e:	e9cd 3200 	strd	r3, r2, [sp]
   3c872:	462b      	mov	r3, r5
   3c874:	4622      	mov	r2, r4
   3c876:	f7ff ffa6 	bl	3c7c6 <ip_interface_socketoption_send>
   3c87a:	4603      	mov	r3, r0
   3c87c:	b118      	cbz	r0, 3c886 <setopt_check_and_send_int+0x2c>
   3c87e:	f7ec fce1 	bl	29244 <nrf_modem_os_errno_set>
   3c882:	f04f 33ff 	mov.w	r3, #4294967295
   3c886:	4618      	mov	r0, r3
   3c888:	b003      	add	sp, #12
   3c88a:	bd30      	pop	{r4, r5, pc}
   3c88c:	2016      	movs	r0, #22
   3c88e:	e7f6      	b.n	3c87e <setopt_check_and_send_int+0x24>

0003c890 <ip_interface_getopt>:
   3c890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3c894:	2901      	cmp	r1, #1
   3c896:	4604      	mov	r4, r0
   3c898:	460f      	mov	r7, r1
   3c89a:	4616      	mov	r6, r2
   3c89c:	461d      	mov	r5, r3
   3c89e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   3c8a2:	d007      	beq.n	3c8b4 <ip_interface_getopt+0x24>
   3c8a4:	202a      	movs	r0, #42	; 0x2a
   3c8a6:	f7ec fccd 	bl	29244 <nrf_modem_os_errno_set>
   3c8aa:	f04f 30ff 	mov.w	r0, #4294967295
   3c8ae:	b002      	add	sp, #8
   3c8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c8b4:	f7f3 fdc4 	bl	30440 <interface_socket_from_handle_get>
   3c8b8:	4602      	mov	r2, r0
   3c8ba:	b908      	cbnz	r0, 3c8c0 <ip_interface_getopt+0x30>
   3c8bc:	2009      	movs	r0, #9
   3c8be:	e7f2      	b.n	3c8a6 <ip_interface_getopt+0x16>
   3c8c0:	2e28      	cmp	r6, #40	; 0x28
   3c8c2:	dc0d      	bgt.n	3c8e0 <ip_interface_getopt+0x50>
   3c8c4:	2e1d      	cmp	r6, #29
   3c8c6:	dd0d      	ble.n	3c8e4 <ip_interface_getopt+0x54>
   3c8c8:	f1a6 031e 	sub.w	r3, r6, #30
   3c8cc:	2b0a      	cmp	r3, #10
   3c8ce:	d809      	bhi.n	3c8e4 <ip_interface_getopt+0x54>
   3c8d0:	e8df f003 	tbb	[pc, r3]
   3c8d4:	08241d13 	.word	0x08241d13
   3c8d8:	08080808 	.word	0x08080808
   3c8dc:	0808      	.short	0x0808
   3c8de:	2b          	.byte	0x2b
   3c8df:	00          	.byte	0x00
   3c8e0:	2e37      	cmp	r6, #55	; 0x37
   3c8e2:	d029      	beq.n	3c938 <ip_interface_getopt+0xa8>
   3c8e4:	462b      	mov	r3, r5
   3c8e6:	4632      	mov	r2, r6
   3c8e8:	2101      	movs	r1, #1
   3c8ea:	4620      	mov	r0, r4
   3c8ec:	f8cd 8020 	str.w	r8, [sp, #32]
   3c8f0:	b002      	add	sp, #8
   3c8f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3c8f6:	f7f3 bde7 	b.w	304c8 <interface_socket_getopt>
   3c8fa:	4623      	mov	r3, r4
   3c8fc:	f248 0101 	movw	r1, #32769	; 0x8001
   3c900:	f44f 7000 	mov.w	r0, #512	; 0x200
   3c904:	e9cd 5800 	strd	r5, r8, [sp]
   3c908:	f7ff ff40 	bl	3c78c <getopt_check_and_send_int>
   3c90c:	e7cf      	b.n	3c8ae <ip_interface_getopt+0x1e>
   3c90e:	4623      	mov	r3, r4
   3c910:	f244 0110 	movw	r1, #16400	; 0x4010
   3c914:	2004      	movs	r0, #4
   3c916:	e9cd 5800 	strd	r5, r8, [sp]
   3c91a:	e7f5      	b.n	3c908 <ip_interface_getopt+0x78>
   3c91c:	4623      	mov	r3, r4
   3c91e:	f246 0110 	movw	r1, #24592	; 0x6010
   3c922:	2006      	movs	r0, #6
   3c924:	e9cd 5800 	strd	r5, r8, [sp]
   3c928:	e7ee      	b.n	3c908 <ip_interface_getopt+0x78>
   3c92a:	4623      	mov	r3, r4
   3c92c:	f241 0104 	movw	r1, #4100	; 0x1004
   3c930:	2008      	movs	r0, #8
   3c932:	e9cd 5800 	strd	r5, r8, [sp]
   3c936:	e7e7      	b.n	3c908 <ip_interface_getopt+0x78>
   3c938:	4623      	mov	r3, r4
   3c93a:	f245 0106 	movw	r1, #20486	; 0x5006
   3c93e:	4638      	mov	r0, r7
   3c940:	e9cd 5800 	strd	r5, r8, [sp]
   3c944:	e7e0      	b.n	3c908 <ip_interface_getopt+0x78>

0003c946 <attach_trigger_condition_verify>:
   3c946:	6903      	ldr	r3, [r0, #16]
   3c948:	2b01      	cmp	r3, #1
   3c94a:	d105      	bne.n	3c958 <attach_trigger_condition_verify+0x12>
   3c94c:	6800      	ldr	r0, [r0, #0]
   3c94e:	b280      	uxth	r0, r0
   3c950:	1f43      	subs	r3, r0, #5
   3c952:	4258      	negs	r0, r3
   3c954:	4158      	adcs	r0, r3
   3c956:	4770      	bx	lr
   3c958:	2b02      	cmp	r3, #2
   3c95a:	d109      	bne.n	3c970 <attach_trigger_condition_verify+0x2a>
   3c95c:	6803      	ldr	r3, [r0, #0]
   3c95e:	b29b      	uxth	r3, r3
   3c960:	2b02      	cmp	r3, #2
   3c962:	d003      	beq.n	3c96c <attach_trigger_condition_verify+0x26>
   3c964:	6803      	ldr	r3, [r0, #0]
   3c966:	b29b      	uxth	r3, r3
   3c968:	2b04      	cmp	r3, #4
   3c96a:	d1ef      	bne.n	3c94c <attach_trigger_condition_verify+0x6>
   3c96c:	2001      	movs	r0, #1
   3c96e:	4770      	bx	lr
   3c970:	2000      	movs	r0, #0
   3c972:	4770      	bx	lr

0003c974 <secure_client_socket>:
   3c974:	f04f 33ff 	mov.w	r3, #4294967295
   3c978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3c97a:	9301      	str	r3, [sp, #4]
   3c97c:	680b      	ldr	r3, [r1, #0]
   3c97e:	4606      	mov	r6, r0
   3c980:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3c984:	600b      	str	r3, [r1, #0]
   3c986:	680b      	ldr	r3, [r1, #0]
   3c988:	460c      	mov	r4, r1
   3c98a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3c98e:	600b      	str	r3, [r1, #0]
   3c990:	680f      	ldr	r7, [r1, #0]
   3c992:	463a      	mov	r2, r7
   3c994:	f7f4 fe50 	bl	31638 <secure_socket_attach_initiate>
   3c998:	4605      	mov	r5, r0
   3c99a:	b950      	cbnz	r0, 3c9b2 <secure_client_socket+0x3e>
   3c99c:	220c      	movs	r2, #12
   3c99e:	4630      	mov	r0, r6
   3c9a0:	4611      	mov	r1, r2
   3c9a2:	ab01      	add	r3, sp, #4
   3c9a4:	f7ff fd70 	bl	3c488 <ip_interface_wait>
   3c9a8:	4605      	mov	r5, r0
   3c9aa:	b128      	cbz	r0, 3c9b8 <secure_client_socket+0x44>
   3c9ac:	2873      	cmp	r0, #115	; 0x73
   3c9ae:	d000      	beq.n	3c9b2 <secure_client_socket+0x3e>
   3c9b0:	6027      	str	r7, [r4, #0]
   3c9b2:	4628      	mov	r0, r5
   3c9b4:	b003      	add	sp, #12
   3c9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3c9b8:	4630      	mov	r0, r6
   3c9ba:	f7f4 fe2b 	bl	31614 <hostname_free>
   3c9be:	6823      	ldr	r3, [r4, #0]
   3c9c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   3c9c4:	6023      	str	r3, [r4, #0]
   3c9c6:	6823      	ldr	r3, [r4, #0]
   3c9c8:	0c1b      	lsrs	r3, r3, #16
   3c9ca:	041b      	lsls	r3, r3, #16
   3c9cc:	f043 030c 	orr.w	r3, r3, #12
   3c9d0:	6023      	str	r3, [r4, #0]
   3c9d2:	6823      	ldr	r3, [r4, #0]
   3c9d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3c9d8:	6023      	str	r3, [r4, #0]
   3c9da:	6823      	ldr	r3, [r4, #0]
   3c9dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3c9e0:	6023      	str	r3, [r4, #0]
   3c9e2:	e7e6      	b.n	3c9b2 <secure_client_socket+0x3e>

0003c9e4 <tls_interface_close>:
   3c9e4:	b510      	push	{r4, lr}
   3c9e6:	4604      	mov	r4, r0
   3c9e8:	f7f3 fd2a 	bl	30440 <interface_socket_from_handle_get>
   3c9ec:	b138      	cbz	r0, 3c9fe <tls_interface_close+0x1a>
   3c9ee:	4620      	mov	r0, r4
   3c9f0:	f7f4 fe10 	bl	31614 <hostname_free>
   3c9f4:	4620      	mov	r0, r4
   3c9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3c9fa:	f7f3 be8f 	b.w	3071c <ip_interface_close>
   3c9fe:	2009      	movs	r0, #9
   3ca00:	f7ec fc20 	bl	29244 <nrf_modem_os_errno_set>
   3ca04:	f04f 30ff 	mov.w	r0, #4294967295
   3ca08:	bd10      	pop	{r4, pc}

0003ca0a <packet_free_cb>:
   3ca0a:	6800      	ldr	r0, [r0, #0]
   3ca0c:	f7ff bb21 	b.w	3c052 <rpc_at_client_data_free>

0003ca10 <at_interface_wait>:
   3ca10:	b538      	push	{r3, r4, r5, lr}
   3ca12:	4605      	mov	r5, r0
   3ca14:	f7f3 fcd6 	bl	303c4 <interface_socket_wait>
   3ca18:	4604      	mov	r4, r0
   3ca1a:	b938      	cbnz	r0, 3ca2c <at_interface_wait+0x1c>
   3ca1c:	4628      	mov	r0, r5
   3ca1e:	f7f3 fd0f 	bl	30440 <interface_socket_from_handle_get>
   3ca22:	b118      	cbz	r0, 3ca2c <at_interface_wait+0x1c>
   3ca24:	6844      	ldr	r4, [r0, #4]
   3ca26:	b10c      	cbz	r4, 3ca2c <at_interface_wait+0x1c>
   3ca28:	2300      	movs	r3, #0
   3ca2a:	6043      	str	r3, [r0, #4]
   3ca2c:	4620      	mov	r0, r4
   3ca2e:	bd38      	pop	{r3, r4, r5, pc}

0003ca30 <send_message>:
   3ca30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3ca34:	4606      	mov	r6, r0
   3ca36:	4668      	mov	r0, sp
   3ca38:	460f      	mov	r7, r1
   3ca3a:	4692      	mov	sl, r2
   3ca3c:	4699      	mov	r9, r3
   3ca3e:	f7ff faef 	bl	3c020 <rpc_at_client_request_alloc>
   3ca42:	4605      	mov	r5, r0
   3ca44:	4630      	mov	r0, r6
   3ca46:	f7f3 fcfb 	bl	30440 <interface_socket_from_handle_get>
   3ca4a:	4680      	mov	r8, r0
   3ca4c:	bb05      	cbnz	r5, 3ca90 <send_message+0x60>
   3ca4e:	2304      	movs	r3, #4
   3ca50:	9c00      	ldr	r4, [sp, #0]
   3ca52:	7223      	strb	r3, [r4, #8]
   3ca54:	7265      	strb	r5, [r4, #9]
   3ca56:	72a5      	strb	r5, [r4, #10]
   3ca58:	72e5      	strb	r5, [r4, #11]
   3ca5a:	60e6      	str	r6, [r4, #12]
   3ca5c:	b127      	cbz	r7, 3ca68 <send_message+0x38>
   3ca5e:	463a      	mov	r2, r7
   3ca60:	4651      	mov	r1, sl
   3ca62:	6820      	ldr	r0, [r4, #0]
   3ca64:	f000 fe02 	bl	3d66c <memcpy>
   3ca68:	4649      	mov	r1, r9
   3ca6a:	9800      	ldr	r0, [sp, #0]
   3ca6c:	f7ff fae7 	bl	3c03e <rpc_at_client_request_send>
   3ca70:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   3ca74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3ca76:	2b00      	cmp	r3, #0
   3ca78:	bf08      	it	eq
   3ca7a:	f04f 33ff 	moveq.w	r3, #4294967295
   3ca7e:	4611      	mov	r1, r2
   3ca80:	9301      	str	r3, [sp, #4]
   3ca82:	4630      	mov	r0, r6
   3ca84:	ab01      	add	r3, sp, #4
   3ca86:	f7ff ffc3 	bl	3ca10 <at_interface_wait>
   3ca8a:	b002      	add	sp, #8
   3ca8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ca90:	200c      	movs	r0, #12
   3ca92:	e7fa      	b.n	3ca8a <send_message+0x5a>

0003ca94 <at_interface_write>:
   3ca94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3ca98:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   3ca9a:	4607      	mov	r7, r0
   3ca9c:	4688      	mov	r8, r1
   3ca9e:	4615      	mov	r5, r2
   3caa0:	4699      	mov	r9, r3
   3caa2:	b146      	cbz	r6, 3cab6 <at_interface_write+0x22>
   3caa4:	2038      	movs	r0, #56	; 0x38
   3caa6:	f7ec fbcd 	bl	29244 <nrf_modem_os_errno_set>
   3caaa:	f04f 35ff 	mov.w	r5, #4294967295
   3caae:	4628      	mov	r0, r5
   3cab0:	b003      	add	sp, #12
   3cab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3cab6:	f7f3 fcc3 	bl	30440 <interface_socket_from_handle_get>
   3caba:	4604      	mov	r4, r0
   3cabc:	f1b9 0f00 	cmp.w	r9, #0
   3cac0:	d124      	bne.n	3cb0c <at_interface_write+0x78>
   3cac2:	b908      	cbnz	r0, 3cac8 <at_interface_write+0x34>
   3cac4:	2016      	movs	r0, #22
   3cac6:	e7ee      	b.n	3caa6 <at_interface_write+0x12>
   3cac8:	2601      	movs	r6, #1
   3caca:	6822      	ldr	r2, [r4, #0]
   3cacc:	0393      	lsls	r3, r2, #14
   3cace:	d518      	bpl.n	3cb02 <at_interface_write+0x6e>
   3cad0:	b1f6      	cbz	r6, 3cb10 <at_interface_write+0x7c>
   3cad2:	6823      	ldr	r3, [r4, #0]
   3cad4:	4642      	mov	r2, r8
   3cad6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3cada:	6023      	str	r3, [r4, #0]
   3cadc:	6823      	ldr	r3, [r4, #0]
   3cade:	4629      	mov	r1, r5
   3cae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   3cae4:	6023      	str	r3, [r4, #0]
   3cae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   3caea:	4638      	mov	r0, r7
   3caec:	9300      	str	r3, [sp, #0]
   3caee:	2301      	movs	r3, #1
   3caf0:	f7ff ff9e 	bl	3ca30 <send_message>
   3caf4:	2800      	cmp	r0, #0
   3caf6:	d0da      	beq.n	3caae <at_interface_write+0x1a>
   3caf8:	6823      	ldr	r3, [r4, #0]
   3cafa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3cafe:	6023      	str	r3, [r4, #0]
   3cb00:	e7d1      	b.n	3caa6 <at_interface_write+0x12>
   3cb02:	2e00      	cmp	r6, #0
   3cb04:	bf14      	ite	ne
   3cb06:	2016      	movne	r0, #22
   3cb08:	202d      	moveq	r0, #45	; 0x2d
   3cb0a:	e7cc      	b.n	3caa6 <at_interface_write+0x12>
   3cb0c:	2800      	cmp	r0, #0
   3cb0e:	d1dc      	bne.n	3caca <at_interface_write+0x36>
   3cb10:	202d      	movs	r0, #45	; 0x2d
   3cb12:	e7c8      	b.n	3caa6 <at_interface_write+0x12>

0003cb14 <at_interface_close>:
   3cb14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3cb16:	4606      	mov	r6, r0
   3cb18:	f7f3 fc92 	bl	30440 <interface_socket_from_handle_get>
   3cb1c:	4604      	mov	r4, r0
   3cb1e:	b308      	cbz	r0, 3cb64 <at_interface_close+0x50>
   3cb20:	230d      	movs	r3, #13
   3cb22:	6807      	ldr	r7, [r0, #0]
   3cb24:	6003      	str	r3, [r0, #0]
   3cb26:	6803      	ldr	r3, [r0, #0]
   3cb28:	2200      	movs	r2, #0
   3cb2a:	039b      	lsls	r3, r3, #14
   3cb2c:	bf48      	it	mi
   3cb2e:	6803      	ldrmi	r3, [r0, #0]
   3cb30:	4611      	mov	r1, r2
   3cb32:	bf44      	itt	mi
   3cb34:	f423 3300 	bicmi.w	r3, r3, #131072	; 0x20000
   3cb38:	6003      	strmi	r3, [r0, #0]
   3cb3a:	230e      	movs	r3, #14
   3cb3c:	4630      	mov	r0, r6
   3cb3e:	9300      	str	r3, [sp, #0]
   3cb40:	2306      	movs	r3, #6
   3cb42:	f7ff ff75 	bl	3ca30 <send_message>
   3cb46:	4605      	mov	r5, r0
   3cb48:	b130      	cbz	r0, 3cb58 <at_interface_close+0x44>
   3cb4a:	6027      	str	r7, [r4, #0]
   3cb4c:	4628      	mov	r0, r5
   3cb4e:	f7ec fb79 	bl	29244 <nrf_modem_os_errno_set>
   3cb52:	f04f 35ff 	mov.w	r5, #4294967295
   3cb56:	e002      	b.n	3cb5e <at_interface_close+0x4a>
   3cb58:	4630      	mov	r0, r6
   3cb5a:	f7f3 fc0d 	bl	30378 <interface_socket_free>
   3cb5e:	4628      	mov	r0, r5
   3cb60:	b003      	add	sp, #12
   3cb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3cb64:	2516      	movs	r5, #22
   3cb66:	e7f1      	b.n	3cb4c <at_interface_close+0x38>

0003cb68 <at_interface_read>:
   3cb68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3cb6c:	b087      	sub	sp, #28
   3cb6e:	4680      	mov	r8, r0
   3cb70:	460e      	mov	r6, r1
   3cb72:	4614      	mov	r4, r2
   3cb74:	461f      	mov	r7, r3
   3cb76:	f7f3 fc63 	bl	30440 <interface_socket_from_handle_get>
   3cb7a:	4605      	mov	r5, r0
   3cb7c:	2800      	cmp	r0, #0
   3cb7e:	d045      	beq.n	3cc0c <at_interface_read+0xa4>
   3cb80:	2300      	movs	r3, #0
   3cb82:	e9cd 6402 	strd	r6, r4, [sp, #8]
   3cb86:	9304      	str	r3, [sp, #16]
   3cb88:	b117      	cbz	r7, 3cb90 <at_interface_read+0x28>
   3cb8a:	f017 0f2a 	tst.w	r7, #42	; 0x2a
   3cb8e:	d022      	beq.n	3cbd6 <at_interface_read+0x6e>
   3cb90:	2400      	movs	r4, #0
   3cb92:	9305      	str	r3, [sp, #20]
   3cb94:	f007 0902 	and.w	r9, r7, #2
   3cb98:	682b      	ldr	r3, [r5, #0]
   3cb9a:	69e8      	ldr	r0, [r5, #28]
   3cb9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3cba0:	602b      	str	r3, [r5, #0]
   3cba2:	6803      	ldr	r3, [r0, #0]
   3cba4:	463a      	mov	r2, r7
   3cba6:	689b      	ldr	r3, [r3, #8]
   3cba8:	a902      	add	r1, sp, #8
   3cbaa:	4798      	blx	r3
   3cbac:	1e06      	subs	r6, r0, #0
   3cbae:	da1b      	bge.n	3cbe8 <at_interface_read+0x80>
   3cbb0:	f1b9 0f00 	cmp.w	r9, #0
   3cbb4:	d113      	bne.n	3cbde <at_interface_read+0x76>
   3cbb6:	b9bc      	cbnz	r4, 3cbe8 <at_interface_read+0x80>
   3cbb8:	6a2b      	ldr	r3, [r5, #32]
   3cbba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3cbbe:	2b00      	cmp	r3, #0
   3cbc0:	bf08      	it	eq
   3cbc2:	f04f 33ff 	moveq.w	r3, #4294967295
   3cbc6:	4611      	mov	r1, r2
   3cbc8:	9301      	str	r3, [sp, #4]
   3cbca:	4640      	mov	r0, r8
   3cbcc:	ab01      	add	r3, sp, #4
   3cbce:	f7ff ff1f 	bl	3ca10 <at_interface_wait>
   3cbd2:	4604      	mov	r4, r0
   3cbd4:	e7e0      	b.n	3cb98 <at_interface_read+0x30>
   3cbd6:	242d      	movs	r4, #45	; 0x2d
   3cbd8:	f04f 36ff 	mov.w	r6, #4294967295
   3cbdc:	e00f      	b.n	3cbfe <at_interface_read+0x96>
   3cbde:	1c73      	adds	r3, r6, #1
   3cbe0:	d102      	bne.n	3cbe8 <at_interface_read+0x80>
   3cbe2:	2c00      	cmp	r4, #0
   3cbe4:	bf08      	it	eq
   3cbe6:	2423      	moveq	r4, #35	; 0x23
   3cbe8:	69e8      	ldr	r0, [r5, #28]
   3cbea:	6803      	ldr	r3, [r0, #0]
   3cbec:	68db      	ldr	r3, [r3, #12]
   3cbee:	4798      	blx	r3
   3cbf0:	3001      	adds	r0, #1
   3cbf2:	bf1e      	ittt	ne
   3cbf4:	682b      	ldrne	r3, [r5, #0]
   3cbf6:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
   3cbfa:	602b      	strne	r3, [r5, #0]
   3cbfc:	b114      	cbz	r4, 3cc04 <at_interface_read+0x9c>
   3cbfe:	4620      	mov	r0, r4
   3cc00:	f7ec fb20 	bl	29244 <nrf_modem_os_errno_set>
   3cc04:	4630      	mov	r0, r6
   3cc06:	b007      	add	sp, #28
   3cc08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3cc0c:	2416      	movs	r4, #22
   3cc0e:	e7e3      	b.n	3cbd8 <at_interface_read+0x70>

0003cc10 <at_interface_getopt>:
   3cc10:	f7f3 bc5a 	b.w	304c8 <interface_socket_getopt>

0003cc14 <at_interface_setopt>:
   3cc14:	f7f3 bc24 	b.w	30460 <interface_socket_setopt>

0003cc18 <rpc_at_event_handler>:
   3cc18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3cc1a:	4606      	mov	r6, r0
   3cc1c:	68c0      	ldr	r0, [r0, #12]
   3cc1e:	460d      	mov	r5, r1
   3cc20:	f7f3 fc0e 	bl	30440 <interface_socket_from_handle_get>
   3cc24:	4604      	mov	r4, r0
   3cc26:	2800      	cmp	r0, #0
   3cc28:	d03a      	beq.n	3cca0 <rpc_at_event_handler+0x88>
   3cc2a:	6803      	ldr	r3, [r0, #0]
   3cc2c:	b29b      	uxth	r3, r3
   3cc2e:	2b01      	cmp	r3, #1
   3cc30:	d104      	bne.n	3cc3c <rpc_at_event_handler+0x24>
   3cc32:	2d02      	cmp	r5, #2
   3cc34:	d11c      	bne.n	3cc70 <rpc_at_event_handler+0x58>
   3cc36:	6005      	str	r5, [r0, #0]
   3cc38:	2000      	movs	r0, #0
   3cc3a:	e02b      	b.n	3cc94 <rpc_at_event_handler+0x7c>
   3cc3c:	6803      	ldr	r3, [r0, #0]
   3cc3e:	b29b      	uxth	r3, r3
   3cc40:	2b0d      	cmp	r3, #13
   3cc42:	d104      	bne.n	3cc4e <rpc_at_event_handler+0x36>
   3cc44:	2d02      	cmp	r5, #2
   3cc46:	d113      	bne.n	3cc70 <rpc_at_event_handler+0x58>
   3cc48:	230e      	movs	r3, #14
   3cc4a:	6023      	str	r3, [r4, #0]
   3cc4c:	e7f4      	b.n	3cc38 <rpc_at_event_handler+0x20>
   3cc4e:	6803      	ldr	r3, [r0, #0]
   3cc50:	b29b      	uxth	r3, r3
   3cc52:	2b02      	cmp	r3, #2
   3cc54:	d10c      	bne.n	3cc70 <rpc_at_event_handler+0x58>
   3cc56:	6803      	ldr	r3, [r0, #0]
   3cc58:	029b      	lsls	r3, r3, #10
   3cc5a:	d509      	bpl.n	3cc70 <rpc_at_event_handler+0x58>
   3cc5c:	2d02      	cmp	r5, #2
   3cc5e:	d107      	bne.n	3cc70 <rpc_at_event_handler+0x58>
   3cc60:	6803      	ldr	r3, [r0, #0]
   3cc62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   3cc66:	6003      	str	r3, [r0, #0]
   3cc68:	6803      	ldr	r3, [r0, #0]
   3cc6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3cc6e:	e7ec      	b.n	3cc4a <rpc_at_event_handler+0x32>
   3cc70:	3d03      	subs	r5, #3
   3cc72:	2d01      	cmp	r5, #1
   3cc74:	d8e0      	bhi.n	3cc38 <rpc_at_event_handler+0x20>
   3cc76:	2500      	movs	r5, #0
   3cc78:	6833      	ldr	r3, [r6, #0]
   3cc7a:	69e0      	ldr	r0, [r4, #28]
   3cc7c:	9300      	str	r3, [sp, #0]
   3cc7e:	6873      	ldr	r3, [r6, #4]
   3cc80:	4669      	mov	r1, sp
   3cc82:	9301      	str	r3, [sp, #4]
   3cc84:	6803      	ldr	r3, [r0, #0]
   3cc86:	e9cd 5502 	strd	r5, r5, [sp, #8]
   3cc8a:	685b      	ldr	r3, [r3, #4]
   3cc8c:	4798      	blx	r3
   3cc8e:	3001      	adds	r0, #1
   3cc90:	d102      	bne.n	3cc98 <rpc_at_event_handler+0x80>
   3cc92:	2002      	movs	r0, #2
   3cc94:	b004      	add	sp, #16
   3cc96:	bd70      	pop	{r4, r5, r6, pc}
   3cc98:	6823      	ldr	r3, [r4, #0]
   3cc9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3cc9e:	e7d4      	b.n	3cc4a <rpc_at_event_handler+0x32>
   3cca0:	6830      	ldr	r0, [r6, #0]
   3cca2:	2800      	cmp	r0, #0
   3cca4:	d0c8      	beq.n	3cc38 <rpc_at_event_handler+0x20>
   3cca6:	f7ff f9d4 	bl	3c052 <rpc_at_client_data_free>
   3ccaa:	e7c5      	b.n	3cc38 <rpc_at_event_handler+0x20>

0003ccac <packet_free_cb>:
   3ccac:	b510      	push	{r4, lr}
   3ccae:	4604      	mov	r4, r0
   3ccb0:	b118      	cbz	r0, 3ccba <packet_free_cb+0xe>
   3ccb2:	6800      	ldr	r0, [r0, #0]
   3ccb4:	b108      	cbz	r0, 3ccba <packet_free_cb+0xe>
   3ccb6:	f7ff fa30 	bl	3c11a <rpc_gnss_client_data_free>
   3ccba:	68a0      	ldr	r0, [r4, #8]
   3ccbc:	b118      	cbz	r0, 3ccc6 <packet_free_cb+0x1a>
   3ccbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ccc2:	f7ec bcb9 	b.w	29638 <nrf_modem_os_free>
   3ccc6:	bd10      	pop	{r4, pc}

0003ccc8 <spaces_remove>:
   3ccc8:	2200      	movs	r2, #0
   3ccca:	b510      	push	{r4, lr}
   3cccc:	1e44      	subs	r4, r0, #1
   3ccce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3ccd2:	1881      	adds	r1, r0, r2
   3ccd4:	b90b      	cbnz	r3, 3ccda <spaces_remove+0x12>
   3ccd6:	700b      	strb	r3, [r1, #0]
   3ccd8:	bd10      	pop	{r4, pc}
   3ccda:	2b20      	cmp	r3, #32
   3ccdc:	bf1c      	itt	ne
   3ccde:	700b      	strbne	r3, [r1, #0]
   3cce0:	3201      	addne	r2, #1
   3cce2:	e7f4      	b.n	3ccce <spaces_remove+0x6>

0003cce4 <ok_rsp_parser>:
   3cce4:	2000      	movs	r0, #0
   3cce6:	4770      	bx	lr

0003cce8 <context_query_parser>:
   3cce8:	f06f 0004 	mvn.w	r0, #4
   3ccec:	4770      	bx	lr

0003ccee <null_handler_init>:
   3ccee:	2000      	movs	r0, #0
   3ccf0:	4770      	bx	lr

0003ccf2 <null_handler_put>:
   3ccf2:	b510      	push	{r4, lr}
   3ccf4:	460c      	mov	r4, r1
   3ccf6:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3ccfa:	4620      	mov	r0, r4
   3ccfc:	4798      	blx	r3
   3ccfe:	6860      	ldr	r0, [r4, #4]
   3cd00:	bd10      	pop	{r4, pc}

0003cd02 <null_handler_get>:
   3cd02:	f04f 30ff 	mov.w	r0, #4294967295
   3cd06:	4770      	bx	lr

0003cd08 <null_handler_available>:
   3cd08:	f04f 30ff 	mov.w	r0, #4294967295
   3cd0c:	4770      	bx	lr

0003cd0e <null_handler_flush>:
   3cd0e:	2000      	movs	r0, #0
   3cd10:	4770      	bx	lr

0003cd12 <null_handler_free>:
   3cd12:	4770      	bx	lr

0003cd14 <stream_handler_free_packet>:
   3cd14:	b530      	push	{r4, r5, lr}
   3cd16:	4605      	mov	r5, r0
   3cd18:	b085      	sub	sp, #20
   3cd1a:	68c0      	ldr	r0, [r0, #12]
   3cd1c:	f000 fb13 	bl	3d346 <linked_list_pop>
   3cd20:	4604      	mov	r4, r0
   3cd22:	b170      	cbz	r0, 3cd42 <stream_handler_free_packet+0x2e>
   3cd24:	6843      	ldr	r3, [r0, #4]
   3cd26:	9300      	str	r3, [sp, #0]
   3cd28:	6883      	ldr	r3, [r0, #8]
   3cd2a:	9301      	str	r3, [sp, #4]
   3cd2c:	6903      	ldr	r3, [r0, #16]
   3cd2e:	9302      	str	r3, [sp, #8]
   3cd30:	68c3      	ldr	r3, [r0, #12]
   3cd32:	4668      	mov	r0, sp
   3cd34:	9303      	str	r3, [sp, #12]
   3cd36:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3cd3a:	4798      	blx	r3
   3cd3c:	4620      	mov	r0, r4
   3cd3e:	f7ec fc7b 	bl	29638 <nrf_modem_os_free>
   3cd42:	b005      	add	sp, #20
   3cd44:	bd30      	pop	{r4, r5, pc}

0003cd46 <stream_handler_init>:
   3cd46:	b510      	push	{r4, lr}
   3cd48:	4604      	mov	r4, r0
   3cd4a:	200c      	movs	r0, #12
   3cd4c:	f7ec fc6c 	bl	29628 <nrf_modem_os_alloc>
   3cd50:	60e0      	str	r0, [r4, #12]
   3cd52:	b128      	cbz	r0, 3cd60 <stream_handler_init+0x1a>
   3cd54:	2300      	movs	r3, #0
   3cd56:	6123      	str	r3, [r4, #16]
   3cd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3cd5c:	f000 bad7 	b.w	3d30e <linked_list_init>
   3cd60:	200c      	movs	r0, #12
   3cd62:	bd10      	pop	{r4, pc}

0003cd64 <stream_handler_put>:
   3cd64:	b570      	push	{r4, r5, r6, lr}
   3cd66:	4606      	mov	r6, r0
   3cd68:	2014      	movs	r0, #20
   3cd6a:	460d      	mov	r5, r1
   3cd6c:	f7ec fc5c 	bl	29628 <nrf_modem_os_alloc>
   3cd70:	4604      	mov	r4, r0
   3cd72:	b178      	cbz	r0, 3cd94 <stream_handler_put+0x30>
   3cd74:	682b      	ldr	r3, [r5, #0]
   3cd76:	4601      	mov	r1, r0
   3cd78:	6043      	str	r3, [r0, #4]
   3cd7a:	686b      	ldr	r3, [r5, #4]
   3cd7c:	6083      	str	r3, [r0, #8]
   3cd7e:	68eb      	ldr	r3, [r5, #12]
   3cd80:	60c3      	str	r3, [r0, #12]
   3cd82:	68ab      	ldr	r3, [r5, #8]
   3cd84:	6103      	str	r3, [r0, #16]
   3cd86:	68f0      	ldr	r0, [r6, #12]
   3cd88:	f000 faca 	bl	3d320 <linked_list_push>
   3cd8c:	b128      	cbz	r0, 3cd9a <stream_handler_put+0x36>
   3cd8e:	4620      	mov	r0, r4
   3cd90:	f7ec fc52 	bl	29638 <nrf_modem_os_free>
   3cd94:	f04f 30ff 	mov.w	r0, #4294967295
   3cd98:	e000      	b.n	3cd9c <stream_handler_put+0x38>
   3cd9a:	6868      	ldr	r0, [r5, #4]
   3cd9c:	bd70      	pop	{r4, r5, r6, pc}

0003cd9e <stream_handler_get>:
   3cd9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cda2:	4606      	mov	r6, r0
   3cda4:	b085      	sub	sp, #20
   3cda6:	68c0      	ldr	r0, [r0, #12]
   3cda8:	468a      	mov	sl, r1
   3cdaa:	4617      	mov	r7, r2
   3cdac:	f000 fad5 	bl	3d35a <linked_list_peek>
   3cdb0:	4604      	mov	r4, r0
   3cdb2:	2800      	cmp	r0, #0
   3cdb4:	d055      	beq.n	3ce62 <stream_handler_get+0xc4>
   3cdb6:	f8da 0008 	ldr.w	r0, [sl, #8]
   3cdba:	2800      	cmp	r0, #0
   3cdbc:	d049      	beq.n	3ce52 <stream_handler_get+0xb4>
   3cdbe:	6921      	ldr	r1, [r4, #16]
   3cdc0:	2900      	cmp	r1, #0
   3cdc2:	d046      	beq.n	3ce52 <stream_handler_get+0xb4>
   3cdc4:	68e2      	ldr	r2, [r4, #12]
   3cdc6:	2a00      	cmp	r2, #0
   3cdc8:	d043      	beq.n	3ce52 <stream_handler_get+0xb4>
   3cdca:	f8da 500c 	ldr.w	r5, [sl, #12]
   3cdce:	42aa      	cmp	r2, r5
   3cdd0:	bf28      	it	cs
   3cdd2:	462a      	movcs	r2, r5
   3cdd4:	f8ca 200c 	str.w	r2, [sl, #12]
   3cdd8:	f000 fc48 	bl	3d66c <memcpy>
   3cddc:	2500      	movs	r5, #0
   3cdde:	f8da 3004 	ldr.w	r3, [sl, #4]
   3cde2:	6931      	ldr	r1, [r6, #16]
   3cde4:	9301      	str	r3, [sp, #4]
   3cde6:	f8da 3000 	ldr.w	r3, [sl]
   3cdea:	9302      	str	r3, [sp, #8]
   3cdec:	f007 0320 	and.w	r3, r7, #32
   3cdf0:	9303      	str	r3, [sp, #12]
   3cdf2:	f007 0708 	and.w	r7, r7, #8
   3cdf6:	9b01      	ldr	r3, [sp, #4]
   3cdf8:	42ab      	cmp	r3, r5
   3cdfa:	d924      	bls.n	3ce46 <stream_handler_get+0xa8>
   3cdfc:	68a2      	ldr	r2, [r4, #8]
   3cdfe:	9b01      	ldr	r3, [sp, #4]
   3ce00:	eba2 0801 	sub.w	r8, r2, r1
   3ce04:	eba3 0b05 	sub.w	fp, r3, r5
   3ce08:	f8da 2000 	ldr.w	r2, [sl]
   3ce0c:	45d8      	cmp	r8, fp
   3ce0e:	46c1      	mov	r9, r8
   3ce10:	bf28      	it	cs
   3ce12:	46d9      	movcs	r9, fp
   3ce14:	b142      	cbz	r2, 3ce28 <stream_handler_get+0x8a>
   3ce16:	9b03      	ldr	r3, [sp, #12]
   3ce18:	b933      	cbnz	r3, 3ce28 <stream_handler_get+0x8a>
   3ce1a:	6860      	ldr	r0, [r4, #4]
   3ce1c:	9b02      	ldr	r3, [sp, #8]
   3ce1e:	4401      	add	r1, r0
   3ce20:	464a      	mov	r2, r9
   3ce22:	1958      	adds	r0, r3, r5
   3ce24:	f000 fc22 	bl	3d66c <memcpy>
   3ce28:	4620      	mov	r0, r4
   3ce2a:	f000 fa9d 	bl	3d368 <linked_list_get_next>
   3ce2e:	4604      	mov	r4, r0
   3ce30:	b92f      	cbnz	r7, 3ce3e <stream_handler_get+0xa0>
   3ce32:	45d8      	cmp	r8, fp
   3ce34:	d811      	bhi.n	3ce5a <stream_handler_get+0xbc>
   3ce36:	4630      	mov	r0, r6
   3ce38:	f7ff ff6c 	bl	3cd14 <stream_handler_free_packet>
   3ce3c:	6137      	str	r7, [r6, #16]
   3ce3e:	2100      	movs	r1, #0
   3ce40:	444d      	add	r5, r9
   3ce42:	2c00      	cmp	r4, #0
   3ce44:	d1d7      	bne.n	3cdf6 <stream_handler_get+0x58>
   3ce46:	4628      	mov	r0, r5
   3ce48:	f8ca 5004 	str.w	r5, [sl, #4]
   3ce4c:	b005      	add	sp, #20
   3ce4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ce52:	2200      	movs	r2, #0
   3ce54:	f8ca 200c 	str.w	r2, [sl, #12]
   3ce58:	e7c0      	b.n	3cddc <stream_handler_get+0x3e>
   3ce5a:	6932      	ldr	r2, [r6, #16]
   3ce5c:	444a      	add	r2, r9
   3ce5e:	6132      	str	r2, [r6, #16]
   3ce60:	e7ed      	b.n	3ce3e <stream_handler_get+0xa0>
   3ce62:	f04f 30ff 	mov.w	r0, #4294967295
   3ce66:	e7f1      	b.n	3ce4c <stream_handler_get+0xae>

0003ce68 <stream_handler_available>:
   3ce68:	b510      	push	{r4, lr}
   3ce6a:	4604      	mov	r4, r0
   3ce6c:	68c0      	ldr	r0, [r0, #12]
   3ce6e:	f000 fa74 	bl	3d35a <linked_list_peek>
   3ce72:	b150      	cbz	r0, 3ce8a <stream_handler_available+0x22>
   3ce74:	6924      	ldr	r4, [r4, #16]
   3ce76:	4264      	negs	r4, r4
   3ce78:	6883      	ldr	r3, [r0, #8]
   3ce7a:	441c      	add	r4, r3
   3ce7c:	f000 fa74 	bl	3d368 <linked_list_get_next>
   3ce80:	2800      	cmp	r0, #0
   3ce82:	d1f9      	bne.n	3ce78 <stream_handler_available+0x10>
   3ce84:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   3ce88:	bd10      	pop	{r4, pc}
   3ce8a:	f04f 30ff 	mov.w	r0, #4294967295
   3ce8e:	e7fb      	b.n	3ce88 <stream_handler_available+0x20>

0003ce90 <stream_handler_flush>:
   3ce90:	68c3      	ldr	r3, [r0, #12]
   3ce92:	b510      	push	{r4, lr}
   3ce94:	4604      	mov	r4, r0
   3ce96:	b923      	cbnz	r3, 3cea2 <stream_handler_flush+0x12>
   3ce98:	2016      	movs	r0, #22
   3ce9a:	e007      	b.n	3ceac <stream_handler_flush+0x1c>
   3ce9c:	4620      	mov	r0, r4
   3ce9e:	f7ff ff39 	bl	3cd14 <stream_handler_free_packet>
   3cea2:	68e0      	ldr	r0, [r4, #12]
   3cea4:	f000 fa5e 	bl	3d364 <linked_list_size_get>
   3cea8:	2800      	cmp	r0, #0
   3ceaa:	d1f7      	bne.n	3ce9c <stream_handler_flush+0xc>
   3ceac:	bd10      	pop	{r4, pc}

0003ceae <stream_handler_free>:
   3ceae:	68c3      	ldr	r3, [r0, #12]
   3ceb0:	b510      	push	{r4, lr}
   3ceb2:	4604      	mov	r4, r0
   3ceb4:	b133      	cbz	r3, 3cec4 <stream_handler_free+0x16>
   3ceb6:	f7ff ffeb 	bl	3ce90 <stream_handler_flush>
   3ceba:	68e0      	ldr	r0, [r4, #12]
   3cebc:	f7ec fbbc 	bl	29638 <nrf_modem_os_free>
   3cec0:	2300      	movs	r3, #0
   3cec2:	60e3      	str	r3, [r4, #12]
   3cec4:	bd10      	pop	{r4, pc}

0003cec6 <datagram_handler_free_packet>:
   3cec6:	b530      	push	{r4, r5, lr}
   3cec8:	4605      	mov	r5, r0
   3ceca:	b085      	sub	sp, #20
   3cecc:	68c0      	ldr	r0, [r0, #12]
   3cece:	f000 fa3a 	bl	3d346 <linked_list_pop>
   3ced2:	4604      	mov	r4, r0
   3ced4:	b170      	cbz	r0, 3cef4 <datagram_handler_free_packet+0x2e>
   3ced6:	6843      	ldr	r3, [r0, #4]
   3ced8:	9300      	str	r3, [sp, #0]
   3ceda:	6883      	ldr	r3, [r0, #8]
   3cedc:	9301      	str	r3, [sp, #4]
   3cede:	6903      	ldr	r3, [r0, #16]
   3cee0:	9302      	str	r3, [sp, #8]
   3cee2:	68c3      	ldr	r3, [r0, #12]
   3cee4:	4668      	mov	r0, sp
   3cee6:	9303      	str	r3, [sp, #12]
   3cee8:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3ceec:	4798      	blx	r3
   3ceee:	4620      	mov	r0, r4
   3cef0:	f7ec fba2 	bl	29638 <nrf_modem_os_free>
   3cef4:	b005      	add	sp, #20
   3cef6:	bd30      	pop	{r4, r5, pc}

0003cef8 <datagram_handler_init>:
   3cef8:	b510      	push	{r4, lr}
   3cefa:	4604      	mov	r4, r0
   3cefc:	200c      	movs	r0, #12
   3cefe:	f7ec fb93 	bl	29628 <nrf_modem_os_alloc>
   3cf02:	60e0      	str	r0, [r4, #12]
   3cf04:	b118      	cbz	r0, 3cf0e <datagram_handler_init+0x16>
   3cf06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3cf0a:	f000 ba00 	b.w	3d30e <linked_list_init>
   3cf0e:	200c      	movs	r0, #12
   3cf10:	bd10      	pop	{r4, pc}

0003cf12 <datagram_handler_put>:
   3cf12:	b570      	push	{r4, r5, r6, lr}
   3cf14:	4606      	mov	r6, r0
   3cf16:	2014      	movs	r0, #20
   3cf18:	460d      	mov	r5, r1
   3cf1a:	f7ec fb85 	bl	29628 <nrf_modem_os_alloc>
   3cf1e:	4604      	mov	r4, r0
   3cf20:	b178      	cbz	r0, 3cf42 <datagram_handler_put+0x30>
   3cf22:	682b      	ldr	r3, [r5, #0]
   3cf24:	4601      	mov	r1, r0
   3cf26:	6043      	str	r3, [r0, #4]
   3cf28:	686b      	ldr	r3, [r5, #4]
   3cf2a:	6083      	str	r3, [r0, #8]
   3cf2c:	68eb      	ldr	r3, [r5, #12]
   3cf2e:	60c3      	str	r3, [r0, #12]
   3cf30:	68ab      	ldr	r3, [r5, #8]
   3cf32:	6103      	str	r3, [r0, #16]
   3cf34:	68f0      	ldr	r0, [r6, #12]
   3cf36:	f000 f9f3 	bl	3d320 <linked_list_push>
   3cf3a:	b128      	cbz	r0, 3cf48 <datagram_handler_put+0x36>
   3cf3c:	4620      	mov	r0, r4
   3cf3e:	f7ec fb7b 	bl	29638 <nrf_modem_os_free>
   3cf42:	f04f 30ff 	mov.w	r0, #4294967295
   3cf46:	e000      	b.n	3cf4a <datagram_handler_put+0x38>
   3cf48:	6868      	ldr	r0, [r5, #4]
   3cf4a:	bd70      	pop	{r4, r5, r6, pc}

0003cf4c <datagram_handler_get>:
   3cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3cf4e:	4607      	mov	r7, r0
   3cf50:	68c0      	ldr	r0, [r0, #12]
   3cf52:	460c      	mov	r4, r1
   3cf54:	4616      	mov	r6, r2
   3cf56:	f000 fa00 	bl	3d35a <linked_list_peek>
   3cf5a:	4605      	mov	r5, r0
   3cf5c:	b328      	cbz	r0, 3cfaa <datagram_handler_get+0x5e>
   3cf5e:	6882      	ldr	r2, [r0, #8]
   3cf60:	6863      	ldr	r3, [r4, #4]
   3cf62:	6820      	ldr	r0, [r4, #0]
   3cf64:	429a      	cmp	r2, r3
   3cf66:	bf28      	it	cs
   3cf68:	461a      	movcs	r2, r3
   3cf6a:	6062      	str	r2, [r4, #4]
   3cf6c:	b110      	cbz	r0, 3cf74 <datagram_handler_get+0x28>
   3cf6e:	6869      	ldr	r1, [r5, #4]
   3cf70:	f000 fb7c 	bl	3d66c <memcpy>
   3cf74:	68a0      	ldr	r0, [r4, #8]
   3cf76:	b1a8      	cbz	r0, 3cfa4 <datagram_handler_get+0x58>
   3cf78:	6929      	ldr	r1, [r5, #16]
   3cf7a:	b199      	cbz	r1, 3cfa4 <datagram_handler_get+0x58>
   3cf7c:	68ea      	ldr	r2, [r5, #12]
   3cf7e:	b18a      	cbz	r2, 3cfa4 <datagram_handler_get+0x58>
   3cf80:	68e3      	ldr	r3, [r4, #12]
   3cf82:	429a      	cmp	r2, r3
   3cf84:	bf28      	it	cs
   3cf86:	461a      	movcs	r2, r3
   3cf88:	60e2      	str	r2, [r4, #12]
   3cf8a:	f000 fb6f 	bl	3d66c <memcpy>
   3cf8e:	0732      	lsls	r2, r6, #28
   3cf90:	68ad      	ldr	r5, [r5, #8]
   3cf92:	d402      	bmi.n	3cf9a <datagram_handler_get+0x4e>
   3cf94:	4638      	mov	r0, r7
   3cf96:	f7ff ff96 	bl	3cec6 <datagram_handler_free_packet>
   3cf9a:	06b3      	lsls	r3, r6, #26
   3cf9c:	bf4c      	ite	mi
   3cf9e:	4628      	movmi	r0, r5
   3cfa0:	6860      	ldrpl	r0, [r4, #4]
   3cfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3cfa4:	2300      	movs	r3, #0
   3cfa6:	60e3      	str	r3, [r4, #12]
   3cfa8:	e7f1      	b.n	3cf8e <datagram_handler_get+0x42>
   3cfaa:	f04f 30ff 	mov.w	r0, #4294967295
   3cfae:	e7f8      	b.n	3cfa2 <datagram_handler_get+0x56>

0003cfb0 <datagram_handler_available>:
   3cfb0:	b508      	push	{r3, lr}
   3cfb2:	68c0      	ldr	r0, [r0, #12]
   3cfb4:	f000 f9d1 	bl	3d35a <linked_list_peek>
   3cfb8:	b108      	cbz	r0, 3cfbe <datagram_handler_available+0xe>
   3cfba:	6880      	ldr	r0, [r0, #8]
   3cfbc:	bd08      	pop	{r3, pc}
   3cfbe:	f04f 30ff 	mov.w	r0, #4294967295
   3cfc2:	e7fb      	b.n	3cfbc <datagram_handler_available+0xc>

0003cfc4 <datagram_handler_flush>:
   3cfc4:	68c3      	ldr	r3, [r0, #12]
   3cfc6:	b510      	push	{r4, lr}
   3cfc8:	4604      	mov	r4, r0
   3cfca:	b923      	cbnz	r3, 3cfd6 <datagram_handler_flush+0x12>
   3cfcc:	2016      	movs	r0, #22
   3cfce:	e007      	b.n	3cfe0 <datagram_handler_flush+0x1c>
   3cfd0:	4620      	mov	r0, r4
   3cfd2:	f7ff ff78 	bl	3cec6 <datagram_handler_free_packet>
   3cfd6:	68e0      	ldr	r0, [r4, #12]
   3cfd8:	f000 f9c4 	bl	3d364 <linked_list_size_get>
   3cfdc:	2800      	cmp	r0, #0
   3cfde:	d1f7      	bne.n	3cfd0 <datagram_handler_flush+0xc>
   3cfe0:	bd10      	pop	{r4, pc}

0003cfe2 <datagram_handler_free>:
   3cfe2:	68c3      	ldr	r3, [r0, #12]
   3cfe4:	b510      	push	{r4, lr}
   3cfe6:	4604      	mov	r4, r0
   3cfe8:	b133      	cbz	r3, 3cff8 <datagram_handler_free+0x16>
   3cfea:	f7ff ffeb 	bl	3cfc4 <datagram_handler_flush>
   3cfee:	68e0      	ldr	r0, [r4, #12]
   3cff0:	f7ec fb22 	bl	29638 <nrf_modem_os_free>
   3cff4:	2300      	movs	r3, #0
   3cff6:	60e3      	str	r3, [r4, #12]
   3cff8:	bd10      	pop	{r4, pc}

0003cffa <packet_handler_delete>:
   3cffa:	b510      	push	{r4, lr}
   3cffc:	4604      	mov	r4, r0
   3cffe:	6803      	ldr	r3, [r0, #0]
   3d000:	691b      	ldr	r3, [r3, #16]
   3d002:	4798      	blx	r3
   3d004:	6823      	ldr	r3, [r4, #0]
   3d006:	4620      	mov	r0, r4
   3d008:	695b      	ldr	r3, [r3, #20]
   3d00a:	4798      	blx	r3
   3d00c:	4620      	mov	r0, r4
   3d00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d012:	f7ec bb11 	b.w	29638 <nrf_modem_os_free>

0003d016 <nrf_modem_recoverable_error_handler>:
   3d016:	4770      	bx	lr

0003d018 <nrf_modem_platform_error_handler>:
   3d018:	b508      	push	{r3, lr}
   3d01a:	f7ff fffc 	bl	3d016 <nrf_modem_recoverable_error_handler>
   3d01e:	bd08      	pop	{r3, pc}

0003d020 <unimplemented_method>:
   3d020:	b40f      	push	{r0, r1, r2, r3}
   3d022:	b508      	push	{r3, lr}
   3d024:	202d      	movs	r0, #45	; 0x2d
   3d026:	f7ec f90d 	bl	29244 <nrf_modem_os_errno_set>
   3d02a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3d02e:	f04f 30ff 	mov.w	r0, #4294967295
   3d032:	b004      	add	sp, #16
   3d034:	4770      	bx	lr

0003d036 <rpc_transport_ipc_fault_handler>:
   3d036:	f7ff bfef 	b.w	3d018 <nrf_modem_platform_error_handler>

0003d03a <nrf_modem_platform_init>:
   3d03a:	b513      	push	{r0, r1, r4, lr}
   3d03c:	4604      	mov	r4, r0
   3d03e:	f7ec fb0f 	bl	29660 <nrf_modem_os_init>
   3d042:	6a23      	ldr	r3, [r4, #32]
   3d044:	4668      	mov	r0, sp
   3d046:	9400      	str	r4, [sp, #0]
   3d048:	f88d 3004 	strb.w	r3, [sp, #4]
   3d04c:	f7f2 fffe 	bl	3004c <rpc_transport_ipc_init>
   3d050:	b920      	cbnz	r0, 3d05c <nrf_modem_platform_init+0x22>
   3d052:	f7f3 f95f 	bl	30314 <interface_init>
   3d056:	b118      	cbz	r0, 3d060 <nrf_modem_platform_init+0x26>
   3d058:	f04f 30ff 	mov.w	r0, #4294967295
   3d05c:	b002      	add	sp, #8
   3d05e:	bd10      	pop	{r4, pc}
   3d060:	f7f4 fed4 	bl	31e0c <at_interface_init>
   3d064:	2800      	cmp	r0, #0
   3d066:	d1f7      	bne.n	3d058 <nrf_modem_platform_init+0x1e>
   3d068:	f7f4 ff36 	bl	31ed8 <nrf_modem_at_init>
   3d06c:	2800      	cmp	r0, #0
   3d06e:	d1f5      	bne.n	3d05c <nrf_modem_platform_init+0x22>
   3d070:	f7f3 fac2 	bl	305f8 <ip_interface_init>
   3d074:	2800      	cmp	r0, #0
   3d076:	d1ef      	bne.n	3d058 <nrf_modem_platform_init+0x1e>
   3d078:	f7f4 fb28 	bl	316cc <tls_interface_init>
   3d07c:	2800      	cmp	r0, #0
   3d07e:	d1eb      	bne.n	3d058 <nrf_modem_platform_init+0x1e>
   3d080:	f7f4 ffe2 	bl	32048 <mfu_interface_init>
   3d084:	2800      	cmp	r0, #0
   3d086:	d1e7      	bne.n	3d058 <nrf_modem_platform_init+0x1e>
   3d088:	f7f5 fed8 	bl	32e3c <pdn_interface_init>
   3d08c:	2800      	cmp	r0, #0
   3d08e:	d1e3      	bne.n	3d058 <nrf_modem_platform_init+0x1e>
   3d090:	f7f5 fd4e 	bl	32b30 <gnss_interface_init>
   3d094:	3800      	subs	r0, #0
   3d096:	bf18      	it	ne
   3d098:	2001      	movne	r0, #1
   3d09a:	4240      	negs	r0, r0
   3d09c:	e7de      	b.n	3d05c <nrf_modem_platform_init+0x22>

0003d09e <internal_poll>:
   3d09e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3d0a2:	2600      	movs	r6, #0
   3d0a4:	4688      	mov	r8, r1
   3d0a6:	4604      	mov	r4, r0
   3d0a8:	4637      	mov	r7, r6
   3d0aa:	4546      	cmp	r6, r8
   3d0ac:	d103      	bne.n	3d0b6 <internal_poll+0x18>
   3d0ae:	4638      	mov	r0, r7
   3d0b0:	b002      	add	sp, #8
   3d0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3d0b6:	88a5      	ldrh	r5, [r4, #4]
   3d0b8:	6820      	ldr	r0, [r4, #0]
   3d0ba:	a901      	add	r1, sp, #4
   3d0bc:	f7ff f965 	bl	3c38a <interface_socket_event_get>
   3d0c0:	f005 0503 	and.w	r5, r5, #3
   3d0c4:	9b01      	ldr	r3, [sp, #4]
   3d0c6:	f045 051c 	orr.w	r5, r5, #28
   3d0ca:	401d      	ands	r5, r3
   3d0cc:	6820      	ldr	r0, [r4, #0]
   3d0ce:	80e5      	strh	r5, [r4, #6]
   3d0d0:	f7f3 f9b6 	bl	30440 <interface_socket_from_handle_get>
   3d0d4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   3d0d8:	b168      	cbz	r0, 3d0f6 <internal_poll+0x58>
   3d0da:	071a      	lsls	r2, r3, #28
   3d0dc:	d50b      	bpl.n	3d0f6 <internal_poll+0x58>
   3d0de:	6942      	ldr	r2, [r0, #20]
   3d0e0:	2a01      	cmp	r2, #1
   3d0e2:	d003      	beq.n	3d0ec <internal_poll+0x4e>
   3d0e4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   3d0e8:	2a01      	cmp	r2, #1
   3d0ea:	d802      	bhi.n	3d0f2 <internal_poll+0x54>
   3d0ec:	f043 0301 	orr.w	r3, r3, #1
   3d0f0:	80e3      	strh	r3, [r4, #6]
   3d0f2:	3701      	adds	r7, #1
   3d0f4:	e001      	b.n	3d0fa <internal_poll+0x5c>
   3d0f6:	2b00      	cmp	r3, #0
   3d0f8:	d1fb      	bne.n	3d0f2 <internal_poll+0x54>
   3d0fa:	3601      	adds	r6, #1
   3d0fc:	3408      	adds	r4, #8
   3d0fe:	e7d4      	b.n	3d0aa <internal_poll+0xc>

0003d100 <nrf_modem_platform_getaddrinfo>:
   3d100:	f7f3 bef0 	b.w	30ee4 <ip_interface_getaddrinfo>

0003d104 <nrf_modem_platform_freeaddrinfo>:
   3d104:	f7f4 b808 	b.w	31118 <ip_interface_freeaddrinfo>

0003d108 <nrf_modem_platform_poll>:
   3d108:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d10a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   3d10e:	2909      	cmp	r1, #9
   3d110:	4605      	mov	r5, r0
   3d112:	460e      	mov	r6, r1
   3d114:	9201      	str	r2, [sp, #4]
   3d116:	d906      	bls.n	3d126 <nrf_modem_platform_poll+0x1e>
   3d118:	2016      	movs	r0, #22
   3d11a:	f7ec f893 	bl	29244 <nrf_modem_os_errno_set>
   3d11e:	f04f 30ff 	mov.w	r0, #4294967295
   3d122:	b002      	add	sp, #8
   3d124:	bd70      	pop	{r4, r5, r6, pc}
   3d126:	b910      	cbnz	r0, 3d12e <nrf_modem_platform_poll+0x26>
   3d128:	b109      	cbz	r1, 3d12e <nrf_modem_platform_poll+0x26>
   3d12a:	200e      	movs	r0, #14
   3d12c:	e7f5      	b.n	3d11a <nrf_modem_platform_poll+0x12>
   3d12e:	4631      	mov	r1, r6
   3d130:	4628      	mov	r0, r5
   3d132:	f7ff ffb4 	bl	3d09e <internal_poll>
   3d136:	2400      	movs	r4, #0
   3d138:	2800      	cmp	r0, #0
   3d13a:	d1f2      	bne.n	3d122 <nrf_modem_platform_poll+0x1a>
   3d13c:	2c00      	cmp	r4, #0
   3d13e:	d1f0      	bne.n	3d122 <nrf_modem_platform_poll+0x1a>
   3d140:	4628      	mov	r0, r5
   3d142:	a901      	add	r1, sp, #4
   3d144:	f7eb ffc8 	bl	290d8 <nrf_modem_os_timedwait>
   3d148:	4604      	mov	r4, r0
   3d14a:	b118      	cbz	r0, 3d154 <nrf_modem_platform_poll+0x4c>
   3d14c:	283c      	cmp	r0, #60	; 0x3c
   3d14e:	d001      	beq.n	3d154 <nrf_modem_platform_poll+0x4c>
   3d150:	2023      	movs	r0, #35	; 0x23
   3d152:	e7e2      	b.n	3d11a <nrf_modem_platform_poll+0x12>
   3d154:	4631      	mov	r1, r6
   3d156:	4628      	mov	r0, r5
   3d158:	f7ff ffa1 	bl	3d09e <internal_poll>
   3d15c:	e7ec      	b.n	3d138 <nrf_modem_platform_poll+0x30>

0003d15e <nrf_socket>:
   3d15e:	b570      	push	{r4, r5, r6, lr}
   3d160:	4604      	mov	r4, r0
   3d162:	460d      	mov	r5, r1
   3d164:	4616      	mov	r6, r2
   3d166:	f7f6 fad7 	bl	33718 <nrf_modem_platform_af_method_table_get>
   3d16a:	b130      	cbz	r0, 3d17a <nrf_socket+0x1c>
   3d16c:	4632      	mov	r2, r6
   3d16e:	4629      	mov	r1, r5
   3d170:	6803      	ldr	r3, [r0, #0]
   3d172:	4620      	mov	r0, r4
   3d174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d178:	4718      	bx	r3
   3d17a:	f04f 30ff 	mov.w	r0, #4294967295
   3d17e:	bd70      	pop	{r4, r5, r6, pc}

0003d180 <nrf_close>:
   3d180:	b510      	push	{r4, lr}
   3d182:	4604      	mov	r4, r0
   3d184:	f7f6 fb1a 	bl	337bc <nrf_modem_platform_fd_method_table_get>
   3d188:	b120      	cbz	r0, 3d194 <nrf_close+0x14>
   3d18a:	6843      	ldr	r3, [r0, #4]
   3d18c:	4620      	mov	r0, r4
   3d18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d192:	4718      	bx	r3
   3d194:	f04f 30ff 	mov.w	r0, #4294967295
   3d198:	bd10      	pop	{r4, pc}

0003d19a <nrf_sendto>:
   3d19a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d19e:	4604      	mov	r4, r0
   3d1a0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3d1a4:	460d      	mov	r5, r1
   3d1a6:	4616      	mov	r6, r2
   3d1a8:	461f      	mov	r7, r3
   3d1aa:	f7f6 fb07 	bl	337bc <nrf_modem_platform_fd_method_table_get>
   3d1ae:	b158      	cbz	r0, 3d1c8 <nrf_sendto+0x2e>
   3d1b0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3d1b4:	f8d0 e008 	ldr.w	lr, [r0, #8]
   3d1b8:	463b      	mov	r3, r7
   3d1ba:	4632      	mov	r2, r6
   3d1bc:	4629      	mov	r1, r5
   3d1be:	4620      	mov	r0, r4
   3d1c0:	46f4      	mov	ip, lr
   3d1c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d1c6:	4760      	bx	ip
   3d1c8:	f04f 30ff 	mov.w	r0, #4294967295
   3d1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003d1d0 <nrf_recvfrom>:
   3d1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d1d4:	4604      	mov	r4, r0
   3d1d6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3d1da:	460d      	mov	r5, r1
   3d1dc:	4616      	mov	r6, r2
   3d1de:	461f      	mov	r7, r3
   3d1e0:	f7f6 faec 	bl	337bc <nrf_modem_platform_fd_method_table_get>
   3d1e4:	b158      	cbz	r0, 3d1fe <nrf_recvfrom+0x2e>
   3d1e6:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3d1ea:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   3d1ee:	463b      	mov	r3, r7
   3d1f0:	4632      	mov	r2, r6
   3d1f2:	4629      	mov	r1, r5
   3d1f4:	4620      	mov	r0, r4
   3d1f6:	46f4      	mov	ip, lr
   3d1f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d1fc:	4760      	bx	ip
   3d1fe:	f04f 30ff 	mov.w	r0, #4294967295
   3d202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003d206 <nrf_connect>:
   3d206:	b570      	push	{r4, r5, r6, lr}
   3d208:	4604      	mov	r4, r0
   3d20a:	460d      	mov	r5, r1
   3d20c:	4616      	mov	r6, r2
   3d20e:	f7f6 fad5 	bl	337bc <nrf_modem_platform_fd_method_table_get>
   3d212:	b130      	cbz	r0, 3d222 <nrf_connect+0x1c>
   3d214:	4632      	mov	r2, r6
   3d216:	4629      	mov	r1, r5
   3d218:	6943      	ldr	r3, [r0, #20]
   3d21a:	4620      	mov	r0, r4
   3d21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d220:	4718      	bx	r3
   3d222:	f04f 30ff 	mov.w	r0, #4294967295
   3d226:	bd70      	pop	{r4, r5, r6, pc}

0003d228 <nrf_listen>:
   3d228:	b570      	push	{r4, r5, r6, lr}
   3d22a:	4604      	mov	r4, r0
   3d22c:	460d      	mov	r5, r1
   3d22e:	f7f6 fac5 	bl	337bc <nrf_modem_platform_fd_method_table_get>
   3d232:	b128      	cbz	r0, 3d240 <nrf_listen+0x18>
   3d234:	4629      	mov	r1, r5
   3d236:	6983      	ldr	r3, [r0, #24]
   3d238:	4620      	mov	r0, r4
   3d23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d23e:	4718      	bx	r3
   3d240:	f04f 30ff 	mov.w	r0, #4294967295
   3d244:	bd70      	pop	{r4, r5, r6, pc}

0003d246 <nrf_accept>:
   3d246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d24a:	4604      	mov	r4, r0
   3d24c:	460d      	mov	r5, r1
   3d24e:	4616      	mov	r6, r2
   3d250:	f7f6 fab4 	bl	337bc <nrf_modem_platform_fd_method_table_get>
   3d254:	b140      	cbz	r0, 3d268 <nrf_accept+0x22>
   3d256:	69c7      	ldr	r7, [r0, #28]
   3d258:	4632      	mov	r2, r6
   3d25a:	4629      	mov	r1, r5
   3d25c:	4620      	mov	r0, r4
   3d25e:	46bc      	mov	ip, r7
   3d260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3d264:	2300      	movs	r3, #0
   3d266:	4760      	bx	ip
   3d268:	f04f 30ff 	mov.w	r0, #4294967295
   3d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003d270 <nrf_bind>:
   3d270:	b570      	push	{r4, r5, r6, lr}
   3d272:	4604      	mov	r4, r0
   3d274:	460d      	mov	r5, r1
   3d276:	4616      	mov	r6, r2
   3d278:	f7f6 faa0 	bl	337bc <nrf_modem_platform_fd_method_table_get>
   3d27c:	b130      	cbz	r0, 3d28c <nrf_bind+0x1c>
   3d27e:	4632      	mov	r2, r6
   3d280:	4629      	mov	r1, r5
   3d282:	6903      	ldr	r3, [r0, #16]
   3d284:	4620      	mov	r0, r4
   3d286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d28a:	4718      	bx	r3
   3d28c:	f04f 30ff 	mov.w	r0, #4294967295
   3d290:	bd70      	pop	{r4, r5, r6, pc}

0003d292 <nrf_setsockopt>:
   3d292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d296:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3d29a:	4604      	mov	r4, r0
   3d29c:	460d      	mov	r5, r1
   3d29e:	4616      	mov	r6, r2
   3d2a0:	461f      	mov	r7, r3
   3d2a2:	f7f6 fa8b 	bl	337bc <nrf_modem_platform_fd_method_table_get>
   3d2a6:	b158      	cbz	r0, 3d2c0 <nrf_setsockopt+0x2e>
   3d2a8:	f8cd 8018 	str.w	r8, [sp, #24]
   3d2ac:	f8d0 e020 	ldr.w	lr, [r0, #32]
   3d2b0:	463b      	mov	r3, r7
   3d2b2:	4632      	mov	r2, r6
   3d2b4:	4629      	mov	r1, r5
   3d2b6:	4620      	mov	r0, r4
   3d2b8:	46f4      	mov	ip, lr
   3d2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3d2be:	4760      	bx	ip
   3d2c0:	f04f 30ff 	mov.w	r0, #4294967295
   3d2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003d2c8 <nrf_getsockopt>:
   3d2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d2cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3d2d0:	4604      	mov	r4, r0
   3d2d2:	460d      	mov	r5, r1
   3d2d4:	4616      	mov	r6, r2
   3d2d6:	461f      	mov	r7, r3
   3d2d8:	f7f6 fa70 	bl	337bc <nrf_modem_platform_fd_method_table_get>
   3d2dc:	b158      	cbz	r0, 3d2f6 <nrf_getsockopt+0x2e>
   3d2de:	f8cd 8018 	str.w	r8, [sp, #24]
   3d2e2:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   3d2e6:	463b      	mov	r3, r7
   3d2e8:	4632      	mov	r2, r6
   3d2ea:	4629      	mov	r1, r5
   3d2ec:	4620      	mov	r0, r4
   3d2ee:	46f4      	mov	ip, lr
   3d2f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3d2f4:	4760      	bx	ip
   3d2f6:	f04f 30ff 	mov.w	r0, #4294967295
   3d2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003d2fe <nrf_getaddrinfo>:
   3d2fe:	f7ff beff 	b.w	3d100 <nrf_modem_platform_getaddrinfo>

0003d302 <nrf_freeaddrinfo>:
   3d302:	f7ff beff 	b.w	3d104 <nrf_modem_platform_freeaddrinfo>

0003d306 <nrf_poll>:
   3d306:	f7ff beff 	b.w	3d108 <nrf_modem_platform_poll>

0003d30a <nrf_fcntl>:
   3d30a:	f7f6 ba87 	b.w	3381c <nrf_modem_platform_fcntl>

0003d30e <linked_list_init>:
   3d30e:	4603      	mov	r3, r0
   3d310:	b120      	cbz	r0, 3d31c <linked_list_init+0xe>
   3d312:	2000      	movs	r0, #0
   3d314:	e9c3 0001 	strd	r0, r0, [r3, #4]
   3d318:	6018      	str	r0, [r3, #0]
   3d31a:	4770      	bx	lr
   3d31c:	2016      	movs	r0, #22
   3d31e:	4770      	bx	lr

0003d320 <linked_list_push>:
   3d320:	6803      	ldr	r3, [r0, #0]
   3d322:	3301      	adds	r3, #1
   3d324:	d00d      	beq.n	3d342 <linked_list_push+0x22>
   3d326:	2300      	movs	r3, #0
   3d328:	600b      	str	r3, [r1, #0]
   3d32a:	6803      	ldr	r3, [r0, #0]
   3d32c:	b933      	cbnz	r3, 3d33c <linked_list_push+0x1c>
   3d32e:	6041      	str	r1, [r0, #4]
   3d330:	6803      	ldr	r3, [r0, #0]
   3d332:	6081      	str	r1, [r0, #8]
   3d334:	3301      	adds	r3, #1
   3d336:	6003      	str	r3, [r0, #0]
   3d338:	2000      	movs	r0, #0
   3d33a:	4770      	bx	lr
   3d33c:	6883      	ldr	r3, [r0, #8]
   3d33e:	6019      	str	r1, [r3, #0]
   3d340:	e7f6      	b.n	3d330 <linked_list_push+0x10>
   3d342:	200c      	movs	r0, #12
   3d344:	4770      	bx	lr

0003d346 <linked_list_pop>:
   3d346:	4603      	mov	r3, r0
   3d348:	6800      	ldr	r0, [r0, #0]
   3d34a:	b128      	cbz	r0, 3d358 <linked_list_pop+0x12>
   3d34c:	6858      	ldr	r0, [r3, #4]
   3d34e:	6802      	ldr	r2, [r0, #0]
   3d350:	605a      	str	r2, [r3, #4]
   3d352:	681a      	ldr	r2, [r3, #0]
   3d354:	3a01      	subs	r2, #1
   3d356:	601a      	str	r2, [r3, #0]
   3d358:	4770      	bx	lr

0003d35a <linked_list_peek>:
   3d35a:	4603      	mov	r3, r0
   3d35c:	6800      	ldr	r0, [r0, #0]
   3d35e:	b100      	cbz	r0, 3d362 <linked_list_peek+0x8>
   3d360:	6858      	ldr	r0, [r3, #4]
   3d362:	4770      	bx	lr

0003d364 <linked_list_size_get>:
   3d364:	6800      	ldr	r0, [r0, #0]
   3d366:	4770      	bx	lr

0003d368 <linked_list_get_next>:
   3d368:	6800      	ldr	r0, [r0, #0]
   3d36a:	4770      	bx	lr

0003d36c <z_device_state_init>:
}
   3d36c:	4770      	bx	lr

0003d36e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3d36e:	b138      	cbz	r0, 3d380 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3d370:	68c3      	ldr	r3, [r0, #12]
   3d372:	8818      	ldrh	r0, [r3, #0]
   3d374:	f3c0 0008 	ubfx	r0, r0, #0, #9
   3d378:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   3d37c:	4258      	negs	r0, r3
   3d37e:	4158      	adcs	r0, r3
}
   3d380:	4770      	bx	lr

0003d382 <k_heap_init>:
{
   3d382:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   3d384:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   3d388:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   3d38c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   3d38e:	f7e5 bf53 	b.w	23238 <sys_heap_init>

0003d392 <k_heap_alloc>:
{
   3d392:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   3d394:	e9cd 2300 	strd	r2, r3, [sp]
   3d398:	460a      	mov	r2, r1
   3d39a:	2104      	movs	r1, #4
   3d39c:	f7f6 fbec 	bl	33b78 <k_heap_aligned_alloc>
}
   3d3a0:	b003      	add	sp, #12
   3d3a2:	f85d fb04 	ldr.w	pc, [sp], #4

0003d3a6 <k_mem_slab_init>:
{
   3d3a6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   3d3a8:	2400      	movs	r4, #0
   3d3aa:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   3d3ac:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3d3ae:	ea41 0402 	orr.w	r4, r1, r2
   3d3b2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   3d3b6:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   3d3ba:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3d3bc:	d10c      	bne.n	3d3d8 <k_mem_slab_init+0x32>
   3d3be:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
   3d3c0:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
   3d3c2:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3d3c4:	d103      	bne.n	3d3ce <k_mem_slab_init+0x28>
   3d3c6:	e9c0 0000 	strd	r0, r0, [r0]
}
   3d3ca:	2000      	movs	r0, #0
}
   3d3cc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   3d3ce:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   3d3d0:	3401      	adds	r4, #1
   3d3d2:	460d      	mov	r5, r1
		p += slab->block_size;
   3d3d4:	4411      	add	r1, r2
   3d3d6:	e7f3      	b.n	3d3c0 <k_mem_slab_init+0x1a>
		return -EINVAL;
   3d3d8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3d3dc:	e7f6      	b.n	3d3cc <k_mem_slab_init+0x26>

0003d3de <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3d3de:	f3ef 8005 	mrs	r0, IPSR
}
   3d3e2:	3800      	subs	r0, #0
   3d3e4:	bf18      	it	ne
   3d3e6:	2001      	movne	r0, #1
   3d3e8:	4770      	bx	lr

0003d3ea <z_impl_k_thread_name_set>:
}
   3d3ea:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3d3ee:	4770      	bx	lr

0003d3f0 <k_thread_name_get>:
}
   3d3f0:	2000      	movs	r0, #0
   3d3f2:	4770      	bx	lr

0003d3f4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   3d3f4:	f7f8 b860 	b.w	354b8 <z_sched_start>

0003d3f8 <z_pm_save_idle_exit>:
{
   3d3f8:	b508      	push	{r3, lr}
	pm_system_resume();
   3d3fa:	f7e7 fdf9 	bl	24ff0 <pm_system_resume>
}
   3d3fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   3d402:	f7fc bde2 	b.w	39fca <sys_clock_idle_exit>

0003d406 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   3d406:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3d40a:	428b      	cmp	r3, r1
   3d40c:	d001      	beq.n	3d412 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   3d40e:	f7f8 bbd7 	b.w	35bc0 <z_set_prio>
}
   3d412:	2000      	movs	r0, #0
   3d414:	4770      	bx	lr

0003d416 <z_impl_k_mutex_init>:
{
   3d416:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3d418:	2000      	movs	r0, #0
   3d41a:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   3d41e:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   3d422:	4770      	bx	lr

0003d424 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   3d424:	b15a      	cbz	r2, 3d43e <z_impl_k_sem_init+0x1a>
   3d426:	428a      	cmp	r2, r1
   3d428:	d309      	bcc.n	3d43e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   3d42a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3d42e:	e9c0 1202 	strd	r1, r2, [r0, #8]
   3d432:	e9c0 0000 	strd	r0, r0, [r0]
   3d436:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   3d43a:	2000      	movs	r0, #0
   3d43c:	4770      	bx	lr
		return -EINVAL;
   3d43e:	f06f 0015 	mvn.w	r0, #21
}
   3d442:	4770      	bx	lr

0003d444 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   3d444:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   3d446:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   3d448:	408b      	lsls	r3, r1
   3d44a:	ea22 0303 	bic.w	r3, r2, r3
   3d44e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   3d450:	fa22 f001 	lsr.w	r0, r2, r1
}
   3d454:	f000 0001 	and.w	r0, r0, #1
   3d458:	4770      	bx	lr

0003d45a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   3d45a:	b120      	cbz	r0, 3d466 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3d45c:	2200      	movs	r2, #0
   3d45e:	3088      	adds	r0, #136	; 0x88
   3d460:	4611      	mov	r1, r2
   3d462:	f7f9 b809 	b.w	36478 <z_sched_wake>
}
   3d466:	4770      	bx	lr

0003d468 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   3d468:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3d46c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3d470:	4283      	cmp	r3, r0
		return b2 - b1;
   3d472:	bf14      	ite	ne
   3d474:	1ac0      	subne	r0, r0, r3
	return 0;
   3d476:	2000      	moveq	r0, #0
}
   3d478:	4770      	bx	lr

0003d47a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3d47a:	4603      	mov	r3, r0
   3d47c:	b920      	cbnz	r0, 3d488 <z_reschedule_irqlock+0xe>
   3d47e:	f3ef 8205 	mrs	r2, IPSR
   3d482:	b90a      	cbnz	r2, 3d488 <z_reschedule_irqlock+0xe>
   3d484:	f7e8 b9ce 	b.w	25824 <arch_swap>
   3d488:	f383 8811 	msr	BASEPRI, r3
   3d48c:	f3bf 8f6f 	isb	sy
}
   3d490:	4770      	bx	lr

0003d492 <z_reschedule_unlocked>:
	__asm__ volatile(
   3d492:	f04f 0320 	mov.w	r3, #32
   3d496:	f3ef 8011 	mrs	r0, BASEPRI
   3d49a:	f383 8811 	msr	BASEPRI, r3
   3d49e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3d4a2:	f7ff bfea 	b.w	3d47a <z_reschedule_irqlock>

0003d4a6 <z_unpend_all>:
{
   3d4a6:	b538      	push	{r3, r4, r5, lr}
   3d4a8:	4605      	mov	r5, r0
	int need_sched = 0;
   3d4aa:	2000      	movs	r0, #0
	return list->head == list;
   3d4ac:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d4ae:	42a5      	cmp	r5, r4
   3d4b0:	d000      	beq.n	3d4b4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3d4b2:	b904      	cbnz	r4, 3d4b6 <z_unpend_all+0x10>
}
   3d4b4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   3d4b6:	4620      	mov	r0, r4
   3d4b8:	f7f8 fc3e 	bl	35d38 <z_unpend_thread>
		z_ready_thread(thread);
   3d4bc:	4620      	mov	r0, r4
   3d4be:	f7f7 ff27 	bl	35310 <z_ready_thread>
		need_sched = 1;
   3d4c2:	2001      	movs	r0, #1
   3d4c4:	e7f2      	b.n	3d4ac <z_unpend_all+0x6>

0003d4c6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   3d4c6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3d4c8:	f7f9 fb16 	bl	36af8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3d4cc:	bd08      	pop	{r3, pc}

0003d4ce <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3d4ce:	f7f9 bb13 	b.w	36af8 <sys_clock_tick_get>

0003d4d2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3d4d2:	b108      	cbz	r0, 3d4d8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3d4d4:	f7e6 bb6a 	b.w	23bac <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3d4d8:	4770      	bx	lr

0003d4da <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3d4da:	f1b1 3fff 	cmp.w	r1, #4294967295
   3d4de:	bf08      	it	eq
   3d4e0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   3d4e4:	b538      	push	{r3, r4, r5, lr}
   3d4e6:	460c      	mov	r4, r1
   3d4e8:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3d4ea:	d014      	beq.n	3d516 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3d4ec:	4308      	orrs	r0, r1
   3d4ee:	d103      	bne.n	3d4f8 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3d4f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   3d4f4:	f7f9 bb00 	b.w	36af8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3d4f8:	f06f 0001 	mvn.w	r0, #1
   3d4fc:	f04f 33ff 	mov.w	r3, #4294967295
   3d500:	1b40      	subs	r0, r0, r5
   3d502:	eb63 0101 	sbc.w	r1, r3, r1
   3d506:	2900      	cmp	r1, #0
   3d508:	da04      	bge.n	3d514 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   3d50a:	f7f9 faf5 	bl	36af8 <sys_clock_tick_get>
   3d50e:	1940      	adds	r0, r0, r5
   3d510:	eb41 0104 	adc.w	r1, r1, r4
}
   3d514:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   3d516:	f04f 30ff 	mov.w	r0, #4294967295
   3d51a:	4601      	mov	r1, r0
   3d51c:	e7fa      	b.n	3d514 <sys_clock_timeout_end_calc+0x3a>

0003d51e <k_timer_init>:
	timer->status = 0U;
   3d51e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   3d520:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   3d524:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   3d528:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   3d52c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   3d530:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   3d532:	6343      	str	r3, [r0, #52]	; 0x34
}
   3d534:	4770      	bx	lr

0003d536 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3d536:	b510      	push	{r4, lr}
   3d538:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   3d53a:	f7f9 f93b 	bl	367b4 <z_abort_timeout>

	if (inactive) {
   3d53e:	b9b0      	cbnz	r0, 3d56e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   3d540:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3d542:	b10b      	cbz	r3, 3d548 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3d544:	4620      	mov	r0, r4
   3d546:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   3d548:	f104 0018 	add.w	r0, r4, #24
   3d54c:	f7f8 fc9a 	bl	35e84 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3d550:	b168      	cbz	r0, 3d56e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   3d552:	f7f7 fedd 	bl	35310 <z_ready_thread>
   3d556:	f04f 0320 	mov.w	r3, #32
   3d55a:	f3ef 8011 	mrs	r0, BASEPRI
   3d55e:	f383 8811 	msr	BASEPRI, r3
   3d562:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   3d566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d56a:	f7ff bf86 	b.w	3d47a <z_reschedule_irqlock>
   3d56e:	bd10      	pop	{r4, pc}

0003d570 <add_event>:
{
   3d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d572:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3d574:	e9d0 2300 	ldrd	r2, r3, [r0]
   3d578:	4290      	cmp	r0, r2
   3d57a:	4604      	mov	r4, r0
   3d57c:	460d      	mov	r5, r1
   3d57e:	d105      	bne.n	3d58c <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   3d580:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3d582:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   3d586:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3d588:	6065      	str	r5, [r4, #4]
   3d58a:	e01d      	b.n	3d5c8 <add_event+0x58>
	if ((pending == NULL) ||
   3d58c:	2b00      	cmp	r3, #0
   3d58e:	d0f7      	beq.n	3d580 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3d590:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3d592:	b100      	cbz	r0, 3d596 <add_event+0x26>
   3d594:	3860      	subs	r0, #96	; 0x60
   3d596:	b107      	cbz	r7, 3d59a <add_event+0x2a>
   3d598:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3d59a:	4639      	mov	r1, r7
   3d59c:	f7ff ff64 	bl	3d468 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3d5a0:	2800      	cmp	r0, #0
   3d5a2:	dced      	bgt.n	3d580 <add_event+0x10>
	return list->head == list;
   3d5a4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d5a6:	42b4      	cmp	r4, r6
   3d5a8:	d0ea      	beq.n	3d580 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3d5aa:	2e00      	cmp	r6, #0
   3d5ac:	d0e8      	beq.n	3d580 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   3d5ae:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3d5b0:	b101      	cbz	r1, 3d5b4 <add_event+0x44>
   3d5b2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   3d5b4:	4638      	mov	r0, r7
   3d5b6:	f7ff ff57 	bl	3d468 <z_sched_prio_cmp>
   3d5ba:	2800      	cmp	r0, #0
   3d5bc:	dd05      	ble.n	3d5ca <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
   3d5be:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3d5c0:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   3d5c4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3d5c6:	6075      	str	r5, [r6, #4]
}
   3d5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3d5ca:	6863      	ldr	r3, [r4, #4]
   3d5cc:	429e      	cmp	r6, r3
   3d5ce:	d0d7      	beq.n	3d580 <add_event+0x10>
   3d5d0:	6836      	ldr	r6, [r6, #0]
   3d5d2:	e7ea      	b.n	3d5aa <add_event+0x3a>

0003d5d4 <z_handle_obj_poll_events>:
{
   3d5d4:	4603      	mov	r3, r0
	return list->head == list;
   3d5d6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3d5d8:	4283      	cmp	r3, r0
   3d5da:	d008      	beq.n	3d5ee <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   3d5dc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   3d5e0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3d5e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3d5e4:	2300      	movs	r3, #0
	node->prev = NULL;
   3d5e6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3d5ea:	f7f9 bc6d 	b.w	36ec8 <signal_poll_event>
}
   3d5ee:	4770      	bx	lr

0003d5f0 <k_free>:
	if (ptr != NULL) {
   3d5f0:	b120      	cbz	r0, 3d5fc <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   3d5f2:	1f01      	subs	r1, r0, #4
   3d5f4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3d5f8:	f7f6 bb66 	b.w	33cc8 <k_heap_free>
}
   3d5fc:	4770      	bx	lr

0003d5fe <k_malloc>:

void *k_malloc(size_t size)
{
   3d5fe:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_malloc, _SYSTEM_HEAP);

	void *ret = k_aligned_alloc(sizeof(void *), size);
   3d600:	2004      	movs	r0, #4
   3d602:	f7f9 bf47 	b.w	37494 <k_aligned_alloc>

0003d606 <k_calloc>:

	return ret;
}

void *k_calloc(size_t nmemb, size_t size)
{
   3d606:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   3d608:	fba0 5401 	umull	r5, r4, r0, r1
   3d60c:	b924      	cbnz	r4, 3d618 <k_calloc+0x12>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_calloc, _SYSTEM_HEAP, NULL);

		return NULL;
	}

	ret = k_malloc(bounds);
   3d60e:	4628      	mov	r0, r5
   3d610:	f7ff fff5 	bl	3d5fe <k_malloc>
	if (ret != NULL) {
   3d614:	4606      	mov	r6, r0
   3d616:	b910      	cbnz	r0, 3d61e <k_calloc+0x18>
		return NULL;
   3d618:	2600      	movs	r6, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_calloc, _SYSTEM_HEAP, ret);

	return ret;
}
   3d61a:	4630      	mov	r0, r6
   3d61c:	bd70      	pop	{r4, r5, r6, pc}
   3d61e:	462a      	mov	r2, r5
   3d620:	4621      	mov	r1, r4
   3d622:	f000 f830 	bl	3d686 <memset>
   3d626:	e7f8      	b.n	3d61a <k_calloc+0x14>

0003d628 <atoi>:
   3d628:	220a      	movs	r2, #10
   3d62a:	2100      	movs	r1, #0
   3d62c:	f7fa bdc8 	b.w	381c0 <strtol>

0003d630 <memchr>:
   3d630:	b2c9      	uxtb	r1, r1
   3d632:	4603      	mov	r3, r0
   3d634:	4402      	add	r2, r0
   3d636:	b510      	push	{r4, lr}
   3d638:	4293      	cmp	r3, r2
   3d63a:	4618      	mov	r0, r3
   3d63c:	d101      	bne.n	3d642 <memchr+0x12>
   3d63e:	2000      	movs	r0, #0
   3d640:	e003      	b.n	3d64a <memchr+0x1a>
   3d642:	7804      	ldrb	r4, [r0, #0]
   3d644:	3301      	adds	r3, #1
   3d646:	428c      	cmp	r4, r1
   3d648:	d1f6      	bne.n	3d638 <memchr+0x8>
   3d64a:	bd10      	pop	{r4, pc}

0003d64c <memcmp>:
   3d64c:	3901      	subs	r1, #1
   3d64e:	4402      	add	r2, r0
   3d650:	b510      	push	{r4, lr}
   3d652:	4290      	cmp	r0, r2
   3d654:	d101      	bne.n	3d65a <memcmp+0xe>
   3d656:	2000      	movs	r0, #0
   3d658:	e005      	b.n	3d666 <memcmp+0x1a>
   3d65a:	7803      	ldrb	r3, [r0, #0]
   3d65c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   3d660:	42a3      	cmp	r3, r4
   3d662:	d001      	beq.n	3d668 <memcmp+0x1c>
   3d664:	1b18      	subs	r0, r3, r4
   3d666:	bd10      	pop	{r4, pc}
   3d668:	3001      	adds	r0, #1
   3d66a:	e7f2      	b.n	3d652 <memcmp+0x6>

0003d66c <memcpy>:
   3d66c:	440a      	add	r2, r1
   3d66e:	1e43      	subs	r3, r0, #1
   3d670:	4291      	cmp	r1, r2
   3d672:	d100      	bne.n	3d676 <memcpy+0xa>
   3d674:	4770      	bx	lr
   3d676:	b510      	push	{r4, lr}
   3d678:	f811 4b01 	ldrb.w	r4, [r1], #1
   3d67c:	4291      	cmp	r1, r2
   3d67e:	f803 4f01 	strb.w	r4, [r3, #1]!
   3d682:	d1f9      	bne.n	3d678 <memcpy+0xc>
   3d684:	bd10      	pop	{r4, pc}

0003d686 <memset>:
   3d686:	4402      	add	r2, r0
   3d688:	4603      	mov	r3, r0
   3d68a:	4293      	cmp	r3, r2
   3d68c:	d100      	bne.n	3d690 <memset+0xa>
   3d68e:	4770      	bx	lr
   3d690:	f803 1b01 	strb.w	r1, [r3], #1
   3d694:	e7f9      	b.n	3d68a <memset+0x4>

0003d696 <__sfputc_r>:
   3d696:	6893      	ldr	r3, [r2, #8]
   3d698:	3b01      	subs	r3, #1
   3d69a:	2b00      	cmp	r3, #0
   3d69c:	6093      	str	r3, [r2, #8]
   3d69e:	b410      	push	{r4}
   3d6a0:	da07      	bge.n	3d6b2 <__sfputc_r+0x1c>
   3d6a2:	6994      	ldr	r4, [r2, #24]
   3d6a4:	42a3      	cmp	r3, r4
   3d6a6:	db01      	blt.n	3d6ac <__sfputc_r+0x16>
   3d6a8:	290a      	cmp	r1, #10
   3d6aa:	d102      	bne.n	3d6b2 <__sfputc_r+0x1c>
   3d6ac:	bc10      	pop	{r4}
   3d6ae:	f7fa beab 	b.w	38408 <__swbuf_r>
   3d6b2:	6813      	ldr	r3, [r2, #0]
   3d6b4:	1c58      	adds	r0, r3, #1
   3d6b6:	6010      	str	r0, [r2, #0]
   3d6b8:	4608      	mov	r0, r1
   3d6ba:	7019      	strb	r1, [r3, #0]
   3d6bc:	bc10      	pop	{r4}
   3d6be:	4770      	bx	lr

0003d6c0 <__sfputs_r>:
   3d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d6c2:	4606      	mov	r6, r0
   3d6c4:	460f      	mov	r7, r1
   3d6c6:	4614      	mov	r4, r2
   3d6c8:	18d5      	adds	r5, r2, r3
   3d6ca:	42ac      	cmp	r4, r5
   3d6cc:	d101      	bne.n	3d6d2 <__sfputs_r+0x12>
   3d6ce:	2000      	movs	r0, #0
   3d6d0:	e007      	b.n	3d6e2 <__sfputs_r+0x22>
   3d6d2:	463a      	mov	r2, r7
   3d6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
   3d6d8:	4630      	mov	r0, r6
   3d6da:	f7ff ffdc 	bl	3d696 <__sfputc_r>
   3d6de:	1c43      	adds	r3, r0, #1
   3d6e0:	d1f3      	bne.n	3d6ca <__sfputs_r+0xa>
   3d6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003d6e4 <__cvt>:
   3d6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d6e8:	b089      	sub	sp, #36	; 0x24
   3d6ea:	2b00      	cmp	r3, #0
   3d6ec:	461d      	mov	r5, r3
   3d6ee:	4614      	mov	r4, r2
   3d6f0:	bfba      	itte	lt
   3d6f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   3d6f6:	4614      	movlt	r4, r2
   3d6f8:	2300      	movge	r3, #0
   3d6fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3d6fc:	bfbc      	itt	lt
   3d6fe:	461d      	movlt	r5, r3
   3d700:	232d      	movlt	r3, #45	; 0x2d
   3d702:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   3d706:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   3d70a:	f028 0a20 	bic.w	sl, r8, #32
   3d70e:	7013      	strb	r3, [r2, #0]
   3d710:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   3d714:	d005      	beq.n	3d722 <__cvt+0x3e>
   3d716:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   3d71a:	d100      	bne.n	3d71e <__cvt+0x3a>
   3d71c:	3601      	adds	r6, #1
   3d71e:	2302      	movs	r3, #2
   3d720:	e000      	b.n	3d724 <__cvt+0x40>
   3d722:	2303      	movs	r3, #3
   3d724:	aa07      	add	r2, sp, #28
   3d726:	9204      	str	r2, [sp, #16]
   3d728:	aa06      	add	r2, sp, #24
   3d72a:	e9cd 3600 	strd	r3, r6, [sp]
   3d72e:	e9cd 9202 	strd	r9, r2, [sp, #8]
   3d732:	462b      	mov	r3, r5
   3d734:	4622      	mov	r2, r4
   3d736:	f7e4 f943 	bl	219c0 <_dtoa_r>
   3d73a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   3d73e:	4607      	mov	r7, r0
   3d740:	d119      	bne.n	3d776 <__cvt+0x92>
   3d742:	f01b 0f01 	tst.w	fp, #1
   3d746:	d00e      	beq.n	3d766 <__cvt+0x82>
   3d748:	eb07 0806 	add.w	r8, r7, r6
   3d74c:	2200      	movs	r2, #0
   3d74e:	2300      	movs	r3, #0
   3d750:	4620      	mov	r0, r4
   3d752:	4629      	mov	r1, r5
   3d754:	f7e3 fdb0 	bl	212b8 <__aeabi_dcmpeq>
   3d758:	b108      	cbz	r0, 3d75e <__cvt+0x7a>
   3d75a:	f8cd 801c 	str.w	r8, [sp, #28]
   3d75e:	2230      	movs	r2, #48	; 0x30
   3d760:	9b07      	ldr	r3, [sp, #28]
   3d762:	4543      	cmp	r3, r8
   3d764:	d321      	bcc.n	3d7aa <__cvt+0xc6>
   3d766:	9b07      	ldr	r3, [sp, #28]
   3d768:	4638      	mov	r0, r7
   3d76a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   3d76c:	1bdb      	subs	r3, r3, r7
   3d76e:	6013      	str	r3, [r2, #0]
   3d770:	b009      	add	sp, #36	; 0x24
   3d772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d776:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   3d77a:	d0e2      	beq.n	3d742 <__cvt+0x5e>
   3d77c:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   3d780:	eb00 0806 	add.w	r8, r0, r6
   3d784:	d1e2      	bne.n	3d74c <__cvt+0x68>
   3d786:	7803      	ldrb	r3, [r0, #0]
   3d788:	2b30      	cmp	r3, #48	; 0x30
   3d78a:	d10a      	bne.n	3d7a2 <__cvt+0xbe>
   3d78c:	2200      	movs	r2, #0
   3d78e:	2300      	movs	r3, #0
   3d790:	4620      	mov	r0, r4
   3d792:	4629      	mov	r1, r5
   3d794:	f7e3 fd90 	bl	212b8 <__aeabi_dcmpeq>
   3d798:	b918      	cbnz	r0, 3d7a2 <__cvt+0xbe>
   3d79a:	f1c6 0601 	rsb	r6, r6, #1
   3d79e:	f8c9 6000 	str.w	r6, [r9]
   3d7a2:	f8d9 3000 	ldr.w	r3, [r9]
   3d7a6:	4498      	add	r8, r3
   3d7a8:	e7d0      	b.n	3d74c <__cvt+0x68>
   3d7aa:	1c59      	adds	r1, r3, #1
   3d7ac:	9107      	str	r1, [sp, #28]
   3d7ae:	701a      	strb	r2, [r3, #0]
   3d7b0:	e7d6      	b.n	3d760 <__cvt+0x7c>

0003d7b2 <__exponent>:
   3d7b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3d7b4:	2900      	cmp	r1, #0
   3d7b6:	7002      	strb	r2, [r0, #0]
   3d7b8:	bfba      	itte	lt
   3d7ba:	4249      	neglt	r1, r1
   3d7bc:	232d      	movlt	r3, #45	; 0x2d
   3d7be:	232b      	movge	r3, #43	; 0x2b
   3d7c0:	2909      	cmp	r1, #9
   3d7c2:	7043      	strb	r3, [r0, #1]
   3d7c4:	dd28      	ble.n	3d818 <__exponent+0x66>
   3d7c6:	f10d 0307 	add.w	r3, sp, #7
   3d7ca:	270a      	movs	r7, #10
   3d7cc:	461d      	mov	r5, r3
   3d7ce:	461a      	mov	r2, r3
   3d7d0:	3b01      	subs	r3, #1
   3d7d2:	fbb1 f6f7 	udiv	r6, r1, r7
   3d7d6:	fb07 1416 	mls	r4, r7, r6, r1
   3d7da:	3430      	adds	r4, #48	; 0x30
   3d7dc:	f802 4c01 	strb.w	r4, [r2, #-1]
   3d7e0:	460c      	mov	r4, r1
   3d7e2:	4631      	mov	r1, r6
   3d7e4:	2c63      	cmp	r4, #99	; 0x63
   3d7e6:	dcf2      	bgt.n	3d7ce <__exponent+0x1c>
   3d7e8:	3130      	adds	r1, #48	; 0x30
   3d7ea:	1e94      	subs	r4, r2, #2
   3d7ec:	f803 1c01 	strb.w	r1, [r3, #-1]
   3d7f0:	1c41      	adds	r1, r0, #1
   3d7f2:	4623      	mov	r3, r4
   3d7f4:	42ab      	cmp	r3, r5
   3d7f6:	d30a      	bcc.n	3d80e <__exponent+0x5c>
   3d7f8:	f10d 0309 	add.w	r3, sp, #9
   3d7fc:	1a9b      	subs	r3, r3, r2
   3d7fe:	42ac      	cmp	r4, r5
   3d800:	bf88      	it	hi
   3d802:	2300      	movhi	r3, #0
   3d804:	3302      	adds	r3, #2
   3d806:	4403      	add	r3, r0
   3d808:	1a18      	subs	r0, r3, r0
   3d80a:	b003      	add	sp, #12
   3d80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d80e:	f813 6b01 	ldrb.w	r6, [r3], #1
   3d812:	f801 6f01 	strb.w	r6, [r1, #1]!
   3d816:	e7ed      	b.n	3d7f4 <__exponent+0x42>
   3d818:	2330      	movs	r3, #48	; 0x30
   3d81a:	3130      	adds	r1, #48	; 0x30
   3d81c:	7083      	strb	r3, [r0, #2]
   3d81e:	1d03      	adds	r3, r0, #4
   3d820:	70c1      	strb	r1, [r0, #3]
   3d822:	e7f1      	b.n	3d808 <__exponent+0x56>

0003d824 <_printf_common>:
   3d824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d828:	4616      	mov	r6, r2
   3d82a:	4698      	mov	r8, r3
   3d82c:	688a      	ldr	r2, [r1, #8]
   3d82e:	4607      	mov	r7, r0
   3d830:	690b      	ldr	r3, [r1, #16]
   3d832:	460c      	mov	r4, r1
   3d834:	f8dd 9020 	ldr.w	r9, [sp, #32]
   3d838:	4293      	cmp	r3, r2
   3d83a:	bfb8      	it	lt
   3d83c:	4613      	movlt	r3, r2
   3d83e:	6033      	str	r3, [r6, #0]
   3d840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3d844:	b10a      	cbz	r2, 3d84a <_printf_common+0x26>
   3d846:	3301      	adds	r3, #1
   3d848:	6033      	str	r3, [r6, #0]
   3d84a:	6823      	ldr	r3, [r4, #0]
   3d84c:	0699      	lsls	r1, r3, #26
   3d84e:	bf42      	ittt	mi
   3d850:	6833      	ldrmi	r3, [r6, #0]
   3d852:	3302      	addmi	r3, #2
   3d854:	6033      	strmi	r3, [r6, #0]
   3d856:	6825      	ldr	r5, [r4, #0]
   3d858:	f015 0506 	ands.w	r5, r5, #6
   3d85c:	d106      	bne.n	3d86c <_printf_common+0x48>
   3d85e:	f104 0a19 	add.w	sl, r4, #25
   3d862:	68e3      	ldr	r3, [r4, #12]
   3d864:	6832      	ldr	r2, [r6, #0]
   3d866:	1a9b      	subs	r3, r3, r2
   3d868:	42ab      	cmp	r3, r5
   3d86a:	dc2b      	bgt.n	3d8c4 <_printf_common+0xa0>
   3d86c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   3d870:	6822      	ldr	r2, [r4, #0]
   3d872:	3b00      	subs	r3, #0
   3d874:	bf18      	it	ne
   3d876:	2301      	movne	r3, #1
   3d878:	0692      	lsls	r2, r2, #26
   3d87a:	d430      	bmi.n	3d8de <_printf_common+0xba>
   3d87c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3d880:	4641      	mov	r1, r8
   3d882:	4638      	mov	r0, r7
   3d884:	47c8      	blx	r9
   3d886:	3001      	adds	r0, #1
   3d888:	d023      	beq.n	3d8d2 <_printf_common+0xae>
   3d88a:	6823      	ldr	r3, [r4, #0]
   3d88c:	341a      	adds	r4, #26
   3d88e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   3d892:	f003 0306 	and.w	r3, r3, #6
   3d896:	2b04      	cmp	r3, #4
   3d898:	bf0a      	itet	eq
   3d89a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   3d89e:	2500      	movne	r5, #0
   3d8a0:	6833      	ldreq	r3, [r6, #0]
   3d8a2:	f04f 0600 	mov.w	r6, #0
   3d8a6:	bf08      	it	eq
   3d8a8:	1aed      	subeq	r5, r5, r3
   3d8aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
   3d8ae:	bf08      	it	eq
   3d8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3d8b4:	4293      	cmp	r3, r2
   3d8b6:	bfc4      	itt	gt
   3d8b8:	1a9b      	subgt	r3, r3, r2
   3d8ba:	18ed      	addgt	r5, r5, r3
   3d8bc:	42b5      	cmp	r5, r6
   3d8be:	d11a      	bne.n	3d8f6 <_printf_common+0xd2>
   3d8c0:	2000      	movs	r0, #0
   3d8c2:	e008      	b.n	3d8d6 <_printf_common+0xb2>
   3d8c4:	2301      	movs	r3, #1
   3d8c6:	4652      	mov	r2, sl
   3d8c8:	4641      	mov	r1, r8
   3d8ca:	4638      	mov	r0, r7
   3d8cc:	47c8      	blx	r9
   3d8ce:	3001      	adds	r0, #1
   3d8d0:	d103      	bne.n	3d8da <_printf_common+0xb6>
   3d8d2:	f04f 30ff 	mov.w	r0, #4294967295
   3d8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3d8da:	3501      	adds	r5, #1
   3d8dc:	e7c1      	b.n	3d862 <_printf_common+0x3e>
   3d8de:	18e1      	adds	r1, r4, r3
   3d8e0:	1c5a      	adds	r2, r3, #1
   3d8e2:	2030      	movs	r0, #48	; 0x30
   3d8e4:	3302      	adds	r3, #2
   3d8e6:	4422      	add	r2, r4
   3d8e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   3d8ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   3d8f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3d8f4:	e7c2      	b.n	3d87c <_printf_common+0x58>
   3d8f6:	2301      	movs	r3, #1
   3d8f8:	4622      	mov	r2, r4
   3d8fa:	4641      	mov	r1, r8
   3d8fc:	4638      	mov	r0, r7
   3d8fe:	47c8      	blx	r9
   3d900:	3001      	adds	r0, #1
   3d902:	d0e6      	beq.n	3d8d2 <_printf_common+0xae>
   3d904:	3601      	adds	r6, #1
   3d906:	e7d9      	b.n	3d8bc <_printf_common+0x98>

0003d908 <strchr>:
   3d908:	b2c9      	uxtb	r1, r1
   3d90a:	4603      	mov	r3, r0
   3d90c:	4618      	mov	r0, r3
   3d90e:	f813 2b01 	ldrb.w	r2, [r3], #1
   3d912:	b112      	cbz	r2, 3d91a <strchr+0x12>
   3d914:	428a      	cmp	r2, r1
   3d916:	d1f9      	bne.n	3d90c <strchr+0x4>
   3d918:	4770      	bx	lr
   3d91a:	2900      	cmp	r1, #0
   3d91c:	bf18      	it	ne
   3d91e:	2000      	movne	r0, #0
   3d920:	4770      	bx	lr

0003d922 <strcspn>:
   3d922:	4603      	mov	r3, r0
   3d924:	b570      	push	{r4, r5, r6, lr}
   3d926:	461e      	mov	r6, r3
   3d928:	f813 4b01 	ldrb.w	r4, [r3], #1
   3d92c:	b144      	cbz	r4, 3d940 <strcspn+0x1e>
   3d92e:	1e4a      	subs	r2, r1, #1
   3d930:	e001      	b.n	3d936 <strcspn+0x14>
   3d932:	42a5      	cmp	r5, r4
   3d934:	d004      	beq.n	3d940 <strcspn+0x1e>
   3d936:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   3d93a:	2d00      	cmp	r5, #0
   3d93c:	d1f9      	bne.n	3d932 <strcspn+0x10>
   3d93e:	e7f2      	b.n	3d926 <strcspn+0x4>
   3d940:	1a30      	subs	r0, r6, r0
   3d942:	bd70      	pop	{r4, r5, r6, pc}

0003d944 <strncmp>:
   3d944:	b510      	push	{r4, lr}
   3d946:	b16a      	cbz	r2, 3d964 <strncmp+0x20>
   3d948:	3901      	subs	r1, #1
   3d94a:	1884      	adds	r4, r0, r2
   3d94c:	f810 2b01 	ldrb.w	r2, [r0], #1
   3d950:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   3d954:	429a      	cmp	r2, r3
   3d956:	d103      	bne.n	3d960 <strncmp+0x1c>
   3d958:	42a0      	cmp	r0, r4
   3d95a:	d001      	beq.n	3d960 <strncmp+0x1c>
   3d95c:	2a00      	cmp	r2, #0
   3d95e:	d1f5      	bne.n	3d94c <strncmp+0x8>
   3d960:	1ad0      	subs	r0, r2, r3
   3d962:	bd10      	pop	{r4, pc}
   3d964:	4610      	mov	r0, r2
   3d966:	e7fc      	b.n	3d962 <strncmp+0x1e>

0003d968 <strncpy>:
   3d968:	3901      	subs	r1, #1
   3d96a:	4603      	mov	r3, r0
   3d96c:	b510      	push	{r4, lr}
   3d96e:	b132      	cbz	r2, 3d97e <strncpy+0x16>
   3d970:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   3d974:	3a01      	subs	r2, #1
   3d976:	f803 4b01 	strb.w	r4, [r3], #1
   3d97a:	2c00      	cmp	r4, #0
   3d97c:	d1f7      	bne.n	3d96e <strncpy+0x6>
   3d97e:	441a      	add	r2, r3
   3d980:	2100      	movs	r1, #0
   3d982:	4293      	cmp	r3, r2
   3d984:	d100      	bne.n	3d988 <strncpy+0x20>
   3d986:	bd10      	pop	{r4, pc}
   3d988:	f803 1b01 	strb.w	r1, [r3], #1
   3d98c:	e7f9      	b.n	3d982 <strncpy+0x1a>

0003d98e <strnlen>:
   3d98e:	4602      	mov	r2, r0
   3d990:	4401      	add	r1, r0
   3d992:	b510      	push	{r4, lr}
   3d994:	428a      	cmp	r2, r1
   3d996:	4613      	mov	r3, r2
   3d998:	d003      	beq.n	3d9a2 <strnlen+0x14>
   3d99a:	781c      	ldrb	r4, [r3, #0]
   3d99c:	3201      	adds	r2, #1
   3d99e:	2c00      	cmp	r4, #0
   3d9a0:	d1f8      	bne.n	3d994 <strnlen+0x6>
   3d9a2:	1a18      	subs	r0, r3, r0
   3d9a4:	bd10      	pop	{r4, pc}

0003d9a6 <strspn>:
   3d9a6:	4603      	mov	r3, r0
   3d9a8:	b570      	push	{r4, r5, r6, lr}
   3d9aa:	461e      	mov	r6, r3
   3d9ac:	f813 4b01 	ldrb.w	r4, [r3], #1
   3d9b0:	b13c      	cbz	r4, 3d9c2 <strspn+0x1c>
   3d9b2:	1e4a      	subs	r2, r1, #1
   3d9b4:	e001      	b.n	3d9ba <strspn+0x14>
   3d9b6:	42a5      	cmp	r5, r4
   3d9b8:	d0f7      	beq.n	3d9aa <strspn+0x4>
   3d9ba:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   3d9be:	2d00      	cmp	r5, #0
   3d9c0:	d1f9      	bne.n	3d9b6 <strspn+0x10>
   3d9c2:	1a30      	subs	r0, r6, r0
   3d9c4:	bd70      	pop	{r4, r5, r6, pc}

0003d9c6 <strstr>:
   3d9c6:	780a      	ldrb	r2, [r1, #0]
   3d9c8:	b570      	push	{r4, r5, r6, lr}
   3d9ca:	b96a      	cbnz	r2, 3d9e8 <strstr+0x22>
   3d9cc:	bd70      	pop	{r4, r5, r6, pc}
   3d9ce:	429a      	cmp	r2, r3
   3d9d0:	d109      	bne.n	3d9e6 <strstr+0x20>
   3d9d2:	460c      	mov	r4, r1
   3d9d4:	4605      	mov	r5, r0
   3d9d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3d9da:	2b00      	cmp	r3, #0
   3d9dc:	d0f6      	beq.n	3d9cc <strstr+0x6>
   3d9de:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3d9e2:	429e      	cmp	r6, r3
   3d9e4:	d0f7      	beq.n	3d9d6 <strstr+0x10>
   3d9e6:	3001      	adds	r0, #1
   3d9e8:	7803      	ldrb	r3, [r0, #0]
   3d9ea:	2b00      	cmp	r3, #0
   3d9ec:	d1ef      	bne.n	3d9ce <strstr+0x8>
   3d9ee:	4618      	mov	r0, r3
   3d9f0:	e7ec      	b.n	3d9cc <strstr+0x6>

0003d9f2 <abort>:
   3d9f2:	2006      	movs	r0, #6
   3d9f4:	b508      	push	{r3, lr}
   3d9f6:	f7fb fb1f 	bl	39038 <raise>
   3d9fa:	2001      	movs	r0, #1
   3d9fc:	f7e8 fdfc 	bl	265f8 <_exit>

0003da00 <quorem>:
   3da00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3da04:	6903      	ldr	r3, [r0, #16]
   3da06:	4607      	mov	r7, r0
   3da08:	690c      	ldr	r4, [r1, #16]
   3da0a:	42a3      	cmp	r3, r4
   3da0c:	f2c0 8083 	blt.w	3db16 <quorem+0x116>
   3da10:	3c01      	subs	r4, #1
   3da12:	f100 0514 	add.w	r5, r0, #20
   3da16:	f101 0814 	add.w	r8, r1, #20
   3da1a:	00a3      	lsls	r3, r4, #2
   3da1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3da20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   3da24:	9300      	str	r3, [sp, #0]
   3da26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3da2a:	9301      	str	r3, [sp, #4]
   3da2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   3da30:	3301      	adds	r3, #1
   3da32:	429a      	cmp	r2, r3
   3da34:	fbb2 f6f3 	udiv	r6, r2, r3
   3da38:	d331      	bcc.n	3da9e <quorem+0x9e>
   3da3a:	f04f 0a00 	mov.w	sl, #0
   3da3e:	46c4      	mov	ip, r8
   3da40:	46ae      	mov	lr, r5
   3da42:	46d3      	mov	fp, sl
   3da44:	f85c 3b04 	ldr.w	r3, [ip], #4
   3da48:	b298      	uxth	r0, r3
   3da4a:	45e1      	cmp	r9, ip
   3da4c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   3da50:	fb06 a000 	mla	r0, r6, r0, sl
   3da54:	ea4f 4210 	mov.w	r2, r0, lsr #16
   3da58:	b280      	uxth	r0, r0
   3da5a:	fb06 2303 	mla	r3, r6, r3, r2
   3da5e:	f8de 2000 	ldr.w	r2, [lr]
   3da62:	b292      	uxth	r2, r2
   3da64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3da68:	eba2 0200 	sub.w	r2, r2, r0
   3da6c:	b29b      	uxth	r3, r3
   3da6e:	f8de 0000 	ldr.w	r0, [lr]
   3da72:	445a      	add	r2, fp
   3da74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   3da78:	b292      	uxth	r2, r2
   3da7a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   3da7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   3da82:	ea4f 4b23 	mov.w	fp, r3, asr #16
   3da86:	f84e 2b04 	str.w	r2, [lr], #4
   3da8a:	d2db      	bcs.n	3da44 <quorem+0x44>
   3da8c:	9b00      	ldr	r3, [sp, #0]
   3da8e:	58eb      	ldr	r3, [r5, r3]
   3da90:	b92b      	cbnz	r3, 3da9e <quorem+0x9e>
   3da92:	9b01      	ldr	r3, [sp, #4]
   3da94:	3b04      	subs	r3, #4
   3da96:	429d      	cmp	r5, r3
   3da98:	461a      	mov	r2, r3
   3da9a:	d330      	bcc.n	3dafe <quorem+0xfe>
   3da9c:	613c      	str	r4, [r7, #16]
   3da9e:	4638      	mov	r0, r7
   3daa0:	f000 f980 	bl	3dda4 <__mcmp>
   3daa4:	2800      	cmp	r0, #0
   3daa6:	db26      	blt.n	3daf6 <quorem+0xf6>
   3daa8:	4629      	mov	r1, r5
   3daaa:	2000      	movs	r0, #0
   3daac:	f858 2b04 	ldr.w	r2, [r8], #4
   3dab0:	f8d1 c000 	ldr.w	ip, [r1]
   3dab4:	fa1f fe82 	uxth.w	lr, r2
   3dab8:	45c1      	cmp	r9, r8
   3daba:	fa1f f38c 	uxth.w	r3, ip
   3dabe:	ea4f 4212 	mov.w	r2, r2, lsr #16
   3dac2:	eba3 030e 	sub.w	r3, r3, lr
   3dac6:	4403      	add	r3, r0
   3dac8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   3dacc:	b29b      	uxth	r3, r3
   3dace:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   3dad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3dad6:	ea4f 4022 	mov.w	r0, r2, asr #16
   3dada:	f841 3b04 	str.w	r3, [r1], #4
   3dade:	d2e5      	bcs.n	3daac <quorem+0xac>
   3dae0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3dae4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3dae8:	b922      	cbnz	r2, 3daf4 <quorem+0xf4>
   3daea:	3b04      	subs	r3, #4
   3daec:	429d      	cmp	r5, r3
   3daee:	461a      	mov	r2, r3
   3daf0:	d30b      	bcc.n	3db0a <quorem+0x10a>
   3daf2:	613c      	str	r4, [r7, #16]
   3daf4:	3601      	adds	r6, #1
   3daf6:	4630      	mov	r0, r6
   3daf8:	b003      	add	sp, #12
   3dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dafe:	6812      	ldr	r2, [r2, #0]
   3db00:	3b04      	subs	r3, #4
   3db02:	2a00      	cmp	r2, #0
   3db04:	d1ca      	bne.n	3da9c <quorem+0x9c>
   3db06:	3c01      	subs	r4, #1
   3db08:	e7c5      	b.n	3da96 <quorem+0x96>
   3db0a:	6812      	ldr	r2, [r2, #0]
   3db0c:	3b04      	subs	r3, #4
   3db0e:	2a00      	cmp	r2, #0
   3db10:	d1ef      	bne.n	3daf2 <quorem+0xf2>
   3db12:	3c01      	subs	r4, #1
   3db14:	e7ea      	b.n	3daec <quorem+0xec>
   3db16:	2000      	movs	r0, #0
   3db18:	e7ee      	b.n	3daf8 <quorem+0xf8>

0003db1a <__sflush_r>:
   3db1a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   3db1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3db20:	0717      	lsls	r7, r2, #28
   3db22:	4605      	mov	r5, r0
   3db24:	460c      	mov	r4, r1
   3db26:	d456      	bmi.n	3dbd6 <__sflush_r+0xbc>
   3db28:	684b      	ldr	r3, [r1, #4]
   3db2a:	2b00      	cmp	r3, #0
   3db2c:	dc02      	bgt.n	3db34 <__sflush_r+0x1a>
   3db2e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3db30:	2b00      	cmp	r3, #0
   3db32:	dd3d      	ble.n	3dbb0 <__sflush_r+0x96>
   3db34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3db36:	2e00      	cmp	r6, #0
   3db38:	d03a      	beq.n	3dbb0 <__sflush_r+0x96>
   3db3a:	2300      	movs	r3, #0
   3db3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3db40:	682f      	ldr	r7, [r5, #0]
   3db42:	6a21      	ldr	r1, [r4, #32]
   3db44:	602b      	str	r3, [r5, #0]
   3db46:	d025      	beq.n	3db94 <__sflush_r+0x7a>
   3db48:	6d62      	ldr	r2, [r4, #84]	; 0x54
   3db4a:	89a3      	ldrh	r3, [r4, #12]
   3db4c:	0758      	lsls	r0, r3, #29
   3db4e:	d505      	bpl.n	3db5c <__sflush_r+0x42>
   3db50:	6863      	ldr	r3, [r4, #4]
   3db52:	1ad2      	subs	r2, r2, r3
   3db54:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3db56:	b10b      	cbz	r3, 3db5c <__sflush_r+0x42>
   3db58:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3db5a:	1ad2      	subs	r2, r2, r3
   3db5c:	6a21      	ldr	r1, [r4, #32]
   3db5e:	2300      	movs	r3, #0
   3db60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3db62:	4628      	mov	r0, r5
   3db64:	47b0      	blx	r6
   3db66:	1c41      	adds	r1, r0, #1
   3db68:	d024      	beq.n	3dbb4 <__sflush_r+0x9a>
   3db6a:	2300      	movs	r3, #0
   3db6c:	6063      	str	r3, [r4, #4]
   3db6e:	6923      	ldr	r3, [r4, #16]
   3db70:	6023      	str	r3, [r4, #0]
   3db72:	89a3      	ldrh	r3, [r4, #12]
   3db74:	04da      	lsls	r2, r3, #19
   3db76:	d500      	bpl.n	3db7a <__sflush_r+0x60>
   3db78:	6560      	str	r0, [r4, #84]	; 0x54
   3db7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3db7c:	602f      	str	r7, [r5, #0]
   3db7e:	b1b9      	cbz	r1, 3dbb0 <__sflush_r+0x96>
   3db80:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3db84:	4299      	cmp	r1, r3
   3db86:	d002      	beq.n	3db8e <__sflush_r+0x74>
   3db88:	4628      	mov	r0, r5
   3db8a:	f7f9 fd23 	bl	375d4 <_free_r>
   3db8e:	2300      	movs	r3, #0
   3db90:	6363      	str	r3, [r4, #52]	; 0x34
   3db92:	e00d      	b.n	3dbb0 <__sflush_r+0x96>
   3db94:	2301      	movs	r3, #1
   3db96:	4628      	mov	r0, r5
   3db98:	47b0      	blx	r6
   3db9a:	1c46      	adds	r6, r0, #1
   3db9c:	4602      	mov	r2, r0
   3db9e:	d1d4      	bne.n	3db4a <__sflush_r+0x30>
   3dba0:	682b      	ldr	r3, [r5, #0]
   3dba2:	2b00      	cmp	r3, #0
   3dba4:	d0d1      	beq.n	3db4a <__sflush_r+0x30>
   3dba6:	2b1d      	cmp	r3, #29
   3dba8:	d001      	beq.n	3dbae <__sflush_r+0x94>
   3dbaa:	2b16      	cmp	r3, #22
   3dbac:	d129      	bne.n	3dc02 <__sflush_r+0xe8>
   3dbae:	602f      	str	r7, [r5, #0]
   3dbb0:	2000      	movs	r0, #0
   3dbb2:	e02d      	b.n	3dc10 <__sflush_r+0xf6>
   3dbb4:	682a      	ldr	r2, [r5, #0]
   3dbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3dbba:	b142      	cbz	r2, 3dbce <__sflush_r+0xb4>
   3dbbc:	2a1d      	cmp	r2, #29
   3dbbe:	d001      	beq.n	3dbc4 <__sflush_r+0xaa>
   3dbc0:	2a16      	cmp	r2, #22
   3dbc2:	d120      	bne.n	3dc06 <__sflush_r+0xec>
   3dbc4:	2300      	movs	r3, #0
   3dbc6:	6063      	str	r3, [r4, #4]
   3dbc8:	6923      	ldr	r3, [r4, #16]
   3dbca:	6023      	str	r3, [r4, #0]
   3dbcc:	e7d5      	b.n	3db7a <__sflush_r+0x60>
   3dbce:	6062      	str	r2, [r4, #4]
   3dbd0:	6922      	ldr	r2, [r4, #16]
   3dbd2:	6022      	str	r2, [r4, #0]
   3dbd4:	e7ce      	b.n	3db74 <__sflush_r+0x5a>
   3dbd6:	690f      	ldr	r7, [r1, #16]
   3dbd8:	2f00      	cmp	r7, #0
   3dbda:	d0e9      	beq.n	3dbb0 <__sflush_r+0x96>
   3dbdc:	0793      	lsls	r3, r2, #30
   3dbde:	680e      	ldr	r6, [r1, #0]
   3dbe0:	600f      	str	r7, [r1, #0]
   3dbe2:	bf0c      	ite	eq
   3dbe4:	694b      	ldreq	r3, [r1, #20]
   3dbe6:	2300      	movne	r3, #0
   3dbe8:	1bf6      	subs	r6, r6, r7
   3dbea:	608b      	str	r3, [r1, #8]
   3dbec:	2e00      	cmp	r6, #0
   3dbee:	dddf      	ble.n	3dbb0 <__sflush_r+0x96>
   3dbf0:	4633      	mov	r3, r6
   3dbf2:	463a      	mov	r2, r7
   3dbf4:	6a21      	ldr	r1, [r4, #32]
   3dbf6:	4628      	mov	r0, r5
   3dbf8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   3dbfc:	47e0      	blx	ip
   3dbfe:	2800      	cmp	r0, #0
   3dc00:	dc07      	bgt.n	3dc12 <__sflush_r+0xf8>
   3dc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3dc06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3dc0a:	f04f 30ff 	mov.w	r0, #4294967295
   3dc0e:	81a3      	strh	r3, [r4, #12]
   3dc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3dc12:	4407      	add	r7, r0
   3dc14:	1a36      	subs	r6, r6, r0
   3dc16:	e7e9      	b.n	3dbec <__sflush_r+0xd2>

0003dc18 <__sfmoreglue>:
   3dc18:	b570      	push	{r4, r5, r6, lr}
   3dc1a:	2368      	movs	r3, #104	; 0x68
   3dc1c:	1e4d      	subs	r5, r1, #1
   3dc1e:	460e      	mov	r6, r1
   3dc20:	435d      	muls	r5, r3
   3dc22:	f105 0174 	add.w	r1, r5, #116	; 0x74
   3dc26:	f7f9 fd1f 	bl	37668 <_malloc_r>
   3dc2a:	4604      	mov	r4, r0
   3dc2c:	b140      	cbz	r0, 3dc40 <__sfmoreglue+0x28>
   3dc2e:	2100      	movs	r1, #0
   3dc30:	f105 0268 	add.w	r2, r5, #104	; 0x68
   3dc34:	e9c0 1600 	strd	r1, r6, [r0]
   3dc38:	300c      	adds	r0, #12
   3dc3a:	60a0      	str	r0, [r4, #8]
   3dc3c:	f7ff fd23 	bl	3d686 <memset>
   3dc40:	4620      	mov	r0, r4
   3dc42:	bd70      	pop	{r4, r5, r6, pc}

0003dc44 <_fwalk_reent>:
   3dc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3dc48:	4606      	mov	r6, r0
   3dc4a:	4688      	mov	r8, r1
   3dc4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
   3dc50:	2700      	movs	r7, #0
   3dc52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   3dc56:	f1b9 0901 	subs.w	r9, r9, #1
   3dc5a:	d505      	bpl.n	3dc68 <_fwalk_reent+0x24>
   3dc5c:	6824      	ldr	r4, [r4, #0]
   3dc5e:	2c00      	cmp	r4, #0
   3dc60:	d1f7      	bne.n	3dc52 <_fwalk_reent+0xe>
   3dc62:	4638      	mov	r0, r7
   3dc64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3dc68:	89ab      	ldrh	r3, [r5, #12]
   3dc6a:	2b01      	cmp	r3, #1
   3dc6c:	d907      	bls.n	3dc7e <_fwalk_reent+0x3a>
   3dc6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   3dc72:	3301      	adds	r3, #1
   3dc74:	d003      	beq.n	3dc7e <_fwalk_reent+0x3a>
   3dc76:	4629      	mov	r1, r5
   3dc78:	4630      	mov	r0, r6
   3dc7a:	47c0      	blx	r8
   3dc7c:	4307      	orrs	r7, r0
   3dc7e:	3568      	adds	r5, #104	; 0x68
   3dc80:	e7e9      	b.n	3dc56 <_fwalk_reent+0x12>

0003dc82 <__retarget_lock_init_recursive>:
   3dc82:	4770      	bx	lr

0003dc84 <__retarget_lock_acquire_recursive>:
   3dc84:	4770      	bx	lr

0003dc86 <__retarget_lock_release_recursive>:
   3dc86:	4770      	bx	lr

0003dc88 <__swhatbuf_r>:
   3dc88:	b570      	push	{r4, r5, r6, lr}
   3dc8a:	460c      	mov	r4, r1
   3dc8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3dc90:	b096      	sub	sp, #88	; 0x58
   3dc92:	4615      	mov	r5, r2
   3dc94:	2900      	cmp	r1, #0
   3dc96:	461e      	mov	r6, r3
   3dc98:	da0c      	bge.n	3dcb4 <__swhatbuf_r+0x2c>
   3dc9a:	89a3      	ldrh	r3, [r4, #12]
   3dc9c:	2100      	movs	r1, #0
   3dc9e:	f013 0f80 	tst.w	r3, #128	; 0x80
   3dca2:	bf14      	ite	ne
   3dca4:	2340      	movne	r3, #64	; 0x40
   3dca6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   3dcaa:	2000      	movs	r0, #0
   3dcac:	6031      	str	r1, [r6, #0]
   3dcae:	602b      	str	r3, [r5, #0]
   3dcb0:	b016      	add	sp, #88	; 0x58
   3dcb2:	bd70      	pop	{r4, r5, r6, pc}
   3dcb4:	466a      	mov	r2, sp
   3dcb6:	f7fb f9fb 	bl	390b0 <_fstat_r>
   3dcba:	2800      	cmp	r0, #0
   3dcbc:	dbed      	blt.n	3dc9a <__swhatbuf_r+0x12>
   3dcbe:	9901      	ldr	r1, [sp, #4]
   3dcc0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   3dcc4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   3dcc8:	4259      	negs	r1, r3
   3dcca:	4159      	adcs	r1, r3
   3dccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3dcd0:	e7eb      	b.n	3dcaa <__swhatbuf_r+0x22>

0003dcd2 <memmove>:
   3dcd2:	4288      	cmp	r0, r1
   3dcd4:	b510      	push	{r4, lr}
   3dcd6:	eb01 0402 	add.w	r4, r1, r2
   3dcda:	d902      	bls.n	3dce2 <memmove+0x10>
   3dcdc:	4284      	cmp	r4, r0
   3dcde:	4623      	mov	r3, r4
   3dce0:	d807      	bhi.n	3dcf2 <memmove+0x20>
   3dce2:	1e43      	subs	r3, r0, #1
   3dce4:	42a1      	cmp	r1, r4
   3dce6:	d008      	beq.n	3dcfa <memmove+0x28>
   3dce8:	f811 2b01 	ldrb.w	r2, [r1], #1
   3dcec:	f803 2f01 	strb.w	r2, [r3, #1]!
   3dcf0:	e7f8      	b.n	3dce4 <memmove+0x12>
   3dcf2:	4402      	add	r2, r0
   3dcf4:	4601      	mov	r1, r0
   3dcf6:	428a      	cmp	r2, r1
   3dcf8:	d100      	bne.n	3dcfc <memmove+0x2a>
   3dcfa:	bd10      	pop	{r4, pc}
   3dcfc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3dd00:	f802 4d01 	strb.w	r4, [r2, #-1]!
   3dd04:	e7f7      	b.n	3dcf6 <memmove+0x24>

0003dd06 <__hi0bits>:
   3dd06:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   3dd0a:	4603      	mov	r3, r0
   3dd0c:	bf36      	itet	cc
   3dd0e:	0403      	lslcc	r3, r0, #16
   3dd10:	2000      	movcs	r0, #0
   3dd12:	2010      	movcc	r0, #16
   3dd14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   3dd18:	bf3c      	itt	cc
   3dd1a:	021b      	lslcc	r3, r3, #8
   3dd1c:	3008      	addcc	r0, #8
   3dd1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3dd22:	bf3c      	itt	cc
   3dd24:	011b      	lslcc	r3, r3, #4
   3dd26:	3004      	addcc	r0, #4
   3dd28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   3dd2c:	d303      	bcc.n	3dd36 <__hi0bits+0x30>
   3dd2e:	2b00      	cmp	r3, #0
   3dd30:	db0a      	blt.n	3dd48 <__hi0bits+0x42>
   3dd32:	3001      	adds	r0, #1
   3dd34:	4770      	bx	lr
   3dd36:	009b      	lsls	r3, r3, #2
   3dd38:	d501      	bpl.n	3dd3e <__hi0bits+0x38>
   3dd3a:	3002      	adds	r0, #2
   3dd3c:	4770      	bx	lr
   3dd3e:	005b      	lsls	r3, r3, #1
   3dd40:	d501      	bpl.n	3dd46 <__hi0bits+0x40>
   3dd42:	3003      	adds	r0, #3
   3dd44:	4770      	bx	lr
   3dd46:	2020      	movs	r0, #32
   3dd48:	4770      	bx	lr

0003dd4a <__lo0bits>:
   3dd4a:	6803      	ldr	r3, [r0, #0]
   3dd4c:	4602      	mov	r2, r0
   3dd4e:	f013 0007 	ands.w	r0, r3, #7
   3dd52:	d00b      	beq.n	3dd6c <__lo0bits+0x22>
   3dd54:	07d9      	lsls	r1, r3, #31
   3dd56:	d421      	bmi.n	3dd9c <__lo0bits+0x52>
   3dd58:	0798      	lsls	r0, r3, #30
   3dd5a:	bf47      	ittee	mi
   3dd5c:	085b      	lsrmi	r3, r3, #1
   3dd5e:	2001      	movmi	r0, #1
   3dd60:	089b      	lsrpl	r3, r3, #2
   3dd62:	2002      	movpl	r0, #2
   3dd64:	bf4c      	ite	mi
   3dd66:	6013      	strmi	r3, [r2, #0]
   3dd68:	6013      	strpl	r3, [r2, #0]
   3dd6a:	4770      	bx	lr
   3dd6c:	b299      	uxth	r1, r3
   3dd6e:	b909      	cbnz	r1, 3dd74 <__lo0bits+0x2a>
   3dd70:	0c1b      	lsrs	r3, r3, #16
   3dd72:	2010      	movs	r0, #16
   3dd74:	b2d9      	uxtb	r1, r3
   3dd76:	b909      	cbnz	r1, 3dd7c <__lo0bits+0x32>
   3dd78:	3008      	adds	r0, #8
   3dd7a:	0a1b      	lsrs	r3, r3, #8
   3dd7c:	0719      	lsls	r1, r3, #28
   3dd7e:	bf04      	itt	eq
   3dd80:	091b      	lsreq	r3, r3, #4
   3dd82:	3004      	addeq	r0, #4
   3dd84:	0799      	lsls	r1, r3, #30
   3dd86:	bf04      	itt	eq
   3dd88:	089b      	lsreq	r3, r3, #2
   3dd8a:	3002      	addeq	r0, #2
   3dd8c:	07d9      	lsls	r1, r3, #31
   3dd8e:	d403      	bmi.n	3dd98 <__lo0bits+0x4e>
   3dd90:	085b      	lsrs	r3, r3, #1
   3dd92:	f100 0001 	add.w	r0, r0, #1
   3dd96:	d003      	beq.n	3dda0 <__lo0bits+0x56>
   3dd98:	6013      	str	r3, [r2, #0]
   3dd9a:	4770      	bx	lr
   3dd9c:	2000      	movs	r0, #0
   3dd9e:	4770      	bx	lr
   3dda0:	2020      	movs	r0, #32
   3dda2:	4770      	bx	lr

0003dda4 <__mcmp>:
   3dda4:	4603      	mov	r3, r0
   3dda6:	690a      	ldr	r2, [r1, #16]
   3dda8:	6900      	ldr	r0, [r0, #16]
   3ddaa:	1a80      	subs	r0, r0, r2
   3ddac:	b530      	push	{r4, r5, lr}
   3ddae:	d10e      	bne.n	3ddce <__mcmp+0x2a>
   3ddb0:	3314      	adds	r3, #20
   3ddb2:	3114      	adds	r1, #20
   3ddb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   3ddb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   3ddbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   3ddc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   3ddc4:	4295      	cmp	r5, r2
   3ddc6:	d003      	beq.n	3ddd0 <__mcmp+0x2c>
   3ddc8:	d205      	bcs.n	3ddd6 <__mcmp+0x32>
   3ddca:	f04f 30ff 	mov.w	r0, #4294967295
   3ddce:	bd30      	pop	{r4, r5, pc}
   3ddd0:	42a3      	cmp	r3, r4
   3ddd2:	d3f3      	bcc.n	3ddbc <__mcmp+0x18>
   3ddd4:	e7fb      	b.n	3ddce <__mcmp+0x2a>
   3ddd6:	2001      	movs	r0, #1
   3ddd8:	e7f9      	b.n	3ddce <__mcmp+0x2a>

0003ddda <_calloc_r>:
   3ddda:	b538      	push	{r3, r4, r5, lr}
   3dddc:	fb02 f501 	mul.w	r5, r2, r1
   3dde0:	4629      	mov	r1, r5
   3dde2:	f7f9 fc41 	bl	37668 <_malloc_r>
   3dde6:	4604      	mov	r4, r0
   3dde8:	b118      	cbz	r0, 3ddf2 <_calloc_r+0x18>
   3ddea:	462a      	mov	r2, r5
   3ddec:	2100      	movs	r1, #0
   3ddee:	f7ff fc4a 	bl	3d686 <memset>
   3ddf2:	4620      	mov	r0, r4
   3ddf4:	bd38      	pop	{r3, r4, r5, pc}

0003ddf6 <_realloc_r>:
   3ddf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ddf8:	4607      	mov	r7, r0
   3ddfa:	4615      	mov	r5, r2
   3ddfc:	460c      	mov	r4, r1
   3ddfe:	b921      	cbnz	r1, 3de0a <_realloc_r+0x14>
   3de00:	4611      	mov	r1, r2
   3de02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3de06:	f7f9 bc2f 	b.w	37668 <_malloc_r>
   3de0a:	b922      	cbnz	r2, 3de16 <_realloc_r+0x20>
   3de0c:	f7f9 fbe2 	bl	375d4 <_free_r>
   3de10:	2400      	movs	r4, #0
   3de12:	4620      	mov	r0, r4
   3de14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3de16:	f000 f8ed 	bl	3dff4 <_malloc_usable_size_r>
   3de1a:	42a8      	cmp	r0, r5
   3de1c:	d2f9      	bcs.n	3de12 <_realloc_r+0x1c>
   3de1e:	4629      	mov	r1, r5
   3de20:	4638      	mov	r0, r7
   3de22:	f7f9 fc21 	bl	37668 <_malloc_r>
   3de26:	4606      	mov	r6, r0
   3de28:	2800      	cmp	r0, #0
   3de2a:	d0f1      	beq.n	3de10 <_realloc_r+0x1a>
   3de2c:	4621      	mov	r1, r4
   3de2e:	462a      	mov	r2, r5
   3de30:	f7ff fc1c 	bl	3d66c <memcpy>
   3de34:	4621      	mov	r1, r4
   3de36:	4638      	mov	r0, r7
   3de38:	4634      	mov	r4, r6
   3de3a:	f7f9 fbcb 	bl	375d4 <_free_r>
   3de3e:	e7e8      	b.n	3de12 <_realloc_r+0x1c>

0003de40 <__ssputs_r>:
   3de40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3de44:	461f      	mov	r7, r3
   3de46:	688e      	ldr	r6, [r1, #8]
   3de48:	4682      	mov	sl, r0
   3de4a:	460c      	mov	r4, r1
   3de4c:	42be      	cmp	r6, r7
   3de4e:	4690      	mov	r8, r2
   3de50:	680b      	ldr	r3, [r1, #0]
   3de52:	d82d      	bhi.n	3deb0 <__ssputs_r+0x70>
   3de54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   3de58:	f412 6f90 	tst.w	r2, #1152	; 0x480
   3de5c:	d026      	beq.n	3deac <__ssputs_r+0x6c>
   3de5e:	6965      	ldr	r5, [r4, #20]
   3de60:	6909      	ldr	r1, [r1, #16]
   3de62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3de66:	eba3 0901 	sub.w	r9, r3, r1
   3de6a:	1c7b      	adds	r3, r7, #1
   3de6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   3de70:	444b      	add	r3, r9
   3de72:	106d      	asrs	r5, r5, #1
   3de74:	429d      	cmp	r5, r3
   3de76:	bf38      	it	cc
   3de78:	461d      	movcc	r5, r3
   3de7a:	0553      	lsls	r3, r2, #21
   3de7c:	d527      	bpl.n	3dece <__ssputs_r+0x8e>
   3de7e:	4629      	mov	r1, r5
   3de80:	f7f9 fbf2 	bl	37668 <_malloc_r>
   3de84:	4606      	mov	r6, r0
   3de86:	b360      	cbz	r0, 3dee2 <__ssputs_r+0xa2>
   3de88:	464a      	mov	r2, r9
   3de8a:	6921      	ldr	r1, [r4, #16]
   3de8c:	f7ff fbee 	bl	3d66c <memcpy>
   3de90:	89a3      	ldrh	r3, [r4, #12]
   3de92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   3de96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3de9a:	81a3      	strh	r3, [r4, #12]
   3de9c:	6126      	str	r6, [r4, #16]
   3de9e:	444e      	add	r6, r9
   3dea0:	6165      	str	r5, [r4, #20]
   3dea2:	eba5 0509 	sub.w	r5, r5, r9
   3dea6:	6026      	str	r6, [r4, #0]
   3dea8:	463e      	mov	r6, r7
   3deaa:	60a5      	str	r5, [r4, #8]
   3deac:	42be      	cmp	r6, r7
   3deae:	d900      	bls.n	3deb2 <__ssputs_r+0x72>
   3deb0:	463e      	mov	r6, r7
   3deb2:	4632      	mov	r2, r6
   3deb4:	4641      	mov	r1, r8
   3deb6:	6820      	ldr	r0, [r4, #0]
   3deb8:	f7ff ff0b 	bl	3dcd2 <memmove>
   3debc:	68a3      	ldr	r3, [r4, #8]
   3debe:	2000      	movs	r0, #0
   3dec0:	1b9b      	subs	r3, r3, r6
   3dec2:	60a3      	str	r3, [r4, #8]
   3dec4:	6823      	ldr	r3, [r4, #0]
   3dec6:	4433      	add	r3, r6
   3dec8:	6023      	str	r3, [r4, #0]
   3deca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3dece:	462a      	mov	r2, r5
   3ded0:	f7ff ff91 	bl	3ddf6 <_realloc_r>
   3ded4:	4606      	mov	r6, r0
   3ded6:	2800      	cmp	r0, #0
   3ded8:	d1e0      	bne.n	3de9c <__ssputs_r+0x5c>
   3deda:	6921      	ldr	r1, [r4, #16]
   3dedc:	4650      	mov	r0, sl
   3dede:	f7f9 fb79 	bl	375d4 <_free_r>
   3dee2:	230c      	movs	r3, #12
   3dee4:	f04f 30ff 	mov.w	r0, #4294967295
   3dee8:	f8ca 3000 	str.w	r3, [sl]
   3deec:	89a3      	ldrh	r3, [r4, #12]
   3deee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3def2:	81a3      	strh	r3, [r4, #12]
   3def4:	e7e9      	b.n	3deca <__ssputs_r+0x8a>

0003def6 <_raise_r>:
   3def6:	291f      	cmp	r1, #31
   3def8:	b538      	push	{r3, r4, r5, lr}
   3defa:	4605      	mov	r5, r0
   3defc:	460c      	mov	r4, r1
   3defe:	d904      	bls.n	3df0a <_raise_r+0x14>
   3df00:	2316      	movs	r3, #22
   3df02:	6003      	str	r3, [r0, #0]
   3df04:	f04f 30ff 	mov.w	r0, #4294967295
   3df08:	bd38      	pop	{r3, r4, r5, pc}
   3df0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3df0c:	b112      	cbz	r2, 3df14 <_raise_r+0x1e>
   3df0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   3df12:	b94b      	cbnz	r3, 3df28 <_raise_r+0x32>
   3df14:	4628      	mov	r0, r5
   3df16:	f000 f816 	bl	3df46 <_getpid_r>
   3df1a:	4622      	mov	r2, r4
   3df1c:	4601      	mov	r1, r0
   3df1e:	4628      	mov	r0, r5
   3df20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3df24:	f7fb b890 	b.w	39048 <_kill_r>
   3df28:	2b01      	cmp	r3, #1
   3df2a:	d00a      	beq.n	3df42 <_raise_r+0x4c>
   3df2c:	1c59      	adds	r1, r3, #1
   3df2e:	d103      	bne.n	3df38 <_raise_r+0x42>
   3df30:	2316      	movs	r3, #22
   3df32:	6003      	str	r3, [r0, #0]
   3df34:	2001      	movs	r0, #1
   3df36:	e7e7      	b.n	3df08 <_raise_r+0x12>
   3df38:	2100      	movs	r1, #0
   3df3a:	4620      	mov	r0, r4
   3df3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   3df40:	4798      	blx	r3
   3df42:	2000      	movs	r0, #0
   3df44:	e7e0      	b.n	3df08 <_raise_r+0x12>

0003df46 <_getpid_r>:
   3df46:	f7fc b8a9 	b.w	3a09c <_getpid>

0003df4a <__sread>:
   3df4a:	b510      	push	{r4, lr}
   3df4c:	460c      	mov	r4, r1
   3df4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3df52:	f7fb f8e1 	bl	39118 <_read_r>
   3df56:	2800      	cmp	r0, #0
   3df58:	bfab      	itete	ge
   3df5a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   3df5c:	89a3      	ldrhlt	r3, [r4, #12]
   3df5e:	181b      	addge	r3, r3, r0
   3df60:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   3df64:	bfac      	ite	ge
   3df66:	6563      	strge	r3, [r4, #84]	; 0x54
   3df68:	81a3      	strhlt	r3, [r4, #12]
   3df6a:	bd10      	pop	{r4, pc}

0003df6c <__swrite>:
   3df6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3df70:	461f      	mov	r7, r3
   3df72:	898b      	ldrh	r3, [r1, #12]
   3df74:	4605      	mov	r5, r0
   3df76:	460c      	mov	r4, r1
   3df78:	05db      	lsls	r3, r3, #23
   3df7a:	4616      	mov	r6, r2
   3df7c:	d505      	bpl.n	3df8a <__swrite+0x1e>
   3df7e:	2302      	movs	r3, #2
   3df80:	2200      	movs	r2, #0
   3df82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3df86:	f7fb f8b5 	bl	390f4 <_lseek_r>
   3df8a:	89a3      	ldrh	r3, [r4, #12]
   3df8c:	4632      	mov	r2, r6
   3df8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3df92:	4628      	mov	r0, r5
   3df94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   3df98:	81a3      	strh	r3, [r4, #12]
   3df9a:	463b      	mov	r3, r7
   3df9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3dfa0:	f7fb b864 	b.w	3906c <_write_r>

0003dfa4 <__sseek>:
   3dfa4:	b510      	push	{r4, lr}
   3dfa6:	460c      	mov	r4, r1
   3dfa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3dfac:	f7fb f8a2 	bl	390f4 <_lseek_r>
   3dfb0:	1c43      	adds	r3, r0, #1
   3dfb2:	89a3      	ldrh	r3, [r4, #12]
   3dfb4:	bf15      	itete	ne
   3dfb6:	6560      	strne	r0, [r4, #84]	; 0x54
   3dfb8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   3dfbc:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   3dfc0:	81a3      	strheq	r3, [r4, #12]
   3dfc2:	bf18      	it	ne
   3dfc4:	81a3      	strhne	r3, [r4, #12]
   3dfc6:	bd10      	pop	{r4, pc}

0003dfc8 <__sclose>:
   3dfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3dfcc:	f7fb b860 	b.w	39090 <_close_r>

0003dfd0 <__ascii_mbtowc>:
   3dfd0:	b082      	sub	sp, #8
   3dfd2:	b901      	cbnz	r1, 3dfd6 <__ascii_mbtowc+0x6>
   3dfd4:	a901      	add	r1, sp, #4
   3dfd6:	b142      	cbz	r2, 3dfea <__ascii_mbtowc+0x1a>
   3dfd8:	b14b      	cbz	r3, 3dfee <__ascii_mbtowc+0x1e>
   3dfda:	7813      	ldrb	r3, [r2, #0]
   3dfdc:	600b      	str	r3, [r1, #0]
   3dfde:	7812      	ldrb	r2, [r2, #0]
   3dfe0:	1e10      	subs	r0, r2, #0
   3dfe2:	bf18      	it	ne
   3dfe4:	2001      	movne	r0, #1
   3dfe6:	b002      	add	sp, #8
   3dfe8:	4770      	bx	lr
   3dfea:	4610      	mov	r0, r2
   3dfec:	e7fb      	b.n	3dfe6 <__ascii_mbtowc+0x16>
   3dfee:	f06f 0001 	mvn.w	r0, #1
   3dff2:	e7f8      	b.n	3dfe6 <__ascii_mbtowc+0x16>

0003dff4 <_malloc_usable_size_r>:
   3dff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3dff8:	1f18      	subs	r0, r3, #4
   3dffa:	2b00      	cmp	r3, #0
   3dffc:	bfbc      	itt	lt
   3dffe:	580b      	ldrlt	r3, [r1, r0]
   3e000:	18c0      	addlt	r0, r0, r3
   3e002:	4770      	bx	lr

0003e004 <__ascii_wctomb>:
   3e004:	4603      	mov	r3, r0
   3e006:	4608      	mov	r0, r1
   3e008:	b141      	cbz	r1, 3e01c <__ascii_wctomb+0x18>
   3e00a:	2aff      	cmp	r2, #255	; 0xff
   3e00c:	d904      	bls.n	3e018 <__ascii_wctomb+0x14>
   3e00e:	228a      	movs	r2, #138	; 0x8a
   3e010:	f04f 30ff 	mov.w	r0, #4294967295
   3e014:	601a      	str	r2, [r3, #0]
   3e016:	4770      	bx	lr
   3e018:	2001      	movs	r0, #1
   3e01a:	700a      	strb	r2, [r1, #0]
   3e01c:	4770      	bx	lr
	...

0003e020 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   3e020:	f7ed ba02 	b.w	2b428 <SystemInit>
