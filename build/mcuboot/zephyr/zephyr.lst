
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	30 98 01 20 3d 33 00 00 53 82 00 00 9d 33 00 00     0.. =3..S....3..
  10:	9d 33 00 00 9d 33 00 00 9d 33 00 00 9d 33 00 00     .3...3...3...3..
	...
  2c:	8d 30 00 00 9d 33 00 00 00 00 00 00 f9 2f 00 00     .0...3......./..
  3c:	73 7d 00 00                                         s}..

00000040 <_irq_vector_table>:
  40:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  50:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  60:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  70:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  80:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  90:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  a0:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  b0:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  c0:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  d0:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  e0:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
  f0:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
 100:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
 110:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
 120:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
 130:	fd 32 00 00 fd 32 00 00 fd 32 00 00 fd 32 00 00     .2...2...2...2..
 140:	fd 32 00 00                                         .2..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b80c 	b.w	174 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f808 	bl	178 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__aeabi_idiv0>:
     174:	4770      	bx	lr
     176:	bf00      	nop

00000178 <__udivmoddi4>:
     178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     17c:	4686      	mov	lr, r0
     17e:	468c      	mov	ip, r1
     180:	4608      	mov	r0, r1
     182:	9e08      	ldr	r6, [sp, #32]
     184:	4615      	mov	r5, r2
     186:	4674      	mov	r4, lr
     188:	4619      	mov	r1, r3
     18a:	2b00      	cmp	r3, #0
     18c:	f040 80c1 	bne.w	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
     190:	4285      	cmp	r5, r0
     192:	fab2 f282 	clz	r2, r2
     196:	d945      	bls.n	224 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x24>
     198:	b14a      	cbz	r2, 1ae <__udivmoddi4+0x36>
     19a:	f1c2 0320 	rsb	r3, r2, #32
     19e:	fa00 fc02 	lsl.w	ip, r0, r2
     1a2:	4095      	lsls	r5, r2
     1a4:	4094      	lsls	r4, r2
     1a6:	fa2e f303 	lsr.w	r3, lr, r3
     1aa:	ea43 0c0c 	orr.w	ip, r3, ip
     1ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1b2:	b2a8      	uxth	r0, r5
     1b4:	0c23      	lsrs	r3, r4, #16
     1b6:	fbbc f8fe 	udiv	r8, ip, lr
     1ba:	fb0e cc18 	mls	ip, lr, r8, ip
     1be:	fb08 f900 	mul.w	r9, r8, r0
     1c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1c6:	4599      	cmp	r9, r3
     1c8:	d928      	bls.n	21c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1c>
     1ca:	18eb      	adds	r3, r5, r3
     1cc:	f108 37ff 	add.w	r7, r8, #4294967295
     1d0:	d204      	bcs.n	1dc <CONFIG_BOOT_SERIAL_DETECT_DELAY+0x1a>
     1d2:	4599      	cmp	r9, r3
     1d4:	d902      	bls.n	1dc <CONFIG_BOOT_SERIAL_DETECT_DELAY+0x1a>
     1d6:	f1a8 0702 	sub.w	r7, r8, #2
     1da:	442b      	add	r3, r5
     1dc:	eba3 0309 	sub.w	r3, r3, r9
     1e0:	b2a4      	uxth	r4, r4
     1e2:	fbb3 fcfe 	udiv	ip, r3, lr
     1e6:	fb0e 331c 	mls	r3, lr, ip, r3
     1ea:	fb0c f000 	mul.w	r0, ip, r0
     1ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1f2:	42a0      	cmp	r0, r4
     1f4:	d914      	bls.n	220 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x20>
     1f6:	192c      	adds	r4, r5, r4
     1f8:	f10c 33ff 	add.w	r3, ip, #4294967295
     1fc:	d204      	bcs.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     1fe:	42a0      	cmp	r0, r4
     200:	d902      	bls.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     202:	f1ac 0302 	sub.w	r3, ip, #2
     206:	442c      	add	r4, r5
     208:	1a24      	subs	r4, r4, r0
     20a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     20e:	b11e      	cbz	r6, 218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     210:	40d4      	lsrs	r4, r2
     212:	2300      	movs	r3, #0
     214:	6034      	str	r4, [r6, #0]
     216:	6073      	str	r3, [r6, #4]
     218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     21c:	4647      	mov	r7, r8
     21e:	e7dd      	b.n	1dc <CONFIG_BOOT_SERIAL_DETECT_DELAY+0x1a>
     220:	4663      	mov	r3, ip
     222:	e7f1      	b.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     224:	bb92      	cbnz	r2, 28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
     226:	1b43      	subs	r3, r0, r5
     228:	2101      	movs	r1, #1
     22a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     22e:	b2af      	uxth	r7, r5
     230:	0c20      	lsrs	r0, r4, #16
     232:	fbb3 fcfe 	udiv	ip, r3, lr
     236:	fb0e 331c 	mls	r3, lr, ip, r3
     23a:	fb0c f807 	mul.w	r8, ip, r7
     23e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     242:	4598      	cmp	r8, r3
     244:	d961      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     246:	18eb      	adds	r3, r5, r3
     248:	f10c 30ff 	add.w	r0, ip, #4294967295
     24c:	d204      	bcs.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     24e:	4598      	cmp	r8, r3
     250:	d902      	bls.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     252:	f1ac 0002 	sub.w	r0, ip, #2
     256:	442b      	add	r3, r5
     258:	eba3 0308 	sub.w	r3, r3, r8
     25c:	b2a4      	uxth	r4, r4
     25e:	fbb3 fcfe 	udiv	ip, r3, lr
     262:	fb0e 331c 	mls	r3, lr, ip, r3
     266:	fb0c f707 	mul.w	r7, ip, r7
     26a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     26e:	42a7      	cmp	r7, r4
     270:	d94d      	bls.n	30e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe>
     272:	192c      	adds	r4, r5, r4
     274:	f10c 33ff 	add.w	r3, ip, #4294967295
     278:	d204      	bcs.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27a:	42a7      	cmp	r7, r4
     27c:	d902      	bls.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     27e:	f1ac 0302 	sub.w	r3, ip, #2
     282:	442c      	add	r4, r5
     284:	1be4      	subs	r4, r4, r7
     286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     28a:	e7c0      	b.n	20e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xe>
     28c:	f1c2 0320 	rsb	r3, r2, #32
     290:	4095      	lsls	r5, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f103 	lsr.w	r1, r0, r3
     298:	fa2e f303 	lsr.w	r3, lr, r3
     29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a0:	4090      	lsls	r0, r2
     2a2:	b2af      	uxth	r7, r5
     2a4:	4303      	orrs	r3, r0
     2a6:	fbb1 fcfe 	udiv	ip, r1, lr
     2aa:	fb0e 101c 	mls	r0, lr, ip, r1
     2ae:	0c19      	lsrs	r1, r3, #16
     2b0:	fb0c f807 	mul.w	r8, ip, r7
     2b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2b8:	4588      	cmp	r8, r1
     2ba:	d922      	bls.n	302 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2>
     2bc:	1869      	adds	r1, r5, r1
     2be:	f10c 30ff 	add.w	r0, ip, #4294967295
     2c2:	d204      	bcs.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c4:	4588      	cmp	r8, r1
     2c6:	d902      	bls.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     2c8:	f1ac 0002 	sub.w	r0, ip, #2
     2cc:	4429      	add	r1, r5
     2ce:	eba1 0108 	sub.w	r1, r1, r8
     2d2:	b29b      	uxth	r3, r3
     2d4:	fbb1 fcfe 	udiv	ip, r1, lr
     2d8:	fb0e 111c 	mls	r1, lr, ip, r1
     2dc:	fb0c f707 	mul.w	r7, ip, r7
     2e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2e4:	429f      	cmp	r7, r3
     2e6:	d90e      	bls.n	306 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x6>
     2e8:	18eb      	adds	r3, r5, r3
     2ea:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ee:	d204      	bcs.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f0:	429f      	cmp	r7, r3
     2f2:	d902      	bls.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f4:	f1ac 0102 	sub.w	r1, ip, #2
     2f8:	442b      	add	r3, r5
     2fa:	1bdb      	subs	r3, r3, r7
     2fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     300:	e793      	b.n	22a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2a>
     302:	4660      	mov	r0, ip
     304:	e7e3      	b.n	2ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4e>
     306:	4661      	mov	r1, ip
     308:	e7f7      	b.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     30a:	4660      	mov	r0, ip
     30c:	e7a4      	b.n	258 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x58>
     30e:	4663      	mov	r3, ip
     310:	e7b8      	b.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     312:	4283      	cmp	r3, r0
     314:	d906      	bls.n	324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     316:	b916      	cbnz	r6, 31e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1e>
     318:	2100      	movs	r1, #0
     31a:	4608      	mov	r0, r1
     31c:	e77c      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     31e:	e9c6 e000 	strd	lr, r0, [r6]
     322:	e7f9      	b.n	318 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x18>
     324:	fab3 f783 	clz	r7, r3
     328:	b98f      	cbnz	r7, 34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     32a:	4283      	cmp	r3, r0
     32c:	d301      	bcc.n	332 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x32>
     32e:	4572      	cmp	r2, lr
     330:	d808      	bhi.n	344 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x44>
     332:	ebbe 0402 	subs.w	r4, lr, r2
     336:	eb60 0303 	sbc.w	r3, r0, r3
     33a:	2001      	movs	r0, #1
     33c:	469c      	mov	ip, r3
     33e:	b91e      	cbnz	r6, 348 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x48>
     340:	2100      	movs	r1, #0
     342:	e769      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     344:	4638      	mov	r0, r7
     346:	e7fa      	b.n	33e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x3e>
     348:	e9c6 4c00 	strd	r4, ip, [r6]
     34c:	e7f8      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     34e:	f1c7 0c20 	rsb	ip, r7, #32
     352:	40bb      	lsls	r3, r7
     354:	fa0e f507 	lsl.w	r5, lr, r7
     358:	fa22 f40c 	lsr.w	r4, r2, ip
     35c:	fa2e f10c 	lsr.w	r1, lr, ip
     360:	40ba      	lsls	r2, r7
     362:	431c      	orrs	r4, r3
     364:	fa20 f30c 	lsr.w	r3, r0, ip
     368:	40b8      	lsls	r0, r7
     36a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     36e:	4301      	orrs	r1, r0
     370:	fa1f fe84 	uxth.w	lr, r4
     374:	fbb3 f8f9 	udiv	r8, r3, r9
     378:	fb09 3018 	mls	r0, r9, r8, r3
     37c:	0c0b      	lsrs	r3, r1, #16
     37e:	fb08 fa0e 	mul.w	sl, r8, lr
     382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     386:	459a      	cmp	sl, r3
     388:	d940      	bls.n	40c <CONFIG_FLASH_SIZE+0xc>
     38a:	18e3      	adds	r3, r4, r3
     38c:	f108 30ff 	add.w	r0, r8, #4294967295
     390:	d204      	bcs.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     392:	459a      	cmp	sl, r3
     394:	d902      	bls.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     396:	f1a8 0002 	sub.w	r0, r8, #2
     39a:	4423      	add	r3, r4
     39c:	eba3 030a 	sub.w	r3, r3, sl
     3a0:	b289      	uxth	r1, r1
     3a2:	fbb3 f8f9 	udiv	r8, r3, r9
     3a6:	fb09 3318 	mls	r3, r9, r8, r3
     3aa:	fb08 fe0e 	mul.w	lr, r8, lr
     3ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3b2:	458e      	cmp	lr, r1
     3b4:	d92c      	bls.n	410 <CONFIG_FLASH_SIZE+0x10>
     3b6:	1861      	adds	r1, r4, r1
     3b8:	f108 33ff 	add.w	r3, r8, #4294967295
     3bc:	d204      	bcs.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3be:	458e      	cmp	lr, r1
     3c0:	d902      	bls.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>
     3c2:	f1a8 0302 	sub.w	r3, r8, #2
     3c6:	4421      	add	r1, r4
     3c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3cc:	eba1 010e 	sub.w	r1, r1, lr
     3d0:	fba0 9802 	umull	r9, r8, r0, r2
     3d4:	4541      	cmp	r1, r8
     3d6:	46ce      	mov	lr, r9
     3d8:	4643      	mov	r3, r8
     3da:	d302      	bcc.n	3e2 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe2>
     3dc:	d106      	bne.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3de:	454d      	cmp	r5, r9
     3e0:	d204      	bcs.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3e2:	3801      	subs	r0, #1
     3e4:	ebb9 0e02 	subs.w	lr, r9, r2
     3e8:	eb68 0304 	sbc.w	r3, r8, r4
     3ec:	2e00      	cmp	r6, #0
     3ee:	d0a7      	beq.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     3f0:	ebb5 020e 	subs.w	r2, r5, lr
     3f4:	eb61 0103 	sbc.w	r1, r1, r3
     3f8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3fc:	fa22 f307 	lsr.w	r3, r2, r7
     400:	40f9      	lsrs	r1, r7
     402:	ea4c 0303 	orr.w	r3, ip, r3
     406:	e9c6 3100 	strd	r3, r1, [r6]
     40a:	e799      	b.n	340 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x40>
     40c:	4640      	mov	r0, r8
     40e:	e7c5      	b.n	39c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x9c>
     410:	4643      	mov	r3, r8
     412:	e7d9      	b.n	3c8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc8>

00000414 <led_init>:
#endif

const static struct device *led;

void led_init(void)
{
     414:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     416:	480f      	ldr	r0, [pc, #60]	; (454 <led_init+0x40>)
     418:	f004 fb12 	bl	4a40 <z_impl_device_get_binding>

  led = device_get_binding(LED0_GPIO_LABEL);
     41c:	4c0e      	ldr	r4, [pc, #56]	; (458 <led_init+0x44>)
     41e:	6020      	str	r0, [r4, #0]
  if (led == NULL) {
     420:	b930      	cbnz	r0, 430 <led_init+0x1c>
  }

  gpio_pin_configure(led, LED0_GPIO_PIN, LED0_GPIO_FLAGS);
  gpio_pin_set(led, LED0_GPIO_PIN, 0);

}
     422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BOOT_LOG_ERR("Didn't find LED device %s\n", LED0_GPIO_LABEL);
     426:	2145      	movs	r1, #69	; 0x45
     428:	4a0a      	ldr	r2, [pc, #40]	; (454 <led_init+0x40>)
     42a:	480c      	ldr	r0, [pc, #48]	; (45c <led_init+0x48>)
     42c:	f007 bb4c 	b.w	7ac8 <z_log_minimal_printk>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     430:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     432:	6881      	ldr	r1, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     434:	6813      	ldr	r3, [r2, #0]
     436:	f043 0308 	orr.w	r3, r3, #8
     43a:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     43c:	680b      	ldr	r3, [r1, #0]
     43e:	f240 2201 	movw	r2, #513	; 0x201
     442:	2103      	movs	r1, #3
     444:	4798      	blx	r3
  gpio_pin_set(led, LED0_GPIO_PIN, 0);
     446:	6820      	ldr	r0, [r4, #0]
     448:	2100      	movs	r1, #0
}
     44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  gpio_pin_set(led, LED0_GPIO_PIN, 0);
     44e:	f006 be99 	b.w	7184 <gpio_pin_set.constprop.0.isra.0>
     452:	bf00      	nop
     454:	00009498 	.word	0x00009498
     458:	200147f0 	.word	0x200147f0
     45c:	0000949f 	.word	0x0000949f

00000460 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     460:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     464:	4b5e      	ldr	r3, [pc, #376]	; (5e0 <FIH_LABEL_FIH_CALL_END_1096+0x7e>)
     466:	4a5f      	ldr	r2, [pc, #380]	; (5e4 <FIH_LABEL_FIH_CALL_END_1096+0x82>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     468:	485f      	ldr	r0, [pc, #380]	; (5e8 <FIH_LABEL_FIH_CALL_END_1096+0x86>)
     46a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     46e:	2149      	movs	r1, #73	; 0x49
     470:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     474:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     478:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     47c:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     480:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     484:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     488:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     48c:	f007 fb1c 	bl	7ac8 <z_log_minimal_printk>
    BOOT_LOG_INF("Starting Direct-XIP bootloader");
#endif

#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
     490:	f7ff ffc0 	bl	414 <led_init>
#endif

    os_heap_init();
     494:	f006 fe8d 	bl	71b2 <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     498:	4854      	ldr	r0, [pc, #336]	; (5ec <FIH_LABEL_FIH_CALL_END_1096+0x8a>)
     49a:	f000 f8bf 	bl	61c <flash_device_get_binding>
     49e:	b928      	cbnz	r0, 4ac <main+0x4c>
        BOOT_LOG_ERR("Flash device %s not found",
     4a0:	2145      	movs	r1, #69	; 0x45
     4a2:	4a52      	ldr	r2, [pc, #328]	; (5ec <FIH_LABEL_FIH_CALL_END_1096+0x8a>)
     4a4:	4852      	ldr	r0, [pc, #328]	; (5f0 <FIH_LABEL_FIH_CALL_END_1096+0x8e>)
     4a6:	f007 fb0f 	bl	7ac8 <z_log_minimal_printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     4aa:	e7fe      	b.n	4aa <main+0x4a>
     4ac:	4851      	ldr	r0, [pc, #324]	; (5f4 <FIH_LABEL_FIH_CALL_END_1096+0x92>)
     4ae:	f004 fac7 	bl	4a40 <z_impl_device_get_binding>
     4b2:	4605      	mov	r5, r0
	struct gpio_driver_data *data =
     4b4:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     4b6:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     4b8:	6813      	ldr	r3, [r2, #0]
     4ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     4be:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
     4c0:	680b      	ldr	r3, [r1, #0]
     4c2:	f44f 7288 	mov.w	r2, #272	; 0x110
     4c6:	210c      	movs	r1, #12
     4c8:	4798      	blx	r3
    rc = gpio_pin_get_raw(detect_port, pin);
     4ca:	210c      	movs	r1, #12
     4cc:	4628      	mov	r0, r5
     4ce:	f006 fe48 	bl	7162 <gpio_pin_get_raw>
    if (detect_value == expected) {
     4d2:	2800      	cmp	r0, #0
     4d4:	d142      	bne.n	55c <FIH_LABEL_FIH_CALL_START_1084>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4d6:	2100      	movs	r1, #0
     4d8:	f240 6067 	movw	r0, #1639	; 0x667
     4dc:	f005 f898 	bl	5610 <z_impl_k_sleep>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     4e0:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     4e4:	f008 fbe4 	bl	8cb0 <z_impl_k_uptime_ticks>
     4e8:	463e      	mov	r6, r7
     4ea:	fba0 0307 	umull	r0, r3, r0, r7
     4ee:	fb07 3301 	mla	r3, r7, r1, r3
     4f2:	0bc4      	lsrs	r4, r0, #15
     4f4:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
                rc = gpio_pin_get_raw(detect_port, pin);
     4f8:	210c      	movs	r1, #12
     4fa:	4628      	mov	r0, r5
     4fc:	f006 fe31 	bl	7162 <gpio_pin_get_raw>
     500:	4680      	mov	r8, r0
     502:	f008 fbd5 	bl	8cb0 <z_impl_k_uptime_ticks>
     506:	fba0 3206 	umull	r3, r2, r0, r6
     50a:	fb07 2201 	mla	r2, r7, r1, r2
     50e:	0bdb      	lsrs	r3, r3, #15
     510:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
                uint32_t delta = k_uptime_get() -  timestamp;
     514:	1b1b      	subs	r3, r3, r4
                if (delta >= delay || detect_value != expected) {
     516:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
     51a:	d207      	bcs.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     51c:	f1b8 0f00 	cmp.w	r8, #0
     520:	d11c      	bne.n	55c <FIH_LABEL_FIH_CALL_START_1084>
	return z_impl_k_sleep(timeout);
     522:	2100      	movs	r1, #0
     524:	2021      	movs	r0, #33	; 0x21
     526:	f005 f873 	bl	5610 <z_impl_k_sleep>
            for(;;) {
     52a:	e7e5      	b.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
            ;
    }
#endif

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin(CONFIG_BOOT_SERIAL_DETECT_PORT,
     52c:	f1b8 0f00 	cmp.w	r8, #0
     530:	d114      	bne.n	55c <FIH_LABEL_FIH_CALL_START_1084>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     532:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     536:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRF_POWER_RESETREAS_RESETPIN_MASK));
     53a:	b10b      	cbz	r3, 540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
     53c:	07db      	lsls	r3, r3, #31
     53e:	d50d      	bpl.n	55c <FIH_LABEL_FIH_CALL_START_1084>
                   CONFIG_BOOT_SERIAL_DETECT_PIN,
                   CONFIG_BOOT_SERIAL_DETECT_PIN_VAL,
                   CONFIG_BOOT_SERIAL_DETECT_DELAY) &&
            !boot_skip_serial_recovery()) {
#ifdef CONFIG_MCUBOOT_INDICATION_LED
        gpio_pin_set(led, LED0_GPIO_PIN, 1);
     540:	4b2d      	ldr	r3, [pc, #180]	; (5f8 <FIH_LABEL_FIH_CALL_END_1096+0x96>)
     542:	2101      	movs	r1, #1
     544:	6818      	ldr	r0, [r3, #0]
     546:	f006 fe1d 	bl	7184 <gpio_pin_set.constprop.0.isra.0>
#endif

        BOOT_LOG_INF("Enter the serial recovery mode");
     54a:	2149      	movs	r1, #73	; 0x49
     54c:	482b      	ldr	r0, [pc, #172]	; (5fc <FIH_LABEL_FIH_CALL_END_1096+0x9a>)
     54e:	f007 fabb 	bl	7ac8 <z_log_minimal_printk>
        rc = boot_console_init();
     552:	f002 f8e9 	bl	2728 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     556:	482a      	ldr	r0, [pc, #168]	; (600 <FIH_LABEL_FIH_CALL_END_1096+0x9e>)
     558:	f002 fc4e 	bl	2df8 <boot_serial_start>

0000055c <FIH_LABEL_FIH_CALL_START_1084>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     55c:	a801      	add	r0, sp, #4
     55e:	f000 fc83 	bl	e68 <boot_go>

00000562 <FIH_LABEL_FIH_CALL_END_1096>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     562:	4b28      	ldr	r3, [pc, #160]	; (604 <FIH_LABEL_FIH_CALL_END_1096+0xa2>)
     564:	681b      	ldr	r3, [r3, #0]
     566:	4283      	cmp	r3, r0
     568:	d004      	beq.n	574 <FIH_LABEL_FIH_CALL_END_1096+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     56a:	2145      	movs	r1, #69	; 0x45
     56c:	4826      	ldr	r0, [pc, #152]	; (608 <FIH_LABEL_FIH_CALL_END_1096+0xa6>)
     56e:	f007 faab 	bl	7ac8 <z_log_minimal_printk>
        FIH_PANIC;
     572:	e7fe      	b.n	572 <FIH_LABEL_FIH_CALL_END_1096+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     574:	2149      	movs	r1, #73	; 0x49
     576:	9a03      	ldr	r2, [sp, #12]
     578:	4824      	ldr	r0, [pc, #144]	; (60c <FIH_LABEL_FIH_CALL_END_1096+0xaa>)
     57a:	f007 faa5 	bl	7ac8 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     57e:	2149      	movs	r1, #73	; 0x49
     580:	4823      	ldr	r0, [pc, #140]	; (610 <FIH_LABEL_FIH_CALL_END_1096+0xae>)
     582:	f007 faa1 	bl	7ac8 <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     586:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     58a:	2000      	movs	r0, #0
     58c:	f003 ff86 	bl	449c <fprotect_area>

    if (rc != 0) {
     590:	b120      	cbz	r0, 59c <FIH_LABEL_FIH_CALL_END_1096+0x3a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     592:	2145      	movs	r1, #69	; 0x45
     594:	481f      	ldr	r0, [pc, #124]	; (614 <FIH_LABEL_FIH_CALL_END_1096+0xb2>)
     596:	f007 fa97 	bl	7ac8 <z_log_minimal_printk>
        while (1)
     59a:	e7fe      	b.n	59a <FIH_LABEL_FIH_CALL_END_1096+0x38>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     59c:	4669      	mov	r1, sp
     59e:	f89d 0008 	ldrb.w	r0, [sp, #8]
     5a2:	f000 f847 	bl	634 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     5a6:	9b00      	ldr	r3, [sp, #0]
     5a8:	9c03      	ldr	r4, [sp, #12]
     5aa:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     5ac:	9b01      	ldr	r3, [sp, #4]
     5ae:	891d      	ldrh	r5, [r3, #8]
    sys_clock_disable();
     5b0:	f007 fbe1 	bl	7d76 <sys_clock_disable>
                                     rsp->br_image_off +
     5b4:	1966      	adds	r6, r4, r5
    nrf_cleanup_peripheral();
     5b6:	f000 ff2f 	bl	1418 <nrf_cleanup_peripheral>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     5ba:	f04f 0220 	mov.w	r2, #32
     5be:	f3ef 8311 	mrs	r3, BASEPRI
     5c2:	f382 8811 	msr	BASEPRI, r2
     5c6:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     5ca:	5963      	ldr	r3, [r4, r5]
     5cc:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     5d0:	6873      	ldr	r3, [r6, #4]
     5d2:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     5d4:	2145      	movs	r1, #69	; 0x45
     5d6:	4810      	ldr	r0, [pc, #64]	; (618 <FIH_LABEL_FIH_CALL_END_1096+0xb6>)
     5d8:	f007 fa76 	bl	7ac8 <z_log_minimal_printk>
    while (1)
     5dc:	e7fe      	b.n	5dc <FIH_LABEL_FIH_CALL_END_1096+0x7a>
     5de:	bf00      	nop
     5e0:	50018000 	.word	0x50018000
     5e4:	6e524635 	.word	0x6e524635
     5e8:	000094bf 	.word	0x000094bf
     5ec:	000094d8 	.word	0x000094d8
     5f0:	000094eb 	.word	0x000094eb
     5f4:	00009498 	.word	0x00009498
     5f8:	200147f0 	.word	0x200147f0
     5fc:	0000950a 	.word	0x0000950a
     600:	000090e8 	.word	0x000090e8
     604:	200147f8 	.word	0x200147f8
     608:	0000952e 	.word	0x0000952e
     60c:	00009551 	.word	0x00009551
     610:	00009580 	.word	0x00009580
     614:	000095a5 	.word	0x000095a5
     618:	000095d8 	.word	0x000095d8

0000061c <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     61c:	b510      	push	{r4, lr}
    if (!flash_dev) {
     61e:	4c04      	ldr	r4, [pc, #16]	; (630 <flash_device_get_binding+0x14>)
     620:	6823      	ldr	r3, [r4, #0]
     622:	b913      	cbnz	r3, 62a <flash_device_get_binding+0xe>
     624:	f004 fa0c 	bl	4a40 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     628:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     62a:	6820      	ldr	r0, [r4, #0]
     62c:	bd10      	pop	{r4, pc}
     62e:	bf00      	nop
     630:	200147f4 	.word	0x200147f4

00000634 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     634:	4602      	mov	r2, r0
{
     636:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     638:	b138      	cbz	r0, 64a <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     63a:	4805      	ldr	r0, [pc, #20]	; (650 <flash_device_base+0x1c>)
     63c:	2300      	movs	r3, #0
     63e:	2145      	movs	r1, #69	; 0x45
     640:	f007 fa42 	bl	7ac8 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     644:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     648:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     64a:	6008      	str	r0, [r1, #0]
    return 0;
     64c:	e7fc      	b.n	648 <flash_device_base+0x14>
     64e:	bf00      	nop
     650:	000095fb 	.word	0x000095fb

00000654 <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     656:	4a07      	ldr	r2, [pc, #28]	; (674 <flash_area_sector_from_off+0x20>)
{
     658:	4603      	mov	r3, r0
     65a:	460c      	mov	r4, r1
    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     65c:	6810      	ldr	r0, [r2, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     65e:	4619      	mov	r1, r3
     660:	aa01      	add	r2, sp, #4
     662:	f007 fee8 	bl	8436 <z_impl_flash_get_page_info_by_offs>
    if (rc) {
     666:	b918      	cbnz	r0, 670 <flash_area_sector_from_off+0x1c>
        return rc;
    }

    sector->fs_off = page.start_offset;
     668:	9b01      	ldr	r3, [sp, #4]
     66a:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     66c:	9b02      	ldr	r3, [sp, #8]
     66e:	6063      	str	r3, [r4, #4]

    return rc;
}
     670:	b004      	add	sp, #16
     672:	bd10      	pop	{r4, pc}
     674:	200147f4 	.word	0x200147f4

00000678 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     67c:	461e      	mov	r6, r3
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     67e:	4b82      	ldr	r3, [pc, #520]	; (888 <FIH_LABEL_FIH_CALL_END_881+0x28>)
{
     680:	b0db      	sub	sp, #364	; 0x16c
     682:	4614      	mov	r4, r2
     684:	e9dd 5766 	ldrd	r5, r7, [sp, #408]	; 0x198
    fih_int valid_signature = FIH_FAILURE;
     688:	f8d3 8000 	ldr.w	r8, [r3]
{
     68c:	f8dd b1a0 	ldr.w	fp, [sp, #416]	; 0x1a0
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     690:	f000 fe8c 	bl	13ac <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     694:	2201      	movs	r2, #1
     696:	4b7d      	ldr	r3, [pc, #500]	; (88c <FIH_LABEL_FIH_CALL_END_881+0x2c>)
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     698:	a83a      	add	r0, sp, #232	; 0xe8
    NRF_CRYPTOCELL->ENABLE=1;
     69a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     69e:	f005 fc99 	bl	5fd4 <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     6a2:	b135      	cbz	r5, 6b2 <bootutil_img_validate+0x3a>
     6a4:	2f00      	cmp	r7, #0
     6a6:	dd04      	ble.n	6b2 <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     6a8:	463a      	mov	r2, r7
     6aa:	4629      	mov	r1, r5
     6ac:	a83a      	add	r0, sp, #232	; 0xe8
     6ae:	f007 f8c8 	bl	7842 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     6b2:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     6b6:	8963      	ldrh	r3, [r4, #10]
    size = hdr_size = hdr->ih_hdr_size;
     6b8:	8927      	ldrh	r7, [r4, #8]
     6ba:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
     6bc:	68e3      	ldr	r3, [r4, #12]
     6be:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
     6c0:	454f      	cmp	r7, r9
     6c2:	d84f      	bhi.n	764 <FIH_LABEL_FIH_CALL_END_372+0xc>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     6c4:	a90d      	add	r1, sp, #52	; 0x34
     6c6:	a83a      	add	r0, sp, #232	; 0xe8
     6c8:	f005 fcf6 	bl	60b8 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     6cc:	2200      	movs	r2, #0
     6ce:	4b6f      	ldr	r3, [pc, #444]	; (88c <FIH_LABEL_FIH_CALL_END_881+0x2c>)
     6d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     6d4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     6d8:	f1bb 0f00 	cmp.w	fp, #0
     6dc:	d004      	beq.n	6e8 <bootutil_img_validate+0x70>
        memcpy(out_hash, hash, 32);
     6de:	2220      	movs	r2, #32
     6e0:	4658      	mov	r0, fp
     6e2:	a90d      	add	r1, sp, #52	; 0x34
     6e4:	f007 fdff 	bl	82e6 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     6e8:	2300      	movs	r3, #0
     6ea:	4632      	mov	r2, r6
     6ec:	9300      	str	r3, [sp, #0]
     6ee:	4621      	mov	r1, r4
     6f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
     6f4:	a807      	add	r0, sp, #28
     6f6:	f006 fd5d 	bl	71b4 <bootutil_tlv_iter_begin>
    if (rc) {
     6fa:	4605      	mov	r5, r0
     6fc:	2800      	cmp	r0, #0
     6fe:	d143      	bne.n	788 <FIH_LABEL_FIH_CALL_END_372+0x30>
    int key_id = -1;
     700:	f04f 37ff 	mov.w	r7, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     704:	f8df b190 	ldr.w	fp, [pc, #400]	; 898 <FIH_LABEL_FIH_CALL_END_881+0x38>
     708:	f8df 9180 	ldr.w	r9, [pc, #384]	; 88c <FIH_LABEL_FIH_CALL_END_881+0x2c>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     70c:	f10d 0316 	add.w	r3, sp, #22
     710:	aa05      	add	r2, sp, #20
     712:	a906      	add	r1, sp, #24
     714:	a807      	add	r0, sp, #28
     716:	f006 fd99 	bl	724c <bootutil_tlv_iter_next>
        if (rc < 0) {
     71a:	1e04      	subs	r4, r0, #0
     71c:	f2c0 80b1 	blt.w	882 <FIH_LABEL_FIH_CALL_END_881+0x22>
        } else if (rc > 0) {
     720:	f040 80a1 	bne.w	866 <FIH_LABEL_FIH_CALL_END_881+0x6>
        if (type == IMAGE_TLV_SHA256) {
     724:	f8bd a016 	ldrh.w	sl, [sp, #22]
     728:	f1ba 0f10 	cmp.w	sl, #16
     72c:	d137      	bne.n	79e <FIH_LABEL_FIH_CALL_END_372+0x46>
            if (len != sizeof(hash)) {
     72e:	f8bd 5014 	ldrh.w	r5, [sp, #20]
     732:	2d20      	cmp	r5, #32
     734:	f040 80a1 	bne.w	87a <FIH_LABEL_FIH_CALL_END_881+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     738:	462b      	mov	r3, r5
     73a:	4630      	mov	r0, r6
     73c:	9906      	ldr	r1, [sp, #24]
     73e:	aa3a      	add	r2, sp, #232	; 0xe8
     740:	f007 f9f2 	bl	7b28 <flash_area_read>
            if (rc) {
     744:	4604      	mov	r4, r0
     746:	2800      	cmp	r0, #0
     748:	f040 809b 	bne.w	882 <FIH_LABEL_FIH_CALL_END_881+0x22>

0000074c <FIH_LABEL_FIH_CALL_START_355>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     74c:	462a      	mov	r2, r5
     74e:	a93a      	add	r1, sp, #232	; 0xe8
     750:	a80d      	add	r0, sp, #52	; 0x34
     752:	f006 fdf2 	bl	733a <boot_fih_memequal>
     756:	4605      	mov	r5, r0

00000758 <FIH_LABEL_FIH_CALL_END_372>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     758:	4b4d      	ldr	r3, [pc, #308]	; (890 <FIH_LABEL_FIH_CALL_END_881+0x30>)
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	4283      	cmp	r3, r0
     75e:	d113      	bne.n	788 <FIH_LABEL_FIH_CALL_END_372+0x30>
            sha256_valid = 1;
     760:	2501      	movs	r5, #1
     762:	e7d3      	b.n	70c <bootutil_img_validate+0x94>
        if (blk_sz > tmp_buf_sz) {
     764:	9b65      	ldr	r3, [sp, #404]	; 0x194
        blk_sz = size - off;
     766:	eba7 0a09 	sub.w	sl, r7, r9
     76a:	459a      	cmp	sl, r3
     76c:	bf28      	it	cs
     76e:	469a      	movcs	sl, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     770:	4649      	mov	r1, r9
     772:	4653      	mov	r3, sl
     774:	4630      	mov	r0, r6
     776:	9a64      	ldr	r2, [sp, #400]	; 0x190
     778:	f007 f9d6 	bl	7b28 <flash_area_read>
        if (rc) {
     77c:	4605      	mov	r5, r0
     77e:	b138      	cbz	r0, 790 <FIH_LABEL_FIH_CALL_END_372+0x38>
     780:	2200      	movs	r2, #0
     782:	4b42      	ldr	r3, [pc, #264]	; (88c <FIH_LABEL_FIH_CALL_END_881+0x2c>)
     784:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     788:	4628      	mov	r0, r5
     78a:	b05b      	add	sp, #364	; 0x16c
     78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     790:	4652      	mov	r2, sl
     792:	9964      	ldr	r1, [sp, #400]	; 0x190
     794:	a83a      	add	r0, sp, #232	; 0xe8
     796:	f007 f854 	bl	7842 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     79a:	44d1      	add	r9, sl
     79c:	e790      	b.n	6c0 <bootutil_img_validate+0x48>
        } else if (type == IMAGE_TLV_KEYHASH) {
     79e:	f1ba 0f01 	cmp.w	sl, #1
     7a2:	d13e      	bne.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
            if (len > 32) {
     7a4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     7a8:	2b20      	cmp	r3, #32
     7aa:	d866      	bhi.n	87a <FIH_LABEL_FIH_CALL_END_881+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     7ac:	4630      	mov	r0, r6
     7ae:	9906      	ldr	r1, [sp, #24]
     7b0:	aa3a      	add	r2, sp, #232	; 0xe8
     7b2:	f007 f9b9 	bl	7b28 <flash_area_read>
            if (rc) {
     7b6:	4604      	mov	r4, r0
     7b8:	2800      	cmp	r0, #0
     7ba:	d162      	bne.n	882 <FIH_LABEL_FIH_CALL_END_881+0x22>
            key_id = bootutil_find_key(buf, len);
     7bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    if (keyhash_len > 32) {
     7c0:	2b20      	cmp	r3, #32
            key_id = bootutil_find_key(buf, len);
     7c2:	9302      	str	r3, [sp, #8]
    if (keyhash_len > 32) {
     7c4:	d809      	bhi.n	7da <FIH_LABEL_FIH_CALL_END_372+0x82>
    for (i = 0; i < bootutil_key_cnt; i++) {
     7c6:	f8db 3000 	ldr.w	r3, [fp]
     7ca:	4f32      	ldr	r7, [pc, #200]	; (894 <FIH_LABEL_FIH_CALL_END_881+0x34>)
     7cc:	9303      	str	r3, [sp, #12]
     7ce:	9b03      	ldr	r3, [sp, #12]
     7d0:	429c      	cmp	r4, r3
     7d2:	db05      	blt.n	7e0 <FIH_LABEL_FIH_CALL_END_372+0x88>
     7d4:	2300      	movs	r3, #0
     7d6:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500
        return -1;
     7da:	f04f 34ff 	mov.w	r4, #4294967295
     7de:	e01c      	b.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
    cc310_init();
     7e0:	f000 fde4 	bl	13ac <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     7e4:	f8c9 a500 	str.w	sl, [r9, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     7e8:	a81d      	add	r0, sp, #116	; 0x74
     7ea:	f005 fbf3 	bl	5fd4 <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     7ee:	687a      	ldr	r2, [r7, #4]
     7f0:	a81d      	add	r0, sp, #116	; 0x74
     7f2:	6812      	ldr	r2, [r2, #0]
     7f4:	f857 1b08 	ldr.w	r1, [r7], #8
     7f8:	f007 f823 	bl	7842 <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     7fc:	a915      	add	r1, sp, #84	; 0x54
     7fe:	a81d      	add	r0, sp, #116	; 0x74
     800:	f005 fc5a 	bl	60b8 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     804:	2200      	movs	r2, #0
        if (!memcmp(hash, keyhash, keyhash_len)) {
     806:	a93a      	add	r1, sp, #232	; 0xe8
     808:	f8c9 2500 	str.w	r2, [r9, #1280]	; 0x500
     80c:	a815      	add	r0, sp, #84	; 0x54
     80e:	9a02      	ldr	r2, [sp, #8]
     810:	f007 fd42 	bl	8298 <memcmp>
     814:	b918      	cbnz	r0, 81e <CONFIG_ISR_STACK_SIZE+0x1e>
     816:	f8c9 0500 	str.w	r0, [r9, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     81a:	4627      	mov	r7, r4
     81c:	e776      	b.n	70c <bootutil_img_validate+0x94>
    for (i = 0; i < bootutil_key_cnt; i++) {
     81e:	3401      	adds	r4, #1
     820:	e7d5      	b.n	7ce <FIH_LABEL_FIH_CALL_END_372+0x76>
        } else if (type == EXPECTED_SIG_TLV) {
     822:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
     826:	f47f af71 	bne.w	70c <bootutil_img_validate+0x94>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     82a:	2f00      	cmp	r7, #0
     82c:	db18      	blt.n	860 <FIH_LABEL_FIH_CALL_END_881>
     82e:	f8db 3000 	ldr.w	r3, [fp]
     832:	42bb      	cmp	r3, r7
     834:	dd14      	ble.n	860 <FIH_LABEL_FIH_CALL_END_881>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     836:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     83a:	2b80      	cmp	r3, #128	; 0x80
     83c:	d81d      	bhi.n	87a <FIH_LABEL_FIH_CALL_END_881+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     83e:	4630      	mov	r0, r6
     840:	9906      	ldr	r1, [sp, #24]
     842:	aa3a      	add	r2, sp, #232	; 0xe8
     844:	f007 f970 	bl	7b28 <flash_area_read>
            if (rc) {
     848:	4604      	mov	r4, r0
     84a:	b9d0      	cbnz	r0, 882 <FIH_LABEL_FIH_CALL_END_881+0x22>

0000084c <FIH_LABEL_FIH_CALL_START_860>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     84c:	b2ff      	uxtb	r7, r7
     84e:	2120      	movs	r1, #32
     850:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     854:	9700      	str	r7, [sp, #0]
     856:	aa3a      	add	r2, sp, #232	; 0xe8
     858:	a80d      	add	r0, sp, #52	; 0x34
     85a:	f000 f81f 	bl	89c <bootutil_verify_sig>
     85e:	4680      	mov	r8, r0

00000860 <FIH_LABEL_FIH_CALL_END_881>:
                key_id = -1;
     860:	f04f 37ff 	mov.w	r7, #4294967295
     864:	e752      	b.n	70c <bootutil_img_validate+0x94>
    if (rc) {
     866:	b15d      	cbz	r5, 880 <FIH_LABEL_FIH_CALL_END_881+0x20>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     868:	4b09      	ldr	r3, [pc, #36]	; (890 <FIH_LABEL_FIH_CALL_END_881+0x30>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	4543      	cmp	r3, r8
     86e:	d002      	beq.n	876 <FIH_LABEL_FIH_CALL_END_881+0x16>
        return FIH_FAILURE;
     870:	4b05      	ldr	r3, [pc, #20]	; (888 <FIH_LABEL_FIH_CALL_END_881+0x28>)
     872:	f8d3 8000 	ldr.w	r8, [r3]
        return -1;
     876:	4645      	mov	r5, r8
     878:	e786      	b.n	788 <FIH_LABEL_FIH_CALL_END_372+0x30>
                rc = -1;
     87a:	f04f 35ff 	mov.w	r5, #4294967295
    FIH_RET(fih_rc);
     87e:	e783      	b.n	788 <FIH_LABEL_FIH_CALL_END_372+0x30>
    rc = !sha256_valid;
     880:	2401      	movs	r4, #1
        return -1;
     882:	4625      	mov	r5, r4
     884:	e780      	b.n	788 <FIH_LABEL_FIH_CALL_END_372+0x30>
     886:	bf00      	nop
     888:	20014500 	.word	0x20014500
     88c:	50840000 	.word	0x50840000
     890:	200147f8 	.word	0x200147f8
     894:	000090f4 	.word	0x000090f4
     898:	000090f0 	.word	0x000090f0

0000089c <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8a0:	b096      	sub	sp, #88	; 0x58
     8a2:	4617      	mov	r7, r2
     8a4:	461d      	mov	r5, r3
     8a6:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     8aa:	4b35      	ldr	r3, [pc, #212]	; (980 <bootutil_verify_sig+0xe4>)
{
     8ac:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     8ae:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    end = pubkey + *bootutil_keys[key_id].len;
     8b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     8b6:	685b      	ldr	r3, [r3, #4]
{
     8b8:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     8ba:	6818      	ldr	r0, [r3, #0]
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     8bc:	9101      	str	r1, [sp, #4]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     8be:	2330      	movs	r3, #48	; 0x30
     8c0:	4401      	add	r1, r0
     8c2:	aa02      	add	r2, sp, #8
     8c4:	a801      	add	r0, sp, #4
     8c6:	f006 ff4a 	bl	775e <mbedtls_asn1_get_tag>
     8ca:	b120      	cbz	r0, 8d6 <bootutil_verify_sig+0x3a>
    rc = bootutil_parse_eckey(&ctx, &pubkey, end);
#else
    rc = bootutil_import_key(&pubkey, end);
#endif
    if (rc) {
        return -1;
     8cc:	f04f 30ff 	mov.w	r0, #4294967295
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     8d0:	b016      	add	sp, #88	; 0x58
     8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    end = *cp + len;
     8d6:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     8da:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     8dc:	4621      	mov	r1, r4
     8de:	ab06      	add	r3, sp, #24
     8e0:	aa03      	add	r2, sp, #12
     8e2:	a801      	add	r0, sp, #4
     8e4:	f006 ff63 	bl	77ae <mbedtls_asn1_get_alg>
     8e8:	2800      	cmp	r0, #0
     8ea:	d1ef      	bne.n	8cc <bootutil_verify_sig+0x30>
    if (alg.len != sizeof(ec_pubkey_oid) - 1 ||
     8ec:	9a04      	ldr	r2, [sp, #16]
     8ee:	2a07      	cmp	r2, #7
     8f0:	d1ec      	bne.n	8cc <bootutil_verify_sig+0x30>
        memcmp(alg.p, ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     8f2:	4924      	ldr	r1, [pc, #144]	; (984 <bootutil_verify_sig+0xe8>)
     8f4:	9805      	ldr	r0, [sp, #20]
     8f6:	f007 fccf 	bl	8298 <memcmp>
    if (alg.len != sizeof(ec_pubkey_oid) - 1 ||
     8fa:	2800      	cmp	r0, #0
     8fc:	d1e6      	bne.n	8cc <bootutil_verify_sig+0x30>
    if (param.len != sizeof(ec_secp256r1_oid) - 1 ||
     8fe:	9a07      	ldr	r2, [sp, #28]
     900:	2a08      	cmp	r2, #8
     902:	d1e3      	bne.n	8cc <bootutil_verify_sig+0x30>
        memcmp(param.p, ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     904:	4920      	ldr	r1, [pc, #128]	; (988 <bootutil_verify_sig+0xec>)
     906:	9808      	ldr	r0, [sp, #32]
     908:	f007 fcc6 	bl	8298 <memcmp>
    if (param.len != sizeof(ec_secp256r1_oid) - 1 ||
     90c:	2800      	cmp	r0, #0
     90e:	d1dd      	bne.n	8cc <bootutil_verify_sig+0x30>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     910:	4621      	mov	r1, r4
     912:	aa02      	add	r2, sp, #8
     914:	a801      	add	r0, sp, #4
     916:	f006 ff36 	bl	7786 <mbedtls_asn1_get_bitstring_null>
     91a:	2800      	cmp	r0, #0
     91c:	d1d6      	bne.n	8cc <bootutil_verify_sig+0x30>
    if (*cp + len != end) {
     91e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     922:	4413      	add	r3, r2
     924:	429c      	cmp	r4, r3
     926:	d1d1      	bne.n	8cc <bootutil_verify_sig+0x30>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     928:	2a41      	cmp	r2, #65	; 0x41
     92a:	d1cf      	bne.n	8cc <bootutil_verify_sig+0x30>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     92c:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     92e:	2330      	movs	r3, #48	; 0x30
     930:	4629      	mov	r1, r5
     932:	aa03      	add	r2, sp, #12
     934:	a802      	add	r0, sp, #8
     936:	9702      	str	r7, [sp, #8]
     938:	f006 ff11 	bl	775e <mbedtls_asn1_get_tag>
    if (rc) {
     93c:	2800      	cmp	r0, #0
     93e:	d1c5      	bne.n	8cc <bootutil_verify_sig+0x30>
    if (cp + len > end) {
     940:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     944:	4413      	add	r3, r2
     946:	429d      	cmp	r5, r3
     948:	d3c0      	bcc.n	8cc <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature, &cp, end);
     94a:	462a      	mov	r2, r5
     94c:	a902      	add	r1, sp, #8
     94e:	a806      	add	r0, sp, #24
     950:	f006 fcc7 	bl	72e2 <bootutil_read_bigint>
    if (rc) {
     954:	2800      	cmp	r0, #0
     956:	d1b9      	bne.n	8cc <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     958:	462a      	mov	r2, r5
     95a:	a902      	add	r1, sp, #8
     95c:	a80e      	add	r0, sp, #56	; 0x38
     95e:	f006 fcc0 	bl	72e2 <bootutil_read_bigint>
    if (rc) {
     962:	2800      	cmp	r0, #0
     964:	d1b2      	bne.n	8cc <bootutil_verify_sig+0x30>
    if (hlen != NUM_ECC_BYTES) {
     966:	2e20      	cmp	r6, #32
     968:	d1b0      	bne.n	8cc <bootutil_verify_sig+0x30>
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     96a:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     96c:	780b      	ldrb	r3, [r1, #0]
     96e:	2b04      	cmp	r3, #4
     970:	d1ac      	bne.n	8cc <bootutil_verify_sig+0x30>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     972:	4633      	mov	r3, r6
     974:	4640      	mov	r0, r8
     976:	aa06      	add	r2, sp, #24
     978:	3101      	adds	r1, #1
     97a:	f000 fd2f 	bl	13dc <cc310_ecdsa_verify_secp256r1>
     97e:	e7a7      	b.n	8d0 <bootutil_verify_sig+0x34>
     980:	000090f4 	.word	0x000090f4
     984:	0000962a 	.word	0x0000962a
     988:	00009621 	.word	0x00009621

0000098c <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     990:	2305      	movs	r3, #5
{
     992:	b086      	sub	sp, #24
     994:	460d      	mov	r5, r1
     996:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     998:	2600      	movs	r6, #0
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     99a:	f8df 806c 	ldr.w	r8, [pc, #108]	; a08 <boot_read_swap_size+0x7c>
    uint8_t areas[2] = {
     99e:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     9a2:	f817 0b01 	ldrb.w	r0, [r7], #1
     9a6:	a901      	add	r1, sp, #4
     9a8:	f001 fa30 	bl	1e0c <flash_area_open>
        if (rc != 0) {
     9ac:	4604      	mov	r4, r0
     9ae:	b9d8      	cbnz	r0, 9e8 <boot_read_swap_size+0x5c>
        off = boot_magic_off(*fap);
     9b0:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     9b2:	2310      	movs	r3, #16
    return fap->fa_size - BOOT_MAGIC_SZ;
     9b4:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     9b6:	aa02      	add	r2, sp, #8
     9b8:	3910      	subs	r1, #16
     9ba:	f007 f8b5 	bl	7b28 <flash_area_read>
        if (rc != 0) {
     9be:	4604      	mov	r4, r0
     9c0:	b128      	cbz	r0, 9ce <boot_read_swap_size+0x42>

    rc = boot_find_status(image_index, &fap);
    if (rc == 0) {
        off = boot_swap_size_off(fap);
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
     9c2:	9801      	ldr	r0, [sp, #4]
     9c4:	f007 f8af 	bl	7b26 <flash_area_close>
     9c8:	e00e      	b.n	9e8 <boot_read_swap_size+0x5c>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9ca:	2601      	movs	r6, #1
     9cc:	e7e9      	b.n	9a2 <boot_read_swap_size+0x16>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     9ce:	2210      	movs	r2, #16
     9d0:	4641      	mov	r1, r8
     9d2:	a802      	add	r0, sp, #8
     9d4:	f007 fc60 	bl	8298 <memcmp>
     9d8:	b150      	cbz	r0, 9f0 <boot_read_swap_size+0x64>
        flash_area_close(*fap);
     9da:	9801      	ldr	r0, [sp, #4]
     9dc:	f007 f8a3 	bl	7b26 <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9e0:	2e00      	cmp	r6, #0
     9e2:	d0f2      	beq.n	9ca <boot_read_swap_size+0x3e>
    return -1;
     9e4:	f04f 34ff 	mov.w	r4, #4294967295
    }

    return rc;
}
     9e8:	4620      	mov	r0, r4
     9ea:	b006      	add	sp, #24
     9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     9f0:	9801      	ldr	r0, [sp, #4]
     9f2:	f007 fecf 	bl	8794 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     9f6:	2304      	movs	r3, #4
     9f8:	f1a0 0108 	sub.w	r1, r0, #8
     9fc:	462a      	mov	r2, r5
     9fe:	9801      	ldr	r0, [sp, #4]
     a00:	f007 f892 	bl	7b28 <flash_area_read>
     a04:	4604      	mov	r4, r0
     a06:	e7dc      	b.n	9c2 <boot_read_swap_size+0x36>
     a08:	000092e8 	.word	0x000092e8

00000a0c <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     a10:	4b35      	ldr	r3, [pc, #212]	; (ae8 <FIH_LABEL_FIH_CALL_END_437+0x76>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     a12:	b088      	sub	sp, #32
     a14:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a16:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     a18:	460c      	mov	r4, r1
    fih_int fih_rc = FIH_FAILURE;
     a1a:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a1c:	f006 fbc0 	bl	71a0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     a20:	a906      	add	r1, sp, #24
     a22:	b2c0      	uxtb	r0, r0
     a24:	f001 f9f2 	bl	1e0c <flash_area_open>
    if (rc != 0) {
     a28:	2800      	cmp	r0, #0
     a2a:	d157      	bne.n	adc <FIH_LABEL_FIH_CALL_END_437+0x6a>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     a2c:	4621      	mov	r1, r4
     a2e:	f006 fbb7 	bl	71a0 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     a32:	252c      	movs	r5, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     a34:	a907      	add	r1, sp, #28
     a36:	b2c0      	uxtb	r0, r0
     a38:	fb05 6504 	mla	r5, r5, r4, r6
     a3c:	f001 f9e6 	bl	1e0c <flash_area_open>
    if (rc != 0) {
     a40:	2800      	cmp	r0, #0
     a42:	d033      	beq.n	aac <FIH_LABEL_FIH_CALL_END_437+0x3a>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a44:	272c      	movs	r7, #44	; 0x2c
     a46:	4367      	muls	r7, r4
     a48:	eb06 0807 	add.w	r8, r6, r7
     a4c:	f8d8 1010 	ldr.w	r1, [r8, #16]
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, fih_int_encode(BOOT_HOOK_REGULAR),
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, BOOT_HOOK_REGULAR))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
     a50:	9b06      	ldr	r3, [sp, #24]
    if (boot_check_header_erased(state, slot) == 0 ||
     a52:	f011 0110 	ands.w	r1, r1, #16
     a56:	d138      	bne.n	aca <FIH_LABEL_FIH_CALL_END_437+0x58>

00000a58 <FIH_LABEL_FIH_CALL_START_388>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a58:	f44f 7280 	mov.w	r2, #256	; 0x100
     a5c:	9201      	str	r2, [sp, #4]
     a5e:	4a23      	ldr	r2, [pc, #140]	; (aec <FIH_LABEL_FIH_CALL_END_437+0x7a>)
     a60:	4608      	mov	r0, r1
     a62:	9200      	str	r2, [sp, #0]
     a64:	e9cd 1103 	strd	r1, r1, [sp, #12]
     a68:	462a      	mov	r2, r5
     a6a:	9102      	str	r1, [sp, #8]
     a6c:	f7ff fe04 	bl	678 <bootutil_img_validate>
     a70:	4605      	mov	r5, r0

00000a72 <FIH_LABEL_FIH_CALL_END_437>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a72:	4b1f      	ldr	r3, [pc, #124]	; (af0 <FIH_LABEL_FIH_CALL_END_437+0x7e>)
     a74:	59f2      	ldr	r2, [r6, r7]
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a76:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a78:	429a      	cmp	r2, r3
     a7a:	d10c      	bne.n	a96 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a7c:	f8d8 200c 	ldr.w	r2, [r8, #12]
     a80:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    if (a > UINT32_MAX - b) {
     a84:	189b      	adds	r3, r3, r2
     a86:	d206      	bcs.n	a96 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (size >= fap->fa_size) {
     a88:	6882      	ldr	r2, [r0, #8]
     a8a:	4293      	cmp	r3, r2
     a8c:	d203      	bcs.n	a96 <FIH_LABEL_FIH_CALL_END_437+0x24>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a8e:	4b19      	ldr	r3, [pc, #100]	; (af4 <FIH_LABEL_FIH_CALL_END_437+0x82>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	42ab      	cmp	r3, r5
     a94:	d01f      	beq.n	ad6 <FIH_LABEL_FIH_CALL_END_437+0x64>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a96:	b32c      	cbz	r4, ae4 <FIH_LABEL_FIH_CALL_END_437+0x72>
            flash_area_erase(fap, 0, fap->fa_size);
     a98:	6882      	ldr	r2, [r0, #8]
     a9a:	2100      	movs	r1, #0
     a9c:	f007 f893 	bl	7bc6 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     aa0:	4a15      	ldr	r2, [pc, #84]	; (af8 <FIH_LABEL_FIH_CALL_END_437+0x86>)
     aa2:	2145      	movs	r1, #69	; 0x45
     aa4:	4815      	ldr	r0, [pc, #84]	; (afc <FIH_LABEL_FIH_CALL_END_437+0x8a>)
     aa6:	f007 f80f 	bl	7ac8 <z_log_minimal_printk>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        fih_rc = fih_int_encode(1);
        goto out;
     aaa:	e013      	b.n	ad4 <FIH_LABEL_FIH_CALL_END_437+0x62>
    erased_val = flash_area_erased_val(fap);
     aac:	9807      	ldr	r0, [sp, #28]
     aae:	f007 f8c2 	bl	7c36 <flash_area_erased_val>
     ab2:	4607      	mov	r7, r0
    flash_area_close(fap);
     ab4:	9807      	ldr	r0, [sp, #28]
     ab6:	f007 f836 	bl	7b26 <flash_area_close>
    for (i = 0; i < len; i++) {
     aba:	1e6b      	subs	r3, r5, #1
     abc:	1cea      	adds	r2, r5, #3
        if (val != p[i]) {
     abe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     ac2:	42b9      	cmp	r1, r7
     ac4:	d1be      	bne.n	a44 <boot_validate_slot.isra.0+0x38>
    for (i = 0; i < len; i++) {
     ac6:	4293      	cmp	r3, r2
     ac8:	d1f9      	bne.n	abe <FIH_LABEL_FIH_CALL_END_437+0x4c>
        if (slot != BOOT_PRIMARY_SLOT) {
     aca:	b11c      	cbz	r4, ad4 <FIH_LABEL_FIH_CALL_END_437+0x62>
            swap_erase_trailer_sectors(state, fap);
     acc:	4630      	mov	r0, r6
     ace:	9906      	ldr	r1, [sp, #24]
     ad0:	f006 fd29 	bl	7526 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     ad4:	2501      	movs	r5, #1
    }

out:
    flash_area_close(fap);
     ad6:	9806      	ldr	r0, [sp, #24]
     ad8:	f007 f825 	bl	7b26 <flash_area_close>

    FIH_RET(fih_rc);
}
     adc:	4628      	mov	r0, r5
     ade:	b008      	add	sp, #32
     ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     ae4:	4a06      	ldr	r2, [pc, #24]	; (b00 <FIH_LABEL_FIH_CALL_END_437+0x8e>)
     ae6:	e7dc      	b.n	aa2 <FIH_LABEL_FIH_CALL_END_437+0x30>
     ae8:	20014500 	.word	0x20014500
     aec:	2001676a 	.word	0x2001676a
     af0:	96f3b83d 	.word	0x96f3b83d
     af4:	200147f8 	.word	0x200147f8
     af8:	0000963a 	.word	0x0000963a
     afc:	00009644 	.word	0x00009644
     b00:	00009632 	.word	0x00009632

00000b04 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
     b06:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     b08:	2100      	movs	r1, #0
{
     b0a:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     b0c:	4628      	mov	r0, r5
    size = copy_size = 0;
     b0e:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     b12:	f006 fcc7 	bl	74a4 <boot_status_is_reset>
     b16:	b330      	cbz	r0, b66 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b18:	4e16      	ldr	r6, [pc, #88]	; (b74 <boot_swap_image+0x70>)
     b1a:	6823      	ldr	r3, [r4, #0]
     b1c:	42b3      	cmp	r3, r6
     b1e:	d103      	bne.n	b28 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     b20:	4620      	mov	r0, r4
     b22:	aa01      	add	r2, sp, #4
     b24:	f006 fc52 	bl	73cc <boot_read_image_size.constprop.0.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     b28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b2a:	42b3      	cmp	r3, r6
     b2c:	d104      	bne.n	b38 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     b2e:	466a      	mov	r2, sp
     b30:	2101      	movs	r1, #1
     b32:	4620      	mov	r0, r4
     b34:	f006 fc4a 	bl	73cc <boot_read_image_size.constprop.0.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     b38:	e9dd 3200 	ldrd	r3, r2, [sp]
     b3c:	4293      	cmp	r3, r2
            copy_size = size;
     b3e:	bf88      	it	hi
     b40:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     b42:	9b01      	ldr	r3, [sp, #4]
     b44:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     b46:	9a01      	ldr	r2, [sp, #4]
     b48:	4629      	mov	r1, r5
     b4a:	4620      	mov	r0, r4
     b4c:	f000 fb30 	bl	11b0 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     b50:	4b09      	ldr	r3, [pc, #36]	; (b78 <boot_swap_image+0x74>)
     b52:	681a      	ldr	r2, [r3, #0]
     b54:	2a00      	cmp	r2, #0
     b56:	dd03      	ble.n	b60 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     b58:	2157      	movs	r1, #87	; 0x57
     b5a:	4808      	ldr	r0, [pc, #32]	; (b7c <boot_swap_image+0x78>)
     b5c:	f006 ffb4 	bl	7ac8 <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     b60:	2000      	movs	r0, #0
     b62:	b002      	add	sp, #8
     b64:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     b66:	f105 0108 	add.w	r1, r5, #8
     b6a:	f7ff ff0f 	bl	98c <boot_read_swap_size>
        copy_size = bs->swap_size;
     b6e:	68ab      	ldr	r3, [r5, #8]
     b70:	9301      	str	r3, [sp, #4]
     b72:	e7e8      	b.n	b46 <boot_swap_image+0x42>
     b74:	96f3b83d 	.word	0x96f3b83d
     b78:	20015c5c 	.word	0x20015c5c
     b7c:	0000966c 	.word	0x0000966c

00000b80 <boot_copy_region>:
{
     b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b84:	4688      	mov	r8, r1
     b86:	4691      	mov	r9, r2
     b88:	469a      	mov	sl, r3
    bytes_copied = 0;
     b8a:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b8c:	f8df b070 	ldr.w	fp, [pc, #112]	; c00 <boot_copy_region+0x80>
     b90:	4c19      	ldr	r4, [pc, #100]	; (bf8 <boot_copy_region+0x78>)
     b92:	4d1a      	ldr	r5, [pc, #104]	; (bfc <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b96:	429e      	cmp	r6, r3
     b98:	d301      	bcc.n	b9e <boot_copy_region+0x1e>
    return 0;
     b9a:	2000      	movs	r0, #0
     b9c:	e00f      	b.n	bbe <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     ba0:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     ba2:	1b9f      	subs	r7, r3, r6
     ba4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     ba8:	bf28      	it	cs
     baa:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     bae:	4a14      	ldr	r2, [pc, #80]	; (c00 <boot_copy_region+0x80>)
     bb0:	463b      	mov	r3, r7
     bb2:	eb06 010a 	add.w	r1, r6, sl
     bb6:	f006 ffb7 	bl	7b28 <flash_area_read>
        if (rc != 0) {
     bba:	b110      	cbz	r0, bc2 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     bbc:	2001      	movs	r0, #1
}
     bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     bc2:	990a      	ldr	r1, [sp, #40]	; 0x28
     bc4:	463b      	mov	r3, r7
     bc6:	465a      	mov	r2, fp
     bc8:	4648      	mov	r0, r9
     bca:	1871      	adds	r1, r6, r1
     bcc:	f006 ffc8 	bl	7b60 <flash_area_write>
        if (rc != 0) {
     bd0:	2800      	cmp	r0, #0
     bd2:	d1f3      	bne.n	bbc <boot_copy_region+0x3c>
     bd4:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     bd8:	443e      	add	r6, r7
     bda:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     bde:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     be2:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     be6:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     bea:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     bee:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     bf2:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     bf6:	e7cd      	b.n	b94 <boot_copy_region+0x14>
     bf8:	50018000 	.word	0x50018000
     bfc:	6e524635 	.word	0x6e524635
     c00:	200157fc 	.word	0x200157fc

00000c04 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     c04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     c08:	4604      	mov	r4, r0
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     c0a:	2260      	movs	r2, #96	; 0x60
{
     c0c:	460e      	mov	r6, r1
    memset(state, 0, sizeof(struct boot_loader_state));
     c0e:	2100      	movs	r1, #0
     c10:	f007 fb74 	bl	82fc <memset>

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c14:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c16:	4b8d      	ldr	r3, [pc, #564]	; (e4c <FIH_LABEL_FIH_CALL_END_2262+0x3c>)
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c18:	4608      	mov	r0, r1
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     c1a:	6263      	str	r3, [r4, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     c1c:	4b8c      	ldr	r3, [pc, #560]	; (e50 <FIH_LABEL_FIH_CALL_END_2262+0x40>)
     c1e:	6523      	str	r3, [r4, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c20:	f006 fabe 	bl	71a0 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c24:	f104 0120 	add.w	r1, r4, #32
     c28:	b2c0      	uxtb	r0, r0
     c2a:	f001 f8ef 	bl	1e0c <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c2e:	2101      	movs	r1, #1
     c30:	2000      	movs	r0, #0
     c32:	f006 fab5 	bl	71a0 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c36:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     c3a:	b2c0      	uxtb	r0, r0
     c3c:	f001 f8e6 	bl	1e0c <flash_area_open>
     c40:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c42:	4620      	mov	r0, r4
     c44:	f006 fc03 	bl	744e <boot_read_sectors>
    if (rc != 0) {
     c48:	4607      	mov	r7, r0
     c4a:	b968      	cbnz	r0, c68 <context_boot_go+0x64>
    rc = boot_read_image_headers(state, false, NULL);
     c4c:	2200      	movs	r2, #0
     c4e:	4620      	mov	r0, r4
     c50:	4611      	mov	r1, r2
     c52:	f006 fba5 	bl	73a0 <boot_read_image_headers>
    if (rc != 0) {
     c56:	4607      	mov	r7, r0
     c58:	b308      	cbz	r0, c9e <context_boot_go+0x9a>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     c5a:	2200      	movs	r2, #0
     c5c:	2157      	movs	r1, #87	; 0x57
     c5e:	487d      	ldr	r0, [pc, #500]	; (e54 <FIH_LABEL_FIH_CALL_END_2262+0x44>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c60:	f006 ff32 	bl	7ac8 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c64:	2301      	movs	r3, #1
     c66:	e090      	b.n	d8a <FIH_LABEL_FIH_CALL_END_2011+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     c68:	f44f 7280 	mov.w	r2, #256	; 0x100
     c6c:	2157      	movs	r1, #87	; 0x57
     c6e:	487a      	ldr	r0, [pc, #488]	; (e58 <FIH_LABEL_FIH_CALL_END_2262+0x48>)
     c70:	f006 ff2a 	bl	7ac8 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c74:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     c76:	429f      	cmp	r7, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c78:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     c7c:	d1e6      	bne.n	c4c <context_boot_go+0x48>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c7e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     c82:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     c84:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     c88:	f200 8082 	bhi.w	d90 <FIH_LABEL_FIH_CALL_END_2011+0x14>
     c8c:	2b01      	cmp	r3, #1
     c8e:	f200 8085 	bhi.w	d9c <FIH_LABEL_FIH_CALL_END_2011+0x20>
     c92:	f000 809c 	beq.w	dce <FIH_LABEL_FIH_CALL_END_2011+0x52>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c96:	23ff      	movs	r3, #255	; 0xff
     c98:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c9c:	e097      	b.n	dce <FIH_LABEL_FIH_CALL_END_2011+0x52>
    if (boot_slots_compatible(state)) {
     c9e:	4620      	mov	r0, r4
     ca0:	f000 f99c 	bl	fdc <boot_slots_compatible>
     ca4:	2800      	cmp	r0, #0
     ca6:	d0dd      	beq.n	c64 <context_boot_go+0x60>
        boot_status_reset(bs);
     ca8:	4668      	mov	r0, sp
     caa:	f006 fbf2 	bl	7492 <boot_status_reset>
        rc = swap_read_status(state, bs);
     cae:	4669      	mov	r1, sp
     cb0:	4620      	mov	r0, r4
     cb2:	f006 fc8d 	bl	75d0 <swap_read_status>
        if (rc != 0) {
     cb6:	b118      	cbz	r0, cc0 <context_boot_go+0xbc>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     cb8:	463a      	mov	r2, r7
     cba:	2157      	movs	r1, #87	; 0x57
     cbc:	4867      	ldr	r0, [pc, #412]	; (e5c <FIH_LABEL_FIH_CALL_END_2262+0x4c>)
     cbe:	e7cf      	b.n	c60 <context_boot_go+0x5c>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     cc0:	4668      	mov	r0, sp
     cc2:	f006 fbef 	bl	74a4 <boot_status_is_reset>
     cc6:	f080 0101 	eor.w	r1, r0, #1
     cca:	466a      	mov	r2, sp
     ccc:	4620      	mov	r0, r4
     cce:	b2c9      	uxtb	r1, r1
     cd0:	f006 fb66 	bl	73a0 <boot_read_image_headers>
        if (rc != 0) {
     cd4:	4602      	mov	r2, r0
     cd6:	2800      	cmp	r0, #0
     cd8:	d1bf      	bne.n	c5a <context_boot_go+0x56>
        if (!boot_status_is_reset(bs)) {
     cda:	4668      	mov	r0, sp
     cdc:	f006 fbe2 	bl	74a4 <boot_status_is_reset>
     ce0:	4607      	mov	r7, r0
     ce2:	bb60      	cbnz	r0, d3e <context_boot_go+0x13a>
    rc = boot_swap_image(state, bs);
     ce4:	4669      	mov	r1, sp
     ce6:	4620      	mov	r0, r4
     ce8:	f7ff ff0c 	bl	b04 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cf0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     cf4:	3b03      	subs	r3, #3
     cf6:	2b01      	cmp	r3, #1
     cf8:	d806      	bhi.n	d08 <context_boot_go+0x104>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cfa:	4638      	mov	r0, r7
     cfc:	f006 fcb6 	bl	766c <swap_set_image_ok>
        if (rc != 0) {
     d00:	b110      	cbz	r0, d08 <context_boot_go+0x104>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d02:	23ff      	movs	r3, #255	; 0xff
     d04:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     d08:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d0c:	3b02      	subs	r3, #2
     d0e:	2b02      	cmp	r3, #2
     d10:	d80b      	bhi.n	d2a <context_boot_go+0x126>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d12:	2000      	movs	r0, #0
     d14:	f006 fc98 	bl	7648 <swap_set_copy_done>
        if (rc != 0) {
     d18:	b138      	cbz	r0, d2a <context_boot_go+0x126>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d1a:	23ff      	movs	r3, #255	; 0xff
     d1c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     d20:	2145      	movs	r1, #69	; 0x45
     d22:	484f      	ldr	r0, [pc, #316]	; (e60 <FIH_LABEL_FIH_CALL_END_2262+0x50>)
     d24:	f006 fed0 	bl	7ac8 <z_log_minimal_printk>
        while (1) {}
     d28:	e7fe      	b.n	d28 <context_boot_go+0x124>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d2a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d2e:	2bff      	cmp	r3, #255	; 0xff
     d30:	d0f6      	beq.n	d20 <context_boot_go+0x11c>
            rc = boot_read_image_headers(state, false, bs);
     d32:	466a      	mov	r2, sp
     d34:	2100      	movs	r1, #0
     d36:	4620      	mov	r0, r4
     d38:	f006 fb32 	bl	73a0 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d3c:	e792      	b.n	c64 <context_boot_go+0x60>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d3e:	f89d 8007 	ldrb.w	r8, [sp, #7]
     d42:	f1b8 0f01 	cmp.w	r8, #1
     d46:	d115      	bne.n	d74 <FIH_LABEL_FIH_CALL_START_1996>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d48:	4610      	mov	r0, r2
     d4a:	f003 fc2d 	bl	45a8 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d4e:	1e83      	subs	r3, r0, #2
     d50:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d52:	4607      	mov	r7, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d54:	d80b      	bhi.n	d6e <FIH_LABEL_FIH_CALL_END_1960+0x10>

00000d56 <FIH_LABEL_FIH_CALL_START_1945>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d56:	4641      	mov	r1, r8
     d58:	4620      	mov	r0, r4
     d5a:	f7ff fe57 	bl	a0c <boot_validate_slot.isra.0>

00000d5e <FIH_LABEL_FIH_CALL_END_1960>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d5e:	4b41      	ldr	r3, [pc, #260]	; (e64 <FIH_LABEL_FIH_CALL_END_2262+0x54>)
     d60:	681b      	ldr	r3, [r3, #0]
     d62:	4298      	cmp	r0, r3
     d64:	d003      	beq.n	d6e <FIH_LABEL_FIH_CALL_END_1960+0x10>
                swap_type = BOOT_SWAP_TYPE_NONE;
     d66:	2801      	cmp	r0, #1
     d68:	bf14      	ite	ne
     d6a:	2705      	movne	r7, #5
     d6c:	2701      	moveq	r7, #1
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d6e:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
     d72:	e784      	b.n	c7e <context_boot_go+0x7a>

00000d74 <FIH_LABEL_FIH_CALL_START_1996>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d74:	2101      	movs	r1, #1
     d76:	4620      	mov	r0, r4
     d78:	f7ff fe48 	bl	a0c <boot_validate_slot.isra.0>

00000d7c <FIH_LABEL_FIH_CALL_END_2011>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d7c:	4b39      	ldr	r3, [pc, #228]	; (e64 <FIH_LABEL_FIH_CALL_END_2262+0x54>)
     d7e:	681b      	ldr	r3, [r3, #0]
     d80:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d82:	bf14      	ite	ne
     d84:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d86:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d8a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d8e:	e776      	b.n	c7e <context_boot_go+0x7a>
        switch (BOOT_SWAP_TYPE(state)) {
     d90:	2b05      	cmp	r3, #5
     d92:	d180      	bne.n	c96 <context_boot_go+0x92>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d94:	2000      	movs	r0, #0
     d96:	f006 fc69 	bl	766c <swap_set_image_ok>
     d9a:	e013      	b.n	dc4 <FIH_LABEL_FIH_CALL_END_2011+0x48>
        rc = boot_swap_image(state, bs);
     d9c:	4669      	mov	r1, sp
     d9e:	4620      	mov	r0, r4
     da0:	f7ff feb0 	bl	b04 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     da4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     da8:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     daa:	1eda      	subs	r2, r3, #3
     dac:	2a01      	cmp	r2, #1
     dae:	d80c      	bhi.n	dca <FIH_LABEL_FIH_CALL_END_2011+0x4e>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     db0:	2000      	movs	r0, #0
     db2:	f006 fc5b 	bl	766c <swap_set_image_ok>
        if (rc != 0) {
     db6:	4605      	mov	r5, r0
     db8:	2800      	cmp	r0, #0
     dba:	f47f af6c 	bne.w	c96 <context_boot_go+0x92>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     dbe:	2000      	movs	r0, #0
     dc0:	f006 fc42 	bl	7648 <swap_set_copy_done>
            if (rc != 0) {
     dc4:	4605      	mov	r5, r0
     dc6:	b110      	cbz	r0, dce <FIH_LABEL_FIH_CALL_END_2011+0x52>
     dc8:	e765      	b.n	c96 <context_boot_go+0x92>
    if (BOOT_IS_UPGRADE(swap_type)) {
     dca:	2b02      	cmp	r3, #2
     dcc:	d0f7      	beq.n	dbe <FIH_LABEL_FIH_CALL_END_2011+0x42>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     dce:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     dd2:	2bff      	cmp	r3, #255	; 0xff
     dd4:	d104      	bne.n	de0 <FIH_LABEL_FIH_CALL_END_2011+0x64>
            BOOT_LOG_ERR("panic!");
     dd6:	2145      	movs	r1, #69	; 0x45
     dd8:	4821      	ldr	r0, [pc, #132]	; (e60 <FIH_LABEL_FIH_CALL_END_2262+0x50>)
     dda:	f006 fe75 	bl	7ac8 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     dde:	e7fe      	b.n	dde <FIH_LABEL_FIH_CALL_END_2011+0x62>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     de0:	2b01      	cmp	r3, #1
     de2:	d010      	beq.n	e06 <FIH_LABEL_FIH_CALL_START_2247>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     de4:	466a      	mov	r2, sp
     de6:	2100      	movs	r1, #0
     de8:	4620      	mov	r0, r4
     dea:	f006 fad9 	bl	73a0 <boot_read_image_headers>
            if (rc != 0) {
     dee:	4605      	mov	r5, r0
     df0:	b148      	cbz	r0, e06 <FIH_LABEL_FIH_CALL_START_2247>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     df2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     df4:	f006 fe97 	bl	7b26 <flash_area_close>
     df8:	6a20      	ldr	r0, [r4, #32]
     dfa:	f006 fe94 	bl	7b26 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     dfe:	4628      	mov	r0, r5
     e00:	b004      	add	sp, #16
     e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000e06 <FIH_LABEL_FIH_CALL_START_2247>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     e06:	2100      	movs	r1, #0
     e08:	4620      	mov	r0, r4
     e0a:	f7ff fdff 	bl	a0c <boot_validate_slot.isra.0>
     e0e:	4607      	mov	r7, r0

00000e10 <FIH_LABEL_FIH_CALL_END_2262>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     e10:	f8df 8050 	ldr.w	r8, [pc, #80]	; e64 <FIH_LABEL_FIH_CALL_END_2262+0x54>
     e14:	f8d8 3000 	ldr.w	r3, [r8]
     e18:	4298      	cmp	r0, r3
     e1a:	d10d      	bne.n	e38 <FIH_LABEL_FIH_CALL_END_2262+0x28>
    memset(&bs, 0, sizeof(struct boot_status));
     e1c:	2210      	movs	r2, #16
     e1e:	2100      	movs	r1, #0
     e20:	4668      	mov	r0, sp
     e22:	f007 fa6b 	bl	82fc <memset>
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, active_slot)->fa_device_id;
     e26:	6a23      	ldr	r3, [r4, #32]
    fih_rc = FIH_SUCCESS;
     e28:	f8d8 5000 	ldr.w	r5, [r8]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, active_slot)->fa_device_id;
     e2c:	785a      	ldrb	r2, [r3, #1]
     e2e:	7132      	strb	r2, [r6, #4]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e30:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     e32:	6034      	str	r4, [r6, #0]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     e34:	60b3      	str	r3, [r6, #8]
    fih_rc = FIH_SUCCESS;
     e36:	e7dc      	b.n	df2 <FIH_LABEL_FIH_CALL_END_2011+0x76>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     e38:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     e3a:	f006 fe74 	bl	7b26 <flash_area_close>
     e3e:	6a20      	ldr	r0, [r4, #32]
     e40:	f006 fe71 	bl	7b26 <flash_area_close>
    if (rc) {
     e44:	2d00      	cmp	r5, #0
     e46:	bf08      	it	eq
     e48:	463d      	moveq	r5, r7
     e4a:	e7d8      	b.n	dfe <FIH_LABEL_FIH_CALL_END_2011+0x82>
     e4c:	20014ffc 	.word	0x20014ffc
     e50:	200147fc 	.word	0x200147fc
     e54:	000096dd 	.word	0x000096dd
     e58:	0000969b 	.word	0x0000969b
     e5c:	00009709 	.word	0x00009709
     e60:	00009733 	.word	0x00009733
     e64:	200147f8 	.word	0x200147f8

00000e68 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     e68:	b508      	push	{r3, lr}
     e6a:	4601      	mov	r1, r0

00000e6c <FIH_LABEL_FIH_CALL_START_2816>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     e6c:	4801      	ldr	r0, [pc, #4]	; (e74 <FIH_LABEL_FIH_CALL_END_2831+0x2>)
     e6e:	f7ff fec9 	bl	c04 <context_boot_go>

00000e72 <FIH_LABEL_FIH_CALL_END_2831>:
    FIH_RET(fih_rc);
}
     e72:	bd08      	pop	{r3, pc}
     e74:	20015bfc 	.word	0x20015bfc

00000e78 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     e78:	b573      	push	{r0, r1, r4, r5, r6, lr}
     e7a:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     e7c:	461d      	mov	r5, r3
     e7e:	b143      	cbz	r3, e92 <boot_read_image_header+0x1a>
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     e80:	795b      	ldrb	r3, [r3, #5]
     e82:	2b01      	cmp	r3, #1
     e84:	d107      	bne.n	e96 <boot_read_image_header+0x1e>
            if (slot == 0 && bs->idx > g_last_idx) {
     e86:	b921      	cbnz	r1, e92 <boot_read_image_header+0x1a>
     e88:	4b20      	ldr	r3, [pc, #128]	; (f0c <boot_read_image_header+0x94>)
     e8a:	682a      	ldr	r2, [r5, #0]
     e8c:	681b      	ldr	r3, [r3, #0]
     e8e:	429a      	cmp	r2, r3
     e90:	d817      	bhi.n	ec2 <boot_read_image_header+0x4a>
    off = 0;
     e92:	2400      	movs	r4, #0
     e94:	e018      	b.n	ec8 <boot_read_image_header+0x50>
                /* second sector */
                off = sz;
            }
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     e96:	2b02      	cmp	r3, #2
     e98:	d1fb      	bne.n	e92 <boot_read_image_header+0x1a>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     e9a:	682b      	ldr	r3, [r5, #0]
     e9c:	2b01      	cmp	r3, #1
     e9e:	d907      	bls.n	eb0 <boot_read_image_header+0x38>
     ea0:	4a1a      	ldr	r2, [pc, #104]	; (f0c <boot_read_image_header+0x94>)
     ea2:	6812      	ldr	r2, [r2, #0]
     ea4:	4293      	cmp	r3, r2
     ea6:	d8f4      	bhi.n	e92 <boot_read_image_header+0x1a>
                if (slot == 0) {
     ea8:	fab1 f181 	clz	r1, r1
     eac:	0949      	lsrs	r1, r1, #5
     eae:	e7f0      	b.n	e92 <boot_read_image_header+0x1a>
                    slot = 1;
                } else {
                    slot = 0;
                }
            } else if (bs->idx == 1) {
     eb0:	d1ef      	bne.n	e92 <boot_read_image_header+0x1a>
                if (slot == 0) {
     eb2:	b131      	cbz	r1, ec2 <boot_read_image_header+0x4a>
                    off = sz;
                }
                if (slot == 1 && bs->state == 2) {
     eb4:	2901      	cmp	r1, #1
     eb6:	d1ec      	bne.n	e92 <boot_read_image_header+0x1a>
     eb8:	7929      	ldrb	r1, [r5, #4]
     eba:	3902      	subs	r1, #2
     ebc:	bf18      	it	ne
     ebe:	2101      	movne	r1, #1
     ec0:	e7e7      	b.n	e92 <boot_read_image_header+0x1a>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     ec2:	2100      	movs	r1, #0
     ec4:	6a43      	ldr	r3, [r0, #36]	; 0x24
     ec6:	685c      	ldr	r4, [r3, #4]
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     ec8:	2000      	movs	r0, #0
     eca:	f006 f969 	bl	71a0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     ece:	a901      	add	r1, sp, #4
     ed0:	b2c0      	uxtb	r0, r0
     ed2:	f000 ff9b 	bl	1e0c <flash_area_open>
    if (rc != 0) {
     ed6:	b130      	cbz	r0, ee6 <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     ed8:	2401      	movs	r4, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     eda:	9801      	ldr	r0, [sp, #4]
     edc:	f006 fe23 	bl	7b26 <flash_area_close>
    return rc;
}
     ee0:	4620      	mov	r0, r4
     ee2:	b002      	add	sp, #8
     ee4:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     ee6:	4621      	mov	r1, r4
     ee8:	2320      	movs	r3, #32
     eea:	4632      	mov	r2, r6
     eec:	9801      	ldr	r0, [sp, #4]
     eee:	f006 fe1b 	bl	7b28 <flash_area_read>
    if (rc != 0) {
     ef2:	4604      	mov	r4, r0
     ef4:	2800      	cmp	r0, #0
     ef6:	d1ef      	bne.n	ed8 <boot_read_image_header+0x60>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     ef8:	2d00      	cmp	r5, #0
     efa:	d0ee      	beq.n	eda <boot_read_image_header+0x62>
     efc:	6834      	ldr	r4, [r6, #0]
     efe:	4b04      	ldr	r3, [pc, #16]	; (f10 <boot_read_image_header+0x98>)
     f00:	1ae4      	subs	r4, r4, r3
     f02:	bf18      	it	ne
     f04:	f04f 34ff 	movne.w	r4, #4294967295
     f08:	e7e7      	b.n	eda <boot_read_image_header+0x62>
     f0a:	bf00      	nop
     f0c:	20014504 	.word	0x20014504
     f10:	96f3b83d 	.word	0x96f3b83d

00000f14 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f18:	4607      	mov	r7, r0
     f1a:	460c      	mov	r4, r1
     f1c:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f1e:	4601      	mov	r1, r0
     f20:	2000      	movs	r0, #0
{
     f22:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f24:	f006 fa10 	bl	7348 <boot_status_entries>
    if (max_entries < 0) {
     f28:	1e05      	subs	r5, r0, #0
     f2a:	db51      	blt.n	fd0 <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     f2c:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     f2e:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     f30:	f006 fa17 	bl	7362 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     f34:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     f38:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     f3c:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     f40:	f04f 34ff 	mov.w	r4, #4294967295
     f44:	1e6b      	subs	r3, r5, #1
     f46:	fb09 0803 	mla	r8, r9, r3, r0
    for (i = max_entries; i > 0; i--) {
     f4a:	b99d      	cbnz	r5, f74 <swap_read_status_bytes+0x60>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     f4c:	f1ba 0f01 	cmp.w	sl, #1
     f50:	dd03      	ble.n	f5a <swap_read_status_bytes+0x46>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     f52:	2145      	movs	r1, #69	; 0x45
     f54:	4820      	ldr	r0, [pc, #128]	; (fd8 <swap_read_status_bytes+0xc4>)
     f56:	f006 fdb7 	bl	7ac8 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     f5a:	1c63      	adds	r3, r4, #1
     f5c:	d006      	beq.n	f6c <swap_read_status_bytes+0x58>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     f5e:	2cff      	cmp	r4, #255	; 0xff
     f60:	dc2a      	bgt.n	fb8 <swap_read_status_bytes+0xa4>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f62:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f66:	3401      	adds	r4, #1
     f68:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f6a:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     f6c:	4628      	mov	r0, r5
     f6e:	b005      	add	sp, #20
     f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     f74:	1e6b      	subs	r3, r5, #1
     f76:	9300      	str	r3, [sp, #0]
     f78:	4641      	mov	r1, r8
     f7a:	2301      	movs	r3, #1
     f7c:	4638      	mov	r0, r7
     f7e:	f10d 020f 	add.w	r2, sp, #15
     f82:	f006 fdd1 	bl	7b28 <flash_area_read>
        if (rc < 0) {
     f86:	1e03      	subs	r3, r0, #0
     f88:	9301      	str	r3, [sp, #4]
     f8a:	db23      	blt.n	fd4 <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     f8c:	2201      	movs	r2, #1
     f8e:	4638      	mov	r0, r7
     f90:	f10d 010f 	add.w	r1, sp, #15
     f94:	f007 fc0f 	bl	87b6 <bootutil_buffer_is_erased>
     f98:	9b01      	ldr	r3, [sp, #4]
     f9a:	b140      	cbz	r0, fae <swap_read_status_bytes+0x9a>
            if (rc != last_rc) {
     f9c:	455b      	cmp	r3, fp
     f9e:	d001      	beq.n	fa4 <swap_read_status_bytes+0x90>
                erased_sections++;
     fa0:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     fa4:	469b      	mov	fp, r3
     fa6:	9d00      	ldr	r5, [sp, #0]
     fa8:	eba8 0809 	sub.w	r8, r8, r9
     fac:	e7cd      	b.n	f4a <swap_read_status_bytes+0x36>
     fae:	f1b4 3fff 	cmp.w	r4, #4294967295
     fb2:	bf08      	it	eq
     fb4:	462c      	moveq	r4, r5
     fb6:	e7f5      	b.n	fa4 <swap_read_status_bytes+0x90>
        bs->op = BOOT_STATUS_OP_SWAP;
     fb8:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fba:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
     fbe:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fc0:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fc2:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fc6:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fc8:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fca:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fcc:	7134      	strb	r4, [r6, #4]
     fce:	e7cd      	b.n	f6c <swap_read_status_bytes+0x58>
        return BOOT_EBADARGS;
     fd0:	2507      	movs	r5, #7
     fd2:	e7cb      	b.n	f6c <swap_read_status_bytes+0x58>
            return BOOT_EFLASH;
     fd4:	2501      	movs	r5, #1
     fd6:	e7c9      	b.n	f6c <swap_read_status_bytes+0x58>
     fd8:	0000973f 	.word	0x0000973f

00000fdc <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
     fdc:	6a81      	ldr	r1, [r0, #40]	; 0x28
     fde:	6d42      	ldr	r2, [r0, #84]	; 0x54
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     fe0:	b538      	push	{r3, r4, r5, lr}
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     fe2:	428a      	cmp	r2, r1
     fe4:	d008      	beq.n	ff8 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     fe6:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     fe8:	428b      	cmp	r3, r1
     fea:	d005      	beq.n	ff8 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     fec:	2157      	movs	r1, #87	; 0x57
     fee:	4814      	ldr	r0, [pc, #80]	; (1040 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x40>)
        return 0;
    }

    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     ff0:	f006 fd6a 	bl	7ac8 <z_log_minimal_printk>
        return 0;
     ff4:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     ff6:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     ff8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
     ffc:	d91c      	bls.n	1038 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x38>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     ffe:	2157      	movs	r1, #87	; 0x57
    1000:	4810      	ldr	r0, [pc, #64]	; (1044 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x44>)
    1002:	e7f5      	b.n	ff0 <boot_slots_compatible+0x14>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    1004:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1006:	6d05      	ldr	r5, [r0, #80]	; 0x50
    1008:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    100c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    1010:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
    1012:	686d      	ldr	r5, [r5, #4]
    1014:	42a5      	cmp	r5, r4
    1016:	d002      	beq.n	101e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1e>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
    1018:	2157      	movs	r1, #87	; 0x57
    101a:	480b      	ldr	r0, [pc, #44]	; (1048 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x48>)
    101c:	e7e8      	b.n	ff0 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
    101e:	3301      	adds	r3, #1
    1020:	429a      	cmp	r2, r3
    1022:	d1ef      	bne.n	1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
    if (num_sectors_pri > num_sectors_sec) {
    1024:	4291      	cmp	r1, r2
    1026:	d905      	bls.n	1034 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34>
    1028:	6a43      	ldr	r3, [r0, #36]	; 0x24
    102a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    102e:	685b      	ldr	r3, [r3, #4]
    1030:	42a3      	cmp	r3, r4
    1032:	d1f1      	bne.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
    return 1;
    1034:	2001      	movs	r0, #1
    1036:	e7de      	b.n	ff6 <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
    1038:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    103a:	461c      	mov	r4, r3
    103c:	e7f0      	b.n	1020 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x20>
    103e:	bf00      	nop
    1040:	00009762 	.word	0x00009762
    1044:	0000979a 	.word	0x0000979a
    1048:	000097c9 	.word	0x000097c9

0000104c <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
    104c:	b500      	push	{lr}
    104e:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1050:	2005      	movs	r0, #5
    1052:	a904      	add	r1, sp, #16
    1054:	f007 fc1e 	bl	8894 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1058:	f89d 2010 	ldrb.w	r2, [sp, #16]
    105c:	2a01      	cmp	r2, #1
    105e:	d041      	beq.n	10e4 <swap_status_source+0x98>
    1060:	4b25      	ldr	r3, [pc, #148]	; (10f8 <swap_status_source+0xac>)
    1062:	4926      	ldr	r1, [pc, #152]	; (10fc <swap_status_source+0xb0>)
    1064:	2a03      	cmp	r2, #3
    1066:	bf08      	it	eq
    1068:	460b      	moveq	r3, r1
    106a:	f89d 2013 	ldrb.w	r2, [sp, #19]
    106e:	2149      	movs	r1, #73	; 0x49
    1070:	9202      	str	r2, [sp, #8]
    1072:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1076:	4822      	ldr	r0, [pc, #136]	; (1100 <swap_status_source+0xb4>)
    1078:	9201      	str	r2, [sp, #4]
    107a:	f89d 2011 	ldrb.w	r2, [sp, #17]
    107e:	9200      	str	r2, [sp, #0]
    1080:	4a20      	ldr	r2, [pc, #128]	; (1104 <swap_status_source+0xb8>)
    1082:	f006 fd21 	bl	7ac8 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1086:	2002      	movs	r0, #2
    1088:	a906      	add	r1, sp, #24
    108a:	f007 fc03 	bl	8894 <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    108e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1092:	2a01      	cmp	r2, #1
    1094:	d028      	beq.n	10e8 <swap_status_source+0x9c>
    1096:	4b18      	ldr	r3, [pc, #96]	; (10f8 <swap_status_source+0xac>)
    1098:	4918      	ldr	r1, [pc, #96]	; (10fc <swap_status_source+0xb0>)
    109a:	2a03      	cmp	r2, #3
    109c:	bf08      	it	eq
    109e:	460b      	moveq	r3, r1
    10a0:	f89d 201b 	ldrb.w	r2, [sp, #27]
    10a4:	2149      	movs	r1, #73	; 0x49
    10a6:	9202      	str	r2, [sp, #8]
    10a8:	f89d 201a 	ldrb.w	r2, [sp, #26]
    10ac:	4814      	ldr	r0, [pc, #80]	; (1100 <swap_status_source+0xb4>)
    10ae:	9201      	str	r2, [sp, #4]
    10b0:	f89d 2019 	ldrb.w	r2, [sp, #25]
    10b4:	9200      	str	r2, [sp, #0]
    10b6:	4a14      	ldr	r2, [pc, #80]	; (1108 <swap_status_source+0xbc>)
    10b8:	f006 fd06 	bl	7ac8 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    10bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    10c0:	2b01      	cmp	r3, #1
    10c2:	d113      	bne.n	10ec <swap_status_source+0xa0>
    10c4:	f89d 3012 	ldrb.w	r3, [sp, #18]
    10c8:	2b03      	cmp	r3, #3
    10ca:	d10f      	bne.n	10ec <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    10cc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    10d0:	2b01      	cmp	r3, #1
    10d2:	d00b      	beq.n	10ec <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    10d4:	480d      	ldr	r0, [pc, #52]	; (110c <swap_status_source+0xc0>)
    10d6:	2149      	movs	r1, #73	; 0x49
    10d8:	f006 fcf6 	bl	7ac8 <z_log_minimal_printk>
        return source;
    10dc:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    10de:	b009      	add	sp, #36	; 0x24
    10e0:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    10e4:	4b0a      	ldr	r3, [pc, #40]	; (1110 <swap_status_source+0xc4>)
    10e6:	e7c0      	b.n	106a <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    10e8:	4b09      	ldr	r3, [pc, #36]	; (1110 <swap_status_source+0xc4>)
    10ea:	e7d9      	b.n	10a0 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    10ec:	4809      	ldr	r0, [pc, #36]	; (1114 <swap_status_source+0xc8>)
    10ee:	2149      	movs	r1, #73	; 0x49
    10f0:	f006 fcea 	bl	7ac8 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    10f4:	2000      	movs	r0, #0
    10f6:	e7f2      	b.n	10de <swap_status_source+0x92>
    10f8:	000097f5 	.word	0x000097f5
    10fc:	000097fe 	.word	0x000097fe
    1100:	00009812 	.word	0x00009812
    1104:	00009804 	.word	0x00009804
    1108:	00009853 	.word	0x00009853
    110c:	00009863 	.word	0x00009863
    1110:	000097f9 	.word	0x000097f9
    1114:	00009882 	.word	0x00009882

00001118 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    1118:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    111a:	684b      	ldr	r3, [r1, #4]
{
    111c:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    111e:	4a1e      	ldr	r2, [pc, #120]	; (1198 <fixup_revert+0x80>)
    1120:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1124:	4293      	cmp	r3, r2
{
    1126:	4606      	mov	r6, r0
    1128:	460d      	mov	r5, r1
    112a:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    112c:	d12f      	bne.n	118e <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    112e:	680b      	ldr	r3, [r1, #0]
    1130:	2b01      	cmp	r3, #1
    1132:	d12c      	bne.n	118e <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1134:	4620      	mov	r0, r4
    1136:	a904      	add	r1, sp, #16
    1138:	f003 f9e6 	bl	4508 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    113c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1140:	2a01      	cmp	r2, #1
    1142:	d026      	beq.n	1192 <fixup_revert+0x7a>
    1144:	4b15      	ldr	r3, [pc, #84]	; (119c <fixup_revert+0x84>)
    1146:	4916      	ldr	r1, [pc, #88]	; (11a0 <fixup_revert+0x88>)
    1148:	2a03      	cmp	r2, #3
    114a:	bf08      	it	eq
    114c:	460b      	moveq	r3, r1
    114e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1152:	2149      	movs	r1, #73	; 0x49
    1154:	9202      	str	r2, [sp, #8]
    1156:	f89d 2012 	ldrb.w	r2, [sp, #18]
    115a:	4812      	ldr	r0, [pc, #72]	; (11a4 <fixup_revert+0x8c>)
    115c:	9201      	str	r2, [sp, #4]
    115e:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1162:	9200      	str	r2, [sp, #0]
    1164:	4a10      	ldr	r2, [pc, #64]	; (11a8 <fixup_revert+0x90>)
    1166:	f006 fcaf 	bl	7ac8 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    116a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    116e:	2b03      	cmp	r3, #3
    1170:	d10d      	bne.n	118e <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1172:	4621      	mov	r1, r4
    1174:	4630      	mov	r0, r6
    1176:	f006 f9d6 	bl	7526 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    117a:	4620      	mov	r0, r4
    117c:	f007 fb81 	bl	8882 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1180:	4620      	mov	r0, r4
    1182:	68a9      	ldr	r1, [r5, #8]
    1184:	f006 f8fd 	bl	7382 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    1188:	4620      	mov	r0, r4
    118a:	f003 f9af 	bl	44ec <boot_write_magic>
        assert(rc == 0);
    }
}
    118e:	b006      	add	sp, #24
    1190:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1192:	4b06      	ldr	r3, [pc, #24]	; (11ac <fixup_revert+0x94>)
    1194:	e7db      	b.n	114e <fixup_revert+0x36>
    1196:	bf00      	nop
    1198:	04000100 	.word	0x04000100
    119c:	000097f5 	.word	0x000097f5
    11a0:	000097fe 	.word	0x000097fe
    11a4:	00009812 	.word	0x00009812
    11a8:	00009853 	.word	0x00009853
    11ac:	000097f9 	.word	0x000097f9

000011b0 <swap_run>:
    11b0:	6a43      	ldr	r3, [r0, #36]	; 0x24

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    11b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b6:	460c      	mov	r4, r1
    11b8:	685e      	ldr	r6, [r3, #4]
    11ba:	4605      	mov	r5, r0
    11bc:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    11be:	2300      	movs	r3, #0
{
    11c0:	b089      	sub	sp, #36	; 0x24
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    11c2:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    11c4:	429a      	cmp	r2, r3
    11c6:	4608      	mov	r0, r1
    11c8:	f101 0101 	add.w	r1, r1, #1
    11cc:	d8f9      	bhi.n	11c2 <swap_run+0x12>
    11ce:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 1398 <swap_run+0x1e8>
    11d2:	f8c8 0000 	str.w	r0, [r8]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    11d6:	4620      	mov	r0, r4
    11d8:	f006 f964 	bl	74a4 <boot_status_is_reset>
    11dc:	b1b8      	cbz	r0, 120e <swap_run+0x5e>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    11de:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    11e0:	f006 f8ad 	bl	733e <boot_trailer_sz>
        sz = 0;
    11e4:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    11e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    11e8:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    11ea:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    11ec:	4282      	cmp	r2, r0
    11ee:	d201      	bcs.n	11f4 <swap_run+0x44>
                break;
            }
            first_trailer_idx--;
    11f0:	3b01      	subs	r3, #1
            sz += sector_sz;
    11f2:	e7fa      	b.n	11ea <swap_run+0x3a>
        }

        if (g_last_idx >= first_trailer_idx) {
    11f4:	f8d8 2000 	ldr.w	r2, [r8]
    11f8:	429a      	cmp	r2, r3
    11fa:	d308      	bcc.n	120e <swap_run+0x5e>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    11fc:	2157      	movs	r1, #87	; 0x57
    11fe:	4864      	ldr	r0, [pc, #400]	; (1390 <swap_run+0x1e0>)
    1200:	f006 fc62 	bl	7ac8 <z_log_minimal_printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1204:	2301      	movs	r3, #1
    1206:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    1208:	b009      	add	sp, #36	; 0x24
    120a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    120e:	a906      	add	r1, sp, #24
    1210:	2005      	movs	r0, #5
    1212:	f000 fdfb 	bl	1e0c <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1216:	a907      	add	r1, sp, #28
    1218:	2002      	movs	r0, #2
    121a:	f000 fdf7 	bl	1e0c <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    121e:	4621      	mov	r1, r4
    1220:	4628      	mov	r0, r5
    1222:	9a07      	ldr	r2, [sp, #28]
    1224:	f7ff ff78 	bl	1118 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1228:	7963      	ldrb	r3, [r4, #5]
    122a:	2b01      	cmp	r3, #1
    122c:	d10a      	bne.n	1244 <swap_run+0x94>
        idx = g_last_idx;
    122e:	f8d8 7000 	ldr.w	r7, [r8]
    BOOT_STATUS_ASSERT(rc == 0);
    1232:	f8df b160 	ldr.w	fp, [pc, #352]	; 1394 <swap_run+0x1e4>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1236:	f8d8 3000 	ldr.w	r3, [r8]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    123a:	f8dd 9018 	ldr.w	r9, [sp, #24]
        while (idx > 0) {
    123e:	b98f      	cbnz	r7, 1264 <swap_run+0xb4>
        bs->idx = BOOT_STATUS_IDX_0;
    1240:	2301      	movs	r3, #1
    1242:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1244:	2302      	movs	r3, #2
    idx = 1;
    1246:	2701      	movs	r7, #1
    bs->op = BOOT_STATUS_OP_SWAP;
    1248:	7163      	strb	r3, [r4, #5]
    while (idx <= g_last_idx) {
    124a:	f8d8 3000 	ldr.w	r3, [r8]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    124e:	f8dd a018 	ldr.w	sl, [sp, #24]
    while (idx <= g_last_idx) {
    1252:	429f      	cmp	r7, r3
    1254:	d948      	bls.n	12e8 <swap_run+0x138>
    flash_area_close(fap_pri);
    1256:	4650      	mov	r0, sl
    1258:	f006 fc65 	bl	7b26 <flash_area_close>
    flash_area_close(fap_sec);
    125c:	9807      	ldr	r0, [sp, #28]
    125e:	f006 fc62 	bl	7b26 <flash_area_close>
    1262:	e7d1      	b.n	1208 <swap_run+0x58>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1264:	6822      	ldr	r2, [r4, #0]
    1266:	3301      	adds	r3, #1
    1268:	1a9b      	subs	r3, r3, r2
    126a:	429f      	cmp	r7, r3
    126c:	d83a      	bhi.n	12e4 <swap_run+0x134>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    126e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    1270:	2a01      	cmp	r2, #1
           BOOT_IMG(state, slot).sectors[0].fs_off;
    1272:	6819      	ldr	r1, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1274:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    1278:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    127c:	f853 3c08 	ldr.w	r3, [r3, #-8]
    1280:	eba0 0a01 	sub.w	sl, r0, r1
    1284:	eba3 0301 	sub.w	r3, r3, r1
    1288:	9304      	str	r3, [sp, #16]
    128a:	d111      	bne.n	12b0 <swap_run+0x100>
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    128c:	9b07      	ldr	r3, [sp, #28]
    128e:	9303      	str	r3, [sp, #12]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    1290:	68e3      	ldr	r3, [r4, #12]
    1292:	2b02      	cmp	r3, #2
    1294:	d008      	beq.n	12a8 <swap_run+0xf8>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    1296:	4649      	mov	r1, r9
    1298:	4628      	mov	r0, r5
    129a:	f006 f944 	bl	7526 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    129e:	4622      	mov	r2, r4
    12a0:	4649      	mov	r1, r9
    12a2:	4628      	mov	r0, r5
    12a4:	f006 f975 	bl	7592 <swap_status_init>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    12a8:	4628      	mov	r0, r5
    12aa:	9903      	ldr	r1, [sp, #12]
    12ac:	f006 f93b 	bl	7526 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    12b0:	4632      	mov	r2, r6
    12b2:	4651      	mov	r1, sl
    12b4:	4648      	mov	r0, r9
    12b6:	f006 f934 	bl	7522 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    12ba:	9b04      	ldr	r3, [sp, #16]
    12bc:	464a      	mov	r2, r9
    12be:	4649      	mov	r1, r9
    12c0:	4628      	mov	r0, r5
    12c2:	e9cd a600 	strd	sl, r6, [sp]
    12c6:	f7ff fc5b 	bl	b80 <boot_copy_region>
    rc = boot_write_status(state, bs);
    12ca:	4621      	mov	r1, r4
    12cc:	4628      	mov	r0, r5
    12ce:	f006 f8f6 	bl	74be <boot_write_status>
    bs->idx++;
    12d2:	6823      	ldr	r3, [r4, #0]
    12d4:	3301      	adds	r3, #1
    12d6:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    12d8:	b120      	cbz	r0, 12e4 <swap_run+0x134>
    12da:	f8db 3000 	ldr.w	r3, [fp]
    12de:	3301      	adds	r3, #1
    12e0:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    12e4:	3f01      	subs	r7, #1
    12e6:	e7a6      	b.n	1236 <swap_run+0x86>
        if (idx >= bs->idx) {
    12e8:	6823      	ldr	r3, [r4, #0]
    12ea:	429f      	cmp	r7, r3
    12ec:	d34d      	bcc.n	138a <swap_run+0x1da>
    12ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12f0:	00fb      	lsls	r3, r7, #3
    12f2:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
    12f6:	3b08      	subs	r3, #8
    12f8:	9104      	str	r1, [sp, #16]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    12fa:	6811      	ldr	r1, [r2, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12fc:	f8dd b01c 	ldr.w	fp, [sp, #28]
    1300:	9103      	str	r1, [sp, #12]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1302:	58d1      	ldr	r1, [r2, r3]
    1304:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    1306:	58d0      	ldr	r0, [r2, r3]
    1308:	6813      	ldr	r3, [r2, #0]
    130a:	eba0 0903 	sub.w	r9, r0, r3
    if (bs->state == BOOT_STATUS_STATE_0) {
    130e:	7923      	ldrb	r3, [r4, #4]
    1310:	2b01      	cmp	r3, #1
    1312:	d138      	bne.n	1386 <swap_run+0x1d6>
    1314:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1316:	4632      	mov	r2, r6
    1318:	1ac9      	subs	r1, r1, r3
    131a:	4650      	mov	r0, sl
    131c:	9105      	str	r1, [sp, #20]
    131e:	f006 f900 	bl	7522 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    1322:	9905      	ldr	r1, [sp, #20]
    1324:	464b      	mov	r3, r9
    1326:	4652      	mov	r2, sl
    1328:	9100      	str	r1, [sp, #0]
    132a:	4628      	mov	r0, r5
    132c:	4659      	mov	r1, fp
    132e:	9601      	str	r6, [sp, #4]
    1330:	f7ff fc26 	bl	b80 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1334:	4621      	mov	r1, r4
    1336:	4628      	mov	r0, r5
    1338:	f006 f8c1 	bl	74be <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    133c:	2302      	movs	r3, #2
    133e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1340:	b118      	cbz	r0, 134a <swap_run+0x19a>
    1342:	4a14      	ldr	r2, [pc, #80]	; (1394 <swap_run+0x1e4>)
    1344:	6813      	ldr	r3, [r2, #0]
    1346:	3301      	adds	r3, #1
    1348:	6013      	str	r3, [r2, #0]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    134a:	4632      	mov	r2, r6
    134c:	4649      	mov	r1, r9
    134e:	4658      	mov	r0, fp
    1350:	f006 f8e7 	bl	7522 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1354:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    1358:	4651      	mov	r1, sl
    135a:	1a9b      	subs	r3, r3, r2
    135c:	4628      	mov	r0, r5
    135e:	465a      	mov	r2, fp
    1360:	e9cd 9600 	strd	r9, r6, [sp]
    1364:	f7ff fc0c 	bl	b80 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1368:	4621      	mov	r1, r4
    136a:	4628      	mov	r0, r5
    136c:	f006 f8a7 	bl	74be <boot_write_status>
        bs->idx++;
    1370:	6823      	ldr	r3, [r4, #0]
    1372:	3301      	adds	r3, #1
    1374:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1376:	2301      	movs	r3, #1
    1378:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    137a:	b130      	cbz	r0, 138a <swap_run+0x1da>
    137c:	4a05      	ldr	r2, [pc, #20]	; (1394 <swap_run+0x1e4>)
    137e:	6813      	ldr	r3, [r2, #0]
    1380:	3301      	adds	r3, #1
    1382:	6013      	str	r3, [r2, #0]
    1384:	e001      	b.n	138a <swap_run+0x1da>
    if (bs->state == BOOT_STATUS_STATE_1) {
    1386:	2b02      	cmp	r3, #2
    1388:	d0df      	beq.n	134a <swap_run+0x19a>
        idx++;
    138a:	3701      	adds	r7, #1
    138c:	e75d      	b.n	124a <swap_run+0x9a>
    138e:	bf00      	nop
    1390:	00009899 	.word	0x00009899
    1394:	20015c5c 	.word	0x20015c5c
    1398:	20014504 	.word	0x20014504

0000139c <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <mbedtls_platform_zeroize+0xc>)
{
    139e:	460a      	mov	r2, r1
    memset_func( buf, 0, len );
    13a0:	681b      	ldr	r3, [r3, #0]
    13a2:	2100      	movs	r1, #0
    13a4:	4718      	bx	r3
    13a6:	bf00      	nop
    13a8:	20014508 	.word	0x20014508

000013ac <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    13ac:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    13ae:	4d09      	ldr	r5, [pc, #36]	; (13d4 <cc310_init+0x28>)
    13b0:	782b      	ldrb	r3, [r5, #0]
    13b2:	b10b      	cbz	r3, 13b8 <cc310_init+0xc>
        }
        initialized = true;
        nrf_cc310_disable();
    }

    return 0;
    13b4:	2000      	movs	r0, #0
}
    13b6:	bd70      	pop	{r4, r5, r6, pc}
    NRF_CRYPTOCELL->ENABLE=1;
    13b8:	2601      	movs	r6, #1
    13ba:	4c07      	ldr	r4, [pc, #28]	; (13d8 <cc310_init+0x2c>)
    13bc:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        if (nrf_cc310_bl_init() != 0) {
    13c0:	f004 feaa 	bl	6118 <nrf_cc310_bl_init>
    13c4:	b918      	cbnz	r0, 13ce <cc310_init+0x22>
        initialized = true;
    13c6:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    13c8:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
}
    13cc:	e7f2      	b.n	13b4 <cc310_init+0x8>
            return -1;
    13ce:	f04f 30ff 	mov.w	r0, #4294967295
    13d2:	e7f0      	b.n	13b6 <cc310_init+0xa>
    13d4:	2001686a 	.word	0x2001686a
    13d8:	50840000 	.word	0x50840000

000013dc <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    13dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13e0:	b0ac      	sub	sp, #176	; 0xb0
    13e2:	461f      	mov	r7, r3
    13e4:	4606      	mov	r6, r0
    13e6:	460c      	mov	r4, r1
    13e8:	4615      	mov	r5, r2
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    13ea:	f7ff ffdf 	bl	13ac <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
    13ee:	2301      	movs	r3, #1
    13f0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1414 <cc310_ecdsa_verify_secp256r1+0x38>
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    13f4:	462a      	mov	r2, r5
    13f6:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    13fa:	4621      	mov	r1, r4
    13fc:	4633      	mov	r3, r6
    13fe:	9700      	str	r7, [sp, #0]
    1400:	a803      	add	r0, sp, #12
    1402:	f007 fc5c 	bl	8cbe <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    1406:	2300      	movs	r3, #0
    1408:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    140c:	b02c      	add	sp, #176	; 0xb0
    140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1412:	bf00      	nop
    1414:	50840000 	.word	0x50840000

00001418 <nrf_cleanup_peripheral>:
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1418:	f04f 33ff 	mov.w	r3, #4294967295
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    141c:	2101      	movs	r1, #1
    141e:	4a0f      	ldr	r2, [pc, #60]	; (145c <nrf_cleanup_peripheral+0x44>)
    1420:	6051      	str	r1, [r2, #4]
    p_reg->EVTENCLR = mask;
    1422:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1426:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    142a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    142e:	6051      	str	r1, [r2, #4]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1430:	2100      	movs	r1, #0
    p_reg->EVTENCLR = mask;
    1432:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1436:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    143a:	f5a2 4250 	sub.w	r2, r2, #53248	; 0xd000
    143e:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1442:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    144a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    144e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1452:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1456:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
}
    145a:	4770      	bx	lr
    145c:	50014000 	.word	0x50014000

00001460 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    1460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1464:	9d07      	ldr	r5, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    1466:	b915      	cbnz	r5, 146e <base64_encode+0xe>
		*olen = 0;
    1468:	6015      	str	r5, [r2, #0]
		return 0;
    146a:	2000      	movs	r0, #0
    146c:	e012      	b.n	1494 <base64_encode+0x34>
	}

	n = slen / 3 + (slen % 3 != 0);
    146e:	2403      	movs	r4, #3
    1470:	fbb5 f4f4 	udiv	r4, r5, r4
    1474:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    1478:	42bd      	cmp	r5, r7
    147a:	bf18      	it	ne
    147c:	3401      	addne	r4, #1

	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    147e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    1482:	d209      	bcs.n	1498 <base64_encode+0x38>
		*olen = BASE64_SIZE_T_MAX;
		return -ENOMEM;
	}

	n *= 4;
    1484:	00a4      	lsls	r4, r4, #2

	if ((dlen < n + 1) || (!dst)) {
    1486:	3401      	adds	r4, #1
    1488:	428c      	cmp	r4, r1
    148a:	d800      	bhi.n	148e <base64_encode+0x2e>
    148c:	b938      	cbnz	r0, 149e <base64_encode+0x3e>
		return -ENOMEM;
    148e:	f06f 000b 	mvn.w	r0, #11
		*olen = n + 1;
    1492:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1498:	f04f 34ff 	mov.w	r4, #4294967295
    149c:	e7f7      	b.n	148e <base64_encode+0x2e>
	for (i = 0, p = dst; i < n; i += 3) {
    149e:	4604      	mov	r4, r0
    14a0:	2100      	movs	r1, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14a2:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 1558 <base64_encode+0xf8>
	for (i = 0, p = dst; i < n; i += 3) {
    14a6:	42b9      	cmp	r1, r7
    14a8:	f103 0c03 	add.w	ip, r3, #3
    14ac:	f104 0604 	add.w	r6, r4, #4
    14b0:	d32b      	bcc.n	150a <base64_encode+0xaa>
	if (i < slen) {
    14b2:	42a9      	cmp	r1, r5
    14b4:	4627      	mov	r7, r4
    14b6:	d223      	bcs.n	1500 <base64_encode+0xa0>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14b8:	f101 0c01 	add.w	ip, r1, #1
    14bc:	45ac      	cmp	ip, r5
		C1 = *src++;
    14be:	781f      	ldrb	r7, [r3, #0]
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14c0:	bf28      	it	cs
    14c2:	2300      	movcs	r3, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14c4:	4924      	ldr	r1, [pc, #144]	; (1558 <base64_encode+0xf8>)
    14c6:	ea4f 0ea7 	mov.w	lr, r7, asr #2
		C2 = ((i + 1) < slen) ? *src++ : 0;
    14ca:	bf38      	it	cc
    14cc:	785b      	ldrbcc	r3, [r3, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14ce:	f811 e00e 	ldrb.w	lr, [r1, lr]
		if ((i + 1) < slen) {
    14d2:	45ac      	cmp	ip, r5
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14d4:	f884 e000 	strb.w	lr, [r4]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14d8:	eb01 1e13 	add.w	lr, r1, r3, lsr #4
			*p++ = '=';
    14dc:	bf2e      	itee	cs
    14de:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    14e0:	009b      	lslcc	r3, r3, #2
    14e2:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14e6:	ea4f 1707 	mov.w	r7, r7, lsl #4
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    14ea:	bf38      	it	cc
    14ec:	5ccb      	ldrbcc	r3, [r1, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14ee:	f007 0730 	and.w	r7, r7, #48	; 0x30
    14f2:	f81e 7007 	ldrb.w	r7, [lr, r7]
    14f6:	70a3      	strb	r3, [r4, #2]
		*p++ = '=';
    14f8:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    14fa:	7067      	strb	r7, [r4, #1]
		*p++ = '=';
    14fc:	4637      	mov	r7, r6
    14fe:	70e3      	strb	r3, [r4, #3]
	*p = 0U;
    1500:	2300      	movs	r3, #0
	*olen = p - dst;
    1502:	1a38      	subs	r0, r7, r0
    1504:	6010      	str	r0, [r2, #0]
	*p = 0U;
    1506:	703b      	strb	r3, [r7, #0]
	return 0;
    1508:	e7af      	b.n	146a <base64_encode+0xa>
		C1 = *src++;
    150a:	f81c 4c03 	ldrb.w	r4, [ip, #-3]
		C2 = *src++;
    150e:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1512:	ea4f 09a4 	mov.w	r9, r4, asr #2
    1516:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    151a:	0124      	lsls	r4, r4, #4
		C3 = *src++;
    151c:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1520:	f004 0430 	and.w	r4, r4, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1524:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1528:	eb0e 1913 	add.w	r9, lr, r3, lsr #4
    152c:	f819 4004 	ldrb.w	r4, [r9, r4]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1530:	009b      	lsls	r3, r3, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    1532:	f806 4c03 	strb.w	r4, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1536:	f003 033c 	and.w	r3, r3, #60	; 0x3c
    153a:	eb0e 1498 	add.w	r4, lr, r8, lsr #6
    153e:	5ce3      	ldrb	r3, [r4, r3]
		*p++ = base64_enc_map[C3 & 0x3F];
    1540:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    1544:	f806 3c02 	strb.w	r3, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    1548:	f81e 3008 	ldrb.w	r3, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    154c:	4634      	mov	r4, r6
		*p++ = base64_enc_map[C3 & 0x3F];
    154e:	f806 3c01 	strb.w	r3, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    1552:	3103      	adds	r1, #3
    1554:	4663      	mov	r3, ip
    1556:	e7a6      	b.n	14a6 <base64_encode+0x46>
    1558:	000099a3 	.word	0x000099a3

0000155c <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    155c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    1560:	2700      	movs	r7, #0
    1562:	463c      	mov	r4, r7
    1564:	463d      	mov	r5, r7
{
    1566:	f8dd e01c 	ldr.w	lr, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    156a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1694 <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    156e:	4575      	cmp	r5, lr
    1570:	d31f      	bcc.n	15b2 <base64_decode+0x56>
		}

		n++;
	}

	if (n == 0) {
    1572:	bbe4      	cbnz	r4, 15ee <base64_decode+0x92>
		*olen = 0;
		return 0;
    1574:	2000      	movs	r0, #0
		*olen = 0;
    1576:	6014      	str	r4, [r2, #0]
	}

	*olen = p - dst;

	return 0;
}
    1578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			++i;
    157c:	3601      	adds	r6, #1
		while (i < slen && src[i] == ' ') {
    157e:	4576      	cmp	r6, lr
    1580:	d033      	beq.n	15ea <base64_decode+0x8e>
    1582:	f813 c006 	ldrb.w	ip, [r3, r6]
    1586:	f1bc 0f20 	cmp.w	ip, #32
    158a:	d0f7      	beq.n	157c <base64_decode+0x20>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    158c:	ebae 0906 	sub.w	r9, lr, r6
    1590:	f1b9 0f01 	cmp.w	r9, #1
    1594:	eba6 0505 	sub.w	r5, r6, r5
    1598:	d00d      	beq.n	15b6 <base64_decode+0x5a>
    159a:	f1bc 0f0d 	cmp.w	ip, #13
    159e:	d10a      	bne.n	15b6 <base64_decode+0x5a>
    15a0:	eb03 0906 	add.w	r9, r3, r6
    15a4:	f899 9001 	ldrb.w	r9, [r9, #1]
    15a8:	f1b9 0f0a 	cmp.w	r9, #10
    15ac:	d16e      	bne.n	168c <base64_decode+0x130>
	for (i = n = j = 0U; i < slen; i++) {
    15ae:	1c75      	adds	r5, r6, #1
    15b0:	e7dd      	b.n	156e <base64_decode+0x12>
    15b2:	462e      	mov	r6, r5
    15b4:	e7e3      	b.n	157e <base64_decode+0x22>
		if (src[i] == '\n') {
    15b6:	f1bc 0f0a 	cmp.w	ip, #10
    15ba:	d0f8      	beq.n	15ae <base64_decode+0x52>
		if (x != 0U) {
    15bc:	b92d      	cbnz	r5, 15ca <base64_decode+0x6e>
		if (src[i] == '=' && ++j > 2) {
    15be:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    15c2:	d105      	bne.n	15d0 <base64_decode+0x74>
    15c4:	3701      	adds	r7, #1
    15c6:	2f02      	cmp	r7, #2
    15c8:	d90d      	bls.n	15e6 <base64_decode+0x8a>
			return -EINVAL;
    15ca:	f06f 0015 	mvn.w	r0, #21
    15ce:	e7d3      	b.n	1578 <base64_decode+0x1c>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    15d0:	f01c 0f80 	tst.w	ip, #128	; 0x80
    15d4:	d1f9      	bne.n	15ca <base64_decode+0x6e>
    15d6:	f818 500c 	ldrb.w	r5, [r8, ip]
    15da:	2d7f      	cmp	r5, #127	; 0x7f
    15dc:	d0f5      	beq.n	15ca <base64_decode+0x6e>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    15de:	2d3f      	cmp	r5, #63	; 0x3f
    15e0:	d801      	bhi.n	15e6 <base64_decode+0x8a>
    15e2:	2f00      	cmp	r7, #0
    15e4:	d1f1      	bne.n	15ca <base64_decode+0x6e>
		n++;
    15e6:	3401      	adds	r4, #1
    15e8:	e7e1      	b.n	15ae <base64_decode+0x52>
    15ea:	4635      	mov	r5, r6
    15ec:	e7c1      	b.n	1572 <base64_decode+0x16>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    15ee:	f04f 0c06 	mov.w	ip, #6
    15f2:	f004 0607 	and.w	r6, r4, #7
    15f6:	08e4      	lsrs	r4, r4, #3
    15f8:	fb0c f606 	mul.w	r6, ip, r6
    15fc:	fb0c f404 	mul.w	r4, ip, r4
    1600:	3607      	adds	r6, #7
	n -= j;
    1602:	1be4      	subs	r4, r4, r7
    1604:	eb04 04d6 	add.w	r4, r4, r6, lsr #3
	if (dst == NULL || dlen < n) {
    1608:	b170      	cbz	r0, 1628 <base64_decode+0xcc>
    160a:	428c      	cmp	r4, r1
    160c:	d80c      	bhi.n	1628 <base64_decode+0xcc>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    160e:	2700      	movs	r7, #0
	if (dst == NULL || dlen < n) {
    1610:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1612:	2603      	movs	r6, #3
    1614:	463c      	mov	r4, r7
		j -= (base64_dec_map[*src] == 64U);
    1616:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1694 <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    161a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1698 <base64_decode+0x13c>
    161e:	441d      	add	r5, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1620:	429d      	cmp	r5, r3
    1622:	d105      	bne.n	1630 <base64_decode+0xd4>
	*olen = p - dst;
    1624:	1a0c      	subs	r4, r1, r0
	return 0;
    1626:	e7a5      	b.n	1574 <base64_decode+0x18>
		return -ENOMEM;
    1628:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    162c:	6014      	str	r4, [r2, #0]
		return -ENOMEM;
    162e:	e7a3      	b.n	1578 <base64_decode+0x1c>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    1630:	f813 9b01 	ldrb.w	r9, [r3], #1
    1634:	f1a9 0c0a 	sub.w	ip, r9, #10
    1638:	fa5f fc8c 	uxtb.w	ip, ip
    163c:	f1bc 0f16 	cmp.w	ip, #22
    1640:	d804      	bhi.n	164c <base64_decode+0xf0>
    1642:	fa48 fc0c 	asr.w	ip, r8, ip
    1646:	f01c 0f01 	tst.w	ip, #1
    164a:	d0e9      	beq.n	1620 <base64_decode+0xc4>
		j -= (base64_dec_map[*src] == 64U);
    164c:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    1650:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    1652:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    1656:	bf08      	it	eq
    1658:	3e01      	subeq	r6, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    165a:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    165e:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    1660:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    1664:	d1dc      	bne.n	1620 <base64_decode+0xc4>
			if (j > 0) {
    1666:	b17e      	cbz	r6, 1688 <base64_decode+0x12c>
				*p++ = (unsigned char)(x >> 16);
    1668:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    166a:	2e01      	cmp	r6, #1
				*p++ = (unsigned char)(x >> 16);
    166c:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    166e:	d102      	bne.n	1676 <base64_decode+0x11a>
				*p++ = (unsigned char)(x >> 16);
    1670:	3101      	adds	r1, #1
			n = 0;
    1672:	2400      	movs	r4, #0
    1674:	e7d4      	b.n	1620 <base64_decode+0xc4>
			if (j > 2) {
    1676:	2e02      	cmp	r6, #2
				*p++ = (unsigned char)(x >> 8);
    1678:	ea4f 2417 	mov.w	r4, r7, lsr #8
    167c:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    167e:	bf16      	itet	ne
    1680:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    1682:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    1684:	3103      	addne	r1, #3
    1686:	e7f4      	b.n	1672 <base64_decode+0x116>
			n = 0;
    1688:	4634      	mov	r4, r6
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    168a:	e7c9      	b.n	1620 <base64_decode+0xc4>
		if (x != 0U) {
    168c:	2d00      	cmp	r5, #0
    168e:	d0a2      	beq.n	15d6 <base64_decode+0x7a>
    1690:	e79b      	b.n	15ca <base64_decode+0x6e>
    1692:	bf00      	nop
    1694:	00009923 	.word	0x00009923
    1698:	ffbffff6 	.word	0xffbffff6

0000169c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    169c:	680b      	ldr	r3, [r1, #0]
    169e:	3301      	adds	r3, #1
    16a0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    16a2:	4b01      	ldr	r3, [pc, #4]	; (16a8 <char_out+0xc>)
    16a4:	681b      	ldr	r3, [r3, #0]
    16a6:	4718      	bx	r3
    16a8:	2001450c 	.word	0x2001450c

000016ac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    16ac:	b507      	push	{r0, r1, r2, lr}
    16ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    16b0:	2100      	movs	r1, #0
{
    16b2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    16b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    16b6:	4803      	ldr	r0, [pc, #12]	; (16c4 <vprintk+0x18>)
    16b8:	a901      	add	r1, sp, #4
    16ba:	f000 f913 	bl	18e4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    16be:	b003      	add	sp, #12
    16c0:	f85d fb04 	ldr.w	pc, [sp], #4
    16c4:	0000169d 	.word	0x0000169d

000016c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    16c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16cc:	8b05      	ldrh	r5, [r0, #24]
{
    16ce:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    16d0:	0728      	lsls	r0, r5, #28
{
    16d2:	4690      	mov	r8, r2
	if (processing) {
    16d4:	d411      	bmi.n	16fa <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    16d6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16d8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    16dc:	f040 80cd 	bne.w	187a <process_event+0x1b2>
			evt = process_recheck(mgr);
    16e0:	4620      	mov	r0, r4
    16e2:	f006 f91f 	bl	7924 <process_recheck>
		}

		if (evt == EVT_NOP) {
    16e6:	b178      	cbz	r0, 1708 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    16e8:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16ea:	8b21      	ldrh	r1, [r4, #24]
    16ec:	2804      	cmp	r0, #4
    16ee:	d811      	bhi.n	1714 <process_event+0x4c>
    16f0:	e8df f000 	tbb	[pc, r0]
    16f4:	856d10c3 	.word	0x856d10c3
    16f8:	95          	.byte	0x95
    16f9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    16fa:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    16fc:	bf0c      	ite	eq
    16fe:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1702:	f045 0520 	orrne.w	r5, r5, #32
    1706:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1708:	f388 8811 	msr	BASEPRI, r8
    170c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1714:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1718:	45aa      	cmp	sl, r5
    171a:	f000 80a6 	beq.w	186a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    171e:	2700      	movs	r7, #0
    1720:	46b9      	mov	r9, r7
    1722:	463e      	mov	r6, r7
    1724:	68a3      	ldr	r3, [r4, #8]
    1726:	2b00      	cmp	r3, #0
    1728:	f000 80bd 	beq.w	18a6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    172c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1730:	8321      	strh	r1, [r4, #24]
    1732:	f388 8811 	msr	BASEPRI, r8
    1736:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    173a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    173c:	2900      	cmp	r1, #0
    173e:	f000 80bb 	beq.w	18b8 <process_event+0x1f0>
	return node->next;
    1742:	680d      	ldr	r5, [r1, #0]
    1744:	2900      	cmp	r1, #0
    1746:	f000 80b7 	beq.w	18b8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    174a:	4633      	mov	r3, r6
    174c:	4652      	mov	r2, sl
    174e:	4620      	mov	r0, r4
    1750:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1754:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1756:	2d00      	cmp	r5, #0
    1758:	d076      	beq.n	1848 <process_event+0x180>
    175a:	682b      	ldr	r3, [r5, #0]
    175c:	4629      	mov	r1, r5
    175e:	461d      	mov	r5, r3
    1760:	e7f0      	b.n	1744 <process_event+0x7c>
    1762:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1766:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1768:	2a01      	cmp	r2, #1
    176a:	d81b      	bhi.n	17a4 <process_event+0xdc>
	list->head = NULL;
    176c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    176e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1772:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1774:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1776:	b289      	uxth	r1, r1
	list->tail = NULL;
    1778:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    177c:	d109      	bne.n	1792 <process_event+0xca>
    177e:	463b      	mov	r3, r7
    1780:	e003      	b.n	178a <process_event+0xc2>
				mgr->refs += 1U;
    1782:	8b62      	ldrh	r2, [r4, #26]
	return node->next;
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	3201      	adds	r2, #1
    1788:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    178a:	2b00      	cmp	r3, #0
    178c:	d1f9      	bne.n	1782 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    178e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1792:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1794:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1796:	f006 f8c5 	bl	7924 <process_recheck>
    179a:	2800      	cmp	r0, #0
    179c:	d07b      	beq.n	1896 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    179e:	f041 0120 	orr.w	r1, r1, #32
    17a2:	e077      	b.n	1894 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    17a4:	2b04      	cmp	r3, #4
    17a6:	d10a      	bne.n	17be <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17a8:	f021 0107 	bic.w	r1, r1, #7
    17ac:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    17ae:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    17b0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    17b2:	f006 f8b7 	bl	7924 <process_recheck>
    17b6:	b110      	cbz	r0, 17be <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    17b8:	f041 0120 	orr.w	r1, r1, #32
    17bc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17be:	8b21      	ldrh	r1, [r4, #24]
    17c0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    17c4:	45aa      	cmp	sl, r5
    17c6:	d050      	beq.n	186a <process_event+0x1a2>
    17c8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    17ca:	46b9      	mov	r9, r7
    17cc:	e7aa      	b.n	1724 <process_event+0x5c>
			transit = mgr->transitions->start;
    17ce:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17d0:	f021 0107 	bic.w	r1, r1, #7
    17d4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    17d8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    17da:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    17de:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    17e0:	d12d      	bne.n	183e <process_event+0x176>
		    || (transit != NULL)) {
    17e2:	f1b9 0f00 	cmp.w	r9, #0
    17e6:	d040      	beq.n	186a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    17e8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    17ec:	8321      	strh	r1, [r4, #24]
    17ee:	f388 8811 	msr	BASEPRI, r8
    17f2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    17f6:	4620      	mov	r0, r4
    17f8:	4939      	ldr	r1, [pc, #228]	; (18e0 <process_event+0x218>)
    17fa:	47c8      	blx	r9
    17fc:	e029      	b.n	1852 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17fe:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1802:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1804:	f041 0104 	orr.w	r1, r1, #4
    1808:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    180a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    180c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1810:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1812:	d0e6      	beq.n	17e2 <process_event+0x11a>
    1814:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1816:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    181a:	463e      	mov	r6, r7
    181c:	e782      	b.n	1724 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    181e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1822:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1824:	f041 0105 	orr.w	r1, r1, #5
    1828:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    182a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    182c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1830:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1832:	d0d6      	beq.n	17e2 <process_event+0x11a>
    1834:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1836:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    183a:	463e      	mov	r6, r7
    183c:	e772      	b.n	1724 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    183e:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1840:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    1844:	463e      	mov	r6, r7
    1846:	e76d      	b.n	1724 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1848:	462b      	mov	r3, r5
    184a:	e787      	b.n	175c <process_event+0x94>
			if (transit != NULL) {
    184c:	f1b9 0f00 	cmp.w	r9, #0
    1850:	d1d1      	bne.n	17f6 <process_event+0x12e>
	__asm__ volatile(
    1852:	f04f 0320 	mov.w	r3, #32
    1856:	f3ef 8811 	mrs	r8, BASEPRI
    185a:	f383 8811 	msr	BASEPRI, r3
    185e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1862:	8b23      	ldrh	r3, [r4, #24]
    1864:	f023 0308 	bic.w	r3, r3, #8
    1868:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    186a:	8b25      	ldrh	r5, [r4, #24]
    186c:	06ea      	lsls	r2, r5, #27
    186e:	d52e      	bpl.n	18ce <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1870:	f025 0310 	bic.w	r3, r5, #16
    1874:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1876:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    187a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    187c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    187e:	2e00      	cmp	r6, #0
    1880:	f6bf af6f 	bge.w	1762 <process_event+0x9a>
	list->head = NULL;
    1884:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1886:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1888:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    188c:	f021 0107 	bic.w	r1, r1, #7
    1890:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1894:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1896:	8b21      	ldrh	r1, [r4, #24]
    1898:	f04f 0900 	mov.w	r9, #0
    189c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    18a0:	45aa      	cmp	sl, r5
    18a2:	f47f af3f 	bne.w	1724 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    18a6:	2f00      	cmp	r7, #0
    18a8:	d09b      	beq.n	17e2 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    18aa:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    18ae:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    18b0:	f388 8811 	msr	BASEPRI, r8
    18b4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    18b8:	2f00      	cmp	r7, #0
    18ba:	d0c7      	beq.n	184c <process_event+0x184>
	return node->next;
    18bc:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    18be:	4639      	mov	r1, r7
    18c0:	4633      	mov	r3, r6
    18c2:	4652      	mov	r2, sl
    18c4:	4620      	mov	r0, r4
    18c6:	f006 f859 	bl	797c <notify_one>
	list->head = node;
    18ca:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    18cc:	e7f4      	b.n	18b8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    18ce:	06ab      	lsls	r3, r5, #26
    18d0:	f57f af1a 	bpl.w	1708 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    18d4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    18d8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    18da:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    18de:	e6ff      	b.n	16e0 <process_event+0x18>
    18e0:	000079a9 	.word	0x000079a9

000018e4 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    18e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18e8:	4681      	mov	r9, r0
	size_t count = 0;
    18ea:	f04f 0800 	mov.w	r8, #0
{
    18ee:	b08d      	sub	sp, #52	; 0x34
    18f0:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    18f2:	1e53      	subs	r3, r2, #1
{
    18f4:	9101      	str	r1, [sp, #4]
	fmt--;
    18f6:	9303      	str	r3, [sp, #12]

start:
	while (*++fmt != '%') {
    18f8:	9b03      	ldr	r3, [sp, #12]
    18fa:	7858      	ldrb	r0, [r3, #1]
    18fc:	1c5c      	adds	r4, r3, #1
    18fe:	2825      	cmp	r0, #37	; 0x25
    1900:	d119      	bne.n	1936 <cbvprintf+0x52>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    1902:	2000      	movs	r0, #0
	precision = -1;
    1904:	f04f 37ff 	mov.w	r7, #4294967295

	for (fmt++ ; ; fmt++) {
    1908:	461e      	mov	r6, r3
	min_width = -1;
    190a:	463c      	mov	r4, r7
	length_mod = 0;
    190c:	4603      	mov	r3, r0
	for (fmt++ ; ; fmt++) {
    190e:	3602      	adds	r6, #2
	padding_mode = 0;
    1910:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    1912:	7831      	ldrb	r1, [r6, #0]
    1914:	9603      	str	r6, [sp, #12]
    1916:	2939      	cmp	r1, #57	; 0x39
    1918:	d855      	bhi.n	19c6 <cbvprintf+0xe2>
    191a:	291f      	cmp	r1, #31
    191c:	d814      	bhi.n	1948 <cbvprintf+0x64>
    191e:	2900      	cmp	r1, #0
    1920:	f000 8202 	beq.w	1d28 <cbvprintf+0x444>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    1924:	9901      	ldr	r1, [sp, #4]
    1926:	2025      	movs	r0, #37	; 0x25
    1928:	47c8      	blx	r9
			OUTC(*fmt);
    192a:	9901      	ldr	r1, [sp, #4]
    192c:	7830      	ldrb	r0, [r6, #0]
    192e:	47c8      	blx	r9
    1930:	f108 0802 	add.w	r8, r8, #2
			goto start;
    1934:	e7e0      	b.n	18f8 <cbvprintf+0x14>
		if (*fmt == '\0') {
    1936:	2800      	cmp	r0, #0
    1938:	f000 81f6 	beq.w	1d28 <cbvprintf+0x444>
		OUTC(*fmt);
    193c:	9901      	ldr	r1, [sp, #4]
    193e:	47c8      	blx	r9
    1940:	f108 0801 	add.w	r8, r8, #1
	while (*++fmt != '%') {
    1944:	9403      	str	r4, [sp, #12]
    1946:	e7d7      	b.n	18f8 <cbvprintf+0x14>
		switch (*fmt) {
    1948:	f1a1 0220 	sub.w	r2, r1, #32
    194c:	2a19      	cmp	r2, #25
    194e:	d8e9      	bhi.n	1924 <cbvprintf+0x40>
    1950:	f20f 0c04 	addw	ip, pc, #4
    1954:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    1958:	000019c1 	.word	0x000019c1
    195c:	00001925 	.word	0x00001925
    1960:	00001925 	.word	0x00001925
    1964:	000019c1 	.word	0x000019c1
    1968:	00001925 	.word	0x00001925
    196c:	00001a49 	.word	0x00001a49
    1970:	00001925 	.word	0x00001925
    1974:	00001925 	.word	0x00001925
    1978:	00001925 	.word	0x00001925
    197c:	00001925 	.word	0x00001925
    1980:	00001a8f 	.word	0x00001a8f
    1984:	000019c1 	.word	0x000019c1
    1988:	00001925 	.word	0x00001925
    198c:	00001aa1 	.word	0x00001aa1
    1990:	00001a55 	.word	0x00001a55
    1994:	00001925 	.word	0x00001925
    1998:	00001a61 	.word	0x00001a61
    199c:	00001a7f 	.word	0x00001a7f
    19a0:	00001a7f 	.word	0x00001a7f
    19a4:	00001a7f 	.word	0x00001a7f
    19a8:	00001a7f 	.word	0x00001a7f
    19ac:	00001a7f 	.word	0x00001a7f
    19b0:	00001a7f 	.word	0x00001a7f
    19b4:	00001a7f 	.word	0x00001a7f
    19b8:	00001a7f 	.word	0x00001a7f
    19bc:	00001a7f 	.word	0x00001a7f
    19c0:	4608      	mov	r0, r1
    19c2:	3601      	adds	r6, #1
    19c4:	e7a5      	b.n	1912 <cbvprintf+0x2e>
    19c6:	2958      	cmp	r1, #88	; 0x58
    19c8:	f000 80f8 	beq.w	1bbc <cbvprintf+0x2d8>
    19cc:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
    19d0:	fa5f fc82 	uxtb.w	ip, r2
    19d4:	f1bc 0f17 	cmp.w	ip, #23
    19d8:	d8a4      	bhi.n	1924 <cbvprintf+0x40>
    19da:	2a17      	cmp	r2, #23
    19dc:	d8a2      	bhi.n	1924 <cbvprintf+0x40>
    19de:	f20f 0c08 	addw	ip, pc, #8
    19e2:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    19e6:	bf00      	nop
    19e8:	00001c5d 	.word	0x00001c5d
    19ec:	00001ac7 	.word	0x00001ac7
    19f0:	00001925 	.word	0x00001925
    19f4:	00001925 	.word	0x00001925
    19f8:	00001925 	.word	0x00001925
    19fc:	00001aa7 	.word	0x00001aa7
    1a00:	00001ac7 	.word	0x00001ac7
    1a04:	00001925 	.word	0x00001925
    1a08:	00001925 	.word	0x00001925
    1a0c:	00001aa7 	.word	0x00001aa7
    1a10:	00001925 	.word	0x00001925
    1a14:	00001925 	.word	0x00001925
    1a18:	00001925 	.word	0x00001925
    1a1c:	00001b95 	.word	0x00001b95
    1a20:	00001925 	.word	0x00001925
    1a24:	00001925 	.word	0x00001925
    1a28:	00001c3f 	.word	0x00001c3f
    1a2c:	00001925 	.word	0x00001925
    1a30:	00001ac7 	.word	0x00001ac7
    1a34:	00001925 	.word	0x00001925
    1a38:	00001925 	.word	0x00001925
    1a3c:	00001b95 	.word	0x00001b95
    1a40:	00001925 	.word	0x00001925
    1a44:	00001aa7 	.word	0x00001aa7
			OUTC('%');
    1a48:	2025      	movs	r0, #37	; 0x25
    1a4a:	9901      	ldr	r1, [sp, #4]
    1a4c:	47c8      	blx	r9
    1a4e:	f108 0801 	add.w	r8, r8, #1
			goto start;
    1a52:	e751      	b.n	18f8 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1a54:	9a02      	ldr	r2, [sp, #8]
			precision = 0;
    1a56:	2700      	movs	r7, #0
			padding_mode &= (char)~PAD_ZERO;
    1a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    1a5c:	9202      	str	r2, [sp, #8]
			continue;
    1a5e:	e7b0      	b.n	19c2 <cbvprintf+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1a60:	2c00      	cmp	r4, #0
    1a62:	da0c      	bge.n	1a7e <cbvprintf+0x19a>
    1a64:	2f00      	cmp	r7, #0
    1a66:	da0c      	bge.n	1a82 <cbvprintf+0x19e>
    1a68:	9a02      	ldr	r2, [sp, #8]
    1a6a:	2a00      	cmp	r2, #0
    1a6c:	f000 8154 	beq.w	1d18 <cbvprintf+0x434>
				min_width = 10 * min_width + *fmt - '0';
    1a70:	220a      	movs	r2, #10
				if (min_width < 0) {
    1a72:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    1a76:	fb02 1404 	mla	r4, r2, r4, r1
				min_width = 10 * min_width + *fmt - '0';
    1a7a:	3c30      	subs	r4, #48	; 0x30
    1a7c:	e7a1      	b.n	19c2 <cbvprintf+0xde>
			if (precision >= 0) {
    1a7e:	2f00      	cmp	r7, #0
    1a80:	dbf6      	blt.n	1a70 <cbvprintf+0x18c>
				precision = 10 * precision + *fmt - '0';
    1a82:	220a      	movs	r2, #10
    1a84:	fb02 1207 	mla	r2, r2, r7, r1
    1a88:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    1a8c:	e799      	b.n	19c2 <cbvprintf+0xde>
			if (precision >= 0) {
    1a8e:	2f00      	cmp	r7, #0
				precision = va_arg(ap, int);
    1a90:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
    1a94:	f280 8142 	bge.w	1d1c <cbvprintf+0x438>
				if (min_width < 0) {
    1a98:	2a00      	cmp	r2, #0
    1a9a:	f280 8141 	bge.w	1d20 <cbvprintf+0x43c>
					min_width = -min_width;
    1a9e:	4254      	negs	r4, r2
		switch (*fmt) {
    1aa0:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
    1aa2:	9202      	str	r2, [sp, #8]
    1aa4:	e78d      	b.n	19c2 <cbvprintf+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
    1aa6:	2968      	cmp	r1, #104	; 0x68
    1aa8:	d103      	bne.n	1ab2 <cbvprintf+0x1ce>
    1aaa:	2b68      	cmp	r3, #104	; 0x68
    1aac:	d106      	bne.n	1abc <cbvprintf+0x1d8>
				length_mod = 'H';
    1aae:	2348      	movs	r3, #72	; 0x48
    1ab0:	e787      	b.n	19c2 <cbvprintf+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1ab2:	296c      	cmp	r1, #108	; 0x6c
    1ab4:	d102      	bne.n	1abc <cbvprintf+0x1d8>
    1ab6:	2b6c      	cmp	r3, #108	; 0x6c
    1ab8:	f000 8134 	beq.w	1d24 <cbvprintf+0x440>
			} else if (length_mod == '\0') {
    1abc:	2b00      	cmp	r3, #0
    1abe:	f47f af31 	bne.w	1924 <cbvprintf+0x40>
		switch (*fmt) {
    1ac2:	460b      	mov	r3, r1
    1ac4:	e77d      	b.n	19c2 <cbvprintf+0xde>
			if (length_mod == 'z') {
    1ac6:	2b7a      	cmp	r3, #122	; 0x7a
    1ac8:	d106      	bne.n	1ad8 <cbvprintf+0x1f4>
				d = va_arg(ap, long);
    1aca:	f855 6b04 	ldr.w	r6, [r5], #4
    1ace:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1ad2:	2975      	cmp	r1, #117	; 0x75
    1ad4:	d11b      	bne.n	1b0e <cbvprintf+0x22a>
    1ad6:	e012      	b.n	1afe <cbvprintf+0x21a>
			} else if (length_mod == 'l') {
    1ad8:	2b6c      	cmp	r3, #108	; 0x6c
    1ada:	d0f6      	beq.n	1aca <cbvprintf+0x1e6>
			} else if (length_mod == 'L') {
    1adc:	2b4c      	cmp	r3, #76	; 0x4c
    1ade:	d108      	bne.n	1af2 <cbvprintf+0x20e>
				long long lld = va_arg(ap, long long);
    1ae0:	3507      	adds	r5, #7
    1ae2:	f025 0307 	bic.w	r3, r5, #7
    1ae6:	461d      	mov	r5, r3
				d = (uint_value_type) lld;
    1ae8:	f8d3 b004 	ldr.w	fp, [r3, #4]
    1aec:	f855 6b08 	ldr.w	r6, [r5], #8
    1af0:	e7ef      	b.n	1ad2 <cbvprintf+0x1ee>
			} else if (*fmt == 'u') {
    1af2:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
    1af4:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
    1af8:	d107      	bne.n	1b0a <cbvprintf+0x226>
				d = va_arg(ap, unsigned int);
    1afa:	f04f 0b00 	mov.w	fp, #0
			} else if (special == ' ') {
    1afe:	2820      	cmp	r0, #32
    1b00:	d13f      	bne.n	1b82 <cbvprintf+0x29e>
				prefix = " ";
    1b02:	f8df a22c 	ldr.w	sl, [pc, #556]	; 1d30 <cbvprintf+0x44c>
				min_width--;
    1b06:	3c01      	subs	r4, #1
    1b08:	e00a      	b.n	1b20 <cbvprintf+0x23c>
				d = va_arg(ap, int);
    1b0a:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1b0e:	f1bb 0f00 	cmp.w	fp, #0
    1b12:	daf4      	bge.n	1afe <cbvprintf+0x21a>
				d = -d;
    1b14:	4276      	negs	r6, r6
				prefix = "-";
    1b16:	f8df a21c 	ldr.w	sl, [pc, #540]	; 1d34 <cbvprintf+0x450>
				d = -d;
    1b1a:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
    1b1e:	3c01      	subs	r4, #1
	int i = 0;
    1b20:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    1b24:	9305      	str	r3, [sp, #20]
    1b26:	2300      	movs	r3, #0
    1b28:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
    1b2a:	4630      	mov	r0, r6
    1b2c:	4659      	mov	r1, fp
    1b2e:	220a      	movs	r2, #10
    1b30:	2300      	movs	r3, #0
    1b32:	f7fe fb07 	bl	144 <__aeabi_uldivmod>
    1b36:	9b04      	ldr	r3, [sp, #16]
    1b38:	468e      	mov	lr, r1
		buftop[--i] = c + '0';
    1b3a:	1e59      	subs	r1, r3, #1
    1b3c:	9104      	str	r1, [sp, #16]
    1b3e:	9905      	ldr	r1, [sp, #20]
    1b40:	46b4      	mov	ip, r6
    1b42:	3230      	adds	r2, #48	; 0x30
    1b44:	f801 2d01 	strb.w	r2, [r1, #-1]!
    1b48:	465a      	mov	r2, fp
	} while (num);
    1b4a:	f1bc 0f0a 	cmp.w	ip, #10
    1b4e:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
    1b52:	4606      	mov	r6, r0
    1b54:	46f3      	mov	fp, lr
		buftop[--i] = c + '0';
    1b56:	9105      	str	r1, [sp, #20]
	} while (num);
    1b58:	d2e7      	bcs.n	1b2a <cbvprintf+0x246>
	return -i;
    1b5a:	f1c3 0601 	rsb	r6, r3, #1
			data = buf + sizeof(buf) - data_len;
    1b5e:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
    1b60:	eb0d 0b03 	add.w	fp, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b64:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    1b66:	f1ab 0b04 	sub.w	fp, fp, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1b6a:	da04      	bge.n	1b76 <cbvprintf+0x292>
    1b6c:	9b02      	ldr	r3, [sp, #8]
    1b6e:	f013 0f01 	tst.w	r3, #1
    1b72:	bf18      	it	ne
    1b74:	4627      	movne	r7, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1b76:	1bbb      	subs	r3, r7, r6
		if (precision > 0) {
    1b78:	2b00      	cmp	r3, #0
		min_width -= data_len;
    1b7a:	bfd4      	ite	le
    1b7c:	1ba4      	suble	r4, r4, r6
			min_width -= precision;
    1b7e:	1be4      	subgt	r4, r4, r7
    1b80:	e016      	b.n	1bb0 <cbvprintf+0x2cc>
			} else if (special == '+') {
    1b82:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1b84:	bf0a      	itet	eq
    1b86:	f8df a1b0 	ldreq.w	sl, [pc, #432]	; 1d38 <cbvprintf+0x454>
	prefix = "";
    1b8a:	f8df a1b0 	ldrne.w	sl, [pc, #432]	; 1d3c <cbvprintf+0x458>
				min_width--;
    1b8e:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1b92:	e7c5      	b.n	1b20 <cbvprintf+0x23c>
			if (*fmt == 'p') {
    1b94:	2970      	cmp	r1, #112	; 0x70
    1b96:	d110      	bne.n	1bba <cbvprintf+0x2d6>
				x = (uintptr_t)va_arg(ap, void *);
    1b98:	f855 2b04 	ldr.w	r2, [r5], #4
    1b9c:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1b9e:	bb02      	cbnz	r2, 1be2 <cbvprintf+0x2fe>
		precision -= data_len;
    1ba0:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
    1ba4:	2605      	movs	r6, #5
					data = "(nil)";
    1ba6:	f8df b198 	ldr.w	fp, [pc, #408]	; 1d40 <cbvprintf+0x45c>
	prefix = "";
    1baa:	f8df a190 	ldr.w	sl, [pc, #400]	; 1d3c <cbvprintf+0x458>
		min_width -= data_len;
    1bae:	3c05      	subs	r4, #5
		}

		if (!(padding_mode & PAD_TAIL)) {
    1bb0:	9a02      	ldr	r2, [sp, #8]
    1bb2:	0797      	lsls	r7, r2, #30
    1bb4:	d471      	bmi.n	1c9a <cbvprintf+0x3b6>
    1bb6:	4627      	mov	r7, r4
    1bb8:	e062      	b.n	1c80 <cbvprintf+0x39c>
		switch (*fmt) {
    1bba:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
    1bbc:	2b6c      	cmp	r3, #108	; 0x6c
    1bbe:	d103      	bne.n	1bc8 <cbvprintf+0x2e4>
				x = va_arg(ap, unsigned int);
    1bc0:	2300      	movs	r3, #0
    1bc2:	f855 2b04 	ldr.w	r2, [r5], #4
    1bc6:	e008      	b.n	1bda <cbvprintf+0x2f6>
			} else if (length_mod == 'L') {
    1bc8:	2b4c      	cmp	r3, #76	; 0x4c
    1bca:	d1f9      	bne.n	1bc0 <cbvprintf+0x2dc>
				x = va_arg(ap, unsigned long long);
    1bcc:	3507      	adds	r5, #7
    1bce:	f025 0307 	bic.w	r3, r5, #7
    1bd2:	461d      	mov	r5, r3
    1bd4:	685b      	ldr	r3, [r3, #4]
    1bd6:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
    1bda:	2823      	cmp	r0, #35	; 0x23
    1bdc:	d128      	bne.n	1c30 <cbvprintf+0x34c>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1bde:	0688      	lsls	r0, r1, #26
    1be0:	d523      	bpl.n	1c2a <cbvprintf+0x346>
    1be2:	f8df a160 	ldr.w	sl, [pc, #352]	; 1d44 <cbvprintf+0x460>
				min_width -= 2;
    1be6:	3c02      	subs	r4, #2
	int i = 0;
    1be8:	f04f 0b00 	mov.w	fp, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1bec:	f001 0160 	and.w	r1, r1, #96	; 0x60
    1bf0:	f1a1 0e39 	sub.w	lr, r1, #57	; 0x39
	int i = 0;
    1bf4:	f10d 0c2d 	add.w	ip, sp, #45	; 0x2d
		unsigned int c = num % base;
    1bf8:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
    1bfc:	2909      	cmp	r1, #9
			c += alpha;
    1bfe:	bf88      	it	hi
    1c00:	4471      	addhi	r1, lr
		buftop[--i] = c + '0';
    1c02:	3130      	adds	r1, #48	; 0x30
    1c04:	f80c 1d01 	strb.w	r1, [ip, #-1]!
	} while (num);
    1c08:	2a10      	cmp	r2, #16
		num /= base;
    1c0a:	ea4f 1112 	mov.w	r1, r2, lsr #4
    1c0e:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    1c12:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1c16:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1c1a:	f10b 36ff 	add.w	r6, fp, #4294967295
	} while (num);
    1c1e:	d20a      	bcs.n	1c36 <cbvprintf+0x352>
	return -i;
    1c20:	f1cb 0601 	rsb	r6, fp, #1
			data = buf + sizeof(buf) - data_len;
    1c24:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    1c28:	e79a      	b.n	1b60 <cbvprintf+0x27c>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1c2a:	f8df a11c 	ldr.w	sl, [pc, #284]	; 1d48 <cbvprintf+0x464>
    1c2e:	e7da      	b.n	1be6 <cbvprintf+0x302>
	prefix = "";
    1c30:	f8df a108 	ldr.w	sl, [pc, #264]	; 1d3c <cbvprintf+0x458>
    1c34:	e7d8      	b.n	1be8 <cbvprintf+0x304>
		buftop[--i] = c + '0';
    1c36:	46b3      	mov	fp, r6
		num /= base;
    1c38:	460a      	mov	r2, r1
    1c3a:	4603      	mov	r3, r0
    1c3c:	e7dc      	b.n	1bf8 <cbvprintf+0x314>
			data = va_arg(ap, char *);
    1c3e:	f855 bb04 	ldr.w	fp, [r5], #4
			data_len = strlen(data);
    1c42:	4658      	mov	r0, fp
    1c44:	f006 fb15 	bl	8272 <strlen>
			if (precision >= 0 && data_len > precision) {
    1c48:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    1c4a:	4606      	mov	r6, r0
			if (precision >= 0 && data_len > precision) {
    1c4c:	db02      	blt.n	1c54 <cbvprintf+0x370>
    1c4e:	42b8      	cmp	r0, r7
    1c50:	bfa8      	it	ge
    1c52:	463e      	movge	r6, r7
			precision = 0;
    1c54:	2700      	movs	r7, #0
	prefix = "";
    1c56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1d3c <cbvprintf+0x458>
    1c5a:	e78c      	b.n	1b76 <cbvprintf+0x292>
			buf[0] = c;
    1c5c:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1c60:	2601      	movs	r6, #1
			buf[0] = c;
    1c62:	f88d 3018 	strb.w	r3, [sp, #24]
	prefix = "";
    1c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1d3c <cbvprintf+0x458>
		precision -= data_len;
    1c6a:	f04f 33ff 	mov.w	r3, #4294967295
		min_width -= data_len;
    1c6e:	3c01      	subs	r4, #1
			data = buf;
    1c70:	f10d 0b18 	add.w	fp, sp, #24
    1c74:	e79c      	b.n	1bb0 <cbvprintf+0x2cc>
    1c76:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
    1c78:	2020      	movs	r0, #32
    1c7a:	9901      	ldr	r1, [sp, #4]
    1c7c:	47c8      	blx	r9
    1c7e:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
    1c80:	3f01      	subs	r7, #1
    1c82:	d5f8      	bpl.n	1c76 <cbvprintf+0x392>
    1c84:	1e62      	subs	r2, r4, #1
    1c86:	1c50      	adds	r0, r2, #1
    1c88:	bfac      	ite	ge
    1c8a:	4621      	movge	r1, r4
    1c8c:	2100      	movlt	r1, #0
    1c8e:	f1c4 0400 	rsb	r4, r4, #0
    1c92:	bfb8      	it	lt
    1c94:	2400      	movlt	r4, #0
    1c96:	4488      	add	r8, r1
    1c98:	4414      	add	r4, r2
    1c9a:	4657      	mov	r7, sl
    1c9c:	e006      	b.n	1cac <cbvprintf+0x3c8>
    1c9e:	9304      	str	r3, [sp, #16]
    1ca0:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1ca2:	9901      	ldr	r1, [sp, #4]
    1ca4:	47c8      	blx	r9
    1ca6:	9a02      	ldr	r2, [sp, #8]
    1ca8:	9b04      	ldr	r3, [sp, #16]
    1caa:	4617      	mov	r7, r2
		while (*prefix) {
    1cac:	463a      	mov	r2, r7
    1cae:	f812 0b01 	ldrb.w	r0, [r2], #1
    1cb2:	2800      	cmp	r0, #0
    1cb4:	d1f3      	bne.n	1c9e <cbvprintf+0x3ba>
    1cb6:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
    1cb8:	3a01      	subs	r2, #1
    1cba:	d51a      	bpl.n	1cf2 <cbvprintf+0x40e>
    1cbc:	1e5a      	subs	r2, r3, #1
    1cbe:	3201      	adds	r2, #1
    1cc0:	bfb8      	it	lt
    1cc2:	2300      	movlt	r3, #0
    1cc4:	eba3 0a0a 	sub.w	sl, r3, sl
    1cc8:	4633      	mov	r3, r6
			OUTC('0');
		}
		while (--data_len >= 0) {
    1cca:	3b01      	subs	r3, #1
    1ccc:	d519      	bpl.n	1d02 <cbvprintf+0x41e>
    1cce:	1e73      	subs	r3, r6, #1
    1cd0:	3301      	adds	r3, #1
    1cd2:	bfb8      	it	lt
    1cd4:	2600      	movlt	r6, #0
    1cd6:	4456      	add	r6, sl
    1cd8:	4446      	add	r6, r8
    1cda:	46a0      	mov	r8, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1cdc:	f1b8 0801 	subs.w	r8, r8, #1
    1ce0:	d516      	bpl.n	1d10 <cbvprintf+0x42c>
    1ce2:	1e63      	subs	r3, r4, #1
    1ce4:	3301      	adds	r3, #1
    1ce6:	bfb8      	it	lt
    1ce8:	2400      	movlt	r4, #0
    1cea:	4434      	add	r4, r6
    1cec:	eb04 0807 	add.w	r8, r4, r7
    1cf0:	e602      	b.n	18f8 <cbvprintf+0x14>
    1cf2:	9304      	str	r3, [sp, #16]
    1cf4:	9202      	str	r2, [sp, #8]
			OUTC('0');
    1cf6:	2030      	movs	r0, #48	; 0x30
    1cf8:	9901      	ldr	r1, [sp, #4]
    1cfa:	47c8      	blx	r9
    1cfc:	9b04      	ldr	r3, [sp, #16]
    1cfe:	9a02      	ldr	r2, [sp, #8]
    1d00:	e7da      	b.n	1cb8 <cbvprintf+0x3d4>
    1d02:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
    1d04:	9901      	ldr	r1, [sp, #4]
    1d06:	f81b 0b01 	ldrb.w	r0, [fp], #1
    1d0a:	47c8      	blx	r9
    1d0c:	9b02      	ldr	r3, [sp, #8]
    1d0e:	e7dc      	b.n	1cca <cbvprintf+0x3e6>
			OUTC(' ');
    1d10:	9901      	ldr	r1, [sp, #4]
    1d12:	2020      	movs	r0, #32
    1d14:	47c8      	blx	r9
    1d16:	e7e1      	b.n	1cdc <cbvprintf+0x3f8>
				padding_mode = PAD_ZERO;
    1d18:	2201      	movs	r2, #1
    1d1a:	e6c2      	b.n	1aa2 <cbvprintf+0x1be>
				precision = va_arg(ap, int);
    1d1c:	4617      	mov	r7, r2
    1d1e:	e650      	b.n	19c2 <cbvprintf+0xde>
    1d20:	4614      	mov	r4, r2
    1d22:	e64e      	b.n	19c2 <cbvprintf+0xde>
				length_mod = 'L';
    1d24:	234c      	movs	r3, #76	; 0x4c
    1d26:	e64c      	b.n	19c2 <cbvprintf+0xde>
		}

		goto start;
	}
}
    1d28:	4640      	mov	r0, r8
    1d2a:	b00d      	add	sp, #52	; 0x34
    1d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d30:	00009ff4 	.word	0x00009ff4
    1d34:	000099e3 	.word	0x000099e3
    1d38:	000099e5 	.word	0x000099e5
    1d3c:	0000a33b 	.word	0x0000a33b
    1d40:	000099ed 	.word	0x000099ed
    1d44:	000099e7 	.word	0x000099e7
    1d48:	000099ea 	.word	0x000099ea

00001d4c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1d4c:	4604      	mov	r4, r0
    1d4e:	b508      	push	{r3, lr}
	__asm__ volatile(
    1d50:	f04f 0220 	mov.w	r2, #32
    1d54:	f3ef 8311 	mrs	r3, BASEPRI
    1d58:	f382 8811 	msr	BASEPRI, r2
    1d5c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1d60:	f006 f809 	bl	7d76 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1d64:	4620      	mov	r0, r4
    1d66:	f001 fceb 	bl	3740 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d6a:	4803      	ldr	r0, [pc, #12]	; (1d78 <sys_reboot+0x2c>)
    1d6c:	f005 fdcd 	bl	790a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d70:	f001 fa14 	bl	319c <arch_cpu_idle>
    1d74:	e7fc      	b.n	1d70 <sys_reboot+0x24>
    1d76:	bf00      	nop
    1d78:	000099f3 	.word	0x000099f3

00001d7c <nordicsemi_nrf91_init>:
    1d7c:	f04f 0220 	mov.w	r2, #32
    1d80:	f3ef 8311 	mrs	r3, BASEPRI
    1d84:	f382 8811 	msr	BASEPRI, r2
    1d88:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1d8c:	2101      	movs	r1, #1
    1d8e:	4a04      	ldr	r2, [pc, #16]	; (1da0 <nordicsemi_nrf91_init+0x24>)
    1d90:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1d94:	f383 8811 	msr	BASEPRI, r3
    1d98:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1d9c:	2000      	movs	r0, #0
    1d9e:	4770      	bx	lr
    1da0:	50039000 	.word	0x50039000

00001da4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1da4:	b120      	cbz	r0, 1db0 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1da6:	4b03      	ldr	r3, [pc, #12]	; (1db4 <arch_busy_wait+0x10>)
    1da8:	0180      	lsls	r0, r0, #6
    1daa:	f043 0301 	orr.w	r3, r3, #1
    1dae:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1db0:	4770      	bx	lr
    1db2:	bf00      	nop
    1db4:	000090e0 	.word	0x000090e0

00001db8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    1db8:	b084      	sub	sp, #16
    1dba:	ab04      	add	r3, sp, #16
    1dbc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    1dc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1dc4:	2b06      	cmp	r3, #6
    1dc6:	d107      	bne.n	1dd8 <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    1dc8:	2201      	movs	r2, #1
    1dca:	4b04      	ldr	r3, [pc, #16]	; (1ddc <pm_power_state_set+0x24>)
    1dcc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1dd0:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    1dd4:	bf20      	wfe
    while (true)
    1dd6:	e7fd      	b.n	1dd4 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    1dd8:	b004      	add	sp, #16
    1dda:	4770      	bx	lr
    1ddc:	50004000 	.word	0x50004000

00001de0 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1de0:	4b08      	ldr	r3, [pc, #32]	; (1e04 <get_flash_area_from_id+0x24>)
{
    1de2:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    1de4:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    1de6:	4b08      	ldr	r3, [pc, #32]	; (1e08 <get_flash_area_from_id+0x28>)
{
    1de8:	4601      	mov	r1, r0
    1dea:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    1dec:	2300      	movs	r3, #0
    1dee:	429c      	cmp	r4, r3
    1df0:	dc01      	bgt.n	1df6 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    1df2:	2000      	movs	r0, #0
}
    1df4:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    1df6:	4610      	mov	r0, r2
    1df8:	7805      	ldrb	r5, [r0, #0]
    1dfa:	3210      	adds	r2, #16
    1dfc:	428d      	cmp	r5, r1
    1dfe:	d0f9      	beq.n	1df4 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    1e00:	3301      	adds	r3, #1
    1e02:	e7f4      	b.n	1dee <get_flash_area_from_id+0xe>
    1e04:	00009138 	.word	0x00009138
    1e08:	20014514 	.word	0x20014514

00001e0c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1e0c:	4b08      	ldr	r3, [pc, #32]	; (1e30 <flash_area_open+0x24>)
{
    1e0e:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    1e10:	681b      	ldr	r3, [r3, #0]
{
    1e12:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    1e14:	b12b      	cbz	r3, 1e22 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1e16:	f7ff ffe3 	bl	1de0 <get_flash_area_from_id>
	if (area == NULL) {
    1e1a:	b128      	cbz	r0, 1e28 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1e1c:	6020      	str	r0, [r4, #0]
	return 0;
    1e1e:	2000      	movs	r0, #0
}
    1e20:	bd10      	pop	{r4, pc}
		return -EACCES;
    1e22:	f06f 000c 	mvn.w	r0, #12
    1e26:	e7fb      	b.n	1e20 <flash_area_open+0x14>
		return -ENOENT;
    1e28:	f06f 0001 	mvn.w	r0, #1
    1e2c:	e7f8      	b.n	1e20 <flash_area_open+0x14>
    1e2e:	bf00      	nop
    1e30:	20014514 	.word	0x20014514

00001e34 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1e34:	b530      	push	{r4, r5, lr}
    1e36:	b089      	sub	sp, #36	; 0x24
    1e38:	460c      	mov	r4, r1
    1e3a:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    1e3c:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    1e3e:	f7ff ffcf 	bl	1de0 <get_flash_area_from_id>
	if (fa == NULL) {
    1e42:	b1b8      	cbz	r0, 1e74 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    1e44:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1e46:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1e48:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1e4a:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1e4c:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    1e4e:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    1e52:	2300      	movs	r3, #0
	cb_data->status = 0;
    1e54:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1e58:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1e5a:	f005 fe42 	bl	7ae2 <device_get_binding>
	if (flash_dev == NULL) {
    1e5e:	b160      	cbz	r0, 1e7a <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    1e60:	4907      	ldr	r1, [pc, #28]	; (1e80 <flash_area_get_sectors+0x4c>)
    1e62:	aa01      	add	r2, sp, #4
    1e64:	f006 faeb 	bl	843e <flash_page_foreach>
	if (cb_data->status == 0) {
    1e68:	9807      	ldr	r0, [sp, #28]
    1e6a:	b908      	cbnz	r0, 1e70 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    1e6c:	9b05      	ldr	r3, [sp, #20]
    1e6e:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1e70:	b009      	add	sp, #36	; 0x24
    1e72:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    1e74:	f06f 0015 	mvn.w	r0, #21
    1e78:	e7fa      	b.n	1e70 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    1e7a:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1e7e:	e7f7      	b.n	1e70 <flash_area_get_sectors+0x3c>
    1e80:	00007ae7 	.word	0x00007ae7

00001e84 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e86:	4605      	mov	r5, r0
	__asm__ volatile(
    1e88:	f04f 0320 	mov.w	r3, #32
    1e8c:	f3ef 8611 	mrs	r6, BASEPRI
    1e90:	f383 8811 	msr	BASEPRI, r3
    1e94:	f3bf 8f6f 	isb	sy
	return list->head;
    1e98:	4b09      	ldr	r3, [pc, #36]	; (1ec0 <pm_state_notify+0x3c>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    1e9a:	4f0a      	ldr	r7, [pc, #40]	; (1ec4 <pm_state_notify+0x40>)
    1e9c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1e9e:	b924      	cbnz	r4, 1eaa <pm_state_notify+0x26>
	__asm__ volatile(
    1ea0:	f386 8811 	msr	BASEPRI, r6
    1ea4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			callback = notifier->state_exit;
    1eaa:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1eae:	2d00      	cmp	r5, #0
    1eb0:	bf18      	it	ne
    1eb2:	4613      	movne	r3, r2
		if (callback) {
    1eb4:	b10b      	cbz	r3, 1eba <pm_state_notify+0x36>
			callback(z_power_state.state);
    1eb6:	7838      	ldrb	r0, [r7, #0]
    1eb8:	4798      	blx	r3
	return node->next;
    1eba:	6824      	ldr	r4, [r4, #0]
    1ebc:	e7ef      	b.n	1e9e <pm_state_notify+0x1a>
    1ebe:	bf00      	nop
    1ec0:	20015c60 	.word	0x20015c60
    1ec4:	20015c68 	.word	0x20015c68

00001ec8 <pm_system_resume>:

void pm_system_resume(void)
{
    1ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    1eca:	4b0f      	ldr	r3, [pc, #60]	; (1f08 <pm_system_resume+0x40>)
    1ecc:	681a      	ldr	r2, [r3, #0]
    1ece:	b9ba      	cbnz	r2, 1f00 <pm_system_resume+0x38>
		post_ops_done = 1;
    1ed0:	2201      	movs	r2, #1
    1ed2:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    1ed4:	4a0d      	ldr	r2, [pc, #52]	; (1f0c <pm_system_resume+0x44>)
    1ed6:	ab01      	add	r3, sp, #4
    1ed8:	ca07      	ldmia	r2, {r0, r1, r2}
    1eda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1ede:	4a0c      	ldr	r2, [pc, #48]	; (1f10 <pm_system_resume+0x48>)
    1ee0:	b14a      	cbz	r2, 1ef6 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    1ee2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1ee6:	f005 fde4 	bl	7ab2 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1eea:	2000      	movs	r0, #0
	}
}
    1eec:	b005      	add	sp, #20
    1eee:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    1ef2:	f7ff bfc7 	b.w	1e84 <pm_state_notify>
    1ef6:	f382 8811 	msr	BASEPRI, r2
    1efa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1efe:	e7f4      	b.n	1eea <pm_system_resume+0x22>
}
    1f00:	b005      	add	sp, #20
    1f02:	f85d fb04 	ldr.w	pc, [sp], #4
    1f06:	bf00      	nop
    1f08:	20014510 	.word	0x20014510
    1f0c:	20015c68 	.word	0x20015c68
    1f10:	00007ab3 	.word	0x00007ab3

00001f14 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    1f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f16:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    1f18:	466e      	mov	r6, sp
    1f1a:	4c1b      	ldr	r4, [pc, #108]	; (1f88 <pm_system_suspend+0x74>)
    1f1c:	4601      	mov	r1, r0
{
    1f1e:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    1f20:	4630      	mov	r0, r6
    1f22:	f005 fe91 	bl	7c48 <pm_policy_next_state>
    1f26:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1f2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    1f2e:	7820      	ldrb	r0, [r4, #0]
    1f30:	4627      	mov	r7, r4
    1f32:	b338      	cbz	r0, 1f84 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    1f34:	2100      	movs	r1, #0
    1f36:	4b15      	ldr	r3, [pc, #84]	; (1f8c <pm_system_suspend+0x78>)
    1f38:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    1f3a:	1c6b      	adds	r3, r5, #1
    1f3c:	d00d      	beq.n	1f5a <pm_system_suspend+0x46>
			return (uint32_t)((t * to_hz + off) / from_hz);
    1f3e:	4616      	mov	r6, r2
    1f40:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1f44:	4812      	ldr	r0, [pc, #72]	; (1f90 <pm_system_suspend+0x7c>)
    1f46:	2300      	movs	r3, #0
    1f48:	fbe6 010c 	umlal	r0, r1, r6, ip
    1f4c:	4a11      	ldr	r2, [pc, #68]	; (1f94 <pm_system_suspend+0x80>)
    1f4e:	f7fe f8f9 	bl	144 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1f52:	2101      	movs	r1, #1
    1f54:	1a28      	subs	r0, r5, r0
    1f56:	f006 fe8b 	bl	8c70 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1f5a:	f003 fa97 	bl	548c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    1f5e:	2001      	movs	r0, #1
    1f60:	f7ff ff90 	bl	1e84 <pm_state_notify>
	pm_state_set(z_power_state);
    1f64:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    1f68:	ab05      	add	r3, sp, #20
    1f6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1f6e:	4a0a      	ldr	r2, [pc, #40]	; (1f98 <pm_system_suspend+0x84>)
    1f70:	b11a      	cbz	r2, 1f7a <pm_system_suspend+0x66>
		pm_power_state_set(info);
    1f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1f76:	f7ff ff1f 	bl	1db8 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    1f7a:	f7ff ffa5 	bl	1ec8 <pm_system_resume>
	k_sched_unlock();
    1f7e:	f003 fa99 	bl	54b4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    1f82:	7820      	ldrb	r0, [r4, #0]
}
    1f84:	b009      	add	sp, #36	; 0x24
    1f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f88:	20015c68 	.word	0x20015c68
    1f8c:	20014510 	.word	0x20014510
    1f90:	000f423f 	.word	0x000f423f
    1f94:	000f4240 	.word	0x000f4240
    1f98:	00001db9 	.word	0x00001db9

00001f9c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1f9c:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1f9e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1fa0:	1ac3      	subs	r3, r0, r3
{
    1fa2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1fa4:	4907      	ldr	r1, [pc, #28]	; (1fc4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1fa6:	109b      	asrs	r3, r3, #2
{
    1fa8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1faa:	4359      	muls	r1, r3
    1fac:	2240      	movs	r2, #64	; 0x40
    1fae:	4806      	ldr	r0, [pc, #24]	; (1fc8 <onoff_stop+0x2c>)
    1fb0:	f005 fe6b 	bl	7c8a <stop>
	notify(mgr, res);
    1fb4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1fb6:	4601      	mov	r1, r0
	notify(mgr, res);
    1fb8:	4620      	mov	r0, r4
}
    1fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1fbe:	4718      	bx	r3
    1fc0:	20015c8c 	.word	0x20015c8c
    1fc4:	b6db6db7 	.word	0xb6db6db7
    1fc8:	00008d7c 	.word	0x00008d7c

00001fcc <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1fcc:	2340      	movs	r3, #64	; 0x40
{
    1fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1fd0:	4c0b      	ldr	r4, [pc, #44]	; (2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1fd2:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    1fd4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1fd6:	460b      	mov	r3, r1
{
    1fd8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1fda:	490a      	ldr	r1, [pc, #40]	; (2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>)
	size_t offset = (size_t)(mgr - data->mgr);
    1fdc:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1fde:	4361      	muls	r1, r4
{
    1fe0:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1fe2:	4a09      	ldr	r2, [pc, #36]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
    1fe4:	4809      	ldr	r0, [pc, #36]	; (200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>)
    1fe6:	f005 fe7c 	bl	7ce2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1fea:	1e01      	subs	r1, r0, #0
    1fec:	da05      	bge.n	1ffa <onoff_start+0x2e>
		notify(mgr, err);
    1fee:	4630      	mov	r0, r6
    1ff0:	462b      	mov	r3, r5
	}
}
    1ff2:	b002      	add	sp, #8
    1ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1ff8:	4718      	bx	r3
}
    1ffa:	b002      	add	sp, #8
    1ffc:	bd70      	pop	{r4, r5, r6, pc}
    1ffe:	bf00      	nop
    2000:	20015c8c 	.word	0x20015c8c
    2004:	b6db6db7 	.word	0xb6db6db7
    2008:	00007d4d 	.word	0x00007d4d
    200c:	00008d7c 	.word	0x00008d7c

00002010 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2010:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2012:	2200      	movs	r2, #0
    2014:	2101      	movs	r1, #1
{
    2016:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2018:	2005      	movs	r0, #5
    201a:	f001 f863 	bl	30e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    201e:	2005      	movs	r0, #5
    2020:	f001 f844 	bl	30ac <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2024:	480f      	ldr	r0, [pc, #60]	; (2064 <clk_init+0x54>)
    2026:	f002 fbe7 	bl	47f8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    202a:	4b0f      	ldr	r3, [pc, #60]	; (2068 <clk_init+0x58>)
    202c:	4298      	cmp	r0, r3
    202e:	d115      	bne.n	205c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2030:	f006 fc64 	bl	88fc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2034:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2036:	490d      	ldr	r1, [pc, #52]	; (206c <clk_init+0x5c>)
    2038:	4630      	mov	r0, r6
    203a:	f005 fcc4 	bl	79c6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    203e:	2800      	cmp	r0, #0
    2040:	db0b      	blt.n	205a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2042:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    2044:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2046:	4909      	ldr	r1, [pc, #36]	; (206c <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2048:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    204a:	f104 001c 	add.w	r0, r4, #28
    204e:	f005 fcba 	bl	79c6 <onoff_manager_init>
		if (err < 0) {
    2052:	2800      	cmp	r0, #0
    2054:	db01      	blt.n	205a <clk_init+0x4a>
	}

	return 0;
    2056:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2058:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    205a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    205c:	f06f 0004 	mvn.w	r0, #4
    2060:	e7fb      	b.n	205a <clk_init+0x4a>
    2062:	bf00      	nop
    2064:	000020a5 	.word	0x000020a5
    2068:	0bad0000 	.word	0x0bad0000
    206c:	00009100 	.word	0x00009100

00002070 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2070:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2072:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    2074:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    2076:	434b      	muls	r3, r1
    2078:	4808      	ldr	r0, [pc, #32]	; (209c <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    207a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    207c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    207e:	3340      	adds	r3, #64	; 0x40
    2080:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    2082:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2086:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2088:	f005 fdec 	bl	7c64 <set_on_state>
	if (callback) {
    208c:	b12d      	cbz	r5, 209a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    208e:	4632      	mov	r2, r6
    2090:	462b      	mov	r3, r5
}
    2092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2096:	4802      	ldr	r0, [pc, #8]	; (20a0 <clkstarted_handle.constprop.0+0x30>)
    2098:	4718      	bx	r3
}
    209a:	bd70      	pop	{r4, r5, r6, pc}
    209c:	20015c8c 	.word	0x20015c8c
    20a0:	00008d7c 	.word	0x00008d7c

000020a4 <clock_event_handler>:
	switch (event) {
    20a4:	b110      	cbz	r0, 20ac <clock_event_handler+0x8>
    20a6:	2801      	cmp	r0, #1
    20a8:	d004      	beq.n	20b4 <clock_event_handler+0x10>
    20aa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    20ac:	4b03      	ldr	r3, [pc, #12]	; (20bc <clock_event_handler+0x18>)
    20ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    20b0:	075b      	lsls	r3, r3, #29
    20b2:	d101      	bne.n	20b8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    20b4:	f7ff bfdc 	b.w	2070 <clkstarted_handle.constprop.0>
}
    20b8:	4770      	bx	lr
    20ba:	bf00      	nop
    20bc:	20015c8c 	.word	0x20015c8c

000020c0 <generic_hfclk_start>:
{
    20c0:	b508      	push	{r3, lr}
	__asm__ volatile(
    20c2:	f04f 0320 	mov.w	r3, #32
    20c6:	f3ef 8111 	mrs	r1, BASEPRI
    20ca:	f383 8811 	msr	BASEPRI, r3
    20ce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    20d2:	4a12      	ldr	r2, [pc, #72]	; (211c <generic_hfclk_start+0x5c>)
    20d4:	6813      	ldr	r3, [r2, #0]
    20d6:	f043 0002 	orr.w	r0, r3, #2
    20da:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    20dc:	07da      	lsls	r2, r3, #31
    20de:	d408      	bmi.n	20f2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    20e0:	f381 8811 	msr	BASEPRI, r1
    20e4:	f3bf 8f6f 	isb	sy
}
    20e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    20ec:	2001      	movs	r0, #1
    20ee:	f006 bc10 	b.w	8912 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    20f2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    20f6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    20fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    20fe:	07d3      	lsls	r3, r2, #31
    2100:	d5ee      	bpl.n	20e0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    2102:	4807      	ldr	r0, [pc, #28]	; (2120 <generic_hfclk_start+0x60>)
    2104:	f005 fdae 	bl	7c64 <set_on_state>
    2108:	f381 8811 	msr	BASEPRI, r1
    210c:	f3bf 8f6f 	isb	sy
}
    2110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2114:	2000      	movs	r0, #0
    2116:	f7ff bfab 	b.w	2070 <clkstarted_handle.constprop.0>
    211a:	bf00      	nop
    211c:	20015cdc 	.word	0x20015cdc
    2120:	20015ccc 	.word	0x20015ccc

00002124 <api_blocking_start>:
{
    2124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2126:	2200      	movs	r2, #0
    2128:	2301      	movs	r3, #1
    212a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    212e:	466b      	mov	r3, sp
    2130:	4a08      	ldr	r2, [pc, #32]	; (2154 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2132:	f8cd d000 	str.w	sp, [sp]
    2136:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    213a:	f005 fe00 	bl	7d3e <api_start>
	if (err < 0) {
    213e:	2800      	cmp	r0, #0
    2140:	db05      	blt.n	214e <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2146:	2300      	movs	r3, #0
    2148:	4668      	mov	r0, sp
    214a:	f002 ff67 	bl	501c <z_impl_k_sem_take>
}
    214e:	b005      	add	sp, #20
    2150:	f85d fb04 	ldr.w	pc, [sp], #4
    2154:	00007d6d 	.word	0x00007d6d

00002158 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2158:	4b07      	ldr	r3, [pc, #28]	; (2178 <generic_hfclk_stop+0x20>)
    215a:	e8d3 2fef 	ldaex	r2, [r3]
    215e:	f022 0102 	bic.w	r1, r2, #2
    2162:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2166:	2800      	cmp	r0, #0
    2168:	d1f7      	bne.n	215a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    216a:	07d3      	lsls	r3, r2, #31
    216c:	d402      	bmi.n	2174 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    216e:	2001      	movs	r0, #1
    2170:	f006 bbff 	b.w	8972 <nrfx_clock_stop>
}
    2174:	4770      	bx	lr
    2176:	bf00      	nop
    2178:	20015cdc 	.word	0x20015cdc

0000217c <z_nrf_clock_control_lf_on>:
{
    217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2180:	2201      	movs	r2, #1
    2182:	4607      	mov	r7, r0
    2184:	4937      	ldr	r1, [pc, #220]	; (2264 <z_nrf_clock_control_lf_on+0xe8>)
    2186:	e8d1 3fef 	ldaex	r3, [r1]
    218a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    218e:	2800      	cmp	r0, #0
    2190:	d1f9      	bne.n	2186 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    2192:	b933      	cbnz	r3, 21a2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2194:	4934      	ldr	r1, [pc, #208]	; (2268 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    2196:	4835      	ldr	r0, [pc, #212]	; (226c <z_nrf_clock_control_lf_on+0xf0>)
    2198:	604b      	str	r3, [r1, #4]
    219a:	60cb      	str	r3, [r1, #12]
    219c:	608a      	str	r2, [r1, #8]
    219e:	f005 fc25 	bl	79ec <onoff_request>
	switch (start_mode) {
    21a2:	1e7b      	subs	r3, r7, #1
    21a4:	2b01      	cmp	r3, #1
    21a6:	d82b      	bhi.n	2200 <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    21a8:	2f01      	cmp	r7, #1
    21aa:	d107      	bne.n	21bc <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    21ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21b0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    21b4:	f003 0303 	and.w	r3, r3, #3
    21b8:	2b02      	cmp	r3, #2
    21ba:	d021      	beq.n	2200 <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    21bc:	f006 fc69 	bl	8a92 <k_is_in_isr>
    21c0:	4605      	mov	r5, r0
    21c2:	b9f8      	cbnz	r0, 2204 <z_nrf_clock_control_lf_on+0x88>
	return !z_sys_post_kernel;
    21c4:	4b2a      	ldr	r3, [pc, #168]	; (2270 <z_nrf_clock_control_lf_on+0xf4>)
    21c6:	781b      	ldrb	r3, [r3, #0]
    21c8:	b1e3      	cbz	r3, 2204 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    21ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21ce:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    21d0:	4606      	mov	r6, r0
    21d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    21d6:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21da:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2274 <z_nrf_clock_control_lf_on+0xf8>
    21de:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    21e2:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    21e6:	03d2      	lsls	r2, r2, #15
    21e8:	d516      	bpl.n	2218 <z_nrf_clock_control_lf_on+0x9c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    21ea:	f003 0303 	and.w	r3, r3, #3
    21ee:	2b02      	cmp	r3, #2
    21f0:	d001      	beq.n	21f6 <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    21f2:	2f01      	cmp	r7, #1
    21f4:	d110      	bne.n	2218 <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    21f6:	b375      	cbz	r5, 2256 <z_nrf_clock_control_lf_on+0xda>
    21f8:	f386 8811 	msr	BASEPRI, r6
    21fc:	f3bf 8f6f 	isb	sy
}
    2200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    2204:	f04f 0320 	mov.w	r3, #32
    2208:	f3ef 8611 	mrs	r6, BASEPRI
    220c:	f383 8811 	msr	BASEPRI, r3
    2210:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2214:	2501      	movs	r5, #1
    2216:	e7de      	b.n	21d6 <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2218:	b1c5      	cbz	r5, 224c <z_nrf_clock_control_lf_on+0xd0>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    221a:	4630      	mov	r0, r6
    221c:	f000 ffcc 	bl	31b8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2220:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2224:	b2db      	uxtb	r3, r3
    2226:	2b01      	cmp	r3, #1
    2228:	d1d9      	bne.n	21de <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    222a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    222e:	2a00      	cmp	r2, #0
    2230:	d0d5      	beq.n	21de <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2232:	2200      	movs	r2, #0
    2234:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2238:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    223c:	2202      	movs	r2, #2
    223e:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    2242:	2220      	movs	r2, #32
    2244:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2248:	60a3      	str	r3, [r4, #8]
}
    224a:	e7c8      	b.n	21de <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    224c:	2100      	movs	r1, #0
    224e:	2021      	movs	r0, #33	; 0x21
    2250:	f003 f9de 	bl	5610 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2254:	e7e4      	b.n	2220 <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENSET = mask;
    2256:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    225a:	2202      	movs	r2, #2
    225c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2260:	e7ce      	b.n	2200 <z_nrf_clock_control_lf_on+0x84>
    2262:	bf00      	nop
    2264:	20015c84 	.word	0x20015c84
    2268:	20015c74 	.word	0x20015c74
    226c:	20015ca8 	.word	0x20015ca8
    2270:	20016d2f 	.word	0x20016d2f
    2274:	e000e100 	.word	0xe000e100

00002278 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    2278:	4a04      	ldr	r2, [pc, #16]	; (228c <sys_clock_timeout_handler+0x14>)
    227a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    227c:	1ac8      	subs	r0, r1, r3
    227e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2282:	4403      	add	r3, r0
    2284:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2286:	f003 bb17 	b.w	58b8 <sys_clock_announce>
    228a:	bf00      	nop
    228c:	20015cf0 	.word	0x20015cf0

00002290 <set_absolute_alarm>:
{
    2290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2294:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2298:	f04f 0900 	mov.w	r9, #0
    229c:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    229e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    22a2:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    22a6:	00a4      	lsls	r4, r4, #2
    22a8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    22ac:	b2a4      	uxth	r4, r4
    22ae:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    22b2:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    22b6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2324 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    22ba:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    22be:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    22c2:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    22c4:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    22c8:	eba3 030a 	sub.w	r3, r3, sl
    22cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    22d0:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    22d4:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    22d6:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    22da:	d102      	bne.n	22e2 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    22dc:	2013      	movs	r0, #19
    22de:	f006 fce9 	bl	8cb4 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    22e2:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    22e6:	1aab      	subs	r3, r5, r2
    22e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    22ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    22f0:	bf88      	it	hi
    22f2:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    22f4:	f8c4 9000 	str.w	r9, [r4]
    22f8:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    22fa:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
    22fe:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    2302:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    2306:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
	} while ((now2 != now) &&
    230a:	459a      	cmp	sl, r3
    230c:	d006      	beq.n	231c <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    230e:	1aeb      	subs	r3, r5, r3
    2310:	3b02      	subs	r3, #2
    2312:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    231a:	d801      	bhi.n	2320 <set_absolute_alarm+0x90>
}
    231c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    2320:	462b      	mov	r3, r5
    2322:	e7cf      	b.n	22c4 <set_absolute_alarm+0x34>
    2324:	50015000 	.word	0x50015000

00002328 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    2328:	4b11      	ldr	r3, [pc, #68]	; (2370 <rtc_nrf_isr+0x48>)
 */
void rtc_nrf_isr(const void *arg)
{
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    232a:	2000      	movs	r0, #0
    232c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
{
    2330:	b510      	push	{r4, lr}
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    2332:	03d2      	lsls	r2, r2, #15
    2334:	d51b      	bpl.n	236e <rtc_nrf_isr+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2336:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    233a:	b1c2      	cbz	r2, 236e <rtc_nrf_isr+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    233c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
    2340:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    p_reg->EVTENCLR = mask;
    2344:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2348:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    return p_reg->CC[ch];
    234c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
    2350:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2354:	1a8b      	subs	r3, r1, r2
    2356:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			uint32_t now;
			z_nrf_rtc_timer_compare_handler_t handler;

			event_clear(chan);
			event_disable(chan);
			cc_val = get_comparator(chan);
    235a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    235e:	bf98      	it	ls
    2360:	4611      	movls	r1, r2
			 */
			if (counter_sub(now, cc_val) > COUNTER_HALF_SPAN) {
				cc_val = now;
			}

			handler = cc_data[chan].callback;
    2362:	4b04      	ldr	r3, [pc, #16]	; (2374 <rtc_nrf_isr+0x4c>)
    2364:	681c      	ldr	r4, [r3, #0]
			cc_data[chan].callback = NULL;
    2366:	6018      	str	r0, [r3, #0]
			if (handler) {
    2368:	b10c      	cbz	r4, 236e <rtc_nrf_isr+0x46>
				handler(chan, cc_val,
    236a:	685a      	ldr	r2, [r3, #4]
    236c:	47a0      	blx	r4
					cc_data[chan].user_context);
			}
		}
	}
}
    236e:	bd10      	pop	{r4, pc}
    2370:	50015000 	.word	0x50015000
    2374:	20015ce8 	.word	0x20015ce8

00002378 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    2378:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    237a:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    237c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2380:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    2384:	4c0c      	ldr	r4, [pc, #48]	; (23b8 <sys_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2386:	2101      	movs	r1, #1
    2388:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    238c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2390:	4b0a      	ldr	r3, [pc, #40]	; (23bc <sys_clock_driver_init+0x44>)
    2392:	2015      	movs	r0, #21
    2394:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2398:	462a      	mov	r2, r5
    239a:	f000 fea3 	bl	30e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    239e:	2015      	movs	r0, #21
    23a0:	f000 fe84 	bl	30ac <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    23a4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    23a6:	4a06      	ldr	r2, [pc, #24]	; (23c0 <sys_clock_driver_init+0x48>)
    23a8:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    23aa:	2002      	movs	r0, #2
    23ac:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    23ae:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    23b0:	f7ff fee4 	bl	217c <z_nrf_clock_control_lf_on>

	return 0;
}
    23b4:	4628      	mov	r0, r5
    23b6:	bd38      	pop	{r3, r4, r5, pc}
    23b8:	50015000 	.word	0x50015000
    23bc:	e000e100 	.word	0xe000e100
    23c0:	20015ce4 	.word	0x20015ce4

000023c4 <sys_clock_set_timeout>:
     return p_reg->COUNTER;
    23c4:	4a13      	ldr	r2, [pc, #76]	; (2414 <sys_clock_set_timeout+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    23c6:	4914      	ldr	r1, [pc, #80]	; (2418 <sys_clock_set_timeout+0x54>)
{
    23c8:	b410      	push	{r4}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    23ca:	f1b0 3fff 	cmp.w	r0, #4294967295
    23ce:	bf14      	ite	ne
    23d0:	4603      	movne	r3, r0
    23d2:	460b      	moveq	r3, r1
    23d4:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);

	uint32_t unannounced = counter_sub(counter(), last_count);
    23d8:	4a10      	ldr	r2, [pc, #64]	; (241c <sys_clock_set_timeout+0x58>)
    23da:	6814      	ldr	r4, [r2, #0]
	return (a - b) & COUNTER_MAX;
    23dc:	1b00      	subs	r0, r0, r4
    23de:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    23e2:	0200      	lsls	r0, r0, #8
    23e4:	d414      	bmi.n	2410 <sys_clock_set_timeout+0x4c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    23e6:	3b01      	subs	r3, #1
    23e8:	428b      	cmp	r3, r1
    23ea:	bfa8      	it	ge
    23ec:	460b      	movge	r3, r1
    23ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    23f2:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    23f4:	480a      	ldr	r0, [pc, #40]	; (2420 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    23f6:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    23f8:	4a0a      	ldr	r2, [pc, #40]	; (2424 <sys_clock_set_timeout+0x60>)
	set_absolute_alarm(chan, cc_value);
    23fa:	428b      	cmp	r3, r1
    23fc:	bf94      	ite	ls
    23fe:	18e1      	addls	r1, r4, r3
    2400:	1861      	addhi	r1, r4, r1
	cc_data[chan].callback = handler;
    2402:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    2404:	2000      	movs	r0, #0
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}
    2406:	f85d 4b04 	ldr.w	r4, [sp], #4
	cc_data[chan].user_context = user_data;
    240a:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    240c:	f7ff bf40 	b.w	2290 <set_absolute_alarm>
		ticks = 0;
    2410:	2300      	movs	r3, #0
    2412:	e7ee      	b.n	23f2 <sys_clock_set_timeout+0x2e>
    2414:	50015000 	.word	0x50015000
    2418:	007fffff 	.word	0x007fffff
    241c:	20015cf0 	.word	0x20015cf0
    2420:	00002279 	.word	0x00002279
    2424:	20015ce8 	.word	0x20015ce8

00002428 <sys_clock_elapsed>:
    2428:	4b04      	ldr	r3, [pc, #16]	; (243c <sys_clock_elapsed+0x14>)
    242a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    242e:	4b04      	ldr	r3, [pc, #16]	; (2440 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    2430:	681b      	ldr	r3, [r3, #0]
    2432:	1ac0      	subs	r0, r0, r3
}
    2434:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2438:	4770      	bx	lr
    243a:	bf00      	nop
    243c:	50015000 	.word	0x50015000
    2440:	20015cf0 	.word	0x20015cf0

00002444 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2444:	4801      	ldr	r0, [pc, #4]	; (244c <nrf_cc3xx_platform_abort_init+0x8>)
    2446:	f003 baf5 	b.w	5a34 <nrf_cc3xx_platform_set_abort>
    244a:	bf00      	nop
    244c:	000091dc 	.word	0x000091dc

00002450 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2450:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2452:	4604      	mov	r4, r0
    2454:	b918      	cbnz	r0, 245e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2456:	4b0d      	ldr	r3, [pc, #52]	; (248c <mutex_free_platform+0x3c>)
    2458:	480d      	ldr	r0, [pc, #52]	; (2490 <mutex_free_platform+0x40>)
    245a:	685b      	ldr	r3, [r3, #4]
    245c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    245e:	6861      	ldr	r1, [r4, #4]
    2460:	f031 0304 	bics.w	r3, r1, #4
    2464:	d00c      	beq.n	2480 <mutex_free_platform+0x30>
    2466:	2908      	cmp	r1, #8
    2468:	d00a      	beq.n	2480 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    246a:	f011 0102 	ands.w	r1, r1, #2
    246e:	d008      	beq.n	2482 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2470:	4621      	mov	r1, r4
    2472:	4808      	ldr	r0, [pc, #32]	; (2494 <mutex_free_platform+0x44>)
    2474:	f006 fae4 	bl	8a40 <k_mem_slab_free>
        mutex->mutex = NULL;
    2478:	2300      	movs	r3, #0
    247a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    247c:	2300      	movs	r3, #0
    247e:	6063      	str	r3, [r4, #4]
}
    2480:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2482:	2214      	movs	r2, #20
    2484:	6820      	ldr	r0, [r4, #0]
    2486:	f005 ff39 	bl	82fc <memset>
    248a:	e7f7      	b.n	247c <mutex_free_platform+0x2c>
    248c:	200145b4 	.word	0x200145b4
    2490:	00009a59 	.word	0x00009a59
    2494:	200161f4 	.word	0x200161f4

00002498 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2498:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    249a:	b1e8      	cbz	r0, 24d8 <mutex_lock_platform+0x40>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    249c:	6843      	ldr	r3, [r0, #4]
    249e:	2b04      	cmp	r3, #4
    24a0:	d10c      	bne.n	24bc <mutex_lock_platform+0x24>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    24a2:	2201      	movs	r2, #1
    24a4:	6803      	ldr	r3, [r0, #0]
    24a6:	e8d3 1fef 	ldaex	r1, [r3]
    24aa:	2900      	cmp	r1, #0
    24ac:	d103      	bne.n	24b6 <mutex_lock_platform+0x1e>
    24ae:	e8c3 2fe0 	stlex	r0, r2, [r3]
    24b2:	2800      	cmp	r0, #0
    24b4:	d1f7      	bne.n	24a6 <mutex_lock_platform+0xe>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    24b6:	d10b      	bne.n	24d0 <mutex_lock_platform+0x38>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    24b8:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    24ba:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    24bc:	b153      	cbz	r3, 24d4 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    24be:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    24c0:	f04f 32ff 	mov.w	r2, #4294967295
    24c4:	f04f 33ff 	mov.w	r3, #4294967295
    24c8:	f002 fcce 	bl	4e68 <z_impl_k_mutex_lock>
        if (ret == 0) {
    24cc:	2800      	cmp	r0, #0
    24ce:	d0f3      	beq.n	24b8 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    24d0:	4803      	ldr	r0, [pc, #12]	; (24e0 <mutex_lock_platform+0x48>)
    24d2:	e7f2      	b.n	24ba <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    24d4:	4803      	ldr	r0, [pc, #12]	; (24e4 <mutex_lock_platform+0x4c>)
    24d6:	e7f0      	b.n	24ba <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    24d8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    24dc:	e7ed      	b.n	24ba <mutex_lock_platform+0x22>
    24de:	bf00      	nop
    24e0:	ffff8fe9 	.word	0xffff8fe9
    24e4:	ffff8fea 	.word	0xffff8fea

000024e8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    24e8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    24ea:	b1a0      	cbz	r0, 2516 <mutex_unlock_platform+0x2e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    24ec:	6843      	ldr	r3, [r0, #4]
    24ee:	2b04      	cmp	r3, #4
    24f0:	d10c      	bne.n	250c <mutex_unlock_platform+0x24>
    24f2:	2200      	movs	r2, #0
    24f4:	6803      	ldr	r3, [r0, #0]
    24f6:	e8d3 1fef 	ldaex	r1, [r3]
    24fa:	2901      	cmp	r1, #1
    24fc:	d103      	bne.n	2506 <mutex_unlock_platform+0x1e>
    24fe:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2502:	2800      	cmp	r0, #0
    2504:	d1f7      	bne.n	24f6 <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2506:	d109      	bne.n	251c <mutex_unlock_platform+0x34>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2508:	2000      	movs	r0, #0
    }
}
    250a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    250c:	b143      	cbz	r3, 2520 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    250e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2510:	f002 fd22 	bl	4f58 <z_impl_k_mutex_unlock>
    2514:	e7f8      	b.n	2508 <mutex_unlock_platform+0x20>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2516:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    251a:	e7f6      	b.n	250a <mutex_unlock_platform+0x22>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    251c:	4801      	ldr	r0, [pc, #4]	; (2524 <mutex_unlock_platform+0x3c>)
    251e:	e7f4      	b.n	250a <mutex_unlock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2520:	4801      	ldr	r0, [pc, #4]	; (2528 <mutex_unlock_platform+0x40>)
    2522:	e7f2      	b.n	250a <mutex_unlock_platform+0x22>
    2524:	ffff8fe9 	.word	0xffff8fe9
    2528:	ffff8fea 	.word	0xffff8fea

0000252c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    252c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    252e:	4604      	mov	r4, r0
    2530:	b918      	cbnz	r0, 253a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2532:	4b16      	ldr	r3, [pc, #88]	; (258c <mutex_init_platform+0x60>)
    2534:	4816      	ldr	r0, [pc, #88]	; (2590 <mutex_init_platform+0x64>)
    2536:	685b      	ldr	r3, [r3, #4]
    2538:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    253a:	6863      	ldr	r3, [r4, #4]
    253c:	2b04      	cmp	r3, #4
    253e:	d023      	beq.n	2588 <mutex_init_platform+0x5c>
    2540:	2b08      	cmp	r3, #8
    2542:	d021      	beq.n	2588 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2544:	b9cb      	cbnz	r3, 257a <mutex_init_platform+0x4e>
    2546:	6823      	ldr	r3, [r4, #0]
    2548:	b9bb      	cbnz	r3, 257a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    254a:	f04f 32ff 	mov.w	r2, #4294967295
    254e:	f04f 33ff 	mov.w	r3, #4294967295
    2552:	4621      	mov	r1, r4
    2554:	480f      	ldr	r0, [pc, #60]	; (2594 <mutex_init_platform+0x68>)
    2556:	f002 fbb7 	bl	4cc8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    255a:	b908      	cbnz	r0, 2560 <mutex_init_platform+0x34>
    255c:	6823      	ldr	r3, [r4, #0]
    255e:	b91b      	cbnz	r3, 2568 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2560:	4b0a      	ldr	r3, [pc, #40]	; (258c <mutex_init_platform+0x60>)
    2562:	480d      	ldr	r0, [pc, #52]	; (2598 <mutex_init_platform+0x6c>)
    2564:	685b      	ldr	r3, [r3, #4]
    2566:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2568:	2214      	movs	r2, #20
    256a:	2100      	movs	r1, #0
    256c:	6820      	ldr	r0, [r4, #0]
    256e:	f005 fec5 	bl	82fc <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2572:	6863      	ldr	r3, [r4, #4]
    2574:	f043 0302 	orr.w	r3, r3, #2
    2578:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    257a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    257c:	f006 faa0 	bl	8ac0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2580:	6863      	ldr	r3, [r4, #4]
    2582:	f043 0301 	orr.w	r3, r3, #1
    2586:	6063      	str	r3, [r4, #4]
}
    2588:	bd10      	pop	{r4, pc}
    258a:	bf00      	nop
    258c:	200145b4 	.word	0x200145b4
    2590:	00009a59 	.word	0x00009a59
    2594:	200161f4 	.word	0x200161f4
    2598:	00009a7f 	.word	0x00009a7f

0000259c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    259c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    259e:	4906      	ldr	r1, [pc, #24]	; (25b8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    25a0:	2340      	movs	r3, #64	; 0x40
    25a2:	2214      	movs	r2, #20
    25a4:	4805      	ldr	r0, [pc, #20]	; (25bc <nrf_cc3xx_platform_mutex_init+0x20>)
    25a6:	f006 fa30 	bl	8a0a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    25aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    25ae:	4904      	ldr	r1, [pc, #16]	; (25c0 <nrf_cc3xx_platform_mutex_init+0x24>)
    25b0:	4804      	ldr	r0, [pc, #16]	; (25c4 <nrf_cc3xx_platform_mutex_init+0x28>)
    25b2:	f003 ba9d 	b.w	5af0 <nrf_cc3xx_platform_set_mutexes>
    25b6:	bf00      	nop
    25b8:	20015cf4 	.word	0x20015cf4
    25bc:	200161f4 	.word	0x200161f4
    25c0:	000091e4 	.word	0x000091e4
    25c4:	000091f8 	.word	0x000091f8

000025c8 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    25c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    25ca:	4e25      	ldr	r6, [pc, #148]	; (2660 <boot_uart_fifo_callback+0x98>)
    25cc:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    25ce:	6883      	ldr	r3, [r0, #8]
    25d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    25d2:	b103      	cbz	r3, 25d6 <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    25d4:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    25d6:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    25d8:	6883      	ldr	r3, [r0, #8]
    25da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    25dc:	2b00      	cmp	r3, #0
    25de:	d132      	bne.n	2646 <boot_uart_fifo_callback+0x7e>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    25e0:	4c20      	ldr	r4, [pc, #128]	; (2664 <boot_uart_fifo_callback+0x9c>)
	return list->head;
    25e2:	4d21      	ldr	r5, [pc, #132]	; (2668 <boot_uart_fifo_callback+0xa0>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    25e4:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read != NULL) {
    25e6:	6883      	ldr	r3, [r0, #8]
    25e8:	699b      	ldr	r3, [r3, #24]
    25ea:	2b00      	cmp	r3, #0
    25ec:	d02e      	beq.n	264c <boot_uart_fifo_callback+0x84>
		return api->fifo_read(dev, rx_data, size);
    25ee:	2201      	movs	r2, #1
    25f0:	f10d 0107 	add.w	r1, sp, #7
    25f4:	4798      	blx	r3
		if (rx != 1) {
    25f6:	2801      	cmp	r0, #1
    25f8:	d128      	bne.n	264c <boot_uart_fifo_callback+0x84>
		if (!cmd) {
    25fa:	6823      	ldr	r3, [r4, #0]
    25fc:	b943      	cbnz	r3, 2610 <boot_uart_fifo_callback+0x48>
    25fe:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    2600:	b333      	cbz	r3, 2650 <boot_uart_fifo_callback+0x88>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2602:	6869      	ldr	r1, [r5, #4]
	return node->next;
    2604:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2606:	428b      	cmp	r3, r1
	list->head = node;
    2608:	602a      	str	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    260a:	d100      	bne.n	260e <boot_uart_fifo_callback+0x46>
	list->tail = node;
    260c:	606a      	str	r2, [r5, #4]
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
					     " incoming data!");
				return;
			}
			cmd = CONTAINER_OF(node, struct line_input, node);
    260e:	6023      	str	r3, [r4, #0]
		}

		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    2610:	4a16      	ldr	r2, [pc, #88]	; (266c <boot_uart_fifo_callback+0xa4>)
			cmd->line[cur++] = byte;
		}

		if (byte ==  '\n') {
    2612:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    2616:	8811      	ldrh	r1, [r2, #0]
    2618:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    261c:	d204      	bcs.n	2628 <boot_uart_fifo_callback+0x60>
			cmd->line[cur++] = byte;
    261e:	6823      	ldr	r3, [r4, #0]
    2620:	1c4f      	adds	r7, r1, #1
    2622:	440b      	add	r3, r1
    2624:	8017      	strh	r7, [r2, #0]
    2626:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    2628:	280a      	cmp	r0, #10
    262a:	d1db      	bne.n	25e4 <boot_uart_fifo_callback+0x1c>
	parent->next = child;
    262c:	2000      	movs	r0, #0
			cmd->len = cur;
    262e:	6823      	ldr	r3, [r4, #0]
    2630:	8811      	ldrh	r1, [r2, #0]
    2632:	6018      	str	r0, [r3, #0]
    2634:	6059      	str	r1, [r3, #4]
	return list->tail;
    2636:	490e      	ldr	r1, [pc, #56]	; (2670 <boot_uart_fifo_callback+0xa8>)
    2638:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    263a:	b975      	cbnz	r5, 265a <boot_uart_fifo_callback+0x92>
	list->head = node;
    263c:	e9c1 3300 	strd	r3, r3, [r1]
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
    2640:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    2642:	6020      	str	r0, [r4, #0]
    2644:	e7cd      	b.n	25e2 <boot_uart_fifo_callback+0x1a>
	return api->irq_rx_ready(dev);
    2646:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    2648:	2800      	cmp	r0, #0
    264a:	d1c9      	bne.n	25e0 <boot_uart_fifo_callback+0x18>
		}
	}
}
    264c:	b003      	add	sp, #12
    264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				BOOT_LOG_ERR("Not enough memory to store"
    2650:	2145      	movs	r1, #69	; 0x45
    2652:	4808      	ldr	r0, [pc, #32]	; (2674 <boot_uart_fifo_callback+0xac>)
    2654:	f005 fa38 	bl	7ac8 <z_log_minimal_printk>
				return;
    2658:	e7f8      	b.n	264c <boot_uart_fifo_callback+0x84>
	parent->next = child;
    265a:	602b      	str	r3, [r5, #0]
	list->tail = node;
    265c:	604b      	str	r3, [r1, #4]
}
    265e:	e7ef      	b.n	2640 <boot_uart_fifo_callback+0x78>
    2660:	20016638 	.word	0x20016638
    2664:	20016210 	.word	0x20016210
    2668:	20016220 	.word	0x20016220
    266c:	20016768 	.word	0x20016768
    2670:	20016218 	.word	0x20016218
    2674:	00009aac 	.word	0x00009aac

00002678 <console_out>:
	uart_poll_out(uart_dev, c);
    2678:	4b04      	ldr	r3, [pc, #16]	; (268c <console_out+0x14>)
{
    267a:	b510      	push	{r4, lr}
    267c:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    267e:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    2680:	6883      	ldr	r3, [r0, #8]
    2682:	b2e1      	uxtb	r1, r4
    2684:	685b      	ldr	r3, [r3, #4]
    2686:	4798      	blx	r3
}
    2688:	4620      	mov	r0, r4
    268a:	bd10      	pop	{r4, pc}
    268c:	20016638 	.word	0x20016638

00002690 <console_read>:
{
    2690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2692:	4605      	mov	r5, r0
    2694:	468e      	mov	lr, r1
    2696:	4616      	mov	r6, r2
    2698:	f04f 0320 	mov.w	r3, #32
    269c:	f3ef 8711 	mrs	r7, BASEPRI
    26a0:	f383 8811 	msr	BASEPRI, r3
    26a4:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    26a8:	481c      	ldr	r0, [pc, #112]	; (271c <console_read+0x8c>)
    26aa:	6803      	ldr	r3, [r0, #0]
    26ac:	b153      	cbz	r3, 26c4 <console_read+0x34>
	return list->tail;
    26ae:	4a1c      	ldr	r2, [pc, #112]	; (2720 <console_read+0x90>)
    26b0:	6851      	ldr	r1, [r2, #4]
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    26b2:	4299      	cmp	r1, r3
    26b4:	d006      	beq.n	26c4 <console_read+0x34>
	parent->next = child;
    26b6:	f04f 0c00 	mov.w	ip, #0
    26ba:	f8c3 c000 	str.w	ip, [r3]
Z_GENLIST_APPEND(slist, snode)
    26be:	b969      	cbnz	r1, 26dc <console_read+0x4c>
	list->head = node;
    26c0:	e9c2 3300 	strd	r3, r3, [r2]
	return list->head;
    26c4:	4b17      	ldr	r3, [pc, #92]	; (2724 <console_read+0x94>)
    26c6:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
    26c8:	b959      	cbnz	r1, 26e2 <console_read+0x52>
	__asm__ volatile(
    26ca:	f387 8811 	msr	BASEPRI, r7
    26ce:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    26d2:	6001      	str	r1, [r0, #0]
		return 0;
    26d4:	2300      	movs	r3, #0
    26d6:	4618      	mov	r0, r3
		*newline = 0;
    26d8:	6033      	str	r3, [r6, #0]
}
    26da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    26dc:	600b      	str	r3, [r1, #0]
	list->tail = node;
    26de:	6053      	str	r3, [r2, #4]
}
    26e0:	e7f0      	b.n	26c4 <console_read+0x34>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    26e2:	685c      	ldr	r4, [r3, #4]
	return node->next;
    26e4:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    26e6:	42a1      	cmp	r1, r4
	list->head = node;
    26e8:	601a      	str	r2, [r3, #0]
	list->tail = node;
    26ea:	bf08      	it	eq
    26ec:	605a      	streq	r2, [r3, #4]
    26ee:	f387 8811 	msr	BASEPRI, r7
    26f2:	f3bf 8f6f 	isb	sy
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    26f6:	684b      	ldr	r3, [r1, #4]
	cmd = CONTAINER_OF(node, struct line_input, node);
    26f8:	6001      	str	r1, [r0, #0]
	if (line == NULL) {
    26fa:	3108      	adds	r1, #8
    26fc:	d0ea      	beq.n	26d4 <console_read+0x44>
	if (len > str_size - 1) {
    26fe:	f10e 34ff 	add.w	r4, lr, #4294967295
    2702:	429c      	cmp	r4, r3
    2704:	bfa8      	it	ge
    2706:	461c      	movge	r4, r3
	memcpy(str, line, len);
    2708:	4628      	mov	r0, r5
    270a:	4622      	mov	r2, r4
    270c:	f005 fdeb 	bl	82e6 <memcpy>
	str[len] = '\0';
    2710:	2300      	movs	r3, #0
	return len + 1;
    2712:	1c60      	adds	r0, r4, #1
	str[len] = '\0';
    2714:	552b      	strb	r3, [r5, r4]
	return len + 1;
    2716:	2301      	movs	r3, #1
    2718:	e7de      	b.n	26d8 <console_read+0x48>
    271a:	bf00      	nop
    271c:	20016214 	.word	0x20016214
    2720:	20016220 	.word	0x20016220
    2724:	20016218 	.word	0x20016218

00002728 <boot_console_init>:
{
    2728:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    272a:	2500      	movs	r5, #0
    272c:	4b1b      	ldr	r3, [pc, #108]	; (279c <boot_console_init+0x74>)
	list->head = node;
    272e:	4a1c      	ldr	r2, [pc, #112]	; (27a0 <boot_console_init+0x78>)
	list->tail = NULL;
    2730:	e9c3 5500 	strd	r5, r5, [r3]
	list->head = node;
    2734:	4b1b      	ldr	r3, [pc, #108]	; (27a4 <boot_console_init+0x7c>)
	parent->next = child;
    2736:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    273a:	6013      	str	r3, [r2, #0]
	parent->next = child;
    273c:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    2740:	6019      	str	r1, [r3, #0]
	list->tail = node;
    2742:	6051      	str	r1, [r2, #4]
    2744:	4818      	ldr	r0, [pc, #96]	; (27a8 <boot_console_init+0x80>)
    2746:	f002 f97b 	bl	4a40 <z_impl_device_get_binding>

static int
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = device_get_binding(CONFIG_RECOVERY_UART_DEV_NAME);
    274a:	4c18      	ldr	r4, [pc, #96]	; (27ac <boot_console_init+0x84>)
    274c:	6020      	str	r0, [r4, #0]
		}
	}
#endif
	uint8_t c;

	if (!uart_dev) {
    274e:	b310      	cbz	r0, 2796 <boot_console_init+0x6e>
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    2750:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    2752:	b123      	cbz	r3, 275e <boot_console_init+0x36>
    2754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2756:	b113      	cbz	r3, 275e <boot_console_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
    2758:	462a      	mov	r2, r5
    275a:	4915      	ldr	r1, [pc, #84]	; (27b0 <boot_console_init+0x88>)
    275c:	4798      	blx	r3
	}

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    275e:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    2760:	6883      	ldr	r3, [r0, #8]
    2762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2764:	b15b      	cbz	r3, 277e <boot_console_init+0x56>
	return api->irq_rx_ready(dev);
    2766:	4798      	blx	r3
    2768:	b948      	cbnz	r0, 277e <boot_console_init+0x56>
		while (uart_fifo_read(uart_dev, &c, 1)) {
			;
		}
	}

	cur = 0;
    276a:	2200      	movs	r2, #0
    276c:	4b11      	ldr	r3, [pc, #68]	; (27b4 <boot_console_init+0x8c>)

	uart_irq_rx_enable(uart_dev);
    276e:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    2770:	801a      	strh	r2, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    2772:	6883      	ldr	r3, [r0, #8]
    2774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2776:	b963      	cbnz	r3, 2792 <boot_console_init+0x6a>

	return 0;
    2778:	2000      	movs	r0, #0
}
    277a:	b003      	add	sp, #12
    277c:	bd30      	pop	{r4, r5, pc}
		while (uart_fifo_read(uart_dev, &c, 1)) {
    277e:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read != NULL) {
    2780:	6883      	ldr	r3, [r0, #8]
    2782:	699b      	ldr	r3, [r3, #24]
    2784:	2b00      	cmp	r3, #0
    2786:	d0f0      	beq.n	276a <boot_console_init+0x42>
		return api->fifo_read(dev, rx_data, size);
    2788:	2201      	movs	r2, #1
    278a:	f10d 0107 	add.w	r1, sp, #7
    278e:	4798      	blx	r3
    2790:	e7ea      	b.n	2768 <boot_console_init+0x40>
		api->irq_rx_enable(dev);
    2792:	4798      	blx	r3
    2794:	e7f0      	b.n	2778 <boot_console_init+0x50>
		return (-1);
    2796:	f04f 30ff 	mov.w	r0, #4294967295
	return boot_uart_fifo_init();
    279a:	e7ee      	b.n	277a <boot_console_init+0x52>
    279c:	20016218 	.word	0x20016218
    27a0:	20016220 	.word	0x20016220
    27a4:	20016228 	.word	0x20016228
    27a8:	00009adb 	.word	0x00009adb
    27ac:	20016638 	.word	0x20016638
    27b0:	000025c9 	.word	0x000025c9
    27b4:	20016768 	.word	0x20016768

000027b8 <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    27b8:	f640 1306 	movw	r3, #2310	; 0x906
{
    27bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char encoded_buf[BASE64_ENCODE_SIZE(BOOT_SERIAL_OUT_MAX)];

    data = bs_obuf;
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    27c0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 28d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
{
    27c4:	b0d2      	sub	sp, #328	; 0x148
    bs_hdr->nh_op++;
    27c6:	f8d8 0000 	ldr.w	r0, [r8]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    27ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    27ce:	4b3b      	ldr	r3, [pc, #236]	; (28bc <CONFIG_MAIN_STACK_SIZE+0xbc>)
    27d0:	4f3b      	ldr	r7, [pc, #236]	; (28c0 <CONFIG_MAIN_STACK_SIZE+0xc0>)
    27d2:	681c      	ldr	r4, [r3, #0]
    bs_hdr->nh_op++;
    27d4:	7803      	ldrb	r3, [r0, #0]
    len = (uint32_t)cbor_state.payload_mut - (uint32_t)bs_obuf;
    27d6:	1be4      	subs	r4, r4, r7
    bs_hdr->nh_op++;
    27d8:	3301      	adds	r3, #1
    27da:	7003      	strb	r3, [r0, #0]
    bs_hdr->nh_flags = 0;
    27dc:	2300      	movs	r3, #0
    bs_hdr->nh_len = htons(len);
    27de:	ba62      	rev16	r2, r4
    27e0:	8042      	strh	r2, [r0, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    27e2:	8882      	ldrh	r2, [r0, #4]
    bs_hdr->nh_flags = 0;
    27e4:	7043      	strb	r3, [r0, #1]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    27e6:	ba52      	rev16	r2, r2
    27e8:	8082      	strh	r2, [r0, #4]

#ifdef __ZEPHYR__
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    27ea:	2108      	movs	r1, #8
    27ec:	9300      	str	r3, [sp, #0]
    27ee:	f241 0221 	movw	r2, #4129	; 0x1021
    27f2:	f005 f841 	bl	7878 <crc16>
                 CRC16_INITIAL_CRC, false);
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    27f6:	2201      	movs	r2, #1
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    27f8:	4603      	mov	r3, r0
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    27fa:	4621      	mov	r1, r4
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    27fc:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    2800:	9200      	str	r2, [sp, #0]
    2802:	4638      	mov	r0, r7
    2804:	f241 0221 	movw	r2, #4129	; 0x1021
    2808:	f005 f836 	bl	7878 <crc16>
    crc = crc16_ccitt(CRC16_INITIAL_CRC, bs_hdr, sizeof(*bs_hdr));
    crc = crc16_ccitt(crc, data, len);
#endif
    crc = htons(crc);

    boot_uf->write(pkt_start, sizeof(pkt_start));
    280c:	4e2d      	ldr	r6, [pc, #180]	; (28c4 <CONFIG_MAIN_STACK_SIZE+0xc4>)
    280e:	b2a5      	uxth	r5, r4
    2810:	6833      	ldr	r3, [r6, #0]
    crc = htons(crc);
    2812:	ba40      	rev16	r0, r0

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    2814:	350a      	adds	r5, #10
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2816:	685b      	ldr	r3, [r3, #4]
    crc = htons(crc);
    2818:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    281c:	2102      	movs	r1, #2
    281e:	a803      	add	r0, sp, #12
    totlen = htons(totlen);
    2820:	ba6d      	rev16	r5, r5
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2822:	4798      	blx	r3
    totlen = htons(totlen);
    2824:	f8ad 5012 	strh.w	r5, [sp, #18]

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    2828:	2502      	movs	r5, #2
    memcpy(buf, &totlen, sizeof(totlen));
    282a:	f10d 0112 	add.w	r1, sp, #18
    282e:	2202      	movs	r2, #2
    2830:	a806      	add	r0, sp, #24
    2832:	f005 fd58 	bl	82e6 <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    2836:	f8d8 1000 	ldr.w	r1, [r8]
    283a:	2208      	movs	r2, #8
    283c:	f10d 001a 	add.w	r0, sp, #26
    totlen = sizeof(totlen);
    2840:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    2844:	f005 fd4f 	bl	82e6 <memcpy>
    totlen += sizeof(*bs_hdr);
    2848:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    284c:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    284e:	3008      	adds	r0, #8
    2850:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    2852:	4622      	mov	r2, r4
    2854:	4639      	mov	r1, r7
    totlen += sizeof(*bs_hdr);
    2856:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    285a:	4418      	add	r0, r3
    285c:	f005 fd43 	bl	82e6 <memcpy>
    totlen += len;
    2860:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2864:	462a      	mov	r2, r5
    totlen += len;
    2866:	18e0      	adds	r0, r4, r3
    2868:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    286a:	ab06      	add	r3, sp, #24
    totlen += len;
    286c:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2870:	a904      	add	r1, sp, #16
    2872:	4418      	add	r0, r3
    2874:	f005 fd37 	bl	82e6 <memcpy>
    totlen += sizeof(crc);
    2878:	f8bd 3012 	ldrh.w	r3, [sp, #18]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    287c:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    287e:	442b      	add	r3, r5
    2880:	b29b      	uxth	r3, r3
    2882:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    2886:	9300      	str	r3, [sp, #0]
    2888:	21ad      	movs	r1, #173	; 0xad
    288a:	ab06      	add	r3, sp, #24
    288c:	a826      	add	r0, sp, #152	; 0x98
    288e:	f7fe fde7 	bl	1460 <base64_encode>
    totlen = enc_len;
    2892:	9905      	ldr	r1, [sp, #20]
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    2894:	6833      	ldr	r3, [r6, #0]
    totlen = enc_len;
    2896:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    289a:	a826      	add	r0, sp, #152	; 0x98
    289c:	685b      	ldr	r3, [r3, #4]
    289e:	b289      	uxth	r1, r1
    28a0:	4798      	blx	r3
    boot_uf->write("\n\r", 2);
    28a2:	6833      	ldr	r3, [r6, #0]
    28a4:	4629      	mov	r1, r5
    28a6:	685b      	ldr	r3, [r3, #4]
    28a8:	4807      	ldr	r0, [pc, #28]	; (28c8 <CONFIG_MAIN_STACK_SIZE+0xc8>)
    28aa:	4798      	blx	r3
    BOOT_LOG_INF("TX");
    28ac:	2149      	movs	r1, #73	; 0x49
    28ae:	4807      	ldr	r0, [pc, #28]	; (28cc <CONFIG_MAIN_STACK_SIZE+0xcc>)
    28b0:	f005 f90a 	bl	7ac8 <z_log_minimal_printk>
}
    28b4:	b052      	add	sp, #328	; 0x148
    28b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28ba:	bf00      	nop
    28bc:	2001453c 	.word	0x2001453c
    28c0:	2001686b 	.word	0x2001686b
    28c4:	20016654 	.word	0x20016654
    28c8:	00009af1 	.word	0x00009af1
    28cc:	00009af4 	.word	0x00009af4
    28d0:	20016648 	.word	0x20016648

000028d4 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    28d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    28d8:	680c      	ldr	r4, [r1, #0]
    28da:	4f1a      	ldr	r7, [pc, #104]	; (2944 <boot_serial_in_dec.constprop.0+0x70>)
    28dc:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    28de:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    28e0:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    28e4:	9000      	str	r0, [sp, #0]
    28e6:	4b18      	ldr	r3, [pc, #96]	; (2948 <boot_serial_in_dec.constprop.0+0x74>)
    28e8:	1938      	adds	r0, r7, r4
    28ea:	aa03      	add	r2, sp, #12
    28ec:	3101      	adds	r1, #1
    28ee:	f7fe fe35 	bl	155c <base64_decode>
    if (err) {
    28f2:	4604      	mov	r4, r0
    28f4:	bb10      	cbnz	r0, 293c <boot_serial_in_dec.constprop.0+0x68>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    28f6:	682b      	ldr	r3, [r5, #0]
    28f8:	9a03      	ldr	r2, [sp, #12]
    28fa:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    28fc:	2b02      	cmp	r3, #2
    *out_off += rc;
    28fe:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    2900:	d918      	bls.n	2934 <boot_serial_in_dec.constprop.0+0x60>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    2902:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    2904:	3b02      	subs	r3, #2
    2906:	ba76      	rev16	r6, r6
    2908:	b2b6      	uxth	r6, r6
    290a:	429e      	cmp	r6, r3
    290c:	d112      	bne.n	2934 <boot_serial_in_dec.constprop.0+0x60>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16(out, len, CRC_CITT_POLYMINAL, CRC16_INITIAL_CRC, true);
    290e:	f04f 0801 	mov.w	r8, #1
    2912:	4603      	mov	r3, r0
    2914:	f241 0221 	movw	r2, #4129	; 0x1021
    2918:	4631      	mov	r1, r6
    291a:	f8cd 8000 	str.w	r8, [sp]
    291e:	1cb8      	adds	r0, r7, #2
    2920:	f004 ffaa 	bl	7878 <crc16>
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    2924:	b930      	cbnz	r0, 2934 <boot_serial_in_dec.constprop.0+0x60>
    2926:	2e02      	cmp	r6, #2
    2928:	d904      	bls.n	2934 <boot_serial_in_dec.constprop.0+0x60>
        return 0;
    }
    *out_off -= sizeof(crc);
    292a:	682b      	ldr	r3, [r5, #0]
    292c:	1e9a      	subs	r2, r3, #2
    292e:	602a      	str	r2, [r5, #0]
    out[*out_off] = '\0';
    2930:	54fc      	strb	r4, [r7, r3]

    return 1;
    2932:	4644      	mov	r4, r8
}
    2934:	4620      	mov	r0, r4
    2936:	b004      	add	sp, #16
    2938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    293c:	f04f 34ff 	mov.w	r4, #4294967295
    2940:	e7f8      	b.n	2934 <boot_serial_in_dec.constprop.0+0x60>
    2942:	bf00      	nop
    2944:	200168eb 	.word	0x200168eb
    2948:	20016aee 	.word	0x20016aee

0000294c <bs_empty_rsp.constprop.0>:
bs_empty_rsp(char *buf, int len)
    294c:	b513      	push	{r0, r1, r4, lr}
    map_start_encode(&cbor_state, 10);
    294e:	4c0d      	ldr	r4, [pc, #52]	; (2984 <bs_empty_rsp.constprop.0+0x38>)
    2950:	210a      	movs	r1, #10
    2952:	4620      	mov	r0, r4
    2954:	f005 fbdf 	bl	8116 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    2958:	466b      	mov	r3, sp
    295a:	4a0b      	ldr	r2, [pc, #44]	; (2988 <bs_empty_rsp.constprop.0+0x3c>)
    295c:	e892 0003 	ldmia.w	r2, {r0, r1}
    2960:	e883 0003 	stmia.w	r3, {r0, r1}
    2964:	4619      	mov	r1, r3
    2966:	4620      	mov	r0, r4
    2968:	f005 fbc6 	bl	80f8 <tstrx_encode>
    uintx32_put(&cbor_state, 0);
    296c:	2100      	movs	r1, #0
    296e:	4620      	mov	r0, r4
    2970:	f005 fbb7 	bl	80e2 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    2974:	210a      	movs	r1, #10
    2976:	4620      	mov	r0, r4
    2978:	f005 fbe5 	bl	8146 <map_end_encode>
    boot_serial_output();
    297c:	f7ff ff1c 	bl	27b8 <boot_serial_output>
}
    2980:	b002      	add	sp, #8
    2982:	bd10      	pop	{r4, pc}
    2984:	2001453c 	.word	0x2001453c
    2988:	000090a0 	.word	0x000090a0

0000298c <boot_serial_input>:
{
    298c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (len < sizeof(*hdr) ||
    2990:	2907      	cmp	r1, #7
{
    2992:	b0a9      	sub	sp, #164	; 0xa4
    if (len < sizeof(*hdr) ||
    2994:	f240 80c7 	bls.w	2b26 <FIH_LABEL_FIH_CALL_END_725+0xd0>
    2998:	7806      	ldrb	r6, [r0, #0]
    299a:	f016 06fd 	ands.w	r6, r6, #253	; 0xfd
    299e:	f040 80c2 	bne.w	2b26 <FIH_LABEL_FIH_CALL_END_725+0xd0>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    29a2:	8843      	ldrh	r3, [r0, #2]
    29a4:	f1a1 0408 	sub.w	r4, r1, #8
    29a8:	ba5b      	rev16	r3, r3
    29aa:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    29ac:	42a3      	cmp	r3, r4
    29ae:	f0c0 80ba 	bcc.w	2b26 <FIH_LABEL_FIH_CALL_END_725+0xd0>
    bs_hdr = hdr;
    29b2:	8882      	ldrh	r2, [r0, #4]
    29b4:	4ba0      	ldr	r3, [pc, #640]	; (2c38 <FIH_LABEL_FIH_CALL_END_725+0x1e2>)
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    29b6:	4da1      	ldr	r5, [pc, #644]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    bs_hdr = hdr;
    29b8:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    29ba:	ba53      	rev16	r3, r2
    29bc:	8083      	strh	r3, [r0, #4]
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    29be:	4ba0      	ldr	r3, [pc, #640]	; (2c40 <FIH_LABEL_FIH_CALL_END_725+0x1ea>)
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    29c0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    cbor_state.payload_mut = (uint8_t *)bs_obuf;
    29c4:	602b      	str	r3, [r5, #0]
    cbor_state.payload_end = (const uint8_t *)bs_obuf
    29c6:	f103 0380 	add.w	r3, r3, #128	; 0x80
    29ca:	60eb      	str	r3, [r5, #12]
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    29cc:	f040 81ee 	bne.w	2dac <FIH_LABEL_FIH_CALL_END_725+0x356>
        switch (hdr->nh_id) {
    29d0:	79c7      	ldrb	r7, [r0, #7]
    29d2:	b13f      	cbz	r7, 29e4 <boot_serial_input+0x58>
    29d4:	2f01      	cmp	r7, #1
    29d6:	f000 80ab 	beq.w	2b30 <FIH_LABEL_FIH_CALL_END_725+0xda>
}
    29da:	b029      	add	sp, #164	; 0xa4
    29dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            bs_empty_rsp(buf, len);
    29e0:	f7ff bfb4 	b.w	294c <bs_empty_rsp.constprop.0>
    map_start_encode(&cbor_state, 1);
    29e4:	2101      	movs	r1, #1
    29e6:	4628      	mov	r0, r5
    29e8:	f005 fb95 	bl	8116 <map_start_encode>
    tstrx_put(&cbor_state, "images");
    29ec:	4b95      	ldr	r3, [pc, #596]	; (2c44 <FIH_LABEL_FIH_CALL_END_725+0x1ee>)
    29ee:	a908      	add	r1, sp, #32
    29f0:	9308      	str	r3, [sp, #32]
    29f2:	2306      	movs	r3, #6
    29f4:	4628      	mov	r0, r5
    29f6:	9309      	str	r3, [sp, #36]	; 0x24
    29f8:	f005 fb7e 	bl	80f8 <tstrx_encode>
    list_start_encode(&cbor_state, 5);
    29fc:	2105      	movs	r1, #5
    29fe:	4628      	mov	r0, r5
    2a00:	f005 fb7d 	bl	80fe <list_start_encode>
        for (slot = 0; slot < 2; slot++) {
    2a04:	463c      	mov	r4, r7
            fih_int fih_rc = FIH_FAILURE;
    2a06:	4e90      	ldr	r6, [pc, #576]	; (2c48 <FIH_LABEL_FIH_CALL_END_725+0x1f2>)
            if (hdr.ih_magic == IMAGE_MAGIC)
    2a08:	4f90      	ldr	r7, [pc, #576]	; (2c4c <FIH_LABEL_FIH_CALL_END_725+0x1f6>)
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    2a0a:	f8df 8260 	ldr.w	r8, [pc, #608]	; 2c6c <FIH_LABEL_FIH_CALL_END_725+0x216>
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    2a0e:	4621      	mov	r1, r4
    2a10:	2000      	movs	r0, #0
    2a12:	f004 fbc5 	bl	71a0 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    2a16:	a907      	add	r1, sp, #28
    2a18:	b2c0      	uxtb	r0, r0
    2a1a:	f7ff f9f7 	bl	1e0c <flash_area_open>
    2a1e:	4605      	mov	r5, r0
    2a20:	2800      	cmp	r0, #0
    2a22:	d175      	bne.n	2b10 <FIH_LABEL_FIH_CALL_END_725+0xba>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    2a24:	2320      	movs	r3, #32
    2a26:	4601      	mov	r1, r0
    2a28:	aa10      	add	r2, sp, #64	; 0x40
    2a2a:	9807      	ldr	r0, [sp, #28]
    2a2c:	f005 f87c 	bl	7b28 <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    2a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
            fih_int fih_rc = FIH_FAILURE;
    2a32:	f8d6 9000 	ldr.w	r9, [r6]
            if (hdr.ih_magic == IMAGE_MAGIC)
    2a36:	42bb      	cmp	r3, r7
    2a38:	d10d      	bne.n	2a56 <FIH_LABEL_FIH_CALL_END_725>

00002a3a <FIH_LABEL_FIH_CALL_START_701>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    2a3a:	2340      	movs	r3, #64	; 0x40
    2a3c:	9301      	str	r3, [sp, #4]
    2a3e:	ab18      	add	r3, sp, #96	; 0x60
    2a40:	9300      	str	r3, [sp, #0]
    2a42:	4629      	mov	r1, r5
    2a44:	4628      	mov	r0, r5
    2a46:	e9cd 5503 	strd	r5, r5, [sp, #12]
    2a4a:	9b07      	ldr	r3, [sp, #28]
    2a4c:	9502      	str	r5, [sp, #8]
    2a4e:	aa10      	add	r2, sp, #64	; 0x40
    2a50:	f7fd fe12 	bl	678 <bootutil_img_validate>
    2a54:	4681      	mov	r9, r0

00002a56 <FIH_LABEL_FIH_CALL_END_725>:
            flash_area_close(fap);
    2a56:	9807      	ldr	r0, [sp, #28]
    2a58:	f005 f865 	bl	7b26 <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    2a5c:	f8d8 3000 	ldr.w	r3, [r8]
    2a60:	454b      	cmp	r3, r9
    2a62:	d155      	bne.n	2b10 <FIH_LABEL_FIH_CALL_END_725+0xba>
            map_start_encode(&cbor_state, 20);
    2a64:	2114      	movs	r1, #20
    2a66:	4875      	ldr	r0, [pc, #468]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2a68:	f005 fb55 	bl	8116 <map_start_encode>
            tstrx_put(&cbor_state, "slot");
    2a6c:	4b78      	ldr	r3, [pc, #480]	; (2c50 <FIH_LABEL_FIH_CALL_END_725+0x1fa>)
    2a6e:	a90a      	add	r1, sp, #40	; 0x28
    2a70:	930a      	str	r3, [sp, #40]	; 0x28
    2a72:	2304      	movs	r3, #4
    2a74:	4871      	ldr	r0, [pc, #452]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2a76:	930b      	str	r3, [sp, #44]	; 0x2c
    2a78:	f005 fb3e 	bl	80f8 <tstrx_encode>
            uintx32_put(&cbor_state, slot);
    2a7c:	4621      	mov	r1, r4
    2a7e:	486f      	ldr	r0, [pc, #444]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2a80:	f005 fb2f 	bl	80e2 <uintx32_put>
            tstrx_put(&cbor_state, "version");
    2a84:	4b73      	ldr	r3, [pc, #460]	; (2c54 <FIH_LABEL_FIH_CALL_END_725+0x1fe>)
    off = u32toa(dst, ver->iv_major);
    2a86:	f10d 0960 	add.w	r9, sp, #96	; 0x60
            tstrx_put(&cbor_state, "version");
    2a8a:	930c      	str	r3, [sp, #48]	; 0x30
    2a8c:	2307      	movs	r3, #7
    2a8e:	a90c      	add	r1, sp, #48	; 0x30
    2a90:	486a      	ldr	r0, [pc, #424]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2a92:	930d      	str	r3, [sp, #52]	; 0x34
    2a94:	f005 fb30 	bl	80f8 <tstrx_encode>
    off = u32toa(dst, ver->iv_major);
    2a98:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
    2a9c:	4648      	mov	r0, r9
    2a9e:	f005 f97c 	bl	7d9a <u32toa>
    dst[off++] = '.';
    2aa2:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
    2aa6:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    2aaa:	1c45      	adds	r5, r0, #1
    2aac:	eb0d 0003 	add.w	r0, sp, r3
    off += u32toa(dst + off, ver->iv_minor);
    2ab0:	f89d 1055 	ldrb.w	r1, [sp, #85]	; 0x55
    dst[off++] = '.';
    2ab4:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_minor);
    2ab8:	eb09 0005 	add.w	r0, r9, r5
    2abc:	f005 f96d 	bl	7d9a <u32toa>
    2ac0:	4428      	add	r0, r5
    dst[off++] = '.';
    2ac2:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
    2ac6:	1c45      	adds	r5, r0, #1
    2ac8:	eb0d 0003 	add.w	r0, sp, r3
    off += u32toa(dst + off, ver->iv_revision);
    2acc:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
    dst[off++] = '.';
    2ad0:	f800 ac40 	strb.w	sl, [r0, #-64]
    off += u32toa(dst + off, ver->iv_revision);
    2ad4:	eb09 0005 	add.w	r0, r9, r5
    2ad8:	f005 f95f 	bl	7d9a <u32toa>
    2adc:	4405      	add	r5, r0
    dst[off++] = '.';
    2ade:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
    2ae2:	446b      	add	r3, sp
    2ae4:	3501      	adds	r5, #1
    off += u32toa(dst + off, ver->iv_build_num);
    2ae6:	9916      	ldr	r1, [sp, #88]	; 0x58
    dst[off++] = '.';
    2ae8:	f803 ac40 	strb.w	sl, [r3, #-64]
    off += u32toa(dst + off, ver->iv_build_num);
    2aec:	eb09 0005 	add.w	r0, r9, r5
    2af0:	f005 f953 	bl	7d9a <u32toa>
            tstrx_put_term(&cbor_state, (char *)tmpbuf);
    2af4:	4648      	mov	r0, r9
    2af6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    2afa:	f005 fbba 	bl	8272 <strlen>
    2afe:	a90e      	add	r1, sp, #56	; 0x38
    2b00:	900f      	str	r0, [sp, #60]	; 0x3c
    2b02:	484e      	ldr	r0, [pc, #312]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b04:	f005 faf8 	bl	80f8 <tstrx_encode>
            map_end_encode(&cbor_state, 20);
    2b08:	2114      	movs	r1, #20
    2b0a:	484c      	ldr	r0, [pc, #304]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b0c:	f005 fb1b 	bl	8146 <map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    2b10:	b164      	cbz	r4, 2b2c <FIH_LABEL_FIH_CALL_END_725+0xd6>
    list_end_encode(&cbor_state, 5);
    2b12:	2105      	movs	r1, #5
    2b14:	4849      	ldr	r0, [pc, #292]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b16:	f005 fb0a 	bl	812e <list_end_encode>
    map_end_encode(&cbor_state, 1);
    2b1a:	2101      	movs	r1, #1
    2b1c:	4847      	ldr	r0, [pc, #284]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b1e:	f005 fb12 	bl	8146 <map_end_encode>
    boot_serial_output();
    2b22:	f7ff fe49 	bl	27b8 <boot_serial_output>
}
    2b26:	b029      	add	sp, #164	; 0xa4
    2b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (slot = 0; slot < 2; slot++) {
    2b2c:	2401      	movs	r4, #1
    2b2e:	e76e      	b.n	2a0e <boot_serial_input+0x82>
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    2b30:	4621      	mov	r1, r4
    2b32:	ab0a      	add	r3, sp, #40	; 0x28
    2b34:	aa18      	add	r2, sp, #96	; 0x60
    2b36:	3008      	adds	r0, #8
    const struct flash_area *fap = NULL;
    2b38:	9608      	str	r6, [sp, #32]
    bool result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    2b3a:	f000 fa35 	bl	2fa8 <cbor_decode_Upload>
    if (!result || (len != decoded_len)) {
    2b3e:	bb68      	cbnz	r0, 2b9c <FIH_LABEL_FIH_CALL_END_725+0x146>
        rc = MGMT_ERR_EINVAL;
    2b40:	2403      	movs	r4, #3
    BOOT_LOG_INF("RX: 0x%x", rc);
    2b42:	4622      	mov	r2, r4
    2b44:	2149      	movs	r1, #73	; 0x49
    2b46:	4844      	ldr	r0, [pc, #272]	; (2c58 <FIH_LABEL_FIH_CALL_END_725+0x202>)
    2b48:	f004 ffbe 	bl	7ac8 <z_log_minimal_printk>
    map_start_encode(&cbor_state, 10);
    2b4c:	210a      	movs	r1, #10
    2b4e:	483b      	ldr	r0, [pc, #236]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b50:	f005 fae1 	bl	8116 <map_start_encode>
    tstrx_put(&cbor_state, "rc");
    2b54:	4b41      	ldr	r3, [pc, #260]	; (2c5c <FIH_LABEL_FIH_CALL_END_725+0x206>)
    2b56:	a910      	add	r1, sp, #64	; 0x40
    2b58:	9310      	str	r3, [sp, #64]	; 0x40
    2b5a:	2302      	movs	r3, #2
    2b5c:	4837      	ldr	r0, [pc, #220]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b5e:	9311      	str	r3, [sp, #68]	; 0x44
    2b60:	f005 faca 	bl	80f8 <tstrx_encode>
    uintx32_put(&cbor_state, rc);
    2b64:	4621      	mov	r1, r4
    2b66:	4835      	ldr	r0, [pc, #212]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b68:	f005 fabb 	bl	80e2 <uintx32_put>
    if (rc == 0) {
    2b6c:	b964      	cbnz	r4, 2b88 <FIH_LABEL_FIH_CALL_END_725+0x132>
        tstrx_put(&cbor_state, "off");
    2b6e:	4b3c      	ldr	r3, [pc, #240]	; (2c60 <FIH_LABEL_FIH_CALL_END_725+0x20a>)
    2b70:	a90e      	add	r1, sp, #56	; 0x38
    2b72:	930e      	str	r3, [sp, #56]	; 0x38
    2b74:	2303      	movs	r3, #3
    2b76:	4831      	ldr	r0, [pc, #196]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b78:	930f      	str	r3, [sp, #60]	; 0x3c
    2b7a:	f005 fabd 	bl	80f8 <tstrx_encode>
        uintx32_put(&cbor_state, curr_off);
    2b7e:	4b39      	ldr	r3, [pc, #228]	; (2c64 <FIH_LABEL_FIH_CALL_END_725+0x20e>)
    2b80:	482e      	ldr	r0, [pc, #184]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b82:	6819      	ldr	r1, [r3, #0]
    2b84:	f005 faad 	bl	80e2 <uintx32_put>
    map_end_encode(&cbor_state, 10);
    2b88:	210a      	movs	r1, #10
    2b8a:	482c      	ldr	r0, [pc, #176]	; (2c3c <FIH_LABEL_FIH_CALL_END_725+0x1e6>)
    2b8c:	f005 fadb 	bl	8146 <map_end_encode>
    boot_serial_output();
    2b90:	f7ff fe12 	bl	27b8 <boot_serial_output>
    flash_area_close(fap);
    2b94:	9808      	ldr	r0, [sp, #32]
    2b96:	f004 ffc6 	bl	7b26 <flash_area_close>
}
    2b9a:	e7c4      	b.n	2b26 <FIH_LABEL_FIH_CALL_END_725+0xd0>
    if (!result || (len != decoded_len)) {
    2b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2b9e:	429c      	cmp	r4, r3
    2ba0:	d1ce      	bne.n	2b40 <FIH_LABEL_FIH_CALL_END_725+0xea>
    long long int data_len = UINT64_MAX;
    2ba2:	f04f 34ff 	mov.w	r4, #4294967295
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2ba6:	4632      	mov	r2, r6
    img_num = 0;
    2ba8:	4630      	mov	r0, r6
    long long int data_len = UINT64_MAX;
    2baa:	46a3      	mov	fp, r4
    size_t img_blen = 0;
    2bac:	4635      	mov	r5, r6
    long long int off = UINT64_MAX;
    2bae:	46a1      	mov	r9, r4
    2bb0:	46a2      	mov	sl, r4
    const uint8_t *img_data = NULL;
    2bb2:	46b0      	mov	r8, r6
    2bb4:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    2bb6:	ab18      	add	r3, sp, #96	; 0x60
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2bb8:	42ba      	cmp	r2, r7
    2bba:	d126      	bne.n	2c0a <FIH_LABEL_FIH_CALL_END_725+0x1b4>
    if (off == UINT64_MAX || img_data == NULL) {
    2bbc:	f1ba 3fff 	cmp.w	sl, #4294967295
    2bc0:	bf08      	it	eq
    2bc2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
    2bc6:	d0bb      	beq.n	2b40 <FIH_LABEL_FIH_CALL_END_725+0xea>
    2bc8:	f1b8 0f00 	cmp.w	r8, #0
    2bcc:	d0b8      	beq.n	2b40 <FIH_LABEL_FIH_CALL_END_725+0xea>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    2bce:	2100      	movs	r1, #0
    2bd0:	f004 fae6 	bl	71a0 <flash_area_id_from_multi_image_slot>
    2bd4:	a908      	add	r1, sp, #32
    2bd6:	b2c0      	uxtb	r0, r0
    2bd8:	f7ff f918 	bl	1e0c <flash_area_open>
    if (rc) {
    2bdc:	2800      	cmp	r0, #0
    2bde:	d1af      	bne.n	2b40 <FIH_LABEL_FIH_CALL_END_725+0xea>
    if (off == 0) {
    2be0:	ea59 030a 	orrs.w	r3, r9, sl
    2be4:	4f1f      	ldr	r7, [pc, #124]	; (2c64 <FIH_LABEL_FIH_CALL_END_725+0x20e>)
    2be6:	d108      	bne.n	2bfa <FIH_LABEL_FIH_CALL_END_725+0x1a4>
        if (data_len > fap->fa_size) {
    2be8:	9b08      	ldr	r3, [sp, #32]
        curr_off = 0;
    2bea:	6038      	str	r0, [r7, #0]
        if (data_len > fap->fa_size) {
    2bec:	689b      	ldr	r3, [r3, #8]
    2bee:	42a3      	cmp	r3, r4
    2bf0:	eb70 000b 	sbcs.w	r0, r0, fp
    2bf4:	dba4      	blt.n	2b40 <FIH_LABEL_FIH_CALL_END_725+0xea>
        img_size = data_len;
    2bf6:	4b1c      	ldr	r3, [pc, #112]	; (2c68 <FIH_LABEL_FIH_CALL_END_725+0x212>)
    2bf8:	601c      	str	r4, [r3, #0]
    if (off != curr_off) {
    2bfa:	683b      	ldr	r3, [r7, #0]
    2bfc:	f1ba 0f00 	cmp.w	sl, #0
    2c00:	bf08      	it	eq
    2c02:	454b      	cmpeq	r3, r9
    2c04:	d034      	beq.n	2c70 <FIH_LABEL_FIH_CALL_END_725+0x21a>
        rc = 0;
    2c06:	2400      	movs	r4, #0
    2c08:	e79b      	b.n	2b42 <FIH_LABEL_FIH_CALL_END_725+0xec>
        switch(member->_Member_choice) {
    2c0a:	7a19      	ldrb	r1, [r3, #8]
    2c0c:	2903      	cmp	r1, #3
    2c0e:	d804      	bhi.n	2c1a <FIH_LABEL_FIH_CALL_END_725+0x1c4>
    2c10:	e8df f001 	tbb	[pc, r1]
    2c14:	0d090602 	.word	0x0d090602
                img_num = member->_Member_image;
    2c18:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2c1a:	3201      	adds	r2, #1
    2c1c:	330c      	adds	r3, #12
    2c1e:	e7cb      	b.n	2bb8 <FIH_LABEL_FIH_CALL_END_725+0x162>
                slen = member->_Member_data.len;
    2c20:	e9d3 8500 	ldrd	r8, r5, [r3]
                break;
    2c24:	e7f9      	b.n	2c1a <FIH_LABEL_FIH_CALL_END_725+0x1c4>
                data_len = member->_Member_len;
    2c26:	681c      	ldr	r4, [r3, #0]
    2c28:	ea4f 7be4 	mov.w	fp, r4, asr #31
                break;
    2c2c:	e7f5      	b.n	2c1a <FIH_LABEL_FIH_CALL_END_725+0x1c4>
                off = member->_Member_off;
    2c2e:	6819      	ldr	r1, [r3, #0]
    2c30:	4689      	mov	r9, r1
    2c32:	ea4f 7ae1 	mov.w	sl, r1, asr #31
                break;
    2c36:	e7f0      	b.n	2c1a <FIH_LABEL_FIH_CALL_END_725+0x1c4>
    2c38:	20016648 	.word	0x20016648
    2c3c:	2001453c 	.word	0x2001453c
    2c40:	2001686b 	.word	0x2001686b
    2c44:	00009afc 	.word	0x00009afc
    2c48:	20014500 	.word	0x20014500
    2c4c:	96f3b83d 	.word	0x96f3b83d
    2c50:	00009b03 	.word	0x00009b03
    2c54:	00009b08 	.word	0x00009b08
    2c58:	00009bdb 	.word	0x00009bdb
    2c5c:	00009be9 	.word	0x00009be9
    2c60:	00009bec 	.word	0x00009bec
    2c64:	20016650 	.word	0x20016650
    2c68:	2001664c 	.word	0x2001664c
    2c6c:	200147f8 	.word	0x200147f8
    if (curr_off + img_blen > img_size) {
    2c70:	f8df a17c 	ldr.w	sl, [pc, #380]	; 2df0 <FIH_LABEL_FIH_CALL_END_725+0x39a>
    2c74:	442b      	add	r3, r5
    2c76:	f8da 2000 	ldr.w	r2, [sl]
    2c7a:	4293      	cmp	r3, r2
    2c7c:	f63f af60 	bhi.w	2b40 <FIH_LABEL_FIH_CALL_END_725+0xea>
    rem_bytes = img_blen % flash_area_align(fap);
    2c80:	9808      	ldr	r0, [sp, #32]
    2c82:	f004 ffcf 	bl	7c24 <flash_area_align>
    2c86:	fbb5 f3f0 	udiv	r3, r5, r0
    2c8a:	fb03 5310 	mls	r3, r3, r0, r5
    if ((curr_off + img_blen < img_size) && rem_bytes) {
    2c8e:	6838      	ldr	r0, [r7, #0]
    2c90:	f8da 2000 	ldr.w	r2, [sl]
    2c94:	1941      	adds	r1, r0, r5
    2c96:	4291      	cmp	r1, r2
        img_blen -= rem_bytes;
    2c98:	bf38      	it	cc
    2c9a:	1aed      	subcc	r5, r5, r3
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    2c9c:	a90c      	add	r1, sp, #48	; 0x30
    2c9e:	4428      	add	r0, r5
    rem_bytes = img_blen % flash_area_align(fap);
    2ca0:	bf28      	it	cs
    2ca2:	b2de      	uxtbcs	r6, r3
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    2ca4:	f7fd fcd6 	bl	654 <flash_area_sector_from_off>
    if (rc) {
    2ca8:	4604      	mov	r4, r0
    2caa:	b120      	cbz	r0, 2cb6 <FIH_LABEL_FIH_CALL_END_725+0x260>
        BOOT_LOG_ERR("Unable to determine flash sector size");
    2cac:	2145      	movs	r1, #69	; 0x45
    2cae:	484b      	ldr	r0, [pc, #300]	; (2ddc <FIH_LABEL_FIH_CALL_END_725+0x386>)
                BOOT_LOG_ERR("Unable to determine flash sector of"
    2cb0:	f004 ff0a 	bl	7ac8 <z_log_minimal_printk>
                goto out;
    2cb4:	e745      	b.n	2b42 <FIH_LABEL_FIH_CALL_END_725+0xec>
    if (off_last != sector.fs_off) {
    2cb6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 2df4 <FIH_LABEL_FIH_CALL_END_725+0x39e>
    2cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2cbc:	f8d9 3000 	ldr.w	r3, [r9]
    2cc0:	429a      	cmp	r2, r3
    2cc2:	d012      	beq.n	2cea <FIH_LABEL_FIH_CALL_END_725+0x294>
        BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    2cc4:	2149      	movs	r1, #73	; 0x49
    2cc6:	4846      	ldr	r0, [pc, #280]	; (2de0 <FIH_LABEL_FIH_CALL_END_725+0x38a>)
        off_last = sector.fs_off;
    2cc8:	f8c9 2000 	str.w	r2, [r9]
        BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    2ccc:	f004 fefc 	bl	7ac8 <z_log_minimal_printk>
        rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    2cd0:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    2cd4:	9808      	ldr	r0, [sp, #32]
    2cd6:	f004 ff76 	bl	7bc6 <flash_area_erase>
        if (rc) {
    2cda:	4604      	mov	r4, r0
    2cdc:	b128      	cbz	r0, 2cea <FIH_LABEL_FIH_CALL_END_725+0x294>
                    BOOT_LOG_ERR("Error %d while erasing sector", rc);
    2cde:	4622      	mov	r2, r4
    2ce0:	2145      	movs	r1, #69	; 0x45
    2ce2:	4840      	ldr	r0, [pc, #256]	; (2de4 <FIH_LABEL_FIH_CALL_END_725+0x38e>)
    2ce4:	f004 fef0 	bl	7ac8 <z_log_minimal_printk>
                    goto out;
    2ce8:	e72b      	b.n	2b42 <FIH_LABEL_FIH_CALL_END_725+0xec>
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_blen);
    2cea:	683a      	ldr	r2, [r7, #0]
    2cec:	2149      	movs	r1, #73	; 0x49
    2cee:	483e      	ldr	r0, [pc, #248]	; (2de8 <FIH_LABEL_FIH_CALL_END_725+0x392>)
    2cf0:	18ab      	adds	r3, r5, r2
    2cf2:	f004 fee9 	bl	7ac8 <z_log_minimal_printk>
    if (rem_bytes) {
    2cf6:	2e00      	cmp	r6, #0
    2cf8:	d03f      	beq.n	2d7a <FIH_LABEL_FIH_CALL_END_725+0x324>
        if (w_size) {
    2cfa:	1bac      	subs	r4, r5, r6
    2cfc:	d00d      	beq.n	2d1a <FIH_LABEL_FIH_CALL_END_725+0x2c4>
            rc = flash_area_write(fap, curr_off, img_data, w_size);
    2cfe:	4623      	mov	r3, r4
    2d00:	4642      	mov	r2, r8
    2d02:	6839      	ldr	r1, [r7, #0]
    2d04:	9808      	ldr	r0, [sp, #32]
    2d06:	f004 ff2b 	bl	7b60 <flash_area_write>
            if (rc) {
    2d0a:	2800      	cmp	r0, #0
    2d0c:	f47f af18 	bne.w	2b40 <FIH_LABEL_FIH_CALL_END_725+0xea>
            img_blen -= w_size;
    2d10:	4635      	mov	r5, r6
            curr_off += w_size;
    2d12:	683b      	ldr	r3, [r7, #0]
            img_data += w_size;
    2d14:	44a0      	add	r8, r4
            curr_off += w_size;
    2d16:	4423      	add	r3, r4
    2d18:	603b      	str	r3, [r7, #0]
            memcpy(wbs_aligned, img_data, rem_bytes);
    2d1a:	4632      	mov	r2, r6
    2d1c:	4641      	mov	r1, r8
    2d1e:	a810      	add	r0, sp, #64	; 0x40
    2d20:	f005 fae1 	bl	82e6 <memcpy>
            memset(wbs_aligned + rem_bytes, flash_area_erased_val(fap),
    2d24:	9808      	ldr	r0, [sp, #32]
    2d26:	f004 ff86 	bl	7c36 <flash_area_erased_val>
    2d2a:	ab10      	add	r3, sp, #64	; 0x40
    2d2c:	4601      	mov	r1, r0
    2d2e:	f1c6 0208 	rsb	r2, r6, #8
    2d32:	1998      	adds	r0, r3, r6
    2d34:	f005 fae2 	bl	82fc <memset>
            rc = flash_area_write(fap, curr_off, wbs_aligned, flash_area_align(fap));
    2d38:	9c08      	ldr	r4, [sp, #32]
    2d3a:	683e      	ldr	r6, [r7, #0]
    2d3c:	4620      	mov	r0, r4
    2d3e:	f004 ff71 	bl	7c24 <flash_area_align>
    2d42:	4631      	mov	r1, r6
    2d44:	4603      	mov	r3, r0
    2d46:	4620      	mov	r0, r4
    2d48:	aa10      	add	r2, sp, #64	; 0x40
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    2d4a:	f004 ff09 	bl	7b60 <flash_area_write>
    if (rc == 0) {
    2d4e:	2800      	cmp	r0, #0
    2d50:	f47f aef6 	bne.w	2b40 <FIH_LABEL_FIH_CALL_END_725+0xea>
        curr_off += img_blen;
    2d54:	683b      	ldr	r3, [r7, #0]
    2d56:	441d      	add	r5, r3
        if (curr_off == img_size) {
    2d58:	f8da 3000 	ldr.w	r3, [sl]
        curr_off += img_blen;
    2d5c:	603d      	str	r5, [r7, #0]
        if (curr_off == img_size) {
    2d5e:	429d      	cmp	r5, r3
    2d60:	f47f af51 	bne.w	2c06 <FIH_LABEL_FIH_CALL_END_725+0x1b0>
            rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
    2d64:	9808      	ldr	r0, [sp, #32]
    2d66:	f004 fafc 	bl	7362 <boot_status_off>
    2d6a:	a90c      	add	r1, sp, #48	; 0x30
    2d6c:	f7fd fc72 	bl	654 <flash_area_sector_from_off>
            if (rc) {
    2d70:	4604      	mov	r4, r0
    2d72:	b138      	cbz	r0, 2d84 <FIH_LABEL_FIH_CALL_END_725+0x32e>
                BOOT_LOG_ERR("Unable to determine flash sector of"
    2d74:	2145      	movs	r1, #69	; 0x45
    2d76:	481d      	ldr	r0, [pc, #116]	; (2dec <FIH_LABEL_FIH_CALL_END_725+0x396>)
    2d78:	e79a      	b.n	2cb0 <FIH_LABEL_FIH_CALL_END_725+0x25a>
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    2d7a:	462b      	mov	r3, r5
    2d7c:	4642      	mov	r2, r8
    2d7e:	6839      	ldr	r1, [r7, #0]
    2d80:	9808      	ldr	r0, [sp, #32]
    2d82:	e7e2      	b.n	2d4a <FIH_LABEL_FIH_CALL_END_725+0x2f4>
            if (off_last < sector.fs_off) {
    2d84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2d86:	f8d9 3000 	ldr.w	r3, [r9]
    2d8a:	429a      	cmp	r2, r3
    2d8c:	f77f af3b 	ble.w	2c06 <FIH_LABEL_FIH_CALL_END_725+0x1b0>
                BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    2d90:	2149      	movs	r1, #73	; 0x49
    2d92:	4813      	ldr	r0, [pc, #76]	; (2de0 <FIH_LABEL_FIH_CALL_END_725+0x38a>)
    2d94:	f004 fe98 	bl	7ac8 <z_log_minimal_printk>
                rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    2d98:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    2d9c:	9808      	ldr	r0, [sp, #32]
    2d9e:	f004 ff12 	bl	7bc6 <flash_area_erase>
                if (rc) {
    2da2:	4604      	mov	r4, r0
    2da4:	2800      	cmp	r0, #0
    2da6:	f43f aecc 	beq.w	2b42 <FIH_LABEL_FIH_CALL_END_725+0xec>
    2daa:	e798      	b.n	2cde <FIH_LABEL_FIH_CALL_END_725+0x288>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    2dac:	2a00      	cmp	r2, #0
    2dae:	f47f aeba 	bne.w	2b26 <FIH_LABEL_FIH_CALL_END_725+0xd0>
        switch (hdr->nh_id) {
    2db2:	79c3      	ldrb	r3, [r0, #7]
    2db4:	2b01      	cmp	r3, #1
    2db6:	f43f ae10 	beq.w	29da <boot_serial_input+0x4e>
    2dba:	2b05      	cmp	r3, #5
    2dbc:	f47f aeb3 	bne.w	2b26 <FIH_LABEL_FIH_CALL_END_725+0xd0>
    bs_empty_rsp(buf, len);
    2dc0:	f7ff fdc4 	bl	294c <bs_empty_rsp.constprop.0>
	return z_impl_k_sleep(timeout);
    2dc4:	2100      	movs	r1, #0
    2dc6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    2dca:	f002 fc21 	bl	5610 <z_impl_k_sleep>
    sys_reboot(SYS_REBOOT_COLD);
    2dce:	2001      	movs	r0, #1
}
    2dd0:	b029      	add	sp, #164	; 0xa4
    2dd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_reboot(SYS_REBOOT_COLD);
    2dd6:	f7fe bfb9 	b.w	1d4c <sys_reboot>
    2dda:	bf00      	nop
    2ddc:	00009b10 	.word	0x00009b10
    2de0:	00009b3b 	.word	0x00009b3b
    2de4:	00009b5e 	.word	0x00009b5e
    2de8:	00009b81 	.word	0x00009b81
    2dec:	00009ba1 	.word	0x00009ba1
    2df0:	2001664c 	.word	0x2001664c
    2df4:	20014538 	.word	0x20014538

00002df8 <boot_serial_start>:
 * Task which waits reading console, expecting to get image over
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    2df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int rc;
    int off;
    int dec_off = 0;
    2dfa:	2400      	movs	r4, #0
{
    2dfc:	4605      	mov	r5, r0
    int full_line;
    int max_input;

    boot_uf = f;
    2dfe:	4b19      	ldr	r3, [pc, #100]	; (2e64 <boot_serial_start+0x6c>)
    max_input = sizeof(in_buf);

    off = 0;
    while (1) {
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    2e00:	4e19      	ldr	r6, [pc, #100]	; (2e68 <boot_serial_start+0x70>)
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
        }

        /* serve errors: out of decode memory, or bad encoding */
        if (rc == 1) {
            boot_serial_input(&dec_buf[2], dec_off - 2);
    2e02:	4f1a      	ldr	r7, [pc, #104]	; (2e6c <boot_serial_start+0x74>)
    int dec_off = 0;
    2e04:	9400      	str	r4, [sp, #0]
    boot_uf = f;
    2e06:	6018      	str	r0, [r3, #0]
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    2e08:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    2e0c:	682b      	ldr	r3, [r5, #0]
    2e0e:	aa01      	add	r2, sp, #4
    2e10:	3101      	adds	r1, #1
    2e12:	1930      	adds	r0, r6, r4
    2e14:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    2e16:	2800      	cmp	r0, #0
    2e18:	9b01      	ldr	r3, [sp, #4]
    2e1a:	dc01      	bgt.n	2e20 <boot_serial_start+0x28>
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d0f3      	beq.n	2e08 <boot_serial_start+0x10>
        off += rc;
    2e20:	4404      	add	r4, r0
        if (!full_line) {
    2e22:	b92b      	cbnz	r3, 2e30 <boot_serial_start+0x38>
            if (off == max_input) {
    2e24:	f240 2301 	movw	r3, #513	; 0x201
    2e28:	429c      	cmp	r4, r3
    2e2a:	d1ed      	bne.n	2e08 <boot_serial_start+0x10>
        }
        off = 0;
    2e2c:	2400      	movs	r4, #0
    2e2e:	e7eb      	b.n	2e08 <boot_serial_start+0x10>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    2e30:	7833      	ldrb	r3, [r6, #0]
    2e32:	2b06      	cmp	r3, #6
    2e34:	d109      	bne.n	2e4a <boot_serial_start+0x52>
    2e36:	7873      	ldrb	r3, [r6, #1]
    2e38:	2b09      	cmp	r3, #9
    2e3a:	d10b      	bne.n	2e54 <boot_serial_start+0x5c>
            dec_off = 0;
    2e3c:	2300      	movs	r3, #0
    2e3e:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    2e40:	4669      	mov	r1, sp
    2e42:	1ea0      	subs	r0, r4, #2
    2e44:	f7ff fd46 	bl	28d4 <boot_serial_in_dec.constprop.0>
    2e48:	e004      	b.n	2e54 <boot_serial_start+0x5c>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    2e4a:	2b04      	cmp	r3, #4
    2e4c:	d102      	bne.n	2e54 <boot_serial_start+0x5c>
    2e4e:	7873      	ldrb	r3, [r6, #1]
    2e50:	2b14      	cmp	r3, #20
    2e52:	d0f5      	beq.n	2e40 <boot_serial_start+0x48>
        if (rc == 1) {
    2e54:	2801      	cmp	r0, #1
    2e56:	d1e9      	bne.n	2e2c <boot_serial_start+0x34>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    2e58:	9900      	ldr	r1, [sp, #0]
    2e5a:	4638      	mov	r0, r7
    2e5c:	3902      	subs	r1, #2
    2e5e:	f7ff fd95 	bl	298c <boot_serial_input>
    2e62:	e7e3      	b.n	2e2c <boot_serial_start+0x34>
    2e64:	20016654 	.word	0x20016654
    2e68:	20016aec 	.word	0x20016aec
    2e6c:	200168ed 	.word	0x200168ed

00002e70 <decode_Upload>:
	return tmp_result;
}

static bool decode_Upload(
		cbor_state_t *state, struct Upload *result)
{
    2e70:	b530      	push	{r4, r5, lr}
    2e72:	b085      	sub	sp, #20
    2e74:	4605      	mov	r5, r0
    2e76:	460c      	mov	r4, r1
	cbor_print("%s\n", __func__);
	bool int_res;

	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    2e78:	f005 f86e 	bl	7f58 <map_start_decode>
    2e7c:	b920      	cbnz	r0, 2e88 <decode_Upload+0x18>
    2e7e:	2400      	movs	r4, #0

	if (!tmp_result)
		cbor_trace();

	return tmp_result;
}
    2e80:	f004 0001 	and.w	r0, r4, #1
    2e84:	b005      	add	sp, #20
    2e86:	bd30      	pop	{r4, r5, pc}
	bool tmp_result = (((map_start_decode(state) && (int_res = (multi_decode(1, 5, &(*result)._Upload_members_count, (void *)decode_Member, state, (&(*result)._Upload_members), sizeof(struct Member_))), ((map_end_decode(state)) && int_res)))));
    2e88:	230c      	movs	r3, #12
    2e8a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
    2e8e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2e92:	2105      	movs	r1, #5
    2e94:	2001      	movs	r0, #1
    2e96:	4b05      	ldr	r3, [pc, #20]	; (2eac <decode_Upload+0x3c>)
    2e98:	9500      	str	r5, [sp, #0]
    2e9a:	f005 f86d 	bl	7f78 <multi_decode>
    2e9e:	4604      	mov	r4, r0
    2ea0:	4628      	mov	r0, r5
    2ea2:	f005 f867 	bl	7f74 <map_end_decode>
    2ea6:	2800      	cmp	r0, #0
    2ea8:	d0e9      	beq.n	2e7e <decode_Upload+0xe>
    2eaa:	e7e9      	b.n	2e80 <decode_Upload+0x10>
    2eac:	00002eb1 	.word	0x00002eb1

00002eb0 <decode_Member>:
{
    2eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2eb2:	4604      	mov	r4, r0
    2eb4:	460d      	mov	r5, r1
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    2eb6:	f005 f983 	bl	81c0 <union_start_code>
    2eba:	b910      	cbnz	r0, 2ec2 <decode_Member+0x12>
    2ebc:	2000      	movs	r0, #0
}
    2ebe:	b002      	add	sp, #8
    2ec0:	bd70      	pop	{r4, r5, r6, pc}
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    2ec2:	4b34      	ldr	r3, [pc, #208]	; (2f94 <decode_Member+0xe4>)
    2ec4:	4669      	mov	r1, sp
    2ec6:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    2ec8:	2305      	movs	r3, #5
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    2eca:	4620      	mov	r0, r4
    tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    2ecc:	9301      	str	r3, [sp, #4]
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    2ece:	f005 f840 	bl	7f52 <tstrx_expect>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2ed2:	b158      	cbz	r0, 2eec <decode_Member+0x3c>
	&& (intx32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    2ed4:	4629      	mov	r1, r5
    2ed6:	4620      	mov	r0, r4
    2ed8:	f004 fff2 	bl	7ec0 <intx32_decode>
    2edc:	b130      	cbz	r0, 2eec <decode_Member+0x3c>
    2ede:	2300      	movs	r3, #0
	&& (bstrx_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    2ee0:	722b      	strb	r3, [r5, #8]
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    2ee2:	4620      	mov	r0, r4
    2ee4:	f005 f973 	bl	81ce <union_end_code>
	bool tmp_result = (((union_start_code(state) && (int_res = (((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"image",
    2ee8:	2001      	movs	r0, #1
    2eea:	e7e8      	b.n	2ebe <decode_Member+0xe>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    2eec:	4620      	mov	r0, r4
    2eee:	f005 f96a 	bl	81c6 <union_elem_code>
    2ef2:	b178      	cbz	r0, 2f14 <decode_Member+0x64>
    2ef4:	4b28      	ldr	r3, [pc, #160]	; (2f98 <decode_Member+0xe8>)
    2ef6:	4669      	mov	r1, sp
    2ef8:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    2efa:	2304      	movs	r3, #4
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    2efc:	4620      	mov	r0, r4
    tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    2efe:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"data",
    2f00:	f005 f827 	bl	7f52 <tstrx_expect>
    2f04:	b130      	cbz	r0, 2f14 <decode_Member+0x64>
	&& (bstrx_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    2f06:	4629      	mov	r1, r5
    2f08:	4620      	mov	r0, r4
    2f0a:	f005 f81f 	bl	7f4c <bstrx_decode>
    2f0e:	b108      	cbz	r0, 2f14 <decode_Member+0x64>
    2f10:	2301      	movs	r3, #1
    2f12:	e7e5      	b.n	2ee0 <decode_Member+0x30>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    2f14:	4620      	mov	r0, r4
    2f16:	f005 f956 	bl	81c6 <union_elem_code>
    2f1a:	b178      	cbz	r0, 2f3c <decode_Member+0x8c>
    2f1c:	4b1f      	ldr	r3, [pc, #124]	; (2f9c <decode_Member+0xec>)
    2f1e:	4669      	mov	r1, sp
    2f20:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    2f22:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    2f24:	4620      	mov	r0, r4
    tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    2f26:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"len",
    2f28:	f005 f813 	bl	7f52 <tstrx_expect>
    2f2c:	b130      	cbz	r0, 2f3c <decode_Member+0x8c>
	&& (intx32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    2f2e:	4629      	mov	r1, r5
    2f30:	4620      	mov	r0, r4
    2f32:	f004 ffc5 	bl	7ec0 <intx32_decode>
    2f36:	b108      	cbz	r0, 2f3c <decode_Member+0x8c>
    2f38:	2302      	movs	r3, #2
    2f3a:	e7d1      	b.n	2ee0 <decode_Member+0x30>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    2f3c:	4620      	mov	r0, r4
    2f3e:	f005 f942 	bl	81c6 <union_elem_code>
    2f42:	b178      	cbz	r0, 2f64 <decode_Member+0xb4>
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    2f44:	2603      	movs	r6, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    2f46:	4b16      	ldr	r3, [pc, #88]	; (2fa0 <decode_Member+0xf0>)
    2f48:	4669      	mov	r1, sp
    2f4a:	4620      	mov	r0, r4
    2f4c:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    2f4e:	9601      	str	r6, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"off",
    2f50:	f004 ffff 	bl	7f52 <tstrx_expect>
    2f54:	b130      	cbz	r0, 2f64 <decode_Member+0xb4>
	&& (intx32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    2f56:	4629      	mov	r1, r5
    2f58:	4620      	mov	r0, r4
    2f5a:	f004 ffb1 	bl	7ec0 <intx32_decode>
    2f5e:	b108      	cbz	r0, 2f64 <decode_Member+0xb4>
    2f60:	722e      	strb	r6, [r5, #8]
    2f62:	e7be      	b.n	2ee2 <decode_Member+0x32>
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2f64:	4620      	mov	r0, r4
    2f66:	f005 f92e 	bl	81c6 <union_elem_code>
    2f6a:	b178      	cbz	r0, 2f8c <decode_Member+0xdc>
    2f6c:	4b0d      	ldr	r3, [pc, #52]	; (2fa4 <decode_Member+0xf4>)
    2f6e:	4669      	mov	r1, sp
    2f70:	9300      	str	r3, [sp, #0]
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2f72:	2303      	movs	r3, #3
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2f74:	4620      	mov	r0, r4
    tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2f76:	9301      	str	r3, [sp, #4]
	|| (union_elem_code(state) && ((((tstrx_expect(state, ((tmp_str.value = (const uint8_t *)"sha",
    2f78:	f004 ffeb 	bl	7f52 <tstrx_expect>
    2f7c:	b130      	cbz	r0, 2f8c <decode_Member+0xdc>
	&& (bstrx_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), union_end_code(state), int_res))));
    2f7e:	4629      	mov	r1, r5
    2f80:	4620      	mov	r0, r4
    2f82:	f004 ffe3 	bl	7f4c <bstrx_decode>
    2f86:	b108      	cbz	r0, 2f8c <decode_Member+0xdc>
    2f88:	2304      	movs	r3, #4
    2f8a:	e7a9      	b.n	2ee0 <decode_Member+0x30>
    2f8c:	4620      	mov	r0, r4
    2f8e:	f005 f91e 	bl	81ce <union_end_code>
    2f92:	e793      	b.n	2ebc <decode_Member+0xc>
    2f94:	0000985d 	.word	0x0000985d
    2f98:	00009bf0 	.word	0x00009bf0
    2f9c:	00009bf5 	.word	0x00009bf5
    2fa0:	00009bec 	.word	0x00009bec
    2fa4:	00009bf9 	.word	0x00009bf9

00002fa8 <cbor_decode_Upload>:

bool cbor_decode_Upload(
		const uint8_t *payload, uint32_t payload_len,
		struct Upload *result,
		uint32_t *payload_len_out)
{
    2fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return entry_function(payload, payload_len, (const void *)result,
    2faa:	f04f 0c02 	mov.w	ip, #2
    2fae:	2401      	movs	r4, #1
    2fb0:	e9cd 4c01 	strd	r4, ip, [sp, #4]
    2fb4:	4c02      	ldr	r4, [pc, #8]	; (2fc0 <cbor_decode_Upload+0x18>)
    2fb6:	9400      	str	r4, [sp, #0]
    2fb8:	f005 f90d 	bl	81d6 <entry_function>
		payload_len_out, (void *)decode_Upload,
		1, 2);
}
    2fbc:	b004      	add	sp, #16
    2fbe:	bd10      	pop	{r4, pc}
    2fc0:	00002e71 	.word	0x00002e71

00002fc4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2fc4:	4a09      	ldr	r2, [pc, #36]	; (2fec <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2fc6:	490a      	ldr	r1, [pc, #40]	; (2ff0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2fc8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2fca:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2fcc:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    2fce:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2fd0:	4908      	ldr	r1, [pc, #32]	; (2ff4 <arch_swap+0x30>)
    2fd2:	684b      	ldr	r3, [r1, #4]
    2fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2fd8:	604b      	str	r3, [r1, #4]
    2fda:	2300      	movs	r3, #0
    2fdc:	f383 8811 	msr	BASEPRI, r3
    2fe0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2fe4:	6893      	ldr	r3, [r2, #8]
}
    2fe6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2fe8:	4770      	bx	lr
    2fea:	bf00      	nop
    2fec:	2001670c 	.word	0x2001670c
    2ff0:	0000930c 	.word	0x0000930c
    2ff4:	e000ed00 	.word	0xe000ed00

00002ff8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2ff8:	4922      	ldr	r1, [pc, #136]	; (3084 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2ffa:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    2ffc:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3000:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3004:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3006:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    300a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #0x10    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    300e:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    3012:	d103      	bne.n	301c <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    3014:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    3018:	ec80 8a10 	vstmia	r0, {s16-s31}

0000301c <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    301c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    301e:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3022:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3026:	4f18      	ldr	r7, [pc, #96]	; (3088 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3028:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    302c:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    302e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3030:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    3032:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3036:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    3038:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    303a:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    303c:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
    3040:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    3044:	d003      	beq.n	304e <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    3046:	2300      	movs	r3, #0
    vmsr fpscr, r3
    3048:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    304c:	e003      	b.n	3056 <in_fp_endif>

0000304e <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    304e:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    3052:	ec90 8a10 	vldmia	r0, {s16-s31}

00003056 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    3056:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
    305a:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    305e:	f383 8814 	msr	CONTROL, r3
    isb
    3062:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3066:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    306a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    306e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    3072:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    3076:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    3078:	f005 f8e3 	bl	8242 <configure_builtin_stack_guard>
    pop {r2, lr}
    307c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3080:	4770      	bx	lr
    3082:	0000      	.short	0x0000
    ldr r1, =_kernel
    3084:	2001670c 	.word	0x2001670c
    ldr v4, =_SCS_ICSR
    3088:	e000ed04 	.word	0xe000ed04

0000308c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    308c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3090:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3092:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3096:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    309a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    309c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    30a0:	2902      	cmp	r1, #2
    beq _oops
    30a2:	d0ff      	beq.n	30a4 <_oops>

000030a4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    30a4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    30a6:	f005 f8d0 	bl	824a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    30aa:	bd01      	pop	{r0, pc}

000030ac <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    30ac:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
    30ae:	2800      	cmp	r0, #0
    30b0:	db07      	blt.n	30c2 <arch_irq_enable+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30b2:	2301      	movs	r3, #1
    30b4:	0941      	lsrs	r1, r0, #5
    30b6:	4a03      	ldr	r2, [pc, #12]	; (30c4 <arch_irq_enable+0x18>)
    30b8:	f000 001f 	and.w	r0, r0, #31
    30bc:	4083      	lsls	r3, r0
    30be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    30c2:	4770      	bx	lr
    30c4:	e000e100 	.word	0xe000e100

000030c8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    30c8:	4b05      	ldr	r3, [pc, #20]	; (30e0 <arch_irq_is_enabled+0x18>)
    30ca:	0942      	lsrs	r2, r0, #5
    30cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30d0:	2301      	movs	r3, #1
    30d2:	f000 001f 	and.w	r0, r0, #31
    30d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    30da:	4010      	ands	r0, r2
    30dc:	4770      	bx	lr
    30de:	bf00      	nop
    30e0:	e000e100 	.word	0xe000e100

000030e4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    30e4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    30e6:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    30e8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30ec:	bfac      	ite	ge
    30ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30f2:	4b06      	ldrlt	r3, [pc, #24]	; (310c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30f4:	ea4f 1141 	mov.w	r1, r1, lsl #5
    30f8:	b2c9      	uxtb	r1, r1
    30fa:	bfab      	itete	ge
    30fc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3100:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3104:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3108:	5419      	strblt	r1, [r3, r0]
}
    310a:	4770      	bx	lr
    310c:	e000ed14 	.word	0xe000ed14

00003110 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3110:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3114:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    3116:	490d      	ldr	r1, [pc, #52]	; (314c <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    3118:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    311c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    311e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    3122:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3126:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    3128:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    312c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3134:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3138:	2300      	movs	r3, #0
    313a:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    313c:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3140:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3142:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    3144:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3148:	4770      	bx	lr
    314a:	bf00      	nop
    314c:	00007a9d 	.word	0x00007a9d

00003150 <arch_switch_to_main_thread>:
  __builtin_arm_set_fpscr(fpscr);
    3150:	2300      	movs	r3, #0
    3152:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3156:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    315a:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    315e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3162:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3166:	4b09      	ldr	r3, [pc, #36]	; (318c <arch_switch_to_main_thread+0x3c>)
    3168:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    316a:	6e43      	ldr	r3, [r0, #100]	; 0x64
    316c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3170:	4610      	mov	r0, r2
    3172:	f381 8809 	msr	PSP, r1
    3176:	2100      	movs	r1, #0
    3178:	b663      	cpsie	if
    317a:	f381 8811 	msr	BASEPRI, r1
    317e:	f3bf 8f6f 	isb	sy
    3182:	2200      	movs	r2, #0
    3184:	2300      	movs	r3, #0
    3186:	f004 fc89 	bl	7a9c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    318a:	bf00      	nop
    318c:	2001670c 	.word	0x2001670c

00003190 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3190:	4901      	ldr	r1, [pc, #4]	; (3198 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3192:	2210      	movs	r2, #16
	str	r2, [r1]
    3194:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3196:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3198:	e000ed10 	.word	0xe000ed10

0000319c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    319c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    319e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    31a0:	f380 8811 	msr	BASEPRI, r0
	isb
    31a4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    31a8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    31ac:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    31ae:	b662      	cpsie	i
	isb
    31b0:	f3bf 8f6f 	isb	sy

	bx	lr
    31b4:	4770      	bx	lr
    31b6:	bf00      	nop

000031b8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    31b8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    31ba:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    31bc:	f381 8811 	msr	BASEPRI, r1

	wfe
    31c0:	bf20      	wfe

	msr	BASEPRI, r0
    31c2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    31c6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    31c8:	4770      	bx	lr
    31ca:	bf00      	nop

000031cc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    31cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31d0:	4607      	mov	r7, r0

	if (esf != NULL) {
    31d2:	460c      	mov	r4, r1
{
    31d4:	b086      	sub	sp, #24
	if (esf != NULL) {
    31d6:	2900      	cmp	r1, #0
    31d8:	d04a      	beq.n	3270 <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    31da:	688b      	ldr	r3, [r1, #8]
    31dc:	4828      	ldr	r0, [pc, #160]	; (3280 <z_arm_fatal_error+0xb4>)
    31de:	9300      	str	r3, [sp, #0]
    31e0:	e9d1 2300 	ldrd	r2, r3, [r1]
    31e4:	2145      	movs	r1, #69	; 0x45
    31e6:	f004 fc6f 	bl	7ac8 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    31ea:	6963      	ldr	r3, [r4, #20]
    31ec:	2145      	movs	r1, #69	; 0x45
    31ee:	9300      	str	r3, [sp, #0]
    31f0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    31f4:	4823      	ldr	r0, [pc, #140]	; (3284 <z_arm_fatal_error+0xb8>)
    31f6:	f004 fc67 	bl	7ac8 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    31fa:	2145      	movs	r1, #69	; 0x45
    31fc:	69e2      	ldr	r2, [r4, #28]
    31fe:	4822      	ldr	r0, [pc, #136]	; (3288 <z_arm_fatal_error+0xbc>)
    3200:	f004 fc62 	bl	7ac8 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
    3204:	4626      	mov	r6, r4
    3206:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    3208:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3294 <z_arm_fatal_error+0xc8>
    320c:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
    3210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3214:	ed96 7a08 	vldr	s14, [r6, #32]
    3218:	edcd 7a05 	vstr	s15, [sp, #20]
    321c:	1ceb      	adds	r3, r5, #3
    321e:	9304      	str	r3, [sp, #16]
    3220:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
    3224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3228:	edcd 7a03 	vstr	s15, [sp, #12]
    322c:	1cab      	adds	r3, r5, #2
    322e:	9302      	str	r3, [sp, #8]
    3230:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    3234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3238:	edcd 7a01 	vstr	s15, [sp, #4]
    323c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    3240:	1c6b      	adds	r3, r5, #1
    3242:	462a      	mov	r2, r5
    3244:	9300      	str	r3, [sp, #0]
    3246:	2145      	movs	r1, #69	; 0x45
    3248:	ee17 3a90 	vmov	r3, s15
    324c:	4640      	mov	r0, r8
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
    324e:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    3250:	f004 fc3a 	bl	7ac8 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
    3254:	2d10      	cmp	r5, #16
    3256:	f106 0610 	add.w	r6, r6, #16
    325a:	d1d7      	bne.n	320c <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
    325c:	2145      	movs	r1, #69	; 0x45
    325e:	6e22      	ldr	r2, [r4, #96]	; 0x60
    3260:	480a      	ldr	r0, [pc, #40]	; (328c <z_arm_fatal_error+0xc0>)
    3262:	f004 fc31 	bl	7ac8 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3266:	2145      	movs	r1, #69	; 0x45
    3268:	69a2      	ldr	r2, [r4, #24]
    326a:	4809      	ldr	r0, [pc, #36]	; (3290 <z_arm_fatal_error+0xc4>)
    326c:	f004 fc2c 	bl	7ac8 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3270:	4621      	mov	r1, r4
    3272:	4638      	mov	r0, r7
}
    3274:	b006      	add	sp, #24
    3276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
    327a:	f001 bc0b 	b.w	4a94 <z_fatal_error>
    327e:	bf00      	nop
    3280:	00009bfd 	.word	0x00009bfd
    3284:	00009c31 	.word	0x00009c31
    3288:	00009c65 	.word	0x00009c65
    328c:	00009cc1 	.word	0x00009cc1
    3290:	00009cd5 	.word	0x00009cd5
    3294:	00009c79 	.word	0x00009c79

00003298 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3298:	bf30      	wfi
    b z_SysNmiOnReset
    329a:	f7ff bffd 	b.w	3298 <z_SysNmiOnReset>
    329e:	bf00      	nop

000032a0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    32a0:	4a14      	ldr	r2, [pc, #80]	; (32f4 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    32a2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    32a4:	4b14      	ldr	r3, [pc, #80]	; (32f8 <z_arm_prep_c+0x58>)
    32a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    32aa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    32ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32b0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    32b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    32b8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    32bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    32c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    32c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    32c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    32cc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    32d0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    32d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32d8:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
    32dc:	2300      	movs	r3, #0
    32de:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    32e2:	f001 fc25 	bl	4b30 <z_bss_zero>
	z_data_copy();
    32e6:	f002 fa05 	bl	56f4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    32ea:	f000 fa73 	bl	37d4 <z_arm_interrupt_init>
	z_cstart();
    32ee:	f001 fc43 	bl	4b78 <z_cstart>
    32f2:	bf00      	nop
    32f4:	00000000 	.word	0x00000000
    32f8:	e000ed00 	.word	0xe000ed00

000032fc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    32fc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    32fe:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3300:	4a0b      	ldr	r2, [pc, #44]	; (3330 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3302:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    3304:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3306:	bf1e      	ittt	ne
	movne	r1, #0
    3308:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    330a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    330c:	f005 fbc9 	blne	8aa2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3310:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3312:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3316:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    331a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    331e:	4905      	ldr	r1, [pc, #20]	; (3334 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3320:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3322:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3324:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3326:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    332a:	4903      	ldr	r1, [pc, #12]	; (3338 <_isr_wrapper+0x3c>)
	bx r1
    332c:	4708      	bx	r1
    332e:	0000      	.short	0x0000
	ldr r2, =_kernel
    3330:	2001670c 	.word	0x2001670c
	ldr r1, =_sw_isr_table
    3334:	00008e0c 	.word	0x00008e0c
	ldr r1, =z_arm_int_exit
    3338:	00003725 	.word	0x00003725

0000333c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    333c:	2000      	movs	r0, #0
    msr CONTROL, r0
    333e:	f380 8814 	msr	CONTROL, r0
    isb
    3342:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    3346:	2000      	movs	r0, #0
    msr MSPLIM, r0
    3348:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    334c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3350:	f005 fce2 	bl	8d18 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3354:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3356:	490e      	ldr	r1, [pc, #56]	; (3390 <__start+0x54>)
    str r0, [r1]
    3358:	6008      	str	r0, [r1, #0]
    dsb
    335a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    335e:	480d      	ldr	r0, [pc, #52]	; (3394 <__start+0x58>)
    msr msp, r0
    3360:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3364:	f000 fa10 	bl	3788 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3368:	2020      	movs	r0, #32
    msr BASEPRI, r0
    336a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    336e:	480a      	ldr	r0, [pc, #40]	; (3398 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3370:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3374:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3376:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    337a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    337e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3380:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3382:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3386:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    338a:	f7ff ff89 	bl	32a0 <z_arm_prep_c>
    338e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    3390:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3394:	20019830 	.word	0x20019830
    ldr r0, =z_interrupt_stacks
    3398:	20019830 	.word	0x20019830

0000339c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    339c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    33a0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    33a4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    33a6:	4672      	mov	r2, lr
	bl z_arm_fault
    33a8:	f000 f908 	bl	35bc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    33ac:	bd01      	pop	{r0, pc}
    33ae:	bf00      	nop

000033b0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    33b0:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    33b2:	4c21      	ldr	r4, [pc, #132]	; (3438 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    33b4:	2145      	movs	r1, #69	; 0x45
    33b6:	4821      	ldr	r0, [pc, #132]	; (343c <usage_fault.constprop.0+0x8c>)
    33b8:	f004 fb86 	bl	7ac8 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    33bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    33be:	019d      	lsls	r5, r3, #6
    33c0:	d503      	bpl.n	33ca <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    33c2:	2145      	movs	r1, #69	; 0x45
    33c4:	481e      	ldr	r0, [pc, #120]	; (3440 <usage_fault.constprop.0+0x90>)
    33c6:	f004 fb7f 	bl	7ac8 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    33ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    33cc:	01dc      	lsls	r4, r3, #7
    33ce:	d503      	bpl.n	33d8 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    33d0:	2145      	movs	r1, #69	; 0x45
    33d2:	481c      	ldr	r0, [pc, #112]	; (3444 <usage_fault.constprop.0+0x94>)
    33d4:	f004 fb78 	bl	7ac8 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    33d8:	4d17      	ldr	r5, [pc, #92]	; (3438 <usage_fault.constprop.0+0x88>)
    33da:	6aac      	ldr	r4, [r5, #40]	; 0x28
    33dc:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    33e0:	d004      	beq.n	33ec <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    33e2:	2145      	movs	r1, #69	; 0x45
    33e4:	4818      	ldr	r0, [pc, #96]	; (3448 <usage_fault.constprop.0+0x98>)
    33e6:	f004 fb6f 	bl	7ac8 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    33ea:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    33ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33ee:	0318      	lsls	r0, r3, #12
    33f0:	d503      	bpl.n	33fa <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    33f2:	2145      	movs	r1, #69	; 0x45
    33f4:	4815      	ldr	r0, [pc, #84]	; (344c <usage_fault.constprop.0+0x9c>)
    33f6:	f004 fb67 	bl	7ac8 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    33fa:	4d0f      	ldr	r5, [pc, #60]	; (3438 <usage_fault.constprop.0+0x88>)
    33fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33fe:	0359      	lsls	r1, r3, #13
    3400:	d503      	bpl.n	340a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3402:	2145      	movs	r1, #69	; 0x45
    3404:	4812      	ldr	r0, [pc, #72]	; (3450 <usage_fault.constprop.0+0xa0>)
    3406:	f004 fb5f 	bl	7ac8 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    340a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    340c:	039a      	lsls	r2, r3, #14
    340e:	d503      	bpl.n	3418 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3410:	2145      	movs	r1, #69	; 0x45
    3412:	4810      	ldr	r0, [pc, #64]	; (3454 <usage_fault.constprop.0+0xa4>)
    3414:	f004 fb58 	bl	7ac8 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3418:	4d07      	ldr	r5, [pc, #28]	; (3438 <usage_fault.constprop.0+0x88>)
    341a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    341c:	03db      	lsls	r3, r3, #15
    341e:	d503      	bpl.n	3428 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3420:	2145      	movs	r1, #69	; 0x45
    3422:	480d      	ldr	r0, [pc, #52]	; (3458 <usage_fault.constprop.0+0xa8>)
    3424:	f004 fb50 	bl	7ac8 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3428:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    342a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    342c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3430:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3434:	62ab      	str	r3, [r5, #40]	; 0x28
}
    3436:	bd38      	pop	{r3, r4, r5, pc}
    3438:	e000ed00 	.word	0xe000ed00
    343c:	00009d08 	.word	0x00009d08
    3440:	00009d25 	.word	0x00009d25
    3444:	00009d3d 	.word	0x00009d3d
    3448:	00009d5c 	.word	0x00009d5c
    344c:	00009d8b 	.word	0x00009d8b
    3450:	00009dae 	.word	0x00009dae
    3454:	00009dd8 	.word	0x00009dd8
    3458:	00009df7 	.word	0x00009df7

0000345c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    345c:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    345e:	4c23      	ldr	r4, [pc, #140]	; (34ec <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3460:	4606      	mov	r6, r0
    3462:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3464:	4822      	ldr	r0, [pc, #136]	; (34f0 <bus_fault.constprop.0+0x94>)
    3466:	2145      	movs	r1, #69	; 0x45
    3468:	f004 fb2e 	bl	7ac8 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    346c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    346e:	04d9      	lsls	r1, r3, #19
    3470:	d503      	bpl.n	347a <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    3472:	2145      	movs	r1, #69	; 0x45
    3474:	481f      	ldr	r0, [pc, #124]	; (34f4 <bus_fault.constprop.0+0x98>)
    3476:	f004 fb27 	bl	7ac8 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    347a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    347c:	051a      	lsls	r2, r3, #20
    347e:	d503      	bpl.n	3488 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    3480:	2145      	movs	r1, #69	; 0x45
    3482:	481d      	ldr	r0, [pc, #116]	; (34f8 <bus_fault.constprop.0+0x9c>)
    3484:	f004 fb20 	bl	7ac8 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3488:	4c18      	ldr	r4, [pc, #96]	; (34ec <bus_fault.constprop.0+0x90>)
    348a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    348c:	059b      	lsls	r3, r3, #22
    348e:	d510      	bpl.n	34b2 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    3490:	481a      	ldr	r0, [pc, #104]	; (34fc <bus_fault.constprop.0+0xa0>)
    3492:	2145      	movs	r1, #69	; 0x45
    3494:	f004 fb18 	bl	7ac8 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    3498:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    349a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    349c:	0418      	lsls	r0, r3, #16
    349e:	d508      	bpl.n	34b2 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    34a0:	2145      	movs	r1, #69	; 0x45
    34a2:	4817      	ldr	r0, [pc, #92]	; (3500 <bus_fault.constprop.0+0xa4>)
    34a4:	f004 fb10 	bl	7ac8 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    34a8:	b11e      	cbz	r6, 34b2 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    34aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    34ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    34b0:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    34b2:	4c0e      	ldr	r4, [pc, #56]	; (34ec <bus_fault.constprop.0+0x90>)
    34b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    34b6:	0559      	lsls	r1, r3, #21
    34b8:	d503      	bpl.n	34c2 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    34ba:	2145      	movs	r1, #69	; 0x45
    34bc:	4811      	ldr	r0, [pc, #68]	; (3504 <bus_fault.constprop.0+0xa8>)
    34be:	f004 fb03 	bl	7ac8 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    34c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    34c4:	05da      	lsls	r2, r3, #23
    34c6:	d50b      	bpl.n	34e0 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    34c8:	2145      	movs	r1, #69	; 0x45
    34ca:	480f      	ldr	r0, [pc, #60]	; (3508 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    34cc:	f004 fafc 	bl	7ac8 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    34d0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    34d2:	4a06      	ldr	r2, [pc, #24]	; (34ec <bus_fault.constprop.0+0x90>)
    34d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    34d6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    34da:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    34dc:	7028      	strb	r0, [r5, #0]
}
    34de:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    34e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    34e2:	049b      	lsls	r3, r3, #18
    34e4:	d5f4      	bpl.n	34d0 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    34e6:	2145      	movs	r1, #69	; 0x45
    34e8:	4808      	ldr	r0, [pc, #32]	; (350c <bus_fault.constprop.0+0xb0>)
    34ea:	e7ef      	b.n	34cc <bus_fault.constprop.0+0x70>
    34ec:	e000ed00 	.word	0xe000ed00
    34f0:	00009e27 	.word	0x00009e27
    34f4:	00009e42 	.word	0x00009e42
    34f8:	00009e58 	.word	0x00009e58
    34fc:	00009e70 	.word	0x00009e70
    3500:	00009e8e 	.word	0x00009e8e
    3504:	00009ea8 	.word	0x00009ea8
    3508:	00009ec8 	.word	0x00009ec8
    350c:	00009ee5 	.word	0x00009ee5

00003510 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3510:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3512:	4c22      	ldr	r4, [pc, #136]	; (359c <mem_manage_fault.constprop.0+0x8c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    3514:	4606      	mov	r6, r0
    3516:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3518:	4821      	ldr	r0, [pc, #132]	; (35a0 <mem_manage_fault.constprop.0+0x90>)
    351a:	2145      	movs	r1, #69	; 0x45
    351c:	f004 fad4 	bl	7ac8 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3520:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3522:	06d8      	lsls	r0, r3, #27
    3524:	d503      	bpl.n	352e <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3526:	2145      	movs	r1, #69	; 0x45
    3528:	481e      	ldr	r0, [pc, #120]	; (35a4 <mem_manage_fault.constprop.0+0x94>)
    352a:	f004 facd 	bl	7ac8 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    352e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3530:	0719      	lsls	r1, r3, #28
    3532:	d503      	bpl.n	353c <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    3534:	2145      	movs	r1, #69	; 0x45
    3536:	481c      	ldr	r0, [pc, #112]	; (35a8 <mem_manage_fault.constprop.0+0x98>)
    3538:	f004 fac6 	bl	7ac8 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    353c:	4c17      	ldr	r4, [pc, #92]	; (359c <mem_manage_fault.constprop.0+0x8c>)
    353e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3540:	079a      	lsls	r2, r3, #30
    3542:	d510      	bpl.n	3566 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    3544:	2145      	movs	r1, #69	; 0x45
    3546:	4819      	ldr	r0, [pc, #100]	; (35ac <mem_manage_fault.constprop.0+0x9c>)
    3548:	f004 fabe 	bl	7ac8 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    354c:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    354e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3550:	061b      	lsls	r3, r3, #24
    3552:	d508      	bpl.n	3566 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3554:	2145      	movs	r1, #69	; 0x45
    3556:	4816      	ldr	r0, [pc, #88]	; (35b0 <mem_manage_fault.constprop.0+0xa0>)
    3558:	f004 fab6 	bl	7ac8 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    355c:	b11e      	cbz	r6, 3566 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    355e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3564:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3566:	4c0d      	ldr	r4, [pc, #52]	; (359c <mem_manage_fault.constprop.0+0x8c>)
    3568:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    356a:	07d8      	lsls	r0, r3, #31
    356c:	d503      	bpl.n	3576 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    356e:	2145      	movs	r1, #69	; 0x45
    3570:	4810      	ldr	r0, [pc, #64]	; (35b4 <mem_manage_fault.constprop.0+0xa4>)
    3572:	f004 faa9 	bl	7ac8 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3578:	0699      	lsls	r1, r3, #26
    357a:	d503      	bpl.n	3584 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    357c:	2145      	movs	r1, #69	; 0x45
    357e:	480e      	ldr	r0, [pc, #56]	; (35b8 <mem_manage_fault.constprop.0+0xa8>)
    3580:	f004 faa2 	bl	7ac8 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    3584:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3586:	4b05      	ldr	r3, [pc, #20]	; (359c <mem_manage_fault.constprop.0+0x8c>)
    3588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    358a:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    358c:	bf58      	it	pl
    358e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3592:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3596:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3598:	7028      	strb	r0, [r5, #0]
}
    359a:	bd70      	pop	{r4, r5, r6, pc}
    359c:	e000ed00 	.word	0xe000ed00
    35a0:	00009f19 	.word	0x00009f19
    35a4:	00009f34 	.word	0x00009f34
    35a8:	00009e58 	.word	0x00009e58
    35ac:	00009f6c 	.word	0x00009f6c
    35b0:	00009f89 	.word	0x00009f89
    35b4:	00009fa4 	.word	0x00009fa4
    35b8:	00009ee5 	.word	0x00009ee5

000035bc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    35bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    35c0:	4b49      	ldr	r3, [pc, #292]	; (36e8 <z_arm_fault+0x12c>)
{
    35c2:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    35c4:	685f      	ldr	r7, [r3, #4]
    35c6:	2500      	movs	r5, #0
{
    35c8:	b09c      	sub	sp, #112	; 0x70
    35ca:	f3c7 0408 	ubfx	r4, r7, #0, #9
    35ce:	f385 8811 	msr	BASEPRI, r5
    35d2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    35d6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    35da:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    35de:	d107      	bne.n	35f0 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    35e0:	f002 030c 	and.w	r3, r2, #12
    35e4:	2b08      	cmp	r3, #8
    35e6:	d113      	bne.n	3610 <z_arm_fault+0x54>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    35e8:	2145      	movs	r1, #69	; 0x45
    35ea:	4840      	ldr	r0, [pc, #256]	; (36ec <z_arm_fault+0x130>)
    35ec:	f004 fa6c 	bl	7ac8 <z_log_minimal_printk>
	*nested_exc = false;
    35f0:	2500      	movs	r5, #0
		return NULL;
    35f2:	462e      	mov	r6, r5
	*recoverable = false;
    35f4:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    35f8:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    35fa:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    35fe:	2b09      	cmp	r3, #9
    3600:	d85f      	bhi.n	36c2 <z_arm_fault+0x106>
    3602:	e8df f003 	tbb	[pc, r3]
    3606:	530a      	.short	0x530a
    3608:	5e5e3757 	.word	0x5e5e3757
    360c:	5b5e5e5e 	.word	0x5b5e5e5e
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3610:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3612:	bf4c      	ite	mi
    3614:	460e      	movmi	r6, r1
			*nested_exc = true;
    3616:	2501      	movpl	r5, #1
    3618:	e7ec      	b.n	35f4 <z_arm_fault+0x38>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    361a:	4c33      	ldr	r4, [pc, #204]	; (36e8 <z_arm_fault+0x12c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    361c:	2145      	movs	r1, #69	; 0x45
    361e:	4834      	ldr	r0, [pc, #208]	; (36f0 <z_arm_fault+0x134>)
    3620:	f004 fa52 	bl	7ac8 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	*recoverable = false;
    3626:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    362a:	079a      	lsls	r2, r3, #30
    362c:	d505      	bpl.n	363a <z_arm_fault+0x7e>
		PR_EXC("  Bus fault on vector table read");
    362e:	2145      	movs	r1, #69	; 0x45
    3630:	4830      	ldr	r0, [pc, #192]	; (36f4 <z_arm_fault+0x138>)
	PR_FAULT_INFO(
    3632:	f004 fa49 	bl	7ac8 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3636:	2400      	movs	r4, #0
    3638:	e01f      	b.n	367a <z_arm_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    363a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    363c:	005b      	lsls	r3, r3, #1
    363e:	d5fa      	bpl.n	3636 <z_arm_fault+0x7a>
		PR_EXC("  Fault escalation (see below)");
    3640:	2145      	movs	r1, #69	; 0x45
    3642:	482d      	ldr	r0, [pc, #180]	; (36f8 <z_arm_fault+0x13c>)
    3644:	f004 fa40 	bl	7ac8 <z_log_minimal_printk>
		if (SCB_MMFSR != 0) {
    3648:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    364c:	b12b      	cbz	r3, 365a <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
    364e:	2001      	movs	r0, #1
    3650:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    3654:	f7ff ff5c 	bl	3510 <mem_manage_fault.constprop.0>
    3658:	e00e      	b.n	3678 <z_arm_fault+0xbc>
		} else if (SCB_BFSR != 0) {
    365a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    365e:	b12b      	cbz	r3, 366c <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
    3660:	2001      	movs	r0, #1
    3662:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    3666:	f7ff fef9 	bl	345c <bus_fault.constprop.0>
    366a:	e005      	b.n	3678 <z_arm_fault+0xbc>
		} else if (SCB_UFSR != 0) {
    366c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    366e:	b29b      	uxth	r3, r3
    3670:	2b00      	cmp	r3, #0
    3672:	d0e0      	beq.n	3636 <z_arm_fault+0x7a>
			reason = usage_fault(esf);
    3674:	f7ff fe9c 	bl	33b0 <usage_fault.constprop.0>
    3678:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    367a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    367e:	b993      	cbnz	r3, 36a6 <z_arm_fault+0xea>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3680:	2268      	movs	r2, #104	; 0x68
    3682:	4631      	mov	r1, r6
    3684:	a802      	add	r0, sp, #8
    3686:	f004 fe2e 	bl	82e6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    368a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    368c:	b335      	cbz	r5, 36dc <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    368e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3692:	b922      	cbnz	r2, 369e <z_arm_fault+0xe2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3694:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3698:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    369c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    369e:	4620      	mov	r0, r4
    36a0:	a902      	add	r1, sp, #8
    36a2:	f7ff fd93 	bl	31cc <z_arm_fatal_error>
}
    36a6:	b01c      	add	sp, #112	; 0x70
    36a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    36ac:	2000      	movs	r0, #0
    36ae:	f10d 0107 	add.w	r1, sp, #7
    36b2:	e7cf      	b.n	3654 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
    36b4:	2000      	movs	r0, #0
    36b6:	f10d 0107 	add.w	r1, sp, #7
    36ba:	e7d4      	b.n	3666 <z_arm_fault+0xaa>
	PR_FAULT_INFO(
    36bc:	2145      	movs	r1, #69	; 0x45
    36be:	480f      	ldr	r0, [pc, #60]	; (36fc <z_arm_fault+0x140>)
    36c0:	e7b7      	b.n	3632 <z_arm_fault+0x76>
	PR_FAULT_INFO("***** %s %d) *****",
    36c2:	490f      	ldr	r1, [pc, #60]	; (3700 <z_arm_fault+0x144>)
    36c4:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    36c8:	4a0e      	ldr	r2, [pc, #56]	; (3704 <z_arm_fault+0x148>)
    36ca:	480f      	ldr	r0, [pc, #60]	; (3708 <z_arm_fault+0x14c>)
    36cc:	bf08      	it	eq
    36ce:	460a      	moveq	r2, r1
    36d0:	f1a4 0310 	sub.w	r3, r4, #16
    36d4:	2145      	movs	r1, #69	; 0x45
    36d6:	f004 f9f7 	bl	7ac8 <z_log_minimal_printk>
}
    36da:	e7ac      	b.n	3636 <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    36dc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    36e0:	f023 0301 	bic.w	r3, r3, #1
    36e4:	e7da      	b.n	369c <z_arm_fault+0xe0>
    36e6:	bf00      	nop
    36e8:	e000ed00 	.word	0xe000ed00
    36ec:	00009ff6 	.word	0x00009ff6
    36f0:	0000a026 	.word	0x0000a026
    36f4:	0000a042 	.word	0x0000a042
    36f8:	0000a068 	.word	0x0000a068
    36fc:	0000a08c 	.word	0x0000a08c
    3700:	00009fc8 	.word	0x00009fc8
    3704:	00009fdd 	.word	0x00009fdd
    3708:	0000a0b5 	.word	0x0000a0b5

0000370c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    370c:	4b04      	ldr	r3, [pc, #16]	; (3720 <z_arm_fault_init+0x14>)
    370e:	695a      	ldr	r2, [r3, #20]
    3710:	f042 0210 	orr.w	r2, r2, #16
    3714:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    3716:	695a      	ldr	r2, [r3, #20]
    3718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    371c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    371e:	4770      	bx	lr
    3720:	e000ed00 	.word	0xe000ed00

00003724 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3724:	4b04      	ldr	r3, [pc, #16]	; (3738 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3726:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3728:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    372a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    372c:	d003      	beq.n	3736 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    372e:	4903      	ldr	r1, [pc, #12]	; (373c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3734:	600a      	str	r2, [r1, #0]

00003736 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3736:	4770      	bx	lr
	ldr r3, =_kernel
    3738:	2001670c 	.word	0x2001670c
	ldr r1, =_SCS_ICSR
    373c:	e000ed04 	.word	0xe000ed04

00003740 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    3740:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3744:	4905      	ldr	r1, [pc, #20]	; (375c <sys_arch_reboot+0x1c>)
    3746:	4b06      	ldr	r3, [pc, #24]	; (3760 <sys_arch_reboot+0x20>)
    3748:	68ca      	ldr	r2, [r1, #12]
    374a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    374e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3750:	60cb      	str	r3, [r1, #12]
    3752:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3756:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3758:	e7fd      	b.n	3756 <sys_arch_reboot+0x16>
    375a:	bf00      	nop
    375c:	e000ed00 	.word	0xe000ed00
    3760:	05fa0004 	.word	0x05fa0004

00003764 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    3764:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    3766:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3768:	4906      	ldr	r1, [pc, #24]	; (3784 <z_arm_clear_arm_mpu_config+0x20>)
    376a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    376e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    3772:	4293      	cmp	r3, r2
    3774:	db00      	blt.n	3778 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3776:	4770      	bx	lr
  mpu->RNR = rnr;
    3778:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    377c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3780:	3301      	adds	r3, #1
    3782:	e7f6      	b.n	3772 <z_arm_clear_arm_mpu_config+0xe>
    3784:	e000ed00 	.word	0xe000ed00

00003788 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3788:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    378a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    378c:	2400      	movs	r4, #0
    378e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3792:	f7ff ffe7 	bl	3764 <z_arm_clear_arm_mpu_config>
    3796:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3798:	f04f 30ff 	mov.w	r0, #4294967295
    379c:	4a0c      	ldr	r2, [pc, #48]	; (37d0 <z_arm_init_arch_hw_at_boot+0x48>)
    379e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    37a2:	3301      	adds	r3, #1
    37a4:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    37a6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    37aa:	d1f8      	bne.n	379e <z_arm_init_arch_hw_at_boot+0x16>
    37ac:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    37ae:	f04f 30ff 	mov.w	r0, #4294967295
    37b2:	4a07      	ldr	r2, [pc, #28]	; (37d0 <z_arm_init_arch_hw_at_boot+0x48>)
    37b4:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    37b8:	3301      	adds	r3, #1
    37ba:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    37bc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    37c0:	d1f8      	bne.n	37b4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    37c2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    37c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    37c8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    37cc:	bd10      	pop	{r4, pc}
    37ce:	bf00      	nop
    37d0:	e000e100 	.word	0xe000e100

000037d4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    37d4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37d6:	2120      	movs	r1, #32
    37d8:	4803      	ldr	r0, [pc, #12]	; (37e8 <z_arm_interrupt_init+0x14>)
    37da:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    37dc:	3301      	adds	r3, #1
    37de:	2b41      	cmp	r3, #65	; 0x41
    37e0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    37e4:	d1f9      	bne.n	37da <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    37e6:	4770      	bx	lr
    37e8:	e000e100 	.word	0xe000e100

000037ec <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    37ec:	4b06      	ldr	r3, [pc, #24]	; (3808 <z_impl_k_thread_abort+0x1c>)
    37ee:	689b      	ldr	r3, [r3, #8]
    37f0:	4283      	cmp	r3, r0
    37f2:	d107      	bne.n	3804 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    37f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    37f8:	b123      	cbz	r3, 3804 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    37fa:	4a04      	ldr	r2, [pc, #16]	; (380c <z_impl_k_thread_abort+0x20>)
    37fc:	6853      	ldr	r3, [r2, #4]
    37fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3802:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3804:	f001 bf24 	b.w	5650 <z_thread_abort>
    3808:	2001670c 	.word	0x2001670c
    380c:	e000ed00 	.word	0xe000ed00

00003810 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3812:	4c09      	ldr	r4, [pc, #36]	; (3838 <z_arm_configure_static_mpu_regions+0x28>)
    3814:	4a09      	ldr	r2, [pc, #36]	; (383c <z_arm_configure_static_mpu_regions+0x2c>)
    3816:	4623      	mov	r3, r4
    3818:	2101      	movs	r1, #1
    381a:	4809      	ldr	r0, [pc, #36]	; (3840 <z_arm_configure_static_mpu_regions+0x30>)
    381c:	f000 f924 	bl	3a68 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    3820:	2300      	movs	r3, #0
    3822:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    3824:	4b07      	ldr	r3, [pc, #28]	; (3844 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    3826:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    3828:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    382a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    382c:	9301      	str	r3, [sp, #4]
    382e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    3830:	f000 f924 	bl	3a7c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3834:	b004      	add	sp, #16
    3836:	bd10      	pop	{r4, pc}
    3838:	20040000 	.word	0x20040000
    383c:	20014500 	.word	0x20014500
    3840:	00009208 	.word	0x00009208
    3844:	20014668 	.word	0x20014668

00003848 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    3848:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    384a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    384c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    384e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    3852:	f004 021f 	and.w	r2, r4, #31
    3856:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3858:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    385a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    385c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    3860:	4905      	ldr	r1, [pc, #20]	; (3878 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    3862:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    3866:	f043 0301 	orr.w	r3, r3, #1
    386a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    386e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    3872:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    3876:	bd10      	pop	{r4, pc}
    3878:	e000ed00 	.word	0xe000ed00

0000387c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    387c:	b530      	push	{r4, r5, lr}
	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
		&new_region->attr, new_region->start, new_region->size);
    387e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    3880:	680c      	ldr	r4, [r1, #0]
{
    3882:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    3884:	890a      	ldrh	r2, [r1, #8]
    3886:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    3888:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    388a:	3b01      	subs	r3, #1
    388c:	f024 041f 	bic.w	r4, r4, #31
    3890:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    3892:	f002 021f 	and.w	r2, r2, #31
    3896:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    389a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    389e:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    38a0:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    38a2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    38a6:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    38a8:	d909      	bls.n	38be <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    38aa:	4602      	mov	r2, r0
    38ac:	2145      	movs	r1, #69	; 0x45
    38ae:	4806      	ldr	r0, [pc, #24]	; (38c8 <mpu_configure_region+0x4c>)
    38b0:	f004 f90a 	bl	7ac8 <z_log_minimal_printk>
    38b4:	f06f 0415 	mvn.w	r4, #21

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    38b8:	4620      	mov	r0, r4
    38ba:	b005      	add	sp, #20
    38bc:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    38be:	4669      	mov	r1, sp
    38c0:	f7ff ffc2 	bl	3848 <region_init>
	return region_allocate_and_init(index,
    38c4:	e7f8      	b.n	38b8 <mpu_configure_region+0x3c>
    38c6:	bf00      	nop
    38c8:	0000a0d1 	.word	0x0000a0d1

000038cc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    38cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38d0:	4689      	mov	r9, r1
    38d2:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    38d4:	4606      	mov	r6, r0
    38d6:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    38da:	4d54      	ldr	r5, [pc, #336]	; (3a2c <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    38dc:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    38de:	45c8      	cmp	r8, r9
    38e0:	da27      	bge.n	3932 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    38e2:	f8d6 a004 	ldr.w	sl, [r6, #4]
    38e6:	f1ba 0f00 	cmp.w	sl, #0
    38ea:	d045      	beq.n	3978 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    38ec:	f1ba 0f1f 	cmp.w	sl, #31
    38f0:	d918      	bls.n	3924 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    38f2:	f01a 0f1f 	tst.w	sl, #31
    38f6:	d115      	bne.n	3924 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    38f8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    38fc:	f01b 0f1f 	tst.w	fp, #31
    3900:	d110      	bne.n	3924 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3902:	4658      	mov	r0, fp
    3904:	f004 fcac 	bl	8260 <arm_cmse_mpu_region_get>
    3908:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    390a:	eb0a 000b 	add.w	r0, sl, fp
    390e:	3801      	subs	r0, #1
    3910:	f004 fca6 	bl	8260 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    3914:	4287      	cmp	r7, r0
    3916:	d010      	beq.n	393a <mpu_configure_regions_and_partition.constprop.0+0x6e>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    3918:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    391c:	463a      	mov	r2, r7
    391e:	2145      	movs	r1, #69	; 0x45
    3920:	4843      	ldr	r0, [pc, #268]	; (3a30 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    3922:	e002      	b.n	392a <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3924:	4642      	mov	r2, r8
    3926:	2145      	movs	r1, #69	; 0x45
    3928:	4842      	ldr	r0, [pc, #264]	; (3a34 <mpu_configure_regions_and_partition.constprop.0+0x168>)
			LOG_ERR("Invalid underlying region index %u",
    392a:	f004 f8cd 	bl	7ac8 <z_log_minimal_printk>
			return -EINVAL;
    392e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    3932:	4620      	mov	r0, r4
    3934:	b005      	add	sp, #20
    3936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    393a:	f117 0f16 	cmn.w	r7, #22
    393e:	d0ed      	beq.n	391c <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    3940:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    3942:	42bb      	cmp	r3, r7
    3944:	dbea      	blt.n	391c <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    3946:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    394a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    394e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3952:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    3956:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    395a:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    395e:	e9d6 3200 	ldrd	r3, r2, [r6]
    3962:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    3964:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    3966:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    396a:	d11d      	bne.n	39a8 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    396c:	45d3      	cmp	fp, sl
    396e:	d107      	bne.n	3980 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    3970:	4631      	mov	r1, r6
    3972:	b2f8      	uxtb	r0, r7
    3974:	f7ff ff82 	bl	387c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    3978:	f108 0801 	add.w	r8, r8, #1
    397c:	360c      	adds	r6, #12
    397e:	e7ae      	b.n	38de <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    3980:	4631      	mov	r1, r6
	MPU->RNR = index;
    3982:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3986:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    398a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    398e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    3992:	4313      	orrs	r3, r2
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3994:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    3998:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    399a:	f7ff ff6f 	bl	387c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    399e:	f110 0f16 	cmn.w	r0, #22
    39a2:	d0c4      	beq.n	392e <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    39a4:	1c44      	adds	r4, r0, #1
    39a6:	e7e7      	b.n	3978 <mpu_configure_regions_and_partition.constprop.0+0xac>
	MPU->RNR = index;
    39a8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    39ac:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    39b0:	3b01      	subs	r3, #1
		| (limit & MPU_RLAR_LIMIT_Msk);
    39b2:	f023 031f 	bic.w	r3, r3, #31
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    39b6:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    39ba:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    39bc:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    39be:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    39c0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    39c2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    39c6:	d0e8      	beq.n	399a <mpu_configure_regions_and_partition.constprop.0+0xce>
				mpu_configure_region(reg_index, &regions[i]);
    39c8:	f7ff ff58 	bl	387c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    39cc:	f110 0f16 	cmn.w	r0, #22
    39d0:	d0ad      	beq.n	392e <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    39d2:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    39d6:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    39da:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    39de:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    39e2:	f362 0304 	bfi	r3, r2, #0, #5
    39e6:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    39ea:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    39ee:	f89d 2008 	ldrb.w	r2, [sp, #8]
    39f2:	085b      	lsrs	r3, r3, #1
    39f4:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    39f8:	e9d6 3100 	ldrd	r3, r1, [r6]
    39fc:	440b      	add	r3, r1
    39fe:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    3a00:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    3a04:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    3a06:	445b      	add	r3, fp
    3a08:	eba3 030a 	sub.w	r3, r3, sl
    3a0c:	b2c0      	uxtb	r0, r0
    3a0e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    3a12:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    3a14:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    3a18:	9303      	str	r3, [sp, #12]
    3a1a:	d903      	bls.n	3a24 <mpu_configure_regions_and_partition.constprop.0+0x158>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3a1c:	4602      	mov	r2, r0
    3a1e:	2145      	movs	r1, #69	; 0x45
    3a20:	4805      	ldr	r0, [pc, #20]	; (3a38 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
    3a22:	e782      	b.n	392a <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    3a24:	4669      	mov	r1, sp
    3a26:	f7ff ff0f 	bl	3848 <region_init>
    3a2a:	e7bb      	b.n	39a4 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    3a2c:	e000ed00 	.word	0xe000ed00
    3a30:	0000a124 	.word	0x0000a124
    3a34:	0000a0fc 	.word	0x0000a0fc
    3a38:	0000a0d1 	.word	0x0000a0d1

00003a3c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3a3c:	2205      	movs	r2, #5
    3a3e:	4b04      	ldr	r3, [pc, #16]	; (3a50 <arm_core_mpu_enable+0x14>)
    3a40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a48:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop
    3a50:	e000ed00 	.word	0xe000ed00

00003a54 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3a54:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3a58:	2200      	movs	r2, #0
    3a5a:	4b02      	ldr	r3, [pc, #8]	; (3a64 <arm_core_mpu_disable+0x10>)
    3a5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3a60:	4770      	bx	lr
    3a62:	bf00      	nop
    3a64:	e000ed00 	.word	0xe000ed00

00003a68 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3a68:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3a6a:	4c03      	ldr	r4, [pc, #12]	; (3a78 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    3a6c:	7822      	ldrb	r2, [r4, #0]
    3a6e:	f7ff ff2d 	bl	38cc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3a72:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3a74:	bd10      	pop	{r4, pc}
    3a76:	bf00      	nop
    3a78:	20016ced 	.word	0x20016ced

00003a7c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    3a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a80:	4d29      	ldr	r5, [pc, #164]	; (3b28 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    3a82:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    3a84:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3a86:	f04f 0800 	mov.w	r8, #0
    3a8a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    3a8c:	4f27      	ldr	r7, [pc, #156]	; (3b2c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3a8e:	45d0      	cmp	r8, sl
    3a90:	da1b      	bge.n	3aca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    3a92:	f8d6 9004 	ldr.w	r9, [r6, #4]
    3a96:	f1b9 0f00 	cmp.w	r9, #0
    3a9a:	d03f      	beq.n	3b1c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    3a9c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3a9e:	4608      	mov	r0, r1
    3aa0:	9101      	str	r1, [sp, #4]
    3aa2:	f004 fbdd 	bl	8260 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    3aa6:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3aa8:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    3aaa:	eb09 0001 	add.w	r0, r9, r1
    3aae:	3801      	subs	r0, #1
    3ab0:	f004 fbd6 	bl	8260 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    3ab4:	4284      	cmp	r4, r0
    3ab6:	f04f 0214 	mov.w	r2, #20
    3aba:	4b1d      	ldr	r3, [pc, #116]	; (3b30 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    3abc:	d008      	beq.n	3ad0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    3abe:	fb02 f308 	mul.w	r3, r2, r8
    3ac2:	f06f 0215 	mvn.w	r2, #21
    3ac6:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    3aca:	b003      	add	sp, #12
    3acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    3ad0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    3ad4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    3ad6:	d0f8      	beq.n	3aca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    3ad8:	7819      	ldrb	r1, [r3, #0]
    3ada:	42a1      	cmp	r1, r4
    3adc:	ddf5      	ble.n	3aca <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    3ade:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    3ae2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    3ae6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    3aea:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    3aee:	f100 0108 	add.w	r1, r0, #8
    3af2:	7b00      	ldrb	r0, [r0, #12]
    3af4:	f364 0004 	bfi	r0, r4, #0, #5
    3af8:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    3afa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    3afe:	790c      	ldrb	r4, [r1, #4]
    3b00:	0840      	lsrs	r0, r0, #1
    3b02:	f360 1447 	bfi	r4, r0, #5, #3
    3b06:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    3b08:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    3b0c:	f021 011f 	bic.w	r1, r1, #31
    3b10:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    3b12:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    3b16:	f021 011f 	bic.w	r1, r1, #31
    3b1a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3b1c:	f108 0801 	add.w	r8, r8, #1
    3b20:	3514      	adds	r5, #20
    3b22:	360c      	adds	r6, #12
    3b24:	e7b3      	b.n	3a8e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    3b26:	bf00      	nop
    3b28:	20016658 	.word	0x20016658
    3b2c:	e000ed00 	.word	0xe000ed00
    3b30:	20016ced 	.word	0x20016ced

00003b34 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3b34:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3b36:	4d0e      	ldr	r5, [pc, #56]	; (3b70 <z_arm_mpu_init+0x3c>)
    3b38:	682c      	ldr	r4, [r5, #0]
    3b3a:	2c10      	cmp	r4, #16
    3b3c:	d815      	bhi.n	3b6a <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3b3e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    3b40:	f7ff ff88 	bl	3a54 <arm_core_mpu_disable>
	MPU->MAIR0 =
    3b44:	4b0b      	ldr	r3, [pc, #44]	; (3b74 <z_arm_mpu_init+0x40>)
    3b46:	4a0c      	ldr	r2, [pc, #48]	; (3b78 <z_arm_mpu_init+0x44>)
    3b48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3b4c:	4284      	cmp	r4, r0
    3b4e:	d105      	bne.n	3b5c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3b50:	4b0a      	ldr	r3, [pc, #40]	; (3b7c <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3b52:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    3b54:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    3b56:	f7ff ff71 	bl	3a3c <arm_core_mpu_enable>
}
    3b5a:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3b5c:	6869      	ldr	r1, [r5, #4]
    3b5e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    3b62:	f7ff fe71 	bl	3848 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3b66:	3001      	adds	r0, #1
    3b68:	e7f0      	b.n	3b4c <z_arm_mpu_init+0x18>
		return -1;
    3b6a:	f04f 30ff 	mov.w	r0, #4294967295
    3b6e:	e7f4      	b.n	3b5a <z_arm_mpu_init+0x26>
    3b70:	00009214 	.word	0x00009214
    3b74:	e000ed00 	.word	0xe000ed00
    3b78:	0044ffaa 	.word	0x0044ffaa
    3b7c:	20016ced 	.word	0x20016ced

00003b80 <board_circuitdojo_feather_nrf9160_init>:

#define GPIO0 DT_LABEL(DT_NODELABEL(gpio0))
#define POWER_LATCH_PIN 31

static int board_circuitdojo_feather_nrf9160_init(const struct device *dev)
{
    3b80:	b508      	push	{r3, lr}
    3b82:	480a      	ldr	r0, [pc, #40]	; (3bac <board_circuitdojo_feather_nrf9160_init+0x2c>)
    3b84:	f000 ff5c 	bl	4a40 <z_impl_device_get_binding>
	ARG_UNUSED(dev);

	/* Get the device binding */
	const struct device *gpio = device_get_binding(GPIO0);
	if (gpio == NULL) {
    3b88:	b160      	cbz	r0, 3ba4 <board_circuitdojo_feather_nrf9160_init+0x24>
	struct gpio_driver_data *data =
    3b8a:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    3b8c:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3b8e:	6813      	ldr	r3, [r2, #0]
    3b90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    3b94:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    3b96:	680b      	ldr	r3, [r1, #0]
    3b98:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    3b9c:	211f      	movs	r1, #31
    3b9e:	4798      	blx	r3
	}

	/* Configure latch pin as output. */
	gpio_pin_configure(gpio, POWER_LATCH_PIN, GPIO_OUTPUT_HIGH);

	return 0;
    3ba0:	2000      	movs	r0, #0
}
    3ba2:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3ba4:	f06f 0012 	mvn.w	r0, #18
    3ba8:	e7fb      	b.n	3ba2 <board_circuitdojo_feather_nrf9160_init+0x22>
    3baa:	bf00      	nop
    3bac:	00009498 	.word	0x00009498

00003bb0 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3bb0:	4a06      	ldr	r2, [pc, #24]	; (3bcc <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3bb2:	f000 001f 	and.w	r0, r0, #31
    3bb6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3bba:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    3bbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    3bc6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3bca:	4770      	bx	lr
    3bcc:	50842500 	.word	0x50842500

00003bd0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3bd0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    3bd2:	4b09      	ldr	r3, [pc, #36]	; (3bf8 <gpio_nrfx_init+0x28>)
    3bd4:	781a      	ldrb	r2, [r3, #0]
    3bd6:	b96a      	cbnz	r2, 3bf4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    3bd8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3bda:	200d      	movs	r0, #13
		gpio_initialized = true;
    3bdc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3bde:	2105      	movs	r1, #5
    3be0:	f7ff fa80 	bl	30e4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    3be4:	200d      	movs	r0, #13
    3be6:	f7ff fa61 	bl	30ac <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    3bea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3bee:	4b03      	ldr	r3, [pc, #12]	; (3bfc <gpio_nrfx_init+0x2c>)
    3bf0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    3bf4:	2000      	movs	r0, #0
    3bf6:	bd08      	pop	{r3, pc}
    3bf8:	20016cee 	.word	0x20016cee
    3bfc:	5000d000 	.word	0x5000d000

00003c00 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3c00:	4b28      	ldr	r3, [pc, #160]	; (3ca4 <gpio_nrfx_config+0xa4>)
{
    3c02:	b570      	push	{r4, r5, r6, lr}
	return port->config;
    3c04:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3c06:	4828      	ldr	r0, [pc, #160]	; (3ca8 <gpio_nrfx_config+0xa8>)
    3c08:	4013      	ands	r3, r2
    3c0a:	4283      	cmp	r3, r0
    3c0c:	d03b      	beq.n	3c86 <gpio_nrfx_config+0x86>
    3c0e:	d80d      	bhi.n	3c2c <gpio_nrfx_config+0x2c>
    3c10:	2b06      	cmp	r3, #6
    3c12:	d015      	beq.n	3c40 <gpio_nrfx_config+0x40>
    3c14:	d805      	bhi.n	3c22 <gpio_nrfx_config+0x22>
    3c16:	b19b      	cbz	r3, 3c40 <gpio_nrfx_config+0x40>
    3c18:	2b02      	cmp	r3, #2
    3c1a:	d036      	beq.n	3c8a <gpio_nrfx_config+0x8a>
    3c1c:	f06f 0015 	mvn.w	r0, #21
    3c20:	e030      	b.n	3c84 <gpio_nrfx_config+0x84>
    3c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3c26:	d1f9      	bne.n	3c1c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    3c28:	2301      	movs	r3, #1
    3c2a:	e009      	b.n	3c40 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3c2c:	481f      	ldr	r0, [pc, #124]	; (3cac <gpio_nrfx_config+0xac>)
    3c2e:	4283      	cmp	r3, r0
    3c30:	d02d      	beq.n	3c8e <gpio_nrfx_config+0x8e>
    3c32:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3c36:	d02c      	beq.n	3c92 <gpio_nrfx_config+0x92>
    3c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3c3c:	d1ee      	bne.n	3c1c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    3c3e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    3c40:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    3c42:	bf4c      	ite	mi
    3c44:	2503      	movmi	r5, #3
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    3c46:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    3c4a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    3c4e:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    3c52:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    3c56:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    3c5a:	d006      	beq.n	3c6a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    3c5c:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3c60:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    3c62:	d018      	beq.n	3c96 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
    3c64:	2201      	movs	r2, #1
    3c66:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    3c68:	60b2      	str	r2, [r6, #8]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3c6a:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
    3c6e:	2000      	movs	r0, #0
    3c70:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
    3c74:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
    3c78:	4a0d      	ldr	r2, [pc, #52]	; (3cb0 <gpio_nrfx_config+0xb0>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3c7a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3c7e:	3180      	adds	r1, #128	; 0x80
    3c80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3c84:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    3c86:	2307      	movs	r3, #7
    3c88:	e7da      	b.n	3c40 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    3c8a:	2304      	movs	r3, #4
    3c8c:	e7d8      	b.n	3c40 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    3c8e:	2305      	movs	r3, #5
    3c90:	e7d6      	b.n	3c40 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    3c92:	2303      	movs	r3, #3
    3c94:	e7d4      	b.n	3c40 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    3c96:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    3c98:	bf42      	ittt	mi
    3c9a:	2201      	movmi	r2, #1
    3c9c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    3c9e:	60f2      	strmi	r2, [r6, #12]
}
    3ca0:	e7e3      	b.n	3c6a <gpio_nrfx_config+0x6a>
    3ca2:	bf00      	nop
    3ca4:	00f00006 	.word	0x00f00006
    3ca8:	00100006 	.word	0x00100006
    3cac:	00400002 	.word	0x00400002
    3cb0:	50842500 	.word	0x50842500

00003cb4 <gpio_nrfx_pin_interrupt_configure>:
{
    3cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3cb6:	461f      	mov	r7, r3
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3cb8:	6843      	ldr	r3, [r0, #4]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    3cba:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3cbe:	7a1d      	ldrb	r5, [r3, #8]
	return port->data;
    3cc0:	6904      	ldr	r4, [r0, #16]
{
    3cc2:	460e      	mov	r6, r1
    3cc4:	4694      	mov	ip, r2
    3cc6:	f001 001f 	and.w	r0, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    3cca:	ea4f 1545 	mov.w	r5, r5, lsl #5
    3cce:	d11e      	bne.n	3d0e <gpio_nrfx_pin_interrupt_configure+0x5a>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3cd0:	4a5d      	ldr	r2, [pc, #372]	; (3e48 <gpio_nrfx_pin_interrupt_configure+0x194>)
    3cd2:	f100 0380 	add.w	r3, r0, #128	; 0x80
    3cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3cda:	07db      	lsls	r3, r3, #31
    3cdc:	f100 80b1 	bmi.w	3e42 <gpio_nrfx_pin_interrupt_configure+0x18e>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3ce0:	2201      	movs	r2, #1
    3ce2:	68e3      	ldr	r3, [r4, #12]
    3ce4:	408a      	lsls	r2, r1
    3ce6:	4313      	orrs	r3, r2
    3ce8:	60e3      	str	r3, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3cea:	6963      	ldr	r3, [r4, #20]
    3cec:	4313      	orrs	r3, r2
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3cee:	2201      	movs	r2, #1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3cf0:	f5b7 2fc0 	cmp.w	r7, #393216	; 0x60000
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3cf4:	fa02 f206 	lsl.w	r2, r2, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3cf8:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3cfa:	ea6f 0c02 	mvn.w	ip, r2
    3cfe:	69a1      	ldr	r1, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3d00:	6923      	ldr	r3, [r4, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3d02:	d112      	bne.n	3d2a <gpio_nrfx_pin_interrupt_configure+0x76>
    3d04:	430a      	orrs	r2, r1
    3d06:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3d08:	ea0c 0303 	and.w	r3, ip, r3
    3d0c:	e014      	b.n	3d38 <gpio_nrfx_pin_interrupt_configure+0x84>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3d0e:	2301      	movs	r3, #1
    3d10:	408b      	lsls	r3, r1
    3d12:	43d9      	mvns	r1, r3
    3d14:	68e2      	ldr	r2, [r4, #12]
    3d16:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
    3d1a:	bf18      	it	ne
    3d1c:	431a      	orrne	r2, r3
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3d1e:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3d20:	bf08      	it	eq
    3d22:	400a      	andeq	r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3d24:	60e2      	str	r2, [r4, #12]
    3d26:	400b      	ands	r3, r1
    3d28:	e7e1      	b.n	3cee <gpio_nrfx_pin_interrupt_configure+0x3a>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3d2a:	ea0c 0101 	and.w	r1, ip, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3d2e:	f5b7 2f80 	cmp.w	r7, #262144	; 0x40000
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    3d32:	61a1      	str	r1, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3d34:	d1e8      	bne.n	3d08 <gpio_nrfx_pin_interrupt_configure+0x54>
    3d36:	4313      	orrs	r3, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3d38:	4305      	orrs	r5, r0
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3d3a:	2000      	movs	r0, #0
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3d3c:	6123      	str	r3, [r4, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    3d3e:	4b43      	ldr	r3, [pc, #268]	; (3e4c <gpio_nrfx_pin_interrupt_configure+0x198>)
    3d40:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    3d44:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3d46:	0083      	lsls	r3, r0, #2
    3d48:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3d4c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3d50:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    3d54:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    3d58:	428d      	cmp	r5, r1
    3d5a:	d15f      	bne.n	3e1c <gpio_nrfx_pin_interrupt_configure+0x168>
		    && (intenset & BIT(i))) {
    3d5c:	fa22 f100 	lsr.w	r1, r2, r0
    3d60:	07cf      	lsls	r7, r1, #31
    3d62:	d55b      	bpl.n	3e1c <gpio_nrfx_pin_interrupt_configure+0x168>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3d64:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3d68:	f022 0201 	bic.w	r2, r2, #1
    3d6c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    3d70:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    3d72:	4a36      	ldr	r2, [pc, #216]	; (3e4c <gpio_nrfx_pin_interrupt_configure+0x198>)
    3d74:	4083      	lsls	r3, r0
    3d76:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    3d7a:	b2c0      	uxtb	r0, r0
    3d7c:	f000 fdac 	bl	48d8 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    3d80:	2100      	movs	r1, #0
    3d82:	4628      	mov	r0, r5
    3d84:	f7ff ff14 	bl	3bb0 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    3d88:	68e3      	ldr	r3, [r4, #12]
    3d8a:	40f3      	lsrs	r3, r6
    3d8c:	07d9      	lsls	r1, r3, #31
    3d8e:	d556      	bpl.n	3e3e <gpio_nrfx_pin_interrupt_configure+0x18a>
		if (data->trig_edge & BIT(pin)) {
    3d90:	6963      	ldr	r3, [r4, #20]
    3d92:	40f3      	lsrs	r3, r6
    3d94:	07da      	lsls	r2, r3, #31
    3d96:	d548      	bpl.n	3e2a <gpio_nrfx_pin_interrupt_configure+0x176>
				if (data->double_edge & BIT(pin)) {
    3d98:	69a3      	ldr	r3, [r4, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    3d9a:	f10d 0007 	add.w	r0, sp, #7
				if (data->double_edge & BIT(pin)) {
    3d9e:	40f3      	lsrs	r3, r6
    3da0:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    3da2:	bf57      	itett	pl
    3da4:	6924      	ldrpl	r4, [r4, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    3da6:	2403      	movmi	r4, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    3da8:	40f4      	lsrpl	r4, r6
    3daa:	f004 0401 	andpl.w	r4, r4, #1
    3dae:	bf5c      	itt	pl
    3db0:	f1c4 0402 	rsbpl	r4, r4, #2
    3db4:	b2e4      	uxtbpl	r4, r4
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    3db6:	f000 fdaf 	bl	4918 <nrfx_gpiote_channel_alloc>
    3dba:	4b25      	ldr	r3, [pc, #148]	; (3e50 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    3dbc:	4298      	cmp	r0, r3
    3dbe:	d131      	bne.n	3e24 <gpio_nrfx_pin_interrupt_configure+0x170>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3dc0:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    3dc2:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3dc6:	022d      	lsls	r5, r5, #8
    3dc8:	008b      	lsls	r3, r1, #2
    3dca:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3dce:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3dd2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3dd6:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3dda:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    3dde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    3de2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3de6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3dea:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    3dec:	008a      	lsls	r2, r1, #2
    3dee:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    3df2:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3df6:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    3dfa:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3dfe:	6010      	str	r0, [r2, #0]
    3e00:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3e02:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3e06:	f042 0201 	orr.w	r2, r2, #1
    3e0a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    3e0e:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    3e10:	4a0e      	ldr	r2, [pc, #56]	; (3e4c <gpio_nrfx_pin_interrupt_configure+0x198>)
    3e12:	408b      	lsls	r3, r1
    3e14:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3e18:	b003      	add	sp, #12
    3e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3e1c:	3001      	adds	r0, #1
    3e1e:	2808      	cmp	r0, #8
    3e20:	d191      	bne.n	3d46 <gpio_nrfx_pin_interrupt_configure+0x92>
    3e22:	e7ad      	b.n	3d80 <gpio_nrfx_pin_interrupt_configure+0xcc>
		return -ENODEV;
    3e24:	f06f 0012 	mvn.w	r0, #18
    3e28:	e7f6      	b.n	3e18 <gpio_nrfx_pin_interrupt_configure+0x164>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3e2a:	6921      	ldr	r1, [r4, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3e2c:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3e2e:	40f1      	lsrs	r1, r6
    3e30:	f001 0101 	and.w	r1, r1, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3e34:	f1c1 0103 	rsb	r1, r1, #3
    3e38:	b2c9      	uxtb	r1, r1
    3e3a:	f7ff feb9 	bl	3bb0 <nrf_gpio_cfg_sense_set>
	int res = 0;
    3e3e:	2000      	movs	r0, #0
    3e40:	e7ea      	b.n	3e18 <gpio_nrfx_pin_interrupt_configure+0x164>
		return -ENOTSUP;
    3e42:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e46:	e7e7      	b.n	3e18 <gpio_nrfx_pin_interrupt_configure+0x164>
    3e48:	50842500 	.word	0x50842500
    3e4c:	5000d000 	.word	0x5000d000
    3e50:	0bad0000 	.word	0x0bad0000

00003e54 <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e54:	4b45      	ldr	r3, [pc, #276]	; (3f6c <gpiote_event_handler+0x118>)
{
    3e56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e5a:	f8d3 617c 	ldr.w	r6, [r3, #380]	; 0x17c
	if (port_event) {
    3e5e:	2e00      	cmp	r6, #0
    3e60:	d05a      	beq.n	3f18 <gpiote_event_handler+0xc4>
	uint32_t out = data->pin_int_en;
    3e62:	4b43      	ldr	r3, [pc, #268]	; (3f70 <gpiote_event_handler+0x11c>)
	uint32_t bit = 1U << pin;
    3e64:	2701      	movs	r7, #1
	out &= ~data->trig_edge & ~data->double_edge;
    3e66:	e9d3 2005 	ldrd	r2, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
    3e6a:	68d9      	ldr	r1, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    3e6c:	4302      	orrs	r2, r0
    3e6e:	ea21 0802 	bic.w	r8, r1, r2
	uint32_t check_pins = level_pins;
    3e72:	4645      	mov	r5, r8
	uint32_t pin = 0U;
    3e74:	f04f 0900 	mov.w	r9, #0
    return p_reg->IN;
    3e78:	f8df a100 	ldr.w	sl, [pc, #256]	; 3f7c <gpiote_event_handler+0x128>
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    3e7c:	691b      	ldr	r3, [r3, #16]
    3e7e:	f8da 4010 	ldr.w	r4, [sl, #16]
    3e82:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    3e84:	ea28 0404 	bic.w	r4, r8, r4
	while (check_pins) {
    3e88:	bb85      	cbnz	r5, 3eec <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e8a:	4b38      	ldr	r3, [pc, #224]	; (3f6c <gpiote_event_handler+0x118>)
    3e8c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3e90:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3e94:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    3e96:	2501      	movs	r5, #1
    3e98:	461f      	mov	r7, r3
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3e9a:	4a36      	ldr	r2, [pc, #216]	; (3f74 <gpiote_event_handler+0x120>)
    return p_reg->INTENSET & mask;
    3e9c:	4833      	ldr	r0, [pc, #204]	; (3f6c <gpiote_event_handler+0x118>)
    3e9e:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    3ea2:	fa05 fc03 	lsl.w	ip, r5, r3
    3ea6:	ea1c 0f01 	tst.w	ip, r1
    3eaa:	d00c      	beq.n	3ec6 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3eac:	6811      	ldr	r1, [r2, #0]
    3eae:	b151      	cbz	r1, 3ec6 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3eb0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    3eb4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3eb8:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3eba:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    3ebe:	fa05 f101 	lsl.w	r1, r5, r1
    3ec2:	430c      	orrs	r4, r1
    3ec4:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3ec6:	3301      	adds	r3, #1
    3ec8:	2b08      	cmp	r3, #8
    3eca:	f102 0204 	add.w	r2, r2, #4
    3ece:	d1e6      	bne.n	3e9e <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    3ed0:	bb24      	cbnz	r4, 3f1c <gpiote_event_handler+0xc8>
	if (port_event) {
    3ed2:	b14e      	cbz	r6, 3ee8 <gpiote_event_handler+0x94>
	uint32_t bit = 1U << pin;
    3ed4:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    3ed6:	2600      	movs	r6, #0
	uint32_t out = data->pin_int_en;
    3ed8:	4f25      	ldr	r7, [pc, #148]	; (3f70 <gpiote_event_handler+0x11c>)
    3eda:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    3edc:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    3ee0:	4313      	orrs	r3, r2
    3ee2:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    3ee6:	bb74      	cbnz	r4, 3f46 <gpiote_event_handler+0xf2>
}
    3ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (check_pins & bit) {
    3eec:	422f      	tst	r7, r5
    3eee:	d00f      	beq.n	3f10 <gpiote_event_handler+0xbc>
			if (!(level_pins & bit)) {
    3ef0:	ea17 0f08 	tst.w	r7, r8
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3ef4:	f009 001f 	and.w	r0, r9, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3ef8:	bf08      	it	eq
    3efa:	f100 0380 	addeq.w	r3, r0, #128	; 0x80
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    3efe:	f04f 0100 	mov.w	r1, #0
    3f02:	bf08      	it	eq
    3f04:	f85a 3023 	ldreq.w	r3, [sl, r3, lsl #2]
    3f08:	f7ff fe52 	bl	3bb0 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    3f0c:	ea25 0507 	bic.w	r5, r5, r7
		++pin;
    3f10:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    3f14:	007f      	lsls	r7, r7, #1
    3f16:	e7b7      	b.n	3e88 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3f18:	4634      	mov	r4, r6
    3f1a:	e7bb      	b.n	3e94 <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
    3f1c:	4b14      	ldr	r3, [pc, #80]	; (3f70 <gpiote_event_handler+0x11c>)
    3f1e:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3f20:	2900      	cmp	r1, #0
    3f22:	d0d6      	beq.n	3ed2 <gpiote_event_handler+0x7e>
	return node->next;
    3f24:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3f26:	4f14      	ldr	r7, [pc, #80]	; (3f78 <gpiote_event_handler+0x124>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3f28:	2900      	cmp	r1, #0
    3f2a:	d0d2      	beq.n	3ed2 <gpiote_event_handler+0x7e>
		if (cb->pin_mask & pins) {
    3f2c:	688a      	ldr	r2, [r1, #8]
    3f2e:	4022      	ands	r2, r4
    3f30:	d002      	beq.n	3f38 <gpiote_event_handler+0xe4>
			cb->handler(port, cb, cb->pin_mask & pins);
    3f32:	4638      	mov	r0, r7
    3f34:	684b      	ldr	r3, [r1, #4]
    3f36:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3f38:	b11d      	cbz	r5, 3f42 <gpiote_event_handler+0xee>
    3f3a:	682b      	ldr	r3, [r5, #0]
    3f3c:	4629      	mov	r1, r5
    3f3e:	461d      	mov	r5, r3
    3f40:	e7f2      	b.n	3f28 <gpiote_event_handler+0xd4>
    3f42:	462b      	mov	r3, r5
    3f44:	e7fa      	b.n	3f3c <gpiote_event_handler+0xe8>
		if (level_pins & bit) {
    3f46:	4225      	tst	r5, r4
    3f48:	d00c      	beq.n	3f64 <gpiote_event_handler+0x110>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3f4a:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3f4c:	f006 001f 	and.w	r0, r6, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3f50:	40f1      	lsrs	r1, r6
    3f52:	f001 0101 	and.w	r1, r1, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3f56:	f1c1 0103 	rsb	r1, r1, #3
    3f5a:	b2c9      	uxtb	r1, r1
    3f5c:	f7ff fe28 	bl	3bb0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3f60:	ea24 0405 	bic.w	r4, r4, r5
		++pin;
    3f64:	3601      	adds	r6, #1
		bit <<= 1;
    3f66:	006d      	lsls	r5, r5, #1
    3f68:	e7bd      	b.n	3ee6 <gpiote_event_handler+0x92>
    3f6a:	bf00      	nop
    3f6c:	5000d000 	.word	0x5000d000
    3f70:	20016670 	.word	0x20016670
    3f74:	5000d100 	.word	0x5000d100
    3f78:	00008ddc 	.word	0x00008ddc
    3f7c:	50842500 	.word	0x50842500

00003f80 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3f80:	4b02      	ldr	r3, [pc, #8]	; (3f8c <flash_nrf_pages_layout+0xc>)
    3f82:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3f84:	2301      	movs	r3, #1
    3f86:	6013      	str	r3, [r2, #0]
}
    3f88:	4770      	bx	lr
    3f8a:	bf00      	nop
    3f8c:	20016690 	.word	0x20016690

00003f90 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    3f90:	4800      	ldr	r0, [pc, #0]	; (3f94 <flash_nrf_get_parameters+0x4>)
    3f92:	4770      	bx	lr
    3f94:	00009284 	.word	0x00009284

00003f98 <flash_nrf_read>:
{
    3f98:	b570      	push	{r4, r5, r6, lr}
    3f9a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    3f9c:	4619      	mov	r1, r3
    3f9e:	4628      	mov	r0, r5
{
    3fa0:	4616      	mov	r6, r2
    3fa2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3fa4:	f004 f9fd 	bl	83a2 <is_regular_addr_valid>
    3fa8:	b940      	cbnz	r0, 3fbc <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3faa:	4808      	ldr	r0, [pc, #32]	; (3fcc <flash_nrf_read+0x34>)
    3fac:	4623      	mov	r3, r4
    3fae:	462a      	mov	r2, r5
    3fb0:	2145      	movs	r1, #69	; 0x45
    3fb2:	f003 fd89 	bl	7ac8 <z_log_minimal_printk>
    3fb6:	f06f 0015 	mvn.w	r0, #21
}
    3fba:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    3fbc:	b124      	cbz	r4, 3fc8 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
    3fbe:	4622      	mov	r2, r4
    3fc0:	4629      	mov	r1, r5
    3fc2:	4630      	mov	r0, r6
    3fc4:	f004 f98f 	bl	82e6 <memcpy>
		return 0;
    3fc8:	2000      	movs	r0, #0
    3fca:	e7f6      	b.n	3fba <flash_nrf_read+0x22>
    3fcc:	0000a15b 	.word	0x0000a15b

00003fd0 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    3fd0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    3fd2:	2201      	movs	r2, #1
    3fd4:	4806      	ldr	r0, [pc, #24]	; (3ff0 <nrf_flash_init+0x20>)
    3fd6:	4611      	mov	r1, r2
    3fd8:	f004 fd79 	bl	8ace <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    3fdc:	f004 fd07 	bl	89ee <nrfx_nvmc_flash_page_count_get>
    3fe0:	4c04      	ldr	r4, [pc, #16]	; (3ff4 <nrf_flash_init+0x24>)
    3fe2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    3fe4:	f004 fd00 	bl	89e8 <nrfx_nvmc_flash_page_size_get>
    3fe8:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    3fea:	2000      	movs	r0, #0
    3fec:	bd10      	pop	{r4, pc}
    3fee:	bf00      	nop
    3ff0:	20016698 	.word	0x20016698
    3ff4:	20016690 	.word	0x20016690

00003ff8 <flash_nrf_erase>:
{
    3ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ffa:	460e      	mov	r6, r1
    3ffc:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3ffe:	f004 fcf3 	bl	89e8 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    4002:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    4004:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    4006:	4630      	mov	r0, r6
    4008:	f004 f9cb 	bl	83a2 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    400c:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    400e:	b350      	cbz	r0, 4066 <flash_nrf_erase+0x6e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    4010:	fbb6 f3f5 	udiv	r3, r6, r5
    4014:	fb05 6313 	mls	r3, r5, r3, r6
    4018:	b923      	cbnz	r3, 4024 <flash_nrf_erase+0x2c>
    401a:	fbb4 f3f5 	udiv	r3, r4, r5
    401e:	fb05 4313 	mls	r3, r5, r3, r4
    4022:	b143      	cbz	r3, 4036 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    4024:	4623      	mov	r3, r4
    4026:	4632      	mov	r2, r6
    4028:	2145      	movs	r1, #69	; 0x45
    402a:	4811      	ldr	r0, [pc, #68]	; (4070 <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    402c:	f003 fd4c 	bl	7ac8 <z_log_minimal_printk>
			return -EINVAL;
    4030:	f06f 0015 	mvn.w	r0, #21
    4034:	e002      	b.n	403c <flash_nrf_erase+0x44>
		if (!n_pages) {
    4036:	42a5      	cmp	r5, r4
    4038:	d901      	bls.n	403e <flash_nrf_erase+0x46>
			return 0;
    403a:	2000      	movs	r0, #0
}
    403c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
    403e:	f04f 32ff 	mov.w	r2, #4294967295
    4042:	f04f 33ff 	mov.w	r3, #4294967295
    4046:	480b      	ldr	r0, [pc, #44]	; (4074 <flash_nrf_erase+0x7c>)
    4048:	f000 ffe8 	bl	501c <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    404c:	f004 fccc 	bl	89e8 <nrfx_nvmc_flash_page_size_get>
    4050:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    4052:	4638      	mov	r0, r7
    4054:	f000 fca6 	bl	49a4 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    4058:	1b64      	subs	r4, r4, r5
    405a:	442f      	add	r7, r5
    405c:	d1f9      	bne.n	4052 <flash_nrf_erase+0x5a>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    405e:	4805      	ldr	r0, [pc, #20]	; (4074 <flash_nrf_erase+0x7c>)
    4060:	f000 ffbc 	bl	4fdc <z_impl_k_sem_give>
}
    4064:	e7e9      	b.n	403a <flash_nrf_erase+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    4066:	4623      	mov	r3, r4
    4068:	4632      	mov	r2, r6
    406a:	2145      	movs	r1, #69	; 0x45
    406c:	4802      	ldr	r0, [pc, #8]	; (4078 <flash_nrf_erase+0x80>)
    406e:	e7dd      	b.n	402c <flash_nrf_erase+0x34>
    4070:	0000a17d 	.word	0x0000a17d
    4074:	20016698 	.word	0x20016698
    4078:	0000a15b 	.word	0x0000a15b

0000407c <flash_nrf_write>:
{
    407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    407e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    4080:	4619      	mov	r1, r3
    4082:	4630      	mov	r0, r6
{
    4084:	4617      	mov	r7, r2
    4086:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    4088:	f004 f98b 	bl	83a2 <is_regular_addr_valid>
    408c:	b940      	cbnz	r0, 40a0 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    408e:	4623      	mov	r3, r4
    4090:	4632      	mov	r2, r6
    4092:	2145      	movs	r1, #69	; 0x45
    4094:	4816      	ldr	r0, [pc, #88]	; (40f0 <flash_nrf_write+0x74>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    4096:	f003 fd17 	bl	7ac8 <z_log_minimal_printk>
		return -EINVAL;
    409a:	f06f 0015 	mvn.w	r0, #21
}
    409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    40a0:	ea46 0504 	orr.w	r5, r6, r4
    40a4:	f015 0503 	ands.w	r5, r5, #3
    40a8:	d004      	beq.n	40b4 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    40aa:	4623      	mov	r3, r4
    40ac:	4632      	mov	r2, r6
    40ae:	2145      	movs	r1, #69	; 0x45
    40b0:	4810      	ldr	r0, [pc, #64]	; (40f4 <flash_nrf_write+0x78>)
    40b2:	e7f0      	b.n	4096 <flash_nrf_write+0x1a>
	if (!len) {
    40b4:	b1a4      	cbz	r4, 40e0 <flash_nrf_write+0x64>
	return z_impl_k_sem_take(sem, timeout);
    40b6:	f04f 32ff 	mov.w	r2, #4294967295
    40ba:	f04f 33ff 	mov.w	r3, #4294967295
    40be:	480e      	ldr	r0, [pc, #56]	; (40f8 <flash_nrf_write+0x7c>)
    40c0:	f000 ffac 	bl	501c <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    40c4:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    40c8:	42ac      	cmp	r4, r5
    40ca:	eb06 0005 	add.w	r0, r6, r5
    40ce:	d109      	bne.n	40e4 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    40d0:	4a0a      	ldr	r2, [pc, #40]	; (40fc <flash_nrf_write+0x80>)
    40d2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    40d6:	07db      	lsls	r3, r3, #31
    40d8:	d5fb      	bpl.n	40d2 <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
    40da:	4807      	ldr	r0, [pc, #28]	; (40f8 <flash_nrf_write+0x7c>)
    40dc:	f000 ff7e 	bl	4fdc <z_impl_k_sem_give>
	return ret;
    40e0:	2000      	movs	r0, #0
    40e2:	e7dc      	b.n	409e <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    40e4:	5979      	ldr	r1, [r7, r5]
    40e6:	f000 fc7b 	bl	49e0 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    40ea:	3504      	adds	r5, #4
}
    40ec:	e7ec      	b.n	40c8 <flash_nrf_write+0x4c>
    40ee:	bf00      	nop
    40f0:	0000a15b 	.word	0x0000a15b
    40f4:	0000a1a1 	.word	0x0000a1a1
    40f8:	20016698 	.word	0x20016698
    40fc:	50039000 	.word	0x50039000

00004100 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    4100:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    4102:	794b      	ldrb	r3, [r1, #5]
    4104:	2b01      	cmp	r3, #1
    4106:	d02a      	beq.n	415e <uarte_nrfx_configure+0x5e>
    4108:	2b03      	cmp	r3, #3
    410a:	d125      	bne.n	4158 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    410c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    410e:	798b      	ldrb	r3, [r1, #6]
    4110:	2b03      	cmp	r3, #3
    4112:	d121      	bne.n	4158 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    4114:	79cc      	ldrb	r4, [r1, #7]
    4116:	b12c      	cbz	r4, 4124 <uarte_nrfx_configure+0x24>
    4118:	2c01      	cmp	r4, #1
    411a:	d11d      	bne.n	4158 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    411c:	6843      	ldr	r3, [r0, #4]
    411e:	685b      	ldr	r3, [r3, #4]
    4120:	079b      	lsls	r3, r3, #30
    4122:	d019      	beq.n	4158 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    4124:	790a      	ldrb	r2, [r1, #4]
    4126:	b112      	cbz	r2, 412e <uarte_nrfx_configure+0x2e>
    4128:	2a02      	cmp	r2, #2
    412a:	d115      	bne.n	4158 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    412c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    412e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    4130:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    4132:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4136:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    4138:	d065      	beq.n	4206 <uarte_nrfx_configure+0x106>
    413a:	d82d      	bhi.n	4198 <uarte_nrfx_configure+0x98>
    413c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    4140:	d064      	beq.n	420c <uarte_nrfx_configure+0x10c>
    4142:	d816      	bhi.n	4172 <uarte_nrfx_configure+0x72>
    4144:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4148:	d062      	beq.n	4210 <uarte_nrfx_configure+0x110>
    414a:	d80a      	bhi.n	4162 <uarte_nrfx_configure+0x62>
    414c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    4150:	d061      	beq.n	4216 <uarte_nrfx_configure+0x116>
    4152:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4156:	d061      	beq.n	421c <uarte_nrfx_configure+0x11c>
		return -ENOTSUP;
    4158:	f06f 0085 	mvn.w	r0, #133	; 0x85
    415c:	e052      	b.n	4204 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    415e:	2600      	movs	r6, #0
    4160:	e7d5      	b.n	410e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    4162:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4166:	d05c      	beq.n	4222 <uarte_nrfx_configure+0x122>
    4168:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    416c:	d1f4      	bne.n	4158 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    416e:	4b37      	ldr	r3, [pc, #220]	; (424c <uarte_nrfx_configure+0x14c>)
    4170:	e03c      	b.n	41ec <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    4172:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4176:	d057      	beq.n	4228 <uarte_nrfx_configure+0x128>
    4178:	d807      	bhi.n	418a <uarte_nrfx_configure+0x8a>
    417a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    417e:	d055      	beq.n	422c <uarte_nrfx_configure+0x12c>
    4180:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4184:	d1e8      	bne.n	4158 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4186:	4b32      	ldr	r3, [pc, #200]	; (4250 <uarte_nrfx_configure+0x150>)
    4188:	e030      	b.n	41ec <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    418a:	f647 2712 	movw	r7, #31250	; 0x7a12
    418e:	42bb      	cmp	r3, r7
    4190:	d1e2      	bne.n	4158 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4192:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4196:	e029      	b.n	41ec <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    4198:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    419c:	d048      	beq.n	4230 <uarte_nrfx_configure+0x130>
    419e:	d813      	bhi.n	41c8 <uarte_nrfx_configure+0xc8>
    41a0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    41a4:	d047      	beq.n	4236 <uarte_nrfx_configure+0x136>
    41a6:	d809      	bhi.n	41bc <uarte_nrfx_configure+0xbc>
    41a8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    41ac:	42bb      	cmp	r3, r7
    41ae:	d044      	beq.n	423a <uarte_nrfx_configure+0x13a>
    41b0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    41b4:	d1d0      	bne.n	4158 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    41b6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    41ba:	e017      	b.n	41ec <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    41bc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    41c0:	d1ca      	bne.n	4158 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    41c2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    41c6:	e011      	b.n	41ec <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    41c8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    41cc:	d038      	beq.n	4240 <uarte_nrfx_configure+0x140>
    41ce:	d808      	bhi.n	41e2 <uarte_nrfx_configure+0xe2>
    41d0:	4f20      	ldr	r7, [pc, #128]	; (4254 <uarte_nrfx_configure+0x154>)
    41d2:	42bb      	cmp	r3, r7
    41d4:	d037      	beq.n	4246 <uarte_nrfx_configure+0x146>
    41d6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    41da:	d1bd      	bne.n	4158 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    41dc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    41e0:	e004      	b.n	41ec <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    41e2:	4f1d      	ldr	r7, [pc, #116]	; (4258 <uarte_nrfx_configure+0x158>)
    41e4:	42bb      	cmp	r3, r7
    41e6:	d1b7      	bne.n	4158 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    41e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    41ec:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    41f0:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    41f2:	4334      	orrs	r4, r6
    41f4:	4322      	orrs	r2, r4
    41f6:	3304      	adds	r3, #4
    41f8:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    41fa:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    41fe:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    4202:	2000      	movs	r0, #0
}
    4204:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4206:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    420a:	e7ef      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    420c:	4b13      	ldr	r3, [pc, #76]	; (425c <uarte_nrfx_configure+0x15c>)
    420e:	e7ed      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4210:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4214:	e7ea      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    4216:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    421a:	e7e7      	b.n	41ec <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    421c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4220:	e7e4      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4222:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4226:	e7e1      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4228:	4b0d      	ldr	r3, [pc, #52]	; (4260 <uarte_nrfx_configure+0x160>)
    422a:	e7df      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    422c:	4b0d      	ldr	r3, [pc, #52]	; (4264 <uarte_nrfx_configure+0x164>)
    422e:	e7dd      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4230:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4234:	e7da      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4236:	4b0c      	ldr	r3, [pc, #48]	; (4268 <uarte_nrfx_configure+0x168>)
    4238:	e7d8      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    423a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    423e:	e7d5      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4240:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4244:	e7d2      	b.n	41ec <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4246:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    424a:	e7cf      	b.n	41ec <uarte_nrfx_configure+0xec>
    424c:	0013b000 	.word	0x0013b000
    4250:	004ea000 	.word	0x004ea000
    4254:	0003d090 	.word	0x0003d090
    4258:	000f4240 	.word	0x000f4240
    425c:	00275000 	.word	0x00275000
    4260:	0075c000 	.word	0x0075c000
    4264:	003af000 	.word	0x003af000
    4268:	013a9000 	.word	0x013a9000

0000426c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    426e:	4605      	mov	r5, r0
    4270:	460f      	mov	r7, r1
	return dev->data;
    4272:	6906      	ldr	r6, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4274:	f004 fc0d 	bl	8a92 <k_is_in_isr>
    4278:	b9b0      	cbnz	r0, 42a8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    427a:	4b20      	ldr	r3, [pc, #128]	; (42fc <uarte_nrfx_poll_out+0x90>)
    427c:	781b      	ldrb	r3, [r3, #0]
    427e:	b19b      	cbz	r3, 42a8 <uarte_nrfx_poll_out+0x3c>
{
    4280:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    4282:	6868      	ldr	r0, [r5, #4]
    4284:	f004 f9cf 	bl	8626 <is_tx_ready.isra.0>
    4288:	b9f8      	cbnz	r0, 42ca <uarte_nrfx_poll_out+0x5e>
    428a:	2001      	movs	r0, #1
    428c:	f004 fb34 	bl	88f8 <nrfx_busy_wait>
    4290:	3c01      	subs	r4, #1
    4292:	d1f6      	bne.n	4282 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    4294:	2100      	movs	r1, #0
    4296:	2021      	movs	r0, #33	; 0x21
    4298:	f001 f9ba 	bl	5610 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    429c:	e7f0      	b.n	4280 <uarte_nrfx_poll_out+0x14>
    429e:	f384 8811 	msr	BASEPRI, r4
    42a2:	f3bf 8f6f 	isb	sy
}
    42a6:	e7f5      	b.n	4294 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    42a8:	f04f 0320 	mov.w	r3, #32
    42ac:	f3ef 8411 	mrs	r4, BASEPRI
    42b0:	f383 8811 	msr	BASEPRI, r3
    42b4:	f3bf 8f6f 	isb	sy
	int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    42b8:	6868      	ldr	r0, [r5, #4]
    42ba:	f004 f9b4 	bl	8626 <is_tx_ready.isra.0>
    42be:	b988      	cbnz	r0, 42e4 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    42c0:	f384 8811 	msr	BASEPRI, r4
    42c4:	f3bf 8f6f 	isb	sy
}
    42c8:	e7ee      	b.n	42a8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    42ca:	f04f 0320 	mov.w	r3, #32
    42ce:	f3ef 8411 	mrs	r4, BASEPRI
    42d2:	f383 8811 	msr	BASEPRI, r3
    42d6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    42da:	6868      	ldr	r0, [r5, #4]
    42dc:	f004 f9a3 	bl	8626 <is_tx_ready.isra.0>
    42e0:	2800      	cmp	r0, #0
    42e2:	d0dc      	beq.n	429e <uarte_nrfx_poll_out+0x32>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    42e4:	4631      	mov	r1, r6
    42e6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    42ea:	2201      	movs	r2, #1
    42ec:	6868      	ldr	r0, [r5, #4]
    42ee:	f004 f97f 	bl	85f0 <tx_start.isra.0>
	__asm__ volatile(
    42f2:	f384 8811 	msr	BASEPRI, r4
    42f6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    42fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42fc:	20016d2f 	.word	0x20016d2f

00004300 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    4300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4304:	2300      	movs	r3, #0
	return dev->config;
    4306:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return dev->data;
    430a:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    430c:	f8d9 4000 	ldr.w	r4, [r9]
static int uarte_instance_init(const struct device *dev,
    4310:	460f      	mov	r7, r1
    4312:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    4316:	4606      	mov	r6, r0
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    4318:	6028      	str	r0, [r5, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    431a:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    431c:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    431e:	4b43      	ldr	r3, [pc, #268]	; (442c <uarte_instance_init.constprop.0+0x12c>)
    *p_pin = pin_number & 0x1F;
    4320:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4324:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    4326:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = cnf;
    4328:	2103      	movs	r1, #3
    432a:	3280      	adds	r2, #128	; 0x80
    432c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    4330:	687a      	ldr	r2, [r7, #4]
    4332:	1c51      	adds	r1, r2, #1
    4334:	bf1f      	itttt	ne
    4336:	f04f 0c0c 	movne.w	ip, #12
    *p_pin = pin_number & 0x1F;
    433a:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    433e:	3180      	addne	r1, #128	; 0x80
    4340:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    4344:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
    4346:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    434a:	1c48      	adds	r0, r1, #1
    434c:	bf18      	it	ne
    434e:	200c      	movne	r0, #12
    p_reg->PSEL.RXD = pselrxd;
    4350:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    4354:	bf1e      	ittt	ne
    4356:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
    435a:	3280      	addne	r2, #128	; 0x80
    435c:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    4360:	68f8      	ldr	r0, [r7, #12]
    4362:	1c42      	adds	r2, r0, #1
    4364:	d00c      	beq.n	4380 <uarte_instance_init.constprop.0+0x80>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4366:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    436a:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    436e:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    4372:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = cnf;
    4376:	f04f 0c03 	mov.w	ip, #3
    437a:	3280      	adds	r2, #128	; 0x80
    437c:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    4380:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    4384:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    4388:	4630      	mov	r0, r6
    438a:	1d29      	adds	r1, r5, #4
    438c:	f7ff feb8 	bl	4100 <uarte_nrfx_configure>
	if (err) {
    4390:	4680      	mov	r8, r0
    4392:	b980      	cbnz	r0, 43b6 <uarte_instance_init.constprop.0+0xb6>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4394:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    4398:	0719      	lsls	r1, r3, #28
    439a:	d51b      	bpl.n	43d4 <uarte_instance_init.constprop.0+0xd4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    439c:	f105 0016 	add.w	r0, r5, #22
    43a0:	f000 fa6e 	bl	4880 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    43a4:	4b22      	ldr	r3, [pc, #136]	; (4430 <uarte_instance_init.constprop.0+0x130>)
    43a6:	4298      	cmp	r0, r3
    43a8:	d008      	beq.n	43bc <uarte_instance_init.constprop.0+0xbc>
		LOG_ERR("Failed to allocate PPI Channel");
    43aa:	2145      	movs	r1, #69	; 0x45
    43ac:	4821      	ldr	r0, [pc, #132]	; (4434 <uarte_instance_init.constprop.0+0x134>)
    43ae:	f003 fb8b 	bl	7ac8 <z_log_minimal_printk>
		return -EIO;
    43b2:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    43b6:	4640      	mov	r0, r8
    43b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    43bc:	7daa      	ldrb	r2, [r5, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    43be:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    43c2:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    43c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    43ca:	2301      	movs	r3, #1
    43cc:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    43ce:	4a1a      	ldr	r2, [pc, #104]	; (4438 <uarte_instance_init.constprop.0+0x138>)
    43d0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    43d4:	2308      	movs	r3, #8
    43d6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    43da:	687b      	ldr	r3, [r7, #4]
    43dc:	3301      	adds	r3, #1
    43de:	d00c      	beq.n	43fa <uarte_instance_init.constprop.0+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43e0:	2300      	movs	r3, #0
    43e2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    43e6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    43ea:	f105 0315 	add.w	r3, r5, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    43ee:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    43f2:	2301      	movs	r3, #1
    43f4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43f8:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    43fa:	6873      	ldr	r3, [r6, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    43fc:	3514      	adds	r5, #20
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    43fe:	685b      	ldr	r3, [r3, #4]
    4400:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    4402:	bf5c      	itt	pl
    4404:	f44f 7280 	movpl.w	r2, #256	; 0x100
    4408:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    440c:	06db      	lsls	r3, r3, #27
    440e:	bf44      	itt	mi
    4410:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    4414:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    4418:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    441a:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    441e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4422:	2301      	movs	r3, #1
    4424:	60a3      	str	r3, [r4, #8]
    4426:	60e3      	str	r3, [r4, #12]
	return 0;
    4428:	e7c5      	b.n	43b6 <uarte_instance_init.constprop.0+0xb6>
    442a:	bf00      	nop
    442c:	50842500 	.word	0x50842500
    4430:	0bad0000 	.word	0x0bad0000
    4434:	0000a1ce 	.word	0x0000a1ce
    4438:	50017000 	.word	0x50017000

0000443c <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
    443c:	b530      	push	{r4, r5, lr}
    443e:	b085      	sub	sp, #20
    4440:	466c      	mov	r4, sp
    4442:	4605      	mov	r5, r0
    4444:	4b08      	ldr	r3, [pc, #32]	; (4468 <uarte_2_init+0x2c>)
    4446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    444c:	2200      	movs	r2, #0
    444e:	2101      	movs	r1, #1
    4450:	200a      	movs	r0, #10
    4452:	f7fe fe47 	bl	30e4 <z_arm_irq_priority_set>
    4456:	200a      	movs	r0, #10
    4458:	f7fe fe28 	bl	30ac <arch_irq_enable>
    445c:	4621      	mov	r1, r4
    445e:	4628      	mov	r0, r5
    4460:	f7ff ff4e 	bl	4300 <uarte_instance_init.constprop.0>
    4464:	b005      	add	sp, #20
    4466:	bd30      	pop	{r4, r5, pc}
    4468:	000090a8 	.word	0x000090a8

0000446c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    446c:	b530      	push	{r4, r5, lr}
    446e:	b085      	sub	sp, #20
    4470:	466c      	mov	r4, sp
    4472:	4605      	mov	r5, r0
    4474:	4b08      	ldr	r3, [pc, #32]	; (4498 <uarte_0_init+0x2c>)
    4476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    447c:	2200      	movs	r2, #0
    447e:	2101      	movs	r1, #1
    4480:	2008      	movs	r0, #8
    4482:	f7fe fe2f 	bl	30e4 <z_arm_irq_priority_set>
    4486:	2008      	movs	r0, #8
    4488:	f7fe fe10 	bl	30ac <arch_irq_enable>
    448c:	4621      	mov	r1, r4
    448e:	4628      	mov	r0, r5
    4490:	f7ff ff36 	bl	4300 <uarte_instance_init.constprop.0>
    4494:	b005      	add	sp, #20
    4496:	bd30      	pop	{r4, r5, pc}
    4498:	000090b8 	.word	0x000090b8

0000449c <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    449c:	ea40 0301 	orr.w	r3, r0, r1
    44a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    44a4:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    44a6:	b98b      	cbnz	r3, 44cc <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    44a8:	f240 1515 	movw	r5, #277	; 0x115
    44ac:	4c09      	ldr	r4, [pc, #36]	; (44d4 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    44ae:	0bc9      	lsrs	r1, r1, #15
		nrf_spu_flashregion_set(NRF_SPU_S,
    44b0:	f3c0 30c7 	ubfx	r0, r0, #15, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    44b4:	4299      	cmp	r1, r3
    44b6:	d101      	bne.n	44bc <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    44b8:	2000      	movs	r0, #0
}
    44ba:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    44bc:	18c2      	adds	r2, r0, r3
    44be:	b2d2      	uxtb	r2, r2
    44c0:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    44c4:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    44c8:	3301      	adds	r3, #1
    44ca:	e7f3      	b.n	44b4 <fprotect_area+0x18>
		return -EINVAL;
    44cc:	f06f 0015 	mvn.w	r0, #21
    44d0:	e7f3      	b.n	44ba <fprotect_area+0x1e>
    44d2:	bf00      	nop
    44d4:	50003000 	.word	0x50003000

000044d8 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    44d8:	4803      	ldr	r0, [pc, #12]	; (44e8 <k_sys_fatal_error_handler+0x10>)
    44da:	2145      	movs	r1, #69	; 0x45
{
    44dc:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    44de:	f003 faf3 	bl	7ac8 <z_log_minimal_printk>
		sys_arch_reboot(0);
    44e2:	2000      	movs	r0, #0
    44e4:	f7ff f92c 	bl	3740 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    44e8:	0000a209 	.word	0x0000a209

000044ec <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    44ec:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    44ee:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    44f0:	4a04      	ldr	r2, [pc, #16]	; (4504 <boot_write_magic+0x18>)
    44f2:	2310      	movs	r3, #16
    44f4:	3910      	subs	r1, #16
    44f6:	f003 fb33 	bl	7b60 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    44fa:	3800      	subs	r0, #0
    44fc:	bf18      	it	ne
    44fe:	2001      	movne	r0, #1
    4500:	bd08      	pop	{r3, pc}
    4502:	bf00      	nop
    4504:	000092e8 	.word	0x000092e8

00004508 <boot_read_swap_state>:
{
    4508:	b530      	push	{r4, r5, lr}
    450a:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    450c:	6881      	ldr	r1, [r0, #8]
{
    450e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    4510:	2310      	movs	r3, #16
    4512:	aa02      	add	r2, sp, #8
    4514:	3910      	subs	r1, #16
{
    4516:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    4518:	f003 fb06 	bl	7b28 <flash_area_read>
    if (rc < 0) {
    451c:	2800      	cmp	r0, #0
    451e:	da02      	bge.n	4526 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    4520:	2001      	movs	r0, #1
}
    4522:	b007      	add	sp, #28
    4524:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    4526:	2210      	movs	r2, #16
    4528:	4620      	mov	r0, r4
    452a:	a902      	add	r1, sp, #8
    452c:	f004 f943 	bl	87b6 <bootutil_buffer_is_erased>
    4530:	bba8      	cbnz	r0, 459e <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    4532:	2210      	movs	r2, #16
    4534:	491b      	ldr	r1, [pc, #108]	; (45a4 <boot_read_swap_state+0x9c>)
    4536:	a802      	add	r0, sp, #8
    4538:	f003 feae 	bl	8298 <memcmp>
    return BOOT_MAGIC_BAD;
    453c:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    453e:	bf0c      	ite	eq
    4540:	2301      	moveq	r3, #1
    4542:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    4544:	702b      	strb	r3, [r5, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    4546:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    4548:	2301      	movs	r3, #1
    454a:	4620      	mov	r0, r4
    454c:	f10d 0207 	add.w	r2, sp, #7
    4550:	3928      	subs	r1, #40	; 0x28
    4552:	f003 fae9 	bl	7b28 <flash_area_read>
    if (rc < 0) {
    4556:	2800      	cmp	r0, #0
    4558:	dbe2      	blt.n	4520 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    455a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    455e:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4560:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4564:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4566:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4568:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    456a:	2201      	movs	r2, #1
    456c:	f10d 0107 	add.w	r1, sp, #7
    4570:	f004 f921 	bl	87b6 <bootutil_buffer_is_erased>
    4574:	b910      	cbnz	r0, 457c <boot_read_swap_state+0x74>
    4576:	786b      	ldrb	r3, [r5, #1]
    4578:	2b04      	cmp	r3, #4
    457a:	d903      	bls.n	4584 <boot_read_swap_state+0x7c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    457c:	2301      	movs	r3, #1
    457e:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    4580:	2300      	movs	r3, #0
    4582:	712b      	strb	r3, [r5, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    4584:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    4586:	4620      	mov	r0, r4
    4588:	3a20      	subs	r2, #32
    458a:	1ca9      	adds	r1, r5, #2
    458c:	f004 f926 	bl	87dc <boot_read_flag>
    if (rc) {
    4590:	2800      	cmp	r0, #0
    4592:	d1c5      	bne.n	4520 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    4594:	4620      	mov	r0, r4
    4596:	1ce9      	adds	r1, r5, #3
    4598:	f004 f978 	bl	888c <boot_read_image_ok>
    459c:	e7c1      	b.n	4522 <boot_read_swap_state+0x1a>
    459e:	2303      	movs	r3, #3
    45a0:	e7d0      	b.n	4544 <boot_read_swap_state+0x3c>
    45a2:	bf00      	nop
    45a4:	000092e8 	.word	0x000092e8

000045a8 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    45a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    45aa:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    45ac:	4669      	mov	r1, sp
    45ae:	2005      	movs	r0, #5
    45b0:	f004 f970 	bl	8894 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    45b4:	4604      	mov	r4, r0
    45b6:	b110      	cbz	r0, 45be <boot_swap_type_multi+0x16>
        return BOOT_SWAP_TYPE_PANIC;
    45b8:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    45ba:	b004      	add	sp, #16
    45bc:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    45be:	2002      	movs	r0, #2
    45c0:	a902      	add	r1, sp, #8
    45c2:	f004 f967 	bl	8894 <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    45c6:	2801      	cmp	r0, #1
    45c8:	d136      	bne.n	4638 <boot_swap_type_multi+0x90>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    45ca:	462a      	mov	r2, r5
    45cc:	2149      	movs	r1, #73	; 0x49
    45ce:	4828      	ldr	r0, [pc, #160]	; (4670 <boot_swap_type_multi+0xc8>)
    45d0:	f003 fa7a 	bl	7ac8 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    45d4:	4b27      	ldr	r3, [pc, #156]	; (4674 <boot_swap_type_multi+0xcc>)
        secondary_slot.image_num = 0;
    45d6:	f88d 400c 	strb.w	r4, [sp, #12]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    45da:	9302      	str	r3, [sp, #8]
            boot_magic_compatible_check(table->magic_secondary_slot,
    45dc:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    45de:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    45e2:	f89d 6008 	ldrb.w	r6, [sp, #8]
    45e6:	4c24      	ldr	r4, [pc, #144]	; (4678 <boot_swap_type_multi+0xd0>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    45e8:	4629      	mov	r1, r5
    45ea:	7820      	ldrb	r0, [r4, #0]
    45ec:	f004 f8d5 	bl	879a <boot_magic_compatible_check>
    45f0:	b348      	cbz	r0, 4646 <boot_swap_type_multi+0x9e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    45f2:	4631      	mov	r1, r6
    45f4:	7860      	ldrb	r0, [r4, #1]
    45f6:	f004 f8d0 	bl	879a <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    45fa:	b320      	cbz	r0, 4646 <boot_swap_type_multi+0x9e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    45fc:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    45fe:	2b04      	cmp	r3, #4
    4600:	d003      	beq.n	460a <boot_swap_type_multi+0x62>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    4602:	f89d 1003 	ldrb.w	r1, [sp, #3]
    4606:	4299      	cmp	r1, r3
    4608:	d11d      	bne.n	4646 <boot_swap_type_multi+0x9e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    460a:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    460c:	2b04      	cmp	r3, #4
    460e:	d003      	beq.n	4618 <boot_swap_type_multi+0x70>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    4610:	f89d 100b 	ldrb.w	r1, [sp, #11]
    4614:	4299      	cmp	r1, r3
    4616:	d116      	bne.n	4646 <boot_swap_type_multi+0x9e>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    4618:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    461a:	2b04      	cmp	r3, #4
    461c:	d10f      	bne.n	463e <boot_swap_type_multi+0x96>
            BOOT_LOG_INF("Swap type: %s",
    461e:	7963      	ldrb	r3, [r4, #5]
    4620:	2b02      	cmp	r3, #2
    4622:	d11b      	bne.n	465c <boot_swap_type_multi+0xb4>
    4624:	4a15      	ldr	r2, [pc, #84]	; (467c <boot_swap_type_multi+0xd4>)
    4626:	4816      	ldr	r0, [pc, #88]	; (4680 <boot_swap_type_multi+0xd8>)
    4628:	2149      	movs	r1, #73	; 0x49
    462a:	f003 fa4d 	bl	7ac8 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    462e:	7960      	ldrb	r0, [r4, #5]
    4630:	1e83      	subs	r3, r0, #2
    4632:	2b02      	cmp	r3, #2
    4634:	d9c1      	bls.n	45ba <boot_swap_type_multi+0x12>
    4636:	e7bf      	b.n	45b8 <boot_swap_type_multi+0x10>
    } else if (rc) {
    4638:	2800      	cmp	r0, #0
    463a:	d0cf      	beq.n	45dc <boot_swap_type_multi+0x34>
    463c:	e7bc      	b.n	45b8 <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    463e:	f89d 1002 	ldrb.w	r1, [sp, #2]
    4642:	4299      	cmp	r1, r3
    4644:	d0eb      	beq.n	461e <boot_swap_type_multi+0x76>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    4646:	3201      	adds	r2, #1
    4648:	2a03      	cmp	r2, #3
    464a:	f104 0406 	add.w	r4, r4, #6
    464e:	d1cb      	bne.n	45e8 <boot_swap_type_multi+0x40>
    BOOT_LOG_INF("Swap type: none");
    4650:	480c      	ldr	r0, [pc, #48]	; (4684 <boot_swap_type_multi+0xdc>)
    4652:	2149      	movs	r1, #73	; 0x49
    4654:	f003 fa38 	bl	7ac8 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    4658:	2001      	movs	r0, #1
    465a:	e7ae      	b.n	45ba <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
    465c:	2b03      	cmp	r3, #3
    465e:	d005      	beq.n	466c <boot_swap_type_multi+0xc4>
    4660:	4a09      	ldr	r2, [pc, #36]	; (4688 <boot_swap_type_multi+0xe0>)
    4662:	490a      	ldr	r1, [pc, #40]	; (468c <boot_swap_type_multi+0xe4>)
    4664:	2b04      	cmp	r3, #4
    4666:	bf08      	it	eq
    4668:	460a      	moveq	r2, r1
    466a:	e7dc      	b.n	4626 <boot_swap_type_multi+0x7e>
    466c:	4a08      	ldr	r2, [pc, #32]	; (4690 <boot_swap_type_multi+0xe8>)
    466e:	e7da      	b.n	4626 <boot_swap_type_multi+0x7e>
    4670:	0000a24e 	.word	0x0000a24e
    4674:	03030103 	.word	0x03030103
    4678:	0000a2c1 	.word	0x0000a2c1
    467c:	0000a230 	.word	0x0000a230
    4680:	0000a299 	.word	0x0000a299
    4684:	0000a2ac 	.word	0x0000a2ac
    4688:	0000a235 	.word	0x0000a235
    468c:	0000a247 	.word	0x0000a247
    4690:	0000a22b 	.word	0x0000a22b

00004694 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    4694:	b508      	push	{r3, lr}
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    4696:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    469a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    469e:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    46a0:	bf01      	itttt	eq
    46a2:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    46a6:	2200      	moveq	r2, #0
    46a8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    46ac:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    46b0:	f004 f913 	bl	88da <nrf91_errata_14>
    46b4:	b128      	cbz	r0, 46c2 <SystemInit+0x2e>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    46b6:	2201      	movs	r2, #1
    46b8:	4b47      	ldr	r3, [pc, #284]	; (47d8 <SystemInit+0x144>)
    46ba:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    46be:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    46c2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    46c6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    46ca:	2a09      	cmp	r2, #9
    46cc:	d107      	bne.n	46de <SystemInit+0x4a>
            {
                switch(var2)
    46ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    46d2:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    46d4:	bf1e      	ittt	ne
    46d6:	2201      	movne	r2, #1
    46d8:	4b3f      	ldrne	r3, [pc, #252]	; (47d8 <SystemInit+0x144>)
    46da:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    46de:	f004 f8fc 	bl	88da <nrf91_errata_14>
    46e2:	b118      	cbz	r0, 46ec <SystemInit+0x58>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    46e4:	220e      	movs	r2, #14
    46e6:	4b3d      	ldr	r3, [pc, #244]	; (47dc <SystemInit+0x148>)
    46e8:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    46ec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
            if (var1 == 0x09)
    46f0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    46f4:	2b09      	cmp	r3, #9
    46f6:	d106      	bne.n	4706 <SystemInit+0x72>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    46f8:	2200      	movs	r2, #0
    46fa:	4b37      	ldr	r3, [pc, #220]	; (47d8 <SystemInit+0x144>)
    46fc:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    4700:	2201      	movs	r2, #1
    4702:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    4706:	2200      	movs	r2, #0
    4708:	00d3      	lsls	r3, r2, #3
    470a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    470e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    4712:	3101      	adds	r1, #1
    4714:	d008      	beq.n	4728 <SystemInit+0x94>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4716:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    471a:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    471c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    4720:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4724:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    4726:	d1ef      	bne.n	4708 <SystemInit+0x74>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    4728:	4b2d      	ldr	r3, [pc, #180]	; (47e0 <SystemInit+0x14c>)
    472a:	69da      	ldr	r2, [r3, #28]
    472c:	07d1      	lsls	r1, r2, #31
    472e:	d53a      	bpl.n	47a6 <SystemInit+0x112>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4730:	4b2c      	ldr	r3, [pc, #176]	; (47e4 <SystemInit+0x150>)
    4732:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4736:	2a01      	cmp	r2, #1
    4738:	d1fb      	bne.n	4732 <SystemInit+0x9e>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    473a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    473e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4742:	2a01      	cmp	r2, #1
    4744:	d1fb      	bne.n	473e <SystemInit+0xaa>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    4746:	4b26      	ldr	r3, [pc, #152]	; (47e0 <SystemInit+0x14c>)
    4748:	69da      	ldr	r2, [r3, #28]
    474a:	07d2      	lsls	r2, r2, #31
    474c:	d508      	bpl.n	4760 <SystemInit+0xcc>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    474e:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4750:	4924      	ldr	r1, [pc, #144]	; (47e4 <SystemInit+0x150>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    4752:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    4756:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4758:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    475c:	2a01      	cmp	r2, #1
    475e:	d1fb      	bne.n	4758 <SystemInit+0xc4>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    4760:	6a1a      	ldr	r2, [r3, #32]
    4762:	3201      	adds	r2, #1
    4764:	d10a      	bne.n	477c <SystemInit+0xe8>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    4766:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    4768:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    476c:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    4770:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4772:	4a1c      	ldr	r2, [pc, #112]	; (47e4 <SystemInit+0x150>)
    4774:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4778:	2b01      	cmp	r3, #1
    477a:	d1fb      	bne.n	4774 <SystemInit+0xe0>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    477c:	2200      	movs	r2, #0
    477e:	4b19      	ldr	r3, [pc, #100]	; (47e4 <SystemInit+0x150>)
    4780:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4784:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4788:	2a01      	cmp	r2, #1
    478a:	d1fb      	bne.n	4784 <SystemInit+0xf0>
  __ASM volatile ("dsb 0xF":::"memory");
    478c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4790:	4915      	ldr	r1, [pc, #84]	; (47e8 <SystemInit+0x154>)
    4792:	4b16      	ldr	r3, [pc, #88]	; (47ec <SystemInit+0x158>)
    4794:	68ca      	ldr	r2, [r1, #12]
    4796:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    479a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    479c:	60cb      	str	r3, [r1, #12]
    479e:	f3bf 8f4f 	dsb	sy
    __NOP();
    47a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    47a4:	e7fd      	b.n	47a2 <SystemInit+0x10e>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    47a6:	6a1b      	ldr	r3, [r3, #32]
    47a8:	3301      	adds	r3, #1
    47aa:	d0c1      	beq.n	4730 <SystemInit+0x9c>
        SCB->NSACR |= (3UL << 10);
    47ac:	4b0e      	ldr	r3, [pc, #56]	; (47e8 <SystemInit+0x154>)
    47ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    47b2:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    47b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    47ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    47be:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    47c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    47c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    47ca:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    47ce:	4b08      	ldr	r3, [pc, #32]	; (47f0 <SystemInit+0x15c>)
    47d0:	4a08      	ldr	r2, [pc, #32]	; (47f4 <SystemInit+0x160>)
    47d2:	601a      	str	r2, [r3, #0]
}
    47d4:	bd08      	pop	{r3, pc}
    47d6:	bf00      	nop
    47d8:	50004000 	.word	0x50004000
    47dc:	5003a000 	.word	0x5003a000
    47e0:	00ff8000 	.word	0x00ff8000
    47e4:	50039000 	.word	0x50039000
    47e8:	e000ed00 	.word	0xe000ed00
    47ec:	05fa0004 	.word	0x05fa0004
    47f0:	200145a8 	.word	0x200145a8
    47f4:	03d09000 	.word	0x03d09000

000047f8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    47f8:	4b04      	ldr	r3, [pc, #16]	; (480c <nrfx_clock_init+0x14>)
    47fa:	791a      	ldrb	r2, [r3, #4]
    47fc:	b922      	cbnz	r2, 4808 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    47fe:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4800:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4802:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4804:	4802      	ldr	r0, [pc, #8]	; (4810 <nrfx_clock_init+0x18>)
    4806:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4808:	4802      	ldr	r0, [pc, #8]	; (4814 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    480a:	4770      	bx	lr
    480c:	200166b0 	.word	0x200166b0
    4810:	0bad0000 	.word	0x0bad0000
    4814:	0bad000c 	.word	0x0bad000c

00004818 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4818:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    481c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4820:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4822:	b152      	cbz	r2, 483a <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4824:	2000      	movs	r0, #0
    4826:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    482a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    482e:	2201      	movs	r2, #1
    4830:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4834:	4b11      	ldr	r3, [pc, #68]	; (487c <nrfx_power_clock_irq_handler+0x64>)
    4836:	681b      	ldr	r3, [r3, #0]
    4838:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    483a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    483e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4842:	b18a      	cbz	r2, 4868 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4844:	2200      	movs	r2, #0
    4846:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    484a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    484e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4852:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4856:	f002 0203 	and.w	r2, r2, #3
    485a:	2a01      	cmp	r2, #1
    485c:	f04f 0102 	mov.w	r1, #2
    4860:	d103      	bne.n	486a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4862:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4866:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4868:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    486a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    486e:	4b03      	ldr	r3, [pc, #12]	; (487c <nrfx_power_clock_irq_handler+0x64>)
    4870:	2001      	movs	r0, #1
}
    4872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4876:	681b      	ldr	r3, [r3, #0]
    4878:	4718      	bx	r3
    487a:	bf00      	nop
    487c:	200166b0 	.word	0x200166b0

00004880 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4880:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    4882:	f04f 0320 	mov.w	r3, #32
    4886:	f3ef 8611 	mrs	r6, BASEPRI
    488a:	f383 8811 	msr	BASEPRI, r3
    488e:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    4892:	490e      	ldr	r1, [pc, #56]	; (48cc <nrfx_dppi_channel_alloc+0x4c>)
    4894:	680c      	ldr	r4, [r1, #0]
    4896:	43e3      	mvns	r3, r4
    4898:	b29b      	uxth	r3, r3
    uint8_t channel = 0;

    if (!remaining_channels)
    489a:	b1a3      	cbz	r3, 48c6 <nrfx_dppi_channel_alloc+0x46>
    489c:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    489e:	b2d5      	uxtb	r5, r2
    48a0:	fa23 fc05 	lsr.w	ip, r3, r5
    48a4:	f01c 0f01 	tst.w	ip, #1
    48a8:	4617      	mov	r7, r2
    48aa:	f102 0201 	add.w	r2, r2, #1
    48ae:	d0f6      	beq.n	489e <nrfx_dppi_channel_alloc+0x1e>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    48b0:	2301      	movs	r3, #1
    48b2:	40ab      	lsls	r3, r5
    48b4:	4323      	orrs	r3, r4
        *p_channel = channel;
    48b6:	7007      	strb	r7, [r0, #0]

        err_code = NRFX_SUCCESS;
    48b8:	4805      	ldr	r0, [pc, #20]	; (48d0 <nrfx_dppi_channel_alloc+0x50>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
    48ba:	600b      	str	r3, [r1, #0]
	__asm__ volatile(
    48bc:	f386 8811 	msr	BASEPRI, r6
    48c0:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
    48c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
    48c6:	4803      	ldr	r0, [pc, #12]	; (48d4 <nrfx_dppi_channel_alloc+0x54>)
    48c8:	e7f8      	b.n	48bc <nrfx_dppi_channel_alloc+0x3c>
    48ca:	bf00      	nop
    48cc:	200166b8 	.word	0x200166b8
    48d0:	0bad0000 	.word	0x0bad0000
    48d4:	0bad0002 	.word	0x0bad0002

000048d8 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    48d8:	2301      	movs	r3, #1
    48da:	fa03 f000 	lsl.w	r0, r3, r0
    48de:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    48e0:	b193      	cbz	r3, 4908 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    48e2:	f04f 0320 	mov.w	r3, #32
    48e6:	f3ef 8111 	mrs	r1, BASEPRI
    48ea:	f383 8811 	msr	BASEPRI, r3
    48ee:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    48f2:	4a06      	ldr	r2, [pc, #24]	; (490c <nrfx_gpiote_channel_free+0x34>)
    48f4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    48f6:	ea23 0300 	bic.w	r3, r3, r0
    48fa:	64d3      	str	r3, [r2, #76]	; 0x4c
	__asm__ volatile(
    48fc:	f381 8811 	msr	BASEPRI, r1
    4900:	f3bf 8f6f 	isb	sy
    4904:	4802      	ldr	r0, [pc, #8]	; (4910 <nrfx_gpiote_channel_free+0x38>)
    4906:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    4908:	4802      	ldr	r0, [pc, #8]	; (4914 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    490a:	4770      	bx	lr
    490c:	200166bc 	.word	0x200166bc
    4910:	0bad0000 	.word	0x0bad0000
    4914:	0bad0004 	.word	0x0bad0004

00004918 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    4918:	b5f0      	push	{r4, r5, r6, r7, lr}
    491a:	2100      	movs	r1, #0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    491c:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    491e:	2701      	movs	r7, #1
    4920:	4e12      	ldr	r6, [pc, #72]	; (496c <nrfx_gpiote_channel_alloc+0x54>)
	__asm__ volatile(
    4922:	f04f 0320 	mov.w	r3, #32
    4926:	f3ef 8511 	mrs	r5, BASEPRI
    492a:	f383 8811 	msr	BASEPRI, r3
    492e:	f3bf 8f6f 	isb	sy

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    4932:	b2cc      	uxtb	r4, r1
    return m_cb.allocated_channels_mask & (1UL << index);
    4934:	fa07 f304 	lsl.w	r3, r7, r4
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    4938:	fa22 f404 	lsr.w	r4, r2, r4
    493c:	07e4      	lsls	r4, r4, #31
    493e:	d409      	bmi.n	4954 <nrfx_gpiote_channel_alloc+0x3c>
	__asm__ volatile(
    4940:	f385 8811 	msr	BASEPRI, r5
    4944:	f3bf 8f6f 	isb	sy
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    4948:	439a      	bics	r2, r3
    494a:	f101 0101 	add.w	r1, r1, #1
    494e:	d1e8      	bne.n	4922 <nrfx_gpiote_channel_alloc+0xa>
    4950:	4807      	ldr	r0, [pc, #28]	; (4970 <nrfx_gpiote_channel_alloc+0x58>)

        mask &= ~(1UL << ch_idx);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4952:	e00a      	b.n	496a <nrfx_gpiote_channel_alloc+0x52>
    return m_cb.allocated_channels_mask & (1UL << index);
    4954:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    4956:	4223      	tst	r3, r4
    4958:	d1f2      	bne.n	4940 <nrfx_gpiote_channel_alloc+0x28>
    m_cb.allocated_channels_mask |= (1UL << index);
    495a:	4323      	orrs	r3, r4
    495c:	64f3      	str	r3, [r6, #76]	; 0x4c
            *p_channel = ch_idx;
    495e:	7001      	strb	r1, [r0, #0]
    4960:	f385 8811 	msr	BASEPRI, r5
    4964:	f3bf 8f6f 	isb	sy
    4968:	4802      	ldr	r0, [pc, #8]	; (4974 <nrfx_gpiote_channel_alloc+0x5c>)
}
    496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    496c:	200166bc 	.word	0x200166bc
    4970:	0bad0002 	.word	0x0bad0002
    4974:	0bad0000 	.word	0x0bad0000

00004978 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    4978:	2200      	movs	r2, #0
    497a:	4b03      	ldr	r3, [pc, #12]	; (4988 <nvmc_readonly_mode_set+0x10>)
    497c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4980:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    4984:	4770      	bx	lr
    4986:	bf00      	nop
    4988:	50039000 	.word	0x50039000

0000498c <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    498c:	4a04      	ldr	r2, [pc, #16]	; (49a0 <nvmc_word_write+0x14>)
    498e:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    4992:	07db      	lsls	r3, r3, #31
    4994:	d5fb      	bpl.n	498e <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    4996:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4998:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    499c:	4770      	bx	lr
    499e:	bf00      	nop
    49a0:	50039000 	.word	0x50039000

000049a4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    49a4:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    49a6:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    49aa:	b983      	cbnz	r3, 49ce <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    49ac:	2202      	movs	r2, #2
    49ae:	4b09      	ldr	r3, [pc, #36]	; (49d4 <nrfx_nvmc_page_erase+0x30>)
    49b0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    49b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    49b8:	f04f 32ff 	mov.w	r2, #4294967295
    49bc:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    49be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    49c2:	07d2      	lsls	r2, r2, #31
    49c4:	d5fb      	bpl.n	49be <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    49c6:	f7ff ffd7 	bl	4978 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    49ca:	4803      	ldr	r0, [pc, #12]	; (49d8 <nrfx_nvmc_page_erase+0x34>)
}
    49cc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    49ce:	4803      	ldr	r0, [pc, #12]	; (49dc <nrfx_nvmc_page_erase+0x38>)
    49d0:	e7fc      	b.n	49cc <nrfx_nvmc_page_erase+0x28>
    49d2:	bf00      	nop
    49d4:	50039000 	.word	0x50039000
    49d8:	0bad0000 	.word	0x0bad0000
    49dc:	0bad000a 	.word	0x0bad000a

000049e0 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    49e0:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    49e2:	b508      	push	{r3, lr}
    49e4:	4b05      	ldr	r3, [pc, #20]	; (49fc <nrfx_nvmc_word_write+0x1c>)
    49e6:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    49ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    49ee:	f7ff ffcd 	bl	498c <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    49f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    49f6:	f7ff bfbf 	b.w	4978 <nvmc_readonly_mode_set>
    49fa:	bf00      	nop
    49fc:	50039000 	.word	0x50039000

00004a00 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a00:	4b0e      	ldr	r3, [pc, #56]	; (4a3c <z_sys_init_run_level+0x3c>)
{
    4a02:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a04:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4a08:	3001      	adds	r0, #1
    4a0a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4a0e:	42a6      	cmp	r6, r4
    4a10:	d800      	bhi.n	4a14 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4a12:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4a14:	e9d4 3500 	ldrd	r3, r5, [r4]
    4a18:	4628      	mov	r0, r5
    4a1a:	4798      	blx	r3
		if (dev != NULL) {
    4a1c:	b165      	cbz	r5, 4a38 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4a1e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4a20:	b130      	cbz	r0, 4a30 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4a22:	2800      	cmp	r0, #0
    4a24:	bfb8      	it	lt
    4a26:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    4a28:	28ff      	cmp	r0, #255	; 0xff
    4a2a:	bfa8      	it	ge
    4a2c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    4a2e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4a30:	785a      	ldrb	r2, [r3, #1]
    4a32:	f042 0201 	orr.w	r2, r2, #1
    4a36:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a38:	3408      	adds	r4, #8
    4a3a:	e7e8      	b.n	4a0e <z_sys_init_run_level+0xe>
    4a3c:	000092f8 	.word	0x000092f8

00004a40 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4a40:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4a42:	4605      	mov	r5, r0
    4a44:	b910      	cbnz	r0, 4a4c <z_impl_device_get_binding+0xc>
		return NULL;
    4a46:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4a48:	4620      	mov	r0, r4
    4a4a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4a4c:	7803      	ldrb	r3, [r0, #0]
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d0f9      	beq.n	4a46 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a52:	4c0e      	ldr	r4, [pc, #56]	; (4a8c <z_impl_device_get_binding+0x4c>)
    4a54:	4e0e      	ldr	r6, [pc, #56]	; (4a90 <z_impl_device_get_binding+0x50>)
    4a56:	42b4      	cmp	r4, r6
    4a58:	d108      	bne.n	4a6c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a5a:	4c0c      	ldr	r4, [pc, #48]	; (4a8c <z_impl_device_get_binding+0x4c>)
    4a5c:	42b4      	cmp	r4, r6
    4a5e:	d0f2      	beq.n	4a46 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4a60:	4620      	mov	r0, r4
    4a62:	f003 ffc8 	bl	89f6 <z_device_ready>
    4a66:	b950      	cbnz	r0, 4a7e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a68:	3418      	adds	r4, #24
    4a6a:	e7f7      	b.n	4a5c <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    4a6c:	4620      	mov	r0, r4
    4a6e:	f003 ffc2 	bl	89f6 <z_device_ready>
    4a72:	b110      	cbz	r0, 4a7a <z_impl_device_get_binding+0x3a>
    4a74:	6823      	ldr	r3, [r4, #0]
    4a76:	42ab      	cmp	r3, r5
    4a78:	d0e6      	beq.n	4a48 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a7a:	3418      	adds	r4, #24
    4a7c:	e7eb      	b.n	4a56 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4a7e:	4628      	mov	r0, r5
    4a80:	6821      	ldr	r1, [r4, #0]
    4a82:	f003 fbfd 	bl	8280 <strcmp>
    4a86:	2800      	cmp	r0, #0
    4a88:	d1ee      	bne.n	4a68 <z_impl_device_get_binding+0x28>
    4a8a:	e7dd      	b.n	4a48 <z_impl_device_get_binding+0x8>
    4a8c:	00008d7c 	.word	0x00008d7c
    4a90:	00008e0c 	.word	0x00008e0c

00004a94 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a96:	4605      	mov	r5, r0
    4a98:	460e      	mov	r6, r1
	__asm__ volatile(
    4a9a:	f04f 0320 	mov.w	r3, #32
    4a9e:	f3ef 8711 	mrs	r7, BASEPRI
    4aa2:	f383 8811 	msr	BASEPRI, r3
    4aa6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4aaa:	f000 fdcb 	bl	5644 <z_impl_k_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4aae:	2200      	movs	r2, #0
    4ab0:	2d04      	cmp	r5, #4
    4ab2:	bf98      	it	ls
    4ab4:	4b18      	ldrls	r3, [pc, #96]	; (4b18 <z_fatal_error+0x84>)
    4ab6:	4604      	mov	r4, r0
	switch (reason) {
    4ab8:	bf94      	ite	ls
    4aba:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    4abe:	4b17      	ldrhi	r3, [pc, #92]	; (4b1c <z_fatal_error+0x88>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4ac0:	9200      	str	r2, [sp, #0]
    4ac2:	2145      	movs	r1, #69	; 0x45
    4ac4:	462a      	mov	r2, r5
    4ac6:	4816      	ldr	r0, [pc, #88]	; (4b20 <z_fatal_error+0x8c>)
    4ac8:	f002 fffe 	bl	7ac8 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4acc:	b13e      	cbz	r6, 4ade <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4ace:	69f3      	ldr	r3, [r6, #28]
    4ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4ad4:	b11b      	cbz	r3, 4ade <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    4ad6:	2145      	movs	r1, #69	; 0x45
    4ad8:	4812      	ldr	r0, [pc, #72]	; (4b24 <z_fatal_error+0x90>)
    4ada:	f002 fff5 	bl	7ac8 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4ade:	b134      	cbz	r4, 4aee <z_fatal_error+0x5a>
    4ae0:	4620      	mov	r0, r4
    4ae2:	f003 ffdc 	bl	8a9e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4ae6:	4603      	mov	r3, r0
    4ae8:	b108      	cbz	r0, 4aee <z_fatal_error+0x5a>
    4aea:	7802      	ldrb	r2, [r0, #0]
    4aec:	b902      	cbnz	r2, 4af0 <z_fatal_error+0x5c>
		thread_name = "unknown";
    4aee:	4b0e      	ldr	r3, [pc, #56]	; (4b28 <z_fatal_error+0x94>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4af0:	4622      	mov	r2, r4
    4af2:	2145      	movs	r1, #69	; 0x45
    4af4:	480d      	ldr	r0, [pc, #52]	; (4b2c <z_fatal_error+0x98>)
    4af6:	f002 ffe7 	bl	7ac8 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4afa:	4631      	mov	r1, r6
    4afc:	4628      	mov	r0, r5
    4afe:	f7ff fceb 	bl	44d8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4b02:	f387 8811 	msr	BASEPRI, r7
    4b06:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4b0a:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4b0c:	b003      	add	sp, #12
    4b0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b12:	f7fe be6b 	b.w	37ec <z_impl_k_thread_abort>
    4b16:	bf00      	nop
    4b18:	00009310 	.word	0x00009310
    4b1c:	0000a2d3 	.word	0x0000a2d3
    4b20:	0000a2e9 	.word	0x0000a2e9
    4b24:	0000a316 	.word	0x0000a316
    4b28:	0000a2e1 	.word	0x0000a2e1
    4b2c:	0000a33c 	.word	0x0000a33c

00004b30 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4b30:	4802      	ldr	r0, [pc, #8]	; (4b3c <z_bss_zero+0xc>)
    4b32:	4a03      	ldr	r2, [pc, #12]	; (4b40 <z_bss_zero+0x10>)
    4b34:	2100      	movs	r1, #0
    4b36:	1a12      	subs	r2, r2, r0
    4b38:	f003 bbe0 	b.w	82fc <memset>
    4b3c:	20014668 	.word	0x20014668
    4b40:	20016eec 	.word	0x20016eec

00004b44 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4b44:	2201      	movs	r2, #1
{
    4b46:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4b48:	4b09      	ldr	r3, [pc, #36]	; (4b70 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4b4a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4b4c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4b4e:	f7ff ff57 	bl	4a00 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4b52:	f004 f8b3 	bl	8cbc <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4b56:	2003      	movs	r0, #3
    4b58:	f7ff ff52 	bl	4a00 <z_sys_init_run_level>

	z_init_static_threads();
    4b5c:	f000 f912 	bl	4d84 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    4b60:	f7fb fc7e 	bl	460 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4b64:	4a03      	ldr	r2, [pc, #12]	; (4b74 <bg_thread_main+0x30>)
    4b66:	7b13      	ldrb	r3, [r2, #12]
    4b68:	f023 0301 	bic.w	r3, r3, #1
    4b6c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4b6e:	bd08      	pop	{r3, pc}
    4b70:	20016d2f 	.word	0x20016d2f
    4b74:	20014728 	.word	0x20014728

00004b78 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4b78:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    4b7c:	4b37      	ldr	r3, [pc, #220]	; (4c5c <z_cstart+0xe4>)
    4b7e:	b0b7      	sub	sp, #220	; 0xdc
	uint32_t msp =
    4b80:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4b84:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    4b88:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4b8c:	2400      	movs	r4, #0
    4b8e:	23e0      	movs	r3, #224	; 0xe0
    4b90:	4d33      	ldr	r5, [pc, #204]	; (4c60 <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4b92:	f04f 0b01 	mov.w	fp, #1
    4b96:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4b9a:	77ec      	strb	r4, [r5, #31]
    4b9c:	762c      	strb	r4, [r5, #24]
    4b9e:	766c      	strb	r4, [r5, #25]
    4ba0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4ba2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    4ba4:	4e2f      	ldr	r6, [pc, #188]	; (4c64 <z_cstart+0xec>)
    4ba6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4baa:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4bac:	f7fe fdae 	bl	370c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4bb0:	f7fe faee 	bl	3190 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4bb4:	f04f 33ff 	mov.w	r3, #4294967295
    4bb8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4bba:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4bbc:	f7fe ffba 	bl	3b34 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4bc0:	f7fe fe26 	bl	3810 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    4bc4:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4bc8:	4d27      	ldr	r5, [pc, #156]	; (4c68 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    4bca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4bce:	ab06      	add	r3, sp, #24
    4bd0:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    4bd2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4bd6:	f003 ff0d 	bl	89f4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4bda:	4620      	mov	r0, r4
    4bdc:	f7ff ff10 	bl	4a00 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4be0:	2001      	movs	r0, #1
    4be2:	f7ff ff0d 	bl	4a00 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4be6:	f8df a098 	ldr.w	sl, [pc, #152]	; 4c80 <z_cstart+0x108>
	z_sched_init();
    4bea:	f000 fc7f 	bl	54ec <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4bee:	4b1f      	ldr	r3, [pc, #124]	; (4c6c <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
    4bf0:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4bf2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    4bf6:	491e      	ldr	r1, [pc, #120]	; (4c70 <z_cstart+0xf8>)
    4bf8:	9305      	str	r3, [sp, #20]
    4bfa:	4630      	mov	r0, r6
    4bfc:	4653      	mov	r3, sl
    4bfe:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    4c02:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4c06:	9400      	str	r4, [sp, #0]
    4c08:	f000 f88c 	bl	4d24 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4c0c:	7b73      	ldrb	r3, [r6, #13]
    4c0e:	4680      	mov	r8, r0
    4c10:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    4c14:	4630      	mov	r0, r6
    4c16:	7373      	strb	r3, [r6, #13]
    4c18:	f003 ffc2 	bl	8ba0 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    4c1c:	230f      	movs	r3, #15
    4c1e:	4f15      	ldr	r7, [pc, #84]	; (4c74 <z_cstart+0xfc>)
    4c20:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4c24:	e9cd 4302 	strd	r4, r3, [sp, #8]
    4c28:	4913      	ldr	r1, [pc, #76]	; (4c78 <z_cstart+0x100>)
    4c2a:	4b14      	ldr	r3, [pc, #80]	; (4c7c <z_cstart+0x104>)
    4c2c:	4638      	mov	r0, r7
    4c2e:	e9cd b404 	strd	fp, r4, [sp, #16]
    4c32:	e9cd 5400 	strd	r5, r4, [sp]
    4c36:	f000 f875 	bl	4d24 <z_setup_new_thread>
    4c3a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4c3c:	4652      	mov	r2, sl
    4c3e:	f023 0304 	bic.w	r3, r3, #4
    4c42:	737b      	strb	r3, [r7, #13]
    4c44:	4641      	mov	r1, r8
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    4c46:	f105 0318 	add.w	r3, r5, #24
    4c4a:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    4c4c:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4c50:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    4c52:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    4c54:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4c58:	f7fe fa7a 	bl	3150 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4c5c:	20019830 	.word	0x20019830
    4c60:	e000ed00 	.word	0xe000ed00
    4c64:	20014728 	.word	0x20014728
    4c68:	2001670c 	.word	0x2001670c
    4c6c:	0000a3a3 	.word	0x0000a3a3
    4c70:	20017030 	.word	0x20017030
    4c74:	20014668 	.word	0x20014668
    4c78:	20016ef0 	.word	0x20016ef0
    4c7c:	00004e3d 	.word	0x00004e3d
    4c80:	00004b45 	.word	0x00004b45

00004c84 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    4c84:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4c86:	4b0e      	ldr	r3, [pc, #56]	; (4cc0 <init_mem_slab_module+0x3c>)
    4c88:	4c0e      	ldr	r4, [pc, #56]	; (4cc4 <init_mem_slab_module+0x40>)
    4c8a:	42a3      	cmp	r3, r4
    4c8c:	d301      	bcc.n	4c92 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4c8e:	2000      	movs	r0, #0
	return rc;
}
    4c90:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4c92:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    4c96:	ea41 0200 	orr.w	r2, r1, r0
    4c9a:	f012 0203 	ands.w	r2, r2, #3
    4c9e:	d10b      	bne.n	4cb8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4ca0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    4ca2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4ca4:	42aa      	cmp	r2, r5
    4ca6:	d101      	bne.n	4cac <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4ca8:	331c      	adds	r3, #28
    4caa:	e7ee      	b.n	4c8a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4cac:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4cae:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    4cb0:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    4cb2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    4cb4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    4cb6:	e7f5      	b.n	4ca4 <init_mem_slab_module+0x20>
	return rc;
    4cb8:	f06f 0015 	mvn.w	r0, #21
    4cbc:	e7e8      	b.n	4c90 <init_mem_slab_module+0xc>
    4cbe:	bf00      	nop
    4cc0:	20014614 	.word	0x20014614
    4cc4:	20014614 	.word	0x20014614

00004cc8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4cc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4cca:	460c      	mov	r4, r1
	__asm__ volatile(
    4ccc:	f04f 0520 	mov.w	r5, #32
    4cd0:	f3ef 8111 	mrs	r1, BASEPRI
    4cd4:	f385 8811 	msr	BASEPRI, r5
    4cd8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4cdc:	6945      	ldr	r5, [r0, #20]
    4cde:	b15d      	cbz	r5, 4cf8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    4ce0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4ce2:	682b      	ldr	r3, [r5, #0]
    4ce4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4ce6:	6983      	ldr	r3, [r0, #24]
    4ce8:	3301      	adds	r3, #1
    4cea:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4cec:	2000      	movs	r0, #0
	__asm__ volatile(
    4cee:	f381 8811 	msr	BASEPRI, r1
    4cf2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4cf6:	e011      	b.n	4d1c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4cf8:	ea52 0603 	orrs.w	r6, r2, r3
    4cfc:	d103      	bne.n	4d06 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    4cfe:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    4d02:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    4d04:	e7f3      	b.n	4cee <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4d06:	e9cd 2300 	strd	r2, r3, [sp]
    4d0a:	4602      	mov	r2, r0
    4d0c:	3008      	adds	r0, #8
    4d0e:	f000 faff 	bl	5310 <z_pend_curr>
		if (result == 0) {
    4d12:	b918      	cbnz	r0, 4d1c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    4d14:	4b02      	ldr	r3, [pc, #8]	; (4d20 <k_mem_slab_alloc+0x58>)
    4d16:	689b      	ldr	r3, [r3, #8]
    4d18:	695b      	ldr	r3, [r3, #20]
    4d1a:	6023      	str	r3, [r4, #0]
}
    4d1c:	b002      	add	sp, #8
    4d1e:	bd70      	pop	{r4, r5, r6, pc}
    4d20:	2001670c 	.word	0x2001670c

00004d24 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4d24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4d28:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4d2a:	f100 0558 	add.w	r5, r0, #88	; 0x58
    4d2e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4d30:	2604      	movs	r6, #4
    4d32:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    4d36:	2500      	movs	r5, #0
{
    4d38:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    4d3a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4d3c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4d3e:	e9c0 5506 	strd	r5, r5, [r0, #24]
    4d42:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4d44:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4d48:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    4d4c:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4d50:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4d52:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4d54:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d56:	9202      	str	r2, [sp, #8]
    4d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    4d5a:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4d5e:	9201      	str	r2, [sp, #4]
    4d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4d62:	9200      	str	r2, [sp, #0]
    4d64:	4642      	mov	r2, r8
    4d66:	f7fe f9d3 	bl	3110 <arch_new_thread>
	if (!_current) {
    4d6a:	4b05      	ldr	r3, [pc, #20]	; (4d80 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    4d6c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4d6e:	689b      	ldr	r3, [r3, #8]
    4d70:	b103      	cbz	r3, 4d74 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    4d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    4d74:	4640      	mov	r0, r8
    4d76:	6723      	str	r3, [r4, #112]	; 0x70
    4d78:	b004      	add	sp, #16
    4d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d7e:	bf00      	nop
    4d80:	2001670c 	.word	0x2001670c

00004d84 <z_init_static_threads>:
{
    4d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4d88:	4c29      	ldr	r4, [pc, #164]	; (4e30 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4d8a:	4d2a      	ldr	r5, [pc, #168]	; (4e34 <z_init_static_threads+0xb0>)
{
    4d8c:	b087      	sub	sp, #28
    4d8e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4d90:	42ae      	cmp	r6, r5
    4d92:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4d96:	d30f      	bcc.n	4db8 <z_init_static_threads+0x34>
	k_sched_lock();
    4d98:	f000 fb78 	bl	548c <k_sched_lock>
			return (t * to_hz + off) / from_hz;
    4d9c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4da0:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    4da4:	4c22      	ldr	r4, [pc, #136]	; (4e30 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4da6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4e38 <z_init_static_threads+0xb4>
    4daa:	42ac      	cmp	r4, r5
    4dac:	d320      	bcc.n	4df0 <z_init_static_threads+0x6c>
}
    4dae:	b007      	add	sp, #28
    4db0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4db4:	f000 bb7e 	b.w	54b4 <k_sched_unlock>
		z_setup_new_thread(
    4db8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4dbc:	9305      	str	r3, [sp, #20]
    4dbe:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4dc2:	9304      	str	r3, [sp, #16]
    4dc4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4dc8:	9303      	str	r3, [sp, #12]
    4dca:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4dce:	9302      	str	r3, [sp, #8]
    4dd0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4dd4:	9301      	str	r3, [sp, #4]
    4dd6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4dda:	9300      	str	r3, [sp, #0]
    4ddc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4de0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4de4:	f7ff ff9e 	bl	4d24 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4de8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4dec:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4dee:	e7ce      	b.n	4d8e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4df2:	1c5a      	adds	r2, r3, #1
    4df4:	d00d      	beq.n	4e12 <z_init_static_threads+0x8e>
    4df6:	2100      	movs	r1, #0
    4df8:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    4dfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4dfe:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4e02:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4e06:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4e0a:	d104      	bne.n	4e16 <z_init_static_threads+0x92>
	z_sched_start(thread);
    4e0c:	4640      	mov	r0, r8
    4e0e:	f000 faed 	bl	53ec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4e12:	3430      	adds	r4, #48	; 0x30
    4e14:	e7c9      	b.n	4daa <z_init_static_threads+0x26>
    4e16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e1a:	2300      	movs	r3, #0
    4e1c:	f7fb f992 	bl	144 <__aeabi_uldivmod>
    4e20:	4602      	mov	r2, r0
    4e22:	460b      	mov	r3, r1
    4e24:	f108 0018 	add.w	r0, r8, #24
    4e28:	4649      	mov	r1, r9
    4e2a:	f000 fccb 	bl	57c4 <z_add_timeout>
    4e2e:	e7f0      	b.n	4e12 <z_init_static_threads+0x8e>
    4e30:	20014614 	.word	0x20014614
    4e34:	20014614 	.word	0x20014614
    4e38:	00008b5d 	.word	0x00008b5d

00004e3c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4e3c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    4e3e:	4c09      	ldr	r4, [pc, #36]	; (4e64 <idle+0x28>)
	__asm__ volatile(
    4e40:	f04f 0220 	mov.w	r2, #32
    4e44:	f3ef 8311 	mrs	r3, BASEPRI
    4e48:	f382 8811 	msr	BASEPRI, r2
    4e4c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    4e50:	f003 fefe 	bl	8c50 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    4e54:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    4e56:	f7fd f85d 	bl	1f14 <pm_system_suspend>
    4e5a:	2800      	cmp	r0, #0
    4e5c:	d1f0      	bne.n	4e40 <idle+0x4>
	arch_cpu_idle();
    4e5e:	f7fe f99d 	bl	319c <arch_cpu_idle>
}
    4e62:	e7ed      	b.n	4e40 <idle+0x4>
    4e64:	2001670c 	.word	0x2001670c

00004e68 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4e68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4e6c:	4604      	mov	r4, r0
    4e6e:	4617      	mov	r7, r2
    4e70:	461e      	mov	r6, r3
    4e72:	f04f 0320 	mov.w	r3, #32
    4e76:	f3ef 8811 	mrs	r8, BASEPRI
    4e7a:	f383 8811 	msr	BASEPRI, r3
    4e7e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4e82:	68c3      	ldr	r3, [r0, #12]
    4e84:	4a32      	ldr	r2, [pc, #200]	; (4f50 <z_impl_k_mutex_lock+0xe8>)
    4e86:	b17b      	cbz	r3, 4ea8 <z_impl_k_mutex_lock+0x40>
    4e88:	6880      	ldr	r0, [r0, #8]
    4e8a:	6891      	ldr	r1, [r2, #8]
    4e8c:	4288      	cmp	r0, r1
    4e8e:	d019      	beq.n	4ec4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4e90:	ea57 0306 	orrs.w	r3, r7, r6
    4e94:	d118      	bne.n	4ec8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4e96:	f388 8811 	msr	BASEPRI, r8
    4e9a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4e9e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4ea2:	b002      	add	sp, #8
    4ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4ea8:	6891      	ldr	r1, [r2, #8]
    4eaa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    4eae:	3301      	adds	r3, #1
    4eb0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4eb2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4eb4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    4eb6:	60a3      	str	r3, [r4, #8]
    4eb8:	f388 8811 	msr	BASEPRI, r8
    4ebc:	f3bf 8f6f 	isb	sy
		return 0;
    4ec0:	2000      	movs	r0, #0
    4ec2:	e7ee      	b.n	4ea2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    4ec4:	6921      	ldr	r1, [r4, #16]
    4ec6:	e7f2      	b.n	4eae <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4ec8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4ecc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    4ed0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4ed4:	4299      	cmp	r1, r3
    4ed6:	bfa8      	it	ge
    4ed8:	4619      	movge	r1, r3
    4eda:	4291      	cmp	r1, r2
    4edc:	bfb8      	it	lt
    4ede:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4ee0:	428b      	cmp	r3, r1
    4ee2:	dd2e      	ble.n	4f42 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    4ee4:	f003 fde4 	bl	8ab0 <adjust_owner_prio.isra.0>
    4ee8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4eea:	4622      	mov	r2, r4
    4eec:	4641      	mov	r1, r8
    4eee:	e9cd 7600 	strd	r7, r6, [sp]
    4ef2:	4818      	ldr	r0, [pc, #96]	; (4f54 <z_impl_k_mutex_lock+0xec>)
    4ef4:	f000 fa0c 	bl	5310 <z_pend_curr>
	if (got_mutex == 0) {
    4ef8:	2800      	cmp	r0, #0
    4efa:	d0e1      	beq.n	4ec0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    4efc:	f04f 0320 	mov.w	r3, #32
    4f00:	f3ef 8611 	mrs	r6, BASEPRI
    4f04:	f383 8811 	msr	BASEPRI, r3
    4f08:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4f0c:	6823      	ldr	r3, [r4, #0]
    4f0e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f10:	429c      	cmp	r4, r3
    4f12:	d00a      	beq.n	4f2a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4f14:	b14b      	cbz	r3, 4f2a <z_impl_k_mutex_lock+0xc2>
    4f16:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4f1a:	4299      	cmp	r1, r3
    4f1c:	bfa8      	it	ge
    4f1e:	4619      	movge	r1, r3
    4f20:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4f24:	4299      	cmp	r1, r3
    4f26:	bfb8      	it	lt
    4f28:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4f2a:	68a0      	ldr	r0, [r4, #8]
    4f2c:	f003 fdc0 	bl	8ab0 <adjust_owner_prio.isra.0>
    4f30:	b948      	cbnz	r0, 4f46 <z_impl_k_mutex_lock+0xde>
    4f32:	b945      	cbnz	r5, 4f46 <z_impl_k_mutex_lock+0xde>
	__asm__ volatile(
    4f34:	f386 8811 	msr	BASEPRI, r6
    4f38:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    4f3c:	f06f 000a 	mvn.w	r0, #10
    4f40:	e7af      	b.n	4ea2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    4f42:	2500      	movs	r5, #0
    4f44:	e7d1      	b.n	4eea <z_impl_k_mutex_lock+0x82>
		z_reschedule(&lock, key);
    4f46:	4631      	mov	r1, r6
    4f48:	4802      	ldr	r0, [pc, #8]	; (4f54 <z_impl_k_mutex_lock+0xec>)
    4f4a:	f000 fa3d 	bl	53c8 <z_reschedule>
    4f4e:	e7f5      	b.n	4f3c <z_impl_k_mutex_lock+0xd4>
    4f50:	2001670c 	.word	0x2001670c
    4f54:	20016d30 	.word	0x20016d30

00004f58 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4f58:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4f5a:	6883      	ldr	r3, [r0, #8]
{
    4f5c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d032      	beq.n	4fc8 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4f62:	4a1c      	ldr	r2, [pc, #112]	; (4fd4 <z_impl_k_mutex_unlock+0x7c>)
    4f64:	6892      	ldr	r2, [r2, #8]
    4f66:	4293      	cmp	r3, r2
    4f68:	d131      	bne.n	4fce <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4f6a:	7bda      	ldrb	r2, [r3, #15]
    4f6c:	3a01      	subs	r2, #1
    4f6e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4f70:	68c3      	ldr	r3, [r0, #12]
    4f72:	2b01      	cmp	r3, #1
    4f74:	d905      	bls.n	4f82 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    4f76:	3b01      	subs	r3, #1
    4f78:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4f7a:	f000 fa9b 	bl	54b4 <k_sched_unlock>

	return 0;
    4f7e:	2000      	movs	r0, #0
}
    4f80:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4f82:	f04f 0320 	mov.w	r3, #32
    4f86:	f3ef 8511 	mrs	r5, BASEPRI
    4f8a:	f383 8811 	msr	BASEPRI, r3
    4f8e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4f92:	6901      	ldr	r1, [r0, #16]
    4f94:	6880      	ldr	r0, [r0, #8]
    4f96:	f003 fd8b 	bl	8ab0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4f9a:	4620      	mov	r0, r4
    4f9c:	f003 fe10 	bl	8bc0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4fa0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4fa2:	b158      	cbz	r0, 4fbc <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    4fa4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4fa8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4faa:	2200      	movs	r2, #0
    4fac:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4fae:	f003 fdf7 	bl	8ba0 <z_ready_thread>
		z_reschedule(&lock, key);
    4fb2:	4629      	mov	r1, r5
    4fb4:	4808      	ldr	r0, [pc, #32]	; (4fd8 <z_impl_k_mutex_unlock+0x80>)
    4fb6:	f000 fa07 	bl	53c8 <z_reschedule>
    4fba:	e7de      	b.n	4f7a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4fbc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4fbe:	f385 8811 	msr	BASEPRI, r5
    4fc2:	f3bf 8f6f 	isb	sy
    4fc6:	e7d8      	b.n	4f7a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4fc8:	f06f 0015 	mvn.w	r0, #21
    4fcc:	e7d8      	b.n	4f80 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    4fce:	f04f 30ff 	mov.w	r0, #4294967295
    4fd2:	e7d5      	b.n	4f80 <z_impl_k_mutex_unlock+0x28>
    4fd4:	2001670c 	.word	0x2001670c
    4fd8:	20016d30 	.word	0x20016d30

00004fdc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4fdc:	b538      	push	{r3, r4, r5, lr}
    4fde:	4604      	mov	r4, r0
	__asm__ volatile(
    4fe0:	f04f 0320 	mov.w	r3, #32
    4fe4:	f3ef 8511 	mrs	r5, BASEPRI
    4fe8:	f383 8811 	msr	BASEPRI, r3
    4fec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4ff0:	f003 fde6 	bl	8bc0 <z_unpend_first_thread>

	if (thread != NULL) {
    4ff4:	b148      	cbz	r0, 500a <z_impl_k_sem_give+0x2e>
    4ff6:	2200      	movs	r2, #0
    4ff8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4ffa:	f003 fdd1 	bl	8ba0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4ffe:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5004:	4804      	ldr	r0, [pc, #16]	; (5018 <z_impl_k_sem_give+0x3c>)
    5006:	f000 b9df 	b.w	53c8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    500a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    500e:	429a      	cmp	r2, r3
    5010:	bf18      	it	ne
    5012:	3301      	addne	r3, #1
    5014:	60a3      	str	r3, [r4, #8]
}
    5016:	e7f2      	b.n	4ffe <z_impl_k_sem_give+0x22>
    5018:	20016d30 	.word	0x20016d30

0000501c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    501c:	b513      	push	{r0, r1, r4, lr}
    501e:	f04f 0420 	mov.w	r4, #32
    5022:	f3ef 8111 	mrs	r1, BASEPRI
    5026:	f384 8811 	msr	BASEPRI, r4
    502a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    502e:	6884      	ldr	r4, [r0, #8]
    5030:	b144      	cbz	r4, 5044 <z_impl_k_sem_take+0x28>
		sem->count--;
    5032:	3c01      	subs	r4, #1
    5034:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    5036:	f381 8811 	msr	BASEPRI, r1
    503a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    503e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5040:	b002      	add	sp, #8
    5042:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5044:	ea52 0403 	orrs.w	r4, r2, r3
    5048:	d106      	bne.n	5058 <z_impl_k_sem_take+0x3c>
    504a:	f381 8811 	msr	BASEPRI, r1
    504e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5052:	f06f 000f 	mvn.w	r0, #15
    5056:	e7f3      	b.n	5040 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5058:	e9cd 2300 	strd	r2, r3, [sp]
    505c:	4602      	mov	r2, r0
    505e:	4802      	ldr	r0, [pc, #8]	; (5068 <z_impl_k_sem_take+0x4c>)
    5060:	f000 f956 	bl	5310 <z_pend_curr>
	return ret;
    5064:	e7ec      	b.n	5040 <z_impl_k_sem_take+0x24>
    5066:	bf00      	nop
    5068:	20016d30 	.word	0x20016d30

0000506c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    506c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    506e:	4c08      	ldr	r4, [pc, #32]	; (5090 <z_reset_time_slice+0x24>)
    5070:	6823      	ldr	r3, [r4, #0]
    5072:	b15b      	cbz	r3, 508c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5074:	f7fd f9d8 	bl	2428 <sys_clock_elapsed>
    5078:	4603      	mov	r3, r0
    507a:	6820      	ldr	r0, [r4, #0]
    507c:	4a05      	ldr	r2, [pc, #20]	; (5094 <z_reset_time_slice+0x28>)
    507e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    5080:	2100      	movs	r1, #0
	}
}
    5082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    5086:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    5088:	f003 bdf2 	b.w	8c70 <z_set_timeout_expiry>
}
    508c:	bd10      	pop	{r4, pc}
    508e:	bf00      	nop
    5090:	20016748 	.word	0x20016748
    5094:	2001670c 	.word	0x2001670c

00005098 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5098:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    509a:	4d0c      	ldr	r5, [pc, #48]	; (50cc <update_cache+0x34>)
    509c:	462b      	mov	r3, r5
    509e:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50a2:	429c      	cmp	r4, r3
    50a4:	d000      	beq.n	50a8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    50a6:	b904      	cbnz	r4, 50aa <update_cache+0x12>
    50a8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    50aa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    50ac:	b938      	cbnz	r0, 50be <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    50ae:	7b5a      	ldrb	r2, [r3, #13]
    50b0:	06d2      	lsls	r2, r2, #27
    50b2:	d104      	bne.n	50be <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    50b4:	69a2      	ldr	r2, [r4, #24]
    50b6:	b912      	cbnz	r2, 50be <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    50b8:	89da      	ldrh	r2, [r3, #14]
    50ba:	2a7f      	cmp	r2, #127	; 0x7f
    50bc:	d804      	bhi.n	50c8 <update_cache+0x30>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    50be:	429c      	cmp	r4, r3
    50c0:	d001      	beq.n	50c6 <update_cache+0x2e>
			z_reset_time_slice();
    50c2:	f7ff ffd3 	bl	506c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    50c6:	4623      	mov	r3, r4
    50c8:	626b      	str	r3, [r5, #36]	; 0x24
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    50ca:	bd38      	pop	{r3, r4, r5, pc}
    50cc:	2001670c 	.word	0x2001670c

000050d0 <unready_thread>:

	return thread->base.pended_on;
}

static void unready_thread(struct k_thread *thread)
{
    50d0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    50d2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    50d6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    50d8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    50da:	7b43      	ldrb	r3, [r0, #13]
    50dc:	da04      	bge.n	50e8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    50de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    50e2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    50e4:	f003 fcff 	bl	8ae6 <sys_dlist_remove>
	update_cache(thread == _current);
    50e8:	4b04      	ldr	r3, [pc, #16]	; (50fc <unready_thread+0x2c>)
    50ea:	6898      	ldr	r0, [r3, #8]
    50ec:	1a43      	subs	r3, r0, r1
    50ee:	4258      	negs	r0, r3
    50f0:	4158      	adcs	r0, r3
}
    50f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    50f6:	f7ff bfcf 	b.w	5098 <update_cache>
    50fa:	bf00      	nop
    50fc:	2001670c 	.word	0x2001670c

00005100 <pend>:
{
    5100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5104:	4606      	mov	r6, r0
    5106:	4615      	mov	r5, r2
    5108:	461c      	mov	r4, r3
	__asm__ volatile(
    510a:	f04f 0320 	mov.w	r3, #32
    510e:	f3ef 8711 	mrs	r7, BASEPRI
    5112:	f383 8811 	msr	BASEPRI, r3
    5116:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    511a:	f003 fcf6 	bl	8b0a <add_to_waitq_locked>
	__asm__ volatile(
    511e:	f387 8811 	msr	BASEPRI, r7
    5122:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5126:	f1b4 3fff 	cmp.w	r4, #4294967295
    512a:	bf08      	it	eq
    512c:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    5130:	d008      	beq.n	5144 <pend+0x44>
    5132:	462a      	mov	r2, r5
    5134:	4623      	mov	r3, r4
    5136:	f106 0018 	add.w	r0, r6, #24
    513a:	4903      	ldr	r1, [pc, #12]	; (5148 <pend+0x48>)
}
    513c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5140:	f000 bb40 	b.w	57c4 <z_add_timeout>
    5144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5148:	00008b5d 	.word	0x00008b5d

0000514c <move_thread_to_end_of_prio_q>:
{
    514c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    514e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5152:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5154:	2a00      	cmp	r2, #0
    5156:	7b43      	ldrb	r3, [r0, #13]
    5158:	da04      	bge.n	5164 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    515a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    515e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5160:	f003 fcc1 	bl	8ae6 <sys_dlist_remove>
	return list->head == list;
    5164:	4a15      	ldr	r2, [pc, #84]	; (51bc <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5166:	7b4b      	ldrb	r3, [r1, #13]
    5168:	4614      	mov	r4, r2
    516a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    516e:	734b      	strb	r3, [r1, #13]
    5170:	f854 3f28 	ldr.w	r3, [r4, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5174:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5176:	42a3      	cmp	r3, r4
    5178:	d107      	bne.n	518a <move_thread_to_end_of_prio_q+0x3e>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    517a:	e9c1 4000 	strd	r4, r0, [r1]

	tail->next = node;
    517e:	6001      	str	r1, [r0, #0]
	list->tail = node;
    5180:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    5182:	e012      	b.n	51aa <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
    5184:	4298      	cmp	r0, r3
    5186:	d0f8      	beq.n	517a <move_thread_to_end_of_prio_q+0x2e>
    5188:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    518a:	2b00      	cmp	r3, #0
    518c:	d0f5      	beq.n	517a <move_thread_to_end_of_prio_q+0x2e>
	int32_t b1 = thread_1->base.prio;
    518e:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5192:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    5196:	42ae      	cmp	r6, r5
    5198:	d0f4      	beq.n	5184 <move_thread_to_end_of_prio_q+0x38>
		return b2 - b1;
    519a:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    519c:	2d00      	cmp	r5, #0
    519e:	ddf1      	ble.n	5184 <move_thread_to_end_of_prio_q+0x38>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    51a0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    51a2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    51a6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    51a8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    51aa:	6890      	ldr	r0, [r2, #8]
}
    51ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    51b0:	1a43      	subs	r3, r0, r1
    51b2:	4258      	negs	r0, r3
    51b4:	4158      	adcs	r0, r3
    51b6:	f7ff bf6f 	b.w	5098 <update_cache>
    51ba:	bf00      	nop
    51bc:	2001670c 	.word	0x2001670c

000051c0 <ready_thread>:
{
    51c0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    51c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
    51c6:	7b43      	ldrb	r3, [r0, #13]
    51c8:	2a00      	cmp	r2, #0
    51ca:	db2b      	blt.n	5224 <ready_thread+0x64>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    51cc:	06da      	lsls	r2, r3, #27
    51ce:	d129      	bne.n	5224 <ready_thread+0x64>
    51d0:	6982      	ldr	r2, [r0, #24]
    51d2:	bb3a      	cbnz	r2, 5224 <ready_thread+0x64>
	return list->head == list;
    51d4:	4a14      	ldr	r2, [pc, #80]	; (5228 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    51d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    51da:	4614      	mov	r4, r2
    51dc:	7343      	strb	r3, [r0, #13]
    51de:	f854 3f28 	ldr.w	r3, [r4, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51e2:	42a3      	cmp	r3, r4
    51e4:	d11c      	bne.n	5220 <ready_thread+0x60>
	return (node == list->tail) ? NULL : node->next;
    51e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	node->prev = tail;
    51e8:	e9c0 4100 	strd	r4, r1, [r0]
	tail->next = node;
    51ec:	6008      	str	r0, [r1, #0]
	list->tail = node;
    51ee:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    51f0:	e012      	b.n	5218 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    51f2:	428b      	cmp	r3, r1
    51f4:	d0f8      	beq.n	51e8 <ready_thread+0x28>
    51f6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    51f8:	2b00      	cmp	r3, #0
    51fa:	d0f5      	beq.n	51e8 <ready_thread+0x28>
	int32_t b1 = thread_1->base.prio;
    51fc:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5200:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    5204:	42ae      	cmp	r6, r5
    5206:	d0f4      	beq.n	51f2 <ready_thread+0x32>
		return b2 - b1;
    5208:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    520a:	2d00      	cmp	r5, #0
    520c:	ddf1      	ble.n	51f2 <ready_thread+0x32>
	sys_dnode_t *const prev = successor->prev;
    520e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5210:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5214:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5216:	6058      	str	r0, [r3, #4]
		update_cache(0);
    5218:	2000      	movs	r0, #0
}
    521a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    521c:	f7ff bf3c 	b.w	5098 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5220:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    5222:	e7e9      	b.n	51f8 <ready_thread+0x38>
}
    5224:	bc70      	pop	{r4, r5, r6}
    5226:	4770      	bx	lr
    5228:	2001670c 	.word	0x2001670c

0000522c <k_sched_time_slice_set>:
{
    522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5230:	4604      	mov	r4, r0
    5232:	460d      	mov	r5, r1
	__asm__ volatile(
    5234:	f04f 0320 	mov.w	r3, #32
    5238:	f3ef 8811 	mrs	r8, BASEPRI
    523c:	f383 8811 	msr	BASEPRI, r3
    5240:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    5244:	2600      	movs	r6, #0
    5246:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    524a:	f240 30e7 	movw	r0, #999	; 0x3e7
    524e:	4631      	mov	r1, r6
    5250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5254:	2300      	movs	r3, #0
    5256:	fbe4 0107 	umlal	r0, r1, r4, r7
    525a:	f7fa ff73 	bl	144 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    525e:	42b4      	cmp	r4, r6
    5260:	dd02      	ble.n	5268 <k_sched_time_slice_set+0x3c>
			slice_time = MAX(2, slice_time);
    5262:	2802      	cmp	r0, #2
    5264:	bfb8      	it	lt
    5266:	2002      	movlt	r0, #2
		_current_cpu->slice_ticks = 0;
    5268:	4b06      	ldr	r3, [pc, #24]	; (5284 <k_sched_time_slice_set+0x58>)
    526a:	611e      	str	r6, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
    526c:	4b06      	ldr	r3, [pc, #24]	; (5288 <k_sched_time_slice_set+0x5c>)
    526e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    5270:	4b06      	ldr	r3, [pc, #24]	; (528c <k_sched_time_slice_set+0x60>)
    5272:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    5274:	f7ff fefa 	bl	506c <z_reset_time_slice>
	__asm__ volatile(
    5278:	f388 8811 	msr	BASEPRI, r8
    527c:	f3bf 8f6f 	isb	sy
}
    5280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5284:	2001670c 	.word	0x2001670c
    5288:	20016748 	.word	0x20016748
    528c:	20016744 	.word	0x20016744

00005290 <z_time_slice>:
{
    5290:	4601      	mov	r1, r0
    5292:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5294:	f04f 0320 	mov.w	r3, #32
    5298:	f3ef 8411 	mrs	r4, BASEPRI
    529c:	f383 8811 	msr	BASEPRI, r3
    52a0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    52a4:	4b15      	ldr	r3, [pc, #84]	; (52fc <z_time_slice+0x6c>)
    52a6:	4a16      	ldr	r2, [pc, #88]	; (5300 <z_time_slice+0x70>)
    52a8:	6898      	ldr	r0, [r3, #8]
    52aa:	6815      	ldr	r5, [r2, #0]
    52ac:	42a8      	cmp	r0, r5
    52ae:	d106      	bne.n	52be <z_time_slice+0x2e>
			z_reset_time_slice();
    52b0:	f7ff fedc 	bl	506c <z_reset_time_slice>
	__asm__ volatile(
    52b4:	f384 8811 	msr	BASEPRI, r4
    52b8:	f3bf 8f6f 	isb	sy
}
    52bc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    52be:	2500      	movs	r5, #0
    52c0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    52c2:	4a10      	ldr	r2, [pc, #64]	; (5304 <z_time_slice+0x74>)
    52c4:	6812      	ldr	r2, [r2, #0]
    52c6:	b1ba      	cbz	r2, 52f8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    52c8:	89c2      	ldrh	r2, [r0, #14]
    52ca:	2a7f      	cmp	r2, #127	; 0x7f
    52cc:	d814      	bhi.n	52f8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    52ce:	7b42      	ldrb	r2, [r0, #13]
    52d0:	06d2      	lsls	r2, r2, #27
    52d2:	d111      	bne.n	52f8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    52d4:	4a0c      	ldr	r2, [pc, #48]	; (5308 <z_time_slice+0x78>)
    52d6:	f990 500e 	ldrsb.w	r5, [r0, #14]
    52da:	6812      	ldr	r2, [r2, #0]
    52dc:	4295      	cmp	r5, r2
    52de:	db0b      	blt.n	52f8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    52e0:	4a0a      	ldr	r2, [pc, #40]	; (530c <z_time_slice+0x7c>)
    52e2:	4290      	cmp	r0, r2
    52e4:	d008      	beq.n	52f8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    52e6:	691a      	ldr	r2, [r3, #16]
    52e8:	428a      	cmp	r2, r1
    52ea:	dc02      	bgt.n	52f2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    52ec:	f7ff ff2e 	bl	514c <move_thread_to_end_of_prio_q>
    52f0:	e7de      	b.n	52b0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    52f2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    52f4:	611a      	str	r2, [r3, #16]
    52f6:	e7dd      	b.n	52b4 <z_time_slice+0x24>
    52f8:	2200      	movs	r2, #0
    52fa:	e7fb      	b.n	52f4 <z_time_slice+0x64>
    52fc:	2001670c 	.word	0x2001670c
    5300:	20016740 	.word	0x20016740
    5304:	20016748 	.word	0x20016748
    5308:	20016744 	.word	0x20016744
    530c:	20014668 	.word	0x20014668

00005310 <z_pend_curr>:
{
    5310:	b510      	push	{r4, lr}
    5312:	460c      	mov	r4, r1
	pending_current = _current;
    5314:	4b06      	ldr	r3, [pc, #24]	; (5330 <z_pend_curr+0x20>)
{
    5316:	4611      	mov	r1, r2
	pending_current = _current;
    5318:	6898      	ldr	r0, [r3, #8]
    531a:	4b06      	ldr	r3, [pc, #24]	; (5334 <z_pend_curr+0x24>)
    531c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    531e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5322:	f7ff feed 	bl	5100 <pend>
	ret = arch_swap(key);
    5326:	4620      	mov	r0, r4
}
    5328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    532c:	f7fd be4a 	b.w	2fc4 <arch_swap>
    5330:	2001670c 	.word	0x2001670c
    5334:	20016740 	.word	0x20016740

00005338 <z_set_prio>:
{
    5338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    533a:	4604      	mov	r4, r0
	__asm__ volatile(
    533c:	f04f 0320 	mov.w	r3, #32
    5340:	f3ef 8711 	mrs	r7, BASEPRI
    5344:	f383 8811 	msr	BASEPRI, r3
    5348:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    534c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    534e:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5350:	06da      	lsls	r2, r3, #27
    5352:	d117      	bne.n	5384 <z_set_prio+0x4c>
    5354:	6982      	ldr	r2, [r0, #24]
    5356:	b9aa      	cbnz	r2, 5384 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    535c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    535e:	f003 fbc2 	bl	8ae6 <sys_dlist_remove>
	return list->head == list;
    5362:	4a18      	ldr	r2, [pc, #96]	; (53c4 <z_set_prio+0x8c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5364:	7b43      	ldrb	r3, [r0, #13]
    5366:	4615      	mov	r5, r2
    5368:	f063 037f 	orn	r3, r3, #127	; 0x7f
    536c:	7343      	strb	r3, [r0, #13]
    536e:	f855 3f28 	ldr.w	r3, [r5, #40]!
				thread->base.prio = prio;
    5372:	7381      	strb	r1, [r0, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5374:	42ab      	cmp	r3, r5
    5376:	d122      	bne.n	53be <z_set_prio+0x86>
	return (node == list->tail) ? NULL : node->next;
    5378:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	node->prev = tail;
    537a:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    537e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5380:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    5382:	e017      	b.n	53b4 <z_set_prio+0x7c>
    5384:	2000      	movs	r0, #0
			thread->base.prio = prio;
    5386:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    5388:	f387 8811 	msr	BASEPRI, r7
    538c:	f3bf 8f6f 	isb	sy
}
    5390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5392:	4283      	cmp	r3, r0
    5394:	d0f1      	beq.n	537a <z_set_prio+0x42>
    5396:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5398:	2b00      	cmp	r3, #0
    539a:	d0ee      	beq.n	537a <z_set_prio+0x42>
	int32_t b2 = thread_2->base.prio;
    539c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    53a0:	42b1      	cmp	r1, r6
    53a2:	d0f6      	beq.n	5392 <z_set_prio+0x5a>
		return b2 - b1;
    53a4:	1a76      	subs	r6, r6, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    53a6:	2e00      	cmp	r6, #0
    53a8:	ddf3      	ble.n	5392 <z_set_prio+0x5a>
	sys_dnode_t *const prev = successor->prev;
    53aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    53ac:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    53b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    53b2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    53b4:	2001      	movs	r0, #1
    53b6:	f7ff fe6f 	bl	5098 <update_cache>
    53ba:	2001      	movs	r0, #1
    53bc:	e7e4      	b.n	5388 <z_set_prio+0x50>
	return (node == list->tail) ? NULL : node->next;
    53be:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    53c0:	e7ea      	b.n	5398 <z_set_prio+0x60>
    53c2:	bf00      	nop
    53c4:	2001670c 	.word	0x2001670c

000053c8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    53c8:	b949      	cbnz	r1, 53de <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    53ca:	f3ef 8005 	mrs	r0, IPSR
    53ce:	b930      	cbnz	r0, 53de <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    53d0:	4b05      	ldr	r3, [pc, #20]	; (53e8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    53d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    53d4:	689b      	ldr	r3, [r3, #8]
    53d6:	429a      	cmp	r2, r3
    53d8:	d001      	beq.n	53de <z_reschedule+0x16>
    53da:	f7fd bdf3 	b.w	2fc4 <arch_swap>
    53de:	f381 8811 	msr	BASEPRI, r1
    53e2:	f3bf 8f6f 	isb	sy
}
    53e6:	4770      	bx	lr
    53e8:	2001670c 	.word	0x2001670c

000053ec <z_sched_start>:
{
    53ec:	b510      	push	{r4, lr}
	__asm__ volatile(
    53ee:	f04f 0220 	mov.w	r2, #32
    53f2:	f3ef 8411 	mrs	r4, BASEPRI
    53f6:	f382 8811 	msr	BASEPRI, r2
    53fa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    53fe:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5400:	0751      	lsls	r1, r2, #29
    5402:	d404      	bmi.n	540e <z_sched_start+0x22>
	__asm__ volatile(
    5404:	f384 8811 	msr	BASEPRI, r4
    5408:	f3bf 8f6f 	isb	sy
}
    540c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    540e:	f022 0204 	bic.w	r2, r2, #4
    5412:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5414:	f7ff fed4 	bl	51c0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5418:	4621      	mov	r1, r4
}
    541a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    541e:	4801      	ldr	r0, [pc, #4]	; (5424 <z_sched_start+0x38>)
    5420:	f7ff bfd2 	b.w	53c8 <z_reschedule>
    5424:	20016d30 	.word	0x20016d30

00005428 <z_impl_k_thread_suspend>:
{
    5428:	b570      	push	{r4, r5, r6, lr}
    542a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    542c:	3018      	adds	r0, #24
    542e:	f003 fbf9 	bl	8c24 <z_abort_timeout>
	__asm__ volatile(
    5432:	f04f 0320 	mov.w	r3, #32
    5436:	f3ef 8611 	mrs	r6, BASEPRI
    543a:	f383 8811 	msr	BASEPRI, r3
    543e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5442:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5446:	7b63      	ldrb	r3, [r4, #13]
    5448:	2a00      	cmp	r2, #0
    544a:	da05      	bge.n	5458 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    544c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    5450:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5452:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5454:	f003 fb47 	bl	8ae6 <sys_dlist_remove>
		update_cache(thread == _current);
    5458:	4d0b      	ldr	r5, [pc, #44]	; (5488 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    545a:	7b63      	ldrb	r3, [r4, #13]
    545c:	68a8      	ldr	r0, [r5, #8]
    545e:	f043 0310 	orr.w	r3, r3, #16
    5462:	7363      	strb	r3, [r4, #13]
    5464:	1b03      	subs	r3, r0, r4
    5466:	4258      	negs	r0, r3
    5468:	4158      	adcs	r0, r3
    546a:	f7ff fe15 	bl	5098 <update_cache>
	__asm__ volatile(
    546e:	f386 8811 	msr	BASEPRI, r6
    5472:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5476:	68ab      	ldr	r3, [r5, #8]
    5478:	42a3      	cmp	r3, r4
    547a:	d103      	bne.n	5484 <z_impl_k_thread_suspend+0x5c>
}
    547c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5480:	f003 bbc6 	b.w	8c10 <z_reschedule_unlocked>
}
    5484:	bd70      	pop	{r4, r5, r6, pc}
    5486:	bf00      	nop
    5488:	2001670c 	.word	0x2001670c

0000548c <k_sched_lock>:
	__asm__ volatile(
    548c:	f04f 0320 	mov.w	r3, #32
    5490:	f3ef 8111 	mrs	r1, BASEPRI
    5494:	f383 8811 	msr	BASEPRI, r3
    5498:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    549c:	4b04      	ldr	r3, [pc, #16]	; (54b0 <k_sched_lock+0x24>)
    549e:	689a      	ldr	r2, [r3, #8]
    54a0:	7bd3      	ldrb	r3, [r2, #15]
    54a2:	3b01      	subs	r3, #1
    54a4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    54a6:	f381 8811 	msr	BASEPRI, r1
    54aa:	f3bf 8f6f 	isb	sy
}
    54ae:	4770      	bx	lr
    54b0:	2001670c 	.word	0x2001670c

000054b4 <k_sched_unlock>:
{
    54b4:	b510      	push	{r4, lr}
	__asm__ volatile(
    54b6:	f04f 0320 	mov.w	r3, #32
    54ba:	f3ef 8411 	mrs	r4, BASEPRI
    54be:	f383 8811 	msr	BASEPRI, r3
    54c2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    54c6:	4b08      	ldr	r3, [pc, #32]	; (54e8 <k_sched_unlock+0x34>)
		update_cache(0);
    54c8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    54ca:	689a      	ldr	r2, [r3, #8]
    54cc:	7bd3      	ldrb	r3, [r2, #15]
    54ce:	3301      	adds	r3, #1
    54d0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    54d2:	f7ff fde1 	bl	5098 <update_cache>
	__asm__ volatile(
    54d6:	f384 8811 	msr	BASEPRI, r4
    54da:	f3bf 8f6f 	isb	sy
}
    54de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    54e2:	f003 bb95 	b.w	8c10 <z_reschedule_unlocked>
    54e6:	bf00      	nop
    54e8:	2001670c 	.word	0x2001670c

000054ec <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    54ec:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    54ee:	4b04      	ldr	r3, [pc, #16]	; (5500 <z_sched_init+0x14>)
    54f0:	4608      	mov	r0, r1
    54f2:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    54f6:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    54fa:	f7ff be97 	b.w	522c <k_sched_time_slice_set>
    54fe:	bf00      	nop
    5500:	2001670c 	.word	0x2001670c

00005504 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5506:	f04f 0320 	mov.w	r3, #32
    550a:	f3ef 8611 	mrs	r6, BASEPRI
    550e:	f383 8811 	msr	BASEPRI, r3
    5512:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    5516:	4919      	ldr	r1, [pc, #100]	; (557c <z_impl_k_yield+0x78>)
	return list->head == list;
    5518:	460c      	mov	r4, r1
    551a:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    551c:	7b43      	ldrb	r3, [r0, #13]
    551e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5522:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5524:	f003 fadf 	bl	8ae6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5528:	7b43      	ldrb	r3, [r0, #13]
    552a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    552e:	7343      	strb	r3, [r0, #13]
    5530:	f854 3f28 	ldr.w	r3, [r4, #40]!
	return (node == list->tail) ? NULL : node->next;
    5534:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5536:	42a3      	cmp	r3, r4
    5538:	d107      	bne.n	554a <z_impl_k_yield+0x46>
	node->prev = tail;
    553a:	e9c0 4200 	strd	r4, r2, [r0]
	tail->next = node;
    553e:	6010      	str	r0, [r2, #0]
	list->tail = node;
    5540:	62c8      	str	r0, [r1, #44]	; 0x2c
}
    5542:	e012      	b.n	556a <z_impl_k_yield+0x66>
	return (node == list->tail) ? NULL : node->next;
    5544:	4293      	cmp	r3, r2
    5546:	d0f8      	beq.n	553a <z_impl_k_yield+0x36>
    5548:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    554a:	2b00      	cmp	r3, #0
    554c:	d0f5      	beq.n	553a <z_impl_k_yield+0x36>
	int32_t b1 = thread_1->base.prio;
    554e:	f990 700e 	ldrsb.w	r7, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5552:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    5556:	42af      	cmp	r7, r5
    5558:	d0f4      	beq.n	5544 <z_impl_k_yield+0x40>
		return b2 - b1;
    555a:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    555c:	2d00      	cmp	r5, #0
    555e:	ddf1      	ble.n	5544 <z_impl_k_yield+0x40>
	sys_dnode_t *const prev = successor->prev;
    5560:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5562:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5566:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5568:	6058      	str	r0, [r3, #4]
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
	update_cache(1);
    556a:	2001      	movs	r0, #1
    556c:	f7ff fd94 	bl	5098 <update_cache>
    5570:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    5572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5576:	f7fd bd25 	b.w	2fc4 <arch_swap>
    557a:	bf00      	nop
    557c:	2001670c 	.word	0x2001670c

00005580 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5580:	ea50 0301 	orrs.w	r3, r0, r1
{
    5584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5588:	4605      	mov	r5, r0
    558a:	460e      	mov	r6, r1
	if (ticks == 0) {
    558c:	d103      	bne.n	5596 <z_tick_sleep+0x16>
	z_impl_k_yield();
    558e:	f7ff ffb9 	bl	5504 <z_impl_k_yield>
		k_yield();
		return 0;
    5592:	2000      	movs	r0, #0
    5594:	e033      	b.n	55fe <z_tick_sleep+0x7e>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    5596:	f06f 0401 	mvn.w	r4, #1
    559a:	f04f 33ff 	mov.w	r3, #4294967295
    559e:	1a24      	subs	r4, r4, r0
    55a0:	eb63 0301 	sbc.w	r3, r3, r1
    55a4:	2c01      	cmp	r4, #1
    55a6:	f173 0300 	sbcs.w	r3, r3, #0
    55aa:	da02      	bge.n	55b2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    55ac:	f003 fb7c 	bl	8ca8 <sys_clock_tick_get_32>
    55b0:	1944      	adds	r4, r0, r5
    55b2:	f04f 0320 	mov.w	r3, #32
    55b6:	f3ef 8811 	mrs	r8, BASEPRI
    55ba:	f383 8811 	msr	BASEPRI, r3
    55be:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    55c2:	4f10      	ldr	r7, [pc, #64]	; (5604 <z_tick_sleep+0x84>)
    55c4:	4b10      	ldr	r3, [pc, #64]	; (5608 <z_tick_sleep+0x88>)
    55c6:	68b8      	ldr	r0, [r7, #8]
    55c8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    55ca:	f7ff fd81 	bl	50d0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    55ce:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    55d0:	490e      	ldr	r1, [pc, #56]	; (560c <z_tick_sleep+0x8c>)
    55d2:	462a      	mov	r2, r5
    55d4:	4633      	mov	r3, r6
    55d6:	3018      	adds	r0, #24
    55d8:	f000 f8f4 	bl	57c4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    55dc:	68ba      	ldr	r2, [r7, #8]
    55de:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    55e0:	7b53      	ldrb	r3, [r2, #13]
    55e2:	f043 0310 	orr.w	r3, r3, #16
    55e6:	7353      	strb	r3, [r2, #13]
    55e8:	f7fd fcec 	bl	2fc4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    55ec:	f003 fb5c 	bl	8ca8 <sys_clock_tick_get_32>
    55f0:	1a20      	subs	r0, r4, r0
    55f2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    55f6:	2801      	cmp	r0, #1
    55f8:	f173 0300 	sbcs.w	r3, r3, #0
    55fc:	dbc9      	blt.n	5592 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    55fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5602:	bf00      	nop
    5604:	2001670c 	.word	0x2001670c
    5608:	20016740 	.word	0x20016740
    560c:	00008b5d 	.word	0x00008b5d

00005610 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5610:	f1b1 3fff 	cmp.w	r1, #4294967295
    5614:	bf08      	it	eq
    5616:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    561a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    561c:	d106      	bne.n	562c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    561e:	4b08      	ldr	r3, [pc, #32]	; (5640 <z_impl_k_sleep+0x30>)
    5620:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5622:	f7ff ff01 	bl	5428 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5626:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    562a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    562c:	f7ff ffa8 	bl	5580 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    5630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5634:	fb80 0303 	smull	r0, r3, r0, r3
    5638:	0bc0      	lsrs	r0, r0, #15
    563a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    563e:	e7f4      	b.n	562a <z_impl_k_sleep+0x1a>
    5640:	2001670c 	.word	0x2001670c

00005644 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5644:	4b01      	ldr	r3, [pc, #4]	; (564c <z_impl_k_current_get+0x8>)
    5646:	6898      	ldr	r0, [r3, #8]
    5648:	4770      	bx	lr
    564a:	bf00      	nop
    564c:	2001670c 	.word	0x2001670c

00005650 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5654:	4604      	mov	r4, r0
    5656:	f04f 0320 	mov.w	r3, #32
    565a:	f3ef 8611 	mrs	r6, BASEPRI
    565e:	f383 8811 	msr	BASEPRI, r3
    5662:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5666:	7b43      	ldrb	r3, [r0, #13]
    5668:	071a      	lsls	r2, r3, #28
    566a:	d505      	bpl.n	5678 <z_thread_abort+0x28>
	__asm__ volatile(
    566c:	f386 8811 	msr	BASEPRI, r6
    5670:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5678:	f023 0220 	bic.w	r2, r3, #32
    567c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5680:	09d2      	lsrs	r2, r2, #7
    5682:	d120      	bne.n	56c6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5684:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5686:	68a3      	ldr	r3, [r4, #8]
    5688:	b113      	cbz	r3, 5690 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    568a:	4620      	mov	r0, r4
    568c:	f003 fa33 	bl	8af6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5690:	f104 0018 	add.w	r0, r4, #24
    5694:	f003 fac6 	bl	8c24 <z_abort_timeout>
    5698:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    569c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    56a0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56a2:	42bd      	cmp	r5, r7
    56a4:	d000      	beq.n	56a8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    56a6:	b9b5      	cbnz	r5, 56d6 <z_thread_abort+0x86>
		update_cache(1);
    56a8:	2001      	movs	r0, #1
    56aa:	f7ff fcf5 	bl	5098 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    56ae:	4b10      	ldr	r3, [pc, #64]	; (56f0 <z_thread_abort+0xa0>)
    56b0:	689b      	ldr	r3, [r3, #8]
    56b2:	42a3      	cmp	r3, r4
    56b4:	d1da      	bne.n	566c <z_thread_abort+0x1c>
    56b6:	f3ef 8305 	mrs	r3, IPSR
    56ba:	2b00      	cmp	r3, #0
    56bc:	d1d6      	bne.n	566c <z_thread_abort+0x1c>
    56be:	4630      	mov	r0, r6
    56c0:	f7fd fc80 	bl	2fc4 <arch_swap>
	return ret;
    56c4:	e7d2      	b.n	566c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    56c6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    56ca:	f043 0308 	orr.w	r3, r3, #8
    56ce:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    56d0:	f003 fa09 	bl	8ae6 <sys_dlist_remove>
}
    56d4:	e7d7      	b.n	5686 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    56d6:	4628      	mov	r0, r5
    56d8:	f003 fa0d 	bl	8af6 <unpend_thread_no_timeout>
    56dc:	f105 0018 	add.w	r0, r5, #24
    56e0:	f003 faa0 	bl	8c24 <z_abort_timeout>
		ready_thread(thread);
    56e4:	4628      	mov	r0, r5
    56e6:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    56ea:	f7ff fd69 	bl	51c0 <ready_thread>
    56ee:	e7d7      	b.n	56a0 <z_thread_abort+0x50>
    56f0:	2001670c 	.word	0x2001670c

000056f4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    56f4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    56f6:	4806      	ldr	r0, [pc, #24]	; (5710 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    56f8:	4a06      	ldr	r2, [pc, #24]	; (5714 <z_data_copy+0x20>)
    56fa:	4907      	ldr	r1, [pc, #28]	; (5718 <z_data_copy+0x24>)
    56fc:	1a12      	subs	r2, r2, r0
    56fe:	f002 fdf2 	bl	82e6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    5706:	4a05      	ldr	r2, [pc, #20]	; (571c <z_data_copy+0x28>)
    5708:	4905      	ldr	r1, [pc, #20]	; (5720 <z_data_copy+0x2c>)
    570a:	4806      	ldr	r0, [pc, #24]	; (5724 <z_data_copy+0x30>)
    570c:	f002 bdeb 	b.w	82e6 <memcpy>
    5710:	20014500 	.word	0x20014500
    5714:	20014664 	.word	0x20014664
    5718:	0000a3c4 	.word	0x0000a3c4
    571c:	00000000 	.word	0x00000000
    5720:	0000a3ac 	.word	0x0000a3ac
    5724:	20014500 	.word	0x20014500

00005728 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5728:	4b03      	ldr	r3, [pc, #12]	; (5738 <elapsed+0x10>)
    572a:	681b      	ldr	r3, [r3, #0]
    572c:	b90b      	cbnz	r3, 5732 <elapsed+0xa>
    572e:	f7fc be7b 	b.w	2428 <sys_clock_elapsed>
}
    5732:	2000      	movs	r0, #0
    5734:	4770      	bx	lr
    5736:	bf00      	nop
    5738:	2001674c 	.word	0x2001674c

0000573c <next_timeout>:
	return list->head == list;
    573c:	4b12      	ldr	r3, [pc, #72]	; (5788 <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
    573e:	b510      	push	{r4, lr}
    5740:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5742:	429c      	cmp	r4, r3
    5744:	d104      	bne.n	5750 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5746:	f7ff ffef 	bl	5728 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    574a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    574e:	e012      	b.n	5776 <next_timeout+0x3a>
	int32_t ticks_elapsed = elapsed();
    5750:	f7ff ffea 	bl	5728 <elapsed>
    5754:	4601      	mov	r1, r0
	int32_t ret = to == NULL ? MAX_WAIT
    5756:	2c00      	cmp	r4, #0
    5758:	d0f7      	beq.n	574a <next_timeout+0xe>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    575a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    575e:	1a40      	subs	r0, r0, r1
    5760:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5764:	2801      	cmp	r0, #1
    5766:	f173 0200 	sbcs.w	r2, r3, #0
    576a:	db0b      	blt.n	5784 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    576c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    5770:	f173 0300 	sbcs.w	r3, r3, #0
    5774:	dae9      	bge.n	574a <next_timeout+0xe>

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5776:	4b05      	ldr	r3, [pc, #20]	; (578c <next_timeout+0x50>)
    5778:	691b      	ldr	r3, [r3, #16]
    577a:	b113      	cbz	r3, 5782 <next_timeout+0x46>
    577c:	4298      	cmp	r0, r3
    577e:	bfa8      	it	ge
    5780:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5782:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    5784:	2000      	movs	r0, #0
    5786:	e7f6      	b.n	5776 <next_timeout+0x3a>
    5788:	200145ac 	.word	0x200145ac
    578c:	2001670c 	.word	0x2001670c

00005790 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    5790:	4a0b      	ldr	r2, [pc, #44]	; (57c0 <remove_timeout+0x30>)
{
    5792:	b530      	push	{r4, r5, lr}
    5794:	6852      	ldr	r2, [r2, #4]
    5796:	6803      	ldr	r3, [r0, #0]
    5798:	4290      	cmp	r0, r2
    579a:	d009      	beq.n	57b0 <remove_timeout+0x20>
	if (next(t) != NULL) {
    579c:	b143      	cbz	r3, 57b0 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    579e:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    57a2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    57a6:	1912      	adds	r2, r2, r4
    57a8:	eb41 0105 	adc.w	r1, r1, r5
    57ac:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    57b0:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    57b2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    57b4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    57b6:	2300      	movs	r3, #0
	node->prev = NULL;
    57b8:	e9c0 3300 	strd	r3, r3, [r0]
}
    57bc:	bd30      	pop	{r4, r5, pc}
    57be:	bf00      	nop
    57c0:	200145ac 	.word	0x200145ac

000057c4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    57c4:	f1b3 3fff 	cmp.w	r3, #4294967295
    57c8:	bf08      	it	eq
    57ca:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    57ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57d0:	4604      	mov	r4, r0
    57d2:	461d      	mov	r5, r3
    57d4:	4617      	mov	r7, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    57d6:	d05e      	beq.n	5896 <z_add_timeout+0xd2>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    57d8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    57da:	f04f 0320 	mov.w	r3, #32
    57de:	f3ef 8611 	mrs	r6, BASEPRI
    57e2:	f383 8811 	msr	BASEPRI, r3
    57e6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    57ea:	f06f 0301 	mvn.w	r3, #1
    57ee:	f04f 3eff 	mov.w	lr, #4294967295
    57f2:	1bda      	subs	r2, r3, r7
    57f4:	eb6e 0205 	sbc.w	r2, lr, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    57f8:	2a00      	cmp	r2, #0
    57fa:	db1e      	blt.n	583a <z_add_timeout+0x76>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    57fc:	492b      	ldr	r1, [pc, #172]	; (58ac <z_add_timeout+0xe8>)
    57fe:	e9d1 2000 	ldrd	r2, r0, [r1]
    5802:	1a9b      	subs	r3, r3, r2
    5804:	eb6e 0000 	sbc.w	r0, lr, r0
    5808:	1bda      	subs	r2, r3, r7
    580a:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    580e:	2a01      	cmp	r2, #1
    5810:	f170 0300 	sbcs.w	r3, r0, #0
    5814:	da01      	bge.n	581a <z_add_timeout+0x56>
    5816:	2201      	movs	r2, #1
    5818:	2000      	movs	r0, #0
    581a:	e9c4 2004 	strd	r2, r0, [r4, #16]
	return list->head == list;
    581e:	4a24      	ldr	r2, [pc, #144]	; (58b0 <z_add_timeout+0xec>)
    5820:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    5822:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5826:	4293      	cmp	r3, r2
    5828:	bf08      	it	eq
    582a:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    582c:	b973      	cbnz	r3, 584c <z_add_timeout+0x88>
	node->prev = tail;
    582e:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    5832:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5836:	6054      	str	r4, [r2, #4]
}
    5838:	e01a      	b.n	5870 <z_add_timeout+0xac>
			to->dticks = timeout.ticks + 1 + elapsed();
    583a:	f7ff ff75 	bl	5728 <elapsed>
    583e:	1c7a      	adds	r2, r7, #1
    5840:	f145 0500 	adc.w	r5, r5, #0
    5844:	1812      	adds	r2, r2, r0
    5846:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    584a:	e7e6      	b.n	581a <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
    584c:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    5850:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    5854:	4281      	cmp	r1, r0
    5856:	eb75 0e07 	sbcs.w	lr, r5, r7
    585a:	da1d      	bge.n	5898 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    585c:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    585e:	6859      	ldr	r1, [r3, #4]
    5860:	eb67 0705 	sbc.w	r7, r7, r5
    5864:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    5868:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    586c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    586e:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5870:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5872:	4293      	cmp	r3, r2
    5874:	d00b      	beq.n	588e <z_add_timeout+0xca>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5876:	429c      	cmp	r4, r3
    5878:	d109      	bne.n	588e <z_add_timeout+0xca>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    587a:	f7ff ff5f 	bl	573c <next_timeout>

			if (next_time == 0 ||
    587e:	b118      	cbz	r0, 5888 <z_add_timeout+0xc4>
			    _current_cpu->slice_ticks != next_time) {
    5880:	4b0c      	ldr	r3, [pc, #48]	; (58b4 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5882:	691b      	ldr	r3, [r3, #16]
    5884:	4283      	cmp	r3, r0
    5886:	d002      	beq.n	588e <z_add_timeout+0xca>
				sys_clock_set_timeout(next_time, false);
    5888:	2100      	movs	r1, #0
    588a:	f7fc fd9b 	bl	23c4 <sys_clock_set_timeout>
	__asm__ volatile(
    588e:	f386 8811 	msr	BASEPRI, r6
    5892:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    5898:	1a09      	subs	r1, r1, r0
    589a:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    589e:	4563      	cmp	r3, ip
    58a0:	e9c4 1504 	strd	r1, r5, [r4, #16]
    58a4:	d0c3      	beq.n	582e <z_add_timeout+0x6a>
    58a6:	681b      	ldr	r3, [r3, #0]
    58a8:	e7c0      	b.n	582c <z_add_timeout+0x68>
    58aa:	bf00      	nop
    58ac:	200147e8 	.word	0x200147e8
    58b0:	200145ac 	.word	0x200145ac
    58b4:	2001670c 	.word	0x2001670c

000058b8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    58b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    58bc:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    58be:	f7ff fce7 	bl	5290 <z_time_slice>
	__asm__ volatile(
    58c2:	f04f 0320 	mov.w	r3, #32
    58c6:	f3ef 8411 	mrs	r4, BASEPRI
    58ca:	f383 8811 	msr	BASEPRI, r3
    58ce:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    58d2:	4e24      	ldr	r6, [pc, #144]	; (5964 <sys_clock_announce+0xac>)
	return list->head == list;
    58d4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 596c <sys_clock_announce+0xb4>
    58d8:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    58da:	4d23      	ldr	r5, [pc, #140]	; (5968 <sys_clock_announce+0xb0>)
    58dc:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    58e0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58e2:	4540      	cmp	r0, r8
    58e4:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
    58e8:	e9d5 1e00 	ldrd	r1, lr, [r5]
    58ec:	d00b      	beq.n	5906 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    58ee:	b150      	cbz	r0, 5906 <sys_clock_announce+0x4e>
    58f0:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    58f4:	429a      	cmp	r2, r3
    58f6:	eb77 090c 	sbcs.w	r9, r7, ip
    58fa:	da16      	bge.n	592a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    58fc:	1a9b      	subs	r3, r3, r2
    58fe:	eb6c 0c07 	sbc.w	ip, ip, r7
    5902:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5906:	1851      	adds	r1, r2, r1
    5908:	eb4e 0707 	adc.w	r7, lr, r7
    590c:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
    5910:	2500      	movs	r5, #0
    5912:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5914:	f7ff ff12 	bl	573c <next_timeout>
    5918:	4629      	mov	r1, r5
    591a:	f7fc fd53 	bl	23c4 <sys_clock_set_timeout>
	__asm__ volatile(
    591e:	f384 8811 	msr	BASEPRI, r4
    5922:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    592a:	1859      	adds	r1, r3, r1
    592c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5930:	1ad3      	subs	r3, r2, r3
    5932:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5934:	2200      	movs	r2, #0
    5936:	2300      	movs	r3, #0
    5938:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    593c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5940:	f7ff ff26 	bl	5790 <remove_timeout>
    5944:	f384 8811 	msr	BASEPRI, r4
    5948:	f3bf 8f6f 	isb	sy
		t->fn(t);
    594c:	6883      	ldr	r3, [r0, #8]
    594e:	4798      	blx	r3
	__asm__ volatile(
    5950:	f04f 0320 	mov.w	r3, #32
    5954:	f3ef 8411 	mrs	r4, BASEPRI
    5958:	f383 8811 	msr	BASEPRI, r3
    595c:	f3bf 8f6f 	isb	sy
	return k;
    5960:	e7bc      	b.n	58dc <sys_clock_announce+0x24>
    5962:	bf00      	nop
    5964:	2001674c 	.word	0x2001674c
    5968:	200147e8 	.word	0x200147e8
    596c:	200145ac 	.word	0x200145ac

00005970 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5970:	b510      	push	{r4, lr}
    5972:	f04f 0320 	mov.w	r3, #32
    5976:	f3ef 8411 	mrs	r4, BASEPRI
    597a:	f383 8811 	msr	BASEPRI, r3
    597e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5982:	f7fc fd51 	bl	2428 <sys_clock_elapsed>
    5986:	4a05      	ldr	r2, [pc, #20]	; (599c <sys_clock_tick_get+0x2c>)
    5988:	e9d2 3100 	ldrd	r3, r1, [r2]
    598c:	18c0      	adds	r0, r0, r3
    598e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5992:	f384 8811 	msr	BASEPRI, r4
    5996:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    599a:	bd10      	pop	{r4, pc}
    599c:	200147e8 	.word	0x200147e8

000059a0 <nrf_cc3xx_platform_init_no_rng>:
    59a0:	b510      	push	{r4, lr}
    59a2:	4c0a      	ldr	r4, [pc, #40]	; (59cc <nrf_cc3xx_platform_init_no_rng+0x2c>)
    59a4:	6823      	ldr	r3, [r4, #0]
    59a6:	b11b      	cbz	r3, 59b0 <nrf_cc3xx_platform_init_no_rng+0x10>
    59a8:	2301      	movs	r3, #1
    59aa:	2000      	movs	r0, #0
    59ac:	6023      	str	r3, [r4, #0]
    59ae:	bd10      	pop	{r4, pc}
    59b0:	f000 f8d0 	bl	5b54 <CC_LibInitNoRng>
    59b4:	2800      	cmp	r0, #0
    59b6:	d0f7      	beq.n	59a8 <nrf_cc3xx_platform_init_no_rng+0x8>
    59b8:	3801      	subs	r0, #1
    59ba:	2806      	cmp	r0, #6
    59bc:	d803      	bhi.n	59c6 <nrf_cc3xx_platform_init_no_rng+0x26>
    59be:	4b04      	ldr	r3, [pc, #16]	; (59d0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    59c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    59c4:	bd10      	pop	{r4, pc}
    59c6:	4803      	ldr	r0, [pc, #12]	; (59d4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    59c8:	bd10      	pop	{r4, pc}
    59ca:	bf00      	nop
    59cc:	20016750 	.word	0x20016750
    59d0:	00009324 	.word	0x00009324
    59d4:	ffff8ffe 	.word	0xffff8ffe

000059d8 <nrf_cc3xx_platform_abort>:
    59d8:	f3bf 8f4f 	dsb	sy
    59dc:	4905      	ldr	r1, [pc, #20]	; (59f4 <nrf_cc3xx_platform_abort+0x1c>)
    59de:	4b06      	ldr	r3, [pc, #24]	; (59f8 <nrf_cc3xx_platform_abort+0x20>)
    59e0:	68ca      	ldr	r2, [r1, #12]
    59e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    59e6:	4313      	orrs	r3, r2
    59e8:	60cb      	str	r3, [r1, #12]
    59ea:	f3bf 8f4f 	dsb	sy
    59ee:	bf00      	nop
    59f0:	e7fd      	b.n	59ee <nrf_cc3xx_platform_abort+0x16>
    59f2:	bf00      	nop
    59f4:	e000ed00 	.word	0xe000ed00
    59f8:	05fa0004 	.word	0x05fa0004

000059fc <CC_PalAbort>:
    59fc:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    5a00:	2100      	movs	r1, #0
    5a02:	b430      	push	{r4, r5}
    5a04:	4a06      	ldr	r2, [pc, #24]	; (5a20 <CC_PalAbort+0x24>)
    5a06:	4d07      	ldr	r5, [pc, #28]	; (5a24 <CC_PalAbort+0x28>)
    5a08:	4c07      	ldr	r4, [pc, #28]	; (5a28 <CC_PalAbort+0x2c>)
    5a0a:	602b      	str	r3, [r5, #0]
    5a0c:	6013      	str	r3, [r2, #0]
    5a0e:	6023      	str	r3, [r4, #0]
    5a10:	4a06      	ldr	r2, [pc, #24]	; (5a2c <CC_PalAbort+0x30>)
    5a12:	4c07      	ldr	r4, [pc, #28]	; (5a30 <CC_PalAbort+0x34>)
    5a14:	60eb      	str	r3, [r5, #12]
    5a16:	6863      	ldr	r3, [r4, #4]
    5a18:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    5a1c:	bc30      	pop	{r4, r5}
    5a1e:	4718      	bx	r3
    5a20:	50841404 	.word	0x50841404
    5a24:	50841400 	.word	0x50841400
    5a28:	50841408 	.word	0x50841408
    5a2c:	50840000 	.word	0x50840000
    5a30:	200145b4 	.word	0x200145b4

00005a34 <nrf_cc3xx_platform_set_abort>:
    5a34:	4b02      	ldr	r3, [pc, #8]	; (5a40 <nrf_cc3xx_platform_set_abort+0xc>)
    5a36:	e9d0 1200 	ldrd	r1, r2, [r0]
    5a3a:	e9c3 1200 	strd	r1, r2, [r3]
    5a3e:	4770      	bx	lr
    5a40:	200145b4 	.word	0x200145b4

00005a44 <mutex_free>:
    5a44:	b510      	push	{r4, lr}
    5a46:	4604      	mov	r4, r0
    5a48:	b130      	cbz	r0, 5a58 <mutex_free+0x14>
    5a4a:	6863      	ldr	r3, [r4, #4]
    5a4c:	06db      	lsls	r3, r3, #27
    5a4e:	d502      	bpl.n	5a56 <mutex_free+0x12>
    5a50:	2300      	movs	r3, #0
    5a52:	6023      	str	r3, [r4, #0]
    5a54:	6063      	str	r3, [r4, #4]
    5a56:	bd10      	pop	{r4, pc}
    5a58:	4b02      	ldr	r3, [pc, #8]	; (5a64 <mutex_free+0x20>)
    5a5a:	4803      	ldr	r0, [pc, #12]	; (5a68 <mutex_free+0x24>)
    5a5c:	685b      	ldr	r3, [r3, #4]
    5a5e:	4798      	blx	r3
    5a60:	e7f3      	b.n	5a4a <mutex_free+0x6>
    5a62:	bf00      	nop
    5a64:	200145b4 	.word	0x200145b4
    5a68:	00009340 	.word	0x00009340

00005a6c <mutex_unlock>:
    5a6c:	b168      	cbz	r0, 5a8a <mutex_unlock+0x1e>
    5a6e:	6843      	ldr	r3, [r0, #4]
    5a70:	b13b      	cbz	r3, 5a82 <mutex_unlock+0x16>
    5a72:	06db      	lsls	r3, r3, #27
    5a74:	d507      	bpl.n	5a86 <mutex_unlock+0x1a>
    5a76:	f3bf 8f5f 	dmb	sy
    5a7a:	2300      	movs	r3, #0
    5a7c:	6003      	str	r3, [r0, #0]
    5a7e:	4618      	mov	r0, r3
    5a80:	4770      	bx	lr
    5a82:	4803      	ldr	r0, [pc, #12]	; (5a90 <mutex_unlock+0x24>)
    5a84:	4770      	bx	lr
    5a86:	4803      	ldr	r0, [pc, #12]	; (5a94 <mutex_unlock+0x28>)
    5a88:	4770      	bx	lr
    5a8a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5a8e:	4770      	bx	lr
    5a90:	ffff8fea 	.word	0xffff8fea
    5a94:	ffff8fe9 	.word	0xffff8fe9

00005a98 <mutex_init>:
    5a98:	b510      	push	{r4, lr}
    5a9a:	4604      	mov	r4, r0
    5a9c:	b120      	cbz	r0, 5aa8 <mutex_init+0x10>
    5a9e:	2200      	movs	r2, #0
    5aa0:	2311      	movs	r3, #17
    5aa2:	6022      	str	r2, [r4, #0]
    5aa4:	6063      	str	r3, [r4, #4]
    5aa6:	bd10      	pop	{r4, pc}
    5aa8:	4801      	ldr	r0, [pc, #4]	; (5ab0 <mutex_init+0x18>)
    5aaa:	f7ff ffa7 	bl	59fc <CC_PalAbort>
    5aae:	e7f6      	b.n	5a9e <mutex_init+0x6>
    5ab0:	00009368 	.word	0x00009368

00005ab4 <mutex_lock>:
    5ab4:	b1a0      	cbz	r0, 5ae0 <mutex_lock+0x2c>
    5ab6:	6843      	ldr	r3, [r0, #4]
    5ab8:	b183      	cbz	r3, 5adc <mutex_lock+0x28>
    5aba:	06db      	lsls	r3, r3, #27
    5abc:	d50c      	bpl.n	5ad8 <mutex_lock+0x24>
    5abe:	2201      	movs	r2, #1
    5ac0:	e8d0 3fef 	ldaex	r3, [r0]
    5ac4:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5ac8:	2900      	cmp	r1, #0
    5aca:	d1f9      	bne.n	5ac0 <mutex_lock+0xc>
    5acc:	2b01      	cmp	r3, #1
    5ace:	d0f7      	beq.n	5ac0 <mutex_lock+0xc>
    5ad0:	f3bf 8f5f 	dmb	sy
    5ad4:	2000      	movs	r0, #0
    5ad6:	4770      	bx	lr
    5ad8:	4803      	ldr	r0, [pc, #12]	; (5ae8 <mutex_lock+0x34>)
    5ada:	4770      	bx	lr
    5adc:	4803      	ldr	r0, [pc, #12]	; (5aec <mutex_lock+0x38>)
    5ade:	4770      	bx	lr
    5ae0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5ae4:	4770      	bx	lr
    5ae6:	bf00      	nop
    5ae8:	ffff8fe9 	.word	0xffff8fe9
    5aec:	ffff8fea 	.word	0xffff8fea

00005af0 <nrf_cc3xx_platform_set_mutexes>:
    5af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5af4:	4c14      	ldr	r4, [pc, #80]	; (5b48 <nrf_cc3xx_platform_set_mutexes+0x58>)
    5af6:	6802      	ldr	r2, [r0, #0]
    5af8:	68c3      	ldr	r3, [r0, #12]
    5afa:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    5afe:	e9c4 6302 	strd	r6, r3, [r4, #8]
    5b02:	e9c4 2500 	strd	r2, r5, [r4]
    5b06:	4b11      	ldr	r3, [pc, #68]	; (5b4c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5b08:	680e      	ldr	r6, [r1, #0]
    5b0a:	6848      	ldr	r0, [r1, #4]
    5b0c:	4d10      	ldr	r5, [pc, #64]	; (5b50 <nrf_cc3xx_platform_set_mutexes+0x60>)
    5b0e:	e9c3 6000 	strd	r6, r0, [r3]
    5b12:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    5b16:	6908      	ldr	r0, [r1, #16]
    5b18:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    5b1c:	e9c3 7602 	strd	r7, r6, [r3, #8]
    5b20:	6118      	str	r0, [r3, #16]
    5b22:	06cb      	lsls	r3, r1, #27
    5b24:	d50d      	bpl.n	5b42 <nrf_cc3xx_platform_set_mutexes+0x52>
    5b26:	2300      	movs	r3, #0
    5b28:	f505 7088 	add.w	r0, r5, #272	; 0x110
    5b2c:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    5b30:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    5b34:	4790      	blx	r2
    5b36:	6823      	ldr	r3, [r4, #0]
    5b38:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    5b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b40:	4718      	bx	r3
    5b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b46:	bf00      	nop
    5b48:	200145c4 	.word	0x200145c4
    5b4c:	200145d4 	.word	0x200145d4
    5b50:	20016d30 	.word	0x20016d30

00005b54 <CC_LibInitNoRng>:
    5b54:	b510      	push	{r4, lr}
    5b56:	f000 f833 	bl	5bc0 <CC_HalInit>
    5b5a:	b120      	cbz	r0, 5b66 <CC_LibInitNoRng+0x12>
    5b5c:	2403      	movs	r4, #3
    5b5e:	f000 f867 	bl	5c30 <CC_PalTerminate>
    5b62:	4620      	mov	r0, r4
    5b64:	bd10      	pop	{r4, pc}
    5b66:	f000 f835 	bl	5bd4 <CC_PalInit>
    5b6a:	b990      	cbnz	r0, 5b92 <CC_LibInitNoRng+0x3e>
    5b6c:	f000 f8b0 	bl	5cd0 <CC_PalPowerSaveModeSelect>
    5b70:	b990      	cbnz	r0, 5b98 <CC_LibInitNoRng+0x44>
    5b72:	4b0f      	ldr	r3, [pc, #60]	; (5bb0 <CC_LibInitNoRng+0x5c>)
    5b74:	681b      	ldr	r3, [r3, #0]
    5b76:	0e1b      	lsrs	r3, r3, #24
    5b78:	2bf0      	cmp	r3, #240	; 0xf0
    5b7a:	d108      	bne.n	5b8e <CC_LibInitNoRng+0x3a>
    5b7c:	4a0d      	ldr	r2, [pc, #52]	; (5bb4 <CC_LibInitNoRng+0x60>)
    5b7e:	4b0e      	ldr	r3, [pc, #56]	; (5bb8 <CC_LibInitNoRng+0x64>)
    5b80:	6812      	ldr	r2, [r2, #0]
    5b82:	429a      	cmp	r2, r3
    5b84:	d00a      	beq.n	5b9c <CC_LibInitNoRng+0x48>
    5b86:	2407      	movs	r4, #7
    5b88:	f000 f81c 	bl	5bc4 <CC_HalTerminate>
    5b8c:	e7e7      	b.n	5b5e <CC_LibInitNoRng+0xa>
    5b8e:	2406      	movs	r4, #6
    5b90:	e7fa      	b.n	5b88 <CC_LibInitNoRng+0x34>
    5b92:	2404      	movs	r4, #4
    5b94:	4620      	mov	r0, r4
    5b96:	bd10      	pop	{r4, pc}
    5b98:	2400      	movs	r4, #0
    5b9a:	e7f5      	b.n	5b88 <CC_LibInitNoRng+0x34>
    5b9c:	2001      	movs	r0, #1
    5b9e:	f000 f897 	bl	5cd0 <CC_PalPowerSaveModeSelect>
    5ba2:	4604      	mov	r4, r0
    5ba4:	2800      	cmp	r0, #0
    5ba6:	d1f7      	bne.n	5b98 <CC_LibInitNoRng+0x44>
    5ba8:	4b04      	ldr	r3, [pc, #16]	; (5bbc <CC_LibInitNoRng+0x68>)
    5baa:	6018      	str	r0, [r3, #0]
    5bac:	e7d9      	b.n	5b62 <CC_LibInitNoRng+0xe>
    5bae:	bf00      	nop
    5bb0:	50841928 	.word	0x50841928
    5bb4:	50841a24 	.word	0x50841a24
    5bb8:	20e00000 	.word	0x20e00000
    5bbc:	50841a0c 	.word	0x50841a0c

00005bc0 <CC_HalInit>:
    5bc0:	2000      	movs	r0, #0
    5bc2:	4770      	bx	lr

00005bc4 <CC_HalTerminate>:
    5bc4:	2000      	movs	r0, #0
    5bc6:	4770      	bx	lr

00005bc8 <CC_HalMaskInterrupt>:
    5bc8:	4b01      	ldr	r3, [pc, #4]	; (5bd0 <CC_HalMaskInterrupt+0x8>)
    5bca:	6018      	str	r0, [r3, #0]
    5bcc:	4770      	bx	lr
    5bce:	bf00      	nop
    5bd0:	50841a04 	.word	0x50841a04

00005bd4 <CC_PalInit>:
    5bd4:	b510      	push	{r4, lr}
    5bd6:	4811      	ldr	r0, [pc, #68]	; (5c1c <CC_PalInit+0x48>)
    5bd8:	f000 f848 	bl	5c6c <CC_PalMutexCreate>
    5bdc:	b100      	cbz	r0, 5be0 <CC_PalInit+0xc>
    5bde:	bd10      	pop	{r4, pc}
    5be0:	480f      	ldr	r0, [pc, #60]	; (5c20 <CC_PalInit+0x4c>)
    5be2:	f000 f843 	bl	5c6c <CC_PalMutexCreate>
    5be6:	2800      	cmp	r0, #0
    5be8:	d1f9      	bne.n	5bde <CC_PalInit+0xa>
    5bea:	4c0e      	ldr	r4, [pc, #56]	; (5c24 <CC_PalInit+0x50>)
    5bec:	4620      	mov	r0, r4
    5bee:	f000 f83d 	bl	5c6c <CC_PalMutexCreate>
    5bf2:	2800      	cmp	r0, #0
    5bf4:	d1f3      	bne.n	5bde <CC_PalInit+0xa>
    5bf6:	4b0c      	ldr	r3, [pc, #48]	; (5c28 <CC_PalInit+0x54>)
    5bf8:	480c      	ldr	r0, [pc, #48]	; (5c2c <CC_PalInit+0x58>)
    5bfa:	601c      	str	r4, [r3, #0]
    5bfc:	f000 f836 	bl	5c6c <CC_PalMutexCreate>
    5c00:	4601      	mov	r1, r0
    5c02:	2800      	cmp	r0, #0
    5c04:	d1eb      	bne.n	5bde <CC_PalInit+0xa>
    5c06:	f000 f82d 	bl	5c64 <CC_PalDmaInit>
    5c0a:	4604      	mov	r4, r0
    5c0c:	b108      	cbz	r0, 5c12 <CC_PalInit+0x3e>
    5c0e:	4620      	mov	r0, r4
    5c10:	bd10      	pop	{r4, pc}
    5c12:	f000 f83f 	bl	5c94 <CC_PalPowerSaveModeInit>
    5c16:	4620      	mov	r0, r4
    5c18:	e7fa      	b.n	5c10 <CC_PalInit+0x3c>
    5c1a:	bf00      	nop
    5c1c:	2001460c 	.word	0x2001460c
    5c20:	20014600 	.word	0x20014600
    5c24:	20014608 	.word	0x20014608
    5c28:	20014610 	.word	0x20014610
    5c2c:	20014604 	.word	0x20014604

00005c30 <CC_PalTerminate>:
    5c30:	b508      	push	{r3, lr}
    5c32:	4808      	ldr	r0, [pc, #32]	; (5c54 <CC_PalTerminate+0x24>)
    5c34:	f000 f824 	bl	5c80 <CC_PalMutexDestroy>
    5c38:	4807      	ldr	r0, [pc, #28]	; (5c58 <CC_PalTerminate+0x28>)
    5c3a:	f000 f821 	bl	5c80 <CC_PalMutexDestroy>
    5c3e:	4807      	ldr	r0, [pc, #28]	; (5c5c <CC_PalTerminate+0x2c>)
    5c40:	f000 f81e 	bl	5c80 <CC_PalMutexDestroy>
    5c44:	4806      	ldr	r0, [pc, #24]	; (5c60 <CC_PalTerminate+0x30>)
    5c46:	f000 f81b 	bl	5c80 <CC_PalMutexDestroy>
    5c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5c4e:	f000 b80b 	b.w	5c68 <CC_PalDmaTerminate>
    5c52:	bf00      	nop
    5c54:	2001460c 	.word	0x2001460c
    5c58:	20014600 	.word	0x20014600
    5c5c:	20014608 	.word	0x20014608
    5c60:	20014604 	.word	0x20014604

00005c64 <CC_PalDmaInit>:
    5c64:	2000      	movs	r0, #0
    5c66:	4770      	bx	lr

00005c68 <CC_PalDmaTerminate>:
    5c68:	4770      	bx	lr
    5c6a:	bf00      	nop

00005c6c <CC_PalMutexCreate>:
    5c6c:	b508      	push	{r3, lr}
    5c6e:	4b03      	ldr	r3, [pc, #12]	; (5c7c <CC_PalMutexCreate+0x10>)
    5c70:	6802      	ldr	r2, [r0, #0]
    5c72:	681b      	ldr	r3, [r3, #0]
    5c74:	6810      	ldr	r0, [r2, #0]
    5c76:	4798      	blx	r3
    5c78:	2000      	movs	r0, #0
    5c7a:	bd08      	pop	{r3, pc}
    5c7c:	200145c4 	.word	0x200145c4

00005c80 <CC_PalMutexDestroy>:
    5c80:	b508      	push	{r3, lr}
    5c82:	4b03      	ldr	r3, [pc, #12]	; (5c90 <CC_PalMutexDestroy+0x10>)
    5c84:	6802      	ldr	r2, [r0, #0]
    5c86:	685b      	ldr	r3, [r3, #4]
    5c88:	6810      	ldr	r0, [r2, #0]
    5c8a:	4798      	blx	r3
    5c8c:	2000      	movs	r0, #0
    5c8e:	bd08      	pop	{r3, pc}
    5c90:	200145c4 	.word	0x200145c4

00005c94 <CC_PalPowerSaveModeInit>:
    5c94:	b570      	push	{r4, r5, r6, lr}
    5c96:	4c09      	ldr	r4, [pc, #36]	; (5cbc <CC_PalPowerSaveModeInit+0x28>)
    5c98:	4d09      	ldr	r5, [pc, #36]	; (5cc0 <CC_PalPowerSaveModeInit+0x2c>)
    5c9a:	6920      	ldr	r0, [r4, #16]
    5c9c:	68ab      	ldr	r3, [r5, #8]
    5c9e:	4798      	blx	r3
    5ca0:	b118      	cbz	r0, 5caa <CC_PalPowerSaveModeInit+0x16>
    5ca2:	4b08      	ldr	r3, [pc, #32]	; (5cc4 <CC_PalPowerSaveModeInit+0x30>)
    5ca4:	4808      	ldr	r0, [pc, #32]	; (5cc8 <CC_PalPowerSaveModeInit+0x34>)
    5ca6:	685b      	ldr	r3, [r3, #4]
    5ca8:	4798      	blx	r3
    5caa:	2100      	movs	r1, #0
    5cac:	4a07      	ldr	r2, [pc, #28]	; (5ccc <CC_PalPowerSaveModeInit+0x38>)
    5cae:	68eb      	ldr	r3, [r5, #12]
    5cb0:	6011      	str	r1, [r2, #0]
    5cb2:	6920      	ldr	r0, [r4, #16]
    5cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cb8:	4718      	bx	r3
    5cba:	bf00      	nop
    5cbc:	200145d4 	.word	0x200145d4
    5cc0:	200145c4 	.word	0x200145c4
    5cc4:	200145b4 	.word	0x200145b4
    5cc8:	0000938c 	.word	0x0000938c
    5ccc:	20016764 	.word	0x20016764

00005cd0 <CC_PalPowerSaveModeSelect>:
    5cd0:	b570      	push	{r4, r5, r6, lr}
    5cd2:	4d1a      	ldr	r5, [pc, #104]	; (5d3c <CC_PalPowerSaveModeSelect+0x6c>)
    5cd4:	4e1a      	ldr	r6, [pc, #104]	; (5d40 <CC_PalPowerSaveModeSelect+0x70>)
    5cd6:	4604      	mov	r4, r0
    5cd8:	68b2      	ldr	r2, [r6, #8]
    5cda:	6928      	ldr	r0, [r5, #16]
    5cdc:	4790      	blx	r2
    5cde:	b9f0      	cbnz	r0, 5d1e <CC_PalPowerSaveModeSelect+0x4e>
    5ce0:	b15c      	cbz	r4, 5cfa <CC_PalPowerSaveModeSelect+0x2a>
    5ce2:	4c18      	ldr	r4, [pc, #96]	; (5d44 <CC_PalPowerSaveModeSelect+0x74>)
    5ce4:	6823      	ldr	r3, [r4, #0]
    5ce6:	b1ab      	cbz	r3, 5d14 <CC_PalPowerSaveModeSelect+0x44>
    5ce8:	2b01      	cmp	r3, #1
    5cea:	d01a      	beq.n	5d22 <CC_PalPowerSaveModeSelect+0x52>
    5cec:	3b01      	subs	r3, #1
    5cee:	6023      	str	r3, [r4, #0]
    5cf0:	6928      	ldr	r0, [r5, #16]
    5cf2:	68f3      	ldr	r3, [r6, #12]
    5cf4:	4798      	blx	r3
    5cf6:	2000      	movs	r0, #0
    5cf8:	bd70      	pop	{r4, r5, r6, pc}
    5cfa:	4c12      	ldr	r4, [pc, #72]	; (5d44 <CC_PalPowerSaveModeSelect+0x74>)
    5cfc:	6821      	ldr	r1, [r4, #0]
    5cfe:	b939      	cbnz	r1, 5d10 <CC_PalPowerSaveModeSelect+0x40>
    5d00:	2001      	movs	r0, #1
    5d02:	4b11      	ldr	r3, [pc, #68]	; (5d48 <CC_PalPowerSaveModeSelect+0x78>)
    5d04:	4a11      	ldr	r2, [pc, #68]	; (5d4c <CC_PalPowerSaveModeSelect+0x7c>)
    5d06:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    5d0a:	6813      	ldr	r3, [r2, #0]
    5d0c:	2b00      	cmp	r3, #0
    5d0e:	d1fc      	bne.n	5d0a <CC_PalPowerSaveModeSelect+0x3a>
    5d10:	3101      	adds	r1, #1
    5d12:	6021      	str	r1, [r4, #0]
    5d14:	68f3      	ldr	r3, [r6, #12]
    5d16:	6928      	ldr	r0, [r5, #16]
    5d18:	4798      	blx	r3
    5d1a:	2000      	movs	r0, #0
    5d1c:	bd70      	pop	{r4, r5, r6, pc}
    5d1e:	480c      	ldr	r0, [pc, #48]	; (5d50 <CC_PalPowerSaveModeSelect+0x80>)
    5d20:	bd70      	pop	{r4, r5, r6, pc}
    5d22:	4a0a      	ldr	r2, [pc, #40]	; (5d4c <CC_PalPowerSaveModeSelect+0x7c>)
    5d24:	6813      	ldr	r3, [r2, #0]
    5d26:	2b00      	cmp	r3, #0
    5d28:	d1fc      	bne.n	5d24 <CC_PalPowerSaveModeSelect+0x54>
    5d2a:	4a07      	ldr	r2, [pc, #28]	; (5d48 <CC_PalPowerSaveModeSelect+0x78>)
    5d2c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5d30:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5d34:	f7ff ff48 	bl	5bc8 <CC_HalMaskInterrupt>
    5d38:	6823      	ldr	r3, [r4, #0]
    5d3a:	e7d7      	b.n	5cec <CC_PalPowerSaveModeSelect+0x1c>
    5d3c:	200145d4 	.word	0x200145d4
    5d40:	200145c4 	.word	0x200145c4
    5d44:	20016764 	.word	0x20016764
    5d48:	50840000 	.word	0x50840000
    5d4c:	50841910 	.word	0x50841910
    5d50:	ffff8fe9 	.word	0xffff8fe9

00005d54 <verify_context_ecdsa_verify_secp256r1>:
    5d54:	b130      	cbz	r0, 5d64 <verify_context_ecdsa_verify_secp256r1+0x10>
    5d56:	6802      	ldr	r2, [r0, #0]
    5d58:	4b03      	ldr	r3, [pc, #12]	; (5d68 <verify_context_ecdsa_verify_secp256r1+0x14>)
    5d5a:	4804      	ldr	r0, [pc, #16]	; (5d6c <verify_context_ecdsa_verify_secp256r1+0x18>)
    5d5c:	429a      	cmp	r2, r3
    5d5e:	bf08      	it	eq
    5d60:	2000      	moveq	r0, #0
    5d62:	4770      	bx	lr
    5d64:	4802      	ldr	r0, [pc, #8]	; (5d70 <verify_context_ecdsa_verify_secp256r1+0x1c>)
    5d66:	4770      	bx	lr
    5d68:	bbaa55dd 	.word	0xbbaa55dd
    5d6c:	00f00882 	.word	0x00f00882
    5d70:	00f00871 	.word	0x00f00871

00005d74 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    5d74:	b538      	push	{r3, r4, r5, lr}
    5d76:	460d      	mov	r5, r1
    5d78:	4604      	mov	r4, r0
    5d7a:	b1b0      	cbz	r0, 5daa <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    5d7c:	22a0      	movs	r2, #160	; 0xa0
    5d7e:	2100      	movs	r1, #0
    5d80:	3004      	adds	r0, #4
    5d82:	f002 ffb5 	bl	8cf0 <SaSi_PalMemSet>
    5d86:	b195      	cbz	r5, 5dae <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    5d88:	2208      	movs	r2, #8
    5d8a:	4629      	mov	r1, r5
    5d8c:	f104 0064 	add.w	r0, r4, #100	; 0x64
    5d90:	f002 ffb4 	bl	8cfc <CRYS_COMMON_ReverseMemcpy32>
    5d94:	2208      	movs	r2, #8
    5d96:	f105 0120 	add.w	r1, r5, #32
    5d9a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    5d9e:	f002 ffad 	bl	8cfc <CRYS_COMMON_ReverseMemcpy32>
    5da2:	2000      	movs	r0, #0
    5da4:	4b03      	ldr	r3, [pc, #12]	; (5db4 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    5da6:	6023      	str	r3, [r4, #0]
    5da8:	bd38      	pop	{r3, r4, r5, pc}
    5daa:	4803      	ldr	r0, [pc, #12]	; (5db8 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    5dac:	e7fc      	b.n	5da8 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    5dae:	4803      	ldr	r0, [pc, #12]	; (5dbc <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    5db0:	e7fa      	b.n	5da8 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    5db2:	bf00      	nop
    5db4:	bbaa55dd 	.word	0xbbaa55dd
    5db8:	00f00871 	.word	0x00f00871
    5dbc:	00f00883 	.word	0x00f00883

00005dc0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    5dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5dc4:	4605      	mov	r5, r0
    5dc6:	460e      	mov	r6, r1
    5dc8:	4699      	mov	r9, r3
    5dca:	4611      	mov	r1, r2
    5dcc:	f7ff ffc2 	bl	5d54 <verify_context_ecdsa_verify_secp256r1>
    5dd0:	4604      	mov	r4, r0
    5dd2:	2800      	cmp	r0, #0
    5dd4:	f040 8084 	bne.w	5ee0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    5dd8:	2e00      	cmp	r6, #0
    5dda:	f000 8085 	beq.w	5ee8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    5dde:	2900      	cmp	r1, #0
    5de0:	f000 8084 	beq.w	5eec <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    5de4:	f1b9 0f20 	cmp.w	r9, #32
    5de8:	f040 8082 	bne.w	5ef0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    5dec:	f105 0444 	add.w	r4, r5, #68	; 0x44
    5df0:	2208      	movs	r2, #8
    5df2:	f105 0804 	add.w	r8, r5, #4
    5df6:	4620      	mov	r0, r4
    5df8:	f002 ff80 	bl	8cfc <CRYS_COMMON_ReverseMemcpy32>
    5dfc:	f105 0724 	add.w	r7, r5, #36	; 0x24
    5e00:	2208      	movs	r2, #8
    5e02:	4631      	mov	r1, r6
    5e04:	4640      	mov	r0, r8
    5e06:	f002 ff79 	bl	8cfc <CRYS_COMMON_ReverseMemcpy32>
    5e0a:	f106 0120 	add.w	r1, r6, #32
    5e0e:	2208      	movs	r2, #8
    5e10:	4638      	mov	r0, r7
    5e12:	f002 ff73 	bl	8cfc <CRYS_COMMON_ReverseMemcpy32>
    5e16:	a902      	add	r1, sp, #8
    5e18:	f841 9d04 	str.w	r9, [r1, #-4]!
    5e1c:	f44f 7080 	mov.w	r0, #256	; 0x100
    5e20:	f002 ff60 	bl	8ce4 <PkaInitAndMutexLock>
    5e24:	2800      	cmp	r0, #0
    5e26:	d165      	bne.n	5ef4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    5e28:	f44f 7380 	mov.w	r3, #256	; 0x100
    5e2c:	4a32      	ldr	r2, [pc, #200]	; (5ef8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    5e2e:	2101      	movs	r1, #1
    5e30:	6013      	str	r3, [r2, #0]
    5e32:	6093      	str	r3, [r2, #8]
    5e34:	2308      	movs	r3, #8
    5e36:	4a31      	ldr	r2, [pc, #196]	; (5efc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    5e38:	f000 fb34 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5e3c:	2101      	movs	r1, #1
    5e3e:	2305      	movs	r3, #5
    5e40:	4608      	mov	r0, r1
    5e42:	4a2f      	ldr	r2, [pc, #188]	; (5f00 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    5e44:	f000 fb2e 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5e48:	2308      	movs	r3, #8
    5e4a:	4642      	mov	r2, r8
    5e4c:	2101      	movs	r1, #1
    5e4e:	201c      	movs	r0, #28
    5e50:	f000 fb28 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5e54:	2308      	movs	r3, #8
    5e56:	463a      	mov	r2, r7
    5e58:	2101      	movs	r1, #1
    5e5a:	2003      	movs	r0, #3
    5e5c:	f000 fb22 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5e60:	4622      	mov	r2, r4
    5e62:	2308      	movs	r3, #8
    5e64:	2101      	movs	r1, #1
    5e66:	2002      	movs	r0, #2
    5e68:	f000 fb1c 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5e6c:	2308      	movs	r3, #8
    5e6e:	4a25      	ldr	r2, [pc, #148]	; (5f04 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    5e70:	2101      	movs	r1, #1
    5e72:	201a      	movs	r0, #26
    5e74:	f000 fb16 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5e78:	2305      	movs	r3, #5
    5e7a:	4a23      	ldr	r2, [pc, #140]	; (5f08 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    5e7c:	2101      	movs	r1, #1
    5e7e:	201b      	movs	r0, #27
    5e80:	f000 fb10 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5e84:	2308      	movs	r3, #8
    5e86:	4a21      	ldr	r2, [pc, #132]	; (5f0c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    5e88:	2101      	movs	r1, #1
    5e8a:	2014      	movs	r0, #20
    5e8c:	f000 fb0a 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5e90:	2308      	movs	r3, #8
    5e92:	4a1f      	ldr	r2, [pc, #124]	; (5f10 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    5e94:	2101      	movs	r1, #1
    5e96:	2015      	movs	r0, #21
    5e98:	f000 fb04 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5e9c:	2308      	movs	r3, #8
    5e9e:	f105 0264 	add.w	r2, r5, #100	; 0x64
    5ea2:	2101      	movs	r1, #1
    5ea4:	2016      	movs	r0, #22
    5ea6:	f000 fafd 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5eaa:	2308      	movs	r3, #8
    5eac:	f105 0284 	add.w	r2, r5, #132	; 0x84
    5eb0:	2101      	movs	r1, #1
    5eb2:	2017      	movs	r0, #23
    5eb4:	f000 faf6 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5eb8:	2308      	movs	r3, #8
    5eba:	4a16      	ldr	r2, [pc, #88]	; (5f14 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    5ebc:	2101      	movs	r1, #1
    5ebe:	200b      	movs	r0, #11
    5ec0:	f000 faf0 	bl	64a4 <PkaCopyDataIntoPkaReg>
    5ec4:	f000 fb4a 	bl	655c <PkaEcdsaVerify>
    5ec8:	4604      	mov	r4, r0
    5eca:	9801      	ldr	r0, [sp, #4]
    5ecc:	f000 fad8 	bl	6480 <PkaFinishAndMutexUnlock>
    5ed0:	4b11      	ldr	r3, [pc, #68]	; (5f18 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    5ed2:	2c00      	cmp	r4, #0
    5ed4:	bf18      	it	ne
    5ed6:	461c      	movne	r4, r3
    5ed8:	21a4      	movs	r1, #164	; 0xa4
    5eda:	4628      	mov	r0, r5
    5edc:	f002 ff0a 	bl	8cf4 <SaSi_PalMemSetZero>
    5ee0:	4620      	mov	r0, r4
    5ee2:	b003      	add	sp, #12
    5ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ee8:	4c0c      	ldr	r4, [pc, #48]	; (5f1c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    5eea:	e7f9      	b.n	5ee0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    5eec:	4c0c      	ldr	r4, [pc, #48]	; (5f20 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    5eee:	e7f7      	b.n	5ee0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    5ef0:	4c0c      	ldr	r4, [pc, #48]	; (5f24 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    5ef2:	e7f5      	b.n	5ee0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    5ef4:	4c08      	ldr	r4, [pc, #32]	; (5f18 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    5ef6:	e7ef      	b.n	5ed8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    5ef8:	50841090 	.word	0x50841090
    5efc:	000093ec 	.word	0x000093ec
    5f00:	00009464 	.word	0x00009464
    5f04:	000093ac 	.word	0x000093ac
    5f08:	00009450 	.word	0x00009450
    5f0c:	00009410 	.word	0x00009410
    5f10:	00009430 	.word	0x00009430
    5f14:	000093cc 	.word	0x000093cc
    5f18:	00f00884 	.word	0x00f00884
    5f1c:	00f00876 	.word	0x00f00876
    5f20:	00f00880 	.word	0x00f00880
    5f24:	00f00881 	.word	0x00f00881

00005f28 <set_digest_in_hw_sha256>:
    5f28:	69c2      	ldr	r2, [r0, #28]
    5f2a:	4b0c      	ldr	r3, [pc, #48]	; (5f5c <set_digest_in_hw_sha256+0x34>)
    5f2c:	601a      	str	r2, [r3, #0]
    5f2e:	6982      	ldr	r2, [r0, #24]
    5f30:	f843 2c04 	str.w	r2, [r3, #-4]
    5f34:	6942      	ldr	r2, [r0, #20]
    5f36:	f843 2c08 	str.w	r2, [r3, #-8]
    5f3a:	6902      	ldr	r2, [r0, #16]
    5f3c:	f843 2c0c 	str.w	r2, [r3, #-12]
    5f40:	68c2      	ldr	r2, [r0, #12]
    5f42:	f843 2c10 	str.w	r2, [r3, #-16]
    5f46:	6882      	ldr	r2, [r0, #8]
    5f48:	f843 2c14 	str.w	r2, [r3, #-20]
    5f4c:	6842      	ldr	r2, [r0, #4]
    5f4e:	f843 2c18 	str.w	r2, [r3, #-24]
    5f52:	6802      	ldr	r2, [r0, #0]
    5f54:	f843 2c1c 	str.w	r2, [r3, #-28]
    5f58:	4770      	bx	lr
    5f5a:	bf00      	nop
    5f5c:	5084165c 	.word	0x5084165c

00005f60 <read_digest_in_hw_sha256>:
    5f60:	4b0c      	ldr	r3, [pc, #48]	; (5f94 <read_digest_in_hw_sha256+0x34>)
    5f62:	681b      	ldr	r3, [r3, #0]
    5f64:	61c3      	str	r3, [r0, #28]
    5f66:	4b0c      	ldr	r3, [pc, #48]	; (5f98 <read_digest_in_hw_sha256+0x38>)
    5f68:	681b      	ldr	r3, [r3, #0]
    5f6a:	6183      	str	r3, [r0, #24]
    5f6c:	4b0b      	ldr	r3, [pc, #44]	; (5f9c <read_digest_in_hw_sha256+0x3c>)
    5f6e:	681b      	ldr	r3, [r3, #0]
    5f70:	6143      	str	r3, [r0, #20]
    5f72:	4b0b      	ldr	r3, [pc, #44]	; (5fa0 <read_digest_in_hw_sha256+0x40>)
    5f74:	681b      	ldr	r3, [r3, #0]
    5f76:	6103      	str	r3, [r0, #16]
    5f78:	4b0a      	ldr	r3, [pc, #40]	; (5fa4 <read_digest_in_hw_sha256+0x44>)
    5f7a:	681b      	ldr	r3, [r3, #0]
    5f7c:	60c3      	str	r3, [r0, #12]
    5f7e:	4b0a      	ldr	r3, [pc, #40]	; (5fa8 <read_digest_in_hw_sha256+0x48>)
    5f80:	681b      	ldr	r3, [r3, #0]
    5f82:	6083      	str	r3, [r0, #8]
    5f84:	4b09      	ldr	r3, [pc, #36]	; (5fac <read_digest_in_hw_sha256+0x4c>)
    5f86:	681b      	ldr	r3, [r3, #0]
    5f88:	6043      	str	r3, [r0, #4]
    5f8a:	4b09      	ldr	r3, [pc, #36]	; (5fb0 <read_digest_in_hw_sha256+0x50>)
    5f8c:	681b      	ldr	r3, [r3, #0]
    5f8e:	6003      	str	r3, [r0, #0]
    5f90:	4770      	bx	lr
    5f92:	bf00      	nop
    5f94:	5084165c 	.word	0x5084165c
    5f98:	50841658 	.word	0x50841658
    5f9c:	50841654 	.word	0x50841654
    5fa0:	50841650 	.word	0x50841650
    5fa4:	5084164c 	.word	0x5084164c
    5fa8:	50841648 	.word	0x50841648
    5fac:	50841644 	.word	0x50841644
    5fb0:	50841640 	.word	0x50841640

00005fb4 <verify_context_hash_sha256>:
    5fb4:	b130      	cbz	r0, 5fc4 <verify_context_hash_sha256+0x10>
    5fb6:	6802      	ldr	r2, [r0, #0]
    5fb8:	4b03      	ldr	r3, [pc, #12]	; (5fc8 <verify_context_hash_sha256+0x14>)
    5fba:	4804      	ldr	r0, [pc, #16]	; (5fcc <verify_context_hash_sha256+0x18>)
    5fbc:	429a      	cmp	r2, r3
    5fbe:	bf08      	it	eq
    5fc0:	2000      	moveq	r0, #0
    5fc2:	4770      	bx	lr
    5fc4:	4802      	ldr	r0, [pc, #8]	; (5fd0 <verify_context_hash_sha256+0x1c>)
    5fc6:	4770      	bx	lr
    5fc8:	bbaa55dd 	.word	0xbbaa55dd
    5fcc:	00f00202 	.word	0x00f00202
    5fd0:	00f00200 	.word	0x00f00200

00005fd4 <nrf_cc310_bl_hash_sha256_init>:
    5fd4:	b538      	push	{r3, r4, r5, lr}
    5fd6:	4604      	mov	r4, r0
    5fd8:	b168      	cbz	r0, 5ff6 <nrf_cc310_bl_hash_sha256_init+0x22>
    5fda:	1d05      	adds	r5, r0, #4
    5fdc:	2170      	movs	r1, #112	; 0x70
    5fde:	4628      	mov	r0, r5
    5fe0:	f002 fe88 	bl	8cf4 <SaSi_PalMemSetZero>
    5fe4:	4628      	mov	r0, r5
    5fe6:	2220      	movs	r2, #32
    5fe8:	4904      	ldr	r1, [pc, #16]	; (5ffc <nrf_cc310_bl_hash_sha256_init+0x28>)
    5fea:	f002 fe7f 	bl	8cec <SaSi_PalMemCopy>
    5fee:	2000      	movs	r0, #0
    5ff0:	4b03      	ldr	r3, [pc, #12]	; (6000 <nrf_cc310_bl_hash_sha256_init+0x2c>)
    5ff2:	6023      	str	r3, [r4, #0]
    5ff4:	bd38      	pop	{r3, r4, r5, pc}
    5ff6:	4803      	ldr	r0, [pc, #12]	; (6004 <nrf_cc310_bl_hash_sha256_init+0x30>)
    5ff8:	e7fc      	b.n	5ff4 <nrf_cc310_bl_hash_sha256_init+0x20>
    5ffa:	bf00      	nop
    5ffc:	00009478 	.word	0x00009478
    6000:	bbaa55dd 	.word	0xbbaa55dd
    6004:	00f00200 	.word	0x00f00200

00006008 <nrf_cc310_bl_hash_sha256_update>:
    6008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    600c:	b085      	sub	sp, #20
    600e:	4615      	mov	r5, r2
    6010:	466f      	mov	r7, sp
    6012:	4b27      	ldr	r3, [pc, #156]	; (60b0 <nrf_cc310_bl_hash_sha256_update+0xa8>)
    6014:	4604      	mov	r4, r0
    6016:	460e      	mov	r6, r1
    6018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    601a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    601e:	b92d      	cbnz	r5, 602c <nrf_cc310_bl_hash_sha256_update+0x24>
    6020:	f04f 0900 	mov.w	r9, #0
    6024:	4648      	mov	r0, r9
    6026:	b005      	add	sp, #20
    6028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    602c:	4620      	mov	r0, r4
    602e:	f7ff ffc1 	bl	5fb4 <verify_context_hash_sha256>
    6032:	4681      	mov	r9, r0
    6034:	2800      	cmp	r0, #0
    6036:	d1f5      	bne.n	6024 <nrf_cc310_bl_hash_sha256_update+0x1c>
    6038:	1d23      	adds	r3, r4, #4
    603a:	9301      	str	r3, [sp, #4]
    603c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    603e:	bba3      	cbnz	r3, 60aa <nrf_cc310_bl_hash_sha256_update+0xa2>
    6040:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6042:	b18b      	cbz	r3, 6068 <nrf_cc310_bl_hash_sha256_update+0x60>
    6044:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    6048:	45a8      	cmp	r8, r5
    604a:	bf28      	it	cs
    604c:	46a8      	movcs	r8, r5
    604e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6052:	4631      	mov	r1, r6
    6054:	4418      	add	r0, r3
    6056:	4642      	mov	r2, r8
    6058:	f002 fe48 	bl	8cec <SaSi_PalMemCopy>
    605c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    605e:	4446      	add	r6, r8
    6060:	4443      	add	r3, r8
    6062:	6723      	str	r3, [r4, #112]	; 0x70
    6064:	eba5 0508 	sub.w	r5, r5, r8
    6068:	6f22      	ldr	r2, [r4, #112]	; 0x70
    606a:	2a40      	cmp	r2, #64	; 0x40
    606c:	d106      	bne.n	607c <nrf_cc310_bl_hash_sha256_update+0x74>
    606e:	f104 0130 	add.w	r1, r4, #48	; 0x30
    6072:	4638      	mov	r0, r7
    6074:	f000 fbb4 	bl	67e0 <nrf_cc310_bl_hash_update_internal>
    6078:	2300      	movs	r3, #0
    607a:	6723      	str	r3, [r4, #112]	; 0x70
    607c:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    6080:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    6084:	d005      	beq.n	6092 <nrf_cc310_bl_hash_sha256_update+0x8a>
    6086:	4631      	mov	r1, r6
    6088:	462a      	mov	r2, r5
    608a:	4638      	mov	r0, r7
    608c:	f000 fba8 	bl	67e0 <nrf_cc310_bl_hash_update_internal>
    6090:	442e      	add	r6, r5
    6092:	f1b8 0f00 	cmp.w	r8, #0
    6096:	d0c3      	beq.n	6020 <nrf_cc310_bl_hash_sha256_update+0x18>
    6098:	4642      	mov	r2, r8
    609a:	4631      	mov	r1, r6
    609c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    60a0:	f002 fe24 	bl	8cec <SaSi_PalMemCopy>
    60a4:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    60a8:	e7bc      	b.n	6024 <nrf_cc310_bl_hash_sha256_update+0x1c>
    60aa:	f8df 9008 	ldr.w	r9, [pc, #8]	; 60b4 <nrf_cc310_bl_hash_sha256_update+0xac>
    60ae:	e7b9      	b.n	6024 <nrf_cc310_bl_hash_sha256_update+0x1c>
    60b0:	000090c8 	.word	0x000090c8
    60b4:	00f0020c 	.word	0x00f0020c

000060b8 <nrf_cc310_bl_hash_sha256_finalize>:
    60b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    60bc:	4604      	mov	r4, r0
    60be:	466f      	mov	r7, sp
    60c0:	4b13      	ldr	r3, [pc, #76]	; (6110 <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    60c2:	460e      	mov	r6, r1
    60c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    60c6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    60ca:	4620      	mov	r0, r4
    60cc:	f7ff ff72 	bl	5fb4 <verify_context_hash_sha256>
    60d0:	4680      	mov	r8, r0
    60d2:	b9b0      	cbnz	r0, 6102 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    60d4:	b1ce      	cbz	r6, 610a <nrf_cc310_bl_hash_sha256_finalize+0x52>
    60d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    60d8:	1d25      	adds	r5, r4, #4
    60da:	9501      	str	r5, [sp, #4]
    60dc:	b93b      	cbnz	r3, 60ee <nrf_cc310_bl_hash_sha256_finalize+0x36>
    60de:	2301      	movs	r3, #1
    60e0:	6f22      	ldr	r2, [r4, #112]	; 0x70
    60e2:	6263      	str	r3, [r4, #36]	; 0x24
    60e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
    60e8:	4638      	mov	r0, r7
    60ea:	f000 fb79 	bl	67e0 <nrf_cc310_bl_hash_update_internal>
    60ee:	462b      	mov	r3, r5
    60f0:	3e04      	subs	r6, #4
    60f2:	3424      	adds	r4, #36	; 0x24
    60f4:	f853 2b04 	ldr.w	r2, [r3], #4
    60f8:	ba12      	rev	r2, r2
    60fa:	42a3      	cmp	r3, r4
    60fc:	f846 2f04 	str.w	r2, [r6, #4]!
    6100:	d1f8      	bne.n	60f4 <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    6102:	4640      	mov	r0, r8
    6104:	b004      	add	sp, #16
    6106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    610a:	f8df 8008 	ldr.w	r8, [pc, #8]	; 6114 <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    610e:	e7f8      	b.n	6102 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    6110:	000090c8 	.word	0x000090c8
    6114:	00f00205 	.word	0x00f00205

00006118 <nrf_cc310_bl_init>:
    6118:	4b08      	ldr	r3, [pc, #32]	; (613c <nrf_cc310_bl_init+0x24>)
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	0e1b      	lsrs	r3, r3, #24
    611e:	2bf0      	cmp	r3, #240	; 0xf0
    6120:	d108      	bne.n	6134 <nrf_cc310_bl_init+0x1c>
    6122:	4b07      	ldr	r3, [pc, #28]	; (6140 <nrf_cc310_bl_init+0x28>)
    6124:	681a      	ldr	r2, [r3, #0]
    6126:	4b07      	ldr	r3, [pc, #28]	; (6144 <nrf_cc310_bl_init+0x2c>)
    6128:	429a      	cmp	r2, r3
    612a:	d105      	bne.n	6138 <nrf_cc310_bl_init+0x20>
    612c:	2000      	movs	r0, #0
    612e:	4b06      	ldr	r3, [pc, #24]	; (6148 <nrf_cc310_bl_init+0x30>)
    6130:	6018      	str	r0, [r3, #0]
    6132:	4770      	bx	lr
    6134:	2005      	movs	r0, #5
    6136:	4770      	bx	lr
    6138:	2006      	movs	r0, #6
    613a:	4770      	bx	lr
    613c:	50841928 	.word	0x50841928
    6140:	50841a24 	.word	0x50841a24
    6144:	20e00000 	.word	0x20e00000
    6148:	50841a0c 	.word	0x50841a0c

0000614c <PkaSetRegsMapTab>:
    614c:	2200      	movs	r2, #0
    614e:	b530      	push	{r4, r5, lr}
    6150:	4613      	mov	r3, r2
    6152:	f640 75fc 	movw	r5, #4092	; 0xffc
    6156:	0049      	lsls	r1, r1, #1
    6158:	3802      	subs	r0, #2
    615a:	f102 54a1 	add.w	r4, r2, #337641472	; 0x14200000
    615e:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
    6162:	4290      	cmp	r0, r2
    6164:	ea4f 0484 	mov.w	r4, r4, lsl #2
    6168:	f102 0201 	add.w	r2, r2, #1
    616c:	bfca      	itet	gt
    616e:	6023      	strgt	r3, [r4, #0]
    6170:	6025      	strle	r5, [r4, #0]
    6172:	185b      	addgt	r3, r3, r1
    6174:	2a1e      	cmp	r2, #30
    6176:	d1f0      	bne.n	615a <PkaSetRegsMapTab+0xe>
    6178:	4a03      	ldr	r2, [pc, #12]	; (6188 <PkaSetRegsMapTab+0x3c>)
    617a:	6013      	str	r3, [r2, #0]
    617c:	440b      	add	r3, r1
    617e:	6053      	str	r3, [r2, #4]
    6180:	4b02      	ldr	r3, [pc, #8]	; (618c <PkaSetRegsMapTab+0x40>)
    6182:	4a03      	ldr	r2, [pc, #12]	; (6190 <PkaSetRegsMapTab+0x44>)
    6184:	601a      	str	r2, [r3, #0]
    6186:	bd30      	pop	{r4, r5, pc}
    6188:	50841078 	.word	0x50841078
    618c:	50841084 	.word	0x50841084
    6190:	000ff820 	.word	0x000ff820

00006194 <PkaGetRegEffectiveSizeInBits>:
    6194:	4b1e      	ldr	r3, [pc, #120]	; (6210 <PkaGetRegEffectiveSizeInBits+0x7c>)
    6196:	b530      	push	{r4, r5, lr}
    6198:	461a      	mov	r2, r3
    619a:	b085      	sub	sp, #20
    619c:	6819      	ldr	r1, [r3, #0]
    619e:	9100      	str	r1, [sp, #0]
    61a0:	9900      	ldr	r1, [sp, #0]
    61a2:	07cc      	lsls	r4, r1, #31
    61a4:	d5fa      	bpl.n	619c <PkaGetRegEffectiveSizeInBits+0x8>
    61a6:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    61aa:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    61ae:	0080      	lsls	r0, r0, #2
    61b0:	6801      	ldr	r1, [r0, #0]
    61b2:	6813      	ldr	r3, [r2, #0]
    61b4:	9301      	str	r3, [sp, #4]
    61b6:	9b01      	ldr	r3, [sp, #4]
    61b8:	07d8      	lsls	r0, r3, #31
    61ba:	d5fa      	bpl.n	61b2 <PkaGetRegEffectiveSizeInBits+0x1e>
    61bc:	4b15      	ldr	r3, [pc, #84]	; (6214 <PkaGetRegEffectiveSizeInBits+0x80>)
    61be:	4c16      	ldr	r4, [pc, #88]	; (6218 <PkaGetRegEffectiveSizeInBits+0x84>)
    61c0:	6818      	ldr	r0, [r3, #0]
    61c2:	2320      	movs	r3, #32
    61c4:	301f      	adds	r0, #31
    61c6:	fb90 f0f3 	sdiv	r0, r0, r3
    61ca:	4d14      	ldr	r5, [pc, #80]	; (621c <PkaGetRegEffectiveSizeInBits+0x88>)
    61cc:	3801      	subs	r0, #1
    61ce:	2800      	cmp	r0, #0
    61d0:	da10      	bge.n	61f4 <PkaGetRegEffectiveSizeInBits+0x60>
    61d2:	2300      	movs	r3, #0
    61d4:	3001      	adds	r0, #1
    61d6:	0140      	lsls	r0, r0, #5
    61d8:	b153      	cbz	r3, 61f0 <PkaGetRegEffectiveSizeInBits+0x5c>
    61da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    61de:	f1a0 0120 	sub.w	r1, r0, #32
    61e2:	4213      	tst	r3, r2
    61e4:	d104      	bne.n	61f0 <PkaGetRegEffectiveSizeInBits+0x5c>
    61e6:	3801      	subs	r0, #1
    61e8:	4288      	cmp	r0, r1
    61ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
    61ee:	d1f8      	bne.n	61e2 <PkaGetRegEffectiveSizeInBits+0x4e>
    61f0:	b005      	add	sp, #20
    61f2:	bd30      	pop	{r4, r5, pc}
    61f4:	6813      	ldr	r3, [r2, #0]
    61f6:	9303      	str	r3, [sp, #12]
    61f8:	9b03      	ldr	r3, [sp, #12]
    61fa:	07db      	lsls	r3, r3, #31
    61fc:	d5fa      	bpl.n	61f4 <PkaGetRegEffectiveSizeInBits+0x60>
    61fe:	1843      	adds	r3, r0, r1
    6200:	6023      	str	r3, [r4, #0]
    6202:	682b      	ldr	r3, [r5, #0]
    6204:	9302      	str	r3, [sp, #8]
    6206:	9b02      	ldr	r3, [sp, #8]
    6208:	2b00      	cmp	r3, #0
    620a:	d1e3      	bne.n	61d4 <PkaGetRegEffectiveSizeInBits+0x40>
    620c:	3801      	subs	r0, #1
    620e:	e7de      	b.n	61ce <PkaGetRegEffectiveSizeInBits+0x3a>
    6210:	508410b4 	.word	0x508410b4
    6214:	508410ac 	.word	0x508410ac
    6218:	508410e4 	.word	0x508410e4
    621c:	508410dc 	.word	0x508410dc

00006220 <PkaGetNextMsBit>:
    6220:	b5f0      	push	{r4, r5, r6, r7, lr}
    6222:	681d      	ldr	r5, [r3, #0]
    6224:	b085      	sub	sp, #20
    6226:	f001 041f 	and.w	r4, r1, #31
    622a:	b90d      	cbnz	r5, 6230 <PkaGetNextMsBit+0x10>
    622c:	2c1f      	cmp	r4, #31
    622e:	d128      	bne.n	6282 <PkaGetNextMsBit+0x62>
    6230:	4d17      	ldr	r5, [pc, #92]	; (6290 <PkaGetNextMsBit+0x70>)
    6232:	462e      	mov	r6, r5
    6234:	682f      	ldr	r7, [r5, #0]
    6236:	9701      	str	r7, [sp, #4]
    6238:	9f01      	ldr	r7, [sp, #4]
    623a:	07ff      	lsls	r7, r7, #31
    623c:	d5fa      	bpl.n	6234 <PkaGetNextMsBit+0x14>
    623e:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    6242:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    6246:	0080      	lsls	r0, r0, #2
    6248:	6800      	ldr	r0, [r0, #0]
    624a:	6835      	ldr	r5, [r6, #0]
    624c:	9503      	str	r5, [sp, #12]
    624e:	9d03      	ldr	r5, [sp, #12]
    6250:	07ed      	lsls	r5, r5, #31
    6252:	d5fa      	bpl.n	624a <PkaGetNextMsBit+0x2a>
    6254:	2c1f      	cmp	r4, #31
    6256:	eb00 1061 	add.w	r0, r0, r1, asr #5
    625a:	bf18      	it	ne
    625c:	43c9      	mvnne	r1, r1
    625e:	4d0d      	ldr	r5, [pc, #52]	; (6294 <PkaGetNextMsBit+0x74>)
    6260:	bf18      	it	ne
    6262:	f001 011f 	andne.w	r1, r1, #31
    6266:	6028      	str	r0, [r5, #0]
    6268:	480b      	ldr	r0, [pc, #44]	; (6298 <PkaGetNextMsBit+0x78>)
    626a:	6800      	ldr	r0, [r0, #0]
    626c:	9002      	str	r0, [sp, #8]
    626e:	9802      	ldr	r0, [sp, #8]
    6270:	bf1c      	itt	ne
    6272:	fa00 f101 	lslne.w	r1, r0, r1
    6276:	6011      	strne	r1, [r2, #0]
    6278:	f04f 0100 	mov.w	r1, #0
    627c:	bf08      	it	eq
    627e:	6010      	streq	r0, [r2, #0]
    6280:	6019      	str	r1, [r3, #0]
    6282:	6810      	ldr	r0, [r2, #0]
    6284:	0043      	lsls	r3, r0, #1
    6286:	0fc0      	lsrs	r0, r0, #31
    6288:	6013      	str	r3, [r2, #0]
    628a:	b005      	add	sp, #20
    628c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    628e:	bf00      	nop
    6290:	508410b4 	.word	0x508410b4
    6294:	508410e4 	.word	0x508410e4
    6298:	508410dc 	.word	0x508410dc

0000629c <PkaSetRegsSizesTab>:
    629c:	4b0c      	ldr	r3, [pc, #48]	; (62d0 <PkaSetRegsSizesTab+0x34>)
    629e:	0189      	lsls	r1, r1, #6
    62a0:	6018      	str	r0, [r3, #0]
    62a2:	303f      	adds	r0, #63	; 0x3f
    62a4:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    62a8:	3040      	adds	r0, #64	; 0x40
    62aa:	6058      	str	r0, [r3, #4]
    62ac:	6099      	str	r1, [r3, #8]
    62ae:	4809      	ldr	r0, [pc, #36]	; (62d4 <PkaSetRegsSizesTab+0x38>)
    62b0:	60d9      	str	r1, [r3, #12]
    62b2:	6119      	str	r1, [r3, #16]
    62b4:	6159      	str	r1, [r3, #20]
    62b6:	6199      	str	r1, [r3, #24]
    62b8:	331c      	adds	r3, #28
    62ba:	b082      	sub	sp, #8
    62bc:	6019      	str	r1, [r3, #0]
    62be:	6802      	ldr	r2, [r0, #0]
    62c0:	9201      	str	r2, [sp, #4]
    62c2:	9a01      	ldr	r2, [sp, #4]
    62c4:	07d2      	lsls	r2, r2, #31
    62c6:	d5fa      	bpl.n	62be <PkaSetRegsSizesTab+0x22>
    62c8:	6019      	str	r1, [r3, #0]
    62ca:	b002      	add	sp, #8
    62cc:	4770      	bx	lr
    62ce:	bf00      	nop
    62d0:	50841090 	.word	0x50841090
    62d4:	508410b4 	.word	0x508410b4

000062d8 <PkaInitPka>:
    62d8:	b538      	push	{r3, r4, r5, lr}
    62da:	f1a0 0320 	sub.w	r3, r0, #32
    62de:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    62e2:	4605      	mov	r5, r0
    62e4:	d82c      	bhi.n	6340 <PkaInitPka+0x68>
    62e6:	288f      	cmp	r0, #143	; 0x8f
    62e8:	d826      	bhi.n	6338 <PkaInitPka+0x60>
    62ea:	f100 0347 	add.w	r3, r0, #71	; 0x47
    62ee:	f100 0466 	add.w	r4, r0, #102	; 0x66
    62f2:	06db      	lsls	r3, r3, #27
    62f4:	ea4f 1454 	mov.w	r4, r4, lsr #5
    62f8:	d000      	beq.n	62fc <PkaInitPka+0x24>
    62fa:	3401      	adds	r4, #1
    62fc:	0164      	lsls	r4, r4, #5
    62fe:	343f      	adds	r4, #63	; 0x3f
    6300:	09a4      	lsrs	r4, r4, #6
    6302:	3401      	adds	r4, #1
    6304:	b111      	cbz	r1, 630c <PkaInitPka+0x34>
    6306:	42a1      	cmp	r1, r4
    6308:	d31a      	bcc.n	6340 <PkaInitPka+0x68>
    630a:	460c      	mov	r4, r1
    630c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6310:	00e3      	lsls	r3, r4, #3
    6312:	fbb0 f0f3 	udiv	r0, r0, r3
    6316:	2820      	cmp	r0, #32
    6318:	bf28      	it	cs
    631a:	2020      	movcs	r0, #32
    631c:	b102      	cbz	r2, 6320 <PkaInitPka+0x48>
    631e:	6010      	str	r0, [r2, #0]
    6320:	2201      	movs	r2, #1
    6322:	4b08      	ldr	r3, [pc, #32]	; (6344 <PkaInitPka+0x6c>)
    6324:	4621      	mov	r1, r4
    6326:	601a      	str	r2, [r3, #0]
    6328:	f7ff ff10 	bl	614c <PkaSetRegsMapTab>
    632c:	4628      	mov	r0, r5
    632e:	4621      	mov	r1, r4
    6330:	f7ff ffb4 	bl	629c <PkaSetRegsSizesTab>
    6334:	2000      	movs	r0, #0
    6336:	bd38      	pop	{r3, r4, r5, pc}
    6338:	f100 041f 	add.w	r4, r0, #31
    633c:	0964      	lsrs	r4, r4, #5
    633e:	e7dd      	b.n	62fc <PkaInitPka+0x24>
    6340:	4801      	ldr	r0, [pc, #4]	; (6348 <PkaInitPka+0x70>)
    6342:	e7f8      	b.n	6336 <PkaInitPka+0x5e>
    6344:	5084181c 	.word	0x5084181c
    6348:	00f02122 	.word	0x00f02122

0000634c <PkaClearBlockOfRegs>:
    634c:	4b46      	ldr	r3, [pc, #280]	; (6468 <PkaClearBlockOfRegs+0x11c>)
    634e:	b5f0      	push	{r4, r5, r6, r7, lr}
    6350:	461d      	mov	r5, r3
    6352:	b089      	sub	sp, #36	; 0x24
    6354:	681c      	ldr	r4, [r3, #0]
    6356:	9401      	str	r4, [sp, #4]
    6358:	9c01      	ldr	r4, [sp, #4]
    635a:	07e4      	lsls	r4, r4, #31
    635c:	d5fa      	bpl.n	6354 <PkaClearBlockOfRegs+0x8>
    635e:	4b43      	ldr	r3, [pc, #268]	; (646c <PkaClearBlockOfRegs+0x120>)
    6360:	2400      	movs	r4, #0
    6362:	4413      	add	r3, r2
    6364:	009b      	lsls	r3, r3, #2
    6366:	681a      	ldr	r2, [r3, #0]
    6368:	180b      	adds	r3, r1, r0
    636a:	2b1e      	cmp	r3, #30
    636c:	bf88      	it	hi
    636e:	f1c0 011e 	rsbhi	r1, r0, #30
    6372:	321f      	adds	r2, #31
    6374:	180b      	adds	r3, r1, r0
    6376:	0952      	lsrs	r2, r2, #5
    6378:	4353      	muls	r3, r2
    637a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    637e:	bf84      	itt	hi
    6380:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    6384:	fbb1 f1f2 	udivhi	r1, r1, r2
    6388:	4627      	mov	r7, r4
    638a:	bf88      	it	hi
    638c:	1a09      	subhi	r1, r1, r0
    638e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 6474 <PkaClearBlockOfRegs+0x128>
    6392:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    6396:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 6478 <PkaClearBlockOfRegs+0x12c>
    639a:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    639e:	42a1      	cmp	r1, r4
    63a0:	dc33      	bgt.n	640a <PkaClearBlockOfRegs+0xbe>
    63a2:	682b      	ldr	r3, [r5, #0]
    63a4:	9304      	str	r3, [sp, #16]
    63a6:	9b04      	ldr	r3, [sp, #16]
    63a8:	07db      	lsls	r3, r3, #31
    63aa:	d5fa      	bpl.n	63a2 <PkaClearBlockOfRegs+0x56>
    63ac:	4b30      	ldr	r3, [pc, #192]	; (6470 <PkaClearBlockOfRegs+0x124>)
    63ae:	681b      	ldr	r3, [r3, #0]
    63b0:	6829      	ldr	r1, [r5, #0]
    63b2:	9105      	str	r1, [sp, #20]
    63b4:	9905      	ldr	r1, [sp, #20]
    63b6:	07cf      	lsls	r7, r1, #31
    63b8:	d5fa      	bpl.n	63b0 <PkaClearBlockOfRegs+0x64>
    63ba:	4c2e      	ldr	r4, [pc, #184]	; (6474 <PkaClearBlockOfRegs+0x128>)
    63bc:	492e      	ldr	r1, [pc, #184]	; (6478 <PkaClearBlockOfRegs+0x12c>)
    63be:	6023      	str	r3, [r4, #0]
    63c0:	2300      	movs	r3, #0
    63c2:	461e      	mov	r6, r3
    63c4:	4293      	cmp	r3, r2
    63c6:	f103 0001 	add.w	r0, r3, #1
    63ca:	d140      	bne.n	644e <PkaClearBlockOfRegs+0x102>
    63cc:	4619      	mov	r1, r3
    63ce:	2600      	movs	r6, #0
    63d0:	f020 0201 	bic.w	r2, r0, #1
    63d4:	4828      	ldr	r0, [pc, #160]	; (6478 <PkaClearBlockOfRegs+0x12c>)
    63d6:	428a      	cmp	r2, r1
    63d8:	d83c      	bhi.n	6454 <PkaClearBlockOfRegs+0x108>
    63da:	6829      	ldr	r1, [r5, #0]
    63dc:	9106      	str	r1, [sp, #24]
    63de:	9906      	ldr	r1, [sp, #24]
    63e0:	07ce      	lsls	r6, r1, #31
    63e2:	d5fa      	bpl.n	63da <PkaClearBlockOfRegs+0x8e>
    63e4:	4925      	ldr	r1, [pc, #148]	; (647c <PkaClearBlockOfRegs+0x130>)
    63e6:	6809      	ldr	r1, [r1, #0]
    63e8:	6828      	ldr	r0, [r5, #0]
    63ea:	9007      	str	r0, [sp, #28]
    63ec:	9807      	ldr	r0, [sp, #28]
    63ee:	07c0      	lsls	r0, r0, #31
    63f0:	d5fa      	bpl.n	63e8 <PkaClearBlockOfRegs+0x9c>
    63f2:	6021      	str	r1, [r4, #0]
    63f4:	2100      	movs	r1, #0
    63f6:	460c      	mov	r4, r1
    63f8:	481f      	ldr	r0, [pc, #124]	; (6478 <PkaClearBlockOfRegs+0x12c>)
    63fa:	428b      	cmp	r3, r1
    63fc:	d12d      	bne.n	645a <PkaClearBlockOfRegs+0x10e>
    63fe:	2000      	movs	r0, #0
    6400:	491d      	ldr	r1, [pc, #116]	; (6478 <PkaClearBlockOfRegs+0x12c>)
    6402:	429a      	cmp	r2, r3
    6404:	d82c      	bhi.n	6460 <PkaClearBlockOfRegs+0x114>
    6406:	b009      	add	sp, #36	; 0x24
    6408:	bdf0      	pop	{r4, r5, r6, r7, pc}
    640a:	682b      	ldr	r3, [r5, #0]
    640c:	9302      	str	r3, [sp, #8]
    640e:	9b02      	ldr	r3, [sp, #8]
    6410:	07db      	lsls	r3, r3, #31
    6412:	d5fa      	bpl.n	640a <PkaClearBlockOfRegs+0xbe>
    6414:	1903      	adds	r3, r0, r4
    6416:	009b      	lsls	r3, r3, #2
    6418:	681b      	ldr	r3, [r3, #0]
    641a:	682e      	ldr	r6, [r5, #0]
    641c:	9603      	str	r6, [sp, #12]
    641e:	9e03      	ldr	r6, [sp, #12]
    6420:	07f6      	lsls	r6, r6, #31
    6422:	d5fa      	bpl.n	641a <PkaClearBlockOfRegs+0xce>
    6424:	f8ce 3000 	str.w	r3, [lr]
    6428:	2300      	movs	r3, #0
    642a:	4293      	cmp	r3, r2
    642c:	f103 0301 	add.w	r3, r3, #1
    6430:	d106      	bne.n	6440 <PkaClearBlockOfRegs+0xf4>
    6432:	4616      	mov	r6, r2
    6434:	f023 0301 	bic.w	r3, r3, #1
    6438:	42b3      	cmp	r3, r6
    643a:	d804      	bhi.n	6446 <PkaClearBlockOfRegs+0xfa>
    643c:	3401      	adds	r4, #1
    643e:	e7ae      	b.n	639e <PkaClearBlockOfRegs+0x52>
    6440:	f8cc 7000 	str.w	r7, [ip]
    6444:	e7f1      	b.n	642a <PkaClearBlockOfRegs+0xde>
    6446:	f8cc 7000 	str.w	r7, [ip]
    644a:	3601      	adds	r6, #1
    644c:	e7f4      	b.n	6438 <PkaClearBlockOfRegs+0xec>
    644e:	600e      	str	r6, [r1, #0]
    6450:	4603      	mov	r3, r0
    6452:	e7b7      	b.n	63c4 <PkaClearBlockOfRegs+0x78>
    6454:	6006      	str	r6, [r0, #0]
    6456:	3101      	adds	r1, #1
    6458:	e7bd      	b.n	63d6 <PkaClearBlockOfRegs+0x8a>
    645a:	6004      	str	r4, [r0, #0]
    645c:	3101      	adds	r1, #1
    645e:	e7cc      	b.n	63fa <PkaClearBlockOfRegs+0xae>
    6460:	6008      	str	r0, [r1, #0]
    6462:	3301      	adds	r3, #1
    6464:	e7cd      	b.n	6402 <PkaClearBlockOfRegs+0xb6>
    6466:	bf00      	nop
    6468:	508410b4 	.word	0x508410b4
    646c:	14210424 	.word	0x14210424
    6470:	5084107c 	.word	0x5084107c
    6474:	508410d4 	.word	0x508410d4
    6478:	508410d8 	.word	0x508410d8
    647c:	50841078 	.word	0x50841078

00006480 <PkaFinishAndMutexUnlock>:
    6480:	b508      	push	{r3, lr}
    6482:	b140      	cbz	r0, 6496 <PkaFinishAndMutexUnlock+0x16>
    6484:	2820      	cmp	r0, #32
    6486:	4601      	mov	r1, r0
    6488:	f04f 0207 	mov.w	r2, #7
    648c:	bf28      	it	cs
    648e:	2120      	movcs	r1, #32
    6490:	2000      	movs	r0, #0
    6492:	f7ff ff5b 	bl	634c <PkaClearBlockOfRegs>
    6496:	2200      	movs	r2, #0
    6498:	4b01      	ldr	r3, [pc, #4]	; (64a0 <PkaFinishAndMutexUnlock+0x20>)
    649a:	601a      	str	r2, [r3, #0]
    649c:	bd08      	pop	{r3, pc}
    649e:	bf00      	nop
    64a0:	5084181c 	.word	0x5084181c

000064a4 <PkaCopyDataIntoPkaReg>:
    64a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64a6:	4d29      	ldr	r5, [pc, #164]	; (654c <PkaCopyDataIntoPkaReg+0xa8>)
    64a8:	b085      	sub	sp, #20
    64aa:	462c      	mov	r4, r5
    64ac:	682e      	ldr	r6, [r5, #0]
    64ae:	9600      	str	r6, [sp, #0]
    64b0:	9e00      	ldr	r6, [sp, #0]
    64b2:	07f6      	lsls	r6, r6, #31
    64b4:	d5fa      	bpl.n	64ac <PkaCopyDataIntoPkaReg+0x8>
    64b6:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    64ba:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    64be:	0080      	lsls	r0, r0, #2
    64c0:	6805      	ldr	r5, [r0, #0]
    64c2:	6820      	ldr	r0, [r4, #0]
    64c4:	9001      	str	r0, [sp, #4]
    64c6:	9801      	ldr	r0, [sp, #4]
    64c8:	07c7      	lsls	r7, r0, #31
    64ca:	d5fa      	bpl.n	64c2 <PkaCopyDataIntoPkaReg+0x1e>
    64cc:	4820      	ldr	r0, [pc, #128]	; (6550 <PkaCopyDataIntoPkaReg+0xac>)
    64ce:	4f21      	ldr	r7, [pc, #132]	; (6554 <PkaCopyDataIntoPkaReg+0xb0>)
    64d0:	6005      	str	r5, [r0, #0]
    64d2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    64d6:	42b2      	cmp	r2, r6
    64d8:	d129      	bne.n	652e <PkaCopyDataIntoPkaReg+0x8a>
    64da:	2700      	movs	r7, #0
    64dc:	1c5a      	adds	r2, r3, #1
    64de:	4e1d      	ldr	r6, [pc, #116]	; (6554 <PkaCopyDataIntoPkaReg+0xb0>)
    64e0:	f022 0201 	bic.w	r2, r2, #1
    64e4:	429a      	cmp	r2, r3
    64e6:	d827      	bhi.n	6538 <PkaCopyDataIntoPkaReg+0x94>
    64e8:	6823      	ldr	r3, [r4, #0]
    64ea:	9302      	str	r3, [sp, #8]
    64ec:	9b02      	ldr	r3, [sp, #8]
    64ee:	07de      	lsls	r6, r3, #31
    64f0:	d5fa      	bpl.n	64e8 <PkaCopyDataIntoPkaReg+0x44>
    64f2:	4b19      	ldr	r3, [pc, #100]	; (6558 <PkaCopyDataIntoPkaReg+0xb4>)
    64f4:	440b      	add	r3, r1
    64f6:	009b      	lsls	r3, r3, #2
    64f8:	681b      	ldr	r3, [r3, #0]
    64fa:	331f      	adds	r3, #31
    64fc:	095b      	lsrs	r3, r3, #5
    64fe:	429a      	cmp	r2, r3
    6500:	d213      	bcs.n	652a <PkaCopyDataIntoPkaReg+0x86>
    6502:	6821      	ldr	r1, [r4, #0]
    6504:	9103      	str	r1, [sp, #12]
    6506:	9903      	ldr	r1, [sp, #12]
    6508:	07c9      	lsls	r1, r1, #31
    650a:	d5fa      	bpl.n	6502 <PkaCopyDataIntoPkaReg+0x5e>
    650c:	2100      	movs	r1, #0
    650e:	4415      	add	r5, r2
    6510:	6005      	str	r5, [r0, #0]
    6512:	4608      	mov	r0, r1
    6514:	1a9b      	subs	r3, r3, r2
    6516:	4a0f      	ldr	r2, [pc, #60]	; (6554 <PkaCopyDataIntoPkaReg+0xb0>)
    6518:	428b      	cmp	r3, r1
    651a:	d810      	bhi.n	653e <PkaCopyDataIntoPkaReg+0x9a>
    651c:	2000      	movs	r0, #0
    651e:	1c5a      	adds	r2, r3, #1
    6520:	490c      	ldr	r1, [pc, #48]	; (6554 <PkaCopyDataIntoPkaReg+0xb0>)
    6522:	f022 0201 	bic.w	r2, r2, #1
    6526:	429a      	cmp	r2, r3
    6528:	d80c      	bhi.n	6544 <PkaCopyDataIntoPkaReg+0xa0>
    652a:	b005      	add	sp, #20
    652c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    652e:	f852 cb04 	ldr.w	ip, [r2], #4
    6532:	f8c7 c000 	str.w	ip, [r7]
    6536:	e7ce      	b.n	64d6 <PkaCopyDataIntoPkaReg+0x32>
    6538:	6037      	str	r7, [r6, #0]
    653a:	3301      	adds	r3, #1
    653c:	e7d2      	b.n	64e4 <PkaCopyDataIntoPkaReg+0x40>
    653e:	6010      	str	r0, [r2, #0]
    6540:	3101      	adds	r1, #1
    6542:	e7e9      	b.n	6518 <PkaCopyDataIntoPkaReg+0x74>
    6544:	6008      	str	r0, [r1, #0]
    6546:	3301      	adds	r3, #1
    6548:	e7ed      	b.n	6526 <PkaCopyDataIntoPkaReg+0x82>
    654a:	bf00      	nop
    654c:	508410b4 	.word	0x508410b4
    6550:	508410d4 	.word	0x508410d4
    6554:	508410d8 	.word	0x508410d8
    6558:	14210424 	.word	0x14210424

0000655c <PkaEcdsaVerify>:
    655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6560:	4b81      	ldr	r3, [pc, #516]	; (6768 <PkaEcdsaVerify+0x20c>)
    6562:	b0a0      	sub	sp, #128	; 0x80
    6564:	681d      	ldr	r5, [r3, #0]
    6566:	6898      	ldr	r0, [r3, #8]
    6568:	3320      	adds	r3, #32
    656a:	461e      	mov	r6, r3
    656c:	681a      	ldr	r2, [r3, #0]
    656e:	9201      	str	r2, [sp, #4]
    6570:	9a01      	ldr	r2, [sp, #4]
    6572:	07d7      	lsls	r7, r2, #31
    6574:	d5fa      	bpl.n	656c <PkaEcdsaVerify+0x10>
    6576:	4b7d      	ldr	r3, [pc, #500]	; (676c <PkaEcdsaVerify+0x210>)
    6578:	4a7d      	ldr	r2, [pc, #500]	; (6770 <PkaEcdsaVerify+0x214>)
    657a:	601a      	str	r2, [r3, #0]
    657c:	6832      	ldr	r2, [r6, #0]
    657e:	9202      	str	r2, [sp, #8]
    6580:	9a02      	ldr	r2, [sp, #8]
    6582:	07d4      	lsls	r4, r2, #31
    6584:	d5fa      	bpl.n	657c <PkaEcdsaVerify+0x20>
    6586:	4a7b      	ldr	r2, [pc, #492]	; (6774 <PkaEcdsaVerify+0x218>)
    6588:	601a      	str	r2, [r3, #0]
    658a:	4a7b      	ldr	r2, [pc, #492]	; (6778 <PkaEcdsaVerify+0x21c>)
    658c:	4614      	mov	r4, r2
    658e:	6811      	ldr	r1, [r2, #0]
    6590:	9103      	str	r1, [sp, #12]
    6592:	9903      	ldr	r1, [sp, #12]
    6594:	07c9      	lsls	r1, r1, #31
    6596:	d5fa      	bpl.n	658e <PkaEcdsaVerify+0x32>
    6598:	4a78      	ldr	r2, [pc, #480]	; (677c <PkaEcdsaVerify+0x220>)
    659a:	6811      	ldr	r1, [r2, #0]
    659c:	f3c1 2140 	ubfx	r1, r1, #9, #1
    65a0:	6837      	ldr	r7, [r6, #0]
    65a2:	9704      	str	r7, [sp, #16]
    65a4:	9f04      	ldr	r7, [sp, #16]
    65a6:	07ff      	lsls	r7, r7, #31
    65a8:	d5fa      	bpl.n	65a0 <PkaEcdsaVerify+0x44>
    65aa:	4f75      	ldr	r7, [pc, #468]	; (6780 <PkaEcdsaVerify+0x224>)
    65ac:	601f      	str	r7, [r3, #0]
    65ae:	6827      	ldr	r7, [r4, #0]
    65b0:	9705      	str	r7, [sp, #20]
    65b2:	9f05      	ldr	r7, [sp, #20]
    65b4:	07ff      	lsls	r7, r7, #31
    65b6:	d5fa      	bpl.n	65ae <PkaEcdsaVerify+0x52>
    65b8:	6817      	ldr	r7, [r2, #0]
    65ba:	2900      	cmp	r1, #0
    65bc:	f000 80cf 	beq.w	675e <PkaEcdsaVerify+0x202>
    65c0:	05b9      	lsls	r1, r7, #22
    65c2:	f140 80cc 	bpl.w	675e <PkaEcdsaVerify+0x202>
    65c6:	6831      	ldr	r1, [r6, #0]
    65c8:	9106      	str	r1, [sp, #24]
    65ca:	9906      	ldr	r1, [sp, #24]
    65cc:	07cf      	lsls	r7, r1, #31
    65ce:	d5fa      	bpl.n	65c6 <PkaEcdsaVerify+0x6a>
    65d0:	496c      	ldr	r1, [pc, #432]	; (6784 <PkaEcdsaVerify+0x228>)
    65d2:	6019      	str	r1, [r3, #0]
    65d4:	6821      	ldr	r1, [r4, #0]
    65d6:	9107      	str	r1, [sp, #28]
    65d8:	9907      	ldr	r1, [sp, #28]
    65da:	07c9      	lsls	r1, r1, #31
    65dc:	d5fa      	bpl.n	65d4 <PkaEcdsaVerify+0x78>
    65de:	6811      	ldr	r1, [r2, #0]
    65e0:	f3c1 2140 	ubfx	r1, r1, #9, #1
    65e4:	6837      	ldr	r7, [r6, #0]
    65e6:	9708      	str	r7, [sp, #32]
    65e8:	9f08      	ldr	r7, [sp, #32]
    65ea:	07ff      	lsls	r7, r7, #31
    65ec:	d5fa      	bpl.n	65e4 <PkaEcdsaVerify+0x88>
    65ee:	4f66      	ldr	r7, [pc, #408]	; (6788 <PkaEcdsaVerify+0x22c>)
    65f0:	601f      	str	r7, [r3, #0]
    65f2:	6827      	ldr	r7, [r4, #0]
    65f4:	9709      	str	r7, [sp, #36]	; 0x24
    65f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    65f8:	07ff      	lsls	r7, r7, #31
    65fa:	d5fa      	bpl.n	65f2 <PkaEcdsaVerify+0x96>
    65fc:	6812      	ldr	r2, [r2, #0]
    65fe:	2900      	cmp	r1, #0
    6600:	f000 80af 	beq.w	6762 <PkaEcdsaVerify+0x206>
    6604:	0591      	lsls	r1, r2, #22
    6606:	f140 80ac 	bpl.w	6762 <PkaEcdsaVerify+0x206>
    660a:	6832      	ldr	r2, [r6, #0]
    660c:	920a      	str	r2, [sp, #40]	; 0x28
    660e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6610:	07d2      	lsls	r2, r2, #31
    6612:	d5fa      	bpl.n	660a <PkaEcdsaVerify+0xae>
    6614:	4a56      	ldr	r2, [pc, #344]	; (6770 <PkaEcdsaVerify+0x214>)
    6616:	601a      	str	r2, [r3, #0]
    6618:	6832      	ldr	r2, [r6, #0]
    661a:	920b      	str	r2, [sp, #44]	; 0x2c
    661c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    661e:	07d7      	lsls	r7, r2, #31
    6620:	d5fa      	bpl.n	6618 <PkaEcdsaVerify+0xbc>
    6622:	4a5a      	ldr	r2, [pc, #360]	; (678c <PkaEcdsaVerify+0x230>)
    6624:	601a      	str	r2, [r3, #0]
    6626:	6831      	ldr	r1, [r6, #0]
    6628:	910c      	str	r1, [sp, #48]	; 0x30
    662a:	990c      	ldr	r1, [sp, #48]	; 0x30
    662c:	07cc      	lsls	r4, r1, #31
    662e:	d5fa      	bpl.n	6626 <PkaEcdsaVerify+0xca>
    6630:	4957      	ldr	r1, [pc, #348]	; (6790 <PkaEcdsaVerify+0x234>)
    6632:	6019      	str	r1, [r3, #0]
    6634:	6831      	ldr	r1, [r6, #0]
    6636:	910d      	str	r1, [sp, #52]	; 0x34
    6638:	990d      	ldr	r1, [sp, #52]	; 0x34
    663a:	07c9      	lsls	r1, r1, #31
    663c:	d5fa      	bpl.n	6634 <PkaEcdsaVerify+0xd8>
    663e:	4955      	ldr	r1, [pc, #340]	; (6794 <PkaEcdsaVerify+0x238>)
    6640:	6019      	str	r1, [r3, #0]
    6642:	6831      	ldr	r1, [r6, #0]
    6644:	910e      	str	r1, [sp, #56]	; 0x38
    6646:	990e      	ldr	r1, [sp, #56]	; 0x38
    6648:	07cf      	lsls	r7, r1, #31
    664a:	d5fa      	bpl.n	6642 <PkaEcdsaVerify+0xe6>
    664c:	4952      	ldr	r1, [pc, #328]	; (6798 <PkaEcdsaVerify+0x23c>)
    664e:	6019      	str	r1, [r3, #0]
    6650:	6831      	ldr	r1, [r6, #0]
    6652:	910f      	str	r1, [sp, #60]	; 0x3c
    6654:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6656:	07cc      	lsls	r4, r1, #31
    6658:	d5fa      	bpl.n	6650 <PkaEcdsaVerify+0xf4>
    665a:	4950      	ldr	r1, [pc, #320]	; (679c <PkaEcdsaVerify+0x240>)
    665c:	6019      	str	r1, [r3, #0]
    665e:	4b50      	ldr	r3, [pc, #320]	; (67a0 <PkaEcdsaVerify+0x244>)
    6660:	461e      	mov	r6, r3
    6662:	6819      	ldr	r1, [r3, #0]
    6664:	9110      	str	r1, [sp, #64]	; 0x40
    6666:	9910      	ldr	r1, [sp, #64]	; 0x40
    6668:	07c9      	lsls	r1, r1, #31
    666a:	d5fa      	bpl.n	6662 <PkaEcdsaVerify+0x106>
    666c:	4c3f      	ldr	r4, [pc, #252]	; (676c <PkaEcdsaVerify+0x210>)
    666e:	4b4d      	ldr	r3, [pc, #308]	; (67a4 <PkaEcdsaVerify+0x248>)
    6670:	6023      	str	r3, [r4, #0]
    6672:	6833      	ldr	r3, [r6, #0]
    6674:	9311      	str	r3, [sp, #68]	; 0x44
    6676:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6678:	07db      	lsls	r3, r3, #31
    667a:	d5fa      	bpl.n	6672 <PkaEcdsaVerify+0x116>
    667c:	4b4a      	ldr	r3, [pc, #296]	; (67a8 <PkaEcdsaVerify+0x24c>)
    667e:	6023      	str	r3, [r4, #0]
    6680:	6833      	ldr	r3, [r6, #0]
    6682:	9312      	str	r3, [sp, #72]	; 0x48
    6684:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6686:	07df      	lsls	r7, r3, #31
    6688:	d5fa      	bpl.n	6680 <PkaEcdsaVerify+0x124>
    668a:	4b48      	ldr	r3, [pc, #288]	; (67ac <PkaEcdsaVerify+0x250>)
    668c:	6023      	str	r3, [r4, #0]
    668e:	4b3a      	ldr	r3, [pc, #232]	; (6778 <PkaEcdsaVerify+0x21c>)
    6690:	4698      	mov	r8, r3
    6692:	6819      	ldr	r1, [r3, #0]
    6694:	9113      	str	r1, [sp, #76]	; 0x4c
    6696:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6698:	07c9      	lsls	r1, r1, #31
    669a:	d5fa      	bpl.n	6692 <PkaEcdsaVerify+0x136>
    669c:	4f32      	ldr	r7, [pc, #200]	; (6768 <PkaEcdsaVerify+0x20c>)
    669e:	6038      	str	r0, [r7, #0]
    66a0:	6833      	ldr	r3, [r6, #0]
    66a2:	9314      	str	r3, [sp, #80]	; 0x50
    66a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    66a6:	07db      	lsls	r3, r3, #31
    66a8:	d5fa      	bpl.n	66a0 <PkaEcdsaVerify+0x144>
    66aa:	6022      	str	r2, [r4, #0]
    66ac:	6833      	ldr	r3, [r6, #0]
    66ae:	9315      	str	r3, [sp, #84]	; 0x54
    66b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    66b2:	07d8      	lsls	r0, r3, #31
    66b4:	d5fa      	bpl.n	66ac <PkaEcdsaVerify+0x150>
    66b6:	4b3e      	ldr	r3, [pc, #248]	; (67b0 <PkaEcdsaVerify+0x254>)
    66b8:	6023      	str	r3, [r4, #0]
    66ba:	6833      	ldr	r3, [r6, #0]
    66bc:	9316      	str	r3, [sp, #88]	; 0x58
    66be:	9b16      	ldr	r3, [sp, #88]	; 0x58
    66c0:	07d9      	lsls	r1, r3, #31
    66c2:	d5fa      	bpl.n	66ba <PkaEcdsaVerify+0x15e>
    66c4:	4b3b      	ldr	r3, [pc, #236]	; (67b4 <PkaEcdsaVerify+0x258>)
    66c6:	6023      	str	r3, [r4, #0]
    66c8:	6833      	ldr	r3, [r6, #0]
    66ca:	9317      	str	r3, [sp, #92]	; 0x5c
    66cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    66ce:	07da      	lsls	r2, r3, #31
    66d0:	d5fa      	bpl.n	66c8 <PkaEcdsaVerify+0x16c>
    66d2:	4b39      	ldr	r3, [pc, #228]	; (67b8 <PkaEcdsaVerify+0x25c>)
    66d4:	6023      	str	r3, [r4, #0]
    66d6:	6833      	ldr	r3, [r6, #0]
    66d8:	9318      	str	r3, [sp, #96]	; 0x60
    66da:	9b18      	ldr	r3, [sp, #96]	; 0x60
    66dc:	07db      	lsls	r3, r3, #31
    66de:	d5fa      	bpl.n	66d6 <PkaEcdsaVerify+0x17a>
    66e0:	4b36      	ldr	r3, [pc, #216]	; (67bc <PkaEcdsaVerify+0x260>)
    66e2:	6023      	str	r3, [r4, #0]
    66e4:	6833      	ldr	r3, [r6, #0]
    66e6:	9319      	str	r3, [sp, #100]	; 0x64
    66e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    66ea:	07d8      	lsls	r0, r3, #31
    66ec:	d5fa      	bpl.n	66e4 <PkaEcdsaVerify+0x188>
    66ee:	4b34      	ldr	r3, [pc, #208]	; (67c0 <PkaEcdsaVerify+0x264>)
    66f0:	6023      	str	r3, [r4, #0]
    66f2:	6833      	ldr	r3, [r6, #0]
    66f4:	931a      	str	r3, [sp, #104]	; 0x68
    66f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    66f8:	07d9      	lsls	r1, r3, #31
    66fa:	d5fa      	bpl.n	66f2 <PkaEcdsaVerify+0x196>
    66fc:	4b31      	ldr	r3, [pc, #196]	; (67c4 <PkaEcdsaVerify+0x268>)
    66fe:	6023      	str	r3, [r4, #0]
    6700:	6833      	ldr	r3, [r6, #0]
    6702:	931b      	str	r3, [sp, #108]	; 0x6c
    6704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6706:	07da      	lsls	r2, r3, #31
    6708:	d5fa      	bpl.n	6700 <PkaEcdsaVerify+0x1a4>
    670a:	4b2f      	ldr	r3, [pc, #188]	; (67c8 <PkaEcdsaVerify+0x26c>)
    670c:	6023      	str	r3, [r4, #0]
    670e:	f000 fc1d 	bl	6f4c <PkaSum2ScalarMullt>
    6712:	bb08      	cbnz	r0, 6758 <PkaEcdsaVerify+0x1fc>
    6714:	f8d8 3000 	ldr.w	r3, [r8]
    6718:	931c      	str	r3, [sp, #112]	; 0x70
    671a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    671c:	07db      	lsls	r3, r3, #31
    671e:	d5f9      	bpl.n	6714 <PkaEcdsaVerify+0x1b8>
    6720:	603d      	str	r5, [r7, #0]
    6722:	6833      	ldr	r3, [r6, #0]
    6724:	931d      	str	r3, [sp, #116]	; 0x74
    6726:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6728:	07d9      	lsls	r1, r3, #31
    672a:	d5fa      	bpl.n	6722 <PkaEcdsaVerify+0x1c6>
    672c:	4b27      	ldr	r3, [pc, #156]	; (67cc <PkaEcdsaVerify+0x270>)
    672e:	6023      	str	r3, [r4, #0]
    6730:	6833      	ldr	r3, [r6, #0]
    6732:	931e      	str	r3, [sp, #120]	; 0x78
    6734:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    6736:	07da      	lsls	r2, r3, #31
    6738:	d5fa      	bpl.n	6730 <PkaEcdsaVerify+0x1d4>
    673a:	4b25      	ldr	r3, [pc, #148]	; (67d0 <PkaEcdsaVerify+0x274>)
    673c:	6023      	str	r3, [r4, #0]
    673e:	f8d8 3000 	ldr.w	r3, [r8]
    6742:	931f      	str	r3, [sp, #124]	; 0x7c
    6744:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    6746:	07db      	lsls	r3, r3, #31
    6748:	d5f9      	bpl.n	673e <PkaEcdsaVerify+0x1e2>
    674a:	4b0c      	ldr	r3, [pc, #48]	; (677c <PkaEcdsaVerify+0x220>)
    674c:	681b      	ldr	r3, [r3, #0]
    674e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    6752:	4b20      	ldr	r3, [pc, #128]	; (67d4 <PkaEcdsaVerify+0x278>)
    6754:	bf08      	it	eq
    6756:	4618      	moveq	r0, r3
    6758:	b020      	add	sp, #128	; 0x80
    675a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    675e:	481e      	ldr	r0, [pc, #120]	; (67d8 <PkaEcdsaVerify+0x27c>)
    6760:	e7fa      	b.n	6758 <PkaEcdsaVerify+0x1fc>
    6762:	481e      	ldr	r0, [pc, #120]	; (67dc <PkaEcdsaVerify+0x280>)
    6764:	e7f8      	b.n	6758 <PkaEcdsaVerify+0x1fc>
    6766:	bf00      	nop
    6768:	50841090 	.word	0x50841090
    676c:	50841080 	.word	0x50841080
    6770:	51021000 	.word	0x51021000
    6774:	29721fc0 	.word	0x29721fc0
    6778:	508410b4 	.word	0x508410b4
    677c:	50841088 	.word	0x50841088
    6780:	2901cfc0 	.word	0x2901cfc0
    6784:	290e1fc0 	.word	0x290e1fc0
    6788:	29003fc0 	.word	0x29003fc0
    678c:	49020140 	.word	0x49020140
    6790:	a8843100 	.word	0xa8843100
    6794:	49160000 	.word	0x49160000
    6798:	a1080140 	.word	0xa1080140
    679c:	88084480 	.word	0x88084480
    67a0:	508410b0 	.word	0x508410b0
    67a4:	887044c0 	.word	0x887044c0
    67a8:	417a0780 	.word	0x417a0780
    67ac:	417e07c0 	.word	0x417e07c0
    67b0:	496a0000 	.word	0x496a0000
    67b4:	49160680 	.word	0x49160680
    67b8:	496e0040 	.word	0x496e0040
    67bc:	21000200 	.word	0x21000200
    67c0:	21208200 	.word	0x21208200
    67c4:	21208240 	.word	0x21208240
    67c8:	21248280 	.word	0x21248280
    67cc:	a161a140 	.word	0xa161a140
    67d0:	5161c800 	.word	0x5161c800
    67d4:	00f10803 	.word	0x00f10803
    67d8:	00f10801 	.word	0x00f10801
    67dc:	00f10802 	.word	0x00f10802

000067e0 <nrf_cc310_bl_hash_update_internal>:
    67e0:	4b32      	ldr	r3, [pc, #200]	; (68ac <nrf_cc310_bl_hash_update_internal+0xcc>)
    67e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67e6:	4680      	mov	r8, r0
    67e8:	4692      	mov	sl, r2
    67ea:	4699      	mov	r9, r3
    67ec:	6844      	ldr	r4, [r0, #4]
    67ee:	681a      	ldr	r2, [r3, #0]
    67f0:	2a00      	cmp	r2, #0
    67f2:	d1fc      	bne.n	67ee <nrf_cc310_bl_hash_update_internal+0xe>
    67f4:	4b2e      	ldr	r3, [pc, #184]	; (68b0 <nrf_cc310_bl_hash_update_internal+0xd0>)
    67f6:	469b      	mov	fp, r3
    67f8:	681a      	ldr	r2, [r3, #0]
    67fa:	2a00      	cmp	r2, #0
    67fc:	d1fc      	bne.n	67f8 <nrf_cc310_bl_hash_update_internal+0x18>
    67fe:	f04f 30ff 	mov.w	r0, #4294967295
    6802:	9101      	str	r1, [sp, #4]
    6804:	f000 fc94 	bl	7130 <SaSi_HalClearInterruptBit>
    6808:	2080      	movs	r0, #128	; 0x80
    680a:	f000 fc97 	bl	713c <SaSi_HalMaskInterrupt>
    680e:	2301      	movs	r3, #1
    6810:	2007      	movs	r0, #7
    6812:	4a28      	ldr	r2, [pc, #160]	; (68b4 <nrf_cc310_bl_hash_update_internal+0xd4>)
    6814:	4d28      	ldr	r5, [pc, #160]	; (68b8 <nrf_cc310_bl_hash_update_internal+0xd8>)
    6816:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    681a:	602b      	str	r3, [r5, #0]
    681c:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    6820:	6013      	str	r3, [r2, #0]
    6822:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6824:	4f25      	ldr	r7, [pc, #148]	; (68bc <nrf_cc310_bl_hash_update_internal+0xdc>)
    6826:	4e26      	ldr	r6, [pc, #152]	; (68c0 <nrf_cc310_bl_hash_update_internal+0xe0>)
    6828:	603b      	str	r3, [r7, #0]
    682a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    682c:	4620      	mov	r0, r4
    682e:	6033      	str	r3, [r6, #0]
    6830:	f8d8 3000 	ldr.w	r3, [r8]
    6834:	f842 3c04 	str.w	r3, [r2, #-4]
    6838:	f8d8 3008 	ldr.w	r3, [r8, #8]
    683c:	4798      	blx	r3
    683e:	9901      	ldr	r1, [sp, #4]
    6840:	f8d9 3000 	ldr.w	r3, [r9]
    6844:	2b00      	cmp	r3, #0
    6846:	d1fb      	bne.n	6840 <nrf_cc310_bl_hash_update_internal+0x60>
    6848:	f1ba 0f00 	cmp.w	sl, #0
    684c:	d120      	bne.n	6890 <nrf_cc310_bl_hash_update_internal+0xb0>
    684e:	2204      	movs	r2, #4
    6850:	4b1c      	ldr	r3, [pc, #112]	; (68c4 <nrf_cc310_bl_hash_update_internal+0xe4>)
    6852:	601a      	str	r2, [r3, #0]
    6854:	f8d9 3000 	ldr.w	r3, [r9]
    6858:	2b00      	cmp	r3, #0
    685a:	d1fb      	bne.n	6854 <nrf_cc310_bl_hash_update_internal+0x74>
    685c:	f8db a000 	ldr.w	sl, [fp]
    6860:	f1ba 0f00 	cmp.w	sl, #0
    6864:	d1fa      	bne.n	685c <nrf_cc310_bl_hash_update_internal+0x7c>
    6866:	f8d8 300c 	ldr.w	r3, [r8, #12]
    686a:	4620      	mov	r0, r4
    686c:	4798      	blx	r3
    686e:	683b      	ldr	r3, [r7, #0]
    6870:	6263      	str	r3, [r4, #36]	; 0x24
    6872:	6833      	ldr	r3, [r6, #0]
    6874:	62a3      	str	r3, [r4, #40]	; 0x28
    6876:	4b14      	ldr	r3, [pc, #80]	; (68c8 <nrf_cc310_bl_hash_update_internal+0xe8>)
    6878:	f8c3 a000 	str.w	sl, [r3]
    687c:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    6880:	f8d9 3000 	ldr.w	r3, [r9]
    6884:	2b00      	cmp	r3, #0
    6886:	d1fb      	bne.n	6880 <nrf_cc310_bl_hash_update_internal+0xa0>
    6888:	602b      	str	r3, [r5, #0]
    688a:	b003      	add	sp, #12
    688c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6890:	6a23      	ldr	r3, [r4, #32]
    6892:	2040      	movs	r0, #64	; 0x40
    6894:	2b01      	cmp	r3, #1
    6896:	bf04      	itt	eq
    6898:	4a0b      	ldreq	r2, [pc, #44]	; (68c8 <nrf_cc310_bl_hash_update_internal+0xe8>)
    689a:	6013      	streq	r3, [r2, #0]
    689c:	4b0b      	ldr	r3, [pc, #44]	; (68cc <nrf_cc310_bl_hash_update_internal+0xec>)
    689e:	6019      	str	r1, [r3, #0]
    68a0:	f8c3 a004 	str.w	sl, [r3, #4]
    68a4:	f000 fc50 	bl	7148 <SaSi_HalWaitInterrupt>
    68a8:	e7d4      	b.n	6854 <nrf_cc310_bl_hash_update_internal+0x74>
    68aa:	bf00      	nop
    68ac:	50841910 	.word	0x50841910
    68b0:	50841c20 	.word	0x50841c20
    68b4:	50841900 	.word	0x50841900
    68b8:	50841818 	.word	0x50841818
    68bc:	508417cc 	.word	0x508417cc
    68c0:	508417d0 	.word	0x508417d0
    68c4:	508417c8 	.word	0x508417c8
    68c8:	50841684 	.word	0x50841684
    68cc:	50841c28 	.word	0x50841c28

000068d0 <PkaDoubleMdf2Mdf>:
    68d0:	4b54      	ldr	r3, [pc, #336]	; (6a24 <PkaDoubleMdf2Mdf+0x154>)
    68d2:	b510      	push	{r4, lr}
    68d4:	4619      	mov	r1, r3
    68d6:	b098      	sub	sp, #96	; 0x60
    68d8:	681a      	ldr	r2, [r3, #0]
    68da:	9201      	str	r2, [sp, #4]
    68dc:	9a01      	ldr	r2, [sp, #4]
    68de:	07d2      	lsls	r2, r2, #31
    68e0:	d5fa      	bpl.n	68d8 <PkaDoubleMdf2Mdf+0x8>
    68e2:	4b51      	ldr	r3, [pc, #324]	; (6a28 <PkaDoubleMdf2Mdf+0x158>)
    68e4:	4a51      	ldr	r2, [pc, #324]	; (6a2c <PkaDoubleMdf2Mdf+0x15c>)
    68e6:	601a      	str	r2, [r3, #0]
    68e8:	680a      	ldr	r2, [r1, #0]
    68ea:	9202      	str	r2, [sp, #8]
    68ec:	9a02      	ldr	r2, [sp, #8]
    68ee:	07d4      	lsls	r4, r2, #31
    68f0:	d5fa      	bpl.n	68e8 <PkaDoubleMdf2Mdf+0x18>
    68f2:	4a4f      	ldr	r2, [pc, #316]	; (6a30 <PkaDoubleMdf2Mdf+0x160>)
    68f4:	601a      	str	r2, [r3, #0]
    68f6:	680a      	ldr	r2, [r1, #0]
    68f8:	9203      	str	r2, [sp, #12]
    68fa:	9a03      	ldr	r2, [sp, #12]
    68fc:	07d0      	lsls	r0, r2, #31
    68fe:	d5fa      	bpl.n	68f6 <PkaDoubleMdf2Mdf+0x26>
    6900:	484c      	ldr	r0, [pc, #304]	; (6a34 <PkaDoubleMdf2Mdf+0x164>)
    6902:	6018      	str	r0, [r3, #0]
    6904:	680a      	ldr	r2, [r1, #0]
    6906:	9204      	str	r2, [sp, #16]
    6908:	9a04      	ldr	r2, [sp, #16]
    690a:	07d2      	lsls	r2, r2, #31
    690c:	d5fa      	bpl.n	6904 <PkaDoubleMdf2Mdf+0x34>
    690e:	4a4a      	ldr	r2, [pc, #296]	; (6a38 <PkaDoubleMdf2Mdf+0x168>)
    6910:	601a      	str	r2, [r3, #0]
    6912:	680a      	ldr	r2, [r1, #0]
    6914:	9205      	str	r2, [sp, #20]
    6916:	9a05      	ldr	r2, [sp, #20]
    6918:	07d4      	lsls	r4, r2, #31
    691a:	d5fa      	bpl.n	6912 <PkaDoubleMdf2Mdf+0x42>
    691c:	4a47      	ldr	r2, [pc, #284]	; (6a3c <PkaDoubleMdf2Mdf+0x16c>)
    691e:	601a      	str	r2, [r3, #0]
    6920:	680a      	ldr	r2, [r1, #0]
    6922:	9206      	str	r2, [sp, #24]
    6924:	9a06      	ldr	r2, [sp, #24]
    6926:	07d2      	lsls	r2, r2, #31
    6928:	d5fa      	bpl.n	6920 <PkaDoubleMdf2Mdf+0x50>
    692a:	4a45      	ldr	r2, [pc, #276]	; (6a40 <PkaDoubleMdf2Mdf+0x170>)
    692c:	601a      	str	r2, [r3, #0]
    692e:	680a      	ldr	r2, [r1, #0]
    6930:	9207      	str	r2, [sp, #28]
    6932:	9a07      	ldr	r2, [sp, #28]
    6934:	07d4      	lsls	r4, r2, #31
    6936:	d5fa      	bpl.n	692e <PkaDoubleMdf2Mdf+0x5e>
    6938:	4a42      	ldr	r2, [pc, #264]	; (6a44 <PkaDoubleMdf2Mdf+0x174>)
    693a:	601a      	str	r2, [r3, #0]
    693c:	680a      	ldr	r2, [r1, #0]
    693e:	9208      	str	r2, [sp, #32]
    6940:	9a08      	ldr	r2, [sp, #32]
    6942:	07d2      	lsls	r2, r2, #31
    6944:	d5fa      	bpl.n	693c <PkaDoubleMdf2Mdf+0x6c>
    6946:	4a40      	ldr	r2, [pc, #256]	; (6a48 <PkaDoubleMdf2Mdf+0x178>)
    6948:	601a      	str	r2, [r3, #0]
    694a:	680a      	ldr	r2, [r1, #0]
    694c:	9209      	str	r2, [sp, #36]	; 0x24
    694e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6950:	07d4      	lsls	r4, r2, #31
    6952:	d5fa      	bpl.n	694a <PkaDoubleMdf2Mdf+0x7a>
    6954:	4a3d      	ldr	r2, [pc, #244]	; (6a4c <PkaDoubleMdf2Mdf+0x17c>)
    6956:	601a      	str	r2, [r3, #0]
    6958:	680a      	ldr	r2, [r1, #0]
    695a:	920a      	str	r2, [sp, #40]	; 0x28
    695c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    695e:	07d2      	lsls	r2, r2, #31
    6960:	d5fa      	bpl.n	6958 <PkaDoubleMdf2Mdf+0x88>
    6962:	4a3b      	ldr	r2, [pc, #236]	; (6a50 <PkaDoubleMdf2Mdf+0x180>)
    6964:	601a      	str	r2, [r3, #0]
    6966:	680a      	ldr	r2, [r1, #0]
    6968:	920b      	str	r2, [sp, #44]	; 0x2c
    696a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    696c:	07d4      	lsls	r4, r2, #31
    696e:	d5fa      	bpl.n	6966 <PkaDoubleMdf2Mdf+0x96>
    6970:	4a38      	ldr	r2, [pc, #224]	; (6a54 <PkaDoubleMdf2Mdf+0x184>)
    6972:	601a      	str	r2, [r3, #0]
    6974:	680a      	ldr	r2, [r1, #0]
    6976:	920c      	str	r2, [sp, #48]	; 0x30
    6978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    697a:	07d2      	lsls	r2, r2, #31
    697c:	d5fa      	bpl.n	6974 <PkaDoubleMdf2Mdf+0xa4>
    697e:	4a36      	ldr	r2, [pc, #216]	; (6a58 <PkaDoubleMdf2Mdf+0x188>)
    6980:	601a      	str	r2, [r3, #0]
    6982:	680a      	ldr	r2, [r1, #0]
    6984:	920d      	str	r2, [sp, #52]	; 0x34
    6986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6988:	07d4      	lsls	r4, r2, #31
    698a:	d5fa      	bpl.n	6982 <PkaDoubleMdf2Mdf+0xb2>
    698c:	4a33      	ldr	r2, [pc, #204]	; (6a5c <PkaDoubleMdf2Mdf+0x18c>)
    698e:	601a      	str	r2, [r3, #0]
    6990:	680a      	ldr	r2, [r1, #0]
    6992:	920e      	str	r2, [sp, #56]	; 0x38
    6994:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6996:	07d2      	lsls	r2, r2, #31
    6998:	d5fa      	bpl.n	6990 <PkaDoubleMdf2Mdf+0xc0>
    699a:	4a31      	ldr	r2, [pc, #196]	; (6a60 <PkaDoubleMdf2Mdf+0x190>)
    699c:	601a      	str	r2, [r3, #0]
    699e:	680a      	ldr	r2, [r1, #0]
    69a0:	920f      	str	r2, [sp, #60]	; 0x3c
    69a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    69a4:	07d4      	lsls	r4, r2, #31
    69a6:	d5fa      	bpl.n	699e <PkaDoubleMdf2Mdf+0xce>
    69a8:	4a2e      	ldr	r2, [pc, #184]	; (6a64 <PkaDoubleMdf2Mdf+0x194>)
    69aa:	601a      	str	r2, [r3, #0]
    69ac:	680a      	ldr	r2, [r1, #0]
    69ae:	9210      	str	r2, [sp, #64]	; 0x40
    69b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    69b2:	07d2      	lsls	r2, r2, #31
    69b4:	d5fa      	bpl.n	69ac <PkaDoubleMdf2Mdf+0xdc>
    69b6:	4a2c      	ldr	r2, [pc, #176]	; (6a68 <PkaDoubleMdf2Mdf+0x198>)
    69b8:	601a      	str	r2, [r3, #0]
    69ba:	4b1a      	ldr	r3, [pc, #104]	; (6a24 <PkaDoubleMdf2Mdf+0x154>)
    69bc:	4619      	mov	r1, r3
    69be:	681c      	ldr	r4, [r3, #0]
    69c0:	9411      	str	r4, [sp, #68]	; 0x44
    69c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
    69c4:	07e4      	lsls	r4, r4, #31
    69c6:	d5fa      	bpl.n	69be <PkaDoubleMdf2Mdf+0xee>
    69c8:	4b17      	ldr	r3, [pc, #92]	; (6a28 <PkaDoubleMdf2Mdf+0x158>)
    69ca:	6018      	str	r0, [r3, #0]
    69cc:	6808      	ldr	r0, [r1, #0]
    69ce:	9012      	str	r0, [sp, #72]	; 0x48
    69d0:	9812      	ldr	r0, [sp, #72]	; 0x48
    69d2:	07c4      	lsls	r4, r0, #31
    69d4:	d5fa      	bpl.n	69cc <PkaDoubleMdf2Mdf+0xfc>
    69d6:	601a      	str	r2, [r3, #0]
    69d8:	680a      	ldr	r2, [r1, #0]
    69da:	9213      	str	r2, [sp, #76]	; 0x4c
    69dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    69de:	07d0      	lsls	r0, r2, #31
    69e0:	d5fa      	bpl.n	69d8 <PkaDoubleMdf2Mdf+0x108>
    69e2:	4a12      	ldr	r2, [pc, #72]	; (6a2c <PkaDoubleMdf2Mdf+0x15c>)
    69e4:	601a      	str	r2, [r3, #0]
    69e6:	680a      	ldr	r2, [r1, #0]
    69e8:	9214      	str	r2, [sp, #80]	; 0x50
    69ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
    69ec:	07d2      	lsls	r2, r2, #31
    69ee:	d5fa      	bpl.n	69e6 <PkaDoubleMdf2Mdf+0x116>
    69f0:	4a1e      	ldr	r2, [pc, #120]	; (6a6c <PkaDoubleMdf2Mdf+0x19c>)
    69f2:	601a      	str	r2, [r3, #0]
    69f4:	680a      	ldr	r2, [r1, #0]
    69f6:	9215      	str	r2, [sp, #84]	; 0x54
    69f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
    69fa:	07d4      	lsls	r4, r2, #31
    69fc:	d5fa      	bpl.n	69f4 <PkaDoubleMdf2Mdf+0x124>
    69fe:	4a1c      	ldr	r2, [pc, #112]	; (6a70 <PkaDoubleMdf2Mdf+0x1a0>)
    6a00:	601a      	str	r2, [r3, #0]
    6a02:	680a      	ldr	r2, [r1, #0]
    6a04:	9216      	str	r2, [sp, #88]	; 0x58
    6a06:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6a08:	07d0      	lsls	r0, r2, #31
    6a0a:	d5fa      	bpl.n	6a02 <PkaDoubleMdf2Mdf+0x132>
    6a0c:	4a19      	ldr	r2, [pc, #100]	; (6a74 <PkaDoubleMdf2Mdf+0x1a4>)
    6a0e:	601a      	str	r2, [r3, #0]
    6a10:	680a      	ldr	r2, [r1, #0]
    6a12:	9217      	str	r2, [sp, #92]	; 0x5c
    6a14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    6a16:	07d2      	lsls	r2, r2, #31
    6a18:	d5fa      	bpl.n	6a10 <PkaDoubleMdf2Mdf+0x140>
    6a1a:	4a17      	ldr	r2, [pc, #92]	; (6a78 <PkaDoubleMdf2Mdf+0x1a8>)
    6a1c:	601a      	str	r2, [r3, #0]
    6a1e:	b018      	add	sp, #96	; 0x60
    6a20:	bd10      	pop	{r4, pc}
    6a22:	bf00      	nop
    6a24:	508410b0 	.word	0x508410b0
    6a28:	50841080 	.word	0x50841080
    6a2c:	21659300 	.word	0x21659300
    6a30:	90310400 	.word	0x90310400
    6a34:	90659640 	.word	0x90659640
    6a38:	21618300 	.word	0x21618300
    6a3c:	2130c300 	.word	0x2130c300
    6a40:	9064c300 	.word	0x9064c300
    6a44:	90618100 	.word	0x90618100
    6a48:	21104600 	.word	0x21104600
    6a4c:	21118100 	.word	0x21118100
    6a50:	21444100 	.word	0x21444100
    6a54:	2920c300 	.word	0x2920c300
    6a58:	c810460c 	.word	0xc810460c
    6a5c:	21318600 	.word	0x21318600
    6a60:	2160c300 	.word	0x2160c300
    6a64:	2928c140 	.word	0x2928c140
    6a68:	21659640 	.word	0x21659640
    6a6c:	90311300 	.word	0x90311300
    6a70:	29259640 	.word	0x29259640
    6a74:	c8144659 	.word	0xc8144659
    6a78:	49320440 	.word	0x49320440

00006a7c <PkaDoubleMdf2Jcb>:
    6a7c:	4b49      	ldr	r3, [pc, #292]	; (6ba4 <PkaDoubleMdf2Jcb+0x128>)
    6a7e:	b510      	push	{r4, lr}
    6a80:	4619      	mov	r1, r3
    6a82:	b094      	sub	sp, #80	; 0x50
    6a84:	681a      	ldr	r2, [r3, #0]
    6a86:	9200      	str	r2, [sp, #0]
    6a88:	9a00      	ldr	r2, [sp, #0]
    6a8a:	07d2      	lsls	r2, r2, #31
    6a8c:	d5fa      	bpl.n	6a84 <PkaDoubleMdf2Jcb+0x8>
    6a8e:	4b46      	ldr	r3, [pc, #280]	; (6ba8 <PkaDoubleMdf2Jcb+0x12c>)
    6a90:	4a46      	ldr	r2, [pc, #280]	; (6bac <PkaDoubleMdf2Jcb+0x130>)
    6a92:	601a      	str	r2, [r3, #0]
    6a94:	680a      	ldr	r2, [r1, #0]
    6a96:	9201      	str	r2, [sp, #4]
    6a98:	9a01      	ldr	r2, [sp, #4]
    6a9a:	07d4      	lsls	r4, r2, #31
    6a9c:	d5fa      	bpl.n	6a94 <PkaDoubleMdf2Jcb+0x18>
    6a9e:	4a44      	ldr	r2, [pc, #272]	; (6bb0 <PkaDoubleMdf2Jcb+0x134>)
    6aa0:	601a      	str	r2, [r3, #0]
    6aa2:	680a      	ldr	r2, [r1, #0]
    6aa4:	9202      	str	r2, [sp, #8]
    6aa6:	9a02      	ldr	r2, [sp, #8]
    6aa8:	07d0      	lsls	r0, r2, #31
    6aaa:	d5fa      	bpl.n	6aa2 <PkaDoubleMdf2Jcb+0x26>
    6aac:	4841      	ldr	r0, [pc, #260]	; (6bb4 <PkaDoubleMdf2Jcb+0x138>)
    6aae:	6018      	str	r0, [r3, #0]
    6ab0:	680a      	ldr	r2, [r1, #0]
    6ab2:	9203      	str	r2, [sp, #12]
    6ab4:	9a03      	ldr	r2, [sp, #12]
    6ab6:	07d2      	lsls	r2, r2, #31
    6ab8:	d5fa      	bpl.n	6ab0 <PkaDoubleMdf2Jcb+0x34>
    6aba:	4a3f      	ldr	r2, [pc, #252]	; (6bb8 <PkaDoubleMdf2Jcb+0x13c>)
    6abc:	601a      	str	r2, [r3, #0]
    6abe:	680a      	ldr	r2, [r1, #0]
    6ac0:	9204      	str	r2, [sp, #16]
    6ac2:	9a04      	ldr	r2, [sp, #16]
    6ac4:	07d4      	lsls	r4, r2, #31
    6ac6:	d5fa      	bpl.n	6abe <PkaDoubleMdf2Jcb+0x42>
    6ac8:	4a3c      	ldr	r2, [pc, #240]	; (6bbc <PkaDoubleMdf2Jcb+0x140>)
    6aca:	601a      	str	r2, [r3, #0]
    6acc:	680a      	ldr	r2, [r1, #0]
    6ace:	9205      	str	r2, [sp, #20]
    6ad0:	9a05      	ldr	r2, [sp, #20]
    6ad2:	07d2      	lsls	r2, r2, #31
    6ad4:	d5fa      	bpl.n	6acc <PkaDoubleMdf2Jcb+0x50>
    6ad6:	4a3a      	ldr	r2, [pc, #232]	; (6bc0 <PkaDoubleMdf2Jcb+0x144>)
    6ad8:	601a      	str	r2, [r3, #0]
    6ada:	680a      	ldr	r2, [r1, #0]
    6adc:	9206      	str	r2, [sp, #24]
    6ade:	9a06      	ldr	r2, [sp, #24]
    6ae0:	07d4      	lsls	r4, r2, #31
    6ae2:	d5fa      	bpl.n	6ada <PkaDoubleMdf2Jcb+0x5e>
    6ae4:	4a37      	ldr	r2, [pc, #220]	; (6bc4 <PkaDoubleMdf2Jcb+0x148>)
    6ae6:	601a      	str	r2, [r3, #0]
    6ae8:	680a      	ldr	r2, [r1, #0]
    6aea:	9207      	str	r2, [sp, #28]
    6aec:	9a07      	ldr	r2, [sp, #28]
    6aee:	07d2      	lsls	r2, r2, #31
    6af0:	d5fa      	bpl.n	6ae8 <PkaDoubleMdf2Jcb+0x6c>
    6af2:	4a35      	ldr	r2, [pc, #212]	; (6bc8 <PkaDoubleMdf2Jcb+0x14c>)
    6af4:	601a      	str	r2, [r3, #0]
    6af6:	680a      	ldr	r2, [r1, #0]
    6af8:	9208      	str	r2, [sp, #32]
    6afa:	9a08      	ldr	r2, [sp, #32]
    6afc:	07d4      	lsls	r4, r2, #31
    6afe:	d5fa      	bpl.n	6af6 <PkaDoubleMdf2Jcb+0x7a>
    6b00:	4a32      	ldr	r2, [pc, #200]	; (6bcc <PkaDoubleMdf2Jcb+0x150>)
    6b02:	601a      	str	r2, [r3, #0]
    6b04:	680a      	ldr	r2, [r1, #0]
    6b06:	9209      	str	r2, [sp, #36]	; 0x24
    6b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6b0a:	07d2      	lsls	r2, r2, #31
    6b0c:	d5fa      	bpl.n	6b04 <PkaDoubleMdf2Jcb+0x88>
    6b0e:	4a30      	ldr	r2, [pc, #192]	; (6bd0 <PkaDoubleMdf2Jcb+0x154>)
    6b10:	601a      	str	r2, [r3, #0]
    6b12:	680a      	ldr	r2, [r1, #0]
    6b14:	920a      	str	r2, [sp, #40]	; 0x28
    6b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6b18:	07d4      	lsls	r4, r2, #31
    6b1a:	d5fa      	bpl.n	6b12 <PkaDoubleMdf2Jcb+0x96>
    6b1c:	4a2d      	ldr	r2, [pc, #180]	; (6bd4 <PkaDoubleMdf2Jcb+0x158>)
    6b1e:	601a      	str	r2, [r3, #0]
    6b20:	680a      	ldr	r2, [r1, #0]
    6b22:	920b      	str	r2, [sp, #44]	; 0x2c
    6b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6b26:	07d2      	lsls	r2, r2, #31
    6b28:	d5fa      	bpl.n	6b20 <PkaDoubleMdf2Jcb+0xa4>
    6b2a:	4a2b      	ldr	r2, [pc, #172]	; (6bd8 <PkaDoubleMdf2Jcb+0x15c>)
    6b2c:	601a      	str	r2, [r3, #0]
    6b2e:	680a      	ldr	r2, [r1, #0]
    6b30:	920c      	str	r2, [sp, #48]	; 0x30
    6b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6b34:	07d4      	lsls	r4, r2, #31
    6b36:	d5fa      	bpl.n	6b2e <PkaDoubleMdf2Jcb+0xb2>
    6b38:	4a28      	ldr	r2, [pc, #160]	; (6bdc <PkaDoubleMdf2Jcb+0x160>)
    6b3a:	601a      	str	r2, [r3, #0]
    6b3c:	680a      	ldr	r2, [r1, #0]
    6b3e:	920d      	str	r2, [sp, #52]	; 0x34
    6b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6b42:	07d2      	lsls	r2, r2, #31
    6b44:	d5fa      	bpl.n	6b3c <PkaDoubleMdf2Jcb+0xc0>
    6b46:	4a26      	ldr	r2, [pc, #152]	; (6be0 <PkaDoubleMdf2Jcb+0x164>)
    6b48:	601a      	str	r2, [r3, #0]
    6b4a:	680a      	ldr	r2, [r1, #0]
    6b4c:	920e      	str	r2, [sp, #56]	; 0x38
    6b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6b50:	07d4      	lsls	r4, r2, #31
    6b52:	d5fa      	bpl.n	6b4a <PkaDoubleMdf2Jcb+0xce>
    6b54:	4a23      	ldr	r2, [pc, #140]	; (6be4 <PkaDoubleMdf2Jcb+0x168>)
    6b56:	601a      	str	r2, [r3, #0]
    6b58:	680a      	ldr	r2, [r1, #0]
    6b5a:	920f      	str	r2, [sp, #60]	; 0x3c
    6b5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6b5e:	07d2      	lsls	r2, r2, #31
    6b60:	d5fa      	bpl.n	6b58 <PkaDoubleMdf2Jcb+0xdc>
    6b62:	4a21      	ldr	r2, [pc, #132]	; (6be8 <PkaDoubleMdf2Jcb+0x16c>)
    6b64:	601a      	str	r2, [r3, #0]
    6b66:	4b0f      	ldr	r3, [pc, #60]	; (6ba4 <PkaDoubleMdf2Jcb+0x128>)
    6b68:	4619      	mov	r1, r3
    6b6a:	681c      	ldr	r4, [r3, #0]
    6b6c:	9410      	str	r4, [sp, #64]	; 0x40
    6b6e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    6b70:	07e4      	lsls	r4, r4, #31
    6b72:	d5fa      	bpl.n	6b6a <PkaDoubleMdf2Jcb+0xee>
    6b74:	4b0c      	ldr	r3, [pc, #48]	; (6ba8 <PkaDoubleMdf2Jcb+0x12c>)
    6b76:	6018      	str	r0, [r3, #0]
    6b78:	6808      	ldr	r0, [r1, #0]
    6b7a:	9011      	str	r0, [sp, #68]	; 0x44
    6b7c:	9811      	ldr	r0, [sp, #68]	; 0x44
    6b7e:	07c4      	lsls	r4, r0, #31
    6b80:	d5fa      	bpl.n	6b78 <PkaDoubleMdf2Jcb+0xfc>
    6b82:	601a      	str	r2, [r3, #0]
    6b84:	680a      	ldr	r2, [r1, #0]
    6b86:	9212      	str	r2, [sp, #72]	; 0x48
    6b88:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6b8a:	07d0      	lsls	r0, r2, #31
    6b8c:	d5fa      	bpl.n	6b84 <PkaDoubleMdf2Jcb+0x108>
    6b8e:	4a17      	ldr	r2, [pc, #92]	; (6bec <PkaDoubleMdf2Jcb+0x170>)
    6b90:	601a      	str	r2, [r3, #0]
    6b92:	680a      	ldr	r2, [r1, #0]
    6b94:	9213      	str	r2, [sp, #76]	; 0x4c
    6b96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6b98:	07d2      	lsls	r2, r2, #31
    6b9a:	d5fa      	bpl.n	6b92 <PkaDoubleMdf2Jcb+0x116>
    6b9c:	4a14      	ldr	r2, [pc, #80]	; (6bf0 <PkaDoubleMdf2Jcb+0x174>)
    6b9e:	601a      	str	r2, [r3, #0]
    6ba0:	b014      	add	sp, #80	; 0x50
    6ba2:	bd10      	pop	{r4, pc}
    6ba4:	508410b0 	.word	0x508410b0
    6ba8:	50841080 	.word	0x50841080
    6bac:	21659080 	.word	0x21659080
    6bb0:	90090400 	.word	0x90090400
    6bb4:	90659640 	.word	0x90659640
    6bb8:	21618080 	.word	0x21618080
    6bbc:	21082080 	.word	0x21082080
    6bc0:	90642080 	.word	0x90642080
    6bc4:	90618100 	.word	0x90618100
    6bc8:	21104600 	.word	0x21104600
    6bcc:	21118100 	.word	0x21118100
    6bd0:	21444100 	.word	0x21444100
    6bd4:	29202080 	.word	0x29202080
    6bd8:	c8104602 	.word	0xc8104602
    6bdc:	21098600 	.word	0x21098600
    6be0:	21602080 	.word	0x21602080
    6be4:	29282140 	.word	0x29282140
    6be8:	21659640 	.word	0x21659640
    6bec:	29259640 	.word	0x29259640
    6bf0:	c8144659 	.word	0xc8144659

00006bf4 <PkaAddJcbAfn2Mdf>:
    6bf4:	4b50      	ldr	r3, [pc, #320]	; (6d38 <PkaAddJcbAfn2Mdf+0x144>)
    6bf6:	b510      	push	{r4, lr}
    6bf8:	461c      	mov	r4, r3
    6bfa:	b096      	sub	sp, #88	; 0x58
    6bfc:	681a      	ldr	r2, [r3, #0]
    6bfe:	9201      	str	r2, [sp, #4]
    6c00:	9a01      	ldr	r2, [sp, #4]
    6c02:	07d2      	lsls	r2, r2, #31
    6c04:	d5fa      	bpl.n	6bfc <PkaAddJcbAfn2Mdf+0x8>
    6c06:	4b4d      	ldr	r3, [pc, #308]	; (6d3c <PkaAddJcbAfn2Mdf+0x148>)
    6c08:	4a4d      	ldr	r2, [pc, #308]	; (6d40 <PkaAddJcbAfn2Mdf+0x14c>)
    6c0a:	601a      	str	r2, [r3, #0]
    6c0c:	6822      	ldr	r2, [r4, #0]
    6c0e:	9202      	str	r2, [sp, #8]
    6c10:	9a02      	ldr	r2, [sp, #8]
    6c12:	07d2      	lsls	r2, r2, #31
    6c14:	d5fa      	bpl.n	6c0c <PkaAddJcbAfn2Mdf+0x18>
    6c16:	4a4b      	ldr	r2, [pc, #300]	; (6d44 <PkaAddJcbAfn2Mdf+0x150>)
    6c18:	601a      	str	r2, [r3, #0]
    6c1a:	4a4b      	ldr	r2, [pc, #300]	; (6d48 <PkaAddJcbAfn2Mdf+0x154>)
    6c1c:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    6c20:	6822      	ldr	r2, [r4, #0]
    6c22:	9203      	str	r2, [sp, #12]
    6c24:	9a03      	ldr	r2, [sp, #12]
    6c26:	07d2      	lsls	r2, r2, #31
    6c28:	d5fa      	bpl.n	6c20 <PkaAddJcbAfn2Mdf+0x2c>
    6c2a:	6018      	str	r0, [r3, #0]
    6c2c:	6822      	ldr	r2, [r4, #0]
    6c2e:	9204      	str	r2, [sp, #16]
    6c30:	9a04      	ldr	r2, [sp, #16]
    6c32:	07d0      	lsls	r0, r2, #31
    6c34:	d5fa      	bpl.n	6c2c <PkaAddJcbAfn2Mdf+0x38>
    6c36:	4a45      	ldr	r2, [pc, #276]	; (6d4c <PkaAddJcbAfn2Mdf+0x158>)
    6c38:	601a      	str	r2, [r3, #0]
    6c3a:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    6c3e:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    6c42:	6822      	ldr	r2, [r4, #0]
    6c44:	9205      	str	r2, [sp, #20]
    6c46:	9a05      	ldr	r2, [sp, #20]
    6c48:	07d2      	lsls	r2, r2, #31
    6c4a:	d5fa      	bpl.n	6c42 <PkaAddJcbAfn2Mdf+0x4e>
    6c4c:	6019      	str	r1, [r3, #0]
    6c4e:	6822      	ldr	r2, [r4, #0]
    6c50:	9206      	str	r2, [sp, #24]
    6c52:	9a06      	ldr	r2, [sp, #24]
    6c54:	07d0      	lsls	r0, r2, #31
    6c56:	d5fa      	bpl.n	6c4e <PkaAddJcbAfn2Mdf+0x5a>
    6c58:	4a3d      	ldr	r2, [pc, #244]	; (6d50 <PkaAddJcbAfn2Mdf+0x15c>)
    6c5a:	601a      	str	r2, [r3, #0]
    6c5c:	6822      	ldr	r2, [r4, #0]
    6c5e:	9207      	str	r2, [sp, #28]
    6c60:	9a07      	ldr	r2, [sp, #28]
    6c62:	07d1      	lsls	r1, r2, #31
    6c64:	d5fa      	bpl.n	6c5c <PkaAddJcbAfn2Mdf+0x68>
    6c66:	4a3b      	ldr	r2, [pc, #236]	; (6d54 <PkaAddJcbAfn2Mdf+0x160>)
    6c68:	601a      	str	r2, [r3, #0]
    6c6a:	6822      	ldr	r2, [r4, #0]
    6c6c:	9208      	str	r2, [sp, #32]
    6c6e:	9a08      	ldr	r2, [sp, #32]
    6c70:	07d2      	lsls	r2, r2, #31
    6c72:	d5fa      	bpl.n	6c6a <PkaAddJcbAfn2Mdf+0x76>
    6c74:	4a38      	ldr	r2, [pc, #224]	; (6d58 <PkaAddJcbAfn2Mdf+0x164>)
    6c76:	601a      	str	r2, [r3, #0]
    6c78:	6822      	ldr	r2, [r4, #0]
    6c7a:	9209      	str	r2, [sp, #36]	; 0x24
    6c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6c7e:	07d0      	lsls	r0, r2, #31
    6c80:	d5fa      	bpl.n	6c78 <PkaAddJcbAfn2Mdf+0x84>
    6c82:	4a36      	ldr	r2, [pc, #216]	; (6d5c <PkaAddJcbAfn2Mdf+0x168>)
    6c84:	601a      	str	r2, [r3, #0]
    6c86:	6822      	ldr	r2, [r4, #0]
    6c88:	920a      	str	r2, [sp, #40]	; 0x28
    6c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6c8c:	07d1      	lsls	r1, r2, #31
    6c8e:	d5fa      	bpl.n	6c86 <PkaAddJcbAfn2Mdf+0x92>
    6c90:	4a33      	ldr	r2, [pc, #204]	; (6d60 <PkaAddJcbAfn2Mdf+0x16c>)
    6c92:	601a      	str	r2, [r3, #0]
    6c94:	6822      	ldr	r2, [r4, #0]
    6c96:	920b      	str	r2, [sp, #44]	; 0x2c
    6c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6c9a:	07d2      	lsls	r2, r2, #31
    6c9c:	d5fa      	bpl.n	6c94 <PkaAddJcbAfn2Mdf+0xa0>
    6c9e:	4a31      	ldr	r2, [pc, #196]	; (6d64 <PkaAddJcbAfn2Mdf+0x170>)
    6ca0:	601a      	str	r2, [r3, #0]
    6ca2:	6822      	ldr	r2, [r4, #0]
    6ca4:	920c      	str	r2, [sp, #48]	; 0x30
    6ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6ca8:	07d0      	lsls	r0, r2, #31
    6caa:	d5fa      	bpl.n	6ca2 <PkaAddJcbAfn2Mdf+0xae>
    6cac:	4a2e      	ldr	r2, [pc, #184]	; (6d68 <PkaAddJcbAfn2Mdf+0x174>)
    6cae:	601a      	str	r2, [r3, #0]
    6cb0:	6822      	ldr	r2, [r4, #0]
    6cb2:	920d      	str	r2, [sp, #52]	; 0x34
    6cb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6cb6:	07d1      	lsls	r1, r2, #31
    6cb8:	d5fa      	bpl.n	6cb0 <PkaAddJcbAfn2Mdf+0xbc>
    6cba:	4a2c      	ldr	r2, [pc, #176]	; (6d6c <PkaAddJcbAfn2Mdf+0x178>)
    6cbc:	601a      	str	r2, [r3, #0]
    6cbe:	6822      	ldr	r2, [r4, #0]
    6cc0:	920e      	str	r2, [sp, #56]	; 0x38
    6cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6cc4:	07d2      	lsls	r2, r2, #31
    6cc6:	d5fa      	bpl.n	6cbe <PkaAddJcbAfn2Mdf+0xca>
    6cc8:	4a29      	ldr	r2, [pc, #164]	; (6d70 <PkaAddJcbAfn2Mdf+0x17c>)
    6cca:	601a      	str	r2, [r3, #0]
    6ccc:	6822      	ldr	r2, [r4, #0]
    6cce:	920f      	str	r2, [sp, #60]	; 0x3c
    6cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6cd2:	07d0      	lsls	r0, r2, #31
    6cd4:	d5fa      	bpl.n	6ccc <PkaAddJcbAfn2Mdf+0xd8>
    6cd6:	4a27      	ldr	r2, [pc, #156]	; (6d74 <PkaAddJcbAfn2Mdf+0x180>)
    6cd8:	601a      	str	r2, [r3, #0]
    6cda:	6821      	ldr	r1, [r4, #0]
    6cdc:	9110      	str	r1, [sp, #64]	; 0x40
    6cde:	9910      	ldr	r1, [sp, #64]	; 0x40
    6ce0:	07c9      	lsls	r1, r1, #31
    6ce2:	d5fa      	bpl.n	6cda <PkaAddJcbAfn2Mdf+0xe6>
    6ce4:	601a      	str	r2, [r3, #0]
    6ce6:	4b14      	ldr	r3, [pc, #80]	; (6d38 <PkaAddJcbAfn2Mdf+0x144>)
    6ce8:	461a      	mov	r2, r3
    6cea:	6819      	ldr	r1, [r3, #0]
    6cec:	9111      	str	r1, [sp, #68]	; 0x44
    6cee:	9911      	ldr	r1, [sp, #68]	; 0x44
    6cf0:	07c8      	lsls	r0, r1, #31
    6cf2:	d5fa      	bpl.n	6cea <PkaAddJcbAfn2Mdf+0xf6>
    6cf4:	4b11      	ldr	r3, [pc, #68]	; (6d3c <PkaAddJcbAfn2Mdf+0x148>)
    6cf6:	4920      	ldr	r1, [pc, #128]	; (6d78 <PkaAddJcbAfn2Mdf+0x184>)
    6cf8:	6019      	str	r1, [r3, #0]
    6cfa:	6811      	ldr	r1, [r2, #0]
    6cfc:	9112      	str	r1, [sp, #72]	; 0x48
    6cfe:	9912      	ldr	r1, [sp, #72]	; 0x48
    6d00:	07c9      	lsls	r1, r1, #31
    6d02:	d5fa      	bpl.n	6cfa <PkaAddJcbAfn2Mdf+0x106>
    6d04:	491d      	ldr	r1, [pc, #116]	; (6d7c <PkaAddJcbAfn2Mdf+0x188>)
    6d06:	6019      	str	r1, [r3, #0]
    6d08:	6811      	ldr	r1, [r2, #0]
    6d0a:	9113      	str	r1, [sp, #76]	; 0x4c
    6d0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6d0e:	07cc      	lsls	r4, r1, #31
    6d10:	d5fa      	bpl.n	6d08 <PkaAddJcbAfn2Mdf+0x114>
    6d12:	490b      	ldr	r1, [pc, #44]	; (6d40 <PkaAddJcbAfn2Mdf+0x14c>)
    6d14:	6019      	str	r1, [r3, #0]
    6d16:	6811      	ldr	r1, [r2, #0]
    6d18:	9114      	str	r1, [sp, #80]	; 0x50
    6d1a:	9914      	ldr	r1, [sp, #80]	; 0x50
    6d1c:	07c8      	lsls	r0, r1, #31
    6d1e:	d5fa      	bpl.n	6d16 <PkaAddJcbAfn2Mdf+0x122>
    6d20:	4917      	ldr	r1, [pc, #92]	; (6d80 <PkaAddJcbAfn2Mdf+0x18c>)
    6d22:	6019      	str	r1, [r3, #0]
    6d24:	6811      	ldr	r1, [r2, #0]
    6d26:	9115      	str	r1, [sp, #84]	; 0x54
    6d28:	9915      	ldr	r1, [sp, #84]	; 0x54
    6d2a:	07c9      	lsls	r1, r1, #31
    6d2c:	d5fa      	bpl.n	6d24 <PkaAddJcbAfn2Mdf+0x130>
    6d2e:	4a15      	ldr	r2, [pc, #84]	; (6d84 <PkaAddJcbAfn2Mdf+0x190>)
    6d30:	601a      	str	r2, [r3, #0]
    6d32:	b016      	add	sp, #88	; 0x58
    6d34:	bd10      	pop	{r4, pc}
    6d36:	bf00      	nop
    6d38:	508410b0 	.word	0x508410b0
    6d3c:	50841080 	.word	0x50841080
    6d40:	90410440 	.word	0x90410440
    6d44:	29298600 	.word	0x29298600
    6d48:	c80110d8 	.word	0xc80110d8
    6d4c:	90411440 	.word	0x90411440
    6d50:	29211440 	.word	0x29211440
    6d54:	21651440 	.word	0x21651440
    6d58:	90403400 	.word	0x90403400
    6d5c:	900c3100 	.word	0x900c3100
    6d60:	900c40c0 	.word	0x900c40c0
    6d64:	292030c0 	.word	0x292030c0
    6d68:	900d9640 	.word	0x900d9640
    6d6c:	90604100 	.word	0x90604100
    6d70:	c8451603 	.word	0xc8451603
    6d74:	21118600 	.word	0x21118600
    6d78:	21604100 	.word	0x21604100
    6d7c:	c8444659 	.word	0xc8444659
    6d80:	90451440 	.word	0x90451440
    6d84:	902d1440 	.word	0x902d1440

00006d88 <PkaJcb2Afn>:
    6d88:	4826      	ldr	r0, [pc, #152]	; (6e24 <PkaJcb2Afn+0x9c>)
    6d8a:	b570      	push	{r4, r5, r6, lr}
    6d8c:	4605      	mov	r5, r0
    6d8e:	b088      	sub	sp, #32
    6d90:	6804      	ldr	r4, [r0, #0]
    6d92:	9400      	str	r4, [sp, #0]
    6d94:	9c00      	ldr	r4, [sp, #0]
    6d96:	07e6      	lsls	r6, r4, #31
    6d98:	d5fa      	bpl.n	6d90 <PkaJcb2Afn+0x8>
    6d9a:	4c23      	ldr	r4, [pc, #140]	; (6e28 <PkaJcb2Afn+0xa0>)
    6d9c:	4823      	ldr	r0, [pc, #140]	; (6e2c <PkaJcb2Afn+0xa4>)
    6d9e:	6004      	str	r4, [r0, #0]
    6da0:	4c23      	ldr	r4, [pc, #140]	; (6e30 <PkaJcb2Afn+0xa8>)
    6da2:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    6da6:	682c      	ldr	r4, [r5, #0]
    6da8:	9401      	str	r4, [sp, #4]
    6daa:	9c01      	ldr	r4, [sp, #4]
    6dac:	07e4      	lsls	r4, r4, #31
    6dae:	d5fa      	bpl.n	6da6 <PkaJcb2Afn+0x1e>
    6db0:	6003      	str	r3, [r0, #0]
    6db2:	0193      	lsls	r3, r2, #6
    6db4:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    6db8:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    6dbc:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    6dc0:	682b      	ldr	r3, [r5, #0]
    6dc2:	9302      	str	r3, [sp, #8]
    6dc4:	9b02      	ldr	r3, [sp, #8]
    6dc6:	07de      	lsls	r6, r3, #31
    6dc8:	d5fa      	bpl.n	6dc0 <PkaJcb2Afn+0x38>
    6dca:	6004      	str	r4, [r0, #0]
    6dcc:	682b      	ldr	r3, [r5, #0]
    6dce:	9303      	str	r3, [sp, #12]
    6dd0:	9b03      	ldr	r3, [sp, #12]
    6dd2:	07db      	lsls	r3, r3, #31
    6dd4:	d5fa      	bpl.n	6dcc <PkaJcb2Afn+0x44>
    6dd6:	4b17      	ldr	r3, [pc, #92]	; (6e34 <PkaJcb2Afn+0xac>)
    6dd8:	6003      	str	r3, [r0, #0]
    6dda:	018b      	lsls	r3, r1, #6
    6ddc:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    6de0:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    6de4:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    6de8:	682e      	ldr	r6, [r5, #0]
    6dea:	9604      	str	r6, [sp, #16]
    6dec:	9e04      	ldr	r6, [sp, #16]
    6dee:	07f6      	lsls	r6, r6, #31
    6df0:	d5fa      	bpl.n	6de8 <PkaJcb2Afn+0x60>
    6df2:	6003      	str	r3, [r0, #0]
    6df4:	682b      	ldr	r3, [r5, #0]
    6df6:	9305      	str	r3, [sp, #20]
    6df8:	9b05      	ldr	r3, [sp, #20]
    6dfa:	07de      	lsls	r6, r3, #31
    6dfc:	d5fa      	bpl.n	6df4 <PkaJcb2Afn+0x6c>
    6dfe:	6004      	str	r4, [r0, #0]
    6e00:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    6e04:	682b      	ldr	r3, [r5, #0]
    6e06:	9306      	str	r3, [sp, #24]
    6e08:	9b06      	ldr	r3, [sp, #24]
    6e0a:	07dc      	lsls	r4, r3, #31
    6e0c:	d5fa      	bpl.n	6e04 <PkaJcb2Afn+0x7c>
    6e0e:	6001      	str	r1, [r0, #0]
    6e10:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    6e14:	682b      	ldr	r3, [r5, #0]
    6e16:	9307      	str	r3, [sp, #28]
    6e18:	9b07      	ldr	r3, [sp, #28]
    6e1a:	07db      	lsls	r3, r3, #31
    6e1c:	d5fa      	bpl.n	6e14 <PkaJcb2Afn+0x8c>
    6e1e:	6002      	str	r2, [r0, #0]
    6e20:	b008      	add	sp, #32
    6e22:	bd70      	pop	{r4, r5, r6, pc}
    6e24:	508410b0 	.word	0x508410b0
    6e28:	290221c0 	.word	0x290221c0
    6e2c:	50841080 	.word	0x50841080
    6e30:	98007180 	.word	0x98007180
    6e34:	90186180 	.word	0x90186180

00006e38 <PkaAddAff>:
    6e38:	4b35      	ldr	r3, [pc, #212]	; (6f10 <PkaAddAff+0xd8>)
    6e3a:	b08e      	sub	sp, #56	; 0x38
    6e3c:	4619      	mov	r1, r3
    6e3e:	681a      	ldr	r2, [r3, #0]
    6e40:	9200      	str	r2, [sp, #0]
    6e42:	9a00      	ldr	r2, [sp, #0]
    6e44:	07d2      	lsls	r2, r2, #31
    6e46:	d5fa      	bpl.n	6e3e <PkaAddAff+0x6>
    6e48:	4b32      	ldr	r3, [pc, #200]	; (6f14 <PkaAddAff+0xdc>)
    6e4a:	4a33      	ldr	r2, [pc, #204]	; (6f18 <PkaAddAff+0xe0>)
    6e4c:	601a      	str	r2, [r3, #0]
    6e4e:	680a      	ldr	r2, [r1, #0]
    6e50:	9201      	str	r2, [sp, #4]
    6e52:	9a01      	ldr	r2, [sp, #4]
    6e54:	07d0      	lsls	r0, r2, #31
    6e56:	d5fa      	bpl.n	6e4e <PkaAddAff+0x16>
    6e58:	4a30      	ldr	r2, [pc, #192]	; (6f1c <PkaAddAff+0xe4>)
    6e5a:	601a      	str	r2, [r3, #0]
    6e5c:	680a      	ldr	r2, [r1, #0]
    6e5e:	9202      	str	r2, [sp, #8]
    6e60:	9a02      	ldr	r2, [sp, #8]
    6e62:	07d2      	lsls	r2, r2, #31
    6e64:	d5fa      	bpl.n	6e5c <PkaAddAff+0x24>
    6e66:	4a2e      	ldr	r2, [pc, #184]	; (6f20 <PkaAddAff+0xe8>)
    6e68:	601a      	str	r2, [r3, #0]
    6e6a:	680a      	ldr	r2, [r1, #0]
    6e6c:	9203      	str	r2, [sp, #12]
    6e6e:	9a03      	ldr	r2, [sp, #12]
    6e70:	07d0      	lsls	r0, r2, #31
    6e72:	d5fa      	bpl.n	6e6a <PkaAddAff+0x32>
    6e74:	4a2b      	ldr	r2, [pc, #172]	; (6f24 <PkaAddAff+0xec>)
    6e76:	601a      	str	r2, [r3, #0]
    6e78:	680a      	ldr	r2, [r1, #0]
    6e7a:	9204      	str	r2, [sp, #16]
    6e7c:	9a04      	ldr	r2, [sp, #16]
    6e7e:	07d2      	lsls	r2, r2, #31
    6e80:	d5fa      	bpl.n	6e78 <PkaAddAff+0x40>
    6e82:	4a29      	ldr	r2, [pc, #164]	; (6f28 <PkaAddAff+0xf0>)
    6e84:	601a      	str	r2, [r3, #0]
    6e86:	680a      	ldr	r2, [r1, #0]
    6e88:	9205      	str	r2, [sp, #20]
    6e8a:	9a05      	ldr	r2, [sp, #20]
    6e8c:	07d0      	lsls	r0, r2, #31
    6e8e:	d5fa      	bpl.n	6e86 <PkaAddAff+0x4e>
    6e90:	4a26      	ldr	r2, [pc, #152]	; (6f2c <PkaAddAff+0xf4>)
    6e92:	601a      	str	r2, [r3, #0]
    6e94:	680a      	ldr	r2, [r1, #0]
    6e96:	9206      	str	r2, [sp, #24]
    6e98:	9a06      	ldr	r2, [sp, #24]
    6e9a:	07d2      	lsls	r2, r2, #31
    6e9c:	d5fa      	bpl.n	6e94 <PkaAddAff+0x5c>
    6e9e:	4a24      	ldr	r2, [pc, #144]	; (6f30 <PkaAddAff+0xf8>)
    6ea0:	601a      	str	r2, [r3, #0]
    6ea2:	680a      	ldr	r2, [r1, #0]
    6ea4:	9207      	str	r2, [sp, #28]
    6ea6:	9a07      	ldr	r2, [sp, #28]
    6ea8:	07d0      	lsls	r0, r2, #31
    6eaa:	d5fa      	bpl.n	6ea2 <PkaAddAff+0x6a>
    6eac:	4a21      	ldr	r2, [pc, #132]	; (6f34 <PkaAddAff+0xfc>)
    6eae:	601a      	str	r2, [r3, #0]
    6eb0:	680a      	ldr	r2, [r1, #0]
    6eb2:	9208      	str	r2, [sp, #32]
    6eb4:	9a08      	ldr	r2, [sp, #32]
    6eb6:	07d2      	lsls	r2, r2, #31
    6eb8:	d5fa      	bpl.n	6eb0 <PkaAddAff+0x78>
    6eba:	4a1f      	ldr	r2, [pc, #124]	; (6f38 <PkaAddAff+0x100>)
    6ebc:	601a      	str	r2, [r3, #0]
    6ebe:	680a      	ldr	r2, [r1, #0]
    6ec0:	9209      	str	r2, [sp, #36]	; 0x24
    6ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6ec4:	07d0      	lsls	r0, r2, #31
    6ec6:	d5fa      	bpl.n	6ebe <PkaAddAff+0x86>
    6ec8:	4a1c      	ldr	r2, [pc, #112]	; (6f3c <PkaAddAff+0x104>)
    6eca:	601a      	str	r2, [r3, #0]
    6ecc:	680a      	ldr	r2, [r1, #0]
    6ece:	920a      	str	r2, [sp, #40]	; 0x28
    6ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6ed2:	07d2      	lsls	r2, r2, #31
    6ed4:	d5fa      	bpl.n	6ecc <PkaAddAff+0x94>
    6ed6:	4a1a      	ldr	r2, [pc, #104]	; (6f40 <PkaAddAff+0x108>)
    6ed8:	601a      	str	r2, [r3, #0]
    6eda:	6808      	ldr	r0, [r1, #0]
    6edc:	900b      	str	r0, [sp, #44]	; 0x2c
    6ede:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6ee0:	07c0      	lsls	r0, r0, #31
    6ee2:	d5fa      	bpl.n	6eda <PkaAddAff+0xa2>
    6ee4:	601a      	str	r2, [r3, #0]
    6ee6:	680a      	ldr	r2, [r1, #0]
    6ee8:	920c      	str	r2, [sp, #48]	; 0x30
    6eea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6eec:	07d0      	lsls	r0, r2, #31
    6eee:	d5fa      	bpl.n	6ee6 <PkaAddAff+0xae>
    6ef0:	4a14      	ldr	r2, [pc, #80]	; (6f44 <PkaAddAff+0x10c>)
    6ef2:	601a      	str	r2, [r3, #0]
    6ef4:	680a      	ldr	r2, [r1, #0]
    6ef6:	920d      	str	r2, [sp, #52]	; 0x34
    6ef8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6efa:	07d2      	lsls	r2, r2, #31
    6efc:	d5fa      	bpl.n	6ef4 <PkaAddAff+0xbc>
    6efe:	4a12      	ldr	r2, [pc, #72]	; (6f48 <PkaAddAff+0x110>)
    6f00:	210e      	movs	r1, #14
    6f02:	601a      	str	r2, [r3, #0]
    6f04:	2000      	movs	r0, #0
    6f06:	230d      	movs	r3, #13
    6f08:	220f      	movs	r2, #15
    6f0a:	b00e      	add	sp, #56	; 0x38
    6f0c:	f7ff bf3c 	b.w	6d88 <PkaJcb2Afn>
    6f10:	508410b0 	.word	0x508410b0
    6f14:	50841080 	.word	0x50841080
    6f18:	29014380 	.word	0x29014380
    6f1c:	21396340 	.word	0x21396340
    6f20:	29017080 	.word	0x29017080
    6f24:	21542080 	.word	0x21542080
    6f28:	9034d100 	.word	0x9034d100
    6f2c:	903440c0 	.word	0x903440c0
    6f30:	292030c0 	.word	0x292030c0
    6f34:	900d53c0 	.word	0x900d53c0
    6f38:	90384100 	.word	0x90384100
    6f3c:	c8082383 	.word	0xc8082383
    6f40:	2110e380 	.word	0x2110e380
    6f44:	21384100 	.word	0x21384100
    6f48:	c80843cf 	.word	0xc80843cf

00006f4c <PkaSum2ScalarMullt>:
    6f4c:	2301      	movs	r3, #1
    6f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f52:	b092      	sub	sp, #72	; 0x48
    6f54:	e9cd 3303 	strd	r3, r3, [sp, #12]
    6f58:	4b62      	ldr	r3, [pc, #392]	; (70e4 <PkaSum2ScalarMullt+0x198>)
    6f5a:	461d      	mov	r5, r3
    6f5c:	681a      	ldr	r2, [r3, #0]
    6f5e:	9205      	str	r2, [sp, #20]
    6f60:	9a05      	ldr	r2, [sp, #20]
    6f62:	07d2      	lsls	r2, r2, #31
    6f64:	d5fa      	bpl.n	6f5c <PkaSum2ScalarMullt+0x10>
    6f66:	4b60      	ldr	r3, [pc, #384]	; (70e8 <PkaSum2ScalarMullt+0x19c>)
    6f68:	4c60      	ldr	r4, [pc, #384]	; (70ec <PkaSum2ScalarMullt+0x1a0>)
    6f6a:	6023      	str	r3, [r4, #0]
    6f6c:	4b60      	ldr	r3, [pc, #384]	; (70f0 <PkaSum2ScalarMullt+0x1a4>)
    6f6e:	4619      	mov	r1, r3
    6f70:	681a      	ldr	r2, [r3, #0]
    6f72:	9206      	str	r2, [sp, #24]
    6f74:	9a06      	ldr	r2, [sp, #24]
    6f76:	07d7      	lsls	r7, r2, #31
    6f78:	d5fa      	bpl.n	6f70 <PkaSum2ScalarMullt+0x24>
    6f7a:	4b5e      	ldr	r3, [pc, #376]	; (70f4 <PkaSum2ScalarMullt+0x1a8>)
    6f7c:	681a      	ldr	r2, [r3, #0]
    6f7e:	04d6      	lsls	r6, r2, #19
    6f80:	f100 80a8 	bmi.w	70d4 <PkaSum2ScalarMullt+0x188>
    6f84:	682a      	ldr	r2, [r5, #0]
    6f86:	9207      	str	r2, [sp, #28]
    6f88:	9a07      	ldr	r2, [sp, #28]
    6f8a:	07d0      	lsls	r0, r2, #31
    6f8c:	d5fa      	bpl.n	6f84 <PkaSum2ScalarMullt+0x38>
    6f8e:	4a5a      	ldr	r2, [pc, #360]	; (70f8 <PkaSum2ScalarMullt+0x1ac>)
    6f90:	6022      	str	r2, [r4, #0]
    6f92:	680a      	ldr	r2, [r1, #0]
    6f94:	9208      	str	r2, [sp, #32]
    6f96:	9a08      	ldr	r2, [sp, #32]
    6f98:	07d2      	lsls	r2, r2, #31
    6f9a:	d5fa      	bpl.n	6f92 <PkaSum2ScalarMullt+0x46>
    6f9c:	681e      	ldr	r6, [r3, #0]
    6f9e:	f3c6 3600 	ubfx	r6, r6, #12, #1
    6fa2:	2e00      	cmp	r6, #0
    6fa4:	f040 8098 	bne.w	70d8 <PkaSum2ScalarMullt+0x18c>
    6fa8:	2012      	movs	r0, #18
    6faa:	f7ff f8f3 	bl	6194 <PkaGetRegEffectiveSizeInBits>
    6fae:	4607      	mov	r7, r0
    6fb0:	2013      	movs	r0, #19
    6fb2:	f7ff f8ef 	bl	6194 <PkaGetRegEffectiveSizeInBits>
    6fb6:	4287      	cmp	r7, r0
    6fb8:	bf8c      	ite	hi
    6fba:	2012      	movhi	r0, #18
    6fbc:	2013      	movls	r0, #19
    6fbe:	f7ff f8e9 	bl	6194 <PkaGetRegEffectiveSizeInBits>
    6fc2:	1e47      	subs	r7, r0, #1
    6fc4:	f7ff ff38 	bl	6e38 <PkaAddAff>
    6fc8:	ab03      	add	r3, sp, #12
    6fca:	aa01      	add	r2, sp, #4
    6fcc:	4639      	mov	r1, r7
    6fce:	2012      	movs	r0, #18
    6fd0:	f7ff f926 	bl	6220 <PkaGetNextMsBit>
    6fd4:	ab04      	add	r3, sp, #16
    6fd6:	4680      	mov	r8, r0
    6fd8:	aa02      	add	r2, sp, #8
    6fda:	4639      	mov	r1, r7
    6fdc:	2013      	movs	r0, #19
    6fde:	f7ff f91f 	bl	6220 <PkaGetNextMsBit>
    6fe2:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    6fe6:	2802      	cmp	r0, #2
    6fe8:	d032      	beq.n	7050 <PkaSum2ScalarMullt+0x104>
    6fea:	2803      	cmp	r0, #3
    6fec:	d03e      	beq.n	706c <PkaSum2ScalarMullt+0x120>
    6fee:	2801      	cmp	r0, #1
    6ff0:	d174      	bne.n	70dc <PkaSum2ScalarMullt+0x190>
    6ff2:	682b      	ldr	r3, [r5, #0]
    6ff4:	9309      	str	r3, [sp, #36]	; 0x24
    6ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6ff8:	07db      	lsls	r3, r3, #31
    6ffa:	d5fa      	bpl.n	6ff2 <PkaSum2ScalarMullt+0xa6>
    6ffc:	4b3f      	ldr	r3, [pc, #252]	; (70fc <PkaSum2ScalarMullt+0x1b0>)
    6ffe:	6023      	str	r3, [r4, #0]
    7000:	682b      	ldr	r3, [r5, #0]
    7002:	930a      	str	r3, [sp, #40]	; 0x28
    7004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7006:	07d8      	lsls	r0, r3, #31
    7008:	d5fa      	bpl.n	7000 <PkaSum2ScalarMullt+0xb4>
    700a:	4b3d      	ldr	r3, [pc, #244]	; (7100 <PkaSum2ScalarMullt+0x1b4>)
    700c:	6023      	str	r3, [r4, #0]
    700e:	682b      	ldr	r3, [r5, #0]
    7010:	930f      	str	r3, [sp, #60]	; 0x3c
    7012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7014:	07d9      	lsls	r1, r3, #31
    7016:	d5fa      	bpl.n	700e <PkaSum2ScalarMullt+0xc2>
    7018:	4b3a      	ldr	r3, [pc, #232]	; (7104 <PkaSum2ScalarMullt+0x1b8>)
    701a:	6023      	str	r3, [r4, #0]
    701c:	682b      	ldr	r3, [r5, #0]
    701e:	9310      	str	r3, [sp, #64]	; 0x40
    7020:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7022:	07da      	lsls	r2, r3, #31
    7024:	d5fa      	bpl.n	701c <PkaSum2ScalarMullt+0xd0>
    7026:	4b38      	ldr	r3, [pc, #224]	; (7108 <PkaSum2ScalarMullt+0x1bc>)
    7028:	6023      	str	r3, [r4, #0]
    702a:	682b      	ldr	r3, [r5, #0]
    702c:	9311      	str	r3, [sp, #68]	; 0x44
    702e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7030:	07db      	lsls	r3, r3, #31
    7032:	d5fa      	bpl.n	702a <PkaSum2ScalarMullt+0xde>
    7034:	4b35      	ldr	r3, [pc, #212]	; (710c <PkaSum2ScalarMullt+0x1c0>)
    7036:	6023      	str	r3, [r4, #0]
    7038:	3f01      	subs	r7, #1
    703a:	d525      	bpl.n	7088 <PkaSum2ScalarMullt+0x13c>
    703c:	2310      	movs	r3, #16
    703e:	2219      	movs	r2, #25
    7040:	2118      	movs	r1, #24
    7042:	2000      	movs	r0, #0
    7044:	f7ff fea0 	bl	6d88 <PkaJcb2Afn>
    7048:	4630      	mov	r0, r6
    704a:	b012      	add	sp, #72	; 0x48
    704c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7050:	682b      	ldr	r3, [r5, #0]
    7052:	930b      	str	r3, [sp, #44]	; 0x2c
    7054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7056:	07d9      	lsls	r1, r3, #31
    7058:	d5fa      	bpl.n	7050 <PkaSum2ScalarMullt+0x104>
    705a:	4b2d      	ldr	r3, [pc, #180]	; (7110 <PkaSum2ScalarMullt+0x1c4>)
    705c:	6023      	str	r3, [r4, #0]
    705e:	682b      	ldr	r3, [r5, #0]
    7060:	930c      	str	r3, [sp, #48]	; 0x30
    7062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7064:	07da      	lsls	r2, r3, #31
    7066:	d5fa      	bpl.n	705e <PkaSum2ScalarMullt+0x112>
    7068:	4b2a      	ldr	r3, [pc, #168]	; (7114 <PkaSum2ScalarMullt+0x1c8>)
    706a:	e7cf      	b.n	700c <PkaSum2ScalarMullt+0xc0>
    706c:	682b      	ldr	r3, [r5, #0]
    706e:	930d      	str	r3, [sp, #52]	; 0x34
    7070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7072:	07db      	lsls	r3, r3, #31
    7074:	d5fa      	bpl.n	706c <PkaSum2ScalarMullt+0x120>
    7076:	4b28      	ldr	r3, [pc, #160]	; (7118 <PkaSum2ScalarMullt+0x1cc>)
    7078:	6023      	str	r3, [r4, #0]
    707a:	682b      	ldr	r3, [r5, #0]
    707c:	930e      	str	r3, [sp, #56]	; 0x38
    707e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7080:	07d8      	lsls	r0, r3, #31
    7082:	d5fa      	bpl.n	707a <PkaSum2ScalarMullt+0x12e>
    7084:	4b25      	ldr	r3, [pc, #148]	; (711c <PkaSum2ScalarMullt+0x1d0>)
    7086:	e7c1      	b.n	700c <PkaSum2ScalarMullt+0xc0>
    7088:	ab03      	add	r3, sp, #12
    708a:	aa01      	add	r2, sp, #4
    708c:	4639      	mov	r1, r7
    708e:	2012      	movs	r0, #18
    7090:	f7ff f8c6 	bl	6220 <PkaGetNextMsBit>
    7094:	ab04      	add	r3, sp, #16
    7096:	4604      	mov	r4, r0
    7098:	aa02      	add	r2, sp, #8
    709a:	4639      	mov	r1, r7
    709c:	2013      	movs	r0, #19
    709e:	f7ff f8bf 	bl	6220 <PkaGetNextMsBit>
    70a2:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    70a6:	d102      	bne.n	70ae <PkaSum2ScalarMullt+0x162>
    70a8:	f7ff fc12 	bl	68d0 <PkaDoubleMdf2Mdf>
    70ac:	e7c4      	b.n	7038 <PkaSum2ScalarMullt+0xec>
    70ae:	f7ff fce5 	bl	6a7c <PkaDoubleMdf2Jcb>
    70b2:	2c02      	cmp	r4, #2
    70b4:	d008      	beq.n	70c8 <PkaSum2ScalarMullt+0x17c>
    70b6:	2c03      	cmp	r4, #3
    70b8:	d009      	beq.n	70ce <PkaSum2ScalarMullt+0x182>
    70ba:	2c01      	cmp	r4, #1
    70bc:	d110      	bne.n	70e0 <PkaSum2ScalarMullt+0x194>
    70be:	2117      	movs	r1, #23
    70c0:	2016      	movs	r0, #22
    70c2:	f7ff fd97 	bl	6bf4 <PkaAddJcbAfn2Mdf>
    70c6:	e7b7      	b.n	7038 <PkaSum2ScalarMullt+0xec>
    70c8:	2115      	movs	r1, #21
    70ca:	2014      	movs	r0, #20
    70cc:	e7f9      	b.n	70c2 <PkaSum2ScalarMullt+0x176>
    70ce:	210f      	movs	r1, #15
    70d0:	200e      	movs	r0, #14
    70d2:	e7f6      	b.n	70c2 <PkaSum2ScalarMullt+0x176>
    70d4:	4e12      	ldr	r6, [pc, #72]	; (7120 <PkaSum2ScalarMullt+0x1d4>)
    70d6:	e7b7      	b.n	7048 <PkaSum2ScalarMullt+0xfc>
    70d8:	4e12      	ldr	r6, [pc, #72]	; (7124 <PkaSum2ScalarMullt+0x1d8>)
    70da:	e7b5      	b.n	7048 <PkaSum2ScalarMullt+0xfc>
    70dc:	4e12      	ldr	r6, [pc, #72]	; (7128 <PkaSum2ScalarMullt+0x1dc>)
    70de:	e7b3      	b.n	7048 <PkaSum2ScalarMullt+0xfc>
    70e0:	4e12      	ldr	r6, [pc, #72]	; (712c <PkaSum2ScalarMullt+0x1e0>)
    70e2:	e7b1      	b.n	7048 <PkaSum2ScalarMullt+0xfc>
    70e4:	508410b0 	.word	0x508410b0
    70e8:	514a0800 	.word	0x514a0800
    70ec:	50841080 	.word	0x50841080
    70f0:	508410b4 	.word	0x508410b4
    70f4:	50841088 	.word	0x50841088
    70f8:	514e0800 	.word	0x514e0800
    70fc:	495a0600 	.word	0x495a0600
    7100:	495e0640 	.word	0x495e0640
    7104:	41420400 	.word	0x41420400
    7108:	49421400 	.word	0x49421400
    710c:	492e0440 	.word	0x492e0440
    7110:	49520600 	.word	0x49520600
    7114:	49560640 	.word	0x49560640
    7118:	493a0600 	.word	0x493a0600
    711c:	493e0640 	.word	0x493e0640
    7120:	00f10806 	.word	0x00f10806
    7124:	00f10807 	.word	0x00f10807
    7128:	00f10804 	.word	0x00f10804
    712c:	00f10805 	.word	0x00f10805

00007130 <SaSi_HalClearInterruptBit>:
    7130:	4b01      	ldr	r3, [pc, #4]	; (7138 <SaSi_HalClearInterruptBit+0x8>)
    7132:	6018      	str	r0, [r3, #0]
    7134:	4770      	bx	lr
    7136:	bf00      	nop
    7138:	50841a08 	.word	0x50841a08

0000713c <SaSi_HalMaskInterrupt>:
    713c:	4b01      	ldr	r3, [pc, #4]	; (7144 <SaSi_HalMaskInterrupt+0x8>)
    713e:	6018      	str	r0, [r3, #0]
    7140:	4770      	bx	lr
    7142:	bf00      	nop
    7144:	50841a04 	.word	0x50841a04

00007148 <SaSi_HalWaitInterrupt>:
    7148:	4a03      	ldr	r2, [pc, #12]	; (7158 <SaSi_HalWaitInterrupt+0x10>)
    714a:	6813      	ldr	r3, [r2, #0]
    714c:	4218      	tst	r0, r3
    714e:	d0fc      	beq.n	714a <SaSi_HalWaitInterrupt+0x2>
    7150:	4a02      	ldr	r2, [pc, #8]	; (715c <SaSi_HalWaitInterrupt+0x14>)
    7152:	6010      	str	r0, [r2, #0]
    7154:	4618      	mov	r0, r3
    7156:	4770      	bx	lr
    7158:	50841a00 	.word	0x50841a00
    715c:	50841a08 	.word	0x50841a08

00007160 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7160:	4770      	bx	lr

00007162 <gpio_pin_get_raw>:
 * @retval 0 If pin physical level is low.
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_get_raw(const struct device *port, gpio_pin_t pin)
{
    7162:	b513      	push	{r0, r1, r4, lr}
    7164:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
    7166:	6883      	ldr	r3, [r0, #8]
    7168:	a901      	add	r1, sp, #4
    716a:	685b      	ldr	r3, [r3, #4]
    716c:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
    716e:	b938      	cbnz	r0, 7180 <gpio_pin_get_raw+0x1e>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    7170:	2301      	movs	r3, #1
    7172:	fa03 f104 	lsl.w	r1, r3, r4
    7176:	9b01      	ldr	r3, [sp, #4]
    7178:	4219      	tst	r1, r3
    717a:	bf14      	ite	ne
    717c:	2001      	movne	r0, #1
    717e:	2000      	moveq	r0, #0
	}

	return ret;
}
    7180:	b002      	add	sp, #8
    7182:	bd10      	pop	{r4, pc}

00007184 <gpio_pin_set.constprop.0.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7184:	6903      	ldr	r3, [r0, #16]
    7186:	681b      	ldr	r3, [r3, #0]
    7188:	071b      	lsls	r3, r3, #28
		value = (value != 0) ? 0 : 1;
    718a:	bf48      	it	mi
    718c:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
    7190:	b119      	cbz	r1, 719a <gpio_pin_set.constprop.0.isra.0+0x16>
	return api->port_set_bits_raw(port, pins);
    7192:	6883      	ldr	r3, [r0, #8]
    7194:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    7196:	2108      	movs	r1, #8
    7198:	4718      	bx	r3
    719a:	6883      	ldr	r3, [r0, #8]
    719c:	691b      	ldr	r3, [r3, #16]
    719e:	e7fa      	b.n	7196 <gpio_pin_set.constprop.0.isra.0+0x12>

000071a0 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    71a0:	b129      	cbz	r1, 71ae <flash_area_id_from_multi_image_slot+0xe>
    return -EINVAL; /* flash_area_open will fail on that */
    71a2:	2901      	cmp	r1, #1
    71a4:	bf0c      	ite	eq
    71a6:	2002      	moveq	r0, #2
    71a8:	f06f 0015 	mvnne.w	r0, #21
    71ac:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    71ae:	2005      	movs	r0, #5
}
    71b0:	4770      	bx	lr

000071b2 <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    71b2:	4770      	bx	lr

000071b4 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    71b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    71b8:	460e      	mov	r6, r1
    71ba:	4617      	mov	r7, r2
    71bc:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    71be:	4604      	mov	r4, r0
    71c0:	b928      	cbnz	r0, 71ce <bootutil_tlv_iter_begin+0x1a>
        return -1;
    71c2:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    71c6:	4640      	mov	r0, r8
    71c8:	b003      	add	sp, #12
    71ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    71ce:	2900      	cmp	r1, #0
    71d0:	d0f7      	beq.n	71c2 <bootutil_tlv_iter_begin+0xe>
    71d2:	2a00      	cmp	r2, #0
    71d4:	d0f5      	beq.n	71c2 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    71d6:	68cb      	ldr	r3, [r1, #12]
    71d8:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    71da:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    71dc:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    71de:	2304      	movs	r3, #4
    71e0:	4629      	mov	r1, r5
    71e2:	eb0d 0203 	add.w	r2, sp, r3
    71e6:	f000 fc9f 	bl	7b28 <flash_area_read>
    71ea:	4680      	mov	r8, r0
    71ec:	2800      	cmp	r0, #0
    71ee:	d1e8      	bne.n	71c2 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    71f0:	f646 1208 	movw	r2, #26888	; 0x6908
    71f4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    71f8:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    71fa:	4291      	cmp	r1, r2
    71fc:	d123      	bne.n	7246 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    71fe:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7202:	4299      	cmp	r1, r3
    7204:	d1dd      	bne.n	71c2 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    7206:	2304      	movs	r3, #4
    7208:	4638      	mov	r0, r7
    720a:	eb0d 0203 	add.w	r2, sp, r3
    720e:	4429      	add	r1, r5
    7210:	f000 fc8a 	bl	7b28 <flash_area_read>
    7214:	2800      	cmp	r0, #0
    7216:	d1d4      	bne.n	71c2 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    7218:	f646 1307 	movw	r3, #26887	; 0x6907
    721c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7220:	429a      	cmp	r2, r3
    7222:	d1ce      	bne.n	71c2 <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    7224:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    7228:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    722c:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    722e:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    7230:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    7234:	442b      	add	r3, r5
    7236:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    7238:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    723a:	4413      	add	r3, r2
    it->type = type;
    723c:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    7240:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    7242:	6125      	str	r5, [r4, #16]
    return 0;
    7244:	e7bf      	b.n	71c6 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    7246:	2b00      	cmp	r3, #0
    7248:	d0e6      	beq.n	7218 <bootutil_tlv_iter_begin+0x64>
    724a:	e7ba      	b.n	71c2 <bootutil_tlv_iter_begin+0xe>

0000724c <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    724c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7250:	460f      	mov	r7, r1
    7252:	4690      	mov	r8, r2
    7254:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    7256:	4604      	mov	r4, r0
    7258:	b920      	cbnz	r0, 7264 <bootutil_tlv_iter_next+0x18>
        return -1;
    725a:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    725e:	b003      	add	sp, #12
    7260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    7264:	6803      	ldr	r3, [r0, #0]
    7266:	2b00      	cmp	r3, #0
    7268:	d0f7      	beq.n	725a <bootutil_tlv_iter_next+0xe>
    726a:	6843      	ldr	r3, [r0, #4]
    726c:	2b00      	cmp	r3, #0
    726e:	d0f4      	beq.n	725a <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    7270:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    7274:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    7278:	429a      	cmp	r2, r3
    727a:	d216      	bcs.n	72aa <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    727c:	6823      	ldr	r3, [r4, #0]
    727e:	895b      	ldrh	r3, [r3, #10]
    7280:	b123      	cbz	r3, 728c <bootutil_tlv_iter_next+0x40>
    7282:	68e3      	ldr	r3, [r4, #12]
    7284:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    7286:	bf04      	itt	eq
    7288:	3304      	addeq	r3, #4
    728a:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    728c:	2304      	movs	r3, #4
    728e:	6921      	ldr	r1, [r4, #16]
    7290:	6860      	ldr	r0, [r4, #4]
    7292:	eb0d 0203 	add.w	r2, sp, r3
    7296:	f000 fc47 	bl	7b28 <flash_area_read>
        if (rc) {
    729a:	2800      	cmp	r0, #0
    729c:	d1dd      	bne.n	725a <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    729e:	7aa3      	ldrb	r3, [r4, #10]
    72a0:	6925      	ldr	r5, [r4, #16]
    72a2:	b123      	cbz	r3, 72ae <bootutil_tlv_iter_next+0x62>
    72a4:	68e3      	ldr	r3, [r4, #12]
    72a6:	42ab      	cmp	r3, r5
    72a8:	d801      	bhi.n	72ae <bootutil_tlv_iter_next+0x62>
            return 1;
    72aa:	2001      	movs	r0, #1
    72ac:	e7d7      	b.n	725e <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    72ae:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    72b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    72b4:	4549      	cmp	r1, r9
    72b6:	f102 0304 	add.w	r3, r2, #4
    72ba:	d003      	beq.n	72c4 <bootutil_tlv_iter_next+0x78>
    72bc:	f8bd c004 	ldrh.w	ip, [sp, #4]
    72c0:	458c      	cmp	ip, r1
    72c2:	d10b      	bne.n	72dc <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    72c4:	b116      	cbz	r6, 72cc <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    72c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    72ca:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    72cc:	3504      	adds	r5, #4
    72ce:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    72d0:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    72d4:	6922      	ldr	r2, [r4, #16]
    72d6:	441a      	add	r2, r3
    72d8:	6122      	str	r2, [r4, #16]
            return 0;
    72da:	e7c0      	b.n	725e <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    72dc:	442b      	add	r3, r5
    72de:	6123      	str	r3, [r4, #16]
    72e0:	e7c8      	b.n	7274 <bootutil_tlv_iter_next+0x28>

000072e2 <bootutil_read_bigint>:
{
    72e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    72e4:	460c      	mov	r4, r1
    72e6:	4606      	mov	r6, r0
    72e8:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    72ea:	2302      	movs	r3, #2
    72ec:	4620      	mov	r0, r4
    72ee:	aa01      	add	r2, sp, #4
    72f0:	f000 fa35 	bl	775e <mbedtls_asn1_get_tag>
    72f4:	4605      	mov	r5, r0
    72f6:	b9e8      	cbnz	r0, 7334 <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    72f8:	9a01      	ldr	r2, [sp, #4]
    72fa:	2a1f      	cmp	r2, #31
    72fc:	d90e      	bls.n	731c <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    72fe:	f1a2 0120 	sub.w	r1, r2, #32
    7302:	4630      	mov	r0, r6
    7304:	2220      	movs	r2, #32
    7306:	6823      	ldr	r3, [r4, #0]
    7308:	4419      	add	r1, r3
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    730a:	f000 ffec 	bl	82e6 <memcpy>
    *cp += len;
    730e:	6823      	ldr	r3, [r4, #0]
    7310:	9a01      	ldr	r2, [sp, #4]
    7312:	4413      	add	r3, r2
    7314:	6023      	str	r3, [r4, #0]
}
    7316:	4628      	mov	r0, r5
    7318:	b002      	add	sp, #8
    731a:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    731c:	4601      	mov	r1, r0
    731e:	f1c2 0220 	rsb	r2, r2, #32
    7322:	4630      	mov	r0, r6
    7324:	f000 ffea 	bl	82fc <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    7328:	9a01      	ldr	r2, [sp, #4]
    732a:	6821      	ldr	r1, [r4, #0]
    732c:	f1c2 0020 	rsb	r0, r2, #32
    7330:	4430      	add	r0, r6
    7332:	e7ea      	b.n	730a <bootutil_read_bigint+0x28>
        return -3;
    7334:	f06f 0502 	mvn.w	r5, #2
    7338:	e7ed      	b.n	7316 <bootutil_read_bigint+0x34>

0000733a <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    733a:	f000 bfad 	b.w	8298 <memcmp>

0000733e <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    733e:	f44f 7340 	mov.w	r3, #768	; 0x300
    7342:	4358      	muls	r0, r3
}
    7344:	3030      	adds	r0, #48	; 0x30
    7346:	4770      	bx	lr

00007348 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    7348:	780b      	ldrb	r3, [r1, #0]
    734a:	2b05      	cmp	r3, #5
    734c:	d006      	beq.n	735c <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    734e:	2b02      	cmp	r3, #2
    7350:	bf14      	ite	ne
    7352:	f04f 30ff 	movne.w	r0, #4294967295
    7356:	f44f 7040 	moveq.w	r0, #768	; 0x300
    735a:	4770      	bx	lr
    735c:	f44f 7040 	mov.w	r0, #768	; 0x300
}
    7360:	4770      	bx	lr

00007362 <boot_status_off>:
{
    7362:	b510      	push	{r4, lr}
    7364:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    7366:	f000 fc5d 	bl	7c24 <flash_area_align>
}
    736a:	f44f 7240 	mov.w	r2, #768	; 0x300
    return fap->fa_size - off_from_end;
    736e:	68a3      	ldr	r3, [r4, #8]
    7370:	3b30      	subs	r3, #48	; 0x30
}
    7372:	fb02 3010 	mls	r0, r2, r0, r3
    7376:	bd10      	pop	{r4, pc}

00007378 <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    7378:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    737a:	2201      	movs	r2, #1
    737c:	3920      	subs	r1, #32
    737e:	f001 ba76 	b.w	886e <boot_write_trailer_flag>

00007382 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    7382:	b513      	push	{r0, r1, r4, lr}
    7384:	4604      	mov	r4, r0
    7386:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    7388:	f001 fa04 	bl	8794 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    738c:	2304      	movs	r3, #4
    738e:	f1a0 0108 	sub.w	r1, r0, #8
    7392:	eb0d 0203 	add.w	r2, sp, r3
    7396:	4620      	mov	r0, r4
    7398:	f001 fa3c 	bl	8814 <boot_write_trailer>
}
    739c:	b002      	add	sp, #8
    739e:	bd10      	pop	{r4, pc}

000073a0 <boot_read_image_headers>:
{
    73a0:	b570      	push	{r4, r5, r6, lr}
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    73a2:	4613      	mov	r3, r2
{
    73a4:	460e      	mov	r6, r1
    73a6:	4615      	mov	r5, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    73a8:	2100      	movs	r1, #0
    73aa:	4602      	mov	r2, r0
{
    73ac:	4604      	mov	r4, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    73ae:	f7f9 fd63 	bl	e78 <boot_read_image_header>
        if (rc != 0) {
    73b2:	b950      	cbnz	r0, 73ca <boot_read_image_headers+0x2a>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    73b4:	462b      	mov	r3, r5
    73b6:	2101      	movs	r1, #1
    73b8:	4620      	mov	r0, r4
    73ba:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    73be:	f7f9 fd5b 	bl	e78 <boot_read_image_header>
        if (rc != 0) {
    73c2:	b110      	cbz	r0, 73ca <boot_read_image_headers+0x2a>
                return 0;
    73c4:	2e00      	cmp	r6, #0
    73c6:	bf08      	it	eq
    73c8:	2000      	moveq	r0, #0
}
    73ca:	bd70      	pop	{r4, r5, r6, pc}

000073cc <boot_read_image_size.constprop.0.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    73cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    73ce:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    73d0:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    73d2:	460d      	mov	r5, r1
    73d4:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    73d6:	f7ff fee3 	bl	71a0 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    73da:	4669      	mov	r1, sp
    73dc:	b2c0      	uxtb	r0, r0
    73de:	f7fa fd15 	bl	1e0c <flash_area_open>
    if (rc != 0) {
    73e2:	bb30      	cbnz	r0, 7432 <boot_read_image_size.constprop.0.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    73e4:	232c      	movs	r3, #44	; 0x2c
    73e6:	fb03 4405 	mla	r4, r3, r5, r4
    73ea:	68e3      	ldr	r3, [r4, #12]
    73ec:	8925      	ldrh	r5, [r4, #8]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    73ee:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    73f0:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    73f2:	2304      	movs	r3, #4
    73f4:	4629      	mov	r1, r5
    73f6:	eb0d 0203 	add.w	r2, sp, r3
    73fa:	f000 fb95 	bl	7b28 <flash_area_read>
    73fe:	b9c0      	cbnz	r0, 7432 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    7400:	f646 1308 	movw	r3, #26888	; 0x6908
    7404:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    7408:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    740a:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    740c:	9800      	ldr	r0, [sp, #0]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    740e:	d115      	bne.n	743c <boot_read_image_size.constprop.0.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    7410:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7414:	429c      	cmp	r4, r3
    7416:	d10c      	bne.n	7432 <boot_read_image_size.constprop.0.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    7418:	2304      	movs	r3, #4
    741a:	1961      	adds	r1, r4, r5
    741c:	eb0d 0203 	add.w	r2, sp, r3
    7420:	f000 fb82 	bl	7b28 <flash_area_read>
    7424:	b928      	cbnz	r0, 7432 <boot_read_image_size.constprop.0.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    7426:	f646 1307 	movw	r3, #26887	; 0x6907
    742a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    742e:	429a      	cmp	r2, r3
    7430:	d007      	beq.n	7442 <boot_read_image_size.constprop.0.isra.0+0x76>
    flash_area_close(fap);
    7432:	9800      	ldr	r0, [sp, #0]
    7434:	f000 fb77 	bl	7b26 <flash_area_close>
}
    7438:	b002      	add	sp, #8
    743a:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    743c:	2c00      	cmp	r4, #0
    743e:	d0f2      	beq.n	7426 <boot_read_image_size.constprop.0.isra.0+0x5a>
    7440:	e7f7      	b.n	7432 <boot_read_image_size.constprop.0.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    7442:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7446:	4421      	add	r1, r4
    7448:	4429      	add	r1, r5
    744a:	6031      	str	r1, [r6, #0]
    rc = 0;
    744c:	e7f1      	b.n	7432 <boot_read_image_size.constprop.0.isra.0+0x66>

0000744e <boot_read_sectors>:
{
    744e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    7450:	f44f 7580 	mov.w	r5, #256	; 0x100
{
    7454:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7456:	6a42      	ldr	r2, [r0, #36]	; 0x24
    7458:	a901      	add	r1, sp, #4
    745a:	2005      	movs	r0, #5
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    745c:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    745e:	f7fa fce9 	bl	1e34 <flash_area_get_sectors>
    if (rc != 0) {
    7462:	b958      	cbnz	r0, 747c <boot_read_sectors+0x2e>
    *out_num_sectors = num_sectors;
    7464:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7466:	2002      	movs	r0, #2
    7468:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    746a:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    746c:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    746e:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7470:	f7fa fce0 	bl	1e34 <flash_area_get_sectors>
    if (rc != 0) {
    7474:	4605      	mov	r5, r0
    7476:	b128      	cbz	r0, 7484 <boot_read_sectors+0x36>
        return BOOT_EFLASH_SEC;
    7478:	2509      	movs	r5, #9
    747a:	e000      	b.n	747e <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    747c:	2501      	movs	r5, #1
}
    747e:	4628      	mov	r0, r5
    7480:	b003      	add	sp, #12
    7482:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    7484:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    7486:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    7488:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    748a:	f000 fbcb 	bl	7c24 <flash_area_align>
    748e:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    7490:	e7f5      	b.n	747e <boot_read_sectors+0x30>

00007492 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    7492:	2301      	movs	r3, #1
    7494:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    7496:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    749a:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    749c:	2300      	movs	r3, #0
    bs->source = 0;
    749e:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    74a2:	4770      	bx	lr

000074a4 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    74a4:	7943      	ldrb	r3, [r0, #5]
    74a6:	2b01      	cmp	r3, #1
    74a8:	d107      	bne.n	74ba <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    74aa:	6803      	ldr	r3, [r0, #0]
    74ac:	2b01      	cmp	r3, #1
    74ae:	d104      	bne.n	74ba <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    74b0:	7900      	ldrb	r0, [r0, #4]
    74b2:	1e43      	subs	r3, r0, #1
    74b4:	4258      	negs	r0, r3
    74b6:	4158      	adcs	r0, r3
    74b8:	4770      	bx	lr
    74ba:	2000      	movs	r0, #0
}
    74bc:	4770      	bx	lr

000074be <boot_write_status>:
{
    74be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    74c0:	4606      	mov	r6, r0
    74c2:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    74c4:	2005      	movs	r0, #5
    74c6:	a901      	add	r1, sp, #4
    74c8:	f7fa fca0 	bl	1e0c <flash_area_open>
    if (rc != 0) {
    74cc:	bb38      	cbnz	r0, 751e <boot_write_status+0x60>
    off = boot_status_off(fap) +
    74ce:	9801      	ldr	r0, [sp, #4]
    74d0:	f7ff ff47 	bl	7362 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    74d4:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    74d6:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    74d8:	4628      	mov	r0, r5
    74da:	f000 f8e5 	bl	76a8 <boot_status_internal_off>
    off = boot_status_off(fap) +
    74de:	4404      	add	r4, r0
    align = flash_area_align(fap);
    74e0:	9801      	ldr	r0, [sp, #4]
    74e2:	f000 fb9f 	bl	7c24 <flash_area_align>
    74e6:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    74e8:	9801      	ldr	r0, [sp, #4]
    74ea:	f000 fba4 	bl	7c36 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    74ee:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    74f0:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    74f2:	eb0d 0002 	add.w	r0, sp, r2
    74f6:	f000 ff01 	bl	82fc <memset>
    buf[0] = bs->state;
    74fa:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    74fc:	4621      	mov	r1, r4
    buf[0] = bs->state;
    74fe:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    7502:	9801      	ldr	r0, [sp, #4]
    7504:	4633      	mov	r3, r6
    7506:	aa02      	add	r2, sp, #8
    7508:	f000 fb2a 	bl	7b60 <flash_area_write>
    if (rc != 0) {
    750c:	1e04      	subs	r4, r0, #0
    750e:	bf18      	it	ne
    7510:	2401      	movne	r4, #1
    flash_area_close(fap);
    7512:	9801      	ldr	r0, [sp, #4]
    7514:	f000 fb07 	bl	7b26 <flash_area_close>
}
    7518:	4620      	mov	r0, r4
    751a:	b004      	add	sp, #16
    751c:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    751e:	2401      	movs	r4, #1
    7520:	e7f7      	b.n	7512 <boot_write_status+0x54>

00007522 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    7522:	f000 bb50 	b.w	7bc6 <flash_area_erase>

00007526 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    7526:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    752a:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    752c:	2100      	movs	r1, #0
{
    752e:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    7530:	4608      	mov	r0, r1
    7532:	f7ff fe35 	bl	71a0 <flash_area_id_from_multi_image_slot>
    7536:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    7538:	2101      	movs	r1, #1
    753a:	2000      	movs	r0, #0
    753c:	f7ff fe30 	bl	71a0 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    7540:	7833      	ldrb	r3, [r6, #0]
    7542:	429c      	cmp	r4, r3
    7544:	d021      	beq.n	758a <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    7546:	4298      	cmp	r0, r3
    7548:	d121      	bne.n	758e <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    754a:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    754c:	232c      	movs	r3, #44	; 0x2c
    754e:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    7552:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    7554:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    7556:	f7ff fef2 	bl	733e <boot_trailer_sz>
    total_sz = 0;
    755a:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    755e:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    7560:	3c01      	subs	r4, #1
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    7562:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    7564:	4630      	mov	r0, r6
    7566:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    756a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    756e:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    7572:	681b      	ldr	r3, [r3, #0]
    7574:	464a      	mov	r2, r9
    7576:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    7578:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    757a:	f7ff ffd2 	bl	7522 <boot_erase_region>
    } while (total_sz < trailer_sz);
    757e:	45b8      	cmp	r8, r7
        sector--;
    7580:	f104 34ff 	add.w	r4, r4, #4294967295
    } while (total_sz < trailer_sz);
    7584:	d3ed      	bcc.n	7562 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    7586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    758a:	2500      	movs	r5, #0
    758c:	e7de      	b.n	754c <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    758e:	2001      	movs	r0, #1
    7590:	e7f9      	b.n	7586 <swap_erase_trailer_sectors+0x60>

00007592 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    7592:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7594:	4615      	mov	r5, r2
    7596:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    7598:	2002      	movs	r0, #2
    759a:	4669      	mov	r1, sp
    759c:	f001 f97a 	bl	8894 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    75a0:	79e9      	ldrb	r1, [r5, #7]
    75a2:	2901      	cmp	r1, #1
    75a4:	d003      	beq.n	75ae <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    75a6:	2200      	movs	r2, #0
    75a8:	4620      	mov	r0, r4
    75aa:	f001 f987 	bl	88bc <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    75ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    75b2:	2b01      	cmp	r3, #1
    75b4:	d102      	bne.n	75bc <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    75b6:	4620      	mov	r0, r4
    75b8:	f001 f963 	bl	8882 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    75bc:	68a9      	ldr	r1, [r5, #8]
    75be:	4620      	mov	r0, r4
    75c0:	f7ff fedf 	bl	7382 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    75c4:	4620      	mov	r0, r4
    75c6:	f7fc ff91 	bl	44ec <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    75ca:	2000      	movs	r0, #0
    75cc:	b003      	add	sp, #12
    75ce:	bd30      	pop	{r4, r5, pc}

000075d0 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    75d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    75d2:	460d      	mov	r5, r1
    75d4:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    75d6:	f7f9 fd39 	bl	104c <swap_status_source>
    75da:	4604      	mov	r4, r0
    75dc:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    75de:	b138      	cbz	r0, 75f0 <swap_read_status+0x20>
    75e0:	2802      	cmp	r0, #2
    75e2:	d12f      	bne.n	7644 <swap_read_status+0x74>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    75e4:	2005      	movs	r0, #5
    75e6:	a901      	add	r1, sp, #4
    75e8:	f7fa fc10 	bl	1e0c <flash_area_open>
    if (rc != 0) {
    75ec:	b118      	cbz	r0, 75f6 <swap_read_status+0x26>
        return BOOT_EFLASH;
    75ee:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    75f0:	4620      	mov	r0, r4
    75f2:	b002      	add	sp, #8
    75f4:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    75f6:	462a      	mov	r2, r5
    75f8:	4631      	mov	r1, r6
    75fa:	9801      	ldr	r0, [sp, #4]
    75fc:	f7f9 fc8a 	bl	f14 <swap_read_status_bytes>
    if (rc == 0) {
    7600:	4604      	mov	r4, r0
    7602:	b9d8      	cbnz	r0, 763c <swap_read_status+0x6c>
        off = boot_swap_info_off(fap);
    7604:	9801      	ldr	r0, [sp, #4]
    7606:	f001 f8c5 	bl	8794 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    760a:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    760c:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    760e:	f10d 0203 	add.w	r2, sp, #3
    7612:	9801      	ldr	r0, [sp, #4]
    7614:	f000 fa88 	bl	7b28 <flash_area_read>
        if (rc != 0) {
    7618:	4604      	mov	r4, r0
    761a:	2800      	cmp	r0, #0
    761c:	d1e7      	bne.n	75ee <swap_read_status+0x1e>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    761e:	2201      	movs	r2, #1
    7620:	9801      	ldr	r0, [sp, #4]
    7622:	f10d 0103 	add.w	r1, sp, #3
    7626:	f001 f8c6 	bl	87b6 <bootutil_buffer_is_erased>
    762a:	b110      	cbz	r0, 7632 <swap_read_status+0x62>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    762c:	2301      	movs	r3, #1
    762e:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    7632:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7636:	f003 030f 	and.w	r3, r3, #15
    763a:	71eb      	strb	r3, [r5, #7]
    flash_area_close(fap);
    763c:	9801      	ldr	r0, [sp, #4]
    763e:	f000 fa72 	bl	7b26 <flash_area_close>
    return rc;
    7642:	e7d5      	b.n	75f0 <swap_read_status+0x20>
    switch (bs->source) {
    7644:	2407      	movs	r4, #7
    7646:	e7d3      	b.n	75f0 <swap_read_status+0x20>

00007648 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    7648:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    764a:	2005      	movs	r0, #5
    764c:	a901      	add	r1, sp, #4
    764e:	f7fa fbdd 	bl	1e0c <flash_area_open>
            &fap);
    if (rc != 0) {
    7652:	b948      	cbnz	r0, 7668 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    7654:	9801      	ldr	r0, [sp, #4]
    7656:	f7ff fe8f 	bl	7378 <boot_write_copy_done>
    765a:	4604      	mov	r4, r0
    flash_area_close(fap);
    765c:	9801      	ldr	r0, [sp, #4]
    765e:	f000 fa62 	bl	7b26 <flash_area_close>
    return rc;
}
    7662:	4620      	mov	r0, r4
    7664:	b002      	add	sp, #8
    7666:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    7668:	2401      	movs	r4, #1
    766a:	e7fa      	b.n	7662 <swap_set_copy_done+0x1a>

0000766c <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    766c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    766e:	2005      	movs	r0, #5
    7670:	a901      	add	r1, sp, #4
    7672:	f7fa fbcb 	bl	1e0c <flash_area_open>
            &fap);
    if (rc != 0) {
    7676:	b9a8      	cbnz	r0, 76a4 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    7678:	9801      	ldr	r0, [sp, #4]
    767a:	a902      	add	r1, sp, #8
    767c:	f7fc ff44 	bl	4508 <boot_read_swap_state>
    if (rc != 0) {
    7680:	4604      	mov	r4, r0
    7682:	b968      	cbnz	r0, 76a0 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    7684:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7688:	2b03      	cmp	r3, #3
    768a:	d103      	bne.n	7694 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    768c:	9801      	ldr	r0, [sp, #4]
    768e:	f001 f8f8 	bl	8882 <boot_write_image_ok>
    7692:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    7694:	9801      	ldr	r0, [sp, #4]
    7696:	f000 fa46 	bl	7b26 <flash_area_close>
    return rc;
}
    769a:	4620      	mov	r0, r4
    769c:	b004      	add	sp, #16
    769e:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    76a0:	2401      	movs	r4, #1
    76a2:	e7f7      	b.n	7694 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    76a4:	2401      	movs	r4, #1
    76a6:	e7f8      	b.n	769a <swap_set_image_ok+0x2e>

000076a8 <boot_status_internal_off>:
{
    76a8:	b510      	push	{r4, lr}
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    76aa:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    76ac:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    76ae:	2b01      	cmp	r3, #1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    76b0:	bf06      	itte	eq
    76b2:	2300      	moveq	r3, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    76b4:	460c      	moveq	r4, r1
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    76b6:	020b      	lslne	r3, r1, #8
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    76b8:	f102 32ff 	add.w	r2, r2, #4294967295
    off = ((bs->op == BOOT_STATUS_OP_MOVE) ?
    76bc:	fb01 3302 	mla	r3, r1, r2, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    76c0:	6802      	ldr	r2, [r0, #0]
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    76c2:	bf18      	it	ne
    76c4:	004c      	lslne	r4, r1, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    76c6:	3a01      	subs	r2, #1
}
    76c8:	fb04 3002 	mla	r0, r4, r2, r3
    76cc:	bd10      	pop	{r4, pc}

000076ce <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    76ce:	6803      	ldr	r3, [r0, #0]
{
    76d0:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    76d2:	1acd      	subs	r5, r1, r3
    76d4:	2d00      	cmp	r5, #0
    76d6:	dc02      	bgt.n	76de <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    76d8:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    76dc:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    76de:	f993 6000 	ldrsb.w	r6, [r3]
    76e2:	781c      	ldrb	r4, [r3, #0]
    76e4:	2e00      	cmp	r6, #0
    76e6:	db0a      	blt.n	76fe <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    76e8:	1c5c      	adds	r4, r3, #1
    76ea:	6004      	str	r4, [r0, #0]
    76ec:	781b      	ldrb	r3, [r3, #0]
    76ee:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    76f0:	6803      	ldr	r3, [r0, #0]
    76f2:	1ac9      	subs	r1, r1, r3
    76f4:	6813      	ldr	r3, [r2, #0]
    76f6:	428b      	cmp	r3, r1
    76f8:	d8ee      	bhi.n	76d8 <mbedtls_asn1_get_len+0xa>
    return( 0 );
    76fa:	2000      	movs	r0, #0
    76fc:	e7ee      	b.n	76dc <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    76fe:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    7702:	3c01      	subs	r4, #1
    7704:	2c03      	cmp	r4, #3
    7706:	d827      	bhi.n	7758 <mbedtls_asn1_get_len+0x8a>
    7708:	e8df f004 	tbb	[pc, r4]
    770c:	1e120902 	.word	0x1e120902
            if( ( end - *p ) < 2 )
    7710:	2d01      	cmp	r5, #1
    7712:	d0e1      	beq.n	76d8 <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    7714:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    7716:	3302      	adds	r3, #2
            *len = (*p)[1];
    7718:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    771a:	6003      	str	r3, [r0, #0]
            break;
    771c:	e7e8      	b.n	76f0 <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    771e:	2d02      	cmp	r5, #2
    7720:	ddda      	ble.n	76d8 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    7722:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    7726:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    7728:	ba64      	rev16	r4, r4
    772a:	b2a4      	uxth	r4, r4
    772c:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    772e:	e7f4      	b.n	771a <mbedtls_asn1_get_len+0x4c>
            if( ( end - *p ) < 4 )
    7730:	2d03      	cmp	r5, #3
    7732:	ddd1      	ble.n	76d8 <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7734:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    7736:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7738:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    773a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    773e:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    7740:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7742:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    7744:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    7746:	e7e8      	b.n	771a <mbedtls_asn1_get_len+0x4c>
            if( ( end - *p ) < 5 )
    7748:	2d04      	cmp	r5, #4
    774a:	ddc5      	ble.n	76d8 <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    774c:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    7750:	3305      	adds	r3, #5
    7752:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    7754:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    7756:	e7e0      	b.n	771a <mbedtls_asn1_get_len+0x4c>
        switch( **p & 0x7F )
    7758:	f06f 0063 	mvn.w	r0, #99	; 0x63
    775c:	e7be      	b.n	76dc <mbedtls_asn1_get_len+0xe>

0000775e <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    775e:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    7760:	6804      	ldr	r4, [r0, #0]
    7762:	1b0e      	subs	r6, r1, r4
    7764:	2e00      	cmp	r6, #0
    7766:	dd07      	ble.n	7778 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    7768:	7826      	ldrb	r6, [r4, #0]
    776a:	429e      	cmp	r6, r3
    776c:	d108      	bne.n	7780 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    776e:	3401      	adds	r4, #1
    7770:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    7772:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    7774:	f7ff bfab 	b.w	76ce <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7778:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    777c:	bc70      	pop	{r4, r5, r6}
    777e:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    7780:	f06f 0061 	mvn.w	r0, #97	; 0x61
    7784:	e7fa      	b.n	777c <mbedtls_asn1_get_tag+0x1e>

00007786 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    7786:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    7788:	2303      	movs	r3, #3
{
    778a:	4604      	mov	r4, r0
    778c:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    778e:	f7ff ffe6 	bl	775e <mbedtls_asn1_get_tag>
    7792:	b958      	cbnz	r0, 77ac <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
    7794:	6813      	ldr	r3, [r2, #0]
    7796:	1e5a      	subs	r2, r3, #1
    7798:	2b01      	cmp	r3, #1
    779a:	602a      	str	r2, [r5, #0]
    779c:	d904      	bls.n	77a8 <mbedtls_asn1_get_bitstring_null+0x22>
    779e:	6823      	ldr	r3, [r4, #0]
    77a0:	1c5a      	adds	r2, r3, #1
    77a2:	6022      	str	r2, [r4, #0]
    77a4:	781b      	ldrb	r3, [r3, #0]
    77a6:	b10b      	cbz	r3, 77ac <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    77a8:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
    77ac:	bd38      	pop	{r3, r4, r5, pc}

000077ae <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    77ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    77b2:	4690      	mov	r8, r2
    77b4:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    77b6:	aa01      	add	r2, sp, #4
    77b8:	2330      	movs	r3, #48	; 0x30
{
    77ba:	4605      	mov	r5, r0
    77bc:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    77be:	f7ff ffce 	bl	775e <mbedtls_asn1_get_tag>
    77c2:	4604      	mov	r4, r0
    77c4:	b9f8      	cbnz	r0, 7806 <mbedtls_asn1_get_alg+0x58>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    77c6:	682e      	ldr	r6, [r5, #0]
    77c8:	eba9 0906 	sub.w	r9, r9, r6
    77cc:	f1b9 0f00 	cmp.w	r9, #0
    77d0:	dd32      	ble.n	7838 <mbedtls_asn1_get_alg+0x8a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    77d2:	4642      	mov	r2, r8
    77d4:	7833      	ldrb	r3, [r6, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    77d6:	4628      	mov	r0, r5
    alg->tag = **p;
    77d8:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
    77dc:	9b01      	ldr	r3, [sp, #4]
    77de:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    77e0:	4631      	mov	r1, r6
    77e2:	2306      	movs	r3, #6
    77e4:	f7ff ffbb 	bl	775e <mbedtls_asn1_get_tag>
    77e8:	4604      	mov	r4, r0
    77ea:	b960      	cbnz	r0, 7806 <mbedtls_asn1_get_alg+0x58>
        return( ret );

    alg->p = *p;
    77ec:	682a      	ldr	r2, [r5, #0]
    *p += alg->len;
    77ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
    77f2:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
    77f6:	1853      	adds	r3, r2, r1

    if( *p == end )
    77f8:	42b3      	cmp	r3, r6
    *p += alg->len;
    77fa:	602b      	str	r3, [r5, #0]
    if( *p == end )
    77fc:	d107      	bne.n	780e <mbedtls_asn1_get_alg+0x60>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    77fe:	210c      	movs	r1, #12
    7800:	4638      	mov	r0, r7
    7802:	f7f9 fdcb 	bl	139c <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    7806:	4620      	mov	r0, r4
    7808:	b003      	add	sp, #12
    780a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
    780e:	5c51      	ldrb	r1, [r2, r1]
    7810:	463a      	mov	r2, r7
    (*p)++;
    7812:	3301      	adds	r3, #1
    params->tag = **p;
    7814:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    7818:	4628      	mov	r0, r5
    781a:	4631      	mov	r1, r6
    (*p)++;
    781c:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    781e:	f7ff ff56 	bl	76ce <mbedtls_asn1_get_len>
    7822:	b960      	cbnz	r0, 783e <mbedtls_asn1_get_alg+0x90>
    params->p = *p;
    7824:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    7826:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    7828:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    782a:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    782c:	42b3      	cmp	r3, r6
    782e:	bf18      	it	ne
    7830:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    *p += params->len;
    7834:	602b      	str	r3, [r5, #0]
    if( *p != end )
    7836:	e7e6      	b.n	7806 <mbedtls_asn1_get_alg+0x58>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7838:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    783c:	e7e3      	b.n	7806 <mbedtls_asn1_get_alg+0x58>
    783e:	4604      	mov	r4, r0
    7840:	e7e1      	b.n	7806 <mbedtls_asn1_get_alg+0x58>

00007842 <cc310_sha256_update>:
{
    7842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    7844:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    7848:	4605      	mov	r5, r0
    784a:	4614      	mov	r4, r2
    784c:	af00      	add	r7, sp, #0
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    784e:	d210      	bcs.n	7872 <cc310_sha256_update+0x30>
    7850:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    7852:	1dd3      	adds	r3, r2, #7
    7854:	f023 0307 	bic.w	r3, r3, #7
    7858:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    785c:	4668      	mov	r0, sp
    785e:	f000 fd42 	bl	82e6 <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    7862:	4669      	mov	r1, sp
    7864:	4622      	mov	r2, r4
    7866:	4628      	mov	r0, r5
    7868:	f7fe fbce 	bl	6008 <nrf_cc310_bl_hash_sha256_update>
    786c:	46b5      	mov	sp, r6
};
    786e:	46bd      	mov	sp, r7
    7870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    7872:	f7fe fbc9 	bl	6008 <nrf_cc310_bl_hash_sha256_update>
};
    7876:	e7fa      	b.n	786e <cc310_sha256_update+0x2c>

00007878 <crc16>:

#include <sys/crc.h>

uint16_t crc16(const uint8_t *src, size_t len, uint16_t polynomial,
	    uint16_t initial_value, bool pad)
{
    7878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

			crc = (crc << 1U);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
    787c:	f04f 0c80 	mov.w	ip, #128	; 0x80
{
    7880:	4607      	mov	r7, r0
	uint16_t crc = initial_value;
    7882:	4618      	mov	r0, r3
	for (i = 0; i < len + padding; i++) {
    7884:	2300      	movs	r3, #0
    7886:	f89d 6018 	ldrb.w	r6, [sp, #24]
    788a:	eb01 0646 	add.w	r6, r1, r6, lsl #1
    788e:	429e      	cmp	r6, r3
    7890:	d819      	bhi.n	78c6 <crc16+0x4e>
			}
		}
	}

	return crc;
}
    7892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7896:	4620      	mov	r0, r4
			crc = (crc << 1U);
    7898:	0044      	lsls	r4, r0, #1
			if (i < len) {
    789a:	428b      	cmp	r3, r1
			crc = (crc << 1U);
    789c:	b2a4      	uxth	r4, r4
			if (i < len) {
    789e:	d208      	bcs.n	78b2 <crc16+0x3a>
				crc |= !!(src[i] & (0x80U >> b));
    78a0:	f817 8003 	ldrb.w	r8, [r7, r3]
    78a4:	fa2c fe05 	lsr.w	lr, ip, r5
    78a8:	ea18 0f0e 	tst.w	r8, lr
    78ac:	bf18      	it	ne
    78ae:	f044 0401 	orrne.w	r4, r4, #1
			if (divide != 0U) {
    78b2:	0400      	lsls	r0, r0, #16
		for (b = 0; b < 8; b++) {
    78b4:	f105 0501 	add.w	r5, r5, #1
				crc = crc ^ polynomial;
    78b8:	bf48      	it	mi
    78ba:	4054      	eormi	r4, r2
		for (b = 0; b < 8; b++) {
    78bc:	2d08      	cmp	r5, #8
    78be:	d1ea      	bne.n	7896 <crc16+0x1e>
	for (i = 0; i < len + padding; i++) {
    78c0:	4620      	mov	r0, r4
    78c2:	3301      	adds	r3, #1
    78c4:	e7e3      	b.n	788e <crc16+0x16>
		for (b = 0; b < 8; b++) {
    78c6:	2500      	movs	r5, #0
    78c8:	e7e6      	b.n	7898 <crc16+0x20>

000078ca <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    78ca:	4603      	mov	r3, r0
    78cc:	b158      	cbz	r0, 78e6 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    78ce:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    78d0:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    78d4:	2a01      	cmp	r2, #1
    78d6:	d003      	beq.n	78e0 <sys_notify_validate+0x16>
    78d8:	2a03      	cmp	r2, #3
    78da:	d104      	bne.n	78e6 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    78dc:	6802      	ldr	r2, [r0, #0]
    78de:	b112      	cbz	r2, 78e6 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    78e0:	2000      	movs	r0, #0
    78e2:	6098      	str	r0, [r3, #8]
    78e4:	4770      	bx	lr
    78e6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    78ea:	4770      	bx	lr

000078ec <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    78ec:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    78ee:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    78f0:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    78f4:	2a03      	cmp	r2, #3
    78f6:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    78fa:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    78fc:	bf14      	ite	ne
    78fe:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    7900:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7902:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7904:	4770      	bx	lr

00007906 <arch_printk_char_out>:
}
    7906:	2000      	movs	r0, #0
    7908:	4770      	bx	lr

0000790a <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    790a:	b40f      	push	{r0, r1, r2, r3}
    790c:	b507      	push	{r0, r1, r2, lr}
    790e:	a904      	add	r1, sp, #16
    7910:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7914:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    7916:	f7f9 fec9 	bl	16ac <vprintk>
	}
	va_end(ap);
}
    791a:	b003      	add	sp, #12
    791c:	f85d eb04 	ldr.w	lr, [sp], #4
    7920:	b004      	add	sp, #16
    7922:	4770      	bx	lr

00007924 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7924:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7926:	f013 0307 	ands.w	r3, r3, #7
    792a:	d105      	bne.n	7938 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    792c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    792e:	2b00      	cmp	r3, #0
    7930:	bf0c      	ite	eq
    7932:	2000      	moveq	r0, #0
    7934:	2003      	movne	r0, #3
    7936:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7938:	2b02      	cmp	r3, #2
    793a:	d105      	bne.n	7948 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    793c:	8b40      	ldrh	r0, [r0, #26]
    793e:	fab0 f080 	clz	r0, r0
    7942:	0940      	lsrs	r0, r0, #5
    7944:	0080      	lsls	r0, r0, #2
    7946:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7948:	2b01      	cmp	r3, #1
    794a:	d105      	bne.n	7958 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    794c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    794e:	2b00      	cmp	r3, #0
    7950:	bf0c      	ite	eq
    7952:	2000      	moveq	r0, #0
    7954:	2005      	movne	r0, #5
    7956:	4770      	bx	lr
	int evt = EVT_NOP;
    7958:	2000      	movs	r0, #0
}
    795a:	4770      	bx	lr

0000795c <validate_args>:
{
    795c:	b510      	push	{r4, lr}
    795e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7960:	b100      	cbz	r0, 7964 <validate_args+0x8>
    7962:	b911      	cbnz	r1, 796a <validate_args+0xe>
		return -EINVAL;
    7964:	f06f 0015 	mvn.w	r0, #21
}
    7968:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    796a:	1d08      	adds	r0, r1, #4
    796c:	f7ff ffad 	bl	78ca <sys_notify_validate>
	if ((rv == 0)
    7970:	2800      	cmp	r0, #0
    7972:	d1f9      	bne.n	7968 <validate_args+0xc>
	    && ((cli->notify.flags
    7974:	68a3      	ldr	r3, [r4, #8]
    7976:	2b03      	cmp	r3, #3
    7978:	d9f6      	bls.n	7968 <validate_args+0xc>
    797a:	e7f3      	b.n	7964 <validate_args+0x8>

0000797c <notify_one>:
{
    797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7980:	460d      	mov	r5, r1
    7982:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7984:	4619      	mov	r1, r3
    7986:	1d28      	adds	r0, r5, #4
{
    7988:	4690      	mov	r8, r2
    798a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    798c:	f7ff ffae 	bl	78ec <sys_notify_finalize>
	if (cb) {
    7990:	4604      	mov	r4, r0
    7992:	b138      	cbz	r0, 79a4 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7994:	4633      	mov	r3, r6
    7996:	4642      	mov	r2, r8
    7998:	4629      	mov	r1, r5
    799a:	4638      	mov	r0, r7
    799c:	46a4      	mov	ip, r4
}
    799e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    79a2:	4760      	bx	ip
}
    79a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000079a8 <transition_complete>:
{
    79a8:	b410      	push	{r4}
	__asm__ volatile(
    79aa:	f04f 0420 	mov.w	r4, #32
    79ae:	f3ef 8211 	mrs	r2, BASEPRI
    79b2:	f384 8811 	msr	BASEPRI, r4
    79b6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    79ba:	6141      	str	r1, [r0, #20]
}
    79bc:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    79c0:	2101      	movs	r1, #1
    79c2:	f7f9 be81 	b.w	16c8 <process_event>

000079c6 <onoff_manager_init>:
{
    79c6:	b538      	push	{r3, r4, r5, lr}
    79c8:	460c      	mov	r4, r1
	if ((mgr == NULL)
    79ca:	4605      	mov	r5, r0
    79cc:	b158      	cbz	r0, 79e6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    79ce:	b151      	cbz	r1, 79e6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    79d0:	680b      	ldr	r3, [r1, #0]
    79d2:	b143      	cbz	r3, 79e6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    79d4:	684b      	ldr	r3, [r1, #4]
    79d6:	b133      	cbz	r3, 79e6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    79d8:	221c      	movs	r2, #28
    79da:	2100      	movs	r1, #0
    79dc:	f000 fc8e 	bl	82fc <memset>
	return 0;
    79e0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    79e2:	612c      	str	r4, [r5, #16]
}
    79e4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    79e6:	f06f 0015 	mvn.w	r0, #21
    79ea:	e7fb      	b.n	79e4 <onoff_manager_init+0x1e>

000079ec <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    79ec:	b570      	push	{r4, r5, r6, lr}
    79ee:	4605      	mov	r5, r0
    79f0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    79f2:	f7ff ffb3 	bl	795c <validate_args>

	if (rv < 0) {
    79f6:	1e04      	subs	r4, r0, #0
    79f8:	db15      	blt.n	7a26 <onoff_request+0x3a>
    79fa:	f04f 0320 	mov.w	r3, #32
    79fe:	f3ef 8211 	mrs	r2, BASEPRI
    7a02:	f383 8811 	msr	BASEPRI, r3
    7a06:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7a0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7a0e:	8b6b      	ldrh	r3, [r5, #26]
    7a10:	8b2c      	ldrh	r4, [r5, #24]
    7a12:	428b      	cmp	r3, r1
    7a14:	f004 0407 	and.w	r4, r4, #7
    7a18:	d107      	bne.n	7a2a <onoff_request+0x3e>
	__asm__ volatile(
    7a1a:	f382 8811 	msr	BASEPRI, r2
    7a1e:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    7a22:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    7a26:	4620      	mov	r0, r4
    7a28:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    7a2a:	2c02      	cmp	r4, #2
    7a2c:	d10c      	bne.n	7a48 <onoff_request+0x5c>
		mgr->refs += 1U;
    7a2e:	3301      	adds	r3, #1
    7a30:	836b      	strh	r3, [r5, #26]
    7a32:	f382 8811 	msr	BASEPRI, r2
    7a36:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    7a3a:	2300      	movs	r3, #0
    7a3c:	4622      	mov	r2, r4
    7a3e:	4631      	mov	r1, r6
    7a40:	4628      	mov	r0, r5
    7a42:	f7ff ff9b 	bl	797c <notify_one>
    7a46:	e7ee      	b.n	7a26 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    7a48:	2c06      	cmp	r4, #6
    7a4a:	d814      	bhi.n	7a76 <onoff_request+0x8a>
    7a4c:	e8df f004 	tbb	[pc, r4]
    7a50:	13131304 	.word	0x13131304
    7a54:	1a04      	.short	0x1a04
    7a56:	04          	.byte	0x04
    7a57:	00          	.byte	0x00
	parent->next = child;
    7a58:	2300      	movs	r3, #0
    7a5a:	6033      	str	r3, [r6, #0]
	return list->tail;
    7a5c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    7a5e:	b93b      	cbnz	r3, 7a70 <onoff_request+0x84>
	list->head = node;
    7a60:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    7a64:	b9ac      	cbnz	r4, 7a92 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    7a66:	2102      	movs	r1, #2
    7a68:	4628      	mov	r0, r5
    7a6a:	f7f9 fe2d 	bl	16c8 <process_event>
    7a6e:	e7da      	b.n	7a26 <onoff_request+0x3a>
	parent->next = child;
    7a70:	601e      	str	r6, [r3, #0]
	list->tail = node;
    7a72:	606e      	str	r6, [r5, #4]
}
    7a74:	e7f6      	b.n	7a64 <onoff_request+0x78>
    7a76:	f382 8811 	msr	BASEPRI, r2
    7a7a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    7a7e:	f06f 0404 	mvn.w	r4, #4
    7a82:	e7d0      	b.n	7a26 <onoff_request+0x3a>
    7a84:	f382 8811 	msr	BASEPRI, r2
    7a88:	f3bf 8f6f 	isb	sy
    7a8c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7a90:	e7c9      	b.n	7a26 <onoff_request+0x3a>
    7a92:	f382 8811 	msr	BASEPRI, r2
    7a96:	f3bf 8f6f 	isb	sy
		if (notify) {
    7a9a:	e7c4      	b.n	7a26 <onoff_request+0x3a>

00007a9c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7a9c:	4604      	mov	r4, r0
    7a9e:	b508      	push	{r3, lr}
    7aa0:	4608      	mov	r0, r1
    7aa2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    7aa4:	461a      	mov	r2, r3
    7aa6:	47a0      	blx	r4
	return z_impl_k_current_get();
    7aa8:	f7fd fdcc 	bl	5644 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    7aac:	f7fb fe9e 	bl	37ec <z_impl_k_thread_abort>

00007ab0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7ab0:	4770      	bx	lr

00007ab2 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    7ab2:	b084      	sub	sp, #16
    7ab4:	ab04      	add	r3, sp, #16
    7ab6:	e903 0007 	stmdb	r3, {r0, r1, r2}
    7aba:	2300      	movs	r3, #0
    7abc:	f383 8811 	msr	BASEPRI, r3
    7ac0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7ac4:	b004      	add	sp, #16
    7ac6:	4770      	bx	lr

00007ac8 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    7ac8:	b40f      	push	{r0, r1, r2, r3}
    7aca:	b507      	push	{r0, r1, r2, lr}
    7acc:	a904      	add	r1, sp, #16
    7ace:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7ad2:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    7ad4:	f7f9 fdea 	bl	16ac <vprintk>
	va_end(ap);
}
    7ad8:	b003      	add	sp, #12
    7ada:	f85d eb04 	ldr.w	lr, [sp], #4
    7ade:	b004      	add	sp, #16
    7ae0:	4770      	bx	lr

00007ae2 <device_get_binding>:
    7ae2:	f7fc bfad 	b.w	4a40 <z_impl_device_get_binding>

00007ae6 <get_sectors_cb>:
{
    7ae6:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    7ae8:	6802      	ldr	r2, [r0, #0]
    7aea:	684c      	ldr	r4, [r1, #4]
    7aec:	42a2      	cmp	r2, r4
    7aee:	d201      	bcs.n	7af4 <get_sectors_cb+0xe>
		*bail_value = true;
    7af0:	2001      	movs	r0, #1
}
    7af2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    7af4:	688b      	ldr	r3, [r1, #8]
    7af6:	4423      	add	r3, r4
    7af8:	429a      	cmp	r2, r3
    7afa:	d301      	bcc.n	7b00 <get_sectors_cb+0x1a>
		*bail_value = false;
    7afc:	2000      	movs	r0, #0
    7afe:	e7f8      	b.n	7af2 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    7b00:	694e      	ldr	r6, [r1, #20]
    7b02:	e9d1 5303 	ldrd	r5, r3, [r1, #12]
    7b06:	42b3      	cmp	r3, r6
    7b08:	d303      	bcc.n	7b12 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    7b0a:	f06f 030b 	mvn.w	r3, #11
    7b0e:	618b      	str	r3, [r1, #24]
		return true;
    7b10:	e7f4      	b.n	7afc <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    7b12:	1b12      	subs	r2, r2, r4
    7b14:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    7b18:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    7b1a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    7b1e:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    7b20:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    7b22:	610b      	str	r3, [r1, #16]
	return true;
    7b24:	e7e4      	b.n	7af0 <get_sectors_cb+0xa>

00007b26 <flash_area_close>:
}
    7b26:	4770      	bx	lr

00007b28 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    7b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
    7b2c:	1e0c      	subs	r4, r1, #0
{
    7b2e:	4605      	mov	r5, r0
    7b30:	4617      	mov	r7, r2
    7b32:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
    7b34:	db10      	blt.n	7b58 <flash_area_read+0x30>
    7b36:	6882      	ldr	r2, [r0, #8]
    7b38:	18e3      	adds	r3, r4, r3
    7b3a:	4293      	cmp	r3, r2
    7b3c:	d80c      	bhi.n	7b58 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    7b3e:	68c0      	ldr	r0, [r0, #12]
    7b40:	f7ff ffcf 	bl	7ae2 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    7b44:	6869      	ldr	r1, [r5, #4]
    7b46:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    7b48:	6883      	ldr	r3, [r0, #8]
    7b4a:	463a      	mov	r2, r7
    7b4c:	681c      	ldr	r4, [r3, #0]
    7b4e:	4633      	mov	r3, r6
    7b50:	46a4      	mov	ip, r4
}
    7b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b56:	4760      	bx	ip
    7b58:	f06f 0015 	mvn.w	r0, #21
    7b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007b60 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    7b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
    7b64:	f1b1 0900 	subs.w	r9, r1, #0
{
    7b68:	4680      	mov	r8, r0
    7b6a:	4617      	mov	r7, r2
    7b6c:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
    7b6e:	db27      	blt.n	7bc0 <flash_area_write+0x60>
    7b70:	6882      	ldr	r2, [r0, #8]
    7b72:	444b      	add	r3, r9
    7b74:	4293      	cmp	r3, r2
    7b76:	d823      	bhi.n	7bc0 <flash_area_write+0x60>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    7b78:	68c0      	ldr	r0, [r0, #12]
    7b7a:	f7ff ffb2 	bl	7ae2 <device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    7b7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    7b82:	4605      	mov	r5, r0
	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    7b84:	4499      	add	r9, r3
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    7b86:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    7b8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    7b8e:	b96b      	cbnz	r3, 7bac <flash_area_write+0x4c>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    7b90:	4633      	mov	r3, r6
    7b92:	f8d8 4004 	ldr.w	r4, [r8, #4]
    7b96:	463a      	mov	r2, r7
    7b98:	4649      	mov	r1, r9
    7b9a:	4628      	mov	r0, r5
    7b9c:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    7b9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
    7ba2:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    7ba4:	b943      	cbnz	r3, 7bb8 <flash_area_write+0x58>

	return rc;
}
    7ba6:	4620      	mov	r0, r4
    7ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    7bac:	2100      	movs	r1, #0
    7bae:	4798      	blx	r3
		if (rc) {
    7bb0:	4604      	mov	r4, r0
    7bb2:	2800      	cmp	r0, #0
    7bb4:	d0ec      	beq.n	7b90 <flash_area_write+0x30>
    7bb6:	e7f6      	b.n	7ba6 <flash_area_write+0x46>
		(void) api->write_protection(dev, true);
    7bb8:	2101      	movs	r1, #1
    7bba:	4628      	mov	r0, r5
    7bbc:	4798      	blx	r3
    7bbe:	e7f2      	b.n	7ba6 <flash_area_write+0x46>
		return -EINVAL;
    7bc0:	f06f 0415 	mvn.w	r4, #21
    7bc4:	e7ef      	b.n	7ba6 <flash_area_write+0x46>

00007bc6 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    7bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off >= 0) && ((off + len) <= fa->fa_size);
    7bca:	1e0c      	subs	r4, r1, #0
{
    7bcc:	4605      	mov	r5, r0
    7bce:	4617      	mov	r7, r2
	return (off >= 0) && ((off + len) <= fa->fa_size);
    7bd0:	db25      	blt.n	7c1e <flash_area_erase+0x58>
    7bd2:	18a3      	adds	r3, r4, r2
    7bd4:	6882      	ldr	r2, [r0, #8]
    7bd6:	4293      	cmp	r3, r2
    7bd8:	d821      	bhi.n	7c1e <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    7bda:	68c0      	ldr	r0, [r0, #12]
    7bdc:	f7ff ff81 	bl	7ae2 <device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    7be0:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    7be2:	4606      	mov	r6, r0
	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    7be4:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    7be6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    7bea:	f8d8 300c 	ldr.w	r3, [r8, #12]
    7bee:	b963      	cbnz	r3, 7c0a <flash_area_erase+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    7bf0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7bf4:	463a      	mov	r2, r7
    7bf6:	4629      	mov	r1, r5
    7bf8:	4630      	mov	r0, r6
    7bfa:	4798      	blx	r3

	if (api->write_protection != NULL) {
    7bfc:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    7c00:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    7c02:	b943      	cbnz	r3, 7c16 <flash_area_erase+0x50>

	return rc;
}
    7c04:	4620      	mov	r0, r4
    7c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    7c0a:	2100      	movs	r1, #0
    7c0c:	4798      	blx	r3
		if (rc) {
    7c0e:	4604      	mov	r4, r0
    7c10:	2800      	cmp	r0, #0
    7c12:	d0ed      	beq.n	7bf0 <flash_area_erase+0x2a>
    7c14:	e7f6      	b.n	7c04 <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
    7c16:	2101      	movs	r1, #1
    7c18:	4630      	mov	r0, r6
    7c1a:	4798      	blx	r3
    7c1c:	e7f2      	b.n	7c04 <flash_area_erase+0x3e>
		return -EINVAL;
    7c1e:	f06f 0415 	mvn.w	r4, #21
    7c22:	e7ef      	b.n	7c04 <flash_area_erase+0x3e>

00007c24 <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    7c24:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    7c26:	68c0      	ldr	r0, [r0, #12]
    7c28:	f7ff ff5b 	bl	7ae2 <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    7c2c:	6883      	ldr	r3, [r0, #8]
    7c2e:	691b      	ldr	r3, [r3, #16]
    7c30:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    7c32:	7800      	ldrb	r0, [r0, #0]
    7c34:	bd08      	pop	{r3, pc}

00007c36 <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    7c36:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    7c38:	68c0      	ldr	r0, [r0, #12]
    7c3a:	f7ff ff52 	bl	7ae2 <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    7c3e:	6883      	ldr	r3, [r0, #8]
    7c40:	691b      	ldr	r3, [r3, #16]
    7c42:	4798      	blx	r3

	return param->erase_value;
}
    7c44:	7900      	ldrb	r0, [r0, #4]
    7c46:	bd08      	pop	{r3, pc}

00007c48 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    7c48:	2200      	movs	r2, #0
    7c4a:	e9c0 2200 	strd	r2, r2, [r0]
    7c4e:	6082      	str	r2, [r0, #8]
}
    7c50:	4770      	bx	lr

00007c52 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7c52:	220c      	movs	r2, #12
    7c54:	6903      	ldr	r3, [r0, #16]
    7c56:	b2c9      	uxtb	r1, r1
    7c58:	fb01 3302 	mla	r3, r1, r2, r3
    7c5c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    7c5e:	f000 0007 	and.w	r0, r0, #7
    7c62:	4770      	bx	lr

00007c64 <set_on_state>:
	__asm__ volatile(
    7c64:	f04f 0320 	mov.w	r3, #32
    7c68:	f3ef 8211 	mrs	r2, BASEPRI
    7c6c:	f383 8811 	msr	BASEPRI, r3
    7c70:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7c74:	6803      	ldr	r3, [r0, #0]
    7c76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7c7a:	f043 0302 	orr.w	r3, r3, #2
    7c7e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7c80:	f382 8811 	msr	BASEPRI, r2
    7c84:	f3bf 8f6f 	isb	sy
}
    7c88:	4770      	bx	lr

00007c8a <stop>:
{
    7c8a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    7c8c:	6903      	ldr	r3, [r0, #16]
	return &data->subsys[type];
    7c8e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7c90:	f04f 0420 	mov.w	r4, #32
    7c94:	f3ef 8511 	mrs	r5, BASEPRI
    7c98:	f384 8811 	msr	BASEPRI, r4
    7c9c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7ca0:	260c      	movs	r6, #12
    7ca2:	fb06 3401 	mla	r4, r6, r1, r3
    7ca6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    7ca8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    7cac:	d008      	beq.n	7cc0 <stop+0x36>
    7cae:	42a2      	cmp	r2, r4
    7cb0:	d006      	beq.n	7cc0 <stop+0x36>
	__asm__ volatile(
    7cb2:	f385 8811 	msr	BASEPRI, r5
    7cb6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    7cba:	f04f 30ff 	mov.w	r0, #4294967295
}
    7cbe:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    7cc0:	2201      	movs	r2, #1
    7cc2:	4371      	muls	r1, r6
    7cc4:	440b      	add	r3, r1
    7cc6:	641a      	str	r2, [r3, #64]	; 0x40
    7cc8:	f385 8811 	msr	BASEPRI, r5
    7ccc:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    7cd0:	6843      	ldr	r3, [r0, #4]
    7cd2:	440b      	add	r3, r1
    7cd4:	685b      	ldr	r3, [r3, #4]
    7cd6:	4798      	blx	r3
	return 0;
    7cd8:	2000      	movs	r0, #0
    7cda:	e7f0      	b.n	7cbe <stop+0x34>

00007cdc <api_stop>:
	return stop(dev, subsys, CTX_API);
    7cdc:	2280      	movs	r2, #128	; 0x80
    7cde:	f7ff bfd4 	b.w	7c8a <stop>

00007ce2 <async_start>:
{
    7ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ce4:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    7ce6:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    7ce8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7cea:	f04f 0520 	mov.w	r5, #32
    7cee:	f3ef 8611 	mrs	r6, BASEPRI
    7cf2:	f385 8811 	msr	BASEPRI, r5
    7cf6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7cfa:	250c      	movs	r5, #12
    7cfc:	4369      	muls	r1, r5
    7cfe:	440c      	add	r4, r1
    7d00:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7d02:	f005 0c07 	and.w	ip, r5, #7
    7d06:	f1bc 0f01 	cmp.w	ip, #1
    7d0a:	d10b      	bne.n	7d24 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7d0c:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    7d0e:	f386 8811 	msr	BASEPRI, r6
    7d12:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    7d16:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    7d1a:	6843      	ldr	r3, [r0, #4]
    7d1c:	585b      	ldr	r3, [r3, r1]
    7d1e:	4798      	blx	r3
	return 0;
    7d20:	2000      	movs	r0, #0
}
    7d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7d24:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7d28:	42af      	cmp	r7, r5
    7d2a:	f386 8811 	msr	BASEPRI, r6
    7d2e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    7d32:	bf0c      	ite	eq
    7d34:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    7d38:	f04f 30ff 	movne.w	r0, #4294967295
    7d3c:	e7f1      	b.n	7d22 <async_start+0x40>

00007d3e <api_start>:
{
    7d3e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7d40:	2480      	movs	r4, #128	; 0x80
    7d42:	9400      	str	r4, [sp, #0]
    7d44:	f7ff ffcd 	bl	7ce2 <async_start>
}
    7d48:	b002      	add	sp, #8
    7d4a:	bd10      	pop	{r4, pc}

00007d4c <onoff_started_callback>:
{
    7d4c:	b410      	push	{r4}
	notify(mgr, 0);
    7d4e:	241c      	movs	r4, #28
	return &data->mgr[type];
    7d50:	6900      	ldr	r0, [r0, #16]
    7d52:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7d54:	fb03 0004 	mla	r0, r3, r4, r0
    7d58:	2100      	movs	r1, #0
}
    7d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    7d5e:	4710      	bx	r2

00007d60 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7d60:	2000      	movs	r0, #0
    7d62:	f000 bdd6 	b.w	8912 <nrfx_clock_start>

00007d66 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7d66:	2000      	movs	r0, #0
    7d68:	f000 be03 	b.w	8972 <nrfx_clock_stop>

00007d6c <blocking_start_callback>:
{
    7d6c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7d6e:	f7fd b935 	b.w	4fdc <z_impl_k_sem_give>

00007d72 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    7d72:	4770      	bx	lr

00007d74 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7d74:	4770      	bx	lr

00007d76 <sys_clock_disable>:

void __weak sys_clock_disable(void)
    7d76:	4770      	bx	lr

00007d78 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    7d78:	2000      	movs	r0, #0
    7d7a:	f7f9 bfe7 	b.w	1d4c <sys_reboot>

00007d7e <console_write>:
{
    7d7e:	b570      	push	{r4, r5, r6, lr}
    7d80:	4606      	mov	r6, r0
    7d82:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    7d84:	2400      	movs	r4, #0
    7d86:	42ac      	cmp	r4, r5
    7d88:	db00      	blt.n	7d8c <console_write+0xe>
}
    7d8a:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    7d8c:	5d30      	ldrb	r0, [r6, r4]
    7d8e:	f7fa fc73 	bl	2678 <console_out>
    7d92:	3001      	adds	r0, #1
    7d94:	d0f9      	beq.n	7d8a <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    7d96:	3401      	adds	r4, #1
    7d98:	e7f5      	b.n	7d86 <console_write+0x8>

00007d9a <u32toa>:
{
    7d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t d = 1;
    7d9c:	2301      	movs	r3, #1
        d *= 10;
    7d9e:	240a      	movs	r4, #10
    while (val / d >= 10) {
    7da0:	fbb1 f2f3 	udiv	r2, r1, r3
    7da4:	2a09      	cmp	r2, #9
    7da6:	d806      	bhi.n	7db6 <u32toa+0x1c>
    dst = tgt;
    7da8:	4602      	mov	r2, r0
    int n = 0;
    7daa:	2500      	movs	r5, #0
        d /= 10;
    7dac:	260a      	movs	r6, #10
    while (d) {
    7dae:	b923      	cbnz	r3, 7dba <u32toa+0x20>
    *dst = '\0';
    7db0:	7013      	strb	r3, [r2, #0]
}
    7db2:	1a10      	subs	r0, r2, r0
    7db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= 10;
    7db6:	4363      	muls	r3, r4
    7db8:	e7f2      	b.n	7da0 <u32toa+0x6>
        dgt = val / d;
    7dba:	fbb1 f4f3 	udiv	r4, r1, r3
        d /= 10;
    7dbe:	fbb3 fcf6 	udiv	ip, r3, r6
        val %= d;
    7dc2:	fb03 1714 	mls	r7, r3, r4, r1
        if (n || dgt > 0 || d == 0) {
    7dc6:	b91d      	cbnz	r5, 7dd0 <u32toa+0x36>
    7dc8:	4299      	cmp	r1, r3
    7dca:	d201      	bcs.n	7dd0 <u32toa+0x36>
    7dcc:	2b09      	cmp	r3, #9
    7dce:	d803      	bhi.n	7dd8 <u32toa+0x3e>
            *dst++ = dgt + '0';
    7dd0:	3430      	adds	r4, #48	; 0x30
    7dd2:	f802 4b01 	strb.w	r4, [r2], #1
            ++n;
    7dd6:	3501      	adds	r5, #1
            *dst++ = dgt + '0';
    7dd8:	4663      	mov	r3, ip
    7dda:	4639      	mov	r1, r7
    7ddc:	e7e7      	b.n	7dae <u32toa+0x14>

00007dde <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(cbor_state_t *state,
		void *const result, uint32_t result_len)
{
    7dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cbor_trace();
	cbor_assert(result_len != 0, "0-length result not supported.\n");
	cbor_assert(result != NULL, NULL);

	FAIL_IF((state->elem_count == 0) \
    7de0:	6883      	ldr	r3, [r0, #8]
{
    7de2:	4604      	mov	r4, r0
    7de4:	460d      	mov	r5, r1
    7de6:	4617      	mov	r7, r2
	FAIL_IF((state->elem_count == 0) \
    7de8:	b303      	cbz	r3, 7e2c <value_extract+0x4e>
    7dea:	6803      	ldr	r3, [r0, #0]
    7dec:	68c1      	ldr	r1, [r0, #12]
    7dee:	428b      	cmp	r3, r1
    7df0:	d21c      	bcs.n	7e2c <value_extract+0x4e>
		|| (state->payload >= state->payload_end));

	uint8_t *u8_result  = (uint8_t *)result;
	uint8_t additional = ADDITIONAL(*state->payload);
    7df2:	781e      	ldrb	r6, [r3, #0]

	state->payload_bak = state->payload;
    7df4:	6043      	str	r3, [r0, #4]
	(state->payload)++;
    7df6:	3301      	adds	r3, #1
    7df8:	6003      	str	r3, [r0, #0]

	memset(result, 0, result_len);
    7dfa:	2100      	movs	r1, #0
    7dfc:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*state->payload);
    7dfe:	f006 061f 	and.w	r6, r6, #31
	memset(result, 0, result_len);
    7e02:	f000 fa7b 	bl	82fc <memset>
	if (additional <= VALUE_IN_HEADER) {
    7e06:	2e17      	cmp	r6, #23
    7e08:	d805      	bhi.n	7e16 <value_extract+0x38>
#ifdef CONFIG_BIG_ENDIAN
		u8_result[result_len - 1] = additional;
#else
		u8_result[0] = additional;
    7e0a:	702e      	strb	r6, [r5, #0]
#endif /* CONFIG_BIG_ENDIAN */

		(state->payload) += len;
	}

	(state->elem_count)--;
    7e0c:	68a3      	ldr	r3, [r4, #8]
	return true;
    7e0e:	2001      	movs	r0, #1
	(state->elem_count)--;
    7e10:	3b01      	subs	r3, #1
    7e12:	60a3      	str	r3, [r4, #8]
	return true;
    7e14:	e00b      	b.n	7e2e <value_extract+0x50>
	if (24 <= additional && additional <= 27) {
    7e16:	3e18      	subs	r6, #24
    7e18:	b2f3      	uxtb	r3, r6
    7e1a:	2b03      	cmp	r3, #3
		FAIL_AND_DECR_IF(len > result_len);
    7e1c:	6821      	ldr	r1, [r4, #0]
	if (24 <= additional && additional <= 27) {
    7e1e:	d807      	bhi.n	7e30 <value_extract+0x52>
		return 1 << (additional - 24);
    7e20:	2301      	movs	r3, #1
    7e22:	40b3      	lsls	r3, r6
		FAIL_AND_DECR_IF(len > result_len);
    7e24:	429f      	cmp	r7, r3
    7e26:	d204      	bcs.n	7e32 <value_extract+0x54>
    7e28:	3901      	subs	r1, #1
    7e2a:	6021      	str	r1, [r4, #0]
	FAIL_IF((state->elem_count == 0) \
    7e2c:	2000      	movs	r0, #0
}
    7e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
    7e30:	2300      	movs	r3, #0
		FAIL_AND_DECR_IF((state->payload + len)
    7e32:	68e0      	ldr	r0, [r4, #12]
    7e34:	18ca      	adds	r2, r1, r3
    7e36:	4290      	cmp	r0, r2
    7e38:	d3f6      	bcc.n	7e28 <value_extract+0x4a>
    7e3a:	1e59      	subs	r1, r3, #1
    7e3c:	3d01      	subs	r5, #1
		for (uint32_t i = 0; i < len; i++) {
    7e3e:	1c48      	adds	r0, r1, #1
			u8_result[i] = (state->payload)[len - i - 1];
    7e40:	6822      	ldr	r2, [r4, #0]
		for (uint32_t i = 0; i < len; i++) {
    7e42:	d102      	bne.n	7e4a <value_extract+0x6c>
		(state->payload) += len;
    7e44:	441a      	add	r2, r3
    7e46:	6022      	str	r2, [r4, #0]
    7e48:	e7e0      	b.n	7e0c <value_extract+0x2e>
			u8_result[i] = (state->payload)[len - i - 1];
    7e4a:	5c52      	ldrb	r2, [r2, r1]
    7e4c:	3901      	subs	r1, #1
    7e4e:	f805 2f01 	strb.w	r2, [r5, #1]!
		for (uint32_t i = 0; i < len; i++) {
    7e52:	e7f4      	b.n	7e3e <value_extract+0x60>

00007e54 <strx_start_decode>:
}


static bool strx_start_decode(cbor_state_t *state,
		cbor_string_type_t *result, cbor_major_type_t exp_major_type)
{
    7e54:	b538      	push	{r3, r4, r5, lr}
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    7e56:	6803      	ldr	r3, [r0, #0]
{
    7e58:	4604      	mov	r4, r0
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    7e5a:	781b      	ldrb	r3, [r3, #0]
{
    7e5c:	460d      	mov	r5, r1

	if (major_type != exp_major_type) {
    7e5e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
    7e62:	d10f      	bne.n	7e84 <strx_start_decode+0x30>
	if (!value_extract(state, result, 4)) {
    7e64:	2204      	movs	r2, #4
    7e66:	4411      	add	r1, r2
    7e68:	f7ff ffb9 	bl	7dde <value_extract>
		FAIL();
	}

	if (!uint32_decode(state, &result->len)) {
    7e6c:	b150      	cbz	r0, 7e84 <strx_start_decode+0x30>
		FAIL();
	}

	if ((state->payload + result->len) > state->payload_end) {
    7e6e:	6822      	ldr	r2, [r4, #0]
    7e70:	686b      	ldr	r3, [r5, #4]
    7e72:	68e1      	ldr	r1, [r4, #12]
    7e74:	4413      	add	r3, r2
    7e76:	4299      	cmp	r1, r3
    7e78:	d206      	bcs.n	7e88 <strx_start_decode+0x34>
		cbor_print("error: 0x%x > 0x%x\r\n",
		(uint32_t)(state->payload + result->len),
		(uint32_t)state->payload_end);
		FAIL_RESTORE();
    7e7a:	6863      	ldr	r3, [r4, #4]
    7e7c:	6023      	str	r3, [r4, #0]
    7e7e:	68a3      	ldr	r3, [r4, #8]
    7e80:	3301      	adds	r3, #1
    7e82:	60a3      	str	r3, [r4, #8]
		FAIL();
    7e84:	2000      	movs	r0, #0
	}

	result->value = state->payload;
	return true;
}
    7e86:	bd38      	pop	{r3, r4, r5, pc}
	result->value = state->payload;
    7e88:	602a      	str	r2, [r5, #0]
	return true;
    7e8a:	e7fc      	b.n	7e86 <strx_start_decode+0x32>

00007e8c <list_map_start_decode>:
}


static bool list_map_start_decode(cbor_state_t *state,
		cbor_major_type_t exp_major_type)
{
    7e8c:	b513      	push	{r0, r1, r4, lr}
	uint32_t new_elem_count;
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    7e8e:	6803      	ldr	r3, [r0, #0]
{
    7e90:	4604      	mov	r4, r0
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    7e92:	781b      	ldrb	r3, [r3, #0]

	if (major_type != exp_major_type) {
    7e94:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    7e98:	d10f      	bne.n	7eba <list_map_start_decode+0x2e>
	if (!value_extract(state, result, 4)) {
    7e9a:	2204      	movs	r2, #4
    7e9c:	eb0d 0102 	add.w	r1, sp, r2
    7ea0:	f7ff ff9d 	bl	7dde <value_extract>
		FAIL();
	}

	if (!uint32_decode(state, &new_elem_count)) {
    7ea4:	b148      	cbz	r0, 7eba <list_map_start_decode+0x2e>
		FAIL();
	}

	if (!new_backup(state, new_elem_count)) {
    7ea6:	4620      	mov	r0, r4
    7ea8:	9901      	ldr	r1, [sp, #4]
    7eaa:	f000 f94e 	bl	814a <new_backup>
    7eae:	b928      	cbnz	r0, 7ebc <list_map_start_decode+0x30>
		FAIL_RESTORE();
    7eb0:	6863      	ldr	r3, [r4, #4]
    7eb2:	6023      	str	r3, [r4, #0]
    7eb4:	68a3      	ldr	r3, [r4, #8]
    7eb6:	3301      	adds	r3, #1
    7eb8:	60a3      	str	r3, [r4, #8]
		FAIL();
    7eba:	2000      	movs	r0, #0
	}

	return true;
}
    7ebc:	b002      	add	sp, #8
    7ebe:	bd10      	pop	{r4, pc}

00007ec0 <intx32_decode>:
{
    7ec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    7ec2:	6803      	ldr	r3, [r0, #0]
{
    7ec4:	4604      	mov	r4, r0
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    7ec6:	781b      	ldrb	r3, [r3, #0]
{
    7ec8:	460d      	mov	r5, r1
	if (major_type != CBOR_MAJOR_TYPE_PINT
    7eca:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    7ecc:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != CBOR_MAJOR_TYPE_PINT
    7ed0:	d80d      	bhi.n	7eee <intx32_decode+0x2e>
	if (!value_extract(state, &uint_result, 4)) {
    7ed2:	2204      	movs	r2, #4
    7ed4:	eb0d 0102 	add.w	r1, sp, r2
    7ed8:	f7ff ff81 	bl	7dde <value_extract>
    7edc:	b138      	cbz	r0, 7eee <intx32_decode+0x2e>
	if (uint_result >= (1 << (8*sizeof(uint_result)-1))) {
    7ede:	9b01      	ldr	r3, [sp, #4]
    7ee0:	2b00      	cmp	r3, #0
    7ee2:	da07      	bge.n	7ef4 <intx32_decode+0x34>
		FAIL_RESTORE();
    7ee4:	6863      	ldr	r3, [r4, #4]
    7ee6:	6023      	str	r3, [r4, #0]
    7ee8:	68a3      	ldr	r3, [r4, #8]
    7eea:	3301      	adds	r3, #1
    7eec:	60a3      	str	r3, [r4, #8]
		FAIL();
    7eee:	2000      	movs	r0, #0
}
    7ef0:	b002      	add	sp, #8
    7ef2:	bd70      	pop	{r4, r5, r6, pc}
	if (major_type == CBOR_MAJOR_TYPE_NINT) {
    7ef4:	2e01      	cmp	r6, #1
		int_result = -1 - uint_result;
    7ef6:	bf08      	it	eq
    7ef8:	43db      	mvneq	r3, r3
	*result = int_result;
    7efa:	602b      	str	r3, [r5, #0]
	return true;
    7efc:	e7f8      	b.n	7ef0 <intx32_decode+0x30>

00007efe <strx_decode>:
{
    7efe:	b538      	push	{r3, r4, r5, lr}
    7f00:	4604      	mov	r4, r0
    7f02:	460d      	mov	r5, r1
	if (!strx_start_decode(state, result, exp_major_type)) {
    7f04:	f7ff ffa6 	bl	7e54 <strx_start_decode>
    7f08:	b118      	cbz	r0, 7f12 <strx_decode+0x14>
	(state->payload) += result->len;
    7f0a:	6823      	ldr	r3, [r4, #0]
    7f0c:	686a      	ldr	r2, [r5, #4]
    7f0e:	4413      	add	r3, r2
    7f10:	6023      	str	r3, [r4, #0]
}
    7f12:	bd38      	pop	{r3, r4, r5, pc}

00007f14 <strx_expect>:
{
    7f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7f16:	460e      	mov	r6, r1
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    7f18:	4669      	mov	r1, sp
{
    7f1a:	4604      	mov	r4, r0
	if (!strx_decode(state, &tmp_result, exp_major_type)) {
    7f1c:	f7ff ffef 	bl	7efe <strx_decode>
    7f20:	4605      	mov	r5, r0
    7f22:	b140      	cbz	r0, 7f36 <strx_expect+0x22>
	if ((tmp_result.len != result->len)
    7f24:	9a01      	ldr	r2, [sp, #4]
    7f26:	6873      	ldr	r3, [r6, #4]
    7f28:	429a      	cmp	r2, r3
    7f2a:	d008      	beq.n	7f3e <strx_expect+0x2a>
		FAIL_RESTORE();
    7f2c:	6863      	ldr	r3, [r4, #4]
    7f2e:	6023      	str	r3, [r4, #0]
    7f30:	68a3      	ldr	r3, [r4, #8]
    7f32:	3301      	adds	r3, #1
    7f34:	60a3      	str	r3, [r4, #8]
		FAIL();
    7f36:	2500      	movs	r5, #0
}
    7f38:	4628      	mov	r0, r5
    7f3a:	b002      	add	sp, #8
    7f3c:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    7f3e:	9900      	ldr	r1, [sp, #0]
    7f40:	6830      	ldr	r0, [r6, #0]
    7f42:	f000 f9a9 	bl	8298 <memcmp>
    7f46:	2800      	cmp	r0, #0
    7f48:	d0f6      	beq.n	7f38 <strx_expect+0x24>
    7f4a:	e7ef      	b.n	7f2c <strx_expect+0x18>

00007f4c <bstrx_decode>:
	return strx_decode(state, result, CBOR_MAJOR_TYPE_BSTR);
    7f4c:	2202      	movs	r2, #2
    7f4e:	f7ff bfd6 	b.w	7efe <strx_decode>

00007f52 <tstrx_expect>:
	return strx_expect(state, result, CBOR_MAJOR_TYPE_TSTR);
    7f52:	2203      	movs	r2, #3
    7f54:	f7ff bfde 	b.w	7f14 <strx_expect>

00007f58 <map_start_decode>:
	return list_map_start_decode(state, CBOR_MAJOR_TYPE_LIST);
}


bool map_start_decode(cbor_state_t *state)
{
    7f58:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    7f5a:	2105      	movs	r1, #5
{
    7f5c:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, CBOR_MAJOR_TYPE_MAP);
    7f5e:	f7ff ff95 	bl	7e8c <list_map_start_decode>

	if (ret) {
    7f62:	b110      	cbz	r0, 7f6a <map_start_decode+0x12>
		state->elem_count *= 2;
    7f64:	68a3      	ldr	r3, [r4, #8]
    7f66:	005b      	lsls	r3, r3, #1
    7f68:	60a3      	str	r3, [r4, #8]
	}
	return ret;
}
    7f6a:	bd10      	pop	{r4, pc}

00007f6c <list_map_end_decode>:


bool list_map_end_decode(cbor_state_t *state)
{
	if (!restore_backup(state,
    7f6c:	2200      	movs	r2, #0
    7f6e:	2107      	movs	r1, #7
    7f70:	f000 b901 	b.w	8176 <restore_backup>

00007f74 <map_end_decode>:
{
	return list_map_end_decode(state);
}


bool map_end_decode(cbor_state_t *state)
    7f74:	f7ff bffa 	b.w	7f6c <list_map_end_decode>

00007f78 <multi_decode>:
		uint32_t *num_decode,
		cbor_decoder_t decoder,
		cbor_state_t *state,
		void *result,
		uint32_t result_len)
{
    7f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f7c:	4682      	mov	sl, r0
    7f7e:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
    7f82:	4688      	mov	r8, r1
    7f84:	4616      	mov	r6, r2
    7f86:	469b      	mov	fp, r3
	for (uint32_t i = 0; i < max_decode; i++) {
    7f88:	2400      	movs	r4, #0
    7f8a:	4544      	cmp	r4, r8
    7f8c:	d102      	bne.n	7f94 <multi_decode+0x1c>
			if (i < min_decode) {
				FAIL();
			} else {
				cbor_print("Found %zu elements.\n", i);
			}
			return true;
    7f8e:	2001      	movs	r0, #1
		}
	}
	cbor_print("Found %zu elements.\n", max_decode);
	*num_decode = max_decode;
    7f90:	6034      	str	r4, [r6, #0]
	return true;
    7f92:	e012      	b.n	7fba <multi_decode+0x42>
		uint8_t const *payload_bak = state->payload;
    7f94:	682a      	ldr	r2, [r5, #0]
		if (!decoder(state,
    7f96:	4639      	mov	r1, r7
    7f98:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    7f9a:	9201      	str	r2, [sp, #4]
		uint32_t elem_count_bak = state->elem_count;
    7f9c:	f8d5 9008 	ldr.w	r9, [r5, #8]
		if (!decoder(state,
    7fa0:	47d8      	blx	fp
    7fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7fa4:	9a01      	ldr	r2, [sp, #4]
    7fa6:	441f      	add	r7, r3
    7fa8:	b950      	cbnz	r0, 7fc0 <multi_decode+0x48>
			if (i < min_decode) {
    7faa:	4554      	cmp	r4, sl
    7fac:	bf34      	ite	cc
    7fae:	2000      	movcc	r0, #0
    7fb0:	2001      	movcs	r0, #1
			*num_decode = i;
    7fb2:	6034      	str	r4, [r6, #0]
			state->payload = payload_bak;
    7fb4:	602a      	str	r2, [r5, #0]
			state->elem_count = elem_count_bak;
    7fb6:	f8c5 9008 	str.w	r9, [r5, #8]
}
    7fba:	b003      	add	sp, #12
    7fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint32_t i = 0; i < max_decode; i++) {
    7fc0:	3401      	adds	r4, #1
    7fc2:	e7e2      	b.n	7f8a <multi_decode+0x12>

00007fc4 <get_result_len>:
static uint32_t get_result_len(const void *const input, uint32_t max_result_len)
{
	uint8_t *u8_result  = (uint8_t *)input;
	size_t i;

	for (i = 0; i < max_result_len; i++) {
    7fc4:	2200      	movs	r2, #0
{
    7fc6:	b510      	push	{r4, lr}
    7fc8:	4603      	mov	r3, r0
    7fca:	4408      	add	r0, r1
#ifdef CONFIG_BIG_ENDIAN
		size_t idx = i;
#else
		size_t idx = max_result_len - 1 - i;
#endif
		if (u8_result[idx] != 0) {
    7fcc:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
    7fd0:	b144      	cbz	r4, 7fe4 <get_result_len+0x20>
			break;
		}
	}
	max_result_len -= i;
    7fd2:	1a88      	subs	r0, r1, r2
	 */
	cbor_assert(max_result_len <= 8, "Up to 8 bytes can be used to encode length.\n");
	size_t encode_byte_cnt = 1;

	for (size_t i = 0; i <= 3; i++) {
		if (max_result_len <= encode_byte_cnt) {
    7fd4:	2801      	cmp	r0, #1
    7fd6:	d809      	bhi.n	7fec <get_result_len+0x28>
		}

		encode_byte_cnt *= 2;
	}

	if ((max_result_len == 1) && (u8_result[0] <= VALUE_IN_HEADER)) {
    7fd8:	7818      	ldrb	r0, [r3, #0]
    7fda:	2817      	cmp	r0, #23
    7fdc:	bf94      	ite	ls
    7fde:	2000      	movls	r0, #0
    7fe0:	2001      	movhi	r0, #1
		max_result_len = 0;
	}

	return max_result_len;
    7fe2:	e00a      	b.n	7ffa <get_result_len+0x36>
	for (i = 0; i < max_result_len; i++) {
    7fe4:	3201      	adds	r2, #1
    7fe6:	4291      	cmp	r1, r2
    7fe8:	d1f0      	bne.n	7fcc <get_result_len+0x8>
    7fea:	e7f5      	b.n	7fd8 <get_result_len+0x14>
		if (max_result_len <= encode_byte_cnt) {
    7fec:	2802      	cmp	r0, #2
    7fee:	d004      	beq.n	7ffa <get_result_len+0x36>
    7ff0:	2804      	cmp	r0, #4
    7ff2:	d903      	bls.n	7ffc <get_result_len+0x38>
		encode_byte_cnt *= 2;
    7ff4:	2808      	cmp	r0, #8
    7ff6:	bf38      	it	cc
    7ff8:	2008      	movcc	r0, #8
}
    7ffa:	bd10      	pop	{r4, pc}
		encode_byte_cnt *= 2;
    7ffc:	2004      	movs	r0, #4
	if ((max_result_len == 1) && (u8_result[0] <= VALUE_IN_HEADER)) {
    7ffe:	e7fc      	b.n	7ffa <get_result_len+0x36>

00008000 <get_additional>:
	switch(len) {
    8000:	2808      	cmp	r0, #8
    8002:	d80e      	bhi.n	8022 <get_additional+0x22>
    8004:	e8df f000 	tbb	[pc, r0]
    8008:	07070f05 	.word	0x07070f05
    800c:	09090909 	.word	0x09090909
    8010:	0b          	.byte	0x0b
    8011:	00          	.byte	0x00
		case 0: return value0;
    8012:	4608      	mov	r0, r1
    8014:	4770      	bx	lr
		case 2: return 25;
    8016:	2019      	movs	r0, #25
    8018:	4770      	bx	lr
		case 4: return 26;
    801a:	201a      	movs	r0, #26
    801c:	4770      	bx	lr
		case 8: return 27;
    801e:	201b      	movs	r0, #27
    8020:	4770      	bx	lr
	return 0;
    8022:	2000      	movs	r0, #0
    8024:	4770      	bx	lr
	switch(len) {
    8026:	2018      	movs	r0, #24
}
    8028:	4770      	bx	lr

0000802a <value_encode>:


static bool value_encode(cbor_state_t *state, cbor_major_type_t major_type,
		const void *const input, uint32_t max_result_len)
{
    802a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    802e:	4604      	mov	r4, r0
    8030:	460f      	mov	r7, r1
	cbor_assert(max_result_len != 0, "0-length result not supported.\n");
	return value_encode_len(state, major_type, input,
    8032:	4610      	mov	r0, r2
    8034:	4619      	mov	r1, r3
{
    8036:	4616      	mov	r6, r2
	return value_encode_len(state, major_type, input,
    8038:	f7ff ffc4 	bl	7fc4 <get_result_len>
	if ((state->payload + 1 + result_len) > state->payload_end) {
    803c:	6822      	ldr	r2, [r4, #0]
    803e:	68e1      	ldr	r1, [r4, #12]
    8040:	1c43      	adds	r3, r0, #1
    8042:	4413      	add	r3, r2
    8044:	4299      	cmp	r1, r3
	return value_encode_len(state, major_type, input,
    8046:	4605      	mov	r5, r0
	if ((state->payload + 1 + result_len) > state->payload_end) {
    8048:	d31d      	bcc.n	8086 <value_encode+0x5c>
	if ((state->payload + 1) > state->payload_end) {
    804a:	f102 0801 	add.w	r8, r2, #1
    804e:	4541      	cmp	r1, r8
    8050:	d319      	bcc.n	8086 <value_encode+0x5c>
	if (!encode_header_byte(state, major_type,
    8052:	7831      	ldrb	r1, [r6, #0]
    8054:	f7ff ffd4 	bl	8000 <get_additional>
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    8058:	f000 001f 	and.w	r0, r0, #31
    805c:	ea40 1147 	orr.w	r1, r0, r7, lsl #5
    8060:	f8c4 8000 	str.w	r8, [r4]
    8064:	1970      	adds	r0, r6, r5
    8066:	7011      	strb	r1, [r2, #0]
	for (; result_len > 0; result_len--) {
    8068:	4286      	cmp	r6, r0
    806a:	d105      	bne.n	8078 <value_encode+0x4e>
	return true;
    806c:	2001      	movs	r0, #1
	state->elem_count++;
    806e:	68a3      	ldr	r3, [r4, #8]
    8070:	3301      	adds	r3, #1
    8072:	60a3      	str	r3, [r4, #8]
				get_result_len(input, max_result_len));
}
    8074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*(state->payload_mut++) = u8_result[result_len - 1];
    8078:	6823      	ldr	r3, [r4, #0]
    807a:	1c5a      	adds	r2, r3, #1
    807c:	6022      	str	r2, [r4, #0]
    807e:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
    8082:	701a      	strb	r2, [r3, #0]
	for (; result_len > 0; result_len--) {
    8084:	e7f0      	b.n	8068 <value_encode+0x3e>
		FAIL();
    8086:	2000      	movs	r0, #0
    8088:	e7f4      	b.n	8074 <value_encode+0x4a>

0000808a <strx_encode>:
}


static bool strx_encode(cbor_state_t *state,
		const cbor_string_type_t *input, cbor_major_type_t major_type)
{
    808a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    808c:	460e      	mov	r6, r1
    808e:	f856 3b04 	ldr.w	r3, [r6], #4
{
    8092:	4604      	mov	r4, r0
    8094:	460d      	mov	r5, r1
    8096:	4617      	mov	r7, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    8098:	b173      	cbz	r3, 80b8 <strx_encode+0x2e>
    809a:	2104      	movs	r1, #4
    809c:	4630      	mov	r0, r6
    809e:	f7ff ff91 	bl	7fc4 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    80a2:	686b      	ldr	r3, [r5, #4]
    80a4:	1c5a      	adds	r2, r3, #1
    80a6:	6823      	ldr	r3, [r4, #0]
    80a8:	4413      	add	r3, r2
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    80aa:	68e2      	ldr	r2, [r4, #12]
			+ 1 + input->len + (size_t)state->payload)
    80ac:	4403      	add	r3, r0
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    80ae:	429a      	cmp	r2, r3
    80b0:	d202      	bcs.n	80b8 <strx_encode+0x2e>
	if (!strx_start_encode(state, input, major_type)) {
		FAIL();
    80b2:	2600      	movs	r6, #0
	if (state->payload_mut != input->value) {
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    80b4:	4630      	mov	r0, r6
    80b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!value_encode(state, major_type, input, 4)) {
    80b8:	4632      	mov	r2, r6
    80ba:	2304      	movs	r3, #4
    80bc:	4639      	mov	r1, r7
    80be:	4620      	mov	r0, r4
    80c0:	f7ff ffb3 	bl	802a <value_encode>
	if (!uint32_encode(state, &input->len, major_type)) {
    80c4:	4606      	mov	r6, r0
    80c6:	2800      	cmp	r0, #0
    80c8:	d0f3      	beq.n	80b2 <strx_encode+0x28>
	if (state->payload_mut != input->value) {
    80ca:	6820      	ldr	r0, [r4, #0]
    80cc:	6829      	ldr	r1, [r5, #0]
    80ce:	4288      	cmp	r0, r1
    80d0:	d002      	beq.n	80d8 <strx_encode+0x4e>
		memmove(state->payload_mut, input->value, input->len);
    80d2:	686a      	ldr	r2, [r5, #4]
    80d4:	f000 f8f0 	bl	82b8 <memmove>
	state->payload += input->len;
    80d8:	6823      	ldr	r3, [r4, #0]
    80da:	686a      	ldr	r2, [r5, #4]
    80dc:	4413      	add	r3, r2
    80de:	6023      	str	r3, [r4, #0]
	return true;
    80e0:	e7e8      	b.n	80b4 <strx_encode+0x2a>

000080e2 <uintx32_put>:
	if (!value_encode(state, major_type, input, 4)) {
    80e2:	2304      	movs	r3, #4
{
    80e4:	b507      	push	{r0, r1, r2, lr}
    80e6:	9101      	str	r1, [sp, #4]
	if (!value_encode(state, major_type, input, 4)) {
    80e8:	eb0d 0203 	add.w	r2, sp, r3
    80ec:	2100      	movs	r1, #0
    80ee:	f7ff ff9c 	bl	802a <value_encode>
}
    80f2:	b003      	add	sp, #12
    80f4:	f85d fb04 	ldr.w	pc, [sp], #4

000080f8 <tstrx_encode>:
}


bool tstrx_encode(cbor_state_t *state, const cbor_string_type_t *input)
{
	return strx_encode(state, input, CBOR_MAJOR_TYPE_TSTR);
    80f8:	2203      	movs	r2, #3
    80fa:	f7ff bfc6 	b.w	808a <strx_encode>

000080fe <list_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    80fe:	6803      	ldr	r3, [r0, #0]
    8100:	68c1      	ldr	r1, [r0, #12]
    8102:	1c5a      	adds	r2, r3, #1
    8104:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    8106:	bf9f      	itttt	ls
    8108:	6002      	strls	r2, [r0, #0]
    810a:	229f      	movls	r2, #159	; 0x9f
	return true;
    810c:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    810e:	701a      	strbls	r2, [r3, #0]
		FAIL();
    8110:	bf88      	it	hi
    8112:	2000      	movhi	r0, #0


bool list_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
}
    8114:	4770      	bx	lr

00008116 <map_start_encode>:
	if ((state->payload + 1) > state->payload_end) {
    8116:	6803      	ldr	r3, [r0, #0]
    8118:	68c1      	ldr	r1, [r0, #12]
    811a:	1c5a      	adds	r2, r3, #1
    811c:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    811e:	bf9f      	itttt	ls
    8120:	6002      	strls	r2, [r0, #0]
    8122:	22bf      	movls	r2, #191	; 0xbf
	return true;
    8124:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    8126:	701a      	strbls	r2, [r3, #0]
		FAIL();
    8128:	bf88      	it	hi
    812a:	2000      	movhi	r0, #0


bool map_start_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_start_encode(state, max_num, CBOR_MAJOR_TYPE_MAP);
}
    812c:	4770      	bx	lr

0000812e <list_end_encode>:
	if ((state->payload + 1) > state->payload_end) {
    812e:	6803      	ldr	r3, [r0, #0]
    8130:	68c1      	ldr	r1, [r0, #12]
    8132:	1c5a      	adds	r2, r3, #1
    8134:	428a      	cmp	r2, r1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    8136:	bf9f      	itttt	ls
    8138:	6002      	strls	r2, [r0, #0]
    813a:	22ff      	movls	r2, #255	; 0xff
	return true;
    813c:	2001      	movls	r0, #1
	*(state->payload_mut++) = (major_type << 5) | (additional & 0x1F);
    813e:	701a      	strbls	r2, [r3, #0]
		FAIL();
    8140:	bf88      	it	hi
    8142:	2000      	movhi	r0, #0


bool list_end_encode(cbor_state_t *state, uint32_t max_num)
{
	return list_map_end_encode(state, max_num, CBOR_MAJOR_TYPE_LIST);
}
    8144:	4770      	bx	lr

00008146 <map_end_encode>:


bool map_end_encode(cbor_state_t *state, uint32_t max_num)
    8146:	f7ff bff2 	b.w	812e <list_end_encode>

0000814a <new_backup>:
_Static_assert((sizeof(size_t) == sizeof(void *)),
	"This code needs size_t to be the same length as pointers.");

bool new_backup(cbor_state_t *state, uint32_t new_elem_count)
{
	if ((state->backups->current_backup + 1)
    814a:	6902      	ldr	r2, [r0, #16]
{
    814c:	b538      	push	{r3, r4, r5, lr}
	if ((state->backups->current_backup + 1)
    814e:	6853      	ldr	r3, [r2, #4]
{
    8150:	460d      	mov	r5, r1
	if ((state->backups->current_backup + 1)
    8152:	6891      	ldr	r1, [r2, #8]
    8154:	3301      	adds	r3, #1
    8156:	428b      	cmp	r3, r1
{
    8158:	4604      	mov	r4, r0
	if ((state->backups->current_backup + 1)
    815a:	d20a      	bcs.n	8172 <new_backup+0x28>
		>= state->backups->num_backups) {
		FAIL();
	}

	uint32_t i = ++(state->backups->current_backup);
	memcpy(&state->backups->backup_list[i], state,
    815c:	6810      	ldr	r0, [r2, #0]
	uint32_t i = ++(state->backups->current_backup);
    815e:	6053      	str	r3, [r2, #4]
	memcpy(&state->backups->backup_list[i], state,
    8160:	2214      	movs	r2, #20
    8162:	4621      	mov	r1, r4
    8164:	fb02 0003 	mla	r0, r2, r3, r0
    8168:	f000 f8bd 	bl	82e6 <memcpy>
		sizeof(cbor_state_t));

	state->elem_count = new_elem_count;

	return true;
    816c:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    816e:	60a5      	str	r5, [r4, #8]
}
    8170:	bd38      	pop	{r3, r4, r5, pc}
		FAIL();
    8172:	2000      	movs	r0, #0
    8174:	e7fc      	b.n	8170 <new_backup+0x26>

00008176 <restore_backup>:


bool restore_backup(cbor_state_t *state, uint32_t flags,
		uint32_t max_elem_count)
{
    8176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    817a:	4616      	mov	r6, r2
	const uint8_t *payload = state->payload;
	const uint32_t elem_count = state->elem_count;

	if (state->backups->current_backup == 0) {
    817c:	6902      	ldr	r2, [r0, #16]
{
    817e:	4604      	mov	r4, r0
	if (state->backups->current_backup == 0) {
    8180:	6853      	ldr	r3, [r2, #4]
{
    8182:	460d      	mov	r5, r1
	const uint8_t *payload = state->payload;
    8184:	6807      	ldr	r7, [r0, #0]
	const uint32_t elem_count = state->elem_count;
    8186:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (state->backups->current_backup == 0) {
    818a:	b913      	cbnz	r3, 8192 <restore_backup+0x1c>
		FAIL();
    818c:	2000      	movs	r0, #0
	if (flags & FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    818e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (flags & FLAG_RESTORE) {
    8192:	07e9      	lsls	r1, r5, #31
    8194:	d505      	bpl.n	81a2 <restore_backup+0x2c>
		memcpy(state, &state->backups->backup_list[i],
    8196:	6811      	ldr	r1, [r2, #0]
    8198:	2214      	movs	r2, #20
    819a:	fb02 1103 	mla	r1, r2, r3, r1
    819e:	f000 f8a2 	bl	82e6 <memcpy>
	if (flags & FLAG_DISCARD) {
    81a2:	07aa      	lsls	r2, r5, #30
		state->backups->current_backup--;
    81a4:	bf41      	itttt	mi
    81a6:	6922      	ldrmi	r2, [r4, #16]
    81a8:	6853      	ldrmi	r3, [r2, #4]
    81aa:	f103 33ff 	addmi.w	r3, r3, #4294967295
    81ae:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    81b0:	45b0      	cmp	r8, r6
    81b2:	d8eb      	bhi.n	818c <restore_backup+0x16>
	if (flags & FLAG_TRANSFER_PAYLOAD) {
    81b4:	076b      	lsls	r3, r5, #29
    81b6:	d401      	bmi.n	81bc <restore_backup+0x46>
	return true;
    81b8:	2001      	movs	r0, #1
    81ba:	e7e8      	b.n	818e <restore_backup+0x18>
		state->payload = payload;
    81bc:	6027      	str	r7, [r4, #0]
    81be:	e7fb      	b.n	81b8 <restore_backup+0x42>

000081c0 <union_start_code>:


bool union_start_code(cbor_state_t *state)
{
	if (!new_backup(state, state->elem_count)) {
    81c0:	6881      	ldr	r1, [r0, #8]
    81c2:	f7ff bfc2 	b.w	814a <new_backup>

000081c6 <union_elem_code>:
}


bool union_elem_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_RESTORE, state->elem_count)) {
    81c6:	2101      	movs	r1, #1
    81c8:	6882      	ldr	r2, [r0, #8]
    81ca:	f7ff bfd4 	b.w	8176 <restore_backup>

000081ce <union_end_code>:
	return true;
}

bool union_end_code(cbor_state_t *state)
{
	if (!restore_backup(state, FLAG_DISCARD, state->elem_count)) {
    81ce:	2102      	movs	r1, #2
    81d0:	6882      	ldr	r2, [r0, #8]
    81d2:	f7ff bfd0 	b.w	8176 <restore_backup>

000081d6 <entry_function>:
}

bool entry_function(const uint8_t *payload, uint32_t payload_len,
		const void *struct_ptr, uint32_t *payload_len_out,
		cbor_encoder_t func, uint32_t elem_count, uint32_t num_backups)
{
    81d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		.payload = payload,
		.payload_end = payload + payload_len,
		.elem_count = elem_count,
	};

	cbor_state_t state_backups[num_backups + 1];
    81da:	2414      	movs	r4, #20
{
    81dc:	4605      	mov	r5, r0
    81de:	460e      	mov	r6, r1
    81e0:	4698      	mov	r8, r3
	cbor_state_t state = {
    81e2:	2300      	movs	r3, #0
{
    81e4:	b088      	sub	sp, #32
    81e6:	af00      	add	r7, sp, #0
    81e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
	cbor_state_t state = {
    81ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
	cbor_state_t state_backups[num_backups + 1];
    81ec:	fb00 4404 	mla	r4, r0, r4, r4
	cbor_state_t state = {
    81f0:	6179      	str	r1, [r7, #20]
	cbor_state_t state_backups[num_backups + 1];
    81f2:	3407      	adds	r4, #7
		.payload_end = payload + payload_len,
    81f4:	19a9      	adds	r1, r5, r6
	cbor_state_t state = {
    81f6:	61b9      	str	r1, [r7, #24]
	cbor_state_t state_backups[num_backups + 1];
    81f8:	f024 0407 	bic.w	r4, r4, #7
    81fc:	1c41      	adds	r1, r0, #1

	cbor_state_backups_t backups = {
    81fe:	e9c7 3101 	strd	r3, r1, [r7, #4]
	cbor_state_t state = {
    8202:	e9c7 5303 	strd	r5, r3, [r7, #12]
	cbor_state_t state_backups[num_backups + 1];
    8206:	ebad 0d04 	sub.w	sp, sp, r4
		.num_backups = num_backups + 1,
	};

	state.backups = &backups;

	bool result = func(&state, struct_ptr);
    820a:	4611      	mov	r1, r2
    820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    820e:	f107 000c 	add.w	r0, r7, #12
	cbor_state_backups_t backups = {
    8212:	f8c7 d000 	str.w	sp, [r7]
	state.backups = &backups;
    8216:	61ff      	str	r7, [r7, #28]
	bool result = func(&state, struct_ptr);
    8218:	4798      	blx	r3

	if (result && (payload_len_out != NULL)) {
    821a:	b150      	cbz	r0, 8232 <entry_function+0x5c>
    821c:	f1b8 0f00 	cmp.w	r8, #0
    8220:	d007      	beq.n	8232 <entry_function+0x5c>
		*payload_len_out = MIN(payload_len,
    8222:	68fb      	ldr	r3, [r7, #12]
    8224:	1b5b      	subs	r3, r3, r5
    8226:	42b3      	cmp	r3, r6
    8228:	bf94      	ite	ls
    822a:	f8c8 3000 	strls.w	r3, [r8]
    822e:	f8c8 6000 	strhi.w	r6, [r8]
				(size_t)state.payload - (size_t)payload);
	}
	return result;
}
    8232:	3720      	adds	r7, #32
    8234:	46bd      	mov	sp, r7
    8236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000823a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    823a:	2100      	movs	r1, #0
    823c:	2001      	movs	r0, #1
    823e:	f7fa bfc5 	b.w	31cc <z_arm_fatal_error>

00008242 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    8242:	6e43      	ldr	r3, [r0, #100]	; 0x64
    8244:	f383 880b 	msr	PSPLIM, r3
}
    8248:	4770      	bx	lr

0000824a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    824a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    824c:	6800      	ldr	r0, [r0, #0]
    824e:	f7fa bfbd 	b.w	31cc <z_arm_fatal_error>

00008252 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    8252:	b508      	push	{r3, lr}
	handler();
    8254:	f7fb f820 	bl	3298 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    825c:	f7fb ba62 	b.w	3724 <z_arm_exc_exit>

00008260 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    8260:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    8264:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8268:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    826a:	bf08      	it	eq
    826c:	f06f 0015 	mvneq.w	r0, #21
    8270:	4770      	bx	lr

00008272 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8272:	4603      	mov	r3, r0
	size_t n = 0;
    8274:	2000      	movs	r0, #0

	while (*s != '\0') {
    8276:	5c1a      	ldrb	r2, [r3, r0]
    8278:	b902      	cbnz	r2, 827c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    827a:	4770      	bx	lr
		n++;
    827c:	3001      	adds	r0, #1
    827e:	e7fa      	b.n	8276 <strlen+0x4>

00008280 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    8280:	1e43      	subs	r3, r0, #1
    8282:	3901      	subs	r1, #1
    8284:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8288:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    828c:	4282      	cmp	r2, r0
    828e:	d101      	bne.n	8294 <strcmp+0x14>
    8290:	2a00      	cmp	r2, #0
    8292:	d1f7      	bne.n	8284 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8294:	1a10      	subs	r0, r2, r0
    8296:	4770      	bx	lr

00008298 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    8298:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    829a:	b15a      	cbz	r2, 82b4 <memcmp+0x1c>
    829c:	3901      	subs	r1, #1
    829e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    82a0:	f810 2b01 	ldrb.w	r2, [r0], #1
    82a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    82a8:	42a0      	cmp	r0, r4
    82aa:	d001      	beq.n	82b0 <memcmp+0x18>
    82ac:	429a      	cmp	r2, r3
    82ae:	d0f7      	beq.n	82a0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    82b0:	1ad0      	subs	r0, r2, r3
}
    82b2:	bd10      	pop	{r4, pc}
		return 0;
    82b4:	4610      	mov	r0, r2
    82b6:	e7fc      	b.n	82b2 <memcmp+0x1a>

000082b8 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    82b8:	1a43      	subs	r3, r0, r1
    82ba:	4293      	cmp	r3, r2
{
    82bc:	b510      	push	{r4, lr}
    82be:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    82c2:	d308      	bcc.n	82d6 <memmove+0x1e>
	char *dest = d;
    82c4:	4602      	mov	r2, r0
    82c6:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    82c8:	429a      	cmp	r2, r3
    82ca:	d00b      	beq.n	82e4 <memmove+0x2c>
			*dest = *src;
    82cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    82d0:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    82d4:	e7f8      	b.n	82c8 <memmove+0x10>
    82d6:	440a      	add	r2, r1
			dest[n] = src[n];
    82d8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    82dc:	428a      	cmp	r2, r1
			dest[n] = src[n];
    82de:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    82e2:	d1f9      	bne.n	82d8 <memmove+0x20>
		}
	}

	return d;
}
    82e4:	bd10      	pop	{r4, pc}

000082e6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    82e6:	b510      	push	{r4, lr}
    82e8:	1e43      	subs	r3, r0, #1
    82ea:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    82ec:	4291      	cmp	r1, r2
    82ee:	d100      	bne.n	82f2 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    82f0:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    82f2:	f811 4b01 	ldrb.w	r4, [r1], #1
    82f6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    82fa:	e7f7      	b.n	82ec <memcpy+0x6>

000082fc <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    82fc:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    82fe:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8300:	4402      	add	r2, r0
    8302:	4293      	cmp	r3, r2
    8304:	d100      	bne.n	8308 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8306:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8308:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    830c:	e7f9      	b.n	8302 <memset+0x6>

0000830e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    830e:	6843      	ldr	r3, [r0, #4]
}
    8310:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8312:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8314:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    8316:	600b      	str	r3, [r1, #0]
}
    8318:	4770      	bx	lr

0000831a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    831a:	6843      	ldr	r3, [r0, #4]
    831c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    831e:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8320:	4042      	eors	r2, r0
    8322:	400a      	ands	r2, r1
    8324:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8326:	605a      	str	r2, [r3, #4]
}
    8328:	2000      	movs	r0, #0
    832a:	4770      	bx	lr

0000832c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    832c:	6843      	ldr	r3, [r0, #4]
}
    832e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8330:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    8332:	6099      	str	r1, [r3, #8]
}
    8334:	4770      	bx	lr

00008336 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8336:	6843      	ldr	r3, [r0, #4]
}
    8338:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    833a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    833c:	60d9      	str	r1, [r3, #12]
}
    833e:	4770      	bx	lr

00008340 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8340:	6843      	ldr	r3, [r0, #4]
}
    8342:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8344:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8346:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    8348:	404b      	eors	r3, r1
    p_reg->OUT = value;
    834a:	6053      	str	r3, [r2, #4]
}
    834c:	4770      	bx	lr

0000834e <gpio_nrfx_manage_callback>:
	return port->data;
    834e:	6903      	ldr	r3, [r0, #16]
{
    8350:	b510      	push	{r4, lr}
	return list->head;
    8352:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    8354:	b148      	cbz	r0, 836a <gpio_nrfx_manage_callback+0x1c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8356:	4288      	cmp	r0, r1
    8358:	d113      	bne.n	8382 <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
    835a:	689c      	ldr	r4, [r3, #8]
	return node->next;
    835c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    835e:	42a1      	cmp	r1, r4
	list->head = node;
    8360:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    8362:	d100      	bne.n	8366 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    8364:	6098      	str	r0, [r3, #8]
	parent->next = child;
    8366:	2000      	movs	r0, #0
    8368:	6008      	str	r0, [r1, #0]
	if (set) {
    836a:	b97a      	cbnz	r2, 838c <gpio_nrfx_manage_callback+0x3e>
	return 0;
    836c:	2000      	movs	r0, #0
}
    836e:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8370:	4281      	cmp	r1, r0
    8372:	d106      	bne.n	8382 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    8374:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    8376:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    8378:	6898      	ldr	r0, [r3, #8]
    837a:	4281      	cmp	r1, r0
    837c:	d1f3      	bne.n	8366 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    837e:	609c      	str	r4, [r3, #8]
}
    8380:	e7f1      	b.n	8366 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    8382:	4604      	mov	r4, r0
    8384:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8386:	2800      	cmp	r0, #0
    8388:	d1f2      	bne.n	8370 <gpio_nrfx_manage_callback+0x22>
			if (!set) {
    838a:	b13a      	cbz	r2, 839c <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    838c:	685a      	ldr	r2, [r3, #4]
    838e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    8390:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    8392:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    8394:	2a00      	cmp	r2, #0
    8396:	d1e9      	bne.n	836c <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
    8398:	6099      	str	r1, [r3, #8]
}
    839a:	e7e7      	b.n	836c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    839c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    83a0:	e7e5      	b.n	836e <gpio_nrfx_manage_callback+0x20>

000083a2 <is_regular_addr_valid>:
{
    83a2:	b538      	push	{r3, r4, r5, lr}
    83a4:	4604      	mov	r4, r0
    83a6:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    83a8:	f000 fb1b 	bl	89e2 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    83ac:	4284      	cmp	r4, r0
    83ae:	d209      	bcs.n	83c4 <is_regular_addr_valid+0x22>
    83b0:	2c00      	cmp	r4, #0
    83b2:	db07      	blt.n	83c4 <is_regular_addr_valid+0x22>
	    addr < 0 ||
    83b4:	42a8      	cmp	r0, r5
    83b6:	d305      	bcc.n	83c4 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    83b8:	442c      	add	r4, r5
	    len > flash_size ||
    83ba:	4284      	cmp	r4, r0
    83bc:	bf8c      	ite	hi
    83be:	2000      	movhi	r0, #0
    83c0:	2001      	movls	r0, #1
}
    83c2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    83c4:	2000      	movs	r0, #0
    83c6:	e7fc      	b.n	83c2 <is_regular_addr_valid+0x20>

000083c8 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    83c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    83cc:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    83ce:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
    83d2:	6883      	ldr	r3, [r0, #8]
{
    83d4:	460d      	mov	r5, r1
    83d6:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
    83d8:	4669      	mov	r1, sp
    83da:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
    83dc:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
    83e0:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
    83e4:	aa01      	add	r2, sp, #4
    83e6:	4798      	blx	r3

	while (layout_size--) {
    83e8:	e9dd 7c00 	ldrd	r7, ip, [sp]
    83ec:	4640      	mov	r0, r8
		info->size = layout->pages_size;
    83ee:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
    83f2:	4560      	cmp	r0, ip
    83f4:	d104      	bne.n	8400 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    83f6:	f06f 0015 	mvn.w	r0, #21
}
    83fa:	b003      	add	sp, #12
    83fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
    8400:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
    8404:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
    8406:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
    8408:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
    840c:	b97d      	cbnz	r5, 842e <flash_get_page_info+0x66>
			index_jmp = index - info->index;
    840e:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
    8410:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
    8414:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
    8416:	4543      	cmp	r3, r8
    8418:	bf28      	it	cs
    841a:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
    841c:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
    8420:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
    8422:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
    8424:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
    8426:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
    8428:	d9e3      	bls.n	83f2 <flash_get_page_info+0x2a>
			return 0;
    842a:	2000      	movs	r0, #0
    842c:	e7e5      	b.n	83fa <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
    842e:	1aab      	subs	r3, r5, r2
    8430:	fbb3 f3f9 	udiv	r3, r3, r9
    8434:	e7ec      	b.n	8410 <flash_get_page_info+0x48>

00008436 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    8436:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    8438:	2200      	movs	r2, #0
    843a:	f7ff bfc5 	b.w	83c8 <flash_get_page_info>

0000843e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    843e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    8442:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    8444:	6883      	ldr	r3, [r0, #8]
{
    8446:	b086      	sub	sp, #24
    8448:	4688      	mov	r8, r1
    844a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    844c:	695b      	ldr	r3, [r3, #20]
    844e:	aa02      	add	r2, sp, #8
    8450:	a901      	add	r1, sp, #4
    8452:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    8454:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    8456:	4625      	mov	r5, r4
    8458:	9b02      	ldr	r3, [sp, #8]
    845a:	42ab      	cmp	r3, r5
    845c:	d802      	bhi.n	8464 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    845e:	b006      	add	sp, #24
    8460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    8464:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    8466:	9f01      	ldr	r7, [sp, #4]
    8468:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    846c:	687b      	ldr	r3, [r7, #4]
    846e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    8470:	683a      	ldr	r2, [r7, #0]
    8472:	eb0a 0306 	add.w	r3, sl, r6
    8476:	42b2      	cmp	r2, r6
    8478:	d802      	bhi.n	8480 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    847a:	469a      	mov	sl, r3
    847c:	3501      	adds	r5, #1
    847e:	e7eb      	b.n	8458 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    8480:	4649      	mov	r1, r9
			page_info.start_offset = off;
    8482:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    8484:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    8486:	a803      	add	r0, sp, #12
    8488:	47c0      	blx	r8
    848a:	2800      	cmp	r0, #0
    848c:	d0e7      	beq.n	845e <flash_page_foreach+0x20>
			off += page_info.size;
    848e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    8490:	3601      	adds	r6, #1
			off += page_info.size;
    8492:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    8494:	e7ec      	b.n	8470 <flash_page_foreach+0x32>

00008496 <uarte_nrfx_config_get>:
{
    8496:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    8498:	6902      	ldr	r2, [r0, #16]
    849a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    849e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    84a2:	2000      	movs	r0, #0
    84a4:	4770      	bx	lr

000084a6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    84a6:	6843      	ldr	r3, [r0, #4]
    84a8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    84aa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    84ae:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    84b2:	4770      	bx	lr

000084b4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    84b4:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    84b6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    84b8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    84ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    84be:	b148      	cbz	r0, 84d4 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84c0:	2000      	movs	r0, #0
	*c = data->rx_data;
    84c2:	7d52      	ldrb	r2, [r2, #21]
    84c4:	700a      	strb	r2, [r1, #0]
    84c6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    84ca:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    84ce:	2201      	movs	r2, #1
    84d0:	601a      	str	r2, [r3, #0]
	return 0;
    84d2:	4770      	bx	lr
		return -1;
    84d4:	f04f 30ff 	mov.w	r0, #4294967295
}
    84d8:	4770      	bx	lr

000084da <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    84da:	2a00      	cmp	r2, #0
{
    84dc:	b510      	push	{r4, lr}
    84de:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    84e0:	dd0f      	ble.n	8502 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
    84e2:	6843      	ldr	r3, [r0, #4]
    84e4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    84e6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    84ea:	b148      	cbz	r0, 8500 <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84ec:	2000      	movs	r0, #0
	return dev->data;
    84ee:	6922      	ldr	r2, [r4, #16]
    84f0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    84f4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    84f8:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    84fa:	7d52      	ldrb	r2, [r2, #21]
    84fc:	700a      	strb	r2, [r1, #0]
    84fe:	6018      	str	r0, [r3, #0]
}
    8500:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    8502:	2000      	movs	r0, #0
    8504:	e7fc      	b.n	8500 <uarte_nrfx_fifo_read+0x26>

00008506 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    8506:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    8508:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    850a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    850c:	f04f 0020 	mov.w	r0, #32
    8510:	f3ef 8311 	mrs	r3, BASEPRI
    8514:	f380 8811 	msr	BASEPRI, r0
    8518:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    851c:	2000      	movs	r0, #0
    851e:	68c9      	ldr	r1, [r1, #12]
    8520:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    8522:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8526:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    852a:	f383 8811 	msr	BASEPRI, r3
    852e:	f3bf 8f6f 	isb	sy
}
    8532:	4770      	bx	lr

00008534 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    8534:	2201      	movs	r2, #1
    8536:	6903      	ldr	r3, [r0, #16]
    8538:	68db      	ldr	r3, [r3, #12]
    853a:	739a      	strb	r2, [r3, #14]
}
    853c:	4770      	bx	lr

0000853e <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    853e:	6903      	ldr	r3, [r0, #16]
    8540:	68db      	ldr	r3, [r3, #12]
    8542:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8544:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    8548:	b962      	cbnz	r2, 8564 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    854a:	6842      	ldr	r2, [r0, #4]
    854c:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    854e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    8552:	b140      	cbz	r0, 8566 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    8554:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8558:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    855c:	d003      	beq.n	8566 <uarte_nrfx_irq_tx_ready_complete+0x28>
    855e:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    8560:	6119      	str	r1, [r3, #16]
    8562:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8564:	2000      	movs	r0, #0
}
    8566:	4770      	bx	lr

00008568 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    8568:	6843      	ldr	r3, [r0, #4]
    856a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    856c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    8570:	3800      	subs	r0, #0
    8572:	bf18      	it	ne
    8574:	2001      	movne	r0, #1
    8576:	4770      	bx	lr

00008578 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    8578:	2210      	movs	r2, #16
	return config->uarte_regs;
    857a:	6843      	ldr	r3, [r0, #4]
    857c:	681b      	ldr	r3, [r3, #0]
    857e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    8582:	4770      	bx	lr

00008584 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    8584:	2210      	movs	r2, #16
	return config->uarte_regs;
    8586:	6843      	ldr	r3, [r0, #4]
    8588:	681b      	ldr	r3, [r3, #0]
    858a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    858e:	4770      	bx	lr

00008590 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    8590:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    8594:	6843      	ldr	r3, [r0, #4]
    8596:	681b      	ldr	r3, [r3, #0]
    8598:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    859c:	4770      	bx	lr

0000859e <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    859e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    85a2:	6843      	ldr	r3, [r0, #4]
    85a4:	681b      	ldr	r3, [r3, #0]
    85a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    85aa:	4770      	bx	lr

000085ac <uarte_nrfx_irq_is_pending>:
{
    85ac:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    85ae:	6843      	ldr	r3, [r0, #4]
{
    85b0:	4604      	mov	r4, r0
	return config->uarte_regs;
    85b2:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    85b4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    85b8:	025b      	lsls	r3, r3, #9
    85ba:	d405      	bmi.n	85c8 <uarte_nrfx_irq_is_pending+0x1c>
    85bc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    85c0:	f010 0010 	ands.w	r0, r0, #16
    85c4:	d106      	bne.n	85d4 <uarte_nrfx_irq_is_pending+0x28>
}
    85c6:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    85c8:	f7ff ffb9 	bl	853e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    85cc:	2800      	cmp	r0, #0
    85ce:	d0f5      	beq.n	85bc <uarte_nrfx_irq_is_pending+0x10>
		||
    85d0:	2001      	movs	r0, #1
    85d2:	e7f8      	b.n	85c6 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    85d4:	4620      	mov	r0, r4
    85d6:	f7ff ffc7 	bl	8568 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    85da:	3800      	subs	r0, #0
    85dc:	bf18      	it	ne
    85de:	2001      	movne	r0, #1
    85e0:	e7f1      	b.n	85c6 <uarte_nrfx_irq_is_pending+0x1a>

000085e2 <uarte_nrfx_irq_update>:
}
    85e2:	2001      	movs	r0, #1
    85e4:	4770      	bx	lr

000085e6 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    85e6:	6903      	ldr	r3, [r0, #16]
    85e8:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    85ea:	e9c3 1200 	strd	r1, r2, [r3]
}
    85ee:	4770      	bx	lr

000085f0 <tx_start.isra.0>:
	return config->uarte_regs;
    85f0:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    85f2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    85f6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85fa:	2200      	movs	r2, #0
    85fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    8600:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    8604:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    8608:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    860c:	6842      	ldr	r2, [r0, #4]
    860e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8610:	bf41      	itttt	mi
    8612:	2208      	movmi	r2, #8
    8614:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    8618:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    861c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8620:	2201      	movs	r2, #1
    8622:	609a      	str	r2, [r3, #8]
}
    8624:	4770      	bx	lr

00008626 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    8626:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    8628:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    862a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    862e:	b940      	cbnz	r0, 8642 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8630:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8632:	071b      	lsls	r3, r3, #28
    8634:	d406      	bmi.n	8644 <is_tx_ready.isra.0+0x1e>
    8636:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    863a:	3800      	subs	r0, #0
    863c:	bf18      	it	ne
    863e:	2001      	movne	r0, #1
    8640:	4770      	bx	lr
    8642:	2001      	movs	r0, #1
}
    8644:	4770      	bx	lr

00008646 <uarte_nrfx_fifo_fill>:
{
    8646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
    8648:	6905      	ldr	r5, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    864a:	68eb      	ldr	r3, [r5, #12]
    864c:	899c      	ldrh	r4, [r3, #12]
    864e:	3310      	adds	r3, #16
    8650:	4294      	cmp	r4, r2
    8652:	bfa8      	it	ge
    8654:	4614      	movge	r4, r2
    8656:	2201      	movs	r2, #1
    8658:	e8d3 6fef 	ldaex	r6, [r3]
    865c:	2e00      	cmp	r6, #0
    865e:	d103      	bne.n	8668 <uarte_nrfx_fifo_fill+0x22>
    8660:	e8c3 2fe7 	stlex	r7, r2, [r3]
    8664:	2f00      	cmp	r7, #0
    8666:	d1f7      	bne.n	8658 <uarte_nrfx_fifo_fill+0x12>
    8668:	bf0c      	ite	eq
    866a:	4613      	moveq	r3, r2
    866c:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    866e:	d01e      	beq.n	86ae <uarte_nrfx_fifo_fill+0x68>
		return 0;
    8670:	461c      	mov	r4, r3
}
    8672:	4620      	mov	r0, r4
    8674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    8676:	68ea      	ldr	r2, [r5, #12]
    8678:	5cce      	ldrb	r6, [r1, r3]
    867a:	6892      	ldr	r2, [r2, #8]
    867c:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
    867e:	3301      	adds	r3, #1
    8680:	42a3      	cmp	r3, r4
    8682:	dbf8      	blt.n	8676 <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
    8684:	f04f 0320 	mov.w	r3, #32
    8688:	f3ef 8711 	mrs	r7, BASEPRI
    868c:	f383 8811 	msr	BASEPRI, r3
    8690:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    8694:	6846      	ldr	r6, [r0, #4]
    8696:	4630      	mov	r0, r6
    8698:	f7ff ffc5 	bl	8626 <is_tx_ready.isra.0>
    869c:	68eb      	ldr	r3, [r5, #12]
    869e:	b940      	cbnz	r0, 86b2 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
    86a0:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    86a2:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    86a4:	f387 8811 	msr	BASEPRI, r7
    86a8:	f3bf 8f6f 	isb	sy
	return len;
    86ac:	e7e1      	b.n	8672 <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
    86ae:	2300      	movs	r3, #0
    86b0:	e7e6      	b.n	8680 <uarte_nrfx_fifo_fill+0x3a>
		tx_start(dev, data->int_driven->tx_buffer, len);
    86b2:	4622      	mov	r2, r4
    86b4:	4630      	mov	r0, r6
    86b6:	6899      	ldr	r1, [r3, #8]
    86b8:	f7ff ff9a 	bl	85f0 <tx_start.isra.0>
    86bc:	e7f2      	b.n	86a4 <uarte_nrfx_fifo_fill+0x5e>

000086be <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    86be:	6843      	ldr	r3, [r0, #4]
{
    86c0:	b410      	push	{r4}
	return config->uarte_regs;
    86c2:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    86c4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    86c8:	05d1      	lsls	r1, r2, #23
    86ca:	d518      	bpl.n	86fe <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    86cc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    86d0:	b1aa      	cbz	r2, 86fe <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    86d2:	f04f 0120 	mov.w	r1, #32
    86d6:	f3ef 8211 	mrs	r2, BASEPRI
    86da:	f381 8811 	msr	BASEPRI, r1
    86de:	f3bf 8f6f 	isb	sy
    86e2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    86e6:	b131      	cbz	r1, 86f6 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    86e8:	2100      	movs	r1, #0
    86ea:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    86ee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    86f2:	2101      	movs	r1, #1
    86f4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    86f6:	f382 8811 	msr	BASEPRI, r2
    86fa:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    86fe:	6842      	ldr	r2, [r0, #4]
    8700:	6852      	ldr	r2, [r2, #4]
    8702:	06d2      	lsls	r2, r2, #27
    8704:	d51a      	bpl.n	873c <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    8706:	f04f 0220 	mov.w	r2, #32
    870a:	f3ef 8111 	mrs	r1, BASEPRI
    870e:	f382 8811 	msr	BASEPRI, r2
    8712:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8716:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    871a:	b112      	cbz	r2, 8722 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    871c:	2200      	movs	r2, #0
    871e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    8722:	6902      	ldr	r2, [r0, #16]
    8724:	68d2      	ldr	r2, [r2, #12]
    8726:	b10a      	cbz	r2, 872c <uarte_nrfx_isr_int+0x6e>
    8728:	6912      	ldr	r2, [r2, #16]
    872a:	b91a      	cbnz	r2, 8734 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    872c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8730:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    8734:	f381 8811 	msr	BASEPRI, r1
    8738:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    873c:	6902      	ldr	r2, [r0, #16]
    873e:	68d2      	ldr	r2, [r2, #12]
    8740:	b15a      	cbz	r2, 875a <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8742:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8746:	b159      	cbz	r1, 8760 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
    8748:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
    874a:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    874c:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    874e:	b13c      	cbz	r4, 8760 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
    8750:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8754:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    8758:	7391      	strb	r1, [r2, #14]
}
    875a:	f85d 4b04 	ldr.w	r4, [sp], #4
    875e:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8760:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    8764:	b121      	cbz	r1, 8770 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8766:	2100      	movs	r1, #0
    8768:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    876c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    8770:	6813      	ldr	r3, [r2, #0]
    8772:	2b00      	cmp	r3, #0
    8774:	d0f1      	beq.n	875a <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    8776:	6851      	ldr	r1, [r2, #4]
}
    8778:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
    877c:	4718      	bx	r3

0000877e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    877e:	f7fd b90f 	b.w	59a0 <nrf_cc3xx_platform_init_no_rng>

00008782 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    8782:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8784:	f7f9 fe5e 	bl	2444 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8788:	f7f9 ff08 	bl	259c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    878c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    8790:	f7fd b906 	b.w	59a0 <nrf_cc3xx_platform_init_no_rng>

00008794 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    8794:	6880      	ldr	r0, [r0, #8]
}
    8796:	3828      	subs	r0, #40	; 0x28
    8798:	4770      	bx	lr

0000879a <boot_magic_compatible_check>:
    switch (tbl_val) {
    879a:	2804      	cmp	r0, #4
    879c:	d009      	beq.n	87b2 <boot_magic_compatible_check+0x18>
    879e:	2805      	cmp	r0, #5
    87a0:	d103      	bne.n	87aa <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    87a2:	1e48      	subs	r0, r1, #1
    87a4:	bf18      	it	ne
    87a6:	2001      	movne	r0, #1
    87a8:	4770      	bx	lr
        return tbl_val == val;
    87aa:	1a43      	subs	r3, r0, r1
    87ac:	4258      	negs	r0, r3
    87ae:	4158      	adcs	r0, r3
    87b0:	4770      	bx	lr
    switch (tbl_val) {
    87b2:	2001      	movs	r0, #1
}
    87b4:	4770      	bx	lr

000087b6 <bootutil_buffer_is_erased>:
{
    87b6:	b538      	push	{r3, r4, r5, lr}
    87b8:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    87ba:	460c      	mov	r4, r1
    87bc:	b161      	cbz	r1, 87d8 <bootutil_buffer_is_erased+0x22>
    87be:	b15a      	cbz	r2, 87d8 <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    87c0:	f7ff fa39 	bl	7c36 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    87c4:	4621      	mov	r1, r4
    87c6:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    87c8:	f811 3b01 	ldrb.w	r3, [r1], #1
    87cc:	4283      	cmp	r3, r0
    87ce:	d103      	bne.n	87d8 <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    87d0:	42a9      	cmp	r1, r5
    87d2:	d1f9      	bne.n	87c8 <bootutil_buffer_is_erased+0x12>
    return true;
    87d4:	2001      	movs	r0, #1
}
    87d6:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    87d8:	2000      	movs	r0, #0
    87da:	e7fc      	b.n	87d6 <bootutil_buffer_is_erased+0x20>

000087dc <boot_read_flag>:
{
    87dc:	b538      	push	{r3, r4, r5, lr}
    87de:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    87e0:	2301      	movs	r3, #1
{
    87e2:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    87e4:	4622      	mov	r2, r4
{
    87e6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    87e8:	f7ff f99e 	bl	7b28 <flash_area_read>
    if (rc < 0) {
    87ec:	2800      	cmp	r0, #0
    87ee:	db0f      	blt.n	8810 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    87f0:	2201      	movs	r2, #1
    87f2:	4621      	mov	r1, r4
    87f4:	4628      	mov	r0, r5
    87f6:	f7ff ffde 	bl	87b6 <bootutil_buffer_is_erased>
    87fa:	b938      	cbnz	r0, 880c <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    87fc:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    87fe:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    8800:	bf14      	ite	ne
    8802:	2302      	movne	r3, #2
    8804:	2301      	moveq	r3, #1
    8806:	2000      	movs	r0, #0
    8808:	7023      	strb	r3, [r4, #0]
}
    880a:	bd38      	pop	{r3, r4, r5, pc}
    880c:	2303      	movs	r3, #3
    880e:	e7fa      	b.n	8806 <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    8810:	2001      	movs	r0, #1
    8812:	e7fa      	b.n	880a <boot_read_flag+0x2e>

00008814 <boot_write_trailer>:
{
    8814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8818:	461d      	mov	r5, r3
    881a:	4606      	mov	r6, r0
    881c:	460f      	mov	r7, r1
    881e:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    8820:	f7ff fa00 	bl	7c24 <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    8824:	1944      	adds	r4, r0, r5
    8826:	3c01      	subs	r4, #1
    8828:	4243      	negs	r3, r0
    882a:	b2e4      	uxtb	r4, r4
    882c:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
    882e:	2c08      	cmp	r4, #8
    8830:	d81a      	bhi.n	8868 <boot_write_trailer+0x54>
    erased_val = flash_area_erased_val(fap);
    8832:	4630      	mov	r0, r6
    8834:	f7ff f9ff 	bl	7c36 <flash_area_erased_val>
    8838:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    883a:	462a      	mov	r2, r5
    883c:	4641      	mov	r1, r8
    883e:	4668      	mov	r0, sp
    8840:	f7ff fd51 	bl	82e6 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    8844:	4649      	mov	r1, r9
    8846:	1b62      	subs	r2, r4, r5
    8848:	eb0d 0005 	add.w	r0, sp, r5
    884c:	f7ff fd56 	bl	82fc <memset>
    rc = flash_area_write(fap, off, buf, align);
    8850:	4623      	mov	r3, r4
    8852:	466a      	mov	r2, sp
    8854:	4639      	mov	r1, r7
    8856:	4630      	mov	r0, r6
    8858:	f7ff f982 	bl	7b60 <flash_area_write>
    if (rc != 0) {
    885c:	3800      	subs	r0, #0
    885e:	bf18      	it	ne
    8860:	2001      	movne	r0, #1
}
    8862:	b003      	add	sp, #12
    8864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    8868:	f04f 30ff 	mov.w	r0, #4294967295
    886c:	e7f9      	b.n	8862 <boot_write_trailer+0x4e>

0000886e <boot_write_trailer_flag>:
{
    886e:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    8870:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    8872:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    8876:	aa01      	add	r2, sp, #4
    8878:	f7ff ffcc 	bl	8814 <boot_write_trailer>
}
    887c:	b003      	add	sp, #12
    887e:	f85d fb04 	ldr.w	pc, [sp], #4

00008882 <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    8882:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    8884:	2201      	movs	r2, #1
    8886:	3918      	subs	r1, #24
    8888:	f7ff bff1 	b.w	886e <boot_write_trailer_flag>

0000888c <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    888c:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    888e:	3a18      	subs	r2, #24
    8890:	f7ff bfa4 	b.w	87dc <boot_read_flag>

00008894 <boot_read_swap_state_by_id>:
{
    8894:	b513      	push	{r0, r1, r4, lr}
    8896:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    8898:	b2c0      	uxtb	r0, r0
    889a:	a901      	add	r1, sp, #4
    889c:	f7f9 fab6 	bl	1e0c <flash_area_open>
    if (rc != 0) {
    88a0:	b950      	cbnz	r0, 88b8 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    88a2:	4621      	mov	r1, r4
    88a4:	9801      	ldr	r0, [sp, #4]
    88a6:	f7fb fe2f 	bl	4508 <boot_read_swap_state>
    88aa:	4604      	mov	r4, r0
    flash_area_close(fap);
    88ac:	9801      	ldr	r0, [sp, #4]
    88ae:	f7ff f93a 	bl	7b26 <flash_area_close>
}
    88b2:	4620      	mov	r0, r4
    88b4:	b002      	add	sp, #8
    88b6:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    88b8:	2401      	movs	r4, #1
    88ba:	e7fa      	b.n	88b2 <boot_read_swap_state_by_id+0x1e>

000088bc <boot_write_swap_info>:
{
    88bc:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    88be:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    88c2:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    88c6:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    88c8:	2301      	movs	r3, #1
    88ca:	f10d 0207 	add.w	r2, sp, #7
    88ce:	3928      	subs	r1, #40	; 0x28
    88d0:	f7ff ffa0 	bl	8814 <boot_write_trailer>
}
    88d4:	b003      	add	sp, #12
    88d6:	f85d fb04 	ldr.w	pc, [sp], #4

000088da <nrf91_errata_14>:
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    88da:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
            if (var1 == 0x09)
    88de:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    88e2:	2a09      	cmp	r2, #9
    88e4:	d105      	bne.n	88f2 <nrf91_errata_14+0x18>
                switch(var2)
    88e6:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
    88ea:	1e43      	subs	r3, r0, #1
    88ec:	4258      	negs	r0, r3
    88ee:	4158      	adcs	r0, r3
    88f0:	4770      	bx	lr
                        return false;
    88f2:	2000      	movs	r0, #0
}
    88f4:	4770      	bx	lr

000088f6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    88f6:	4700      	bx	r0

000088f8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    88f8:	f000 b9dc 	b.w	8cb4 <z_impl_k_busy_wait>

000088fc <nrfx_clock_enable>:
{
    88fc:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    88fe:	2005      	movs	r0, #5
    8900:	f7fa fbe2 	bl	30c8 <arch_irq_is_enabled>
    8904:	b920      	cbnz	r0, 8910 <nrfx_clock_enable+0x14>
}
    8906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    890a:	2005      	movs	r0, #5
    890c:	f7fa bbce 	b.w	30ac <arch_irq_enable>
    8910:	bd08      	pop	{r3, pc}

00008912 <nrfx_clock_start>:
    switch (domain)
    8912:	b110      	cbz	r0, 891a <nrfx_clock_start+0x8>
    8914:	2801      	cmp	r0, #1
    8916:	d021      	beq.n	895c <nrfx_clock_start+0x4a>
    8918:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    891a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    891e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8922:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8926:	03c9      	lsls	r1, r1, #15
    8928:	d512      	bpl.n	8950 <nrfx_clock_start+0x3e>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    892a:	f003 0303 	and.w	r3, r3, #3
    892e:	2b02      	cmp	r3, #2
    8930:	d10e      	bne.n	8950 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8932:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8936:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    893a:	2200      	movs	r2, #0
    893c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8940:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    8944:	2202      	movs	r2, #2
    8946:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    894a:	2201      	movs	r2, #1
    894c:	609a      	str	r2, [r3, #8]
}
    894e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    8950:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8954:	2201      	movs	r2, #1
    8956:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    895a:	e7ec      	b.n	8936 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    895c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8960:	2200      	movs	r2, #0
    8962:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8966:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    896a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    896e:	6018      	str	r0, [r3, #0]
}
    8970:	4770      	bx	lr

00008972 <nrfx_clock_stop>:
{
    8972:	b538      	push	{r3, r4, r5, lr}
    switch (domain)
    8974:	b110      	cbz	r0, 897c <nrfx_clock_stop+0xa>
    8976:	2801      	cmp	r0, #1
    8978:	d017      	beq.n	89aa <nrfx_clock_stop+0x38>
}
    897a:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    897c:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    8980:	2302      	movs	r3, #2
    8982:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8986:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    898a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    898e:	2301      	movs	r3, #1
    8990:	f242 7510 	movw	r5, #10000	; 0x2710
    8994:	60e3      	str	r3, [r4, #12]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8996:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    899a:	03db      	lsls	r3, r3, #15
    899c:	d5ed      	bpl.n	897a <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    899e:	2001      	movs	r0, #1
    89a0:	f7ff ffaa 	bl	88f8 <nrfx_busy_wait>
    89a4:	3d01      	subs	r5, #1
    89a6:	d1f6      	bne.n	8996 <nrfx_clock_stop+0x24>
    89a8:	e7e7      	b.n	897a <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    89aa:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    89ae:	2300      	movs	r3, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    89b0:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    89b4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    89b8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    89bc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    89c0:	6060      	str	r0, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    89c2:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    89c6:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    89ca:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    89ce:	03d2      	lsls	r2, r2, #15
    89d0:	d5d3      	bpl.n	897a <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    89d2:	2b00      	cmp	r3, #0
    89d4:	d0d1      	beq.n	897a <nrfx_clock_stop+0x8>
    89d6:	2001      	movs	r0, #1
    89d8:	f7ff ff8e 	bl	88f8 <nrfx_busy_wait>
    89dc:	3d01      	subs	r5, #1
    89de:	d1f0      	bne.n	89c2 <nrfx_clock_stop+0x50>
    89e0:	e7cb      	b.n	897a <nrfx_clock_stop+0x8>

000089e2 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    89e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    89e6:	4770      	bx	lr

000089e8 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    89e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    89ec:	4770      	bx	lr

000089ee <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    89ee:	f44f 7080 	mov.w	r0, #256	; 0x100
    89f2:	4770      	bx	lr

000089f4 <z_device_state_init>:
}
    89f4:	4770      	bx	lr

000089f6 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    89f6:	b138      	cbz	r0, 8a08 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    89f8:	68c3      	ldr	r3, [r0, #12]
    89fa:	8818      	ldrh	r0, [r3, #0]
    89fc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8a00:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    8a04:	4258      	negs	r0, r3
    8a06:	4158      	adcs	r0, r3
}
    8a08:	4770      	bx	lr

00008a0a <k_mem_slab_init>:
{
    8a0a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    8a0c:	2400      	movs	r4, #0
    8a0e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8a10:	ea41 0402 	orr.w	r4, r1, r2
    8a14:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    8a18:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    8a1c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8a1e:	d10c      	bne.n	8a3a <k_mem_slab_init+0x30>
    8a20:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    8a22:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    8a24:	6145      	str	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8a26:	d103      	bne.n	8a30 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    8a28:	e9c0 0000 	strd	r0, r0, [r0]
}
    8a2c:	2000      	movs	r0, #0
}
    8a2e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8a30:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8a32:	3401      	adds	r4, #1
    8a34:	460d      	mov	r5, r1
		p += slab->block_size;
    8a36:	4411      	add	r1, r2
    8a38:	e7f3      	b.n	8a22 <k_mem_slab_init+0x18>
		return -EINVAL;
    8a3a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8a3e:	e7f6      	b.n	8a2e <k_mem_slab_init+0x24>

00008a40 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    8a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a42:	4604      	mov	r4, r0
    8a44:	460d      	mov	r5, r1
	__asm__ volatile(
    8a46:	f04f 0320 	mov.w	r3, #32
    8a4a:	f3ef 8611 	mrs	r6, BASEPRI
    8a4e:	f383 8811 	msr	BASEPRI, r3
    8a52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8a56:	6947      	ldr	r7, [r0, #20]
    8a58:	b977      	cbnz	r7, 8a78 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    8a5a:	f000 f8b1 	bl	8bc0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    8a5e:	b158      	cbz	r0, 8a78 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    8a60:	682a      	ldr	r2, [r5, #0]
    8a62:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8a64:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    8a66:	f000 f89b 	bl	8ba0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    8a6a:	4631      	mov	r1, r6
    8a6c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    8a70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    8a74:	f7fc bca8 	b.w	53c8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    8a78:	682b      	ldr	r3, [r5, #0]
    8a7a:	6962      	ldr	r2, [r4, #20]
    8a7c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    8a7e:	682b      	ldr	r3, [r5, #0]
    8a80:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    8a82:	69a3      	ldr	r3, [r4, #24]
    8a84:	3b01      	subs	r3, #1
    8a86:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    8a88:	f386 8811 	msr	BASEPRI, r6
    8a8c:	f3bf 8f6f 	isb	sy
}
    8a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008a92 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8a92:	f3ef 8005 	mrs	r0, IPSR
}
    8a96:	3800      	subs	r0, #0
    8a98:	bf18      	it	ne
    8a9a:	2001      	movne	r0, #1
    8a9c:	4770      	bx	lr

00008a9e <k_thread_name_get>:
}
    8a9e:	2000      	movs	r0, #0
    8aa0:	4770      	bx	lr

00008aa2 <z_pm_save_idle_exit>:
{
    8aa2:	b508      	push	{r3, lr}
	pm_system_resume();
    8aa4:	f7f9 fa10 	bl	1ec8 <pm_system_resume>
}
    8aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8aac:	f7ff b962 	b.w	7d74 <sys_clock_idle_exit>

00008ab0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    8ab0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8ab4:	428b      	cmp	r3, r1
    8ab6:	d001      	beq.n	8abc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    8ab8:	f7fc bc3e 	b.w	5338 <z_set_prio>
}
    8abc:	2000      	movs	r0, #0
    8abe:	4770      	bx	lr

00008ac0 <z_impl_k_mutex_init>:
{
    8ac0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8ac2:	2000      	movs	r0, #0
    8ac4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    8ac8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    8acc:	4770      	bx	lr

00008ace <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    8ace:	b13a      	cbz	r2, 8ae0 <z_impl_k_sem_init+0x12>
    8ad0:	428a      	cmp	r2, r1
    8ad2:	d305      	bcc.n	8ae0 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    8ad4:	e9c0 1202 	strd	r1, r2, [r0, #8]
    8ad8:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    8adc:	2000      	movs	r0, #0
    8ade:	4770      	bx	lr
		return -EINVAL;
    8ae0:	f06f 0015 	mvn.w	r0, #21
}
    8ae4:	4770      	bx	lr

00008ae6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    8ae6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8aea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8aec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8aee:	2300      	movs	r3, #0
	node->prev = NULL;
    8af0:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    8af4:	4770      	bx	lr

00008af6 <unpend_thread_no_timeout>:
{
    8af6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    8af8:	f7ff fff5 	bl	8ae6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8afc:	7b43      	ldrb	r3, [r0, #13]
    8afe:	f023 0302 	bic.w	r3, r3, #2
    8b02:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    8b04:	2300      	movs	r3, #0
    8b06:	6083      	str	r3, [r0, #8]
}
    8b08:	bd08      	pop	{r3, pc}

00008b0a <add_to_waitq_locked>:
{
    8b0a:	b538      	push	{r3, r4, r5, lr}
    8b0c:	4604      	mov	r4, r0
    8b0e:	460d      	mov	r5, r1
	unready_thread(thread);
    8b10:	f7fc fade 	bl	50d0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8b14:	7b63      	ldrb	r3, [r4, #13]
    8b16:	f043 0302 	orr.w	r3, r3, #2
    8b1a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8b1c:	b1ed      	cbz	r5, 8b5a <add_to_waitq_locked+0x50>
	return list->head == list;
    8b1e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    8b20:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b22:	429d      	cmp	r5, r3
    8b24:	d109      	bne.n	8b3a <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    8b26:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    8b28:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8b2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8b2e:	606c      	str	r4, [r5, #4]
}
    8b30:	e013      	b.n	8b5a <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
    8b32:	686a      	ldr	r2, [r5, #4]
    8b34:	429a      	cmp	r2, r3
    8b36:	d0f6      	beq.n	8b26 <add_to_waitq_locked+0x1c>
    8b38:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	d0f3      	beq.n	8b26 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    8b3e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8b42:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    8b46:	4291      	cmp	r1, r2
    8b48:	d0f3      	beq.n	8b32 <add_to_waitq_locked+0x28>
		return b2 - b1;
    8b4a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b4c:	2a00      	cmp	r2, #0
    8b4e:	ddf0      	ble.n	8b32 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    8b50:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8b52:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8b56:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8b58:	605c      	str	r4, [r3, #4]
}
    8b5a:	bd38      	pop	{r3, r4, r5, pc}

00008b5c <z_thread_timeout>:
{
    8b5c:	4601      	mov	r1, r0
    8b5e:	b510      	push	{r4, lr}
	__asm__ volatile(
    8b60:	f04f 0320 	mov.w	r3, #32
    8b64:	f3ef 8411 	mrs	r4, BASEPRI
    8b68:	f383 8811 	msr	BASEPRI, r3
    8b6c:	f3bf 8f6f 	isb	sy
		if (!killed) {
    8b70:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    8b74:	f013 0f28 	tst.w	r3, #40	; 0x28
    8b78:	d10d      	bne.n	8b96 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    8b7a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    8b7e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    8b80:	b10b      	cbz	r3, 8b86 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    8b82:	f7ff ffb8 	bl	8af6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8b86:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    8b8a:	f023 0314 	bic.w	r3, r3, #20
    8b8e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    8b92:	f7fc fb15 	bl	51c0 <ready_thread>
	__asm__ volatile(
    8b96:	f384 8811 	msr	BASEPRI, r4
    8b9a:	f3bf 8f6f 	isb	sy
}
    8b9e:	bd10      	pop	{r4, pc}

00008ba0 <z_ready_thread>:
{
    8ba0:	b510      	push	{r4, lr}
	__asm__ volatile(
    8ba2:	f04f 0320 	mov.w	r3, #32
    8ba6:	f3ef 8411 	mrs	r4, BASEPRI
    8baa:	f383 8811 	msr	BASEPRI, r3
    8bae:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    8bb2:	f7fc fb05 	bl	51c0 <ready_thread>
	__asm__ volatile(
    8bb6:	f384 8811 	msr	BASEPRI, r4
    8bba:	f3bf 8f6f 	isb	sy
}
    8bbe:	bd10      	pop	{r4, pc}

00008bc0 <z_unpend_first_thread>:
{
    8bc0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8bc2:	f04f 0320 	mov.w	r3, #32
    8bc6:	f3ef 8511 	mrs	r5, BASEPRI
    8bca:	f383 8811 	msr	BASEPRI, r3
    8bce:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8bd2:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8bd4:	42a0      	cmp	r0, r4
    8bd6:	d00d      	beq.n	8bf4 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    8bd8:	b134      	cbz	r4, 8be8 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    8bda:	4620      	mov	r0, r4
    8bdc:	f7ff ff8b 	bl	8af6 <unpend_thread_no_timeout>
    8be0:	f104 0018 	add.w	r0, r4, #24
    8be4:	f000 f81e 	bl	8c24 <z_abort_timeout>
	__asm__ volatile(
    8be8:	f385 8811 	msr	BASEPRI, r5
    8bec:	f3bf 8f6f 	isb	sy
}
    8bf0:	4620      	mov	r0, r4
    8bf2:	bd38      	pop	{r3, r4, r5, pc}
    8bf4:	2400      	movs	r4, #0
    8bf6:	e7f7      	b.n	8be8 <z_unpend_first_thread+0x28>

00008bf8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8bf8:	4603      	mov	r3, r0
    8bfa:	b920      	cbnz	r0, 8c06 <z_reschedule_irqlock+0xe>
    8bfc:	f3ef 8205 	mrs	r2, IPSR
    8c00:	b90a      	cbnz	r2, 8c06 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    8c02:	f7fa b9df 	b.w	2fc4 <arch_swap>
    8c06:	f383 8811 	msr	BASEPRI, r3
    8c0a:	f3bf 8f6f 	isb	sy
}
    8c0e:	4770      	bx	lr

00008c10 <z_reschedule_unlocked>:
	__asm__ volatile(
    8c10:	f04f 0320 	mov.w	r3, #32
    8c14:	f3ef 8011 	mrs	r0, BASEPRI
    8c18:	f383 8811 	msr	BASEPRI, r3
    8c1c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8c20:	f7ff bfea 	b.w	8bf8 <z_reschedule_irqlock>

00008c24 <z_abort_timeout>:
{
    8c24:	b510      	push	{r4, lr}
    8c26:	f04f 0220 	mov.w	r2, #32
    8c2a:	f3ef 8411 	mrs	r4, BASEPRI
    8c2e:	f382 8811 	msr	BASEPRI, r2
    8c32:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    8c36:	6803      	ldr	r3, [r0, #0]
    8c38:	b13b      	cbz	r3, 8c4a <z_abort_timeout+0x26>
			remove_timeout(to);
    8c3a:	f7fc fda9 	bl	5790 <remove_timeout>
			ret = 0;
    8c3e:	2000      	movs	r0, #0
	__asm__ volatile(
    8c40:	f384 8811 	msr	BASEPRI, r4
    8c44:	f3bf 8f6f 	isb	sy
}
    8c48:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    8c4a:	f06f 0015 	mvn.w	r0, #21
    8c4e:	e7f7      	b.n	8c40 <z_abort_timeout+0x1c>

00008c50 <z_get_next_timeout_expiry>:
{
    8c50:	b510      	push	{r4, lr}
	__asm__ volatile(
    8c52:	f04f 0320 	mov.w	r3, #32
    8c56:	f3ef 8411 	mrs	r4, BASEPRI
    8c5a:	f383 8811 	msr	BASEPRI, r3
    8c5e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    8c62:	f7fc fd6b 	bl	573c <next_timeout>
	__asm__ volatile(
    8c66:	f384 8811 	msr	BASEPRI, r4
    8c6a:	f3bf 8f6f 	isb	sy
}
    8c6e:	bd10      	pop	{r4, pc}

00008c70 <z_set_timeout_expiry>:
{
    8c70:	b570      	push	{r4, r5, r6, lr}
    8c72:	4604      	mov	r4, r0
    8c74:	460d      	mov	r5, r1
	__asm__ volatile(
    8c76:	f04f 0320 	mov.w	r3, #32
    8c7a:	f3ef 8611 	mrs	r6, BASEPRI
    8c7e:	f383 8811 	msr	BASEPRI, r3
    8c82:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    8c86:	f7fc fd59 	bl	573c <next_timeout>
			      || (ticks <= next_to);
    8c8a:	2801      	cmp	r0, #1
    8c8c:	dd07      	ble.n	8c9e <z_set_timeout_expiry+0x2e>
    8c8e:	42a0      	cmp	r0, r4
    8c90:	db05      	blt.n	8c9e <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8c92:	42a0      	cmp	r0, r4
    8c94:	4629      	mov	r1, r5
    8c96:	bfa8      	it	ge
    8c98:	4620      	movge	r0, r4
    8c9a:	f7f9 fb93 	bl	23c4 <sys_clock_set_timeout>
	__asm__ volatile(
    8c9e:	f386 8811 	msr	BASEPRI, r6
    8ca2:	f3bf 8f6f 	isb	sy
}
    8ca6:	bd70      	pop	{r4, r5, r6, pc}

00008ca8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8ca8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8caa:	f7fc fe61 	bl	5970 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8cae:	bd08      	pop	{r3, pc}

00008cb0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    8cb0:	f7fc be5e 	b.w	5970 <sys_clock_tick_get>

00008cb4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8cb4:	b108      	cbz	r0, 8cba <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8cb6:	f7f9 b875 	b.w	1da4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8cba:	4770      	bx	lr

00008cbc <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    8cbc:	4770      	bx	lr

00008cbe <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    8cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8cc2:	9f06      	ldr	r7, [sp, #24]
    8cc4:	4604      	mov	r4, r0
    8cc6:	4615      	mov	r5, r2
    8cc8:	461e      	mov	r6, r3
    8cca:	f7fd f853 	bl	5d74 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    8cce:	b938      	cbnz	r0, 8ce0 <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    8cd0:	463b      	mov	r3, r7
    8cd2:	4632      	mov	r2, r6
    8cd4:	4629      	mov	r1, r5
    8cd6:	4620      	mov	r0, r4
    8cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8cdc:	f7fd b870 	b.w	5dc0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    8ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008ce4 <PkaInitAndMutexLock>:
    8ce4:	460a      	mov	r2, r1
    8ce6:	2100      	movs	r1, #0
    8ce8:	f7fd baf6 	b.w	62d8 <PkaInitPka>

00008cec <SaSi_PalMemCopy>:
    8cec:	f7ff bafb 	b.w	82e6 <memcpy>

00008cf0 <SaSi_PalMemSet>:
    8cf0:	f7ff bb04 	b.w	82fc <memset>

00008cf4 <SaSi_PalMemSetZero>:
    8cf4:	460a      	mov	r2, r1
    8cf6:	2100      	movs	r1, #0
    8cf8:	f7ff bb00 	b.w	82fc <memset>

00008cfc <CRYS_COMMON_ReverseMemcpy32>:
    8cfc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8d00:	3804      	subs	r0, #4
    8d02:	428a      	cmp	r2, r1
    8d04:	d101      	bne.n	8d0a <CRYS_COMMON_ReverseMemcpy32+0xe>
    8d06:	2000      	movs	r0, #0
    8d08:	4770      	bx	lr
    8d0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    8d0e:	ba1b      	rev	r3, r3
    8d10:	f840 3f04 	str.w	r3, [r0, #4]!
    8d14:	e7f5      	b.n	8d02 <CRYS_COMMON_ReverseMemcpy32+0x6>
	...

00008d18 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8d18:	f7fb bcbc 	b.w	4694 <SystemInit>
