
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010200 <_vector_table>:
   10200:	28 26 00 20 61 25 01 00 91 87 01 00 c1 25 01 00     (&. a%.......%..
   10210:	c1 25 01 00 c1 25 01 00 c1 25 01 00 c1 25 01 00     .%...%...%...%..
	...
   1022c:	45 23 01 00 c1 25 01 00 00 00 00 00 ed 22 01 00     E#...%......."..
   1023c:	9d 1a 01 00                                         ....

00010240 <_irq_vector_table>:
   10240:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10250:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10260:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10270:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10280:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10290:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   102a0:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   102b0:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   102c0:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   102d0:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   102e0:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   102f0:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10300:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10310:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10320:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10330:	21 25 01 00 21 25 01 00 21 25 01 00 21 25 01 00     !%..!%..!%..!%..
   10340:	21 25 01 00                                         !%..

00010344 <_vector_end>:
	...

00010400 <m_firmware_info>:
   10400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
   10410:	00 fe 00 00 01 00 00 00 00 02 01 00 00 02 01 00     ................
   10420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0001043c <__aeabi_uldivmod>:
   1043c:	b953      	cbnz	r3, 10454 <__aeabi_uldivmod+0x18>
   1043e:	b94a      	cbnz	r2, 10454 <__aeabi_uldivmod+0x18>
   10440:	2900      	cmp	r1, #0
   10442:	bf08      	it	eq
   10444:	2800      	cmpeq	r0, #0
   10446:	bf1c      	itt	ne
   10448:	f04f 31ff 	movne.w	r1, #4294967295
   1044c:	f04f 30ff 	movne.w	r0, #4294967295
   10450:	f000 b80c 	b.w	1046c <__aeabi_idiv0>
   10454:	f1ad 0c08 	sub.w	ip, sp, #8
   10458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1045c:	f000 f824 	bl	104a8 <__udivmoddi4>
   10460:	f8dd e004 	ldr.w	lr, [sp, #4]
   10464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10468:	b004      	add	sp, #16
   1046a:	4770      	bx	lr

0001046c <__aeabi_idiv0>:
   1046c:	4770      	bx	lr
   1046e:	bf00      	nop

00010470 <__gnu_cmse_nonsecure_call>:
   10470:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
   10474:	4627      	mov	r7, r4
   10476:	46a0      	mov	r8, r4
   10478:	46a1      	mov	r9, r4
   1047a:	46a2      	mov	sl, r4
   1047c:	46a3      	mov	fp, r4
   1047e:	46a4      	mov	ip, r4
   10480:	b0a2      	sub	sp, #136	; 0x88
   10482:	ec2d 0a00 	vlstm	sp
   10486:	f384 8800 	msr	CPSR_f, r4
   1048a:	4625      	mov	r5, r4
   1048c:	4626      	mov	r6, r4
   1048e:	47a4      	blxns	r4
   10490:	f3ef 8514 	mrs	r5, CONTROL
   10494:	f015 0f08 	tst.w	r5, #8
   10498:	bf18      	it	ne
   1049a:	eeb0 0a40 	vmovne.f32	s0, s0
   1049e:	ec3d 0a00 	vlldm	sp
   104a2:	b022      	add	sp, #136	; 0x88
   104a4:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

000104a8 <__udivmoddi4>:
   104a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   104ac:	4686      	mov	lr, r0
   104ae:	468c      	mov	ip, r1
   104b0:	4608      	mov	r0, r1
   104b2:	9e08      	ldr	r6, [sp, #32]
   104b4:	4615      	mov	r5, r2
   104b6:	4674      	mov	r4, lr
   104b8:	4619      	mov	r1, r3
   104ba:	2b00      	cmp	r3, #0
   104bc:	f040 80c1 	bne.w	10642 <__udivmoddi4+0x19a>
   104c0:	4285      	cmp	r5, r0
   104c2:	fab2 f282 	clz	r2, r2
   104c6:	d945      	bls.n	10554 <__udivmoddi4+0xac>
   104c8:	b14a      	cbz	r2, 104de <__udivmoddi4+0x36>
   104ca:	f1c2 0320 	rsb	r3, r2, #32
   104ce:	fa00 fc02 	lsl.w	ip, r0, r2
   104d2:	4095      	lsls	r5, r2
   104d4:	4094      	lsls	r4, r2
   104d6:	fa2e f303 	lsr.w	r3, lr, r3
   104da:	ea43 0c0c 	orr.w	ip, r3, ip
   104de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   104e2:	b2a8      	uxth	r0, r5
   104e4:	0c23      	lsrs	r3, r4, #16
   104e6:	fbbc f8fe 	udiv	r8, ip, lr
   104ea:	fb0e cc18 	mls	ip, lr, r8, ip
   104ee:	fb08 f900 	mul.w	r9, r8, r0
   104f2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   104f6:	4599      	cmp	r9, r3
   104f8:	d928      	bls.n	1054c <__udivmoddi4+0xa4>
   104fa:	18eb      	adds	r3, r5, r3
   104fc:	f108 37ff 	add.w	r7, r8, #4294967295
   10500:	d204      	bcs.n	1050c <__udivmoddi4+0x64>
   10502:	4599      	cmp	r9, r3
   10504:	d902      	bls.n	1050c <__udivmoddi4+0x64>
   10506:	f1a8 0702 	sub.w	r7, r8, #2
   1050a:	442b      	add	r3, r5
   1050c:	eba3 0309 	sub.w	r3, r3, r9
   10510:	b2a4      	uxth	r4, r4
   10512:	fbb3 fcfe 	udiv	ip, r3, lr
   10516:	fb0e 331c 	mls	r3, lr, ip, r3
   1051a:	fb0c f000 	mul.w	r0, ip, r0
   1051e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10522:	42a0      	cmp	r0, r4
   10524:	d914      	bls.n	10550 <__udivmoddi4+0xa8>
   10526:	192c      	adds	r4, r5, r4
   10528:	f10c 33ff 	add.w	r3, ip, #4294967295
   1052c:	d204      	bcs.n	10538 <__udivmoddi4+0x90>
   1052e:	42a0      	cmp	r0, r4
   10530:	d902      	bls.n	10538 <__udivmoddi4+0x90>
   10532:	f1ac 0302 	sub.w	r3, ip, #2
   10536:	442c      	add	r4, r5
   10538:	1a24      	subs	r4, r4, r0
   1053a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   1053e:	b11e      	cbz	r6, 10548 <__udivmoddi4+0xa0>
   10540:	40d4      	lsrs	r4, r2
   10542:	2300      	movs	r3, #0
   10544:	6034      	str	r4, [r6, #0]
   10546:	6073      	str	r3, [r6, #4]
   10548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1054c:	4647      	mov	r7, r8
   1054e:	e7dd      	b.n	1050c <__udivmoddi4+0x64>
   10550:	4663      	mov	r3, ip
   10552:	e7f1      	b.n	10538 <__udivmoddi4+0x90>
   10554:	bb92      	cbnz	r2, 105bc <__udivmoddi4+0x114>
   10556:	1b43      	subs	r3, r0, r5
   10558:	2101      	movs	r1, #1
   1055a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1055e:	b2af      	uxth	r7, r5
   10560:	0c20      	lsrs	r0, r4, #16
   10562:	fbb3 fcfe 	udiv	ip, r3, lr
   10566:	fb0e 331c 	mls	r3, lr, ip, r3
   1056a:	fb0c f807 	mul.w	r8, ip, r7
   1056e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   10572:	4598      	cmp	r8, r3
   10574:	d961      	bls.n	1063a <__udivmoddi4+0x192>
   10576:	18eb      	adds	r3, r5, r3
   10578:	f10c 30ff 	add.w	r0, ip, #4294967295
   1057c:	d204      	bcs.n	10588 <__udivmoddi4+0xe0>
   1057e:	4598      	cmp	r8, r3
   10580:	d902      	bls.n	10588 <__udivmoddi4+0xe0>
   10582:	f1ac 0002 	sub.w	r0, ip, #2
   10586:	442b      	add	r3, r5
   10588:	eba3 0308 	sub.w	r3, r3, r8
   1058c:	b2a4      	uxth	r4, r4
   1058e:	fbb3 fcfe 	udiv	ip, r3, lr
   10592:	fb0e 331c 	mls	r3, lr, ip, r3
   10596:	fb0c f707 	mul.w	r7, ip, r7
   1059a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1059e:	42a7      	cmp	r7, r4
   105a0:	d94d      	bls.n	1063e <__udivmoddi4+0x196>
   105a2:	192c      	adds	r4, r5, r4
   105a4:	f10c 33ff 	add.w	r3, ip, #4294967295
   105a8:	d204      	bcs.n	105b4 <__udivmoddi4+0x10c>
   105aa:	42a7      	cmp	r7, r4
   105ac:	d902      	bls.n	105b4 <__udivmoddi4+0x10c>
   105ae:	f1ac 0302 	sub.w	r3, ip, #2
   105b2:	442c      	add	r4, r5
   105b4:	1be4      	subs	r4, r4, r7
   105b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   105ba:	e7c0      	b.n	1053e <__udivmoddi4+0x96>
   105bc:	f1c2 0320 	rsb	r3, r2, #32
   105c0:	4095      	lsls	r5, r2
   105c2:	4094      	lsls	r4, r2
   105c4:	fa20 f103 	lsr.w	r1, r0, r3
   105c8:	fa2e f303 	lsr.w	r3, lr, r3
   105cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   105d0:	4090      	lsls	r0, r2
   105d2:	b2af      	uxth	r7, r5
   105d4:	4303      	orrs	r3, r0
   105d6:	fbb1 fcfe 	udiv	ip, r1, lr
   105da:	fb0e 101c 	mls	r0, lr, ip, r1
   105de:	0c19      	lsrs	r1, r3, #16
   105e0:	fb0c f807 	mul.w	r8, ip, r7
   105e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   105e8:	4588      	cmp	r8, r1
   105ea:	d922      	bls.n	10632 <__udivmoddi4+0x18a>
   105ec:	1869      	adds	r1, r5, r1
   105ee:	f10c 30ff 	add.w	r0, ip, #4294967295
   105f2:	d204      	bcs.n	105fe <__udivmoddi4+0x156>
   105f4:	4588      	cmp	r8, r1
   105f6:	d902      	bls.n	105fe <__udivmoddi4+0x156>
   105f8:	f1ac 0002 	sub.w	r0, ip, #2
   105fc:	4429      	add	r1, r5
   105fe:	eba1 0108 	sub.w	r1, r1, r8
   10602:	b29b      	uxth	r3, r3
   10604:	fbb1 fcfe 	udiv	ip, r1, lr
   10608:	fb0e 111c 	mls	r1, lr, ip, r1
   1060c:	fb0c f707 	mul.w	r7, ip, r7
   10610:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   10614:	429f      	cmp	r7, r3
   10616:	d90e      	bls.n	10636 <__udivmoddi4+0x18e>
   10618:	18eb      	adds	r3, r5, r3
   1061a:	f10c 31ff 	add.w	r1, ip, #4294967295
   1061e:	d204      	bcs.n	1062a <__udivmoddi4+0x182>
   10620:	429f      	cmp	r7, r3
   10622:	d902      	bls.n	1062a <__udivmoddi4+0x182>
   10624:	f1ac 0102 	sub.w	r1, ip, #2
   10628:	442b      	add	r3, r5
   1062a:	1bdb      	subs	r3, r3, r7
   1062c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10630:	e793      	b.n	1055a <__udivmoddi4+0xb2>
   10632:	4660      	mov	r0, ip
   10634:	e7e3      	b.n	105fe <__udivmoddi4+0x156>
   10636:	4661      	mov	r1, ip
   10638:	e7f7      	b.n	1062a <__udivmoddi4+0x182>
   1063a:	4660      	mov	r0, ip
   1063c:	e7a4      	b.n	10588 <__udivmoddi4+0xe0>
   1063e:	4663      	mov	r3, ip
   10640:	e7b8      	b.n	105b4 <__udivmoddi4+0x10c>
   10642:	4283      	cmp	r3, r0
   10644:	d906      	bls.n	10654 <__udivmoddi4+0x1ac>
   10646:	b916      	cbnz	r6, 1064e <__udivmoddi4+0x1a6>
   10648:	2100      	movs	r1, #0
   1064a:	4608      	mov	r0, r1
   1064c:	e77c      	b.n	10548 <__udivmoddi4+0xa0>
   1064e:	e9c6 e000 	strd	lr, r0, [r6]
   10652:	e7f9      	b.n	10648 <__udivmoddi4+0x1a0>
   10654:	fab3 f783 	clz	r7, r3
   10658:	b98f      	cbnz	r7, 1067e <__udivmoddi4+0x1d6>
   1065a:	4283      	cmp	r3, r0
   1065c:	d301      	bcc.n	10662 <__udivmoddi4+0x1ba>
   1065e:	4572      	cmp	r2, lr
   10660:	d808      	bhi.n	10674 <__udivmoddi4+0x1cc>
   10662:	ebbe 0402 	subs.w	r4, lr, r2
   10666:	eb60 0303 	sbc.w	r3, r0, r3
   1066a:	2001      	movs	r0, #1
   1066c:	469c      	mov	ip, r3
   1066e:	b91e      	cbnz	r6, 10678 <__udivmoddi4+0x1d0>
   10670:	2100      	movs	r1, #0
   10672:	e769      	b.n	10548 <__udivmoddi4+0xa0>
   10674:	4638      	mov	r0, r7
   10676:	e7fa      	b.n	1066e <__udivmoddi4+0x1c6>
   10678:	e9c6 4c00 	strd	r4, ip, [r6]
   1067c:	e7f8      	b.n	10670 <__udivmoddi4+0x1c8>
   1067e:	f1c7 0c20 	rsb	ip, r7, #32
   10682:	40bb      	lsls	r3, r7
   10684:	fa0e f507 	lsl.w	r5, lr, r7
   10688:	fa22 f40c 	lsr.w	r4, r2, ip
   1068c:	fa2e f10c 	lsr.w	r1, lr, ip
   10690:	40ba      	lsls	r2, r7
   10692:	431c      	orrs	r4, r3
   10694:	fa20 f30c 	lsr.w	r3, r0, ip
   10698:	40b8      	lsls	r0, r7
   1069a:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1069e:	4301      	orrs	r1, r0
   106a0:	fa1f fe84 	uxth.w	lr, r4
   106a4:	fbb3 f8f9 	udiv	r8, r3, r9
   106a8:	fb09 3018 	mls	r0, r9, r8, r3
   106ac:	0c0b      	lsrs	r3, r1, #16
   106ae:	fb08 fa0e 	mul.w	sl, r8, lr
   106b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   106b6:	459a      	cmp	sl, r3
   106b8:	d940      	bls.n	1073c <__udivmoddi4+0x294>
   106ba:	18e3      	adds	r3, r4, r3
   106bc:	f108 30ff 	add.w	r0, r8, #4294967295
   106c0:	d204      	bcs.n	106cc <__udivmoddi4+0x224>
   106c2:	459a      	cmp	sl, r3
   106c4:	d902      	bls.n	106cc <__udivmoddi4+0x224>
   106c6:	f1a8 0002 	sub.w	r0, r8, #2
   106ca:	4423      	add	r3, r4
   106cc:	eba3 030a 	sub.w	r3, r3, sl
   106d0:	b289      	uxth	r1, r1
   106d2:	fbb3 f8f9 	udiv	r8, r3, r9
   106d6:	fb09 3318 	mls	r3, r9, r8, r3
   106da:	fb08 fe0e 	mul.w	lr, r8, lr
   106de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   106e2:	458e      	cmp	lr, r1
   106e4:	d92c      	bls.n	10740 <__udivmoddi4+0x298>
   106e6:	1861      	adds	r1, r4, r1
   106e8:	f108 33ff 	add.w	r3, r8, #4294967295
   106ec:	d204      	bcs.n	106f8 <__udivmoddi4+0x250>
   106ee:	458e      	cmp	lr, r1
   106f0:	d902      	bls.n	106f8 <__udivmoddi4+0x250>
   106f2:	f1a8 0302 	sub.w	r3, r8, #2
   106f6:	4421      	add	r1, r4
   106f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   106fc:	eba1 010e 	sub.w	r1, r1, lr
   10700:	fba0 9802 	umull	r9, r8, r0, r2
   10704:	4541      	cmp	r1, r8
   10706:	46ce      	mov	lr, r9
   10708:	4643      	mov	r3, r8
   1070a:	d302      	bcc.n	10712 <__udivmoddi4+0x26a>
   1070c:	d106      	bne.n	1071c <__udivmoddi4+0x274>
   1070e:	454d      	cmp	r5, r9
   10710:	d204      	bcs.n	1071c <__udivmoddi4+0x274>
   10712:	3801      	subs	r0, #1
   10714:	ebb9 0e02 	subs.w	lr, r9, r2
   10718:	eb68 0304 	sbc.w	r3, r8, r4
   1071c:	2e00      	cmp	r6, #0
   1071e:	d0a7      	beq.n	10670 <__udivmoddi4+0x1c8>
   10720:	ebb5 020e 	subs.w	r2, r5, lr
   10724:	eb61 0103 	sbc.w	r1, r1, r3
   10728:	fa01 fc0c 	lsl.w	ip, r1, ip
   1072c:	fa22 f307 	lsr.w	r3, r2, r7
   10730:	40f9      	lsrs	r1, r7
   10732:	ea4c 0303 	orr.w	r3, ip, r3
   10736:	e9c6 3100 	strd	r3, r1, [r6]
   1073a:	e799      	b.n	10670 <__udivmoddi4+0x1c8>
   1073c:	4640      	mov	r0, r8
   1073e:	e7c5      	b.n	106cc <__udivmoddi4+0x224>
   10740:	4643      	mov	r3, r8
   10742:	e7d9      	b.n	106f8 <__udivmoddi4+0x250>

00010744 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10744:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   10746:	b510      	push	{r4, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   10748:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1074c:	2b03      	cmp	r3, #3
{
   1074e:	4604      	mov	r4, r0
	notify->result = res;
   10750:	6081      	str	r1, [r0, #8]
	switch (method) {
   10752:	d002      	beq.n	1075a <sys_notify_finalize+0x16>
   10754:	b12b      	cbz	r3, 10762 <sys_notify_finalize+0x1e>
	sys_notify_generic_callback rv = NULL;
   10756:	2000      	movs	r0, #0
   10758:	e000      	b.n	1075c <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1075a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1075c:	2300      	movs	r3, #0
   1075e:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   10760:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
   10762:	2245      	movs	r2, #69	; 0x45
   10764:	4904      	ldr	r1, [pc, #16]	; (10778 <sys_notify_finalize+0x34>)
   10766:	4805      	ldr	r0, [pc, #20]	; (1077c <sys_notify_finalize+0x38>)
   10768:	f007 fe8b 	bl	18482 <printk>
   1076c:	2145      	movs	r1, #69	; 0x45
   1076e:	4802      	ldr	r0, [pc, #8]	; (10778 <sys_notify_finalize+0x34>)
   10770:	f007 ff50 	bl	18614 <assert_post_action>
   10774:	e7ef      	b.n	10756 <sys_notify_finalize+0x12>
   10776:	bf00      	nop
   10778:	00019173 	.word	0x00019173
   1077c:	00019196 	.word	0x00019196

00010780 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10780:	680b      	ldr	r3, [r1, #0]
   10782:	3301      	adds	r3, #1
   10784:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10786:	4b01      	ldr	r3, [pc, #4]	; (1078c <char_out+0xc>)
   10788:	681b      	ldr	r3, [r3, #0]
   1078a:	4718      	bx	r3
   1078c:	20000000 	.word	0x20000000

00010790 <__printk_hook_install>:
	_char_out = fn;
   10790:	4b01      	ldr	r3, [pc, #4]	; (10798 <__printk_hook_install+0x8>)
   10792:	6018      	str	r0, [r3, #0]
}
   10794:	4770      	bx	lr
   10796:	bf00      	nop
   10798:	20000000 	.word	0x20000000

0001079c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1079c:	b507      	push	{r0, r1, r2, lr}
   1079e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   107a0:	2100      	movs	r1, #0
{
   107a2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   107a4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   107a6:	4803      	ldr	r0, [pc, #12]	; (107b4 <vprintk+0x18>)
   107a8:	a901      	add	r1, sp, #4
   107aa:	f000 fa9b 	bl	10ce4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   107ae:	b003      	add	sp, #12
   107b0:	f85d fb04 	ldr.w	pc, [sp], #4
   107b4:	00010781 	.word	0x00010781

000107b8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   107b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   107bc:	8b85      	ldrh	r5, [r0, #28]
{
   107be:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   107c0:	072b      	lsls	r3, r5, #28
{
   107c2:	4617      	mov	r7, r2
	if (processing) {
   107c4:	d461      	bmi.n	1088a <process_event+0xd2>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   107c6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   107c8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   107cc:	f000 81c4 	beq.w	10b58 <process_event+0x3a0>
			evt = process_recheck(mgr);
		}

		if (evt == EVT_NOP) {
   107d0:	46aa      	mov	sl, r5
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
			res = mgr->last_res;
   107d2:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   107d6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   107d8:	f1b9 0f00 	cmp.w	r9, #0
   107dc:	da70      	bge.n	108c0 <process_event+0x108>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   107de:	2200      	movs	r2, #0
		*clients = mgr->clients;
   107e0:	f8d4 8000 	ldr.w	r8, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   107e4:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   107e8:	e9c4 2200 	strd	r2, r2, [r4]
   107ec:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   107f0:	83a3      	strh	r3, [r4, #28]
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   107f2:	8ba3      	ldrh	r3, [r4, #28]
   107f4:	2600      	movs	r6, #0
   107f6:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   107fa:	4555      	cmp	r5, sl
   107fc:	f040 817e 	bne.w	10afc <process_event+0x344>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10800:	f04f 0a00 	mov.w	sl, #0

		evt = EVT_NOP;
		if (do_monitors
		    || !sys_slist_is_empty(&clients)
   10804:	f1b8 0f00 	cmp.w	r8, #0
   10808:	f000 80e1 	beq.w	109ce <process_event+0x216>
		    || (transit != NULL)) {
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1080c:	f043 0308 	orr.w	r3, r3, #8

			mgr->flags = flags;
			state = flags & ONOFF_STATE_MASK;

			k_spin_unlock(&mgr->lock, key);
   10810:	f104 0b14 	add.w	fp, r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10814:	4658      	mov	r0, fp
			mgr->flags = flags;
   10816:	83a3      	strh	r3, [r4, #28]
   10818:	f003 fc46 	bl	140a8 <z_spin_unlock_valid>
   1081c:	b940      	cbnz	r0, 10830 <process_event+0x78>
   1081e:	49b1      	ldr	r1, [pc, #708]	; (10ae4 <process_event+0x32c>)
   10820:	48b1      	ldr	r0, [pc, #708]	; (10ae8 <process_event+0x330>)
   10822:	22ac      	movs	r2, #172	; 0xac
   10824:	f007 fe2d 	bl	18482 <printk>
   10828:	21ac      	movs	r1, #172	; 0xac
   1082a:	48ae      	ldr	r0, [pc, #696]	; (10ae4 <process_event+0x32c>)
   1082c:	f007 fef2 	bl	18614 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10830:	f387 8811 	msr	BASEPRI, r7
   10834:	f3bf 8f6f 	isb	sy

			if (do_monitors) {
   10838:	f1ba 0f00 	cmp.w	sl, #0
   1083c:	f040 8165 	bne.w	10b0a <process_event+0x352>
	while (!sys_slist_is_empty(list)) {
   10840:	f1b8 0f00 	cmp.w	r8, #0
   10844:	f040 8176 	bne.w	10b34 <process_event+0x37c>

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
			}

			if (transit != NULL) {
   10848:	b116      	cbz	r6, 10850 <process_event+0x98>
				transit(mgr, transition_complete);
   1084a:	4620      	mov	r0, r4
   1084c:	49a7      	ldr	r1, [pc, #668]	; (10aec <process_event+0x334>)
   1084e:	47b0      	blx	r6
	__asm__ volatile(
   10850:	f04f 0320 	mov.w	r3, #32
   10854:	f3ef 8711 	mrs	r7, BASEPRI
   10858:	f383 8811 	msr	BASEPRI, r3
   1085c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10860:	4658      	mov	r0, fp
   10862:	f003 fc13 	bl	1408c <z_spin_lock_valid>
   10866:	b940      	cbnz	r0, 1087a <process_event+0xc2>
   10868:	499e      	ldr	r1, [pc, #632]	; (10ae4 <process_event+0x32c>)
   1086a:	489f      	ldr	r0, [pc, #636]	; (10ae8 <process_event+0x330>)
   1086c:	2281      	movs	r2, #129	; 0x81
   1086e:	f007 fe08 	bl	18482 <printk>
   10872:	2181      	movs	r1, #129	; 0x81
   10874:	489b      	ldr	r0, [pc, #620]	; (10ae4 <process_event+0x32c>)
   10876:	f007 fecd 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   1087a:	4658      	mov	r0, fp
   1087c:	f003 fc22 	bl	140c4 <z_spin_lock_set_owner>
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10880:	8ba3      	ldrh	r3, [r4, #28]
   10882:	f023 0308 	bic.w	r3, r3, #8
   10886:	83a3      	strh	r3, [r4, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
   10888:	e056      	b.n	10938 <process_event+0x180>
		if (evt == EVT_COMPLETE) {
   1088a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1088c:	bf0c      	ite	eq
   1088e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10892:	f045 0520 	orrne.w	r5, r5, #32
   10896:	8385      	strh	r5, [r0, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10898:	f104 0014 	add.w	r0, r4, #20
   1089c:	f003 fc04 	bl	140a8 <z_spin_unlock_valid>
   108a0:	b940      	cbnz	r0, 108b4 <process_event+0xfc>
   108a2:	4990      	ldr	r1, [pc, #576]	; (10ae4 <process_event+0x32c>)
   108a4:	4890      	ldr	r0, [pc, #576]	; (10ae8 <process_event+0x330>)
   108a6:	22ac      	movs	r2, #172	; 0xac
   108a8:	f007 fdeb 	bl	18482 <printk>
   108ac:	21ac      	movs	r1, #172	; 0xac
   108ae:	488d      	ldr	r0, [pc, #564]	; (10ae4 <process_event+0x32c>)
   108b0:	f007 feb0 	bl	18614 <assert_post_action>
	__asm__ volatile(
   108b4:	f387 8811 	msr	BASEPRI, r7
   108b8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   108bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108c0:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   108c4:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   108c6:	2901      	cmp	r1, #1
   108c8:	d821      	bhi.n	1090e <process_event+0x156>
	list->head = NULL;
   108ca:	2100      	movs	r1, #0
		if (state == ONOFF_STATE_TO_ON) {
   108cc:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   108ce:	f8d4 8000 	ldr.w	r8, [r4]
	list->tail = NULL;
   108d2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   108d6:	d116      	bne.n	10906 <process_event+0x14e>
		*clients = mgr->clients;
   108d8:	4642      	mov	r2, r8
   108da:	e003      	b.n	108e4 <process_event+0x12c>
				mgr->refs += 1U;
   108dc:	8be1      	ldrh	r1, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   108de:	6812      	ldr	r2, [r2, #0]
   108e0:	3101      	adds	r1, #1
   108e2:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   108e4:	2a00      	cmp	r2, #0
   108e6:	d1f9      	bne.n	108dc <process_event+0x124>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108e8:	f023 0307 	bic.w	r3, r3, #7
   108ec:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   108f0:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   108f2:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   108f4:	f007 fdd2 	bl	1849c <process_recheck>
   108f8:	2800      	cmp	r0, #0
   108fa:	f43f af7a 	beq.w	107f2 <process_event+0x3a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   108fe:	f042 0220 	orr.w	r2, r2, #32
   10902:	83a2      	strh	r2, [r4, #28]
   10904:	e775      	b.n	107f2 <process_event+0x3a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10906:	f023 0307 	bic.w	r3, r3, #7
   1090a:	b29a      	uxth	r2, r3
}
   1090c:	e7f0      	b.n	108f0 <process_event+0x138>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1090e:	2a04      	cmp	r2, #4
   10910:	d11e      	bne.n	10950 <process_event+0x198>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10912:	f023 0307 	bic.w	r3, r3, #7
   10916:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   10918:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1091a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1091c:	f007 fdbe 	bl	1849c <process_recheck>
   10920:	b110      	cbz	r0, 10928 <process_event+0x170>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10922:	f042 0220 	orr.w	r2, r2, #32
   10926:	83a2      	strh	r2, [r4, #28]
		onoff_transition_fn transit = NULL;
   10928:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1092a:	8ba3      	ldrh	r3, [r4, #28]
   1092c:	46b0      	mov	r8, r6
   1092e:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10932:	4555      	cmp	r5, sl
   10934:	f040 80e2 	bne.w	10afc <process_event+0x344>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10938:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
   1093c:	f01a 0f10 	tst.w	sl, #16
   10940:	f000 8101 	beq.w	10b46 <process_event+0x38e>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10944:	f02a 0310 	bic.w	r3, sl, #16
   10948:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1094a:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
   1094e:	e740      	b.n	107d2 <process_event+0x1a>
		__ASSERT_NO_MSG(false);
   10950:	f240 121b 	movw	r2, #283	; 0x11b
   10954:	4966      	ldr	r1, [pc, #408]	; (10af0 <process_event+0x338>)
   10956:	4864      	ldr	r0, [pc, #400]	; (10ae8 <process_event+0x330>)
   10958:	f007 fd93 	bl	18482 <printk>
   1095c:	f240 111b 	movw	r1, #283	; 0x11b
   10960:	4863      	ldr	r0, [pc, #396]	; (10af0 <process_event+0x338>)
   10962:	f007 fe57 	bl	18614 <assert_post_action>
   10966:	e7df      	b.n	10928 <process_event+0x170>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   10968:	b155      	cbz	r5, 10980 <process_event+0x1c8>
   1096a:	4961      	ldr	r1, [pc, #388]	; (10af0 <process_event+0x338>)
   1096c:	485e      	ldr	r0, [pc, #376]	; (10ae8 <process_event+0x330>)
   1096e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   10972:	f007 fd86 	bl	18482 <printk>
   10976:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1097a:	485d      	ldr	r0, [pc, #372]	; (10af0 <process_event+0x338>)
   1097c:	f007 fe4a 	bl	18614 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10980:	6823      	ldr	r3, [r4, #0]
   10982:	b953      	cbnz	r3, 1099a <process_event+0x1e2>
   10984:	495a      	ldr	r1, [pc, #360]	; (10af0 <process_event+0x338>)
   10986:	4858      	ldr	r0, [pc, #352]	; (10ae8 <process_event+0x330>)
   10988:	f240 1257 	movw	r2, #343	; 0x157
   1098c:	f007 fd79 	bl	18482 <printk>
   10990:	f240 1157 	movw	r1, #343	; 0x157
   10994:	4856      	ldr	r0, [pc, #344]	; (10af0 <process_event+0x338>)
   10996:	f007 fe3d 	bl	18614 <assert_post_action>
			transit = mgr->transitions->start;
   1099a:	6923      	ldr	r3, [r4, #16]
   1099c:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1099e:	b956      	cbnz	r6, 109b6 <process_event+0x1fe>
   109a0:	4953      	ldr	r1, [pc, #332]	; (10af0 <process_event+0x338>)
   109a2:	4851      	ldr	r0, [pc, #324]	; (10ae8 <process_event+0x330>)
   109a4:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   109a8:	f007 fd6b 	bl	18482 <printk>
   109ac:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   109b0:	484f      	ldr	r0, [pc, #316]	; (10af0 <process_event+0x338>)
   109b2:	f007 fe2f 	bl	18614 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   109b6:	8ba3      	ldrh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   109b8:	2d06      	cmp	r5, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   109ba:	f023 0307 	bic.w	r3, r3, #7
   109be:	f043 0306 	orr.w	r3, r3, #6
   109c2:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   109c4:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   109c6:	f040 8095 	bne.w	10af4 <process_event+0x33c>
		res = 0;
   109ca:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   109ce:	f04f 0a00 	mov.w	sl, #0
   109d2:	46d0      	mov	r8, sl
		    || (transit != NULL)) {
   109d4:	2e00      	cmp	r6, #0
   109d6:	f47f af19 	bne.w	1080c <process_event+0x54>
   109da:	e7ad      	b.n	10938 <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   109dc:	2d02      	cmp	r5, #2
   109de:	d00a      	beq.n	109f6 <process_event+0x23e>
   109e0:	4943      	ldr	r1, [pc, #268]	; (10af0 <process_event+0x338>)
   109e2:	4841      	ldr	r0, [pc, #260]	; (10ae8 <process_event+0x330>)
   109e4:	f240 125d 	movw	r2, #349	; 0x15d
   109e8:	f007 fd4b 	bl	18482 <printk>
   109ec:	f240 115d 	movw	r1, #349	; 0x15d
   109f0:	483f      	ldr	r0, [pc, #252]	; (10af0 <process_event+0x338>)
   109f2:	f007 fe0f 	bl	18614 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   109f6:	8be3      	ldrh	r3, [r4, #30]
   109f8:	b153      	cbz	r3, 10a10 <process_event+0x258>
   109fa:	493d      	ldr	r1, [pc, #244]	; (10af0 <process_event+0x338>)
   109fc:	483a      	ldr	r0, [pc, #232]	; (10ae8 <process_event+0x330>)
   109fe:	f44f 72af 	mov.w	r2, #350	; 0x15e
   10a02:	f007 fd3e 	bl	18482 <printk>
   10a06:	f44f 71af 	mov.w	r1, #350	; 0x15e
   10a0a:	4839      	ldr	r0, [pc, #228]	; (10af0 <process_event+0x338>)
   10a0c:	f007 fe02 	bl	18614 <assert_post_action>
			transit = mgr->transitions->stop;
   10a10:	6923      	ldr	r3, [r4, #16]
   10a12:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10a14:	b956      	cbnz	r6, 10a2c <process_event+0x274>
   10a16:	4936      	ldr	r1, [pc, #216]	; (10af0 <process_event+0x338>)
   10a18:	4833      	ldr	r0, [pc, #204]	; (10ae8 <process_event+0x330>)
   10a1a:	f240 1261 	movw	r2, #353	; 0x161
   10a1e:	f007 fd30 	bl	18482 <printk>
   10a22:	f240 1161 	movw	r1, #353	; 0x161
   10a26:	4832      	ldr	r0, [pc, #200]	; (10af0 <process_event+0x338>)
   10a28:	f007 fdf4 	bl	18614 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10a2c:	8ba3      	ldrh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   10a2e:	2d04      	cmp	r5, #4
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10a30:	f023 0307 	bic.w	r3, r3, #7
   10a34:	f043 0304 	orr.w	r3, r3, #4
   10a38:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   10a3a:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   10a3c:	d0c5      	beq.n	109ca <process_event+0x212>
   10a3e:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10a42:	2504      	movs	r5, #4
		res = 0;
   10a44:	46c1      	mov	r9, r8
   10a46:	e059      	b.n	10afc <process_event+0x344>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10a48:	2d01      	cmp	r5, #1
   10a4a:	d00a      	beq.n	10a62 <process_event+0x2aa>
   10a4c:	4928      	ldr	r1, [pc, #160]	; (10af0 <process_event+0x338>)
   10a4e:	4826      	ldr	r0, [pc, #152]	; (10ae8 <process_event+0x330>)
   10a50:	f44f 72b2 	mov.w	r2, #356	; 0x164
   10a54:	f007 fd15 	bl	18482 <printk>
   10a58:	f44f 71b2 	mov.w	r1, #356	; 0x164
   10a5c:	4824      	ldr	r0, [pc, #144]	; (10af0 <process_event+0x338>)
   10a5e:	f007 fdd9 	bl	18614 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10a62:	6823      	ldr	r3, [r4, #0]
   10a64:	b953      	cbnz	r3, 10a7c <process_event+0x2c4>
   10a66:	4922      	ldr	r1, [pc, #136]	; (10af0 <process_event+0x338>)
   10a68:	481f      	ldr	r0, [pc, #124]	; (10ae8 <process_event+0x330>)
   10a6a:	f240 1265 	movw	r2, #357	; 0x165
   10a6e:	f007 fd08 	bl	18482 <printk>
   10a72:	f240 1165 	movw	r1, #357	; 0x165
   10a76:	481e      	ldr	r0, [pc, #120]	; (10af0 <process_event+0x338>)
   10a78:	f007 fdcc 	bl	18614 <assert_post_action>
			transit = mgr->transitions->reset;
   10a7c:	6923      	ldr	r3, [r4, #16]
   10a7e:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   10a80:	b956      	cbnz	r6, 10a98 <process_event+0x2e0>
   10a82:	491b      	ldr	r1, [pc, #108]	; (10af0 <process_event+0x338>)
   10a84:	4818      	ldr	r0, [pc, #96]	; (10ae8 <process_event+0x330>)
   10a86:	f44f 72b4 	mov.w	r2, #360	; 0x168
   10a8a:	f007 fcfa 	bl	18482 <printk>
   10a8e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   10a92:	4817      	ldr	r0, [pc, #92]	; (10af0 <process_event+0x338>)
   10a94:	f007 fdbe 	bl	18614 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10a98:	8ba3      	ldrh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   10a9a:	2d05      	cmp	r5, #5
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10a9c:	f023 0307 	bic.w	r3, r3, #7
   10aa0:	f043 0305 	orr.w	r3, r3, #5
   10aa4:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   10aa6:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
   10aa8:	d08f      	beq.n	109ca <process_event+0x212>
   10aaa:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10aae:	2505      	movs	r5, #5
		res = 0;
   10ab0:	46c1      	mov	r9, r8
   10ab2:	e023      	b.n	10afc <process_event+0x344>
			__ASSERT_NO_MSG(false);
   10ab4:	f240 126b 	movw	r2, #363	; 0x16b
   10ab8:	490d      	ldr	r1, [pc, #52]	; (10af0 <process_event+0x338>)
   10aba:	480b      	ldr	r0, [pc, #44]	; (10ae8 <process_event+0x330>)
   10abc:	f007 fce1 	bl	18482 <printk>
   10ac0:	f240 116b 	movw	r1, #363	; 0x16b
   10ac4:	480a      	ldr	r0, [pc, #40]	; (10af0 <process_event+0x338>)
   10ac6:	f007 fda5 	bl	18614 <assert_post_action>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10aca:	8ba3      	ldrh	r3, [r4, #28]
   10acc:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10ad0:	42aa      	cmp	r2, r5
   10ad2:	f43f af31 	beq.w	10938 <process_event+0x180>
   10ad6:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10ada:	4615      	mov	r5, r2
		onoff_transition_fn transit = NULL;
   10adc:	4646      	mov	r6, r8
		res = 0;
   10ade:	46c1      	mov	r9, r8
   10ae0:	e00c      	b.n	10afc <process_event+0x344>
   10ae2:	bf00      	nop
   10ae4:	000191d0 	.word	0x000191d0
   10ae8:	00019196 	.word	0x00019196
   10aec:	00010b85 	.word	0x00010b85
   10af0:	000191ae 	.word	0x000191ae
				   && !sys_slist_is_empty(&mgr->monitors);
   10af4:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10af8:	2506      	movs	r5, #6
		res = 0;
   10afa:	46c1      	mov	r9, r8
				   && !sys_slist_is_empty(&mgr->monitors);
   10afc:	68a2      	ldr	r2, [r4, #8]
   10afe:	2a00      	cmp	r2, #0
   10b00:	f43f ae7e 	beq.w	10800 <process_event+0x48>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10b04:	f04f 0a01 	mov.w	sl, #1
   10b08:	e680      	b.n	1080c <process_event+0x54>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10b0a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10b0c:	2900      	cmp	r1, #0
   10b0e:	f43f ae97 	beq.w	10840 <process_event+0x88>
	return node->next;
   10b12:	680f      	ldr	r7, [r1, #0]
   10b14:	2900      	cmp	r1, #0
   10b16:	f43f ae93 	beq.w	10840 <process_event+0x88>
		mon->callback(mgr, mon, state, res);
   10b1a:	464b      	mov	r3, r9
   10b1c:	462a      	mov	r2, r5
   10b1e:	4620      	mov	r0, r4
   10b20:	f8d1 a004 	ldr.w	sl, [r1, #4]
   10b24:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10b26:	b11f      	cbz	r7, 10b30 <process_event+0x378>
   10b28:	683b      	ldr	r3, [r7, #0]
   10b2a:	4639      	mov	r1, r7
   10b2c:	461f      	mov	r7, r3
   10b2e:	e7f1      	b.n	10b14 <process_event+0x35c>
   10b30:	463b      	mov	r3, r7
   10b32:	e7fa      	b.n	10b2a <process_event+0x372>
   10b34:	4641      	mov	r1, r8
		notify_one(mgr, cli, state, res);
   10b36:	464b      	mov	r3, r9
   10b38:	462a      	mov	r2, r5
   10b3a:	4620      	mov	r0, r4
   10b3c:	f8d8 8000 	ldr.w	r8, [r8]
   10b40:	f007 fcd8 	bl	184f4 <notify_one>
   10b44:	e67c      	b.n	10840 <process_event+0x88>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10b46:	f01a 0f20 	tst.w	sl, #32
   10b4a:	f43f aea5 	beq.w	10898 <process_event+0xe0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10b4e:	f02a 0320 	bic.w	r3, sl, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10b52:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   10b54:	f00a 0507 	and.w	r5, sl, #7
			evt = process_recheck(mgr);
   10b58:	4620      	mov	r0, r4
   10b5a:	f007 fc9f 	bl	1849c <process_recheck>
		if (evt == EVT_NOP) {
   10b5e:	2800      	cmp	r0, #0
   10b60:	f43f ae9a 	beq.w	10898 <process_event+0xe0>
		if (evt == EVT_COMPLETE) {
   10b64:	3801      	subs	r0, #1
   10b66:	2804      	cmp	r0, #4
   10b68:	d8a4      	bhi.n	10ab4 <process_event+0x2fc>
   10b6a:	a301      	add	r3, pc, #4	; (adr r3, 10b70 <process_event+0x3b8>)
   10b6c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   10b70:	000107d1 	.word	0x000107d1
   10b74:	00010ab5 	.word	0x00010ab5
   10b78:	00010969 	.word	0x00010969
   10b7c:	000109dd 	.word	0x000109dd
   10b80:	00010a49 	.word	0x00010a49

00010b84 <transition_complete>:
{
   10b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b86:	4604      	mov	r4, r0
   10b88:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10b8a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   10b8e:	f04f 0320 	mov.w	r3, #32
   10b92:	f3ef 8711 	mrs	r7, BASEPRI
   10b96:	f383 8811 	msr	BASEPRI, r3
   10b9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10b9e:	4630      	mov	r0, r6
   10ba0:	f003 fa74 	bl	1408c <z_spin_lock_valid>
   10ba4:	b940      	cbnz	r0, 10bb8 <transition_complete+0x34>
   10ba6:	490a      	ldr	r1, [pc, #40]	; (10bd0 <transition_complete+0x4c>)
   10ba8:	480a      	ldr	r0, [pc, #40]	; (10bd4 <transition_complete+0x50>)
   10baa:	2281      	movs	r2, #129	; 0x81
   10bac:	f007 fc69 	bl	18482 <printk>
   10bb0:	2181      	movs	r1, #129	; 0x81
   10bb2:	4807      	ldr	r0, [pc, #28]	; (10bd0 <transition_complete+0x4c>)
   10bb4:	f007 fd2e 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   10bb8:	4630      	mov	r0, r6
   10bba:	f003 fa83 	bl	140c4 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   10bbe:	463a      	mov	r2, r7
   10bc0:	4620      	mov	r0, r4
	mgr->last_res = res;
   10bc2:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   10bc4:	2101      	movs	r1, #1
}
   10bc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   10bca:	f7ff bdf5 	b.w	107b8 <process_event>
   10bce:	bf00      	nop
   10bd0:	000191d0 	.word	0x000191d0
   10bd4:	00019196 	.word	0x00019196

00010bd8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10bdc:	4604      	mov	r4, r0
   10bde:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10be0:	f007 fc78 	bl	184d4 <validate_args>

	if (rv < 0) {
   10be4:	1e05      	subs	r5, r0, #0
   10be6:	db6d      	blt.n	10cc4 <onoff_request+0xec>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10be8:	f104 0914 	add.w	r9, r4, #20
   10bec:	f04f 0320 	mov.w	r3, #32
   10bf0:	f3ef 8a11 	mrs	sl, BASEPRI
   10bf4:	f383 8811 	msr	BASEPRI, r3
   10bf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10bfc:	4648      	mov	r0, r9
   10bfe:	f003 fa45 	bl	1408c <z_spin_lock_valid>
   10c02:	b940      	cbnz	r0, 10c16 <onoff_request+0x3e>
   10c04:	4934      	ldr	r1, [pc, #208]	; (10cd8 <onoff_request+0x100>)
   10c06:	4835      	ldr	r0, [pc, #212]	; (10cdc <onoff_request+0x104>)
   10c08:	2281      	movs	r2, #129	; 0x81
   10c0a:	f007 fc3a 	bl	18482 <printk>
   10c0e:	2181      	movs	r1, #129	; 0x81
   10c10:	4831      	ldr	r0, [pc, #196]	; (10cd8 <onoff_request+0x100>)
   10c12:	f007 fcff 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   10c16:	4648      	mov	r0, r9
   10c18:	f003 fa54 	bl	140c4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   10c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10c20:	8be3      	ldrh	r3, [r4, #30]
   10c22:	8ba6      	ldrh	r6, [r4, #28]
   10c24:	4293      	cmp	r3, r2
   10c26:	f006 0607 	and.w	r6, r6, #7
   10c2a:	d04e      	beq.n	10cca <onoff_request+0xf2>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   10c2c:	2e02      	cmp	r6, #2
   10c2e:	d11f      	bne.n	10c70 <onoff_request+0x98>
	rv = state;
   10c30:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   10c32:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   10c36:	3301      	adds	r3, #1
   10c38:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c3a:	4648      	mov	r0, r9
   10c3c:	f003 fa34 	bl	140a8 <z_spin_unlock_valid>
   10c40:	b940      	cbnz	r0, 10c54 <onoff_request+0x7c>
   10c42:	4925      	ldr	r1, [pc, #148]	; (10cd8 <onoff_request+0x100>)
   10c44:	4825      	ldr	r0, [pc, #148]	; (10cdc <onoff_request+0x104>)
   10c46:	22ac      	movs	r2, #172	; 0xac
   10c48:	f007 fc1b 	bl	18482 <printk>
   10c4c:	21ac      	movs	r1, #172	; 0xac
   10c4e:	4822      	ldr	r0, [pc, #136]	; (10cd8 <onoff_request+0x100>)
   10c50:	f007 fce0 	bl	18614 <assert_post_action>
	__asm__ volatile(
   10c54:	f38a 8811 	msr	BASEPRI, sl
   10c58:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   10c5c:	f1b8 0f00 	cmp.w	r8, #0
   10c60:	d030      	beq.n	10cc4 <onoff_request+0xec>
			notify_one(mgr, cli, state, 0);
   10c62:	2300      	movs	r3, #0
   10c64:	4632      	mov	r2, r6
   10c66:	4639      	mov	r1, r7
   10c68:	4620      	mov	r0, r4
   10c6a:	f007 fc43 	bl	184f4 <notify_one>
   10c6e:	e029      	b.n	10cc4 <onoff_request+0xec>
	} else if ((state == ONOFF_STATE_OFF)
   10c70:	2e06      	cmp	r6, #6
   10c72:	d80e      	bhi.n	10c92 <onoff_request+0xba>
   10c74:	e8df f006 	tbb	[pc, r6]
   10c78:	0d0d1804 	.word	0x0d0d1804
   10c7c:	2c04      	.short	0x2c04
   10c7e:	04          	.byte	0x04
   10c7f:	00          	.byte	0x00
	parent->next = child;
   10c80:	2300      	movs	r3, #0
   10c82:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   10c84:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   10c86:	b9a3      	cbnz	r3, 10cb2 <onoff_request+0xda>
	list->head = node;
   10c88:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   10c8c:	b1a6      	cbz	r6, 10cb8 <onoff_request+0xe0>
	rv = state;
   10c8e:	4635      	mov	r5, r6
   10c90:	e00c      	b.n	10cac <onoff_request+0xd4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10c92:	4913      	ldr	r1, [pc, #76]	; (10ce0 <onoff_request+0x108>)
   10c94:	4811      	ldr	r0, [pc, #68]	; (10cdc <onoff_request+0x104>)
   10c96:	f240 12c9 	movw	r2, #457	; 0x1c9
   10c9a:	f007 fbf2 	bl	18482 <printk>
   10c9e:	f240 11c9 	movw	r1, #457	; 0x1c9
   10ca2:	480f      	ldr	r0, [pc, #60]	; (10ce0 <onoff_request+0x108>)
   10ca4:	f007 fcb6 	bl	18614 <assert_post_action>
		rv = -EIO;
   10ca8:	f06f 0504 	mvn.w	r5, #4
	if (state == ONOFF_STATE_ON) {
   10cac:	f04f 0800 	mov.w	r8, #0
   10cb0:	e7c3      	b.n	10c3a <onoff_request+0x62>
	parent->next = child;
   10cb2:	601f      	str	r7, [r3, #0]
	list->tail = node;
   10cb4:	6067      	str	r7, [r4, #4]
}
   10cb6:	e7e9      	b.n	10c8c <onoff_request+0xb4>
		process_event(mgr, EVT_RECHECK, key);
   10cb8:	4652      	mov	r2, sl
   10cba:	2102      	movs	r1, #2
   10cbc:	4620      	mov	r0, r4
   10cbe:	f7ff fd7b 	bl	107b8 <process_event>
   10cc2:	4635      	mov	r5, r6
		}
	}

	return rv;
}
   10cc4:	4628      	mov	r0, r5
   10cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   10cca:	f06f 050a 	mvn.w	r5, #10
   10cce:	e7ed      	b.n	10cac <onoff_request+0xd4>
	if (state == ONOFF_STATE_ON) {
   10cd0:	f06f 0585 	mvn.w	r5, #133	; 0x85
   10cd4:	e7ea      	b.n	10cac <onoff_request+0xd4>
   10cd6:	bf00      	nop
   10cd8:	000191d0 	.word	0x000191d0
   10cdc:	00019196 	.word	0x00019196
   10ce0:	000191ae 	.word	0x000191ae

00010ce4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ce8:	4681      	mov	r9, r0
   10cea:	468b      	mov	fp, r1
   10cec:	4617      	mov	r7, r2
   10cee:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10cf0:	2500      	movs	r5, #0
{
   10cf2:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10cf4:	7838      	ldrb	r0, [r7, #0]
   10cf6:	b908      	cbnz	r0, 10cfc <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10cf8:	4628      	mov	r0, r5
   10cfa:	e357      	b.n	113ac <cbvprintf+0x6c8>
			OUTC(*fp++);
   10cfc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   10cfe:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   10d00:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   10d02:	d006      	beq.n	10d12 <cbvprintf+0x2e>
			OUTC('%');
   10d04:	4659      	mov	r1, fp
   10d06:	47c8      	blx	r9
   10d08:	2800      	cmp	r0, #0
   10d0a:	f2c0 834f 	blt.w	113ac <cbvprintf+0x6c8>
   10d0e:	3501      	adds	r5, #1
		if (bps == NULL) {
   10d10:	e204      	b.n	1111c <cbvprintf+0x438>
		} state = {
   10d12:	2218      	movs	r2, #24
   10d14:	2100      	movs	r1, #0
   10d16:	a80e      	add	r0, sp, #56	; 0x38
   10d18:	f007 fd9d 	bl	18856 <memset>
	if (*sp == '%') {
   10d1c:	787b      	ldrb	r3, [r7, #1]
   10d1e:	2b25      	cmp	r3, #37	; 0x25
   10d20:	d07d      	beq.n	10e1e <cbvprintf+0x13a>
   10d22:	2300      	movs	r3, #0
   10d24:	4698      	mov	r8, r3
   10d26:	469e      	mov	lr, r3
   10d28:	469c      	mov	ip, r3
   10d2a:	461e      	mov	r6, r3
   10d2c:	1c78      	adds	r0, r7, #1
   10d2e:	4601      	mov	r1, r0
		switch (*sp) {
   10d30:	f810 2b01 	ldrb.w	r2, [r0], #1
   10d34:	2a2b      	cmp	r2, #43	; 0x2b
   10d36:	f000 80a1 	beq.w	10e7c <cbvprintf+0x198>
   10d3a:	f200 8098 	bhi.w	10e6e <cbvprintf+0x18a>
   10d3e:	2a20      	cmp	r2, #32
   10d40:	f000 809f 	beq.w	10e82 <cbvprintf+0x19e>
   10d44:	2a23      	cmp	r2, #35	; 0x23
   10d46:	f000 809f 	beq.w	10e88 <cbvprintf+0x1a4>
   10d4a:	b12b      	cbz	r3, 10d58 <cbvprintf+0x74>
   10d4c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   10d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d54:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   10d58:	f1b8 0f00 	cmp.w	r8, #0
   10d5c:	d005      	beq.n	10d6a <cbvprintf+0x86>
   10d5e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   10d62:	f043 0320 	orr.w	r3, r3, #32
   10d66:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   10d6a:	f1be 0f00 	cmp.w	lr, #0
   10d6e:	d005      	beq.n	10d7c <cbvprintf+0x98>
   10d70:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   10d74:	f043 0310 	orr.w	r3, r3, #16
   10d78:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   10d7c:	f1bc 0f00 	cmp.w	ip, #0
   10d80:	d005      	beq.n	10d8e <cbvprintf+0xaa>
   10d82:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   10d86:	f043 0308 	orr.w	r3, r3, #8
   10d8a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   10d8e:	b12e      	cbz	r6, 10d9c <cbvprintf+0xb8>
   10d90:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   10d94:	f043 0304 	orr.w	r3, r3, #4
   10d98:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   10d9c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   10da0:	f003 0044 	and.w	r0, r3, #68	; 0x44
   10da4:	2844      	cmp	r0, #68	; 0x44
   10da6:	d103      	bne.n	10db0 <cbvprintf+0xcc>
		conv->flag_zero = false;
   10da8:	f36f 1386 	bfc	r3, #6, #1
   10dac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   10db0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   10db4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   10db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10dba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   10dbe:	d17f      	bne.n	10ec0 <cbvprintf+0x1dc>
		conv->width_star = true;
   10dc0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   10dc4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   10dc6:	f042 0201 	orr.w	r2, r2, #1
   10dca:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   10dce:	781a      	ldrb	r2, [r3, #0]
   10dd0:	2a2e      	cmp	r2, #46	; 0x2e
   10dd2:	bf0c      	ite	eq
   10dd4:	2101      	moveq	r1, #1
   10dd6:	2100      	movne	r1, #0
   10dd8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   10ddc:	f361 0241 	bfi	r2, r1, #1, #1
   10de0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   10de4:	d178      	bne.n	10ed8 <cbvprintf+0x1f4>
	if (*sp == '*') {
   10de6:	785a      	ldrb	r2, [r3, #1]
   10de8:	2a2a      	cmp	r2, #42	; 0x2a
   10dea:	d06e      	beq.n	10eca <cbvprintf+0x1e6>
	size_t val = 0;
   10dec:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10dee:	f04f 0c0a 	mov.w	ip, #10
	++sp;
   10df2:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10df4:	4619      	mov	r1, r3
   10df6:	f811 0b01 	ldrb.w	r0, [r1], #1
   10dfa:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10dfe:	2e09      	cmp	r6, #9
   10e00:	f240 8095 	bls.w	10f2e <cbvprintf+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   10e04:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   10e08:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   10e0a:	f3c1 0040 	ubfx	r0, r1, #1, #1
   10e0e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   10e12:	460a      	mov	r2, r1
   10e14:	f360 0241 	bfi	r2, r0, #1, #1
   10e18:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   10e1c:	e05c      	b.n	10ed8 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
   10e1e:	1cba      	adds	r2, r7, #2
   10e20:	9203      	str	r2, [sp, #12]
   10e22:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   10e26:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   10e2a:	07da      	lsls	r2, r3, #31
   10e2c:	f140 812e 	bpl.w	1108c <cbvprintf+0x3a8>
			width = va_arg(ap, int);
   10e30:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   10e34:	f1b8 0f00 	cmp.w	r8, #0
   10e38:	da07      	bge.n	10e4a <cbvprintf+0x166>
				conv->flag_dash = true;
   10e3a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
   10e3e:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
   10e42:	f042 0204 	orr.w	r2, r2, #4
   10e46:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
   10e4a:	075e      	lsls	r6, r3, #29
   10e4c:	f140 8127 	bpl.w	1109e <cbvprintf+0x3ba>
			int arg = va_arg(ap, int);
   10e50:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   10e54:	f1ba 0f00 	cmp.w	sl, #0
   10e58:	f280 8126 	bge.w	110a8 <cbvprintf+0x3c4>
				conv->prec_present = false;
   10e5c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   10e60:	f36f 0341 	bfc	r3, #1, #1
   10e64:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   10e68:	f04f 3aff 	mov.w	sl, #4294967295
   10e6c:	e11c      	b.n	110a8 <cbvprintf+0x3c4>
		switch (*sp) {
   10e6e:	2a2d      	cmp	r2, #45	; 0x2d
   10e70:	d00d      	beq.n	10e8e <cbvprintf+0x1aa>
   10e72:	2a30      	cmp	r2, #48	; 0x30
   10e74:	f47f af69 	bne.w	10d4a <cbvprintf+0x66>
   10e78:	2301      	movs	r3, #1
	} while (loop);
   10e7a:	e758      	b.n	10d2e <cbvprintf+0x4a>
		switch (*sp) {
   10e7c:	f04f 0c01 	mov.w	ip, #1
   10e80:	e755      	b.n	10d2e <cbvprintf+0x4a>
   10e82:	f04f 0e01 	mov.w	lr, #1
   10e86:	e752      	b.n	10d2e <cbvprintf+0x4a>
   10e88:	f04f 0801 	mov.w	r8, #1
   10e8c:	e74f      	b.n	10d2e <cbvprintf+0x4a>
   10e8e:	2601      	movs	r6, #1
   10e90:	e74d      	b.n	10d2e <cbvprintf+0x4a>
		val = 10U * val + *sp++ - '0';
   10e92:	4603      	mov	r3, r0
   10e94:	fb0e 6202 	mla	r2, lr, r2, r6
   10e98:	3a30      	subs	r2, #48	; 0x30
   10e9a:	4618      	mov	r0, r3
   10e9c:	f810 6b01 	ldrb.w	r6, [r0], #1
   10ea0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10ea4:	f1bc 0f09 	cmp.w	ip, #9
   10ea8:	d9f3      	bls.n	10e92 <cbvprintf+0x1ae>
	if (sp != wp) {
   10eaa:	4299      	cmp	r1, r3
   10eac:	d08f      	beq.n	10dce <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   10eae:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   10eb2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   10eb4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   10eb6:	f362 0141 	bfi	r1, r2, #1, #1
   10eba:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   10ebe:	e786      	b.n	10dce <cbvprintf+0xea>
   10ec0:	460b      	mov	r3, r1
	size_t val = 0;
   10ec2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10ec4:	f04f 0e0a 	mov.w	lr, #10
   10ec8:	e7e7      	b.n	10e9a <cbvprintf+0x1b6>
		conv->prec_star = true;
   10eca:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   10ece:	3302      	adds	r3, #2
		conv->prec_star = true;
   10ed0:	f042 0204 	orr.w	r2, r2, #4
   10ed4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
   10ed8:	781a      	ldrb	r2, [r3, #0]
   10eda:	2a6c      	cmp	r2, #108	; 0x6c
   10edc:	d047      	beq.n	10f6e <cbvprintf+0x28a>
   10ede:	d82b      	bhi.n	10f38 <cbvprintf+0x254>
   10ee0:	2a68      	cmp	r2, #104	; 0x68
   10ee2:	d031      	beq.n	10f48 <cbvprintf+0x264>
   10ee4:	2a6a      	cmp	r2, #106	; 0x6a
   10ee6:	d04b      	beq.n	10f80 <cbvprintf+0x29c>
   10ee8:	2a4c      	cmp	r2, #76	; 0x4c
   10eea:	d051      	beq.n	10f90 <cbvprintf+0x2ac>
	conv->specifier = *sp++;
   10eec:	461a      	mov	r2, r3
   10eee:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
   10ef2:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
   10ef4:	9203      	str	r2, [sp, #12]
   10ef6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
   10efa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
   10efe:	f200 80be 	bhi.w	1107e <cbvprintf+0x39a>
   10f02:	2b6d      	cmp	r3, #109	; 0x6d
   10f04:	d851      	bhi.n	10faa <cbvprintf+0x2c6>
   10f06:	2b69      	cmp	r3, #105	; 0x69
   10f08:	f200 80b9 	bhi.w	1107e <cbvprintf+0x39a>
   10f0c:	2b57      	cmp	r3, #87	; 0x57
   10f0e:	d867      	bhi.n	10fe0 <cbvprintf+0x2fc>
   10f10:	2b41      	cmp	r3, #65	; 0x41
   10f12:	d003      	beq.n	10f1c <cbvprintf+0x238>
   10f14:	3b45      	subs	r3, #69	; 0x45
   10f16:	2b02      	cmp	r3, #2
   10f18:	f200 80b1 	bhi.w	1107e <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   10f1c:	2204      	movs	r2, #4
   10f1e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   10f22:	f362 0302 	bfi	r3, r2, #0, #3
   10f26:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   10f2a:	2301      	movs	r3, #1
			break;
   10f2c:	e073      	b.n	11016 <cbvprintf+0x332>
		val = 10U * val + *sp++ - '0';
   10f2e:	fb0c 0202 	mla	r2, ip, r2, r0
   10f32:	460b      	mov	r3, r1
   10f34:	3a30      	subs	r2, #48	; 0x30
   10f36:	e75d      	b.n	10df4 <cbvprintf+0x110>
	switch (*sp) {
   10f38:	2a74      	cmp	r2, #116	; 0x74
   10f3a:	d025      	beq.n	10f88 <cbvprintf+0x2a4>
   10f3c:	2a7a      	cmp	r2, #122	; 0x7a
   10f3e:	d1d5      	bne.n	10eec <cbvprintf+0x208>
		conv->length_mod = LENGTH_Z;
   10f40:	2106      	movs	r1, #6
   10f42:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   10f46:	e00c      	b.n	10f62 <cbvprintf+0x27e>
		if (*++sp == 'h') {
   10f48:	785a      	ldrb	r2, [r3, #1]
   10f4a:	2a68      	cmp	r2, #104	; 0x68
   10f4c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   10f50:	d106      	bne.n	10f60 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_HH;
   10f52:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   10f54:	f361 02c6 	bfi	r2, r1, #3, #4
   10f58:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   10f5c:	3302      	adds	r3, #2
   10f5e:	e7c5      	b.n	10eec <cbvprintf+0x208>
			conv->length_mod = LENGTH_H;
   10f60:	2102      	movs	r1, #2
   10f62:	f361 02c6 	bfi	r2, r1, #3, #4
   10f66:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   10f6a:	3301      	adds	r3, #1
   10f6c:	e7be      	b.n	10eec <cbvprintf+0x208>
		if (*++sp == 'l') {
   10f6e:	785a      	ldrb	r2, [r3, #1]
   10f70:	2a6c      	cmp	r2, #108	; 0x6c
   10f72:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   10f76:	d101      	bne.n	10f7c <cbvprintf+0x298>
			conv->length_mod = LENGTH_LL;
   10f78:	2104      	movs	r1, #4
   10f7a:	e7eb      	b.n	10f54 <cbvprintf+0x270>
			conv->length_mod = LENGTH_L;
   10f7c:	2103      	movs	r1, #3
   10f7e:	e7f0      	b.n	10f62 <cbvprintf+0x27e>
		conv->length_mod = LENGTH_J;
   10f80:	2105      	movs	r1, #5
   10f82:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   10f86:	e7ec      	b.n	10f62 <cbvprintf+0x27e>
		conv->length_mod = LENGTH_T;
   10f88:	2107      	movs	r1, #7
   10f8a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   10f8e:	e7e8      	b.n	10f62 <cbvprintf+0x27e>
		conv->unsupported = true;
   10f90:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   10f94:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   10f98:	f022 0202 	bic.w	r2, r2, #2
   10f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   10fa0:	f042 0202 	orr.w	r2, r2, #2
   10fa4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   10fa8:	e7df      	b.n	10f6a <cbvprintf+0x286>
	switch (conv->specifier) {
   10faa:	3b6e      	subs	r3, #110	; 0x6e
   10fac:	b2d9      	uxtb	r1, r3
   10fae:	2301      	movs	r3, #1
   10fb0:	408b      	lsls	r3, r1
   10fb2:	f240 4182 	movw	r1, #1154	; 0x482
   10fb6:	420b      	tst	r3, r1
   10fb8:	d137      	bne.n	1102a <cbvprintf+0x346>
   10fba:	f013 0f24 	tst.w	r3, #36	; 0x24
   10fbe:	d151      	bne.n	11064 <cbvprintf+0x380>
   10fc0:	07d8      	lsls	r0, r3, #31
   10fc2:	d55c      	bpl.n	1107e <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   10fc4:	2103      	movs	r1, #3
   10fc6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   10fca:	f361 0302 	bfi	r3, r1, #0, #3
   10fce:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   10fd2:	f002 0378 	and.w	r3, r2, #120	; 0x78
   10fd6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   10fda:	424b      	negs	r3, r1
   10fdc:	414b      	adcs	r3, r1
   10fde:	e01a      	b.n	11016 <cbvprintf+0x332>
   10fe0:	2001      	movs	r0, #1
	switch (conv->specifier) {
   10fe2:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   10fe6:	b2c9      	uxtb	r1, r1
   10fe8:	fa00 f101 	lsl.w	r1, r0, r1
   10fec:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   10ff0:	d194      	bne.n	10f1c <cbvprintf+0x238>
   10ff2:	f640 0601 	movw	r6, #2049	; 0x801
   10ff6:	4231      	tst	r1, r6
   10ff8:	d11d      	bne.n	11036 <cbvprintf+0x352>
   10ffa:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   10ffe:	d03e      	beq.n	1107e <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   11000:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11004:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11008:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1100c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1100e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11012:	d034      	beq.n	1107e <cbvprintf+0x39a>
	bool unsupported = false;
   11014:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   11016:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1101a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1101e:	430b      	orrs	r3, r1
   11020:	f363 0241 	bfi	r2, r3, #1, #1
   11024:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   11028:	e6fd      	b.n	10e26 <cbvprintf+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   1102a:	2102      	movs	r1, #2
   1102c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11030:	f361 0302 	bfi	r3, r1, #0, #3
   11034:	e7e8      	b.n	11008 <cbvprintf+0x324>
   11036:	2002      	movs	r0, #2
   11038:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1103c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11040:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11044:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11046:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   1104a:	bf02      	ittt	eq
   1104c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   11050:	f041 0101 	orreq.w	r1, r1, #1
   11054:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   11058:	2b63      	cmp	r3, #99	; 0x63
   1105a:	d1db      	bne.n	11014 <cbvprintf+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1105c:	1e13      	subs	r3, r2, #0
   1105e:	bf18      	it	ne
   11060:	2301      	movne	r3, #1
   11062:	e7d8      	b.n	11016 <cbvprintf+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   11064:	2103      	movs	r1, #3
   11066:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   1106a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1106e:	f361 0302 	bfi	r3, r1, #0, #3
   11072:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   11076:	bf14      	ite	ne
   11078:	2301      	movne	r3, #1
   1107a:	2300      	moveq	r3, #0
   1107c:	e7cb      	b.n	11016 <cbvprintf+0x332>
		conv->invalid = true;
   1107e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11082:	f043 0301 	orr.w	r3, r3, #1
   11086:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   1108a:	e7c3      	b.n	11014 <cbvprintf+0x330>
		} else if (conv->width_present) {
   1108c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   11090:	2a00      	cmp	r2, #0
		int width = -1;
   11092:	bfac      	ite	ge
   11094:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
   11098:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
   1109c:	e6d5      	b.n	10e4a <cbvprintf+0x166>
		} else if (conv->prec_present) {
   1109e:	0798      	lsls	r0, r3, #30
   110a0:	f57f aee2 	bpl.w	10e68 <cbvprintf+0x184>
			precision = conv->prec_value;
   110a4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
   110a8:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   110aa:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   110ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
   110b2:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
   110b6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   110ba:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   110bc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   110c0:	d133      	bne.n	1112a <cbvprintf+0x446>
			switch (length_mod) {
   110c2:	1ecb      	subs	r3, r1, #3
   110c4:	2b04      	cmp	r3, #4
   110c6:	d804      	bhi.n	110d2 <cbvprintf+0x3ee>
   110c8:	e8df f003 	tbb	[pc, r3]
   110cc:	10464610 	.word	0x10464610
   110d0:	10          	.byte	0x10
   110d1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   110d2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   110d4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   110d6:	ea4f 72e3 	mov.w	r2, r3, asr #31
   110da:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   110de:	d10b      	bne.n	110f8 <cbvprintf+0x414>
				value->sint = (char)value->sint;
   110e0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   110e4:	930e      	str	r3, [sp, #56]	; 0x38
   110e6:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
   110e8:	930f      	str	r3, [sp, #60]	; 0x3c
   110ea:	e007      	b.n	110fc <cbvprintf+0x418>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   110ec:	f854 3b04 	ldr.w	r3, [r4], #4
   110f0:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   110f2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   110f6:	e002      	b.n	110fe <cbvprintf+0x41a>
			} else if (length_mod == LENGTH_H) {
   110f8:	2902      	cmp	r1, #2
   110fa:	d011      	beq.n	11120 <cbvprintf+0x43c>
				value->sint = va_arg(ap, int);
   110fc:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   110fe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11102:	f013 0603 	ands.w	r6, r3, #3
   11106:	d047      	beq.n	11198 <cbvprintf+0x4b4>
			OUTS(sp, fp);
   11108:	463a      	mov	r2, r7
   1110a:	4659      	mov	r1, fp
   1110c:	4648      	mov	r0, r9
   1110e:	9b03      	ldr	r3, [sp, #12]
   11110:	f007 fa69 	bl	185e6 <outs>
   11114:	2800      	cmp	r0, #0
   11116:	f2c0 8149 	blt.w	113ac <cbvprintf+0x6c8>
   1111a:	4405      	add	r5, r0
			continue;
   1111c:	9f03      	ldr	r7, [sp, #12]
   1111e:	e5e9      	b.n	10cf4 <cbvprintf+0x10>
				value->sint = (short)value->sint;
   11120:	b21a      	sxth	r2, r3
   11122:	920e      	str	r2, [sp, #56]	; 0x38
   11124:	f343 33c0 	sbfx	r3, r3, #15, #1
   11128:	e7de      	b.n	110e8 <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1112a:	2b02      	cmp	r3, #2
   1112c:	d124      	bne.n	11178 <cbvprintf+0x494>
			switch (length_mod) {
   1112e:	1ecb      	subs	r3, r1, #3
   11130:	2b04      	cmp	r3, #4
   11132:	d804      	bhi.n	1113e <cbvprintf+0x45a>
   11134:	e8df f003 	tbb	[pc, r3]
   11138:	18101018 	.word	0x18101018
   1113c:	18          	.byte	0x18
   1113d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1113e:	2901      	cmp	r1, #1
   11140:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
   11144:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11148:	d014      	beq.n	11174 <cbvprintf+0x490>
			} else if (length_mod == LENGTH_H) {
   1114a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   1114c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   11150:	d1d5      	bne.n	110fe <cbvprintf+0x41a>
				value->uint = (unsigned short)value->uint;
   11152:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   11154:	930e      	str	r3, [sp, #56]	; 0x38
   11156:	e7d2      	b.n	110fe <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap,
   11158:	3407      	adds	r4, #7
   1115a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1115e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   11162:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11166:	e7ca      	b.n	110fe <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap, size_t);
   11168:	f854 3b04 	ldr.w	r3, [r4], #4
   1116c:	930e      	str	r3, [sp, #56]	; 0x38
   1116e:	2300      	movs	r3, #0
   11170:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   11172:	e7c4      	b.n	110fe <cbvprintf+0x41a>
				value->uint = (unsigned char)value->uint;
   11174:	b2db      	uxtb	r3, r3
   11176:	e7bc      	b.n	110f2 <cbvprintf+0x40e>
		} else if (specifier_cat == SPECIFIER_FP) {
   11178:	2b04      	cmp	r3, #4
   1117a:	d108      	bne.n	1118e <cbvprintf+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   1117c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1117e:	f024 0407 	bic.w	r4, r4, #7
   11182:	e9d4 2300 	ldrd	r2, r3, [r4]
   11186:	3408      	adds	r4, #8
   11188:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1118c:	e7b7      	b.n	110fe <cbvprintf+0x41a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1118e:	2b03      	cmp	r3, #3
   11190:	d1b5      	bne.n	110fe <cbvprintf+0x41a>
			value->ptr = va_arg(ap, void *);
   11192:	f854 3b04 	ldr.w	r3, [r4], #4
   11196:	e7dd      	b.n	11154 <cbvprintf+0x470>
		switch (conv->specifier) {
   11198:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   1119c:	2878      	cmp	r0, #120	; 0x78
   1119e:	d8bd      	bhi.n	1111c <cbvprintf+0x438>
   111a0:	2862      	cmp	r0, #98	; 0x62
   111a2:	d81c      	bhi.n	111de <cbvprintf+0x4fa>
   111a4:	2825      	cmp	r0, #37	; 0x25
   111a6:	f43f adad 	beq.w	10d04 <cbvprintf+0x20>
   111aa:	2858      	cmp	r0, #88	; 0x58
   111ac:	d1b6      	bne.n	1111c <cbvprintf+0x438>
			bps = encode_uint(value->uint, conv, buf, bpe);
   111ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   111b2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   111b6:	9300      	str	r3, [sp, #0]
   111b8:	aa10      	add	r2, sp, #64	; 0x40
   111ba:	ab08      	add	r3, sp, #32
   111bc:	f007 f9cd 	bl	1855a <encode_uint>
			if (precision >= 0) {
   111c0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   111c4:	4607      	mov	r7, r0
			if (precision >= 0) {
   111c6:	f280 8099 	bge.w	112fc <cbvprintf+0x618>
		if (bps == NULL) {
   111ca:	2f00      	cmp	r7, #0
   111cc:	d0a6      	beq.n	1111c <cbvprintf+0x438>
		size_t nj_len = (bpe - bps);
   111ce:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   111d2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   111d4:	2e00      	cmp	r6, #0
   111d6:	f000 80c0 	beq.w	1135a <cbvprintf+0x676>
			nj_len += 1U;
   111da:	3001      	adds	r0, #1
   111dc:	e0bd      	b.n	1135a <cbvprintf+0x676>
		switch (conv->specifier) {
   111de:	3863      	subs	r0, #99	; 0x63
   111e0:	2815      	cmp	r0, #21
   111e2:	d89b      	bhi.n	1111c <cbvprintf+0x438>
   111e4:	a201      	add	r2, pc, #4	; (adr r2, 111ec <cbvprintf+0x508>)
   111e6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   111ea:	bf00      	nop
   111ec:	000112c1 	.word	0x000112c1
   111f0:	000112d3 	.word	0x000112d3
   111f4:	0001111d 	.word	0x0001111d
   111f8:	0001111d 	.word	0x0001111d
   111fc:	0001111d 	.word	0x0001111d
   11200:	0001111d 	.word	0x0001111d
   11204:	000112d3 	.word	0x000112d3
   11208:	0001111d 	.word	0x0001111d
   1120c:	0001111d 	.word	0x0001111d
   11210:	0001111d 	.word	0x0001111d
   11214:	0001111d 	.word	0x0001111d
   11218:	0001135f 	.word	0x0001135f
   1121c:	000112f7 	.word	0x000112f7
   11220:	0001131d 	.word	0x0001131d
   11224:	0001111d 	.word	0x0001111d
   11228:	0001111d 	.word	0x0001111d
   1122c:	00011245 	.word	0x00011245
   11230:	0001111d 	.word	0x0001111d
   11234:	000112f7 	.word	0x000112f7
   11238:	0001111d 	.word	0x0001111d
   1123c:	0001111d 	.word	0x0001111d
   11240:	000112f7 	.word	0x000112f7
			if (precision >= 0) {
   11244:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   11248:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   1124a:	db35      	blt.n	112b8 <cbvprintf+0x5d4>
				len = strnlen(bps, precision);
   1124c:	4651      	mov	r1, sl
   1124e:	4638      	mov	r0, r7
   11250:	f007 faba 	bl	187c8 <strnlen>
			bpe = bps + len;
   11254:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   11258:	2f00      	cmp	r7, #0
   1125a:	f43f af5f 	beq.w	1111c <cbvprintf+0x438>
		char sign = 0;
   1125e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   11260:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11264:	f013 0210 	ands.w	r2, r3, #16
   11268:	9205      	str	r2, [sp, #20]
   1126a:	f000 8092 	beq.w	11392 <cbvprintf+0x6ae>
			nj_len += 2U;
   1126e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   11270:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   11272:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   11274:	bf48      	it	mi
   11276:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   11278:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   1127a:	bf48      	it	mi
   1127c:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   1127e:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
   11282:	9204      	str	r2, [sp, #16]
		if (width > 0) {
   11284:	f340 809f 	ble.w	113c6 <cbvprintf+0x6e2>
			if (!conv->flag_dash) {
   11288:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   1128c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   11290:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11294:	0750      	lsls	r0, r2, #29
   11296:	9306      	str	r3, [sp, #24]
   11298:	f100 8095 	bmi.w	113c6 <cbvprintf+0x6e2>
				if (conv->flag_zero) {
   1129c:	0651      	lsls	r1, r2, #25
   1129e:	f140 8088 	bpl.w	113b2 <cbvprintf+0x6ce>
					if (sign != 0) {
   112a2:	b13e      	cbz	r6, 112b4 <cbvprintf+0x5d0>
						OUTC(sign);
   112a4:	4659      	mov	r1, fp
   112a6:	4630      	mov	r0, r6
   112a8:	47c8      	blx	r9
   112aa:	2800      	cmp	r0, #0
   112ac:	db7e      	blt.n	113ac <cbvprintf+0x6c8>
   112ae:	9b06      	ldr	r3, [sp, #24]
   112b0:	3501      	adds	r5, #1
   112b2:	461e      	mov	r6, r3
					pad = '0';
   112b4:	2230      	movs	r2, #48	; 0x30
   112b6:	e07d      	b.n	113b4 <cbvprintf+0x6d0>
				len = strlen(bps);
   112b8:	4638      	mov	r0, r7
   112ba:	f007 fa7e 	bl	187ba <strlen>
   112be:	e7c9      	b.n	11254 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   112c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
   112c2:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
   112c4:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   112c6:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
   112ca:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   112cc:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
   112d0:	e7c6      	b.n	11260 <cbvprintf+0x57c>
			if (conv->flag_plus) {
   112d2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   112d4:	bf5a      	itte	pl
   112d6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   112da:	015e      	lslpl	r6, r3, #5
				sign = '+';
   112dc:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
   112de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
   112e2:	2b00      	cmp	r3, #0
   112e4:	f6bf af63 	bge.w	111ae <cbvprintf+0x4ca>
				value->uint = (uint_value_type)-sint;
   112e8:	4252      	negs	r2, r2
   112ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   112ee:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   112f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   112f4:	e75b      	b.n	111ae <cbvprintf+0x4ca>
		switch (conv->specifier) {
   112f6:	2600      	movs	r6, #0
   112f8:	e759      	b.n	111ae <cbvprintf+0x4ca>
		char sign = 0;
   112fa:	2600      	movs	r6, #0
				conv->flag_zero = false;
   112fc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   11300:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11304:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   11306:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1130a:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   1130c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   11310:	f67f af5b 	bls.w	111ca <cbvprintf+0x4e6>
					conv->pad0_value = precision - (int)len;
   11314:	ebaa 0303 	sub.w	r3, sl, r3
   11318:	9311      	str	r3, [sp, #68]	; 0x44
   1131a:	e756      	b.n	111ca <cbvprintf+0x4e6>
			if (value->ptr != NULL) {
   1131c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1131e:	b390      	cbz	r0, 11386 <cbvprintf+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11320:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11324:	9300      	str	r3, [sp, #0]
   11326:	2100      	movs	r1, #0
   11328:	ab08      	add	r3, sp, #32
   1132a:	aa10      	add	r2, sp, #64	; 0x40
   1132c:	f007 f915 	bl	1855a <encode_uint>
				conv->altform_0c = true;
   11330:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   11334:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
   11338:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1133c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11340:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11344:	4607      	mov	r7, r0
				conv->altform_0c = true;
   11346:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   1134a:	dad6      	bge.n	112fa <cbvprintf+0x616>
		if (bps == NULL) {
   1134c:	2800      	cmp	r0, #0
   1134e:	f43f aee5 	beq.w	1111c <cbvprintf+0x438>
		char sign = 0;
   11352:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
   11354:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11358:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
   1135a:	469a      	mov	sl, r3
   1135c:	e780      	b.n	11260 <cbvprintf+0x57c>
				store_count(conv, value->ptr, count);
   1135e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   11360:	2907      	cmp	r1, #7
   11362:	f63f aedb 	bhi.w	1111c <cbvprintf+0x438>
   11366:	e8df f001 	tbb	[pc, r1]
   1136a:	040c      	.short	0x040c
   1136c:	08080c06 	.word	0x08080c06
   11370:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   11372:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   11374:	e6d2      	b.n	1111c <cbvprintf+0x438>
		*(short *)dp = (short)count;
   11376:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   11378:	e6d0      	b.n	1111c <cbvprintf+0x438>
		*(intmax_t *)dp = (intmax_t)count;
   1137a:	17ea      	asrs	r2, r5, #31
   1137c:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   11380:	e6cc      	b.n	1111c <cbvprintf+0x438>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11382:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   11384:	e6ca      	b.n	1111c <cbvprintf+0x438>
   11386:	4f2f      	ldr	r7, [pc, #188]	; (11444 <cbvprintf+0x760>)
		char sign = 0;
   11388:	4606      	mov	r6, r0
			bpe = bps + 5;
   1138a:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   1138e:	2005      	movs	r0, #5
   11390:	e766      	b.n	11260 <cbvprintf+0x57c>
		} else if (conv->altform_0) {
   11392:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11394:	bf48      	it	mi
   11396:	3001      	addmi	r0, #1
   11398:	e76a      	b.n	11270 <cbvprintf+0x58c>
					OUTC(pad);
   1139a:	4610      	mov	r0, r2
   1139c:	9307      	str	r3, [sp, #28]
   1139e:	9206      	str	r2, [sp, #24]
   113a0:	4659      	mov	r1, fp
   113a2:	47c8      	blx	r9
   113a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   113a8:	2800      	cmp	r0, #0
   113aa:	da04      	bge.n	113b6 <cbvprintf+0x6d2>
#undef OUTS
#undef OUTC
}
   113ac:	b015      	add	sp, #84	; 0x54
   113ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   113b2:	2220      	movs	r2, #32
					pad = '0';
   113b4:	4643      	mov	r3, r8
				while (width-- > 0) {
   113b6:	4619      	mov	r1, r3
   113b8:	2900      	cmp	r1, #0
   113ba:	f103 33ff 	add.w	r3, r3, #4294967295
   113be:	dcec      	bgt.n	1139a <cbvprintf+0x6b6>
   113c0:	4445      	add	r5, r8
   113c2:	4698      	mov	r8, r3
   113c4:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
   113c6:	b12e      	cbz	r6, 113d4 <cbvprintf+0x6f0>
			OUTC(sign);
   113c8:	4659      	mov	r1, fp
   113ca:	4630      	mov	r0, r6
   113cc:	47c8      	blx	r9
   113ce:	2800      	cmp	r0, #0
   113d0:	dbec      	blt.n	113ac <cbvprintf+0x6c8>
   113d2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   113d4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   113d8:	06da      	lsls	r2, r3, #27
   113da:	d401      	bmi.n	113e0 <cbvprintf+0x6fc>
   113dc:	071b      	lsls	r3, r3, #28
   113de:	d505      	bpl.n	113ec <cbvprintf+0x708>
				OUTC('0');
   113e0:	4659      	mov	r1, fp
   113e2:	2030      	movs	r0, #48	; 0x30
   113e4:	47c8      	blx	r9
   113e6:	2800      	cmp	r0, #0
   113e8:	dbe0      	blt.n	113ac <cbvprintf+0x6c8>
   113ea:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   113ec:	9b05      	ldr	r3, [sp, #20]
   113ee:	b133      	cbz	r3, 113fe <cbvprintf+0x71a>
				OUTC(conv->specifier);
   113f0:	4659      	mov	r1, fp
   113f2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   113f6:	47c8      	blx	r9
   113f8:	2800      	cmp	r0, #0
   113fa:	dbd7      	blt.n	113ac <cbvprintf+0x6c8>
   113fc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   113fe:	9e04      	ldr	r6, [sp, #16]
   11400:	442e      	add	r6, r5
   11402:	e005      	b.n	11410 <cbvprintf+0x72c>
				OUTC('0');
   11404:	4659      	mov	r1, fp
   11406:	2030      	movs	r0, #48	; 0x30
   11408:	47c8      	blx	r9
   1140a:	2800      	cmp	r0, #0
   1140c:	dbce      	blt.n	113ac <cbvprintf+0x6c8>
   1140e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11410:	1b73      	subs	r3, r6, r5
   11412:	2b00      	cmp	r3, #0
   11414:	dcf6      	bgt.n	11404 <cbvprintf+0x720>
			OUTS(bps, bpe);
   11416:	4653      	mov	r3, sl
   11418:	463a      	mov	r2, r7
   1141a:	4659      	mov	r1, fp
   1141c:	4648      	mov	r0, r9
   1141e:	f007 f8e2 	bl	185e6 <outs>
   11422:	2800      	cmp	r0, #0
   11424:	dbc2      	blt.n	113ac <cbvprintf+0x6c8>
   11426:	4405      	add	r5, r0
		while (width > 0) {
   11428:	44a8      	add	r8, r5
   1142a:	eba8 0305 	sub.w	r3, r8, r5
   1142e:	2b00      	cmp	r3, #0
   11430:	f77f ae74 	ble.w	1111c <cbvprintf+0x438>
			OUTC(' ');
   11434:	4659      	mov	r1, fp
   11436:	2020      	movs	r0, #32
   11438:	47c8      	blx	r9
   1143a:	2800      	cmp	r0, #0
   1143c:	dbb6      	blt.n	113ac <cbvprintf+0x6c8>
   1143e:	3501      	adds	r5, #1
			--width;
   11440:	e7f3      	b.n	1142a <cbvprintf+0x746>
   11442:	bf00      	nop
   11444:	000191f6 	.word	0x000191f6

00011448 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   11448:	4604      	mov	r4, r0
   1144a:	b508      	push	{r3, lr}
	__asm__ volatile(
   1144c:	f04f 0220 	mov.w	r2, #32
   11450:	f3ef 8311 	mrs	r3, BASEPRI
   11454:	f382 8811 	msr	BASEPRI, r2
   11458:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   1145c:	f007 f95a 	bl	18714 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   11460:	4620      	mov	r0, r4
   11462:	f001 fb25 	bl	12ab0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11466:	4803      	ldr	r0, [pc, #12]	; (11474 <sys_reboot+0x2c>)
   11468:	f007 f80b 	bl	18482 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1146c:	f000 fff2 	bl	12454 <arch_cpu_idle>
   11470:	e7fc      	b.n	1146c <sys_reboot+0x24>
   11472:	bf00      	nop
   11474:	000191fc 	.word	0x000191fc

00011478 <nordicsemi_nrf91_init>:
   11478:	f04f 0220 	mov.w	r2, #32
   1147c:	f3ef 8311 	mrs	r3, BASEPRI
   11480:	f382 8811 	msr	BASEPRI, r2
   11484:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11488:	2101      	movs	r1, #1
   1148a:	4a04      	ldr	r2, [pc, #16]	; (1149c <nordicsemi_nrf91_init+0x24>)
   1148c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   11490:	f383 8811 	msr	BASEPRI, r3
   11494:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11498:	2000      	movs	r0, #0
   1149a:	4770      	bx	lr
   1149c:	50039000 	.word	0x50039000

000114a0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   114a0:	b120      	cbz	r0, 114ac <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   114a2:	4b03      	ldr	r3, [pc, #12]	; (114b0 <arch_busy_wait+0x10>)
   114a4:	0180      	lsls	r0, r0, #6
   114a6:	f043 0301 	orr.w	r3, r3, #1
   114aa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   114ac:	4770      	bx	lr
   114ae:	bf00      	nop
   114b0:	00018e00 	.word	0x00018e00

000114b4 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   114b4:	b084      	sub	sp, #16
   114b6:	ab04      	add	r3, sp, #16
   114b8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   114bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   114c0:	2b06      	cmp	r3, #6
   114c2:	d107      	bne.n	114d4 <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   114c4:	2201      	movs	r2, #1
   114c6:	4b04      	ldr	r3, [pc, #16]	; (114d8 <pm_power_state_set+0x24>)
   114c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   114cc:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   114d0:	bf20      	wfe
    while (true)
   114d2:	e7fd      	b.n	114d0 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   114d4:	b004      	add	sp, #16
   114d6:	4770      	bx	lr
   114d8:	50004000 	.word	0x50004000

000114dc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   114dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114de:	4605      	mov	r5, r0
	__asm__ volatile(
   114e0:	f04f 0320 	mov.w	r3, #32
   114e4:	f3ef 8611 	mrs	r6, BASEPRI
   114e8:	f383 8811 	msr	BASEPRI, r3
   114ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   114f0:	4817      	ldr	r0, [pc, #92]	; (11550 <pm_state_notify+0x74>)
   114f2:	f002 fdcb 	bl	1408c <z_spin_lock_valid>
   114f6:	b940      	cbnz	r0, 1150a <pm_state_notify+0x2e>
   114f8:	4916      	ldr	r1, [pc, #88]	; (11554 <pm_state_notify+0x78>)
   114fa:	4817      	ldr	r0, [pc, #92]	; (11558 <pm_state_notify+0x7c>)
   114fc:	2281      	movs	r2, #129	; 0x81
   114fe:	f006 ffc0 	bl	18482 <printk>
   11502:	2181      	movs	r1, #129	; 0x81
   11504:	4813      	ldr	r0, [pc, #76]	; (11554 <pm_state_notify+0x78>)
   11506:	f007 f885 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   1150a:	4811      	ldr	r0, [pc, #68]	; (11550 <pm_state_notify+0x74>)
   1150c:	f002 fdda 	bl	140c4 <z_spin_lock_set_owner>
	return list->head;
   11510:	4b12      	ldr	r3, [pc, #72]	; (1155c <pm_state_notify+0x80>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   11512:	4f13      	ldr	r7, [pc, #76]	; (11560 <pm_state_notify+0x84>)
   11514:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11516:	b98c      	cbnz	r4, 1153c <pm_state_notify+0x60>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11518:	480d      	ldr	r0, [pc, #52]	; (11550 <pm_state_notify+0x74>)
   1151a:	f002 fdc5 	bl	140a8 <z_spin_unlock_valid>
   1151e:	b940      	cbnz	r0, 11532 <pm_state_notify+0x56>
   11520:	490c      	ldr	r1, [pc, #48]	; (11554 <pm_state_notify+0x78>)
   11522:	480d      	ldr	r0, [pc, #52]	; (11558 <pm_state_notify+0x7c>)
   11524:	22ac      	movs	r2, #172	; 0xac
   11526:	f006 ffac 	bl	18482 <printk>
   1152a:	21ac      	movs	r1, #172	; 0xac
   1152c:	4809      	ldr	r0, [pc, #36]	; (11554 <pm_state_notify+0x78>)
   1152e:	f007 f871 	bl	18614 <assert_post_action>
	__asm__ volatile(
   11532:	f386 8811 	msr	BASEPRI, r6
   11536:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			callback = notifier->state_exit;
   1153c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   11540:	2d00      	cmp	r5, #0
   11542:	bf18      	it	ne
   11544:	4613      	movne	r3, r2
		if (callback) {
   11546:	b10b      	cbz	r3, 1154c <pm_state_notify+0x70>
			callback(z_power_state.state);
   11548:	7838      	ldrb	r0, [r7, #0]
   1154a:	4798      	blx	r3
	return node->next;
   1154c:	6824      	ldr	r4, [r4, #0]
   1154e:	e7e2      	b.n	11516 <pm_state_notify+0x3a>
   11550:	20000228 	.word	0x20000228
   11554:	000191d0 	.word	0x000191d0
   11558:	00019196 	.word	0x00019196
   1155c:	2000022c 	.word	0x2000022c
   11560:	20000234 	.word	0x20000234

00011564 <pm_system_resume>:

void pm_system_resume(void)
{
   11564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   11566:	4b0f      	ldr	r3, [pc, #60]	; (115a4 <pm_system_resume+0x40>)
   11568:	681a      	ldr	r2, [r3, #0]
   1156a:	b9ba      	cbnz	r2, 1159c <pm_system_resume+0x38>
		post_ops_done = 1;
   1156c:	2201      	movs	r2, #1
   1156e:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   11570:	4a0d      	ldr	r2, [pc, #52]	; (115a8 <pm_system_resume+0x44>)
   11572:	ab01      	add	r3, sp, #4
   11574:	ca07      	ldmia	r2, {r0, r1, r2}
   11576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1157a:	4a0c      	ldr	r2, [pc, #48]	; (115ac <pm_system_resume+0x48>)
   1157c:	b14a      	cbz	r2, 11592 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   1157e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11582:	f007 f84f 	bl	18624 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   11586:	2000      	movs	r0, #0
	}
}
   11588:	b005      	add	sp, #20
   1158a:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   1158e:	f7ff bfa5 	b.w	114dc <pm_state_notify>
   11592:	f382 8811 	msr	BASEPRI, r2
   11596:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1159a:	e7f4      	b.n	11586 <pm_system_resume+0x22>
}
   1159c:	b005      	add	sp, #20
   1159e:	f85d fb04 	ldr.w	pc, [sp], #4
   115a2:	bf00      	nop
   115a4:	20000004 	.word	0x20000004
   115a8:	20000234 	.word	0x20000234
   115ac:	00018625 	.word	0x00018625

000115b0 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   115b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   115b2:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   115b4:	466e      	mov	r6, sp
   115b6:	4c21      	ldr	r4, [pc, #132]	; (1163c <pm_system_suspend+0x8c>)
   115b8:	4601      	mov	r1, r0
{
   115ba:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   115bc:	4630      	mov	r0, r6
   115be:	f007 f849 	bl	18654 <pm_policy_next_state>
   115c2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   115c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   115ca:	7820      	ldrb	r0, [r4, #0]
   115cc:	4626      	mov	r6, r4
   115ce:	b398      	cbz	r0, 11638 <pm_system_suspend+0x88>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   115d0:	2000      	movs	r0, #0
   115d2:	4b1b      	ldr	r3, [pc, #108]	; (11640 <pm_system_suspend+0x90>)
   115d4:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   115d6:	1c6b      	adds	r3, r5, #1
   115d8:	d019      	beq.n	1160e <pm_system_suspend+0x5e>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   115da:	4291      	cmp	r1, r2
   115dc:	d208      	bcs.n	115f0 <pm_system_suspend+0x40>
   115de:	4919      	ldr	r1, [pc, #100]	; (11644 <pm_system_suspend+0x94>)
   115e0:	4819      	ldr	r0, [pc, #100]	; (11648 <pm_system_suspend+0x98>)
   115e2:	22cb      	movs	r2, #203	; 0xcb
   115e4:	f006 ff4d 	bl	18482 <printk>
   115e8:	21cb      	movs	r1, #203	; 0xcb
   115ea:	4816      	ldr	r0, [pc, #88]	; (11644 <pm_system_suspend+0x94>)
   115ec:	f007 f812 	bl	18614 <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   115f0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   115f4:	2100      	movs	r1, #0
   115f6:	68a7      	ldr	r7, [r4, #8]
   115f8:	4814      	ldr	r0, [pc, #80]	; (1164c <pm_system_suspend+0x9c>)
   115fa:	2300      	movs	r3, #0
   115fc:	fbe7 010c 	umlal	r0, r1, r7, ip
   11600:	4a13      	ldr	r2, [pc, #76]	; (11650 <pm_system_suspend+0xa0>)
   11602:	f7fe ff1b 	bl	1043c <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   11606:	2101      	movs	r1, #1
   11608:	1a28      	subs	r0, r5, r0
   1160a:	f004 f869 	bl	156e0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1160e:	f003 f929 	bl	14864 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   11612:	2001      	movs	r0, #1
   11614:	f7ff ff62 	bl	114dc <pm_state_notify>
	pm_state_set(z_power_state);
   11618:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1161c:	ab05      	add	r3, sp, #20
   1161e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   11622:	4a0c      	ldr	r2, [pc, #48]	; (11654 <pm_system_suspend+0xa4>)
   11624:	b11a      	cbz	r2, 1162e <pm_system_suspend+0x7e>
		pm_power_state_set(info);
   11626:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1162a:	f7ff ff43 	bl	114b4 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   1162e:	f7ff ff99 	bl	11564 <pm_system_resume>
	k_sched_unlock();
   11632:	f003 f96b 	bl	1490c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   11636:	7820      	ldrb	r0, [r4, #0]
}
   11638:	b009      	add	sp, #36	; 0x24
   1163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1163c:	20000234 	.word	0x20000234
   11640:	20000004 	.word	0x20000004
   11644:	00019229 	.word	0x00019229
   11648:	00019196 	.word	0x00019196
   1164c:	000f423f 	.word	0x000f423f
   11650:	000f4240 	.word	0x000f4240
   11654:	000114b5 	.word	0x000114b5

00011658 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   11658:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1165a:	4807      	ldr	r0, [pc, #28]	; (11678 <uart_console_init+0x20>)
   1165c:	f002 fa28 	bl	13ab0 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   11660:	4c06      	ldr	r4, [pc, #24]	; (1167c <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   11662:	4b07      	ldr	r3, [pc, #28]	; (11680 <uart_console_init+0x28>)
   11664:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   11666:	4620      	mov	r0, r4
   11668:	f001 fd02 	bl	13070 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1166c:	4620      	mov	r0, r4
   1166e:	f7ff f88f 	bl	10790 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   11672:	2000      	movs	r0, #0
   11674:	bd10      	pop	{r4, pc}
   11676:	bf00      	nop
   11678:	00019254 	.word	0x00019254
   1167c:	00011685 	.word	0x00011685
   11680:	20000240 	.word	0x20000240

00011684 <console_out>:
	if ('\n' == c) {
   11684:	280a      	cmp	r0, #10
{
   11686:	b538      	push	{r3, r4, r5, lr}
   11688:	4604      	mov	r4, r0
   1168a:	4d07      	ldr	r5, [pc, #28]	; (116a8 <console_out+0x24>)
	if ('\n' == c) {
   1168c:	d104      	bne.n	11698 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   1168e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   11690:	6883      	ldr	r3, [r0, #8]
   11692:	210d      	movs	r1, #13
   11694:	685b      	ldr	r3, [r3, #4]
   11696:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   11698:	6828      	ldr	r0, [r5, #0]
   1169a:	6883      	ldr	r3, [r0, #8]
   1169c:	b2e1      	uxtb	r1, r4
   1169e:	685b      	ldr	r3, [r3, #4]
   116a0:	4798      	blx	r3
}
   116a2:	4620      	mov	r0, r4
   116a4:	bd38      	pop	{r3, r4, r5, pc}
   116a6:	bf00      	nop
   116a8:	20000240 	.word	0x20000240

000116ac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   116ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   116ae:	2340      	movs	r3, #64	; 0x40
{
   116b0:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   116b2:	490a      	ldr	r1, [pc, #40]	; (116dc <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   116b4:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   116b6:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   116b8:	1149      	asrs	r1, r1, #5
{
   116ba:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   116bc:	4623      	mov	r3, r4
   116be:	4a08      	ldr	r2, [pc, #32]	; (116e0 <onoff_start+0x34>)
   116c0:	4808      	ldr	r0, [pc, #32]	; (116e4 <onoff_start+0x38>)
   116c2:	f006 ffdf 	bl	18684 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   116c6:	1e01      	subs	r1, r0, #0
   116c8:	da05      	bge.n	116d6 <onoff_start+0x2a>
		notify(mgr, err);
   116ca:	4628      	mov	r0, r5
   116cc:	4623      	mov	r3, r4
	}
}
   116ce:	b003      	add	sp, #12
   116d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   116d4:	4718      	bx	r3
}
   116d6:	b003      	add	sp, #12
   116d8:	bd30      	pop	{r4, r5, pc}
   116da:	bf00      	nop
   116dc:	2000025c 	.word	0x2000025c
   116e0:	000186ef 	.word	0x000186ef
   116e4:	00018ac8 	.word	0x00018ac8

000116e8 <get_status>:
{
   116e8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   116ea:	b2cc      	uxtb	r4, r1
   116ec:	2c01      	cmp	r4, #1
{
   116ee:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   116f0:	d908      	bls.n	11704 <get_status+0x1c>
   116f2:	4908      	ldr	r1, [pc, #32]	; (11714 <get_status+0x2c>)
   116f4:	4808      	ldr	r0, [pc, #32]	; (11718 <get_status+0x30>)
   116f6:	227e      	movs	r2, #126	; 0x7e
   116f8:	f006 fec3 	bl	18482 <printk>
   116fc:	217e      	movs	r1, #126	; 0x7e
   116fe:	4805      	ldr	r0, [pc, #20]	; (11714 <get_status+0x2c>)
   11700:	f006 ff88 	bl	18614 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   11704:	220c      	movs	r2, #12
   11706:	692b      	ldr	r3, [r5, #16]
   11708:	fb04 3302 	mla	r3, r4, r2, r3
   1170c:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1170e:	f000 0007 	and.w	r0, r0, #7
   11712:	bd38      	pop	{r3, r4, r5, pc}
   11714:	0001925b 	.word	0x0001925b
   11718:	00019196 	.word	0x00019196

0001171c <stop>:
{
   1171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1171e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   11720:	2c01      	cmp	r4, #1
{
   11722:	4605      	mov	r5, r0
   11724:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
   11726:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   11728:	d90a      	bls.n	11740 <stop+0x24>
   1172a:	4918      	ldr	r1, [pc, #96]	; (1178c <stop+0x70>)
   1172c:	4818      	ldr	r0, [pc, #96]	; (11790 <stop+0x74>)
   1172e:	f240 1253 	movw	r2, #339	; 0x153
   11732:	f006 fea6 	bl	18482 <printk>
   11736:	f240 1153 	movw	r1, #339	; 0x153
   1173a:	4814      	ldr	r0, [pc, #80]	; (1178c <stop+0x70>)
   1173c:	f006 ff6a 	bl	18614 <assert_post_action>
	__asm__ volatile(
   11740:	f04f 0320 	mov.w	r3, #32
   11744:	f3ef 8211 	mrs	r2, BASEPRI
   11748:	f383 8811 	msr	BASEPRI, r3
   1174c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   11750:	210c      	movs	r1, #12
   11752:	fb01 6304 	mla	r3, r1, r4, r6
   11756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   11758:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1175c:	d008      	beq.n	11770 <stop+0x54>
   1175e:	429f      	cmp	r7, r3
   11760:	d006      	beq.n	11770 <stop+0x54>
	__asm__ volatile(
   11762:	f382 8811 	msr	BASEPRI, r2
   11766:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1176a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1176e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   11770:	2301      	movs	r3, #1
   11772:	434c      	muls	r4, r1
   11774:	4426      	add	r6, r4
   11776:	64b3      	str	r3, [r6, #72]	; 0x48
   11778:	f382 8811 	msr	BASEPRI, r2
   1177c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   11780:	686b      	ldr	r3, [r5, #4]
   11782:	4423      	add	r3, r4
   11784:	685b      	ldr	r3, [r3, #4]
   11786:	4798      	blx	r3
	return 0;
   11788:	2000      	movs	r0, #0
   1178a:	e7f0      	b.n	1176e <stop+0x52>
   1178c:	0001925b 	.word	0x0001925b
   11790:	00019196 	.word	0x00019196

00011794 <onoff_stop>:
{
   11794:	b570      	push	{r4, r5, r6, lr}
   11796:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   11798:	4906      	ldr	r1, [pc, #24]	; (117b4 <onoff_stop+0x20>)
{
   1179a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1179c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1179e:	1149      	asrs	r1, r1, #5
   117a0:	2240      	movs	r2, #64	; 0x40
   117a2:	4805      	ldr	r0, [pc, #20]	; (117b8 <onoff_stop+0x24>)
   117a4:	f7ff ffba 	bl	1171c <stop>
	notify(mgr, res);
   117a8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   117aa:	4601      	mov	r1, r0
	notify(mgr, res);
   117ac:	4620      	mov	r0, r4
}
   117ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   117b2:	4718      	bx	r3
   117b4:	2000025c 	.word	0x2000025c
   117b8:	00018ac8 	.word	0x00018ac8

000117bc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   117bc:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   117be:	2200      	movs	r2, #0
   117c0:	2101      	movs	r1, #1
{
   117c2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   117c4:	2005      	movs	r0, #5
   117c6:	f000 fde9 	bl	1239c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   117ca:	2005      	movs	r0, #5
   117cc:	f000 fdca 	bl	12364 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   117d0:	480f      	ldr	r0, [pc, #60]	; (11810 <clk_init+0x54>)
   117d2:	f002 f805 	bl	137e0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   117d6:	4b0f      	ldr	r3, [pc, #60]	; (11814 <clk_init+0x58>)
   117d8:	4298      	cmp	r0, r3
   117da:	d115      	bne.n	11808 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   117dc:	f002 f820 	bl	13820 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   117e0:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   117e2:	490d      	ldr	r1, [pc, #52]	; (11818 <clk_init+0x5c>)
   117e4:	4630      	mov	r0, r6
   117e6:	f006 fe9b 	bl	18520 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   117ea:	2800      	cmp	r0, #0
   117ec:	db0b      	blt.n	11806 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   117ee:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
   117f0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   117f2:	4909      	ldr	r1, [pc, #36]	; (11818 <clk_init+0x5c>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   117f4:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   117f6:	f104 0020 	add.w	r0, r4, #32
   117fa:	f006 fe91 	bl	18520 <onoff_manager_init>
		if (err < 0) {
   117fe:	2800      	cmp	r0, #0
   11800:	db01      	blt.n	11806 <clk_init+0x4a>
	}

	return 0;
   11802:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11804:	6565      	str	r5, [r4, #84]	; 0x54
}
   11806:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   11808:	f06f 0004 	mvn.w	r0, #4
   1180c:	e7fb      	b.n	11806 <clk_init+0x4a>
   1180e:	bf00      	nop
   11810:	00011851 	.word	0x00011851
   11814:	0bad0000 	.word	0x0bad0000
   11818:	00018e08 	.word	0x00018e08

0001181c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1181c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1181e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   11820:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   11822:	434b      	muls	r3, r1
   11824:	4808      	ldr	r0, [pc, #32]	; (11848 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   11826:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   11828:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1182a:	3348      	adds	r3, #72	; 0x48
   1182c:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
   1182e:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   11832:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   11834:	f006 ff13 	bl	1865e <set_on_state>
	if (callback) {
   11838:	b12d      	cbz	r5, 11846 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1183a:	4632      	mov	r2, r6
   1183c:	462b      	mov	r3, r5
}
   1183e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   11842:	4802      	ldr	r0, [pc, #8]	; (1184c <clkstarted_handle.constprop.0+0x30>)
   11844:	4718      	bx	r3
}
   11846:	bd70      	pop	{r4, r5, r6, pc}
   11848:	2000025c 	.word	0x2000025c
   1184c:	00018ac8 	.word	0x00018ac8

00011850 <clock_event_handler>:
	switch (event) {
   11850:	2801      	cmp	r0, #1
{
   11852:	b508      	push	{r3, lr}
	switch (event) {
   11854:	d006      	beq.n	11864 <clock_event_handler+0x14>
   11856:	2803      	cmp	r0, #3
   11858:	d008      	beq.n	1186c <clock_event_handler+0x1c>
   1185a:	b9a0      	cbnz	r0, 11886 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1185c:	4b0f      	ldr	r3, [pc, #60]	; (1189c <clock_event_handler+0x4c>)
   1185e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11860:	075b      	lsls	r3, r3, #29
   11862:	d119      	bne.n	11898 <clock_event_handler+0x48>
}
   11864:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11868:	f7ff bfd8 	b.w	1181c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1186c:	490c      	ldr	r1, [pc, #48]	; (118a0 <clock_event_handler+0x50>)
   1186e:	f240 2266 	movw	r2, #614	; 0x266
   11872:	480c      	ldr	r0, [pc, #48]	; (118a4 <clock_event_handler+0x54>)
   11874:	f006 fe05 	bl	18482 <printk>
   11878:	f240 2166 	movw	r1, #614	; 0x266
}
   1187c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   11880:	4807      	ldr	r0, [pc, #28]	; (118a0 <clock_event_handler+0x50>)
   11882:	f006 bec7 	b.w	18614 <assert_post_action>
   11886:	4906      	ldr	r1, [pc, #24]	; (118a0 <clock_event_handler+0x50>)
   11888:	f240 226a 	movw	r2, #618	; 0x26a
   1188c:	4805      	ldr	r0, [pc, #20]	; (118a4 <clock_event_handler+0x54>)
   1188e:	f006 fdf8 	bl	18482 <printk>
   11892:	f240 216a 	movw	r1, #618	; 0x26a
   11896:	e7f1      	b.n	1187c <clock_event_handler+0x2c>
}
   11898:	bd08      	pop	{r3, pc}
   1189a:	bf00      	nop
   1189c:	2000025c 	.word	0x2000025c
   118a0:	0001925b 	.word	0x0001925b
   118a4:	00019196 	.word	0x00019196

000118a8 <generic_hfclk_start>:
{
   118a8:	b508      	push	{r3, lr}
	__asm__ volatile(
   118aa:	f04f 0320 	mov.w	r3, #32
   118ae:	f3ef 8111 	mrs	r1, BASEPRI
   118b2:	f383 8811 	msr	BASEPRI, r3
   118b6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   118ba:	4a12      	ldr	r2, [pc, #72]	; (11904 <generic_hfclk_start+0x5c>)
   118bc:	6813      	ldr	r3, [r2, #0]
   118be:	f043 0002 	orr.w	r0, r3, #2
   118c2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   118c4:	07da      	lsls	r2, r3, #31
   118c6:	d408      	bmi.n	118da <generic_hfclk_start+0x32>
	__asm__ volatile(
   118c8:	f381 8811 	msr	BASEPRI, r1
   118cc:	f3bf 8f6f 	isb	sy
}
   118d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   118d4:	2001      	movs	r0, #1
   118d6:	f001 bfc1 	b.w	1385c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   118da:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   118de:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   118e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   118e6:	07d3      	lsls	r3, r2, #31
   118e8:	d5ee      	bpl.n	118c8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   118ea:	4807      	ldr	r0, [pc, #28]	; (11908 <generic_hfclk_start+0x60>)
   118ec:	f006 feb7 	bl	1865e <set_on_state>
   118f0:	f381 8811 	msr	BASEPRI, r1
   118f4:	f3bf 8f6f 	isb	sy
}
   118f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   118fc:	2000      	movs	r0, #0
   118fe:	f7ff bf8d 	b.w	1181c <clkstarted_handle.constprop.0>
   11902:	bf00      	nop
   11904:	200002b4 	.word	0x200002b4
   11908:	200002a4 	.word	0x200002a4

0001190c <api_blocking_start>:
{
   1190c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1190e:	2200      	movs	r2, #0
   11910:	2301      	movs	r3, #1
   11912:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11916:	466b      	mov	r3, sp
   11918:	4a08      	ldr	r2, [pc, #32]	; (1193c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1191a:	f8cd d000 	str.w	sp, [sp]
   1191e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11922:	f006 fedd 	bl	186e0 <api_start>
	if (err < 0) {
   11926:	2800      	cmp	r0, #0
   11928:	db05      	blt.n	11936 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   1192a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1192e:	2300      	movs	r3, #0
   11930:	4668      	mov	r0, sp
   11932:	f002 fd97 	bl	14464 <z_impl_k_sem_take>
}
   11936:	b005      	add	sp, #20
   11938:	f85d fb04 	ldr.w	pc, [sp], #4
   1193c:	0001870d 	.word	0x0001870d

00011940 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11940:	4b07      	ldr	r3, [pc, #28]	; (11960 <generic_hfclk_stop+0x20>)
   11942:	e8d3 2fef 	ldaex	r2, [r3]
   11946:	f022 0102 	bic.w	r1, r2, #2
   1194a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1194e:	2800      	cmp	r0, #0
   11950:	d1f7      	bne.n	11942 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   11952:	07d3      	lsls	r3, r2, #31
   11954:	d402      	bmi.n	1195c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11956:	2001      	movs	r0, #1
   11958:	f001 bfd2 	b.w	13900 <nrfx_clock_stop>
}
   1195c:	4770      	bx	lr
   1195e:	bf00      	nop
   11960:	200002b4 	.word	0x200002b4

00011964 <z_nrf_clock_control_lf_on>:
{
   11964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11968:	2201      	movs	r2, #1
   1196a:	4606      	mov	r6, r0
   1196c:	4944      	ldr	r1, [pc, #272]	; (11a80 <z_nrf_clock_control_lf_on+0x11c>)
   1196e:	e8d1 3fef 	ldaex	r3, [r1]
   11972:	e8c1 2fe0 	stlex	r0, r2, [r1]
   11976:	2800      	cmp	r0, #0
   11978:	d1f9      	bne.n	1196e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1197a:	b99b      	cbnz	r3, 119a4 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1197c:	4941      	ldr	r1, [pc, #260]	; (11a84 <z_nrf_clock_control_lf_on+0x120>)
		err = onoff_request(mgr, &cli);
   1197e:	4842      	ldr	r0, [pc, #264]	; (11a88 <z_nrf_clock_control_lf_on+0x124>)
   11980:	604b      	str	r3, [r1, #4]
   11982:	60cb      	str	r3, [r1, #12]
   11984:	608a      	str	r2, [r1, #8]
   11986:	f7ff f927 	bl	10bd8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1198a:	2800      	cmp	r0, #0
   1198c:	da0a      	bge.n	119a4 <z_nrf_clock_control_lf_on+0x40>
   1198e:	493f      	ldr	r1, [pc, #252]	; (11a8c <z_nrf_clock_control_lf_on+0x128>)
   11990:	483f      	ldr	r0, [pc, #252]	; (11a90 <z_nrf_clock_control_lf_on+0x12c>)
   11992:	f240 2226 	movw	r2, #550	; 0x226
   11996:	f006 fd74 	bl	18482 <printk>
   1199a:	f240 2126 	movw	r1, #550	; 0x226
   1199e:	483b      	ldr	r0, [pc, #236]	; (11a8c <z_nrf_clock_control_lf_on+0x128>)
   119a0:	f006 fe38 	bl	18614 <assert_post_action>
	switch (start_mode) {
   119a4:	b376      	cbz	r6, 11a04 <z_nrf_clock_control_lf_on+0xa0>
   119a6:	1e73      	subs	r3, r6, #1
   119a8:	2b01      	cmp	r3, #1
   119aa:	d85c      	bhi.n	11a66 <z_nrf_clock_control_lf_on+0x102>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   119ac:	2e01      	cmp	r6, #1
   119ae:	d107      	bne.n	119c0 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   119b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   119b4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   119b8:	f003 0303 	and.w	r3, r3, #3
   119bc:	2b02      	cmp	r3, #2
   119be:	d021      	beq.n	11a04 <z_nrf_clock_control_lf_on+0xa0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   119c0:	f007 f80f 	bl	189e2 <k_is_in_isr>
   119c4:	4605      	mov	r5, r0
   119c6:	b9f8      	cbnz	r0, 11a08 <z_nrf_clock_control_lf_on+0xa4>
	return !z_sys_post_kernel;
   119c8:	4b32      	ldr	r3, [pc, #200]	; (11a94 <z_nrf_clock_control_lf_on+0x130>)
   119ca:	781b      	ldrb	r3, [r3, #0]
   119cc:	b1e3      	cbz	r3, 11a08 <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENCLR = mask;
   119ce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   119d2:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   119d4:	4607      	mov	r7, r0
   119d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   119da:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   119de:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11a98 <z_nrf_clock_control_lf_on+0x134>
   119e2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   119e6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   119ea:	03d2      	lsls	r2, r2, #15
   119ec:	d516      	bpl.n	11a1c <z_nrf_clock_control_lf_on+0xb8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   119ee:	f003 0303 	and.w	r3, r3, #3
   119f2:	2b02      	cmp	r3, #2
   119f4:	d001      	beq.n	119fa <z_nrf_clock_control_lf_on+0x96>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   119f6:	2e01      	cmp	r6, #1
   119f8:	d110      	bne.n	11a1c <z_nrf_clock_control_lf_on+0xb8>
	if (isr_mode) {
   119fa:	b375      	cbz	r5, 11a5a <z_nrf_clock_control_lf_on+0xf6>
   119fc:	f387 8811 	msr	BASEPRI, r7
   11a00:	f3bf 8f6f 	isb	sy
}
   11a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   11a08:	f04f 0320 	mov.w	r3, #32
   11a0c:	f3ef 8711 	mrs	r7, BASEPRI
   11a10:	f383 8811 	msr	BASEPRI, r3
   11a14:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11a18:	2501      	movs	r5, #1
   11a1a:	e7de      	b.n	119da <z_nrf_clock_control_lf_on+0x76>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   11a1c:	b1c5      	cbz	r5, 11a50 <z_nrf_clock_control_lf_on+0xec>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   11a1e:	4638      	mov	r0, r7
   11a20:	f000 fd26 	bl	12470 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   11a24:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   11a28:	b2db      	uxtb	r3, r3
   11a2a:	2b01      	cmp	r3, #1
   11a2c:	d1d9      	bne.n	119e2 <z_nrf_clock_control_lf_on+0x7e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   11a2e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   11a32:	2a00      	cmp	r2, #0
   11a34:	d0d5      	beq.n	119e2 <z_nrf_clock_control_lf_on+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11a36:	2200      	movs	r2, #0
   11a38:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   11a3c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   11a40:	2202      	movs	r2, #2
   11a42:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   11a46:	2220      	movs	r2, #32
   11a48:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11a4c:	60a3      	str	r3, [r4, #8]
}
   11a4e:	e7c8      	b.n	119e2 <z_nrf_clock_control_lf_on+0x7e>
	return z_impl_k_sleep(timeout);
   11a50:	2100      	movs	r1, #0
   11a52:	2021      	movs	r0, #33	; 0x21
   11a54:	f003 fbf2 	bl	1523c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11a58:	e7e4      	b.n	11a24 <z_nrf_clock_control_lf_on+0xc0>
    p_reg->INTENSET = mask;
   11a5a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11a5e:	2202      	movs	r2, #2
   11a60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   11a64:	e7ce      	b.n	11a04 <z_nrf_clock_control_lf_on+0xa0>
		__ASSERT_NO_MSG(false);
   11a66:	4909      	ldr	r1, [pc, #36]	; (11a8c <z_nrf_clock_control_lf_on+0x128>)
   11a68:	4809      	ldr	r0, [pc, #36]	; (11a90 <z_nrf_clock_control_lf_on+0x12c>)
   11a6a:	f44f 720e 	mov.w	r2, #568	; 0x238
   11a6e:	f006 fd08 	bl	18482 <printk>
}
   11a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   11a76:	f44f 710e 	mov.w	r1, #568	; 0x238
   11a7a:	4804      	ldr	r0, [pc, #16]	; (11a8c <z_nrf_clock_control_lf_on+0x128>)
   11a7c:	f006 bdca 	b.w	18614 <assert_post_action>
   11a80:	20000254 	.word	0x20000254
   11a84:	20000244 	.word	0x20000244
   11a88:	2000027c 	.word	0x2000027c
   11a8c:	0001925b 	.word	0x0001925b
   11a90:	00019196 	.word	0x00019196
   11a94:	20001325 	.word	0x20001325
   11a98:	e000e100 	.word	0xe000e100

00011a9c <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   11a9c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   11a9e:	4c06      	ldr	r4, [pc, #24]	; (11ab8 <sys_clock_isr+0x1c>)
   11aa0:	4806      	ldr	r0, [pc, #24]	; (11abc <sys_clock_isr+0x20>)
   11aa2:	4621      	mov	r1, r4
   11aa4:	2217      	movs	r2, #23
   11aa6:	f006 fcec 	bl	18482 <printk>
   11aaa:	4620      	mov	r0, r4
}
   11aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   11ab0:	2117      	movs	r1, #23
   11ab2:	f006 bdaf 	b.w	18614 <assert_post_action>
   11ab6:	bf00      	nop
   11ab8:	000192b2 	.word	0x000192b2
   11abc:	00019196 	.word	0x00019196

00011ac0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   11ac0:	4a04      	ldr	r2, [pc, #16]	; (11ad4 <sys_clock_timeout_handler+0x14>)
   11ac2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   11ac4:	1ac8      	subs	r0, r1, r3
   11ac6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   11aca:	4403      	add	r3, r0
   11acc:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   11ace:	f003 be47 	b.w	15760 <sys_clock_announce>
   11ad2:	bf00      	nop
   11ad4:	200002c8 	.word	0x200002c8

00011ad8 <set_absolute_alarm>:
{
   11ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11adc:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11ae0:	f04f 0900 	mov.w	r9, #0
   11ae4:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   11ae6:	f100 0450 	add.w	r4, r0, #80	; 0x50
   11aea:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
   11aee:	00a4      	lsls	r4, r4, #2
   11af0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
   11af4:	b2a4      	uxth	r4, r4
   11af6:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
   11afa:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   11afe:	f8df 806c 	ldr.w	r8, [pc, #108]	; 11b6c <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   11b02:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11b06:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11b0a:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   11b0c:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   11b10:	eba3 030a 	sub.w	r3, r3, sl
   11b14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   11b18:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   11b1c:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   11b1e:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   11b22:	d102      	bne.n	11b2a <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   11b24:	2013      	movs	r0, #19
   11b26:	f006 ff94 	bl	18a52 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   11b2a:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   11b2e:	1aab      	subs	r3, r5, r2
   11b30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   11b34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   11b38:	bf88      	it	hi
   11b3a:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11b3c:	f8c4 9000 	str.w	r9, [r4]
   11b40:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   11b42:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   11b46:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   11b4a:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   11b4e:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
	} while ((now2 != now) &&
   11b52:	459a      	cmp	sl, r3
   11b54:	d006      	beq.n	11b64 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   11b56:	1aeb      	subs	r3, r5, r3
   11b58:	3b02      	subs	r3, #2
   11b5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   11b5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   11b62:	d801      	bhi.n	11b68 <set_absolute_alarm+0x90>
}
   11b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   11b68:	462b      	mov	r3, r5
   11b6a:	e7cf      	b.n	11b0c <set_absolute_alarm+0x34>
   11b6c:	50015000 	.word	0x50015000

00011b70 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   11b70:	4b11      	ldr	r3, [pc, #68]	; (11bb8 <rtc_nrf_isr+0x48>)
 */
void rtc_nrf_isr(const void *arg)
{
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11b72:	2000      	movs	r0, #0
   11b74:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
{
   11b78:	b510      	push	{r4, lr}
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   11b7a:	03d2      	lsls	r2, r2, #15
   11b7c:	d51b      	bpl.n	11bb6 <rtc_nrf_isr+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11b7e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   11b82:	b1c2      	cbz	r2, 11bb6 <rtc_nrf_isr+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11b84:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
   11b88:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   11b8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11b90:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    return p_reg->CC[ch];
   11b94:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   11b98:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   11b9c:	1a8b      	subs	r3, r1, r2
   11b9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			uint32_t now;
			z_nrf_rtc_timer_compare_handler_t handler;

			event_clear(chan);
			event_disable(chan);
			cc_val = get_comparator(chan);
   11ba2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   11ba6:	bf98      	it	ls
   11ba8:	4611      	movls	r1, r2
			 */
			if (counter_sub(now, cc_val) > COUNTER_HALF_SPAN) {
				cc_val = now;
			}

			handler = cc_data[chan].callback;
   11baa:	4b04      	ldr	r3, [pc, #16]	; (11bbc <rtc_nrf_isr+0x4c>)
   11bac:	681c      	ldr	r4, [r3, #0]
			cc_data[chan].callback = NULL;
   11bae:	6018      	str	r0, [r3, #0]
			if (handler) {
   11bb0:	b10c      	cbz	r4, 11bb6 <rtc_nrf_isr+0x46>
				handler(chan, cc_val,
   11bb2:	685a      	ldr	r2, [r3, #4]
   11bb4:	47a0      	blx	r4
					cc_data[chan].user_context);
			}
		}
	}
}
   11bb6:	bd10      	pop	{r4, pc}
   11bb8:	50015000 	.word	0x50015000
   11bbc:	200002c0 	.word	0x200002c0

00011bc0 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   11bc0:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   11bc2:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
   11bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11bc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   11bcc:	4c0c      	ldr	r4, [pc, #48]	; (11c00 <sys_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   11bce:	2101      	movs	r1, #1
   11bd0:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
   11bd4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   11bd8:	4b0a      	ldr	r3, [pc, #40]	; (11c04 <sys_clock_driver_init+0x44>)
   11bda:	2015      	movs	r0, #21
   11bdc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11be0:	462a      	mov	r2, r5
   11be2:	f000 fbdb 	bl	1239c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   11be6:	2015      	movs	r0, #21
   11be8:	f000 fbbc 	bl	12364 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11bec:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   11bee:	4a06      	ldr	r2, [pc, #24]	; (11c08 <sys_clock_driver_init+0x48>)
   11bf0:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   11bf2:	2002      	movs	r0, #2
   11bf4:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   11bf6:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   11bf8:	f7ff feb4 	bl	11964 <z_nrf_clock_control_lf_on>

	return 0;
}
   11bfc:	4628      	mov	r0, r5
   11bfe:	bd38      	pop	{r3, r4, r5, pc}
   11c00:	50015000 	.word	0x50015000
   11c04:	e000e100 	.word	0xe000e100
   11c08:	200002bc 	.word	0x200002bc

00011c0c <sys_clock_set_timeout>:
     return p_reg->COUNTER;
   11c0c:	4a13      	ldr	r2, [pc, #76]	; (11c5c <sys_clock_set_timeout+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11c0e:	4914      	ldr	r1, [pc, #80]	; (11c60 <sys_clock_set_timeout+0x54>)
{
   11c10:	b410      	push	{r4}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11c12:	f1b0 3fff 	cmp.w	r0, #4294967295
   11c16:	bf14      	ite	ne
   11c18:	4603      	movne	r3, r0
   11c1a:	460b      	moveq	r3, r1
   11c1c:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);

	uint32_t unannounced = counter_sub(counter(), last_count);
   11c20:	4a10      	ldr	r2, [pc, #64]	; (11c64 <sys_clock_set_timeout+0x58>)
   11c22:	6814      	ldr	r4, [r2, #0]
	return (a - b) & COUNTER_MAX;
   11c24:	1b00      	subs	r0, r0, r4
   11c26:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   11c2a:	0200      	lsls	r0, r0, #8
   11c2c:	d413      	bmi.n	11c56 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11c2e:	3b01      	subs	r3, #1
   11c30:	428b      	cmp	r3, r1
   11c32:	bfa8      	it	ge
   11c34:	460b      	movge	r3, r1
   11c36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11c3a:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
   11c3c:	480a      	ldr	r0, [pc, #40]	; (11c68 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11c3e:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
   11c40:	4a0a      	ldr	r2, [pc, #40]	; (11c6c <sys_clock_set_timeout+0x60>)
	set_absolute_alarm(chan, cc_value);
   11c42:	428b      	cmp	r3, r1
   11c44:	bf94      	ite	ls
   11c46:	18e1      	addls	r1, r4, r3
   11c48:	1861      	addhi	r1, r4, r1
	cc_data[chan].callback = handler;
   11c4a:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   11c4c:	2000      	movs	r0, #0
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}
   11c4e:	bc10      	pop	{r4}
	cc_data[chan].user_context = user_data;
   11c50:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   11c52:	f7ff bf41 	b.w	11ad8 <set_absolute_alarm>
		ticks = 0;
   11c56:	2300      	movs	r3, #0
   11c58:	e7ef      	b.n	11c3a <sys_clock_set_timeout+0x2e>
   11c5a:	bf00      	nop
   11c5c:	50015000 	.word	0x50015000
   11c60:	007fffff 	.word	0x007fffff
   11c64:	200002c8 	.word	0x200002c8
   11c68:	00011ac1 	.word	0x00011ac1
   11c6c:	200002c0 	.word	0x200002c0

00011c70 <sys_clock_elapsed>:
   11c70:	4b04      	ldr	r3, [pc, #16]	; (11c84 <sys_clock_elapsed+0x14>)
   11c72:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   11c76:	4b04      	ldr	r3, [pc, #16]	; (11c88 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   11c78:	681b      	ldr	r3, [r3, #0]
   11c7a:	1ac0      	subs	r0, r0, r3
}
   11c7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11c80:	4770      	bx	lr
   11c82:	bf00      	nop
   11c84:	50015000 	.word	0x50015000
   11c88:	200002c8 	.word	0x200002c8

00011c8c <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
   11c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   11c8e:	2800      	cmp	r0, #0
{
   11c90:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   11c92:	bf14      	ite	ne
   11c94:	f44f 5300 	movne.w	r3, #8192	; 0x2000
   11c98:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
   11c9c:	428a      	cmp	r2, r1
   11c9e:	d20b      	bcs.n	11cb8 <config_regions+0x2c>
   11ca0:	2294      	movs	r2, #148	; 0x94
   11ca2:	4921      	ldr	r1, [pc, #132]	; (11d28 <config_regions+0x9c>)
   11ca4:	4821      	ldr	r0, [pc, #132]	; (11d2c <config_regions+0xa0>)
   11ca6:	f006 fbec 	bl	18482 <printk>
   11caa:	2194      	movs	r1, #148	; 0x94
   11cac:	481e      	ldr	r0, [pc, #120]	; (11d28 <config_regions+0x9c>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
   11cae:	b003      	add	sp, #12
   11cb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
   11cb4:	f006 bcae 	b.w	18614 <assert_post_action>
	if (end <= start) {
   11cb8:	d033      	beq.n	11d22 <config_regions+0x96>
   11cba:	460d      	mov	r5, r1
   11cbc:	4e1c      	ldr	r6, [pc, #112]	; (11d30 <config_regions+0xa4>)
		if (ram) {
   11cbe:	b368      	cbz	r0, 11d1c <config_regions+0x90>
			NRF_SPU->RAMREGION[i].PERM = perm;
   11cc0:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
   11cc4:	3501      	adds	r5, #1
   11cc6:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11cc8:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
   11ccc:	d1f7      	bne.n	11cbe <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
   11cce:	fb02 f003 	mul.w	r0, r2, r3
   11cd2:	3a01      	subs	r2, #1
   11cd4:	434b      	muls	r3, r1
   11cd6:	9000      	str	r0, [sp, #0]
   11cd8:	4816      	ldr	r0, [pc, #88]	; (11d34 <config_regions+0xa8>)
   11cda:	f006 fbd2 	bl	18482 <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
   11cde:	4b16      	ldr	r3, [pc, #88]	; (11d38 <config_regions+0xac>)
   11ce0:	f014 0f10 	tst.w	r4, #16
   11ce4:	4915      	ldr	r1, [pc, #84]	; (11d3c <config_regions+0xb0>)
   11ce6:	4816      	ldr	r0, [pc, #88]	; (11d40 <config_regions+0xb4>)
   11ce8:	bf18      	it	ne
   11cea:	4619      	movne	r1, r3
   11cec:	f006 fbc9 	bl	18482 <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
   11cf0:	2172      	movs	r1, #114	; 0x72
   11cf2:	4814      	ldr	r0, [pc, #80]	; (11d44 <config_regions+0xb8>)
   11cf4:	f006 fbc5 	bl	18482 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
   11cf8:	2177      	movs	r1, #119	; 0x77
   11cfa:	4812      	ldr	r0, [pc, #72]	; (11d44 <config_regions+0xb8>)
   11cfc:	f006 fbc1 	bl	18482 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
   11d00:	2178      	movs	r1, #120	; 0x78
   11d02:	4810      	ldr	r0, [pc, #64]	; (11d44 <config_regions+0xb8>)
   11d04:	f006 fbbd 	bl	18482 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
   11d08:	216c      	movs	r1, #108	; 0x6c
   11d0a:	480e      	ldr	r0, [pc, #56]	; (11d44 <config_regions+0xb8>)
   11d0c:	f006 fbb9 	bl	18482 <printk>
	PRINT("\n");
   11d10:	480d      	ldr	r0, [pc, #52]	; (11d48 <config_regions+0xbc>)
}
   11d12:	b003      	add	sp, #12
   11d14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
   11d18:	f006 bbb3 	b.w	18482 <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11d1c:	f505 77c0 	add.w	r7, r5, #384	; 0x180
   11d20:	e7d0      	b.n	11cc4 <config_regions+0x38>
}
   11d22:	b003      	add	sp, #12
   11d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d26:	bf00      	nop
   11d28:	00019303 	.word	0x00019303
   11d2c:	00019196 	.word	0x00019196
   11d30:	50003000 	.word	0x50003000
   11d34:	00019324 	.word	0x00019324
   11d38:	000192ee 	.word	0x000192ee
   11d3c:	000192f7 	.word	0x000192f7
   11d40:	000194d5 	.word	0x000194d5
   11d44:	0001933e 	.word	0x0001933e
   11d48:	00019f20 	.word	0x00019f20

00011d4c <config_peripheral.constprop.0>:
  if ((int32_t)(IRQn) >= 0)
   11d4c:	f010 0f80 	tst.w	r0, #128	; 0x80
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int config_peripheral(uint8_t id, bool dma_present, bool lock)
   11d50:	b510      	push	{r4, lr}
   11d52:	f500 7200 	add.w	r2, r0, #512	; 0x200
   11d56:	d00e      	beq.n	11d76 <config_peripheral.constprop.0+0x2a>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   11d58:	4b12      	ldr	r3, [pc, #72]	; (11da4 <config_peripheral.constprop.0+0x58>)
   11d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	return present && (usel || split);
   11d5e:	2b00      	cmp	r3, #0
   11d60:	da04      	bge.n	11d6c <config_peripheral.constprop.0+0x20>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   11d62:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
   11d66:	3b02      	subs	r3, #2
   11d68:	2b01      	cmp	r3, #1
   11d6a:	d916      	bls.n	11d9a <config_peripheral.constprop.0+0x4e>
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
   11d6c:	2101      	movs	r1, #1
   11d6e:	f006 fcd9 	bl	18724 <irq_target_state_set>
	return 0;
}
   11d72:	2000      	movs	r0, #0
   11d74:	bd10      	pop	{r4, pc}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11d76:	2101      	movs	r1, #1
   11d78:	f000 041f 	and.w	r4, r0, #31
   11d7c:	40a1      	lsls	r1, r4
   11d7e:	0943      	lsrs	r3, r0, #5
   11d80:	4c09      	ldr	r4, [pc, #36]	; (11da8 <config_peripheral.constprop.0+0x5c>)
   11d82:	3320      	adds	r3, #32
   11d84:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   11d88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11d8c:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   11d90:	4b04      	ldr	r3, [pc, #16]	; (11da4 <config_peripheral.constprop.0+0x58>)
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   11d92:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   11d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   11d98:	d1e1      	bne.n	11d5e <config_peripheral.constprop.0+0x12>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   11d9a:	4b02      	ldr	r3, [pc, #8]	; (11da4 <config_peripheral.constprop.0+0x58>)
   11d9c:	4903      	ldr	r1, [pc, #12]	; (11dac <config_peripheral.constprop.0+0x60>)
   11d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   11da2:	e7e3      	b.n	11d6c <config_peripheral.constprop.0+0x20>
   11da4:	50003000 	.word	0x50003000
   11da8:	e000e100 	.word	0xe000e100
   11dac:	80000100 	.word	0x80000100

00011db0 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
   11db0:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11db2:	f44f 3400 	mov.w	r4, #131072	; 0x20000
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   11db6:	4d20      	ldr	r5, [pc, #128]	; (11e38 <spm_jump+0x88>)
{
   11db8:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   11dba:	4629      	mov	r1, r5
   11dbc:	481f      	ldr	r0, [pc, #124]	; (11e3c <spm_jump+0x8c>)
   11dbe:	f006 fb60 	bl	18482 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11dc2:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
   11dc6:	481e      	ldr	r0, [pc, #120]	; (11e40 <spm_jump+0x90>)
   11dc8:	f006 fb5b 	bl	18482 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   11dcc:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   11dd0:	481c      	ldr	r0, [pc, #112]	; (11e44 <spm_jump+0x94>)
   11dd2:	f006 fb56 	bl	18482 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   11dd6:	2210      	movs	r2, #16
   11dd8:	2100      	movs	r1, #0
   11dda:	4668      	mov	r0, sp
   11ddc:	f006 fd3b 	bl	18856 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
   11de0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	tz_nonsecure_state_setup(spm_ns_conf);
   11de4:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   11de6:	9300      	str	r3, [sp, #0]
   11de8:	9502      	str	r5, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
   11dea:	f000 fec9 	bl	12b80 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
   11dee:	2001      	movs	r0, #1
   11df0:	f000 fef6 	bl	12be0 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
   11df4:	2000      	movs	r0, #0
   11df6:	f000 fedf 	bl	12bb8 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
   11dfa:	2000      	movs	r0, #0
   11dfc:	f000 ff04 	bl	12c08 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
   11e00:	2101      	movs	r1, #1
   11e02:	2000      	movs	r0, #0
   11e04:	f000 ff1e 	bl	12c44 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
   11e08:	f000 ff12 	bl	12c30 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   11e0c:	f8d4 4204 	ldr.w	r4, [r4, #516]	; 0x204

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   11e10:	480d      	ldr	r0, [pc, #52]	; (11e48 <spm_jump+0x98>)
   11e12:	f006 fb36 	bl	18482 <printk>
	return config_peripheral(id, dma_present, true);
   11e16:	2008      	movs	r0, #8
   11e18:	f7ff ff98 	bl	11d4c <config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   11e1c:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   11e20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11e24:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
   11e28:	0864      	lsrs	r4, r4, #1
   11e2a:	0064      	lsls	r4, r4, #1
   11e2c:	4620      	mov	r0, r4
   11e2e:	4621      	mov	r1, r4
   11e30:	4622      	mov	r2, r4
   11e32:	4623      	mov	r3, r4
   11e34:	f7fe fb1c 	bl	10470 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
   11e38:	00020200 	.word	0x00020200
   11e3c:	00019341 	.word	0x00019341
   11e40:	00019358 	.word	0x00019358
   11e44:	0001936d 	.word	0x0001936d
   11e48:	0001938b 	.word	0x0001938b

00011e4c <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
   11e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
   11e50:	4851      	ldr	r0, [pc, #324]	; (11f98 <spm_config+0x14c>)
   11e52:	f006 fb16 	bl	18482 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
   11e56:	2100      	movs	r1, #0
   11e58:	f240 1317 	movw	r3, #279	; 0x117
   11e5c:	4608      	mov	r0, r1
   11e5e:	2204      	movs	r2, #4
   11e60:	f7ff ff14 	bl	11c8c <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   11e64:	4d4d      	ldr	r5, [pc, #308]	; (11f9c <spm_config+0x150>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
   11e66:	f240 1307 	movw	r3, #263	; 0x107
   11e6a:	2220      	movs	r2, #32
   11e6c:	2104      	movs	r1, #4
   11e6e:	2000      	movs	r0, #0
   11e70:	f7ff ff0c 	bl	11c8c <config_regions>
	PRINT("\n");
   11e74:	484a      	ldr	r0, [pc, #296]	; (11fa0 <spm_config+0x154>)
   11e76:	f006 fb04 	bl	18482 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   11e7a:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
   11e7e:	4b49      	ldr	r3, [pc, #292]	; (11fa4 <spm_config+0x158>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   11e80:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
   11e84:	429c      	cmp	r4, r3
   11e86:	d208      	bcs.n	11e9a <spm_config+0x4e>
   11e88:	4947      	ldr	r1, [pc, #284]	; (11fa8 <spm_config+0x15c>)
   11e8a:	4848      	ldr	r0, [pc, #288]	; (11fac <spm_config+0x160>)
   11e8c:	2282      	movs	r2, #130	; 0x82
   11e8e:	f006 faf8 	bl	18482 <printk>
   11e92:	2182      	movs	r1, #130	; 0x82
   11e94:	4844      	ldr	r0, [pc, #272]	; (11fa8 <spm_config+0x15c>)
   11e96:	f006 fbbd 	bl	18614 <assert_post_action>
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
   11e9a:	4e45      	ldr	r6, [pc, #276]	; (11fb0 <spm_config+0x164>)
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
   11e9c:	f3c4 1443 	ubfx	r4, r4, #5, #4
   11ea0:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
   11ea4:	f3c5 35c4 	ubfx	r5, r5, #15, #5
   11ea8:	05da      	lsls	r2, r3, #23
   11eaa:	d50a      	bpl.n	11ec2 <spm_config+0x76>
   11eac:	4941      	ldr	r1, [pc, #260]	; (11fb4 <spm_config+0x168>)
   11eae:	483f      	ldr	r0, [pc, #252]	; (11fac <spm_config+0x160>)
   11eb0:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   11eb4:	f006 fae5 	bl	18482 <printk>
   11eb8:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   11ebc:	483d      	ldr	r0, [pc, #244]	; (11fb4 <spm_config+0x168>)
   11ebe:	f006 fba9 	bl	18614 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
   11ec2:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
   11ec6:	05db      	lsls	r3, r3, #23
   11ec8:	d50a      	bpl.n	11ee0 <spm_config+0x94>
   11eca:	493a      	ldr	r1, [pc, #232]	; (11fb4 <spm_config+0x168>)
   11ecc:	4837      	ldr	r0, [pc, #220]	; (11fac <spm_config+0x160>)
   11ece:	f240 127b 	movw	r2, #379	; 0x17b
   11ed2:	f006 fad6 	bl	18482 <printk>
   11ed6:	f240 117b 	movw	r1, #379	; 0x17b
   11eda:	4836      	ldr	r0, [pc, #216]	; (11fb4 <spm_config+0x168>)
   11edc:	f006 fb9a 	bl	18614 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   11ee0:	4b33      	ldr	r3, [pc, #204]	; (11fb0 <spm_config+0x164>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
   11ee2:	4835      	ldr	r0, [pc, #212]	; (11fb8 <spm_config+0x16c>)
   11ee4:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   11ee8:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   11eec:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
   11ef0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   11ef4:	0152      	lsls	r2, r2, #5
   11ef6:	f006 fac4 	bl	18482 <printk>
	PRINT("\n");
   11efa:	4829      	ldr	r0, [pc, #164]	; (11fa0 <spm_config+0x154>)
   11efc:	f006 fac1 	bl	18482 <printk>
	int err = spm_secure_services_init();
   11f00:	f000 f870 	bl	11fe4 <spm_secure_services_init>
	if (err != 0) {
   11f04:	4601      	mov	r1, r0
   11f06:	b110      	cbz	r0, 11f0e <spm_config+0xc2>
		PRINT("Could not initialize secure services (err %d).\n", err);
   11f08:	482c      	ldr	r0, [pc, #176]	; (11fbc <spm_config+0x170>)
   11f0a:	f006 faba 	bl	18482 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11f0e:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
   11f10:	482b      	ldr	r0, [pc, #172]	; (11fc0 <spm_config+0x174>)
   11f12:	f006 fab6 	bl	18482 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
   11f16:	f240 1317 	movw	r3, #279	; 0x117
   11f1a:	2208      	movs	r2, #8
   11f1c:	2100      	movs	r1, #0
   11f1e:	2001      	movs	r0, #1
   11f20:	f7ff feb4 	bl	11c8c <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
   11f24:	4d22      	ldr	r5, [pc, #136]	; (11fb0 <spm_config+0x164>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
   11f26:	f240 1307 	movw	r3, #263	; 0x107
   11f2a:	2220      	movs	r2, #32
   11f2c:	2108      	movs	r1, #8
   11f2e:	2001      	movs	r0, #1
   11f30:	f7ff feac 	bl	11c8c <config_regions>
	PRINT("\n");
   11f34:	481a      	ldr	r0, [pc, #104]	; (11fa0 <spm_config+0x154>)
   11f36:	f006 faa4 	bl	18482 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11f3a:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
   11f3e:	4821      	ldr	r0, [pc, #132]	; (11fc4 <spm_config+0x178>)
   11f40:	f006 fa9f 	bl	18482 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
   11f44:	4f20      	ldr	r7, [pc, #128]	; (11fc8 <spm_config+0x17c>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
   11f46:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
   11f4a:	4e20      	ldr	r6, [pc, #128]	; (11fcc <spm_config+0x180>)
   11f4c:	4d20      	ldr	r5, [pc, #128]	; (11fd0 <spm_config+0x184>)
			PRINT("\tSKIP\n");
   11f4e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 11fd4 <spm_config+0x188>
		PRINT("%02u %-21s%s", i, periph[i].name,
   11f52:	796b      	ldrb	r3, [r5, #5]
   11f54:	682a      	ldr	r2, [r5, #0]
   11f56:	b153      	cbz	r3, 11f6e <spm_config+0x122>
   11f58:	4630      	mov	r0, r6
   11f5a:	4621      	mov	r1, r4
   11f5c:	4b1e      	ldr	r3, [pc, #120]	; (11fd8 <spm_config+0x18c>)
   11f5e:	f006 fa90 	bl	18482 <printk>
	return config_peripheral(id, dma_present, true);
   11f62:	7928      	ldrb	r0, [r5, #4]
   11f64:	f7ff fef2 	bl	11d4c <config_peripheral.constprop.0>
		if (err) {
   11f68:	b998      	cbnz	r0, 11f92 <spm_config+0x146>
			PRINT("\tOK\n");
   11f6a:	481c      	ldr	r0, [pc, #112]	; (11fdc <spm_config+0x190>)
   11f6c:	e005      	b.n	11f7a <spm_config+0x12e>
		PRINT("%02u %-21s%s", i, periph[i].name,
   11f6e:	4630      	mov	r0, r6
   11f70:	463b      	mov	r3, r7
   11f72:	4621      	mov	r1, r4
   11f74:	f006 fa85 	bl	18482 <printk>
			PRINT("\tSKIP\n");
   11f78:	4640      	mov	r0, r8
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   11f7a:	3401      	adds	r4, #1
			PRINT("\tOK\n");
   11f7c:	f006 fa81 	bl	18482 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   11f80:	2c1c      	cmp	r4, #28
   11f82:	f105 0508 	add.w	r5, r5, #8
   11f86:	d1e4      	bne.n	11f52 <spm_config+0x106>
	PRINT("\n");
   11f88:	4805      	ldr	r0, [pc, #20]	; (11fa0 <spm_config+0x154>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
   11f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	PRINT("\n");
   11f8e:	f006 ba78 	b.w	18482 <printk>
			PRINT("\tERROR\n");
   11f92:	4813      	ldr	r0, [pc, #76]	; (11fe0 <spm_config+0x194>)
   11f94:	e7f1      	b.n	11f7a <spm_config+0x12e>
   11f96:	bf00      	nop
   11f98:	000193b6 	.word	0x000193b6
   11f9c:	0001ffe0 	.word	0x0001ffe0
   11fa0:	00019f20 	.word	0x00019f20
   11fa4:	00000020 	.word	0x00000020
   11fa8:	00019303 	.word	0x00019303
   11fac:	00019196 	.word	0x00019196
   11fb0:	50003000 	.word	0x50003000
   11fb4:	000193da 	.word	0x000193da
   11fb8:	0001940c 	.word	0x0001940c
   11fbc:	00019452 	.word	0x00019452
   11fc0:	00019482 	.word	0x00019482
   11fc4:	000194a4 	.word	0x000194a4
   11fc8:	000192fb 	.word	0x000192fb
   11fcc:	000194cb 	.word	0x000194cb
   11fd0:	00018e40 	.word	0x00018e40
   11fd4:	000194d8 	.word	0x000194d8
   11fd8:	000194c0 	.word	0x000194c0
   11fdc:	000194e7 	.word	0x000194e7
   11fe0:	000194df 	.word	0x000194df

00011fe4 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
   11fe4:	2200      	movs	r2, #0
   11fe6:	4802      	ldr	r0, [pc, #8]	; (11ff0 <spm_secure_services_init+0xc>)
   11fe8:	4611      	mov	r1, r2
   11fea:	f003 bcf9 	b.w	159e0 <nrf_cc3xx_platform_ctr_drbg_init>
   11fee:	bf00      	nop
   11ff0:	200002cc 	.word	0x200002cc

00011ff4 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
   11ff4:	b570      	push	{r4, r5, r6, lr}
   11ff6:	460c      	mov	r4, r1
   11ff8:	4615      	mov	r5, r2
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
   11ffa:	4606      	mov	r6, r0
   11ffc:	b950      	cbnz	r0, 12014 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
   11ffe:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
   12002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12006:	4671      	mov	r1, lr
   12008:	4672      	mov	r2, lr
   1200a:	4673      	mov	r3, lr
   1200c:	46f4      	mov	ip, lr
   1200e:	f38e 8c00 	msr	CPSR_fs, lr
   12012:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
   12014:	2a00      	cmp	r2, #0
   12016:	d0f2      	beq.n	11ffe <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
   12018:	f006 fbca 	bl	187b0 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
   1201c:	2801      	cmp	r0, #1
   1201e:	d0ee      	beq.n	11ffe <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
   12020:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   12024:	d316      	bcc.n	12054 <__acle_se_spm_request_read_nse+0x60>
   12026:	192b      	adds	r3, r5, r4
   12028:	f5b3 3f81 	cmp.w	r3, #66048	; 0x10200
   1202c:	d906      	bls.n	1203c <__acle_se_spm_request_read_nse+0x48>
   1202e:	4a0b      	ldr	r2, [pc, #44]	; (1205c <__acle_se_spm_request_read_nse+0x68>)
   12030:	4294      	cmp	r4, r2
   12032:	d90a      	bls.n	1204a <__acle_se_spm_request_read_nse+0x56>
   12034:	f602 221d 	addw	r2, r2, #2589	; 0xa1d
   12038:	4293      	cmp	r3, r2
   1203a:	d80b      	bhi.n	12054 <__acle_se_spm_request_read_nse+0x60>
			memcpy(destination, (const void *)addr, len);
   1203c:	462a      	mov	r2, r5
   1203e:	4621      	mov	r1, r4
   12040:	4630      	mov	r0, r6
   12042:	f006 fbfd 	bl	18840 <memcpy>
			return 0;
   12046:	2000      	movs	r0, #0
   12048:	e7db      	b.n	12002 <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
   1204a:	4a05      	ldr	r2, [pc, #20]	; (12060 <__acle_se_spm_request_read_nse+0x6c>)
   1204c:	4294      	cmp	r4, r2
   1204e:	d901      	bls.n	12054 <__acle_se_spm_request_read_nse+0x60>
   12050:	3209      	adds	r2, #9
   12052:	e7f1      	b.n	12038 <__acle_se_spm_request_read_nse+0x44>
	return -EPERM;
   12054:	f04f 30ff 	mov.w	r0, #4294967295
   12058:	e7d3      	b.n	12002 <__acle_se_spm_request_read_nse+0xe>
   1205a:	bf00      	nop
   1205c:	00ff0203 	.word	0x00ff0203
   12060:	00ff012f 	.word	0x00ff012f

00012064 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
   12064:	b570      	push	{r4, r5, r6, lr}
   12066:	4606      	mov	r6, r0
   12068:	460d      	mov	r5, r1
   1206a:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
   1206c:	f006 fba0 	bl	187b0 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
   12070:	2801      	cmp	r0, #1
   12072:	d004      	beq.n	1207e <__acle_se_spm_request_random_number_nse+0x1a>
	return arm_cmse_addr_is_secure(ptr) == 1;
   12074:	4620      	mov	r0, r4
   12076:	f006 fb9b 	bl	187b0 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
   1207a:	2801      	cmp	r0, #1
   1207c:	d10a      	bne.n	12094 <__acle_se_spm_request_random_number_nse+0x30>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
   1207e:	f06f 0015 	mvn.w	r0, #21
	if (*olen != len) {
		return -EINVAL;
	}

	return err;
}
   12082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12086:	4671      	mov	r1, lr
   12088:	4672      	mov	r2, lr
   1208a:	4673      	mov	r3, lr
   1208c:	46f4      	mov	ip, lr
   1208e:	f38e 8c00 	msr	CPSR_fs, lr
   12092:	4774      	bxns	lr
	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
   12094:	4623      	mov	r3, r4
   12096:	462a      	mov	r2, r5
   12098:	4631      	mov	r1, r6
   1209a:	4803      	ldr	r0, [pc, #12]	; (120a8 <__acle_se_spm_request_random_number_nse+0x44>)
   1209c:	f003 fcd4 	bl	15a48 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
   120a0:	6823      	ldr	r3, [r4, #0]
   120a2:	42ab      	cmp	r3, r5
   120a4:	d0ed      	beq.n	12082 <__acle_se_spm_request_random_number_nse+0x1e>
   120a6:	e7ea      	b.n	1207e <__acle_se_spm_request_random_number_nse+0x1a>
   120a8:	200002cc 	.word	0x200002cc

000120ac <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
   120ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120b0:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
   120b2:	460d      	mov	r5, r1
{
   120b4:	b085      	sub	sp, #20
	if (info == NULL) {
   120b6:	b961      	cbnz	r1, 120d2 <__acle_se_spm_firmware_info_nse+0x26>
		return -EINVAL;
   120b8:	f06f 0415 	mvn.w	r4, #21
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
}
   120bc:	4620      	mov	r0, r4
   120be:	b005      	add	sp, #20
   120c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120c4:	4671      	mov	r1, lr
   120c6:	4672      	mov	r2, lr
   120c8:	4673      	mov	r3, lr
   120ca:	46f4      	mov	ip, lr
   120cc:	f38e 8c00 	msr	CPSR_fs, lr
   120d0:	4774      	bxns	lr
	return arm_cmse_addr_is_secure(ptr) == 1;
   120d2:	f006 fb6d 	bl	187b0 <arm_cmse_addr_is_secure>
	if (!ptr_in_secure_area(fw_address)) {
   120d6:	2801      	cmp	r0, #1
   120d8:	d1ee      	bne.n	120b8 <__acle_se_spm_firmware_info_nse+0xc>
	return arm_cmse_addr_is_secure(ptr) == 1;
   120da:	4628      	mov	r0, r5
   120dc:	f006 fb68 	bl	187b0 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)info)) {
   120e0:	2801      	cmp	r0, #1
   120e2:	d0e9      	beq.n	120b8 <__acle_se_spm_firmware_info_nse+0xc>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   120e4:	f04f 0800 	mov.w	r8, #0
   120e8:	f8df b040 	ldr.w	fp, [pc, #64]	; 1212c <__acle_se_spm_firmware_info_nse+0x80>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   120ec:	f8df a040 	ldr.w	sl, [pc, #64]	; 12130 <__acle_se_spm_firmware_info_nse+0x84>
   120f0:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
   120f2:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   120f6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
   120fa:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   120fc:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
   12100:	220c      	movs	r2, #12
   12102:	4639      	mov	r1, r7
   12104:	4630      	mov	r0, r6
   12106:	f006 fb74 	bl	187f2 <memcmp>
   1210a:	4604      	mov	r4, r0
   1210c:	b900      	cbnz	r0, 12110 <__acle_se_spm_firmware_info_nse+0x64>
		if (finfo) {
   1210e:	b93e      	cbnz	r6, 12120 <__acle_se_spm_firmware_info_nse+0x74>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   12110:	f108 0801 	add.w	r8, r8, #1
   12114:	f1b8 0f05 	cmp.w	r8, #5
   12118:	d1eb      	bne.n	120f2 <__acle_se_spm_firmware_info_nse+0x46>
	return -EFAULT;
   1211a:	f06f 040d 	mvn.w	r4, #13
   1211e:	e7cd      	b.n	120bc <__acle_se_spm_firmware_info_nse+0x10>
		memcpy(info, tmp_info, sizeof(*tmp_info));
   12120:	223c      	movs	r2, #60	; 0x3c
   12122:	4631      	mov	r1, r6
   12124:	4628      	mov	r0, r5
   12126:	f006 fb8b 	bl	18840 <memcpy>
		return 0;
   1212a:	e7c7      	b.n	120bc <__acle_se_spm_firmware_info_nse+0x10>
   1212c:	00018f20 	.word	0x00018f20
   12130:	00018db0 	.word	0x00018db0

00012134 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   12134:	4801      	ldr	r0, [pc, #4]	; (1213c <nrf_cc3xx_platform_abort_init+0x8>)
   12136:	f003 bc4b 	b.w	159d0 <nrf_cc3xx_platform_set_abort>
   1213a:	bf00      	nop
   1213c:	00018f34 	.word	0x00018f34

00012140 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12140:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   12142:	4604      	mov	r4, r0
   12144:	b918      	cbnz	r0, 1214e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   12146:	4b0d      	ldr	r3, [pc, #52]	; (1217c <mutex_free_platform+0x3c>)
   12148:	480d      	ldr	r0, [pc, #52]	; (12180 <mutex_free_platform+0x40>)
   1214a:	685b      	ldr	r3, [r3, #4]
   1214c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1214e:	6861      	ldr	r1, [r4, #4]
   12150:	f031 0304 	bics.w	r3, r1, #4
   12154:	d00c      	beq.n	12170 <mutex_free_platform+0x30>
   12156:	2908      	cmp	r1, #8
   12158:	d00a      	beq.n	12170 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1215a:	f011 0102 	ands.w	r1, r1, #2
   1215e:	d008      	beq.n	12172 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   12160:	4621      	mov	r1, r4
   12162:	4808      	ldr	r0, [pc, #32]	; (12184 <mutex_free_platform+0x44>)
   12164:	f001 fe70 	bl	13e48 <k_mem_slab_free>
        mutex->mutex = NULL;
   12168:	2300      	movs	r3, #0
   1216a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   1216c:	2300      	movs	r3, #0
   1216e:	6063      	str	r3, [r4, #4]
}
   12170:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12172:	2214      	movs	r2, #20
   12174:	6820      	ldr	r0, [r4, #0]
   12176:	f006 fb6e 	bl	18856 <memset>
   1217a:	e7f7      	b.n	1216c <mutex_free_platform+0x2c>
   1217c:	20000060 	.word	0x20000060
   12180:	000195f8 	.word	0x000195f8
   12184:	20000988 	.word	0x20000988

00012188 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12188:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1218a:	b1e8      	cbz	r0, 121c8 <mutex_lock_platform+0x40>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   1218c:	6843      	ldr	r3, [r0, #4]
   1218e:	2b04      	cmp	r3, #4
   12190:	d10c      	bne.n	121ac <mutex_lock_platform+0x24>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12192:	2201      	movs	r2, #1
   12194:	6803      	ldr	r3, [r0, #0]
   12196:	e8d3 1fef 	ldaex	r1, [r3]
   1219a:	2900      	cmp	r1, #0
   1219c:	d103      	bne.n	121a6 <mutex_lock_platform+0x1e>
   1219e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   121a2:	2800      	cmp	r0, #0
   121a4:	d1f7      	bne.n	12196 <mutex_lock_platform+0xe>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   121a6:	d10b      	bne.n	121c0 <mutex_lock_platform+0x38>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   121a8:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   121aa:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   121ac:	b153      	cbz	r3, 121c4 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
   121ae:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   121b0:	f04f 32ff 	mov.w	r2, #4294967295
   121b4:	f04f 33ff 	mov.w	r3, #4294967295
   121b8:	f001 ffb4 	bl	14124 <z_impl_k_mutex_lock>
        if (ret == 0) {
   121bc:	2800      	cmp	r0, #0
   121be:	d0f3      	beq.n	121a8 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   121c0:	4803      	ldr	r0, [pc, #12]	; (121d0 <mutex_lock_platform+0x48>)
   121c2:	e7f2      	b.n	121aa <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   121c4:	4803      	ldr	r0, [pc, #12]	; (121d4 <mutex_lock_platform+0x4c>)
   121c6:	e7f0      	b.n	121aa <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   121c8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   121cc:	e7ed      	b.n	121aa <mutex_lock_platform+0x22>
   121ce:	bf00      	nop
   121d0:	ffff8fe9 	.word	0xffff8fe9
   121d4:	ffff8fea 	.word	0xffff8fea

000121d8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   121d8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   121da:	b1a0      	cbz	r0, 12206 <mutex_unlock_platform+0x2e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   121dc:	6843      	ldr	r3, [r0, #4]
   121de:	2b04      	cmp	r3, #4
   121e0:	d10c      	bne.n	121fc <mutex_unlock_platform+0x24>
   121e2:	2200      	movs	r2, #0
   121e4:	6803      	ldr	r3, [r0, #0]
   121e6:	e8d3 1fef 	ldaex	r1, [r3]
   121ea:	2901      	cmp	r1, #1
   121ec:	d103      	bne.n	121f6 <mutex_unlock_platform+0x1e>
   121ee:	e8c3 2fe0 	stlex	r0, r2, [r3]
   121f2:	2800      	cmp	r0, #0
   121f4:	d1f7      	bne.n	121e6 <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   121f6:	d109      	bne.n	1220c <mutex_unlock_platform+0x34>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   121f8:	2000      	movs	r0, #0
    }
}
   121fa:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   121fc:	b143      	cbz	r3, 12210 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
   121fe:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12200:	f002 f862 	bl	142c8 <z_impl_k_mutex_unlock>
   12204:	e7f8      	b.n	121f8 <mutex_unlock_platform+0x20>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12206:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1220a:	e7f6      	b.n	121fa <mutex_unlock_platform+0x22>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1220c:	4801      	ldr	r0, [pc, #4]	; (12214 <mutex_unlock_platform+0x3c>)
   1220e:	e7f4      	b.n	121fa <mutex_unlock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12210:	4801      	ldr	r0, [pc, #4]	; (12218 <mutex_unlock_platform+0x40>)
   12212:	e7f2      	b.n	121fa <mutex_unlock_platform+0x22>
   12214:	ffff8fe9 	.word	0xffff8fe9
   12218:	ffff8fea 	.word	0xffff8fea

0001221c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1221c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1221e:	4604      	mov	r4, r0
   12220:	b918      	cbnz	r0, 1222a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   12222:	4b16      	ldr	r3, [pc, #88]	; (1227c <mutex_init_platform+0x60>)
   12224:	4816      	ldr	r0, [pc, #88]	; (12280 <mutex_init_platform+0x64>)
   12226:	685b      	ldr	r3, [r3, #4]
   12228:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1222a:	6863      	ldr	r3, [r4, #4]
   1222c:	2b04      	cmp	r3, #4
   1222e:	d023      	beq.n	12278 <mutex_init_platform+0x5c>
   12230:	2b08      	cmp	r3, #8
   12232:	d021      	beq.n	12278 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   12234:	b9cb      	cbnz	r3, 1226a <mutex_init_platform+0x4e>
   12236:	6823      	ldr	r3, [r4, #0]
   12238:	b9bb      	cbnz	r3, 1226a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   1223a:	f04f 32ff 	mov.w	r2, #4294967295
   1223e:	f04f 33ff 	mov.w	r3, #4294967295
   12242:	4621      	mov	r1, r4
   12244:	480f      	ldr	r0, [pc, #60]	; (12284 <mutex_init_platform+0x68>)
   12246:	f001 fda5 	bl	13d94 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   1224a:	b908      	cbnz	r0, 12250 <mutex_init_platform+0x34>
   1224c:	6823      	ldr	r3, [r4, #0]
   1224e:	b91b      	cbnz	r3, 12258 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   12250:	4b0a      	ldr	r3, [pc, #40]	; (1227c <mutex_init_platform+0x60>)
   12252:	480d      	ldr	r0, [pc, #52]	; (12288 <mutex_init_platform+0x6c>)
   12254:	685b      	ldr	r3, [r3, #4]
   12256:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12258:	2214      	movs	r2, #20
   1225a:	2100      	movs	r1, #0
   1225c:	6820      	ldr	r0, [r4, #0]
   1225e:	f006 fafa 	bl	18856 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   12262:	6863      	ldr	r3, [r4, #4]
   12264:	f043 0302 	orr.w	r3, r3, #2
   12268:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   1226a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1226c:	f006 fbd0 	bl	18a10 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12270:	6863      	ldr	r3, [r4, #4]
   12272:	f043 0301 	orr.w	r3, r3, #1
   12276:	6063      	str	r3, [r4, #4]
}
   12278:	bd10      	pop	{r4, pc}
   1227a:	bf00      	nop
   1227c:	20000060 	.word	0x20000060
   12280:	000195f8 	.word	0x000195f8
   12284:	20000988 	.word	0x20000988
   12288:	0001961e 	.word	0x0001961e

0001228c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   1228c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1228e:	4906      	ldr	r1, [pc, #24]	; (122a8 <nrf_cc3xx_platform_mutex_init+0x1c>)
   12290:	2340      	movs	r3, #64	; 0x40
   12292:	2214      	movs	r2, #20
   12294:	4805      	ldr	r0, [pc, #20]	; (122ac <nrf_cc3xx_platform_mutex_init+0x20>)
   12296:	f006 fb88 	bl	189aa <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1229a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1229e:	4904      	ldr	r1, [pc, #16]	; (122b0 <nrf_cc3xx_platform_mutex_init+0x24>)
   122a0:	4804      	ldr	r0, [pc, #16]	; (122b4 <nrf_cc3xx_platform_mutex_init+0x28>)
   122a2:	f003 bc49 	b.w	15b38 <nrf_cc3xx_platform_set_mutexes>
   122a6:	bf00      	nop
   122a8:	20000488 	.word	0x20000488
   122ac:	20000988 	.word	0x20000988
   122b0:	00018f3c 	.word	0x00018f3c
   122b4:	00018f50 	.word	0x00018f50

000122b8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   122b8:	4a09      	ldr	r2, [pc, #36]	; (122e0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   122ba:	490a      	ldr	r1, [pc, #40]	; (122e4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   122bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   122be:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   122c0:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
   122c2:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   122c4:	4908      	ldr	r1, [pc, #32]	; (122e8 <arch_swap+0x30>)
   122c6:	684b      	ldr	r3, [r1, #4]
   122c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   122cc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   122ce:	2300      	movs	r3, #0
   122d0:	f383 8811 	msr	BASEPRI, r3
   122d4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   122d8:	6893      	ldr	r3, [r2, #8]
}
   122da:	6f98      	ldr	r0, [r3, #120]	; 0x78
   122dc:	4770      	bx	lr
   122de:	bf00      	nop
   122e0:	200009d4 	.word	0x200009d4
   122e4:	00018fd4 	.word	0x00018fd4
   122e8:	e000ed00 	.word	0xe000ed00

000122ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   122ec:	4913      	ldr	r1, [pc, #76]	; (1233c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   122ee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   122f0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   122f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   122f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   122fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   122fe:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12300:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12304:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12308:	4f0d      	ldr	r7, [pc, #52]	; (12340 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1230a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1230e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   12310:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12312:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12314:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   12316:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12318:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1231a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1231e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   12322:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12326:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1232a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1232e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   12330:	f006 fa26 	bl	18780 <configure_builtin_stack_guard>
    pop {r2, lr}
   12334:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12338:	4770      	bx	lr
   1233a:	0000      	.short	0x0000
    ldr r1, =_kernel
   1233c:	200009d4 	.word	0x200009d4
    ldr v4, =_SCS_ICSR
   12340:	e000ed04 	.word	0xe000ed04

00012344 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   12344:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12348:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1234a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1234e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   12352:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12354:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12358:	2902      	cmp	r1, #2
    beq _oops
   1235a:	d0ff      	beq.n	1235c <_oops>

0001235c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1235c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1235e:	f006 fa13 	bl	18788 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   12362:	bd01      	pop	{r0, pc}

00012364 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12364:	b240      	sxtb	r0, r0
  if ((int32_t)(IRQn) >= 0)
   12366:	2800      	cmp	r0, #0
   12368:	db07      	blt.n	1237a <arch_irq_enable+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1236a:	2301      	movs	r3, #1
   1236c:	0941      	lsrs	r1, r0, #5
   1236e:	4a03      	ldr	r2, [pc, #12]	; (1237c <arch_irq_enable+0x18>)
   12370:	f000 001f 	and.w	r0, r0, #31
   12374:	4083      	lsls	r3, r0
   12376:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1237a:	4770      	bx	lr
   1237c:	e000e100 	.word	0xe000e100

00012380 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12380:	4b05      	ldr	r3, [pc, #20]	; (12398 <arch_irq_is_enabled+0x18>)
   12382:	0942      	lsrs	r2, r0, #5
   12384:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12388:	2301      	movs	r3, #1
   1238a:	f000 001f 	and.w	r0, r0, #31
   1238e:	fa03 f000 	lsl.w	r0, r3, r0
}
   12392:	4010      	ands	r0, r2
   12394:	4770      	bx	lr
   12396:	bf00      	nop
   12398:	e000e100 	.word	0xe000e100

0001239c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1239c:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   1239e:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   123a0:	2d07      	cmp	r5, #7
{
   123a2:	4604      	mov	r4, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   123a4:	d908      	bls.n	123b8 <z_arm_irq_priority_set+0x1c>
   123a6:	490d      	ldr	r1, [pc, #52]	; (123dc <z_arm_irq_priority_set+0x40>)
   123a8:	480d      	ldr	r0, [pc, #52]	; (123e0 <z_arm_irq_priority_set+0x44>)
   123aa:	2258      	movs	r2, #88	; 0x58
   123ac:	f006 f869 	bl	18482 <printk>
   123b0:	2158      	movs	r1, #88	; 0x58
   123b2:	480a      	ldr	r0, [pc, #40]	; (123dc <z_arm_irq_priority_set+0x40>)
   123b4:	f006 f92e 	bl	18614 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   123b8:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   123ba:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   123bc:	bfac      	ite	ge
   123be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   123c2:	4b08      	ldrlt	r3, [pc, #32]	; (123e4 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   123c4:	ea4f 1545 	mov.w	r5, r5, lsl #5
   123c8:	b2ed      	uxtb	r5, r5
   123ca:	bfab      	itete	ge
   123cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   123d0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   123d4:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   123d8:	541d      	strblt	r5, [r3, r0]
}
   123da:	bd38      	pop	{r3, r4, r5, pc}
   123dc:	0001964b 	.word	0x0001964b
   123e0:	00019196 	.word	0x00019196
   123e4:	e000ed14 	.word	0xe000ed14

000123e8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   123e8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   123ec:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   123ee:	490b      	ldr	r1, [pc, #44]	; (1241c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   123f0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   123f4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   123f6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   123fa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   123fe:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   12400:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   12404:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1240c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12410:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12412:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12414:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12416:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12418:	4770      	bx	lr
   1241a:	bf00      	nop
   1241c:	00018547 	.word	0x00018547

00012420 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12420:	4b08      	ldr	r3, [pc, #32]	; (12444 <arch_switch_to_main_thread+0x24>)
   12422:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   12424:	6e43      	ldr	r3, [r0, #100]	; 0x64
   12426:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1242a:	4610      	mov	r0, r2
   1242c:	f381 8809 	msr	PSP, r1
   12430:	2100      	movs	r1, #0
   12432:	b663      	cpsie	if
   12434:	f381 8811 	msr	BASEPRI, r1
   12438:	f3bf 8f6f 	isb	sy
   1243c:	2200      	movs	r2, #0
   1243e:	2300      	movs	r3, #0
   12440:	f006 f881 	bl	18546 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12444:	200009d4 	.word	0x200009d4

00012448 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12448:	4901      	ldr	r1, [pc, #4]	; (12450 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1244a:	2210      	movs	r2, #16
	str	r2, [r1]
   1244c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1244e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12450:	e000ed10 	.word	0xe000ed10

00012454 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12454:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12456:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12458:	f380 8811 	msr	BASEPRI, r0
	isb
   1245c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12460:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12464:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12466:	b662      	cpsie	i
	isb
   12468:	f3bf 8f6f 	isb	sy

	bx	lr
   1246c:	4770      	bx	lr
   1246e:	bf00      	nop

00012470 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12470:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12472:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12474:	f381 8811 	msr	BASEPRI, r1

	wfe
   12478:	bf20      	wfe

	msr	BASEPRI, r0
   1247a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1247e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12480:	4770      	bx	lr
   12482:	bf00      	nop

00012484 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12484:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12486:	4605      	mov	r5, r0

	if (esf != NULL) {
   12488:	460c      	mov	r4, r1
   1248a:	b1c9      	cbz	r1, 124c0 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1248c:	688b      	ldr	r3, [r1, #8]
   1248e:	4810      	ldr	r0, [pc, #64]	; (124d0 <z_arm_fatal_error+0x4c>)
   12490:	9300      	str	r3, [sp, #0]
   12492:	e9d1 2300 	ldrd	r2, r3, [r1]
   12496:	2145      	movs	r1, #69	; 0x45
   12498:	f006 f8cf 	bl	1863a <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1249c:	6963      	ldr	r3, [r4, #20]
   1249e:	2145      	movs	r1, #69	; 0x45
   124a0:	9300      	str	r3, [sp, #0]
   124a2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   124a6:	480b      	ldr	r0, [pc, #44]	; (124d4 <z_arm_fatal_error+0x50>)
   124a8:	f006 f8c7 	bl	1863a <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   124ac:	2145      	movs	r1, #69	; 0x45
   124ae:	69e2      	ldr	r2, [r4, #28]
   124b0:	4809      	ldr	r0, [pc, #36]	; (124d8 <z_arm_fatal_error+0x54>)
   124b2:	f006 f8c2 	bl	1863a <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   124b6:	2145      	movs	r1, #69	; 0x45
   124b8:	69a2      	ldr	r2, [r4, #24]
   124ba:	4808      	ldr	r0, [pc, #32]	; (124dc <z_arm_fatal_error+0x58>)
   124bc:	f006 f8bd 	bl	1863a <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   124c0:	4621      	mov	r1, r4
   124c2:	4628      	mov	r0, r5
}
   124c4:	b003      	add	sp, #12
   124c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   124ca:	f001 bb1b 	b.w	13b04 <z_fatal_error>
   124ce:	bf00      	nop
   124d0:	00019681 	.word	0x00019681
   124d4:	000196b5 	.word	0x000196b5
   124d8:	000196e9 	.word	0x000196e9
   124dc:	000196fd 	.word	0x000196fd

000124e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   124e0:	bf30      	wfi
    b z_SysNmiOnReset
   124e2:	f7ff bffd 	b.w	124e0 <z_SysNmiOnReset>
   124e6:	bf00      	nop

000124e8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   124e8:	4a0b      	ldr	r2, [pc, #44]	; (12518 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   124ea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   124ec:	4b0b      	ldr	r3, [pc, #44]	; (1251c <z_arm_prep_c+0x34>)
   124ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   124f2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   124f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   124f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   124fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12500:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12508:	f001 fb58 	bl	13bbc <z_bss_zero>
	z_data_copy();
   1250c:	f002 ff60 	bl	153d0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12510:	f000 fb18 	bl	12b44 <z_arm_interrupt_init>
	z_cstart();
   12514:	f001 fb76 	bl	13c04 <z_cstart>
   12518:	00010200 	.word	0x00010200
   1251c:	e000ed00 	.word	0xe000ed00

00012520 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12520:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12522:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12524:	4a0b      	ldr	r2, [pc, #44]	; (12554 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12526:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   12528:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1252a:	bf1e      	ittt	ne
	movne	r1, #0
   1252c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1252e:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   12530:	f006 fa5f 	blne	189f2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12534:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12536:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1253a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1253e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12542:	4905      	ldr	r1, [pc, #20]	; (12558 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12544:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12546:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12548:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1254a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1254e:	4903      	ldr	r1, [pc, #12]	; (1255c <_isr_wrapper+0x3c>)
	bx r1
   12550:	4708      	bx	r1
   12552:	0000      	.short	0x0000
	ldr r2, =_kernel
   12554:	200009d4 	.word	0x200009d4
	ldr r1, =_sw_isr_table
   12558:	00018b40 	.word	0x00018b40
	ldr r1, =z_arm_int_exit
   1255c:	00012a95 	.word	0x00012a95

00012560 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12560:	2000      	movs	r0, #0
    msr CONTROL, r0
   12562:	f380 8814 	msr	CONTROL, r0
    isb
   12566:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1256a:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1256c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   12570:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   12574:	f006 fa72 	bl	18a5c <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12578:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1257a:	490e      	ldr	r1, [pc, #56]	; (125b4 <__start+0x54>)
    str r0, [r1]
   1257c:	6008      	str	r0, [r1, #0]
    dsb
   1257e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12582:	480d      	ldr	r0, [pc, #52]	; (125b8 <__start+0x58>)
    msr msp, r0
   12584:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12588:	f000 fab6 	bl	12af8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1258c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1258e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12592:	480a      	ldr	r0, [pc, #40]	; (125bc <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12594:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   12598:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1259a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1259e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   125a2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   125a4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   125a6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   125aa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   125ae:	f7ff ff9b 	bl	124e8 <z_arm_prep_c>
   125b2:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   125b4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   125b8:	20002628 	.word	0x20002628
    ldr r0, =z_interrupt_stacks
   125bc:	20002628 	.word	0x20002628

000125c0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   125c0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   125c4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   125c8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   125ca:	4672      	mov	r2, lr
	bl z_arm_fault
   125cc:	f000 f97c 	bl	128c8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   125d0:	bd01      	pop	{r0, pc}
   125d2:	bf00      	nop

000125d4 <secure_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
   125d4:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
   125d6:	4c24      	ldr	r4, [pc, #144]	; (12668 <secure_fault.constprop.0+0x94>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
   125d8:	4824      	ldr	r0, [pc, #144]	; (1266c <secure_fault.constprop.0+0x98>)
   125da:	2145      	movs	r1, #69	; 0x45
   125dc:	f006 f82d 	bl	1863a <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
   125e0:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
   125e4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   125e8:	0658      	lsls	r0, r3, #25
   125ea:	d503      	bpl.n	125f4 <secure_fault.constprop.0+0x20>
		PR_EXC("  Address: 0x%x", sfar);
   125ec:	2145      	movs	r1, #69	; 0x45
   125ee:	4820      	ldr	r0, [pc, #128]	; (12670 <secure_fault.constprop.0+0x9c>)
   125f0:	f006 f823 	bl	1863a <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
   125f4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   125f8:	07d9      	lsls	r1, r3, #31
   125fa:	d50b      	bpl.n	12614 <secure_fault.constprop.0+0x40>
		PR_FAULT_INFO("  Invalid entry point");
   125fc:	2145      	movs	r1, #69	; 0x45
   125fe:	481d      	ldr	r0, [pc, #116]	; (12674 <secure_fault.constprop.0+0xa0>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
   12600:	f006 f81b 	bl	1863a <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
   12604:	4a18      	ldr	r2, [pc, #96]	; (12668 <secure_fault.constprop.0+0x94>)
   12606:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   1260a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   1260e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
}
   12612:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
   12614:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   12618:	079a      	lsls	r2, r3, #30
   1261a:	d502      	bpl.n	12622 <secure_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Invalid integrity signature");
   1261c:	2145      	movs	r1, #69	; 0x45
   1261e:	4816      	ldr	r0, [pc, #88]	; (12678 <secure_fault.constprop.0+0xa4>)
   12620:	e7ee      	b.n	12600 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
   12622:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   12626:	075b      	lsls	r3, r3, #29
   12628:	d502      	bpl.n	12630 <secure_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Invalid exception return");
   1262a:	2145      	movs	r1, #69	; 0x45
   1262c:	4813      	ldr	r0, [pc, #76]	; (1267c <secure_fault.constprop.0+0xa8>)
   1262e:	e7e7      	b.n	12600 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
   12630:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   12634:	0718      	lsls	r0, r3, #28
   12636:	d502      	bpl.n	1263e <secure_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Attribution unit violation");
   12638:	2145      	movs	r1, #69	; 0x45
   1263a:	4811      	ldr	r0, [pc, #68]	; (12680 <secure_fault.constprop.0+0xac>)
   1263c:	e7e0      	b.n	12600 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
   1263e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   12642:	06d9      	lsls	r1, r3, #27
   12644:	d502      	bpl.n	1264c <secure_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Invalid transition");
   12646:	2145      	movs	r1, #69	; 0x45
   12648:	480e      	ldr	r0, [pc, #56]	; (12684 <secure_fault.constprop.0+0xb0>)
   1264a:	e7d9      	b.n	12600 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
   1264c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   12650:	069a      	lsls	r2, r3, #26
   12652:	d502      	bpl.n	1265a <secure_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Lazy state preservation");
   12654:	2145      	movs	r1, #69	; 0x45
   12656:	480c      	ldr	r0, [pc, #48]	; (12688 <secure_fault.constprop.0+0xb4>)
   12658:	e7d2      	b.n	12600 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
   1265a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1265e:	061b      	lsls	r3, r3, #24
   12660:	d5d0      	bpl.n	12604 <secure_fault.constprop.0+0x30>
		PR_FAULT_INFO("  Lazy state error");
   12662:	2145      	movs	r1, #69	; 0x45
   12664:	4809      	ldr	r0, [pc, #36]	; (1268c <secure_fault.constprop.0+0xb8>)
   12666:	e7cb      	b.n	12600 <secure_fault.constprop.0+0x2c>
   12668:	e000ed00 	.word	0xe000ed00
   1266c:	00019730 	.word	0x00019730
   12670:	0001974e 	.word	0x0001974e
   12674:	00019763 	.word	0x00019763
   12678:	0001977e 	.word	0x0001977e
   1267c:	000197a1 	.word	0x000197a1
   12680:	000197c1 	.word	0x000197c1
   12684:	000197e3 	.word	0x000197e3
   12688:	000197fd 	.word	0x000197fd
   1268c:	0001981c 	.word	0x0001981c

00012690 <usage_fault.constprop.0>:
static uint32_t usage_fault(const z_arch_esf_t *esf)
   12690:	b538      	push	{r3, r4, r5, lr}
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12692:	4c21      	ldr	r4, [pc, #132]	; (12718 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   12694:	2145      	movs	r1, #69	; 0x45
   12696:	4821      	ldr	r0, [pc, #132]	; (1271c <usage_fault.constprop.0+0x8c>)
   12698:	f005 ffcf 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1269c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1269e:	019d      	lsls	r5, r3, #6
   126a0:	d503      	bpl.n	126aa <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   126a2:	2145      	movs	r1, #69	; 0x45
   126a4:	481e      	ldr	r0, [pc, #120]	; (12720 <usage_fault.constprop.0+0x90>)
   126a6:	f005 ffc8 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   126aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   126ac:	01dc      	lsls	r4, r3, #7
   126ae:	d503      	bpl.n	126b8 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   126b0:	2145      	movs	r1, #69	; 0x45
   126b2:	481c      	ldr	r0, [pc, #112]	; (12724 <usage_fault.constprop.0+0x94>)
   126b4:	f005 ffc1 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   126b8:	4d17      	ldr	r5, [pc, #92]	; (12718 <usage_fault.constprop.0+0x88>)
   126ba:	6aac      	ldr	r4, [r5, #40]	; 0x28
   126bc:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   126c0:	d004      	beq.n	126cc <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   126c2:	2145      	movs	r1, #69	; 0x45
   126c4:	4818      	ldr	r0, [pc, #96]	; (12728 <usage_fault.constprop.0+0x98>)
   126c6:	f005 ffb8 	bl	1863a <z_log_minimal_printk>
		reason = K_ERR_STACK_CHK_FAIL;
   126ca:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   126cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   126ce:	0318      	lsls	r0, r3, #12
   126d0:	d503      	bpl.n	126da <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   126d2:	2145      	movs	r1, #69	; 0x45
   126d4:	4815      	ldr	r0, [pc, #84]	; (1272c <usage_fault.constprop.0+0x9c>)
   126d6:	f005 ffb0 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   126da:	4d0f      	ldr	r5, [pc, #60]	; (12718 <usage_fault.constprop.0+0x88>)
   126dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   126de:	0359      	lsls	r1, r3, #13
   126e0:	d503      	bpl.n	126ea <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   126e2:	2145      	movs	r1, #69	; 0x45
   126e4:	4812      	ldr	r0, [pc, #72]	; (12730 <usage_fault.constprop.0+0xa0>)
   126e6:	f005 ffa8 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   126ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   126ec:	039a      	lsls	r2, r3, #14
   126ee:	d503      	bpl.n	126f8 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   126f0:	2145      	movs	r1, #69	; 0x45
   126f2:	4810      	ldr	r0, [pc, #64]	; (12734 <usage_fault.constprop.0+0xa4>)
   126f4:	f005 ffa1 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   126f8:	4d07      	ldr	r5, [pc, #28]	; (12718 <usage_fault.constprop.0+0x88>)
   126fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   126fc:	03db      	lsls	r3, r3, #15
   126fe:	d503      	bpl.n	12708 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   12700:	2145      	movs	r1, #69	; 0x45
   12702:	480d      	ldr	r0, [pc, #52]	; (12738 <usage_fault.constprop.0+0xa8>)
   12704:	f005 ff99 	bl	1863a <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12708:	6aab      	ldr	r3, [r5, #40]	; 0x28
}
   1270a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1270c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   12710:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   12714:	62ab      	str	r3, [r5, #40]	; 0x28
}
   12716:	bd38      	pop	{r3, r4, r5, pc}
   12718:	e000ed00 	.word	0xe000ed00
   1271c:	00019834 	.word	0x00019834
   12720:	00019851 	.word	0x00019851
   12724:	00019869 	.word	0x00019869
   12728:	00019888 	.word	0x00019888
   1272c:	000198b7 	.word	0x000198b7
   12730:	000198da 	.word	0x000198da
   12734:	00019904 	.word	0x00019904
   12738:	00019923 	.word	0x00019923

0001273c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1273c:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1273e:	4c23      	ldr	r4, [pc, #140]	; (127cc <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12740:	4606      	mov	r6, r0
   12742:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   12744:	4822      	ldr	r0, [pc, #136]	; (127d0 <bus_fault.constprop.0+0x94>)
   12746:	2145      	movs	r1, #69	; 0x45
   12748:	f005 ff77 	bl	1863a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1274c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1274e:	04d9      	lsls	r1, r3, #19
   12750:	d503      	bpl.n	1275a <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   12752:	2145      	movs	r1, #69	; 0x45
   12754:	481f      	ldr	r0, [pc, #124]	; (127d4 <bus_fault.constprop.0+0x98>)
   12756:	f005 ff70 	bl	1863a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1275a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1275c:	051a      	lsls	r2, r3, #20
   1275e:	d503      	bpl.n	12768 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   12760:	2145      	movs	r1, #69	; 0x45
   12762:	481d      	ldr	r0, [pc, #116]	; (127d8 <bus_fault.constprop.0+0x9c>)
   12764:	f005 ff69 	bl	1863a <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12768:	4c18      	ldr	r4, [pc, #96]	; (127cc <bus_fault.constprop.0+0x90>)
   1276a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1276c:	059b      	lsls	r3, r3, #22
   1276e:	d510      	bpl.n	12792 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   12770:	481a      	ldr	r0, [pc, #104]	; (127dc <bus_fault.constprop.0+0xa0>)
   12772:	2145      	movs	r1, #69	; 0x45
   12774:	f005 ff61 	bl	1863a <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   12778:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1277a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1277c:	0418      	lsls	r0, r3, #16
   1277e:	d508      	bpl.n	12792 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   12780:	2145      	movs	r1, #69	; 0x45
   12782:	4817      	ldr	r0, [pc, #92]	; (127e0 <bus_fault.constprop.0+0xa4>)
   12784:	f005 ff59 	bl	1863a <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   12788:	b11e      	cbz	r6, 12792 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1278a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1278c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   12790:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12792:	4c0e      	ldr	r4, [pc, #56]	; (127cc <bus_fault.constprop.0+0x90>)
   12794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12796:	0559      	lsls	r1, r3, #21
   12798:	d503      	bpl.n	127a2 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   1279a:	2145      	movs	r1, #69	; 0x45
   1279c:	4811      	ldr	r0, [pc, #68]	; (127e4 <bus_fault.constprop.0+0xa8>)
   1279e:	f005 ff4c 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   127a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   127a4:	05da      	lsls	r2, r3, #23
   127a6:	d50b      	bpl.n	127c0 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   127a8:	2145      	movs	r1, #69	; 0x45
   127aa:	480f      	ldr	r0, [pc, #60]	; (127e8 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   127ac:	f005 ff45 	bl	1863a <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
   127b0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   127b2:	4a06      	ldr	r2, [pc, #24]	; (127cc <bus_fault.constprop.0+0x90>)
   127b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   127b6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   127ba:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   127bc:	7028      	strb	r0, [r5, #0]
}
   127be:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   127c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   127c2:	049b      	lsls	r3, r3, #18
   127c4:	d5f4      	bpl.n	127b0 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   127c6:	2145      	movs	r1, #69	; 0x45
   127c8:	4808      	ldr	r0, [pc, #32]	; (127ec <bus_fault.constprop.0+0xb0>)
   127ca:	e7ef      	b.n	127ac <bus_fault.constprop.0+0x70>
   127cc:	e000ed00 	.word	0xe000ed00
   127d0:	00019953 	.word	0x00019953
   127d4:	0001996e 	.word	0x0001996e
   127d8:	00019984 	.word	0x00019984
   127dc:	0001999c 	.word	0x0001999c
   127e0:	000199ba 	.word	0x000199ba
   127e4:	000199d4 	.word	0x000199d4
   127e8:	000199f4 	.word	0x000199f4
   127ec:	00019a11 	.word	0x00019a11

000127f0 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   127f0:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   127f2:	4c2b      	ldr	r4, [pc, #172]	; (128a0 <mem_manage_fault.constprop.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   127f4:	4606      	mov	r6, r0
   127f6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   127f8:	482a      	ldr	r0, [pc, #168]	; (128a4 <mem_manage_fault.constprop.0+0xb4>)
   127fa:	2145      	movs	r1, #69	; 0x45
   127fc:	f005 ff1d 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12800:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12802:	06d8      	lsls	r0, r3, #27
   12804:	d503      	bpl.n	1280e <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   12806:	2145      	movs	r1, #69	; 0x45
   12808:	4827      	ldr	r0, [pc, #156]	; (128a8 <mem_manage_fault.constprop.0+0xb8>)
   1280a:	f005 ff16 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1280e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12810:	0719      	lsls	r1, r3, #28
   12812:	d503      	bpl.n	1281c <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   12814:	2145      	movs	r1, #69	; 0x45
   12816:	4825      	ldr	r0, [pc, #148]	; (128ac <mem_manage_fault.constprop.0+0xbc>)
   12818:	f005 ff0f 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1281c:	4c20      	ldr	r4, [pc, #128]	; (128a0 <mem_manage_fault.constprop.0+0xb0>)
   1281e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12820:	079a      	lsls	r2, r3, #30
   12822:	d510      	bpl.n	12846 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   12824:	2145      	movs	r1, #69	; 0x45
   12826:	4822      	ldr	r0, [pc, #136]	; (128b0 <mem_manage_fault.constprop.0+0xc0>)
   12828:	f005 ff07 	bl	1863a <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   1282c:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1282e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12830:	061b      	lsls	r3, r3, #24
   12832:	d508      	bpl.n	12846 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   12834:	2145      	movs	r1, #69	; 0x45
   12836:	481f      	ldr	r0, [pc, #124]	; (128b4 <mem_manage_fault.constprop.0+0xc4>)
   12838:	f005 feff 	bl	1863a <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   1283c:	b11e      	cbz	r6, 12846 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1283e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12844:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12846:	4c16      	ldr	r4, [pc, #88]	; (128a0 <mem_manage_fault.constprop.0+0xb0>)
   12848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1284a:	07de      	lsls	r6, r3, #31
   1284c:	d503      	bpl.n	12856 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   1284e:	2145      	movs	r1, #69	; 0x45
   12850:	4819      	ldr	r0, [pc, #100]	; (128b8 <mem_manage_fault.constprop.0+0xc8>)
   12852:	f005 fef2 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12858:	0698      	lsls	r0, r3, #26
   1285a:	d503      	bpl.n	12864 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
   1285c:	2145      	movs	r1, #69	; 0x45
   1285e:	4817      	ldr	r0, [pc, #92]	; (128bc <mem_manage_fault.constprop.0+0xcc>)
   12860:	f005 feeb 	bl	1863a <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12864:	4b0e      	ldr	r3, [pc, #56]	; (128a0 <mem_manage_fault.constprop.0+0xb0>)
   12866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12868:	06d1      	lsls	r1, r2, #27
   1286a:	d402      	bmi.n	12872 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1286c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1286e:	0792      	lsls	r2, r2, #30
   12870:	d50d      	bpl.n	1288e <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   12872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12874:	06db      	lsls	r3, r3, #27
   12876:	d50a      	bpl.n	1288e <mem_manage_fault.constprop.0+0x9e>
   12878:	4911      	ldr	r1, [pc, #68]	; (128c0 <mem_manage_fault.constprop.0+0xd0>)
   1287a:	4812      	ldr	r0, [pc, #72]	; (128c4 <mem_manage_fault.constprop.0+0xd4>)
   1287c:	f240 124f 	movw	r2, #335	; 0x14f
   12880:	f005 fdff 	bl	18482 <printk>
   12884:	f240 114f 	movw	r1, #335	; 0x14f
   12888:	480d      	ldr	r0, [pc, #52]	; (128c0 <mem_manage_fault.constprop.0+0xd0>)
   1288a:	f005 fec3 	bl	18614 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   1288e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12890:	4a03      	ldr	r2, [pc, #12]	; (128a0 <mem_manage_fault.constprop.0+0xb0>)
   12892:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12894:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   12898:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1289a:	7028      	strb	r0, [r5, #0]
}
   1289c:	bd70      	pop	{r4, r5, r6, pc}
   1289e:	bf00      	nop
   128a0:	e000ed00 	.word	0xe000ed00
   128a4:	00019a45 	.word	0x00019a45
   128a8:	00019a60 	.word	0x00019a60
   128ac:	00019984 	.word	0x00019984
   128b0:	00019a98 	.word	0x00019a98
   128b4:	00019ab5 	.word	0x00019ab5
   128b8:	00019ad0 	.word	0x00019ad0
   128bc:	00019a11 	.word	0x00019a11
   128c0:	00019af4 	.word	0x00019af4
   128c4:	00019196 	.word	0x00019196

000128c8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   128c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   128cc:	4b5f      	ldr	r3, [pc, #380]	; (12a4c <z_arm_fault+0x184>)
{
   128ce:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   128d0:	685f      	ldr	r7, [r3, #4]
{
   128d2:	b08a      	sub	sp, #40	; 0x28
   128d4:	2300      	movs	r3, #0
   128d6:	f3c7 0408 	ubfx	r4, r7, #0, #9
   128da:	f383 8811 	msr	BASEPRI, r3
   128de:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   128e2:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   128e6:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   128ea:	d141      	bne.n	12970 <z_arm_fault+0xa8>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
   128ec:	f012 0601 	ands.w	r6, r2, #1
   128f0:	d01e      	beq.n	12930 <z_arm_fault+0x68>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   128f2:	f012 0640 	ands.w	r6, r2, #64	; 0x40
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   128f6:	f002 0808 	and.w	r8, r2, #8
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   128fa:	d004      	beq.n	12906 <z_arm_fault+0x3e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   128fc:	f1b8 0f00 	cmp.w	r8, #0
   12900:	d133      	bne.n	1296a <z_arm_fault+0xa2>
			*nested_exc = true;
   12902:	2601      	movs	r6, #1
   12904:	e013      	b.n	1292e <z_arm_fault+0x66>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   12906:	0750      	lsls	r0, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
   12908:	bf58      	it	pl
   1290a:	4629      	movpl	r1, r5
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
   1290c:	4b50      	ldr	r3, [pc, #320]	; (12a50 <z_arm_fault+0x188>)
   1290e:	680a      	ldr	r2, [r1, #0]
			*nested_exc = true;
   12910:	bf58      	it	pl
   12912:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
   12914:	4413      	add	r3, r2
   12916:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
   12918:	bf98      	it	ls
   1291a:	6c0a      	ldrls	r2, [r1, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
   1291c:	484d      	ldr	r0, [pc, #308]	; (12a54 <z_arm_fault+0x18c>)
   1291e:	2145      	movs	r1, #69	; 0x45
   12920:	f005 fe8b 	bl	1863a <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12924:	f1b8 0f00 	cmp.w	r8, #0
   12928:	d01c      	beq.n	12964 <z_arm_fault+0x9c>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
   1292a:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1292e:	b95d      	cbnz	r5, 12948 <z_arm_fault+0x80>
   12930:	f240 32e1 	movw	r2, #993	; 0x3e1
   12934:	4948      	ldr	r1, [pc, #288]	; (12a58 <z_arm_fault+0x190>)
   12936:	4849      	ldr	r0, [pc, #292]	; (12a5c <z_arm_fault+0x194>)
   12938:	f005 fda3 	bl	18482 <printk>
   1293c:	f240 31e1 	movw	r1, #993	; 0x3e1
   12940:	4845      	ldr	r0, [pc, #276]	; (12a58 <z_arm_fault+0x190>)
   12942:	f005 fe67 	bl	18614 <assert_post_action>
   12946:	2500      	movs	r5, #0
	*recoverable = false;
   12948:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   1294c:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
   1294e:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
   12952:	2b09      	cmp	r3, #9
   12954:	d867      	bhi.n	12a26 <z_arm_fault+0x15e>
   12956:	e8df f003 	tbb	[pc, r3]
   1295a:	5b0d      	.short	0x5b0d
   1295c:	6657385f 	.word	0x6657385f
   12960:	63666666 	.word	0x63666666
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
   12964:	f3ef 8588 	mrs	r5, MSP_NS
	if (!alternative_state_exc) {
   12968:	e7e1      	b.n	1292e <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
   1296a:	460d      	mov	r5, r1
	*nested_exc = false;
   1296c:	461e      	mov	r6, r3
   1296e:	e7de      	b.n	1292e <z_arm_fault+0x66>
   12970:	461e      	mov	r6, r3
   12972:	e7dd      	b.n	12930 <z_arm_fault+0x68>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12974:	4c35      	ldr	r4, [pc, #212]	; (12a4c <z_arm_fault+0x184>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   12976:	2145      	movs	r1, #69	; 0x45
   12978:	4839      	ldr	r0, [pc, #228]	; (12a60 <z_arm_fault+0x198>)
   1297a:	f005 fe5e 	bl	1863a <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1297e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	*recoverable = false;
   12980:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12984:	079a      	lsls	r2, r3, #30
   12986:	d504      	bpl.n	12992 <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
   12988:	2145      	movs	r1, #69	; 0x45
   1298a:	4836      	ldr	r0, [pc, #216]	; (12a64 <z_arm_fault+0x19c>)
	PR_FAULT_INFO(
   1298c:	f005 fe55 	bl	1863a <z_log_minimal_printk>
}
   12990:	e03c      	b.n	12a0c <z_arm_fault+0x144>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12994:	005b      	lsls	r3, r3, #1
   12996:	d539      	bpl.n	12a0c <z_arm_fault+0x144>
		PR_EXC("  Fault escalation (see below)");
   12998:	2145      	movs	r1, #69	; 0x45
   1299a:	4833      	ldr	r0, [pc, #204]	; (12a68 <z_arm_fault+0x1a0>)
   1299c:	f005 fe4d 	bl	1863a <z_log_minimal_printk>
		if (SCB_MMFSR != 0) {
   129a0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   129a4:	b12b      	cbz	r3, 129b2 <z_arm_fault+0xea>
			reason = mem_manage_fault(esf, 1, recoverable);
   129a6:	2001      	movs	r0, #1
   129a8:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   129ac:	f7ff ff20 	bl	127f0 <mem_manage_fault.constprop.0>
   129b0:	e00d      	b.n	129ce <z_arm_fault+0x106>
		} else if (SCB_BFSR != 0) {
   129b2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   129b6:	b12b      	cbz	r3, 129c4 <z_arm_fault+0xfc>
			reason = bus_fault(esf, 1, recoverable);
   129b8:	2001      	movs	r0, #1
   129ba:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   129be:	f7ff febd 	bl	1273c <bus_fault.constprop.0>
   129c2:	e004      	b.n	129ce <z_arm_fault+0x106>
		} else if (SCB_UFSR != 0) {
   129c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   129c6:	b29b      	uxth	r3, r3
   129c8:	b1db      	cbz	r3, 12a02 <z_arm_fault+0x13a>
			reason = usage_fault(esf);
   129ca:	f7ff fe61 	bl	12690 <usage_fault.constprop.0>
   129ce:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   129d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   129d4:	b993      	cbnz	r3, 129fc <z_arm_fault+0x134>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   129d6:	2220      	movs	r2, #32
   129d8:	4629      	mov	r1, r5
   129da:	a802      	add	r0, sp, #8
   129dc:	f005 ff30 	bl	18840 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   129e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   129e2:	b36e      	cbz	r6, 12a40 <z_arm_fault+0x178>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   129e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   129e8:	b922      	cbnz	r2, 129f4 <z_arm_fault+0x12c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   129ea:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   129ee:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   129f2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   129f4:	4620      	mov	r0, r4
   129f6:	a902      	add	r1, sp, #8
   129f8:	f7ff fd44 	bl	12484 <z_arm_fatal_error>
}
   129fc:	b00a      	add	sp, #40	; 0x28
   129fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SAU->SFSR != 0) {
   12a02:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   12a06:	b10b      	cbz	r3, 12a0c <z_arm_fault+0x144>
		secure_fault(esf);
   12a08:	f7ff fde4 	bl	125d4 <secure_fault.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12a0c:	2400      	movs	r4, #0
   12a0e:	e7df      	b.n	129d0 <z_arm_fault+0x108>
		reason = mem_manage_fault(esf, 0, recoverable);
   12a10:	2000      	movs	r0, #0
   12a12:	f10d 0107 	add.w	r1, sp, #7
   12a16:	e7c9      	b.n	129ac <z_arm_fault+0xe4>
		reason = bus_fault(esf, 0, recoverable);
   12a18:	2000      	movs	r0, #0
   12a1a:	f10d 0107 	add.w	r1, sp, #7
   12a1e:	e7ce      	b.n	129be <z_arm_fault+0xf6>
	PR_FAULT_INFO(
   12a20:	2145      	movs	r1, #69	; 0x45
   12a22:	4812      	ldr	r0, [pc, #72]	; (12a6c <z_arm_fault+0x1a4>)
   12a24:	e7b2      	b.n	1298c <z_arm_fault+0xc4>
	PR_FAULT_INFO("***** %s %d) *****",
   12a26:	4912      	ldr	r1, [pc, #72]	; (12a70 <z_arm_fault+0x1a8>)
   12a28:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
   12a2c:	4a11      	ldr	r2, [pc, #68]	; (12a74 <z_arm_fault+0x1ac>)
   12a2e:	4812      	ldr	r0, [pc, #72]	; (12a78 <z_arm_fault+0x1b0>)
   12a30:	bf08      	it	eq
   12a32:	460a      	moveq	r2, r1
   12a34:	f1a4 0310 	sub.w	r3, r4, #16
   12a38:	2145      	movs	r1, #69	; 0x45
   12a3a:	f005 fdfe 	bl	1863a <z_log_minimal_printk>
}
   12a3e:	e7e5      	b.n	12a0c <z_arm_fault+0x144>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12a40:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12a44:	f023 0301 	bic.w	r3, r3, #1
   12a48:	e7d3      	b.n	129f2 <z_arm_fault+0x12a>
   12a4a:	bf00      	nop
   12a4c:	e000ed00 	.word	0xe000ed00
   12a50:	0105eda6 	.word	0x0105eda6
   12a54:	00019b5c 	.word	0x00019b5c
   12a58:	00019af4 	.word	0x00019af4
   12a5c:	00019196 	.word	0x00019196
   12a60:	00019b80 	.word	0x00019b80
   12a64:	00019b9c 	.word	0x00019b9c
   12a68:	00019bc2 	.word	0x00019bc2
   12a6c:	00019be6 	.word	0x00019be6
   12a70:	00019b2e 	.word	0x00019b2e
   12a74:	00019b43 	.word	0x00019b43
   12a78:	00019c0f 	.word	0x00019c0f

00012a7c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12a7c:	4b04      	ldr	r3, [pc, #16]	; (12a90 <z_arm_fault_init+0x14>)
   12a7e:	695a      	ldr	r2, [r3, #20]
   12a80:	f042 0210 	orr.w	r2, r2, #16
   12a84:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   12a86:	695a      	ldr	r2, [r3, #20]
   12a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   12a8c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   12a8e:	4770      	bx	lr
   12a90:	e000ed00 	.word	0xe000ed00

00012a94 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12a94:	4b04      	ldr	r3, [pc, #16]	; (12aa8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   12a96:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   12a98:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   12a9a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12a9c:	d003      	beq.n	12aa6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12a9e:	4903      	ldr	r1, [pc, #12]	; (12aac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12aa4:	600a      	str	r2, [r1, #0]

00012aa6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   12aa6:	4770      	bx	lr
	ldr r3, =_kernel
   12aa8:	200009d4 	.word	0x200009d4
	ldr r1, =_SCS_ICSR
   12aac:	e000ed04 	.word	0xe000ed04

00012ab0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   12ab0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12ab4:	4905      	ldr	r1, [pc, #20]	; (12acc <sys_arch_reboot+0x1c>)
   12ab6:	4b06      	ldr	r3, [pc, #24]	; (12ad0 <sys_arch_reboot+0x20>)
   12ab8:	68ca      	ldr	r2, [r1, #12]
   12aba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12abe:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12ac0:	60cb      	str	r3, [r1, #12]
   12ac2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12ac6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12ac8:	e7fd      	b.n	12ac6 <sys_arch_reboot+0x16>
   12aca:	bf00      	nop
   12acc:	e000ed00 	.word	0xe000ed00
   12ad0:	05fa0004 	.word	0x05fa0004

00012ad4 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   12ad4:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   12ad6:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12ad8:	4906      	ldr	r1, [pc, #24]	; (12af4 <z_arm_clear_arm_mpu_config+0x20>)
   12ada:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   12ade:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   12ae2:	4293      	cmp	r3, r2
   12ae4:	db00      	blt.n	12ae8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   12ae6:	4770      	bx	lr
  mpu->RNR = rnr;
   12ae8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   12aec:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   12af0:	3301      	adds	r3, #1
   12af2:	e7f6      	b.n	12ae2 <z_arm_clear_arm_mpu_config+0xe>
   12af4:	e000ed00 	.word	0xe000ed00

00012af8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12af8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12afa:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12afc:	2400      	movs	r4, #0
   12afe:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12b02:	f7ff ffe7 	bl	12ad4 <z_arm_clear_arm_mpu_config>
   12b06:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12b08:	f04f 30ff 	mov.w	r0, #4294967295
   12b0c:	4a0c      	ldr	r2, [pc, #48]	; (12b40 <z_arm_init_arch_hw_at_boot+0x48>)
   12b0e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   12b12:	3301      	adds	r3, #1
   12b14:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   12b16:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   12b1a:	d1f8      	bne.n	12b0e <z_arm_init_arch_hw_at_boot+0x16>
   12b1c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12b1e:	f04f 30ff 	mov.w	r0, #4294967295
   12b22:	4a07      	ldr	r2, [pc, #28]	; (12b40 <z_arm_init_arch_hw_at_boot+0x48>)
   12b24:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   12b28:	3301      	adds	r3, #1
   12b2a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12b2c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   12b30:	d1f8      	bne.n	12b24 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   12b32:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12b34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12b38:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12b3c:	bd10      	pop	{r4, pc}
   12b3e:	bf00      	nop
   12b40:	e000e100 	.word	0xe000e100

00012b44 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12b44:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12b46:	2120      	movs	r1, #32
   12b48:	4803      	ldr	r0, [pc, #12]	; (12b58 <z_arm_interrupt_init+0x14>)
   12b4a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12b4c:	3301      	adds	r3, #1
   12b4e:	2b41      	cmp	r3, #65	; 0x41
   12b50:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12b54:	d1f9      	bne.n	12b4a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12b56:	4770      	bx	lr
   12b58:	e000e100 	.word	0xe000e100

00012b5c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12b5c:	4b06      	ldr	r3, [pc, #24]	; (12b78 <z_impl_k_thread_abort+0x1c>)
   12b5e:	689b      	ldr	r3, [r3, #8]
   12b60:	4283      	cmp	r3, r0
   12b62:	d107      	bne.n	12b74 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12b64:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12b68:	b123      	cbz	r3, 12b74 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12b6a:	4a04      	ldr	r2, [pc, #16]	; (12b7c <z_impl_k_thread_abort+0x20>)
   12b6c:	6853      	ldr	r3, [r2, #4]
   12b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12b72:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   12b74:	f002 bb98 	b.w	152a8 <z_thread_abort>
   12b78:	200009d4 	.word	0x200009d4
   12b7c:	e000ed00 	.word	0xe000ed00

00012b80 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
   12b80:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
   12b82:	4b0c      	ldr	r3, [pc, #48]	; (12bb4 <tz_nonsecure_state_setup+0x34>)
   12b84:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
   12b86:	6803      	ldr	r3, [r0, #0]
   12b88:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
   12b8c:	6843      	ldr	r3, [r0, #4]
   12b8e:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
   12b92:	7b02      	ldrb	r2, [r0, #12]
   12b94:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
   12b98:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
   12b9c:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
   12ba0:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
   12ba2:	bf48      	it	mi
   12ba4:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
   12ba8:	b109      	cbz	r1, 12bae <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
   12baa:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
   12bae:	f383 8894 	msr	CONTROL_NS, r3
}
   12bb2:	4770      	bx	lr
   12bb4:	e002ed00 	.word	0xe002ed00

00012bb8 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12bb8:	4a08      	ldr	r2, [pc, #32]	; (12bdc <tz_nbanked_exception_target_state_set+0x24>)
   12bba:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
   12bbc:	b148      	cbz	r0, 12bd2 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
   12bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12bc2:	041b      	lsls	r3, r3, #16
   12bc4:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   12bc6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   12bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   12bce:	60d3      	str	r3, [r2, #12]
}
   12bd0:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12bd2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
   12bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   12bd8:	e7f5      	b.n	12bc6 <tz_nbanked_exception_target_state_set+0xe>
   12bda:	bf00      	nop
   12bdc:	e000ed00 	.word	0xe000ed00

00012be0 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12be0:	4a08      	ldr	r2, [pc, #32]	; (12c04 <tz_nonsecure_exception_prio_config+0x24>)
   12be2:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
   12be4:	b140      	cbz	r0, 12bf8 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12be6:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
   12be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   12bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   12bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   12bf4:	60d3      	str	r3, [r2, #12]
}
   12bf6:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
   12bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   12bfc:	041b      	lsls	r3, r3, #16
   12bfe:	0c1b      	lsrs	r3, r3, #16
   12c00:	e7f4      	b.n	12bec <tz_nonsecure_exception_prio_config+0xc>
   12c02:	bf00      	nop
   12c04:	e000ed00 	.word	0xe000ed00

00012c08 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12c08:	4a08      	ldr	r2, [pc, #32]	; (12c2c <tz_nonsecure_system_reset_req_block+0x24>)
   12c0a:	68d3      	ldr	r3, [r2, #12]
	if (block) {
   12c0c:	b140      	cbz	r0, 12c20 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12c0e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
   12c10:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   12c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   12c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
   12c1c:	60d3      	str	r3, [r2, #12]
}
   12c1e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
   12c20:	f023 0308 	bic.w	r3, r3, #8
   12c24:	041b      	lsls	r3, r3, #16
   12c26:	0c1b      	lsrs	r3, r3, #16
   12c28:	e7f4      	b.n	12c14 <tz_nonsecure_system_reset_req_block+0xc>
   12c2a:	bf00      	nop
   12c2c:	e000ed00 	.word	0xe000ed00

00012c30 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
   12c30:	4a03      	ldr	r2, [pc, #12]	; (12c40 <tz_nonsecure_fpu_access_enable+0x10>)
   12c32:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   12c36:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   12c3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
   12c3e:	4770      	bx	lr
   12c40:	e000ed00 	.word	0xe000ed00

00012c44 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
   12c44:	4b0a      	ldr	r3, [pc, #40]	; (12c70 <tz_sau_configure+0x2c>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
   12c46:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
   12c4a:	b120      	cbz	r0, 12c56 <tz_sau_configure+0x12>
   12c4c:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   12c50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}
	}
}
   12c54:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
   12c56:	f022 0201 	bic.w	r2, r2, #1
   12c5a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   12c5e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		if (allns) {
   12c62:	b111      	cbz	r1, 12c6a <tz_sau_configure+0x26>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   12c64:	f042 0202 	orr.w	r2, r2, #2
   12c68:	e7f2      	b.n	12c50 <tz_sau_configure+0xc>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   12c6a:	f022 0202 	bic.w	r2, r2, #2
   12c6e:	e7ef      	b.n	12c50 <tz_sau_configure+0xc>
   12c70:	e000ed00 	.word	0xe000ed00

00012c74 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   12c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12c76:	4c09      	ldr	r4, [pc, #36]	; (12c9c <z_arm_configure_static_mpu_regions+0x28>)
   12c78:	4a09      	ldr	r2, [pc, #36]	; (12ca0 <z_arm_configure_static_mpu_regions+0x2c>)
   12c7a:	4623      	mov	r3, r4
   12c7c:	2101      	movs	r1, #1
   12c7e:	4809      	ldr	r0, [pc, #36]	; (12ca4 <z_arm_configure_static_mpu_regions+0x30>)
   12c80:	f000 f924 	bl	12ecc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12c84:	2300      	movs	r3, #0
   12c86:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   12c88:	4b07      	ldr	r3, [pc, #28]	; (12ca8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12c8a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   12c8c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12c8e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12c90:	9301      	str	r3, [sp, #4]
   12c92:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12c94:	f000 f936 	bl	12f04 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   12c98:	b004      	add	sp, #16
   12c9a:	bd10      	pop	{r4, pc}
   12c9c:	20010000 	.word	0x20010000
   12ca0:	20000000 	.word	0x20000000
   12ca4:	00018f60 	.word	0x00018f60
   12ca8:	20000120 	.word	0x20000120

00012cac <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   12cac:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   12cae:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   12cb0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   12cb2:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   12cb6:	f004 021f 	and.w	r2, r4, #31
   12cba:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   12cbc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   12cbe:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   12cc0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   12cc4:	4905      	ldr	r1, [pc, #20]	; (12cdc <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   12cc6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   12cca:	f043 0301 	orr.w	r3, r3, #1
   12cce:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   12cd2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   12cd6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   12cda:	bd10      	pop	{r4, pc}
   12cdc:	e000ed00 	.word	0xe000ed00

00012ce0 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   12ce0:	b530      	push	{r4, r5, lr}
	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
		&new_region->attr, new_region->start, new_region->size);
   12ce2:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   12ce4:	680c      	ldr	r4, [r1, #0]
{
   12ce6:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
   12ce8:	890a      	ldrh	r2, [r1, #8]
   12cea:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   12cec:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12cee:	3b01      	subs	r3, #1
   12cf0:	f024 041f 	bic.w	r4, r4, #31
   12cf4:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   12cf6:	f002 021f 	and.w	r2, r2, #31
   12cfa:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12cfe:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   12d02:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12d04:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   12d06:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12d0a:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
   12d0c:	d909      	bls.n	12d22 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12d0e:	4602      	mov	r2, r0
   12d10:	2145      	movs	r1, #69	; 0x45
   12d12:	4806      	ldr	r0, [pc, #24]	; (12d2c <mpu_configure_region+0x4c>)
   12d14:	f005 fc91 	bl	1863a <z_log_minimal_printk>
   12d18:	f06f 0415 	mvn.w	r4, #21

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   12d1c:	4620      	mov	r0, r4
   12d1e:	b005      	add	sp, #20
   12d20:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   12d22:	4669      	mov	r1, sp
   12d24:	f7ff ffc2 	bl	12cac <region_init>
	return region_allocate_and_init(index,
   12d28:	e7f8      	b.n	12d1c <mpu_configure_region+0x3c>
   12d2a:	bf00      	nop
   12d2c:	00019c2b 	.word	0x00019c2b

00012d30 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   12d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d34:	4689      	mov	r9, r1
   12d36:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12d38:	4606      	mov	r6, r0
   12d3a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   12d3e:	4d54      	ldr	r5, [pc, #336]	; (12e90 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   12d40:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   12d42:	45c8      	cmp	r8, r9
   12d44:	da27      	bge.n	12d96 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
   12d46:	f8d6 a004 	ldr.w	sl, [r6, #4]
   12d4a:	f1ba 0f00 	cmp.w	sl, #0
   12d4e:	d045      	beq.n	12ddc <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
   12d50:	f1ba 0f1f 	cmp.w	sl, #31
   12d54:	d918      	bls.n	12d88 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
   12d56:	f01a 0f1f 	tst.w	sl, #31
   12d5a:	d115      	bne.n	12d88 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
   12d5c:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   12d60:	f01b 0f1f 	tst.w	fp, #31
   12d64:	d110      	bne.n	12d88 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12d66:	4658      	mov	r0, fp
   12d68:	f005 fd19 	bl	1879e <arm_cmse_mpu_region_get>
   12d6c:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12d6e:	eb0a 000b 	add.w	r0, sl, fp
   12d72:	3801      	subs	r0, #1
   12d74:	f005 fd13 	bl	1879e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   12d78:	4287      	cmp	r7, r0
   12d7a:	d010      	beq.n	12d9e <mpu_configure_regions_and_partition.constprop.0+0x6e>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   12d7c:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   12d80:	463a      	mov	r2, r7
   12d82:	2145      	movs	r1, #69	; 0x45
   12d84:	4843      	ldr	r0, [pc, #268]	; (12e94 <mpu_configure_regions_and_partition.constprop.0+0x164>)
   12d86:	e002      	b.n	12d8e <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   12d88:	4642      	mov	r2, r8
   12d8a:	2145      	movs	r1, #69	; 0x45
   12d8c:	4842      	ldr	r0, [pc, #264]	; (12e98 <mpu_configure_regions_and_partition.constprop.0+0x168>)
			LOG_ERR("Invalid underlying region index %u",
   12d8e:	f005 fc54 	bl	1863a <z_log_minimal_printk>
			return -EINVAL;
   12d92:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   12d96:	4620      	mov	r0, r4
   12d98:	b005      	add	sp, #20
   12d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   12d9e:	f117 0f16 	cmn.w	r7, #22
   12da2:	d0ed      	beq.n	12d80 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   12da4:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   12da6:	42bb      	cmp	r3, r7
   12da8:	dbea      	blt.n	12d80 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   12daa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   12dae:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
   12db2:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   12db6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   12dba:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   12dbe:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   12dc2:	e9d6 3200 	ldrd	r3, r2, [r6]
   12dc6:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   12dc8:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   12dca:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   12dce:	d11d      	bne.n	12e0c <mpu_configure_regions_and_partition.constprop.0+0xdc>
   12dd0:	45d3      	cmp	fp, sl
   12dd2:	d107      	bne.n	12de4 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
   12dd4:	4631      	mov	r1, r6
   12dd6:	b2f8      	uxtb	r0, r7
   12dd8:	f7ff ff82 	bl	12ce0 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   12ddc:	f108 0801 	add.w	r8, r8, #1
   12de0:	360c      	adds	r6, #12
   12de2:	e7ae      	b.n	12d42 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   12de4:	4631      	mov	r1, r6
	MPU->RNR = index;
   12de6:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   12dea:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
   12dee:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   12df2:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   12df6:	4313      	orrs	r3, r2
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   12df8:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   12dfc:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   12dfe:	f7ff ff6f 	bl	12ce0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   12e02:	f110 0f16 	cmn.w	r0, #22
   12e06:	d0c4      	beq.n	12d92 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
   12e08:	1c44      	adds	r4, r0, #1
   12e0a:	e7e7      	b.n	12ddc <mpu_configure_regions_and_partition.constprop.0+0xac>
	MPU->RNR = index;
   12e0c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12e10:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   12e14:	3b01      	subs	r3, #1
		| (limit & MPU_RLAR_LIMIT_Msk);
   12e16:	f023 031f 	bic.w	r3, r3, #31
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12e1a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   12e1e:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   12e20:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   12e22:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   12e24:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12e26:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   12e2a:	d0e8      	beq.n	12dfe <mpu_configure_regions_and_partition.constprop.0+0xce>
				mpu_configure_region(reg_index, &regions[i]);
   12e2c:	f7ff ff58 	bl	12ce0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   12e30:	f110 0f16 	cmn.w	r0, #22
   12e34:	d0ad      	beq.n	12d92 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
   12e36:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   12e3a:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   12e3e:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   12e42:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   12e46:	f362 0304 	bfi	r3, r2, #0, #5
   12e4a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12e4e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   12e52:	f89d 2008 	ldrb.w	r2, [sp, #8]
   12e56:	085b      	lsrs	r3, r3, #1
   12e58:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   12e5c:	e9d6 3100 	ldrd	r3, r1, [r6]
   12e60:	440b      	add	r3, r1
   12e62:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   12e64:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   12e68:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   12e6a:	445b      	add	r3, fp
   12e6c:	eba3 030a 	sub.w	r3, r3, sl
   12e70:	b2c0      	uxtb	r0, r0
   12e72:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   12e76:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12e78:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   12e7c:	9303      	str	r3, [sp, #12]
   12e7e:	d903      	bls.n	12e88 <mpu_configure_regions_and_partition.constprop.0+0x158>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12e80:	4602      	mov	r2, r0
   12e82:	2145      	movs	r1, #69	; 0x45
   12e84:	4805      	ldr	r0, [pc, #20]	; (12e9c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   12e86:	e782      	b.n	12d8e <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
   12e88:	4669      	mov	r1, sp
   12e8a:	f7ff ff0f 	bl	12cac <region_init>
   12e8e:	e7bb      	b.n	12e08 <mpu_configure_regions_and_partition.constprop.0+0xd8>
   12e90:	e000ed00 	.word	0xe000ed00
   12e94:	00019c7e 	.word	0x00019c7e
   12e98:	00019c56 	.word	0x00019c56
   12e9c:	00019c2b 	.word	0x00019c2b

00012ea0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12ea0:	2205      	movs	r2, #5
   12ea2:	4b04      	ldr	r3, [pc, #16]	; (12eb4 <arm_core_mpu_enable+0x14>)
   12ea4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   12ea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12eac:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12eb0:	4770      	bx	lr
   12eb2:	bf00      	nop
   12eb4:	e000ed00 	.word	0xe000ed00

00012eb8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   12eb8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12ebc:	2200      	movs	r2, #0
   12ebe:	4b02      	ldr	r3, [pc, #8]	; (12ec8 <arm_core_mpu_disable+0x10>)
   12ec0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   12ec4:	4770      	bx	lr
   12ec6:	bf00      	nop
   12ec8:	e000ed00 	.word	0xe000ed00

00012ecc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   12ecc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12ece:	4c0a      	ldr	r4, [pc, #40]	; (12ef8 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   12ed0:	7822      	ldrb	r2, [r4, #0]
   12ed2:	f7ff ff2d 	bl	12d30 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12ed6:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   12ed8:	3016      	adds	r0, #22
   12eda:	d10c      	bne.n	12ef6 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   12edc:	4907      	ldr	r1, [pc, #28]	; (12efc <arm_core_mpu_configure_static_mpu_regions+0x30>)
   12ede:	4808      	ldr	r0, [pc, #32]	; (12f00 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   12ee0:	f240 1205 	movw	r2, #261	; 0x105
   12ee4:	f005 facd 	bl	18482 <printk>
			regions_num);
	}
}
   12ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   12eec:	f240 1105 	movw	r1, #261	; 0x105
   12ef0:	4802      	ldr	r0, [pc, #8]	; (12efc <arm_core_mpu_configure_static_mpu_regions+0x30>)
   12ef2:	f005 bb8f 	b.w	18614 <assert_post_action>
}
   12ef6:	bd10      	pop	{r4, pc}
   12ef8:	20001324 	.word	0x20001324
   12efc:	00019ca6 	.word	0x00019ca6
   12f00:	00019196 	.word	0x00019196

00012f04 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   12f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f08:	4d30      	ldr	r5, [pc, #192]	; (12fcc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   12f0a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12f0c:	4606      	mov	r6, r0
   12f0e:	f04f 0800 	mov.w	r8, #0
   12f12:	46ab      	mov	fp, r5
	MPU->RNR = index;
   12f14:	4f2e      	ldr	r7, [pc, #184]	; (12fd0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12f16:	45d0      	cmp	r8, sl
   12f18:	db02      	blt.n	12f20 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   12f1a:	b003      	add	sp, #12
   12f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   12f20:	f8d6 9004 	ldr.w	r9, [r6, #4]
   12f24:	f1b9 0f00 	cmp.w	r9, #0
   12f28:	d04a      	beq.n	12fc0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   12f2a:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12f2c:	4608      	mov	r0, r1
   12f2e:	9101      	str	r1, [sp, #4]
   12f30:	f005 fc35 	bl	1879e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12f34:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12f36:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12f38:	eb09 0001 	add.w	r0, r9, r1
   12f3c:	3801      	subs	r0, #1
   12f3e:	f005 fc2e 	bl	1879e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   12f42:	4284      	cmp	r4, r0
   12f44:	f04f 0214 	mov.w	r2, #20
   12f48:	4b22      	ldr	r3, [pc, #136]	; (12fd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   12f4a:	d013      	beq.n	12f74 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   12f4c:	fb02 f308 	mul.w	r3, r2, r8
   12f50:	f06f 0215 	mvn.w	r2, #21
   12f54:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   12f58:	f240 1215 	movw	r2, #277	; 0x115
   12f5c:	491e      	ldr	r1, [pc, #120]	; (12fd8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   12f5e:	481f      	ldr	r0, [pc, #124]	; (12fdc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   12f60:	f005 fa8f 	bl	18482 <printk>
   12f64:	f240 1115 	movw	r1, #277	; 0x115
   12f68:	481b      	ldr	r0, [pc, #108]	; (12fd8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
   12f6a:	b003      	add	sp, #12
   12f6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   12f70:	f005 bb50 	b.w	18614 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   12f74:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   12f78:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   12f7a:	d0ed      	beq.n	12f58 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   12f7c:	7819      	ldrb	r1, [r3, #0]
   12f7e:	42a1      	cmp	r1, r4
   12f80:	ddea      	ble.n	12f58 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   12f82:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   12f86:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
   12f8a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   12f8e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   12f92:	f100 0108 	add.w	r1, r0, #8
   12f96:	7b00      	ldrb	r0, [r0, #12]
   12f98:	f364 0004 	bfi	r0, r4, #0, #5
   12f9c:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12f9e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   12fa2:	790c      	ldrb	r4, [r1, #4]
   12fa4:	0840      	lsrs	r0, r0, #1
   12fa6:	f360 1447 	bfi	r4, r0, #5, #3
   12faa:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   12fac:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   12fb0:	f021 011f 	bic.w	r1, r1, #31
   12fb4:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   12fb6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   12fba:	f021 011f 	bic.w	r1, r1, #31
   12fbe:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12fc0:	f108 0801 	add.w	r8, r8, #1
   12fc4:	3514      	adds	r5, #20
   12fc6:	360c      	adds	r6, #12
   12fc8:	e7a5      	b.n	12f16 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   12fca:	bf00      	nop
   12fcc:	200009a8 	.word	0x200009a8
   12fd0:	e000ed00 	.word	0xe000ed00
   12fd4:	20001324 	.word	0x20001324
   12fd8:	00019ca6 	.word	0x00019ca6
   12fdc:	00019196 	.word	0x00019196

00012fe0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   12fe0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   12fe2:	4d1d      	ldr	r5, [pc, #116]	; (13058 <z_arm_mpu_init+0x78>)
   12fe4:	682c      	ldr	r4, [r5, #0]
   12fe6:	2c10      	cmp	r4, #16
   12fe8:	d90d      	bls.n	13006 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   12fea:	f44f 729e 	mov.w	r2, #316	; 0x13c
   12fee:	491b      	ldr	r1, [pc, #108]	; (1305c <z_arm_mpu_init+0x7c>)
   12ff0:	481b      	ldr	r0, [pc, #108]	; (13060 <z_arm_mpu_init+0x80>)
   12ff2:	f005 fa46 	bl	18482 <printk>
   12ff6:	4819      	ldr	r0, [pc, #100]	; (1305c <z_arm_mpu_init+0x7c>)
   12ff8:	f44f 719e 	mov.w	r1, #316	; 0x13c
   12ffc:	f005 fb0a 	bl	18614 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   13000:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   13004:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13006:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   13008:	f7ff ff56 	bl	12eb8 <arm_core_mpu_disable>
	MPU->MAIR0 =
   1300c:	4b15      	ldr	r3, [pc, #84]	; (13064 <z_arm_mpu_init+0x84>)
   1300e:	4a16      	ldr	r2, [pc, #88]	; (13068 <z_arm_mpu_init+0x88>)
   13010:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13014:	4284      	cmp	r4, r0
   13016:	d10c      	bne.n	13032 <z_arm_mpu_init+0x52>
	static_regions_num = mpu_config.num_regions;
   13018:	4b14      	ldr	r3, [pc, #80]	; (1306c <z_arm_mpu_init+0x8c>)
   1301a:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1301c:	f7ff ff40 	bl	12ea0 <arm_core_mpu_enable>
	__ASSERT(
   13020:	4b10      	ldr	r3, [pc, #64]	; (13064 <z_arm_mpu_init+0x84>)
   13022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   13026:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1302a:	2b10      	cmp	r3, #16
   1302c:	d108      	bne.n	13040 <z_arm_mpu_init+0x60>
	return 0;
   1302e:	2000      	movs	r0, #0
   13030:	e7e8      	b.n	13004 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   13032:	6869      	ldr	r1, [r5, #4]
   13034:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   13038:	f7ff fe38 	bl	12cac <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1303c:	3001      	adds	r0, #1
   1303e:	e7e9      	b.n	13014 <z_arm_mpu_init+0x34>
	__ASSERT(
   13040:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   13044:	4905      	ldr	r1, [pc, #20]	; (1305c <z_arm_mpu_init+0x7c>)
   13046:	4806      	ldr	r0, [pc, #24]	; (13060 <z_arm_mpu_init+0x80>)
   13048:	f005 fa1b 	bl	18482 <printk>
   1304c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   13050:	4802      	ldr	r0, [pc, #8]	; (1305c <z_arm_mpu_init+0x7c>)
   13052:	f005 fadf 	bl	18614 <assert_post_action>
   13056:	e7ea      	b.n	1302e <z_arm_mpu_init+0x4e>
   13058:	00018f6c 	.word	0x00018f6c
   1305c:	00019ca6 	.word	0x00019ca6
   13060:	00019196 	.word	0x00019196
   13064:	e000ed00 	.word	0xe000ed00
   13068:	0044ffaa 	.word	0x0044ffaa
   1306c:	20001324 	.word	0x20001324

00013070 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13070:	4b01      	ldr	r3, [pc, #4]	; (13078 <__stdout_hook_install+0x8>)
   13072:	6018      	str	r0, [r3, #0]
}
   13074:	4770      	bx	lr
   13076:	bf00      	nop
   13078:	20000028 	.word	0x20000028

0001307c <board_circuitdojo_feather_nrf9160_init>:

#define GPIO0 DT_LABEL(DT_NODELABEL(gpio0))
#define POWER_LATCH_PIN 31

static int board_circuitdojo_feather_nrf9160_init(const struct device *dev)
{
   1307c:	b570      	push	{r4, r5, r6, lr}
   1307e:	4812      	ldr	r0, [pc, #72]	; (130c8 <board_circuitdojo_feather_nrf9160_init+0x4c>)
   13080:	f000 fd16 	bl	13ab0 <z_impl_device_get_binding>
	ARG_UNUSED(dev);

	/* Get the device binding */
	const struct device *gpio = device_get_binding(GPIO0);
	if (gpio == NULL) {
   13084:	4604      	mov	r4, r0
   13086:	b1e0      	cbz	r0, 130c2 <board_circuitdojo_feather_nrf9160_init+0x46>
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   13088:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_api *api =
   1308a:	6886      	ldr	r6, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1308c:	681b      	ldr	r3, [r3, #0]
	struct gpio_driver_data *data =
   1308e:	6905      	ldr	r5, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   13090:	2b00      	cmp	r3, #0
   13092:	db0a      	blt.n	130aa <board_circuitdojo_feather_nrf9160_init+0x2e>
   13094:	490d      	ldr	r1, [pc, #52]	; (130cc <board_circuitdojo_feather_nrf9160_init+0x50>)
   13096:	480e      	ldr	r0, [pc, #56]	; (130d0 <board_circuitdojo_feather_nrf9160_init+0x54>)
   13098:	f44f 723c 	mov.w	r2, #752	; 0x2f0
   1309c:	f005 f9f1 	bl	18482 <printk>
   130a0:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   130a4:	4809      	ldr	r0, [pc, #36]	; (130cc <board_circuitdojo_feather_nrf9160_init+0x50>)
   130a6:	f005 fab5 	bl	18614 <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   130aa:	682b      	ldr	r3, [r5, #0]
	}

	return api->pin_configure(port, pin, flags);
   130ac:	f44f 6220 	mov.w	r2, #2560	; 0xa00
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   130b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   130b4:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   130b6:	211f      	movs	r1, #31
   130b8:	4620      	mov	r0, r4
   130ba:	6833      	ldr	r3, [r6, #0]
   130bc:	4798      	blx	r3
	}

	/* Configure latch pin as output. */
	gpio_pin_configure(gpio, POWER_LATCH_PIN, GPIO_OUTPUT_HIGH);

	return 0;
   130be:	2000      	movs	r0, #0
}
   130c0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   130c2:	f06f 0012 	mvn.w	r0, #18
   130c6:	e7fb      	b.n	130c0 <board_circuitdojo_feather_nrf9160_init+0x44>
   130c8:	00019cec 	.word	0x00019cec
   130cc:	00019cf3 	.word	0x00019cf3
   130d0:	00019196 	.word	0x00019196

000130d4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   130d4:	6802      	ldr	r2, [r0, #0]
{
   130d6:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   130d8:	0953      	lsrs	r3, r2, #5
{
   130da:	4604      	mov	r4, r0
    switch (port)
   130dc:	d104      	bne.n	130e8 <nrf_gpio_pin_port_decode+0x14>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   130de:	f04f 33ff 	mov.w	r3, #4294967295
   130e2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   130e4:	07db      	lsls	r3, r3, #31
   130e6:	d40a      	bmi.n	130fe <nrf_gpio_pin_port_decode+0x2a>
   130e8:	490e      	ldr	r1, [pc, #56]	; (13124 <nrf_gpio_pin_port_decode+0x50>)
   130ea:	480f      	ldr	r0, [pc, #60]	; (13128 <nrf_gpio_pin_port_decode+0x54>)
   130ec:	f44f 7205 	mov.w	r2, #532	; 0x214
   130f0:	f005 f9c7 	bl	18482 <printk>
   130f4:	f44f 7105 	mov.w	r1, #532	; 0x214
   130f8:	480a      	ldr	r0, [pc, #40]	; (13124 <nrf_gpio_pin_port_decode+0x50>)
   130fa:	f005 fa8b 	bl	18614 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   130fe:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   13100:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13104:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   13106:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   13108:	d00a      	beq.n	13120 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1310a:	4906      	ldr	r1, [pc, #24]	; (13124 <nrf_gpio_pin_port_decode+0x50>)
   1310c:	4806      	ldr	r0, [pc, #24]	; (13128 <nrf_gpio_pin_port_decode+0x54>)
   1310e:	f240 2219 	movw	r2, #537	; 0x219
   13112:	f005 f9b6 	bl	18482 <printk>
   13116:	f240 2119 	movw	r1, #537	; 0x219
   1311a:	4802      	ldr	r0, [pc, #8]	; (13124 <nrf_gpio_pin_port_decode+0x50>)
   1311c:	f005 fa7a 	bl	18614 <assert_post_action>
}
   13120:	4802      	ldr	r0, [pc, #8]	; (1312c <nrf_gpio_pin_port_decode+0x58>)
   13122:	bd10      	pop	{r4, pc}
   13124:	00019d1d 	.word	0x00019d1d
   13128:	00019196 	.word	0x00019196
   1312c:	50842500 	.word	0x50842500

00013130 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   13130:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   13132:	794b      	ldrb	r3, [r1, #5]
   13134:	2b01      	cmp	r3, #1
   13136:	d02a      	beq.n	1318e <uarte_nrfx_configure+0x5e>
   13138:	2b03      	cmp	r3, #3
   1313a:	d125      	bne.n	13188 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1313c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1313e:	798b      	ldrb	r3, [r1, #6]
   13140:	2b03      	cmp	r3, #3
   13142:	d121      	bne.n	13188 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   13144:	79cc      	ldrb	r4, [r1, #7]
   13146:	b12c      	cbz	r4, 13154 <uarte_nrfx_configure+0x24>
   13148:	2c01      	cmp	r4, #1
   1314a:	d11d      	bne.n	13188 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   1314c:	6843      	ldr	r3, [r0, #4]
   1314e:	685b      	ldr	r3, [r3, #4]
   13150:	079b      	lsls	r3, r3, #30
   13152:	d019      	beq.n	13188 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   13154:	790a      	ldrb	r2, [r1, #4]
   13156:	b112      	cbz	r2, 1315e <uarte_nrfx_configure+0x2e>
   13158:	2a02      	cmp	r2, #2
   1315a:	d115      	bne.n	13188 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1315c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1315e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   13160:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   13162:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   13166:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   13168:	d065      	beq.n	13236 <uarte_nrfx_configure+0x106>
   1316a:	d82d      	bhi.n	131c8 <uarte_nrfx_configure+0x98>
   1316c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   13170:	d064      	beq.n	1323c <uarte_nrfx_configure+0x10c>
   13172:	d816      	bhi.n	131a2 <uarte_nrfx_configure+0x72>
   13174:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   13178:	d062      	beq.n	13240 <uarte_nrfx_configure+0x110>
   1317a:	d80a      	bhi.n	13192 <uarte_nrfx_configure+0x62>
   1317c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   13180:	d061      	beq.n	13246 <uarte_nrfx_configure+0x116>
   13182:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   13186:	d061      	beq.n	1324c <uarte_nrfx_configure+0x11c>
		return -ENOTSUP;
   13188:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1318c:	e052      	b.n	13234 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   1318e:	2600      	movs	r6, #0
   13190:	e7d5      	b.n	1313e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   13192:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   13196:	d05c      	beq.n	13252 <uarte_nrfx_configure+0x122>
   13198:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1319c:	d1f4      	bne.n	13188 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1319e:	4b37      	ldr	r3, [pc, #220]	; (1327c <uarte_nrfx_configure+0x14c>)
   131a0:	e03c      	b.n	1321c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   131a2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   131a6:	d057      	beq.n	13258 <uarte_nrfx_configure+0x128>
   131a8:	d807      	bhi.n	131ba <uarte_nrfx_configure+0x8a>
   131aa:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   131ae:	d055      	beq.n	1325c <uarte_nrfx_configure+0x12c>
   131b0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   131b4:	d1e8      	bne.n	13188 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   131b6:	4b32      	ldr	r3, [pc, #200]	; (13280 <uarte_nrfx_configure+0x150>)
   131b8:	e030      	b.n	1321c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   131ba:	f647 2712 	movw	r7, #31250	; 0x7a12
   131be:	42bb      	cmp	r3, r7
   131c0:	d1e2      	bne.n	13188 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   131c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   131c6:	e029      	b.n	1321c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   131c8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   131cc:	d048      	beq.n	13260 <uarte_nrfx_configure+0x130>
   131ce:	d813      	bhi.n	131f8 <uarte_nrfx_configure+0xc8>
   131d0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   131d4:	d047      	beq.n	13266 <uarte_nrfx_configure+0x136>
   131d6:	d809      	bhi.n	131ec <uarte_nrfx_configure+0xbc>
   131d8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   131dc:	42bb      	cmp	r3, r7
   131de:	d044      	beq.n	1326a <uarte_nrfx_configure+0x13a>
   131e0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   131e4:	d1d0      	bne.n	13188 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   131e6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   131ea:	e017      	b.n	1321c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   131ec:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   131f0:	d1ca      	bne.n	13188 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   131f2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   131f6:	e011      	b.n	1321c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   131f8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   131fc:	d038      	beq.n	13270 <uarte_nrfx_configure+0x140>
   131fe:	d808      	bhi.n	13212 <uarte_nrfx_configure+0xe2>
   13200:	4f20      	ldr	r7, [pc, #128]	; (13284 <uarte_nrfx_configure+0x154>)
   13202:	42bb      	cmp	r3, r7
   13204:	d037      	beq.n	13276 <uarte_nrfx_configure+0x146>
   13206:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1320a:	d1bd      	bne.n	13188 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1320c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   13210:	e004      	b.n	1321c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   13212:	4f1d      	ldr	r7, [pc, #116]	; (13288 <uarte_nrfx_configure+0x158>)
   13214:	42bb      	cmp	r3, r7
   13216:	d1b7      	bne.n	13188 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   13218:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1321c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   13220:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   13222:	4334      	orrs	r4, r6
   13224:	4322      	orrs	r2, r4
   13226:	3304      	adds	r3, #4
   13228:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1322a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1322e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   13232:	2000      	movs	r0, #0
}
   13234:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   13236:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1323a:	e7ef      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1323c:	4b13      	ldr	r3, [pc, #76]	; (1328c <uarte_nrfx_configure+0x15c>)
   1323e:	e7ed      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   13240:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   13244:	e7ea      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   13246:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1324a:	e7e7      	b.n	1321c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1324c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   13250:	e7e4      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   13252:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   13256:	e7e1      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   13258:	4b0d      	ldr	r3, [pc, #52]	; (13290 <uarte_nrfx_configure+0x160>)
   1325a:	e7df      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1325c:	4b0d      	ldr	r3, [pc, #52]	; (13294 <uarte_nrfx_configure+0x164>)
   1325e:	e7dd      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   13260:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   13264:	e7da      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   13266:	4b0c      	ldr	r3, [pc, #48]	; (13298 <uarte_nrfx_configure+0x168>)
   13268:	e7d8      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1326a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1326e:	e7d5      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   13270:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   13274:	e7d2      	b.n	1321c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   13276:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1327a:	e7cf      	b.n	1321c <uarte_nrfx_configure+0xec>
   1327c:	0013b000 	.word	0x0013b000
   13280:	004ea000 	.word	0x004ea000
   13284:	0003d090 	.word	0x0003d090
   13288:	000f4240 	.word	0x000f4240
   1328c:	00275000 	.word	0x00275000
   13290:	0075c000 	.word	0x0075c000
   13294:	003af000 	.word	0x003af000
   13298:	013a9000 	.word	0x013a9000

0001329c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1329e:	4605      	mov	r5, r0
   132a0:	460f      	mov	r7, r1
	return dev->data;
   132a2:	6906      	ldr	r6, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   132a4:	f005 fb9d 	bl	189e2 <k_is_in_isr>
   132a8:	b9b0      	cbnz	r0, 132d8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   132aa:	4b2c      	ldr	r3, [pc, #176]	; (1335c <uarte_nrfx_poll_out+0xc0>)
   132ac:	781b      	ldrb	r3, [r3, #0]
   132ae:	b19b      	cbz	r3, 132d8 <uarte_nrfx_poll_out+0x3c>
{
   132b0:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   132b2:	6868      	ldr	r0, [r5, #4]
   132b4:	f005 fafd 	bl	188b2 <is_tx_ready.isra.0>
   132b8:	b9f8      	cbnz	r0, 132fa <uarte_nrfx_poll_out+0x5e>
   132ba:	2001      	movs	r0, #1
   132bc:	f005 fb68 	bl	18990 <nrfx_busy_wait>
   132c0:	3c01      	subs	r4, #1
   132c2:	d1f6      	bne.n	132b2 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   132c4:	2100      	movs	r1, #0
   132c6:	2021      	movs	r0, #33	; 0x21
   132c8:	f001 ffb8 	bl	1523c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   132cc:	e7f0      	b.n	132b0 <uarte_nrfx_poll_out+0x14>
   132ce:	f384 8811 	msr	BASEPRI, r4
   132d2:	f3bf 8f6f 	isb	sy
}
   132d6:	e7f5      	b.n	132c4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   132d8:	f04f 0320 	mov.w	r3, #32
   132dc:	f3ef 8411 	mrs	r4, BASEPRI
   132e0:	f383 8811 	msr	BASEPRI, r3
   132e4:	f3bf 8f6f 	isb	sy
	int key;

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   132e8:	6868      	ldr	r0, [r5, #4]
   132ea:	f005 fae2 	bl	188b2 <is_tx_ready.isra.0>
   132ee:	b988      	cbnz	r0, 13314 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   132f0:	f384 8811 	msr	BASEPRI, r4
   132f4:	f3bf 8f6f 	isb	sy
}
   132f8:	e7ee      	b.n	132d8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   132fa:	f04f 0320 	mov.w	r3, #32
   132fe:	f3ef 8411 	mrs	r4, BASEPRI
   13302:	f383 8811 	msr	BASEPRI, r3
   13306:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1330a:	6868      	ldr	r0, [r5, #4]
   1330c:	f005 fad1 	bl	188b2 <is_tx_ready.isra.0>
   13310:	2800      	cmp	r0, #0
   13312:	d0dc      	beq.n	132ce <uarte_nrfx_poll_out+0x32>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   13314:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   13316:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   1331a:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   1331c:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1331e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13322:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13326:	2200      	movs	r2, #0
   13328:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1332c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   13330:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   13334:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13338:	684a      	ldr	r2, [r1, #4]
   1333a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1333c:	bf41      	itttt	mi
   1333e:	2208      	movmi	r2, #8
   13340:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   13344:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   13348:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1334c:	2201      	movs	r2, #1
   1334e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   13350:	f384 8811 	msr	BASEPRI, r4
   13354:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   13358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1335a:	bf00      	nop
   1335c:	20001325 	.word	0x20001325

00013360 <uarte_instance_init.constprop.0>:
	return config->uarte_regs;
   13360:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   13362:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	return config->uarte_regs;
   13366:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13368:	2300      	movs	r3, #0
	return dev->data;
   1336a:	6907      	ldr	r7, [r0, #16]
   1336c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   13370:	680b      	ldr	r3, [r1, #0]
   13372:	6038      	str	r0, [r7, #0]
static int uarte_instance_init(const struct device *dev,
   13374:	4606      	mov	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13376:	a801      	add	r0, sp, #4
   13378:	460d      	mov	r5, r1
   1337a:	9301      	str	r3, [sp, #4]
   1337c:	f7ff feaa 	bl	130d4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13380:	2301      	movs	r3, #1
   13382:	9a01      	ldr	r2, [sp, #4]
   13384:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   13386:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   13388:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1338a:	a801      	add	r0, sp, #4
   1338c:	9301      	str	r3, [sp, #4]
   1338e:	f7ff fea1 	bl	130d4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   13392:	2203      	movs	r2, #3
   13394:	9b01      	ldr	r3, [sp, #4]
   13396:	3380      	adds	r3, #128	; 0x80
   13398:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1339c:	686b      	ldr	r3, [r5, #4]
   1339e:	1c59      	adds	r1, r3, #1
   133a0:	d008      	beq.n	133b4 <uarte_instance_init.constprop.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   133a2:	a801      	add	r0, sp, #4
   133a4:	9301      	str	r3, [sp, #4]
   133a6:	f7ff fe95 	bl	130d4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   133aa:	220c      	movs	r2, #12
   133ac:	9b01      	ldr	r3, [sp, #4]
   133ae:	3380      	adds	r3, #128	; 0x80
   133b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   133b4:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   133b8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   133bc:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   133c0:	68ab      	ldr	r3, [r5, #8]
   133c2:	1c5a      	adds	r2, r3, #1
   133c4:	d008      	beq.n	133d8 <uarte_instance_init.constprop.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   133c6:	a801      	add	r0, sp, #4
   133c8:	9301      	str	r3, [sp, #4]
   133ca:	f7ff fe83 	bl	130d4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   133ce:	220c      	movs	r2, #12
   133d0:	9b01      	ldr	r3, [sp, #4]
   133d2:	3380      	adds	r3, #128	; 0x80
   133d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   133d8:	68eb      	ldr	r3, [r5, #12]
   133da:	1c58      	adds	r0, r3, #1
   133dc:	d011      	beq.n	13402 <uarte_instance_init.constprop.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   133de:	a801      	add	r0, sp, #4
   133e0:	9301      	str	r3, [sp, #4]
   133e2:	f7ff fe77 	bl	130d4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   133e6:	2301      	movs	r3, #1
   133e8:	9a01      	ldr	r2, [sp, #4]
   133ea:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   133ec:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   133ee:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   133f0:	a801      	add	r0, sp, #4
   133f2:	9301      	str	r3, [sp, #4]
   133f4:	f7ff fe6e 	bl	130d4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   133f8:	2203      	movs	r2, #3
   133fa:	9b01      	ldr	r3, [sp, #4]
   133fc:	3380      	adds	r3, #128	; 0x80
   133fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   13402:	6931      	ldr	r1, [r6, #16]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   13404:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   13408:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   1340a:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1340e:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   13410:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   13414:	f7ff fe8c 	bl	13130 <uarte_nrfx_configure>
	if (err) {
   13418:	4680      	mov	r8, r0
   1341a:	b980      	cbnz	r0, 1343e <uarte_instance_init.constprop.0+0xde>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1341c:	6873      	ldr	r3, [r6, #4]
   1341e:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   13420:	0719      	lsls	r1, r3, #28
   13422:	d53a      	bpl.n	1349a <uarte_instance_init.constprop.0+0x13a>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   13424:	f107 0012 	add.w	r0, r7, #18
   13428:	f000 faf6 	bl	13a18 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1342c:	4b30      	ldr	r3, [pc, #192]	; (134f0 <uarte_instance_init.constprop.0+0x190>)
   1342e:	4298      	cmp	r0, r3
   13430:	d009      	beq.n	13446 <uarte_instance_init.constprop.0+0xe6>
		LOG_ERR("Failed to allocate PPI Channel");
   13432:	2145      	movs	r1, #69	; 0x45
   13434:	482f      	ldr	r0, [pc, #188]	; (134f4 <uarte_instance_init.constprop.0+0x194>)
   13436:	f005 f900 	bl	1863a <z_log_minimal_printk>
		return -EIO;
   1343a:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1343e:	4640      	mov	r0, r8
   13440:	b002      	add	sp, #8
   13442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   13446:	f514 7a90 	adds.w	sl, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1344a:	f897 9012 	ldrb.w	r9, [r7, #18]
   1344e:	d10a      	bne.n	13466 <uarte_instance_init.constprop.0+0x106>
   13450:	4929      	ldr	r1, [pc, #164]	; (134f8 <uarte_instance_init.constprop.0+0x198>)
   13452:	482a      	ldr	r0, [pc, #168]	; (134fc <uarte_instance_init.constprop.0+0x19c>)
   13454:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
   13458:	f005 f813 	bl	18482 <printk>
   1345c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
   13460:	4825      	ldr	r0, [pc, #148]	; (134f8 <uarte_instance_init.constprop.0+0x198>)
   13462:	f005 f8d7 	bl	18614 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   13466:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   1346a:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1346e:	f8ca 9080 	str.w	r9, [sl, #128]	; 0x80
    NRFX_ASSERT(tep);
   13472:	d10a      	bne.n	1348a <uarte_instance_init.constprop.0+0x12a>
   13474:	4920      	ldr	r1, [pc, #128]	; (134f8 <uarte_instance_init.constprop.0+0x198>)
   13476:	4821      	ldr	r0, [pc, #132]	; (134fc <uarte_instance_init.constprop.0+0x19c>)
   13478:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   1347c:	f005 f801 	bl	18482 <printk>
   13480:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   13484:	481c      	ldr	r0, [pc, #112]	; (134f8 <uarte_instance_init.constprop.0+0x198>)
   13486:	f005 f8c5 	bl	18614 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1348a:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1348c:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   13490:	7cba      	ldrb	r2, [r7, #18]
   13492:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   13494:	4a1a      	ldr	r2, [pc, #104]	; (13500 <uarte_instance_init.constprop.0+0x1a0>)
   13496:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1349a:	2308      	movs	r3, #8
   1349c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   134a0:	686b      	ldr	r3, [r5, #4]
   134a2:	3301      	adds	r3, #1
   134a4:	d00c      	beq.n	134c0 <uarte_instance_init.constprop.0+0x160>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   134a6:	2300      	movs	r3, #0
   134a8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   134ac:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   134b0:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   134b4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   134b8:	2301      	movs	r3, #1
   134ba:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   134be:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   134c0:	6873      	ldr	r3, [r6, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   134c2:	3710      	adds	r7, #16
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   134c4:	685b      	ldr	r3, [r3, #4]
   134c6:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   134c8:	bf5c      	itt	pl
   134ca:	f44f 7280 	movpl.w	r2, #256	; 0x100
   134ce:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   134d2:	06db      	lsls	r3, r3, #27
   134d4:	bf44      	itt	mi
   134d6:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   134da:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   134de:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   134e0:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   134e4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   134e8:	2301      	movs	r3, #1
   134ea:	60a3      	str	r3, [r4, #8]
   134ec:	60e3      	str	r3, [r4, #12]
	return 0;
   134ee:	e7a6      	b.n	1343e <uarte_instance_init.constprop.0+0xde>
   134f0:	0bad0000 	.word	0x0bad0000
   134f4:	00019d50 	.word	0x00019d50
   134f8:	00019d74 	.word	0x00019d74
   134fc:	00019196 	.word	0x00019196
   13500:	50017000 	.word	0x50017000

00013504 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   13504:	b530      	push	{r4, r5, lr}
   13506:	b085      	sub	sp, #20
   13508:	466c      	mov	r4, sp
   1350a:	4605      	mov	r5, r0
   1350c:	4b08      	ldr	r3, [pc, #32]	; (13530 <uarte_2_init+0x2c>)
   1350e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   13514:	2200      	movs	r2, #0
   13516:	2101      	movs	r1, #1
   13518:	200a      	movs	r0, #10
   1351a:	f7fe ff3f 	bl	1239c <z_arm_irq_priority_set>
   1351e:	200a      	movs	r0, #10
   13520:	f7fe ff20 	bl	12364 <arch_irq_enable>
   13524:	4621      	mov	r1, r4
   13526:	4628      	mov	r0, r5
   13528:	f7ff ff1a 	bl	13360 <uarte_instance_init.constprop.0>
   1352c:	b005      	add	sp, #20
   1352e:	bd30      	pop	{r4, r5, pc}
   13530:	00018dbc 	.word	0x00018dbc

00013534 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   13534:	b530      	push	{r4, r5, lr}
   13536:	b085      	sub	sp, #20
   13538:	466c      	mov	r4, sp
   1353a:	4605      	mov	r5, r0
   1353c:	4b08      	ldr	r3, [pc, #32]	; (13560 <uarte_0_init+0x2c>)
   1353e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   13544:	2200      	movs	r2, #0
   13546:	2101      	movs	r1, #1
   13548:	2008      	movs	r0, #8
   1354a:	f7fe ff27 	bl	1239c <z_arm_irq_priority_set>
   1354e:	2008      	movs	r0, #8
   13550:	f7fe ff08 	bl	12364 <arch_irq_enable>
   13554:	4621      	mov	r1, r4
   13556:	4628      	mov	r0, r5
   13558:	f7ff ff02 	bl	13360 <uarte_instance_init.constprop.0>
   1355c:	b005      	add	sp, #20
   1355e:	bd30      	pop	{r4, r5, pc}
   13560:	00018dcc 	.word	0x00018dcc

00013564 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   13564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13566:	460f      	mov	r7, r1
   13568:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   1356a:	b940      	cbnz	r0, 1357e <entropy_cc3xx_rng_get_entropy+0x1a>
   1356c:	4918      	ldr	r1, [pc, #96]	; (135d0 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1356e:	4819      	ldr	r0, [pc, #100]	; (135d4 <entropy_cc3xx_rng_get_entropy+0x70>)
   13570:	2224      	movs	r2, #36	; 0x24
   13572:	f004 ff86 	bl	18482 <printk>
   13576:	2124      	movs	r1, #36	; 0x24
   13578:	4815      	ldr	r0, [pc, #84]	; (135d0 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1357a:	f005 f84b 	bl	18614 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1357e:	b947      	cbnz	r7, 13592 <entropy_cc3xx_rng_get_entropy+0x2e>
   13580:	4913      	ldr	r1, [pc, #76]	; (135d0 <entropy_cc3xx_rng_get_entropy+0x6c>)
   13582:	4814      	ldr	r0, [pc, #80]	; (135d4 <entropy_cc3xx_rng_get_entropy+0x70>)
   13584:	2225      	movs	r2, #37	; 0x25
   13586:	f004 ff7c 	bl	18482 <printk>
   1358a:	2125      	movs	r1, #37	; 0x25
   1358c:	4810      	ldr	r0, [pc, #64]	; (135d0 <entropy_cc3xx_rng_get_entropy+0x6c>)
   1358e:	f005 f841 	bl	18614 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   13592:	f44f 6580 	mov.w	r5, #1024	; 0x400
   13596:	2400      	movs	r4, #0
   13598:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   1359c:	42a6      	cmp	r6, r4
   1359e:	d801      	bhi.n	135a4 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
   135a0:	b003      	add	sp, #12
   135a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   135a4:	1b33      	subs	r3, r6, r4
   135a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   135aa:	bf38      	it	cc
   135ac:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   135ae:	2000      	movs	r0, #0
   135b0:	ab01      	add	r3, sp, #4
   135b2:	462a      	mov	r2, r5
   135b4:	1939      	adds	r1, r7, r4
   135b6:	f002 fa47 	bl	15a48 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   135ba:	9b01      	ldr	r3, [sp, #4]
   135bc:	42ab      	cmp	r3, r5
   135be:	d103      	bne.n	135c8 <entropy_cc3xx_rng_get_entropy+0x64>
		if (res != 0) {
   135c0:	2800      	cmp	r0, #0
   135c2:	d1ed      	bne.n	135a0 <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
   135c4:	442c      	add	r4, r5
   135c6:	e7e9      	b.n	1359c <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
   135c8:	f06f 0015 	mvn.w	r0, #21
   135cc:	e7e8      	b.n	135a0 <entropy_cc3xx_rng_get_entropy+0x3c>
   135ce:	bf00      	nop
   135d0:	00019dc3 	.word	0x00019dc3
   135d4:	00019196 	.word	0x00019196

000135d8 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   135d8:	4803      	ldr	r0, [pc, #12]	; (135e8 <k_sys_fatal_error_handler+0x10>)
   135da:	2145      	movs	r1, #69	; 0x45
{
   135dc:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   135de:	f005 f82c 	bl	1863a <z_log_minimal_printk>
		sys_arch_reboot(0);
   135e2:	2000      	movs	r0, #0
   135e4:	f7ff fa64 	bl	12ab0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   135e8:	00019dfe 	.word	0x00019dfe

000135ec <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   135ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   135f0:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   135f2:	4c20      	ldr	r4, [pc, #128]	; (13674 <check_ext_api_requests+0x88>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   135f4:	4e20      	ldr	r6, [pc, #128]	; (13678 <check_ext_api_requests+0x8c>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   135f6:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   135fa:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1367c <check_ext_api_requests+0x90>
{
   135fe:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13600:	45a8      	cmp	r8, r5
   13602:	d803      	bhi.n	1360c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   13604:	2000      	movs	r0, #0
   13606:	b005      	add	sp, #20
   13608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   1360c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1360e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13612:	681f      	ldr	r7, [r3, #0]
   13614:	ab01      	add	r3, sp, #4
   13616:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1361a:	220c      	movs	r2, #12
   1361c:	4619      	mov	r1, r3
   1361e:	4638      	mov	r0, r7
   13620:	f005 f8e7 	bl	187f2 <memcmp>
   13624:	b988      	cbnz	r0, 1364a <check_ext_api_requests+0x5e>
   13626:	b187      	cbz	r7, 1364a <check_ext_api_requests+0x5e>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   13628:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   1362a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1362c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1362e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   13630:	4291      	cmp	r1, r2
   13632:	d10a      	bne.n	1364a <check_ext_api_requests+0x5e>
		&&  (ext_api->ext_api_version >= req_min_version)
   13634:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   13636:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   13638:	4291      	cmp	r1, r2
   1363a:	d806      	bhi.n	1364a <check_ext_api_requests+0x5e>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   1363c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1363e:	4291      	cmp	r1, r2
   13640:	d903      	bls.n	1364a <check_ext_api_requests+0x5e>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   13642:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   13644:	695b      	ldr	r3, [r3, #20]
   13646:	439a      	bics	r2, r3
   13648:	d00a      	beq.n	13660 <check_ext_api_requests+0x74>
		} else if (ext_api_req->required) {
   1364a:	6a27      	ldr	r7, [r4, #32]
   1364c:	b167      	cbz	r7, 13668 <check_ext_api_requests+0x7c>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1364e:	480c      	ldr	r0, [pc, #48]	; (13680 <check_ext_api_requests+0x94>)
   13650:	f004 ff17 	bl	18482 <printk>
			k_panic();
   13654:	4040      	eors	r0, r0
   13656:	f380 8811 	msr	BASEPRI, r0
   1365a:	f04f 0004 	mov.w	r0, #4
   1365e:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   13660:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13662:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   13664:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13666:	e7cb      	b.n	13600 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   13668:	4648      	mov	r0, r9
   1366a:	f004 ff0a 	bl	18482 <printk>
			*ext_api_req->ext_api = NULL;
   1366e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13670:	601f      	str	r7, [r3, #0]
   13672:	e7f5      	b.n	13660 <check_ext_api_requests+0x74>
   13674:	0001043c 	.word	0x0001043c
   13678:	00018ddc 	.word	0x00018ddc
   1367c:	00019e49 	.word	0x00019e49
   13680:	00019e20 	.word	0x00019e20

00013684 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   13684:	4a4e      	ldr	r2, [pc, #312]	; (137c0 <SystemInit+0x13c>)
{
   13686:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   13688:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   1368c:	f043 0302 	orr.w	r3, r3, #2
   13690:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   13694:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   13698:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1369c:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
   1369e:	bf01      	itttt	eq
   136a0:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
   136a4:	2200      	moveq	r2, #0
   136a6:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
   136aa:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
   136ae:	f005 f960 	bl	18972 <nrf91_errata_14>
   136b2:	b128      	cbz	r0, 136c0 <SystemInit+0x3c>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
   136b4:	2201      	movs	r2, #1
   136b6:	4b43      	ldr	r3, [pc, #268]	; (137c4 <SystemInit+0x140>)
   136b8:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   136bc:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   136c0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   136c4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   136c8:	2a09      	cmp	r2, #9
   136ca:	d107      	bne.n	136dc <SystemInit+0x58>
            {
                switch(var2)
   136cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   136d0:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   136d2:	bf1e      	ittt	ne
   136d4:	2201      	movne	r2, #1
   136d6:	4b3b      	ldrne	r3, [pc, #236]	; (137c4 <SystemInit+0x140>)
   136d8:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
   136dc:	f005 f949 	bl	18972 <nrf91_errata_14>
   136e0:	b118      	cbz	r0, 136ea <SystemInit+0x66>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
   136e2:	220e      	movs	r2, #14
   136e4:	4b38      	ldr	r3, [pc, #224]	; (137c8 <SystemInit+0x144>)
   136e6:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   136ea:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
            if (var1 == 0x09)
   136ee:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   136f2:	2b09      	cmp	r3, #9
   136f4:	d106      	bne.n	13704 <SystemInit+0x80>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
   136f6:	2200      	movs	r2, #0
   136f8:	4b32      	ldr	r3, [pc, #200]	; (137c4 <SystemInit+0x140>)
   136fa:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
   136fe:	2201      	movs	r2, #1
   13700:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
   13704:	2200      	movs	r2, #0
   13706:	00d3      	lsls	r3, r2, #3
   13708:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   1370c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   13710:	3101      	adds	r1, #1
   13712:	d008      	beq.n	13726 <SystemInit+0xa2>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   13714:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   13718:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   1371a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   1371e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   13722:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   13724:	d1ef      	bne.n	13706 <SystemInit+0x82>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   13726:	4b29      	ldr	r3, [pc, #164]	; (137cc <SystemInit+0x148>)
   13728:	69da      	ldr	r2, [r3, #28]
   1372a:	07d1      	lsls	r1, r2, #31
   1372c:	d53a      	bpl.n	137a4 <SystemInit+0x120>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1372e:	4b28      	ldr	r3, [pc, #160]	; (137d0 <SystemInit+0x14c>)
   13730:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13734:	2a01      	cmp	r2, #1
   13736:	d1fb      	bne.n	13730 <SystemInit+0xac>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
   13738:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1373c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13740:	2a01      	cmp	r2, #1
   13742:	d1fb      	bne.n	1373c <SystemInit+0xb8>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   13744:	4b21      	ldr	r3, [pc, #132]	; (137cc <SystemInit+0x148>)
   13746:	69da      	ldr	r2, [r3, #28]
   13748:	07d2      	lsls	r2, r2, #31
   1374a:	d508      	bpl.n	1375e <SystemInit+0xda>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
   1374c:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1374e:	4920      	ldr	r1, [pc, #128]	; (137d0 <SystemInit+0x14c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
   13750:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
   13754:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13756:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
   1375a:	2a01      	cmp	r2, #1
   1375c:	d1fb      	bne.n	13756 <SystemInit+0xd2>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   1375e:	6a1a      	ldr	r2, [r3, #32]
   13760:	3201      	adds	r2, #1
   13762:	d10a      	bne.n	1377a <SystemInit+0xf6>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
   13764:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
   13766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   1376a:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
   1376e:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13770:	4a17      	ldr	r2, [pc, #92]	; (137d0 <SystemInit+0x14c>)
   13772:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   13776:	2b01      	cmp	r3, #1
   13778:	d1fb      	bne.n	13772 <SystemInit+0xee>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
   1377a:	2200      	movs	r2, #0
   1377c:	4b14      	ldr	r3, [pc, #80]	; (137d0 <SystemInit+0x14c>)
   1377e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13782:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13786:	2a01      	cmp	r2, #1
   13788:	d1fb      	bne.n	13782 <SystemInit+0xfe>
  __ASM volatile ("dsb 0xF":::"memory");
   1378a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1378e:	490c      	ldr	r1, [pc, #48]	; (137c0 <SystemInit+0x13c>)
   13790:	4b10      	ldr	r3, [pc, #64]	; (137d4 <SystemInit+0x150>)
   13792:	68ca      	ldr	r2, [r1, #12]
   13794:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13798:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1379a:	60cb      	str	r3, [r1, #12]
   1379c:	f3bf 8f4f 	dsb	sy
    __NOP();
   137a0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   137a2:	e7fd      	b.n	137a0 <SystemInit+0x11c>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   137a4:	6a1b      	ldr	r3, [r3, #32]
   137a6:	3301      	adds	r3, #1
   137a8:	d0c1      	beq.n	1372e <SystemInit+0xaa>
        SCB->NSACR |= (3UL << 10);
   137aa:	4a05      	ldr	r2, [pc, #20]	; (137c0 <SystemInit+0x13c>)
   137ac:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   137b0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   137b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
   137b8:	4b07      	ldr	r3, [pc, #28]	; (137d8 <SystemInit+0x154>)
   137ba:	4a08      	ldr	r2, [pc, #32]	; (137dc <SystemInit+0x158>)
   137bc:	601a      	str	r2, [r3, #0]
}
   137be:	bd08      	pop	{r3, pc}
   137c0:	e000ed00 	.word	0xe000ed00
   137c4:	50004000 	.word	0x50004000
   137c8:	5003a000 	.word	0x5003a000
   137cc:	00ff8000 	.word	0x00ff8000
   137d0:	50039000 	.word	0x50039000
   137d4:	05fa0004 	.word	0x05fa0004
   137d8:	20000054 	.word	0x20000054
   137dc:	03d09000 	.word	0x03d09000

000137e0 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   137e0:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   137e2:	4604      	mov	r4, r0
   137e4:	b940      	cbnz	r0, 137f8 <nrfx_clock_init+0x18>
   137e6:	4909      	ldr	r1, [pc, #36]	; (1380c <nrfx_clock_init+0x2c>)
   137e8:	4809      	ldr	r0, [pc, #36]	; (13810 <nrfx_clock_init+0x30>)
   137ea:	22b5      	movs	r2, #181	; 0xb5
   137ec:	f004 fe49 	bl	18482 <printk>
   137f0:	21b5      	movs	r1, #181	; 0xb5
   137f2:	4806      	ldr	r0, [pc, #24]	; (1380c <nrfx_clock_init+0x2c>)
   137f4:	f004 ff0e 	bl	18614 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   137f8:	4b06      	ldr	r3, [pc, #24]	; (13814 <nrfx_clock_init+0x34>)
   137fa:	791a      	ldrb	r2, [r3, #4]
   137fc:	b922      	cbnz	r2, 13808 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   137fe:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   13800:	4805      	ldr	r0, [pc, #20]	; (13818 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   13802:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   13804:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   13806:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   13808:	4804      	ldr	r0, [pc, #16]	; (1381c <nrfx_clock_init+0x3c>)
    return err_code;
   1380a:	e7fc      	b.n	13806 <nrfx_clock_init+0x26>
   1380c:	00019e7c 	.word	0x00019e7c
   13810:	00019196 	.word	0x00019196
   13814:	200009c8 	.word	0x200009c8
   13818:	0bad0000 	.word	0x0bad0000
   1381c:	0bad000c 	.word	0x0bad000c

00013820 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   13820:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   13822:	4b0b      	ldr	r3, [pc, #44]	; (13850 <nrfx_clock_enable+0x30>)
   13824:	791b      	ldrb	r3, [r3, #4]
   13826:	b943      	cbnz	r3, 1383a <nrfx_clock_enable+0x1a>
   13828:	490a      	ldr	r1, [pc, #40]	; (13854 <nrfx_clock_enable+0x34>)
   1382a:	480b      	ldr	r0, [pc, #44]	; (13858 <nrfx_clock_enable+0x38>)
   1382c:	22ce      	movs	r2, #206	; 0xce
   1382e:	f004 fe28 	bl	18482 <printk>
   13832:	21ce      	movs	r1, #206	; 0xce
   13834:	4807      	ldr	r0, [pc, #28]	; (13854 <nrfx_clock_enable+0x34>)
   13836:	f004 feed 	bl	18614 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1383a:	2005      	movs	r0, #5
   1383c:	f7fe fda0 	bl	12380 <arch_irq_is_enabled>
   13840:	b920      	cbnz	r0, 1384c <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   13842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   13846:	2005      	movs	r0, #5
   13848:	f7fe bd8c 	b.w	12364 <arch_irq_enable>
   1384c:	bd08      	pop	{r3, pc}
   1384e:	bf00      	nop
   13850:	200009c8 	.word	0x200009c8
   13854:	00019e7c 	.word	0x00019e7c
   13858:	00019196 	.word	0x00019196

0001385c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1385c:	4b25      	ldr	r3, [pc, #148]	; (138f4 <nrfx_clock_start+0x98>)
{
   1385e:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   13860:	791b      	ldrb	r3, [r3, #4]
{
   13862:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   13864:	b953      	cbnz	r3, 1387c <nrfx_clock_start+0x20>
   13866:	4924      	ldr	r1, [pc, #144]	; (138f8 <nrfx_clock_start+0x9c>)
   13868:	4824      	ldr	r0, [pc, #144]	; (138fc <nrfx_clock_start+0xa0>)
   1386a:	f44f 7285 	mov.w	r2, #266	; 0x10a
   1386e:	f004 fe08 	bl	18482 <printk>
   13872:	f44f 7185 	mov.w	r1, #266	; 0x10a
   13876:	4820      	ldr	r0, [pc, #128]	; (138f8 <nrfx_clock_start+0x9c>)
   13878:	f004 fecc 	bl	18614 <assert_post_action>
    switch (domain)
   1387c:	b174      	cbz	r4, 1389c <nrfx_clock_start+0x40>
   1387e:	2c01      	cmp	r4, #1
   13880:	d02d      	beq.n	138de <nrfx_clock_start+0x82>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   13882:	491d      	ldr	r1, [pc, #116]	; (138f8 <nrfx_clock_start+0x9c>)
   13884:	481d      	ldr	r0, [pc, #116]	; (138fc <nrfx_clock_start+0xa0>)
   13886:	f44f 729e 	mov.w	r2, #316	; 0x13c
   1388a:	f004 fdfa 	bl	18482 <printk>
            break;
    }
}
   1388e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   13892:	f44f 719e 	mov.w	r1, #316	; 0x13c
   13896:	4818      	ldr	r0, [pc, #96]	; (138f8 <nrfx_clock_start+0x9c>)
   13898:	f004 bebc 	b.w	18614 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1389c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   138a0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   138a4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   138a8:	03c9      	lsls	r1, r1, #15
   138aa:	d512      	bpl.n	138d2 <nrfx_clock_start+0x76>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   138ac:	f003 0303 	and.w	r3, r3, #3
   138b0:	2b02      	cmp	r3, #2
   138b2:	d10e      	bne.n	138d2 <nrfx_clock_start+0x76>
    p_reg->LFCLKSRC = (uint32_t)(source);
   138b4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138b8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   138bc:	2200      	movs	r2, #0
   138be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   138c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   138c6:	2202      	movs	r2, #2
   138c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   138cc:	2201      	movs	r2, #1
   138ce:	609a      	str	r2, [r3, #8]
}
   138d0:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   138d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   138d6:	2201      	movs	r2, #1
   138d8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   138dc:	e7ec      	b.n	138b8 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138de:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   138e2:	2200      	movs	r2, #0
   138e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   138e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   138ec:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   138f0:	601c      	str	r4, [r3, #0]
}
   138f2:	e7ed      	b.n	138d0 <nrfx_clock_start+0x74>
   138f4:	200009c8 	.word	0x200009c8
   138f8:	00019e7c 	.word	0x00019e7c
   138fc:	00019196 	.word	0x00019196

00013900 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   13900:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   13902:	4b28      	ldr	r3, [pc, #160]	; (139a4 <nrfx_clock_stop+0xa4>)
{
   13904:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   13906:	791b      	ldrb	r3, [r3, #4]
   13908:	b953      	cbnz	r3, 13920 <nrfx_clock_stop+0x20>
   1390a:	4927      	ldr	r1, [pc, #156]	; (139a8 <nrfx_clock_stop+0xa8>)
   1390c:	4827      	ldr	r0, [pc, #156]	; (139ac <nrfx_clock_stop+0xac>)
   1390e:	f240 1243 	movw	r2, #323	; 0x143
   13912:	f004 fdb6 	bl	18482 <printk>
   13916:	f240 1143 	movw	r1, #323	; 0x143
   1391a:	4823      	ldr	r0, [pc, #140]	; (139a8 <nrfx_clock_stop+0xa8>)
   1391c:	f004 fe7a 	bl	18614 <assert_post_action>
    switch (domain)
   13920:	b174      	cbz	r4, 13940 <nrfx_clock_stop+0x40>
   13922:	2c01      	cmp	r4, #1
   13924:	d023      	beq.n	1396e <nrfx_clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   13926:	4920      	ldr	r1, [pc, #128]	; (139a8 <nrfx_clock_stop+0xa8>)
   13928:	4820      	ldr	r0, [pc, #128]	; (139ac <nrfx_clock_stop+0xac>)
   1392a:	f240 125f 	movw	r2, #351	; 0x15f
   1392e:	f004 fda8 	bl	18482 <printk>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   13932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            NRFX_ASSERT(0);
   13936:	f240 115f 	movw	r1, #351	; 0x15f
   1393a:	481b      	ldr	r0, [pc, #108]	; (139a8 <nrfx_clock_stop+0xa8>)
   1393c:	f004 be6a 	b.w	18614 <assert_post_action>
    p_reg->INTENCLR = mask;
   13940:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
   13944:	2302      	movs	r3, #2
   13946:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1394a:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
   1394e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13952:	2301      	movs	r3, #1
   13954:	f242 7410 	movw	r4, #10000	; 0x2710
   13958:	60eb      	str	r3, [r5, #12]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1395a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
   1395e:	03db      	lsls	r3, r3, #15
   13960:	d51f      	bpl.n	139a2 <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   13962:	2001      	movs	r0, #1
   13964:	f005 f814 	bl	18990 <nrfx_busy_wait>
   13968:	3c01      	subs	r4, #1
   1396a:	d1f6      	bne.n	1395a <nrfx_clock_stop+0x5a>
   1396c:	e019      	b.n	139a2 <nrfx_clock_stop+0xa2>
    p_reg->INTENCLR = mask;
   1396e:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13972:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   13974:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13978:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1397c:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13980:	606c      	str	r4, [r5, #4]
   13982:	f242 7410 	movw	r4, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13986:	f8d5 340c 	ldr.w	r3, [r5, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1398a:	f8d5 240c 	ldr.w	r2, [r5, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1398e:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   13992:	03d2      	lsls	r2, r2, #15
   13994:	d505      	bpl.n	139a2 <nrfx_clock_stop+0xa2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   13996:	b123      	cbz	r3, 139a2 <nrfx_clock_stop+0xa2>
   13998:	2001      	movs	r0, #1
   1399a:	f004 fff9 	bl	18990 <nrfx_busy_wait>
   1399e:	3c01      	subs	r4, #1
   139a0:	d1f1      	bne.n	13986 <nrfx_clock_stop+0x86>
}
   139a2:	bd38      	pop	{r3, r4, r5, pc}
   139a4:	200009c8 	.word	0x200009c8
   139a8:	00019e7c 	.word	0x00019e7c
   139ac:	00019196 	.word	0x00019196

000139b0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   139b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   139b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   139b8:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   139ba:	b152      	cbz	r2, 139d2 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   139bc:	2000      	movs	r0, #0
   139be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   139c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   139c6:	2201      	movs	r2, #1
   139c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   139cc:	4b11      	ldr	r3, [pc, #68]	; (13a14 <nrfx_power_clock_irq_handler+0x64>)
   139ce:	681b      	ldr	r3, [r3, #0]
   139d0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   139d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   139d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   139da:	b18a      	cbz	r2, 13a00 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   139dc:	2200      	movs	r2, #0
   139de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   139e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   139e6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   139ea:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   139ee:	f002 0203 	and.w	r2, r2, #3
   139f2:	2a01      	cmp	r2, #1
   139f4:	f04f 0102 	mov.w	r1, #2
   139f8:	d103      	bne.n	13a02 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   139fa:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   139fe:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   13a00:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   13a02:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   13a06:	4b03      	ldr	r3, [pc, #12]	; (13a14 <nrfx_power_clock_irq_handler+0x64>)
   13a08:	2001      	movs	r0, #1
}
   13a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   13a0e:	681b      	ldr	r3, [r3, #0]
   13a10:	4718      	bx	r3
   13a12:	bf00      	nop
   13a14:	200009c8 	.word	0x200009c8

00013a18 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   13a18:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   13a1a:	f04f 0320 	mov.w	r3, #32
   13a1e:	f3ef 8611 	mrs	r6, BASEPRI
   13a22:	f383 8811 	msr	BASEPRI, r3
   13a26:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   13a2a:	490e      	ldr	r1, [pc, #56]	; (13a64 <nrfx_dppi_channel_alloc+0x4c>)
   13a2c:	680c      	ldr	r4, [r1, #0]
   13a2e:	43e3      	mvns	r3, r4
   13a30:	b29b      	uxth	r3, r3
    uint8_t channel = 0;

    if (!remaining_channels)
   13a32:	b1a3      	cbz	r3, 13a5e <nrfx_dppi_channel_alloc+0x46>
   13a34:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   13a36:	b2d5      	uxtb	r5, r2
   13a38:	fa23 fc05 	lsr.w	ip, r3, r5
   13a3c:	f01c 0f01 	tst.w	ip, #1
   13a40:	4617      	mov	r7, r2
   13a42:	f102 0201 	add.w	r2, r2, #1
   13a46:	d0f6      	beq.n	13a36 <nrfx_dppi_channel_alloc+0x1e>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   13a48:	2301      	movs	r3, #1
   13a4a:	40ab      	lsls	r3, r5
   13a4c:	4323      	orrs	r3, r4
        *p_channel = channel;
   13a4e:	7007      	strb	r7, [r0, #0]

        err_code = NRFX_SUCCESS;
   13a50:	4805      	ldr	r0, [pc, #20]	; (13a68 <nrfx_dppi_channel_alloc+0x50>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
   13a52:	600b      	str	r3, [r1, #0]
	__asm__ volatile(
   13a54:	f386 8811 	msr	BASEPRI, r6
   13a58:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
   13a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
   13a5e:	4803      	ldr	r0, [pc, #12]	; (13a6c <nrfx_dppi_channel_alloc+0x54>)
   13a60:	e7f8      	b.n	13a54 <nrfx_dppi_channel_alloc+0x3c>
   13a62:	bf00      	nop
   13a64:	200009d0 	.word	0x200009d0
   13a68:	0bad0000 	.word	0x0bad0000
   13a6c:	0bad0002 	.word	0x0bad0002

00013a70 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13a70:	4b0e      	ldr	r3, [pc, #56]	; (13aac <z_sys_init_run_level+0x3c>)
{
   13a72:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13a74:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13a78:	3001      	adds	r0, #1
   13a7a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   13a7e:	42a6      	cmp	r6, r4
   13a80:	d800      	bhi.n	13a84 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   13a82:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   13a84:	e9d4 3500 	ldrd	r3, r5, [r4]
   13a88:	4628      	mov	r0, r5
   13a8a:	4798      	blx	r3
		if (dev != NULL) {
   13a8c:	b165      	cbz	r5, 13aa8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   13a8e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   13a90:	b130      	cbz	r0, 13aa0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   13a92:	2800      	cmp	r0, #0
   13a94:	bfb8      	it	lt
   13a96:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   13a98:	28ff      	cmp	r0, #255	; 0xff
   13a9a:	bfa8      	it	ge
   13a9c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   13a9e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   13aa0:	785a      	ldrb	r2, [r3, #1]
   13aa2:	f042 0201 	orr.w	r2, r2, #1
   13aa6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   13aa8:	3408      	adds	r4, #8
   13aaa:	e7e8      	b.n	13a7e <z_sys_init_run_level+0xe>
   13aac:	00018fc0 	.word	0x00018fc0

00013ab0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   13ab0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   13ab2:	4605      	mov	r5, r0
   13ab4:	b910      	cbnz	r0, 13abc <z_impl_device_get_binding+0xc>
		return NULL;
   13ab6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   13ab8:	4620      	mov	r0, r4
   13aba:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   13abc:	7803      	ldrb	r3, [r0, #0]
   13abe:	2b00      	cmp	r3, #0
   13ac0:	d0f9      	beq.n	13ab6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   13ac2:	4c0e      	ldr	r4, [pc, #56]	; (13afc <z_impl_device_get_binding+0x4c>)
   13ac4:	4e0e      	ldr	r6, [pc, #56]	; (13b00 <z_impl_device_get_binding+0x50>)
   13ac6:	42b4      	cmp	r4, r6
   13ac8:	d108      	bne.n	13adc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   13aca:	4c0c      	ldr	r4, [pc, #48]	; (13afc <z_impl_device_get_binding+0x4c>)
   13acc:	42b4      	cmp	r4, r6
   13ace:	d0f2      	beq.n	13ab6 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   13ad0:	4620      	mov	r0, r4
   13ad2:	f004 ff60 	bl	18996 <z_device_ready>
   13ad6:	b950      	cbnz	r0, 13aee <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   13ad8:	3418      	adds	r4, #24
   13ada:	e7f7      	b.n	13acc <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   13adc:	4620      	mov	r0, r4
   13ade:	f004 ff5a 	bl	18996 <z_device_ready>
   13ae2:	b110      	cbz	r0, 13aea <z_impl_device_get_binding+0x3a>
   13ae4:	6823      	ldr	r3, [r4, #0]
   13ae6:	42ab      	cmp	r3, r5
   13ae8:	d0e6      	beq.n	13ab8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   13aea:	3418      	adds	r4, #24
   13aec:	e7eb      	b.n	13ac6 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   13aee:	4628      	mov	r0, r5
   13af0:	6821      	ldr	r1, [r4, #0]
   13af2:	f004 fe72 	bl	187da <strcmp>
   13af6:	2800      	cmp	r0, #0
   13af8:	d1ee      	bne.n	13ad8 <z_impl_device_get_binding+0x28>
   13afa:	e7dd      	b.n	13ab8 <z_impl_device_get_binding+0x8>
   13afc:	00018ac8 	.word	0x00018ac8
   13b00:	00018b40 	.word	0x00018b40

00013b04 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13b06:	4604      	mov	r4, r0
   13b08:	460e      	mov	r6, r1
	__asm__ volatile(
   13b0a:	f04f 0320 	mov.w	r3, #32
   13b0e:	f3ef 8711 	mrs	r7, BASEPRI
   13b12:	f383 8811 	msr	BASEPRI, r3
   13b16:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   13b1a:	f001 fbbf 	bl	1529c <z_impl_k_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   13b1e:	2200      	movs	r2, #0
   13b20:	2c04      	cmp	r4, #4
   13b22:	bf98      	it	ls
   13b24:	4b1d      	ldrls	r3, [pc, #116]	; (13b9c <z_fatal_error+0x98>)
   13b26:	4605      	mov	r5, r0
	switch (reason) {
   13b28:	bf94      	ite	ls
   13b2a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   13b2e:	4b1c      	ldrhi	r3, [pc, #112]	; (13ba0 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   13b30:	9200      	str	r2, [sp, #0]
   13b32:	2145      	movs	r1, #69	; 0x45
   13b34:	4622      	mov	r2, r4
   13b36:	481b      	ldr	r0, [pc, #108]	; (13ba4 <z_fatal_error+0xa0>)
   13b38:	f004 fd7f 	bl	1863a <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   13b3c:	b13e      	cbz	r6, 13b4e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   13b3e:	69f3      	ldr	r3, [r6, #28]
   13b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13b44:	b11b      	cbz	r3, 13b4e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   13b46:	2145      	movs	r1, #69	; 0x45
   13b48:	4817      	ldr	r0, [pc, #92]	; (13ba8 <z_fatal_error+0xa4>)
   13b4a:	f004 fd76 	bl	1863a <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   13b4e:	b135      	cbz	r5, 13b5e <z_fatal_error+0x5a>
   13b50:	4628      	mov	r0, r5
   13b52:	f004 ff4c 	bl	189ee <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   13b56:	4603      	mov	r3, r0
   13b58:	b108      	cbz	r0, 13b5e <z_fatal_error+0x5a>
   13b5a:	7802      	ldrb	r2, [r0, #0]
   13b5c:	b902      	cbnz	r2, 13b60 <z_fatal_error+0x5c>
		thread_name = "unknown";
   13b5e:	4b13      	ldr	r3, [pc, #76]	; (13bac <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   13b60:	462a      	mov	r2, r5
   13b62:	2145      	movs	r1, #69	; 0x45
   13b64:	4812      	ldr	r0, [pc, #72]	; (13bb0 <z_fatal_error+0xac>)
   13b66:	f004 fd68 	bl	1863a <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   13b6a:	4631      	mov	r1, r6
   13b6c:	4620      	mov	r0, r4
   13b6e:	f7ff fd33 	bl	135d8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   13b72:	2c04      	cmp	r4, #4
   13b74:	d108      	bne.n	13b88 <z_fatal_error+0x84>
   13b76:	490f      	ldr	r1, [pc, #60]	; (13bb4 <z_fatal_error+0xb0>)
   13b78:	480f      	ldr	r0, [pc, #60]	; (13bb8 <z_fatal_error+0xb4>)
   13b7a:	228f      	movs	r2, #143	; 0x8f
   13b7c:	f004 fc81 	bl	18482 <printk>
   13b80:	218f      	movs	r1, #143	; 0x8f
   13b82:	480c      	ldr	r0, [pc, #48]	; (13bb4 <z_fatal_error+0xb0>)
   13b84:	f004 fd46 	bl	18614 <assert_post_action>
	__asm__ volatile(
   13b88:	f387 8811 	msr	BASEPRI, r7
   13b8c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   13b90:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   13b92:	b003      	add	sp, #12
   13b94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   13b98:	f7fe bfe0 	b.w	12b5c <z_impl_k_thread_abort>
   13b9c:	00018fd8 	.word	0x00018fd8
   13ba0:	00019eb9 	.word	0x00019eb9
   13ba4:	00019ecf 	.word	0x00019ecf
   13ba8:	00019efc 	.word	0x00019efc
   13bac:	00019ec7 	.word	0x00019ec7
   13bb0:	00019f22 	.word	0x00019f22
   13bb4:	00019f3f 	.word	0x00019f3f
   13bb8:	00019196 	.word	0x00019196

00013bbc <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   13bbc:	4802      	ldr	r0, [pc, #8]	; (13bc8 <z_bss_zero+0xc>)
   13bbe:	4a03      	ldr	r2, [pc, #12]	; (13bcc <z_bss_zero+0x10>)
   13bc0:	2100      	movs	r1, #0
   13bc2:	1a12      	subs	r2, r2, r0
   13bc4:	f004 be47 	b.w	18856 <memset>
   13bc8:	20000120 	.word	0x20000120
   13bcc:	200014e4 	.word	0x200014e4

00013bd0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   13bd0:	2201      	movs	r2, #1
{
   13bd2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   13bd4:	4b09      	ldr	r3, [pc, #36]	; (13bfc <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13bd6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   13bd8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13bda:	f7ff ff49 	bl	13a70 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   13bde:	f001 fe9b 	bl	15918 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   13be2:	2003      	movs	r0, #3
   13be4:	f7ff ff44 	bl	13a70 <z_sys_init_run_level>

	z_init_static_threads();
   13be8:	f000 f9d4 	bl	13f94 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   13bec:	f004 fc2f 	bl	1844e <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   13bf0:	4a03      	ldr	r2, [pc, #12]	; (13c00 <bg_thread_main+0x30>)
   13bf2:	7b13      	ldrb	r3, [r2, #12]
   13bf4:	f023 0301 	bic.w	r3, r3, #1
   13bf8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   13bfa:	bd08      	pop	{r3, pc}
   13bfc:	20001325 	.word	0x20001325
   13c00:	200001a0 	.word	0x200001a0

00013c04 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   13c04:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   13c08:	4b3f      	ldr	r3, [pc, #252]	; (13d08 <z_cstart+0x104>)
   13c0a:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
   13c0c:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13c10:	f387 8808 	msr	MSP, r7
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   13c14:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13c18:	2400      	movs	r4, #0
   13c1a:	23e0      	movs	r3, #224	; 0xe0
   13c1c:	4d3b      	ldr	r5, [pc, #236]	; (13d0c <z_cstart+0x108>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   13c1e:	f04f 0b01 	mov.w	fp, #1
   13c22:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   13c26:	77ec      	strb	r4, [r5, #31]
   13c28:	762c      	strb	r4, [r5, #24]
   13c2a:	766c      	strb	r4, [r5, #25]
   13c2c:	76ac      	strb	r4, [r5, #26]
   13c2e:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13c30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   13c32:	4e37      	ldr	r6, [pc, #220]	; (13d10 <z_cstart+0x10c>)
   13c34:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   13c38:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   13c3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   13c3c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 13d14 <z_cstart+0x110>
   13c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13c44:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   13c46:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
   13c48:	68eb      	ldr	r3, [r5, #12]
	z_setup_new_thread(thread, stack,
   13c4a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 13d18 <z_cstart+0x114>
   13c4e:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
   13c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   13c54:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
   13c58:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   13c5a:	f7fe ff0f 	bl	12a7c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   13c5e:	f7fe fbf3 	bl	12448 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   13c62:	f04f 33ff 	mov.w	r3, #4294967295
   13c66:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   13c68:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   13c6a:	f7ff f9b9 	bl	12fe0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   13c6e:	f7ff f801 	bl	12c74 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   13c72:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   13c76:	4d29      	ldr	r5, [pc, #164]	; (13d1c <z_cstart+0x118>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   13c78:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   13c7c:	ab06      	add	r3, sp, #24
   13c7e:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   13c80:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   13c84:	f004 fe86 	bl	18994 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   13c88:	4620      	mov	r0, r4
   13c8a:	f7ff fef1 	bl	13a70 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   13c8e:	2001      	movs	r0, #1
   13c90:	f7ff feee 	bl	13a70 <z_sys_init_run_level>
	z_sched_init();
   13c94:	f001 f9b8 	bl	15008 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   13c98:	4b21      	ldr	r3, [pc, #132]	; (13d20 <z_cstart+0x11c>)
	_kernel.ready_q.cache = &z_main_thread;
   13c9a:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   13c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   13ca0:	4920      	ldr	r1, [pc, #128]	; (13d24 <z_cstart+0x120>)
   13ca2:	9305      	str	r3, [sp, #20]
   13ca4:	4630      	mov	r0, r6
   13ca6:	4653      	mov	r3, sl
   13ca8:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   13cac:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13cb0:	9400      	str	r4, [sp, #0]
   13cb2:	f000 f91b 	bl	13eec <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13cb6:	7b73      	ldrb	r3, [r6, #13]
   13cb8:	4681      	mov	r9, r0
   13cba:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   13cbe:	4630      	mov	r0, r6
   13cc0:	7373      	strb	r3, [r6, #13]
   13cc2:	f000 fd21 	bl	14708 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   13cc6:	230f      	movs	r3, #15
   13cc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   13ccc:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13cd0:	4915      	ldr	r1, [pc, #84]	; (13d28 <z_cstart+0x124>)
   13cd2:	4b16      	ldr	r3, [pc, #88]	; (13d2c <z_cstart+0x128>)
   13cd4:	4640      	mov	r0, r8
   13cd6:	e9cd b404 	strd	fp, r4, [sp, #16]
   13cda:	e9cd 5400 	strd	r5, r4, [sp]
   13cde:	f000 f905 	bl	13eec <z_setup_new_thread>
   13ce2:	f898 300d 	ldrb.w	r3, [r8, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   13ce6:	4652      	mov	r2, sl
   13ce8:	f023 0304 	bic.w	r3, r3, #4
   13cec:	f888 300d 	strb.w	r3, [r8, #13]
   13cf0:	4649      	mov	r1, r9
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   13cf2:	f105 0318 	add.w	r3, r5, #24
   13cf6:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   13cf8:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   13cfc:	f8c5 800c 	str.w	r8, [r5, #12]
		_kernel.cpus[i].id = i;
   13d00:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   13d02:	606f      	str	r7, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   13d04:	f7fe fb8c 	bl	12420 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   13d08:	20002628 	.word	0x20002628
   13d0c:	e000ed00 	.word	0xe000ed00
   13d10:	200001a0 	.word	0x200001a0
   13d14:	00013bd1 	.word	0x00013bd1
   13d18:	20000120 	.word	0x20000120
   13d1c:	200009d4 	.word	0x200009d4
   13d20:	00019fab 	.word	0x00019fab
   13d24:	20001628 	.word	0x20001628
   13d28:	200014e8 	.word	0x200014e8
   13d2c:	000140d5 	.word	0x000140d5

00013d30 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   13d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   13d32:	4c14      	ldr	r4, [pc, #80]	; (13d84 <init_mem_slab_module+0x54>)
   13d34:	4d14      	ldr	r5, [pc, #80]	; (13d88 <init_mem_slab_module+0x58>)
   13d36:	4e15      	ldr	r6, [pc, #84]	; (13d8c <init_mem_slab_module+0x5c>)
   13d38:	42ac      	cmp	r4, r5
   13d3a:	d908      	bls.n	13d4e <init_mem_slab_module+0x1e>
   13d3c:	4631      	mov	r1, r6
   13d3e:	4814      	ldr	r0, [pc, #80]	; (13d90 <init_mem_slab_module+0x60>)
   13d40:	223c      	movs	r2, #60	; 0x3c
   13d42:	f004 fb9e 	bl	18482 <printk>
   13d46:	213c      	movs	r1, #60	; 0x3c
   13d48:	4630      	mov	r0, r6
   13d4a:	f004 fc63 	bl	18614 <assert_post_action>
   13d4e:	42ac      	cmp	r4, r5
   13d50:	d301      	bcc.n	13d56 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   13d52:	2000      	movs	r0, #0
	return rc;
}
   13d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   13d56:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   13d5a:	ea42 0301 	orr.w	r3, r2, r1
   13d5e:	f013 0303 	ands.w	r3, r3, #3
   13d62:	d10b      	bne.n	13d7c <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   13d64:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   13d66:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   13d68:	4283      	cmp	r3, r0
   13d6a:	d101      	bne.n	13d70 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   13d6c:	3420      	adds	r4, #32
   13d6e:	e7e3      	b.n	13d38 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   13d70:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   13d72:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   13d74:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   13d76:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   13d78:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   13d7a:	e7f5      	b.n	13d68 <init_mem_slab_module+0x38>
	return rc;
   13d7c:	f06f 0015 	mvn.w	r0, #21
   13d80:	e7e8      	b.n	13d54 <init_mem_slab_module+0x24>
   13d82:	bf00      	nop
   13d84:	200000d0 	.word	0x200000d0
   13d88:	200000d0 	.word	0x200000d0
   13d8c:	00019fb3 	.word	0x00019fb3
   13d90:	00019196 	.word	0x00019196

00013d94 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   13d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13d98:	4604      	mov	r4, r0
   13d9a:	460d      	mov	r5, r1
   13d9c:	4690      	mov	r8, r2
   13d9e:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   13da0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   13da4:	f04f 0320 	mov.w	r3, #32
   13da8:	f3ef 8911 	mrs	r9, BASEPRI
   13dac:	f383 8811 	msr	BASEPRI, r3
   13db0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13db4:	4630      	mov	r0, r6
   13db6:	f000 f969 	bl	1408c <z_spin_lock_valid>
   13dba:	b940      	cbnz	r0, 13dce <k_mem_slab_alloc+0x3a>
   13dbc:	491f      	ldr	r1, [pc, #124]	; (13e3c <k_mem_slab_alloc+0xa8>)
   13dbe:	4820      	ldr	r0, [pc, #128]	; (13e40 <k_mem_slab_alloc+0xac>)
   13dc0:	2281      	movs	r2, #129	; 0x81
   13dc2:	f004 fb5e 	bl	18482 <printk>
   13dc6:	2181      	movs	r1, #129	; 0x81
   13dc8:	481c      	ldr	r0, [pc, #112]	; (13e3c <k_mem_slab_alloc+0xa8>)
   13dca:	f004 fc23 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   13dce:	4630      	mov	r0, r6
   13dd0:	f000 f978 	bl	140c4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   13dd4:	69a3      	ldr	r3, [r4, #24]
   13dd6:	b1c3      	cbz	r3, 13e0a <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   13dd8:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   13dda:	681b      	ldr	r3, [r3, #0]
   13ddc:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   13dde:	69e3      	ldr	r3, [r4, #28]
   13de0:	3301      	adds	r3, #1
   13de2:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   13de4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13de6:	4630      	mov	r0, r6
   13de8:	f000 f95e 	bl	140a8 <z_spin_unlock_valid>
   13dec:	b940      	cbnz	r0, 13e00 <k_mem_slab_alloc+0x6c>
   13dee:	4913      	ldr	r1, [pc, #76]	; (13e3c <k_mem_slab_alloc+0xa8>)
   13df0:	4813      	ldr	r0, [pc, #76]	; (13e40 <k_mem_slab_alloc+0xac>)
   13df2:	22ac      	movs	r2, #172	; 0xac
   13df4:	f004 fb45 	bl	18482 <printk>
   13df8:	21ac      	movs	r1, #172	; 0xac
   13dfa:	4810      	ldr	r0, [pc, #64]	; (13e3c <k_mem_slab_alloc+0xa8>)
   13dfc:	f004 fc0a 	bl	18614 <assert_post_action>
	__asm__ volatile(
   13e00:	f389 8811 	msr	BASEPRI, r9
   13e04:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   13e08:	e013      	b.n	13e32 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   13e0a:	ea58 0207 	orrs.w	r2, r8, r7
   13e0e:	d103      	bne.n	13e18 <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
   13e10:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   13e14:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   13e16:	e7e6      	b.n	13de6 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   13e18:	4622      	mov	r2, r4
   13e1a:	4649      	mov	r1, r9
   13e1c:	4630      	mov	r0, r6
   13e1e:	e9cd 8700 	strd	r8, r7, [sp]
   13e22:	f000 fe93 	bl	14b4c <z_pend_curr>
		if (result == 0) {
   13e26:	4604      	mov	r4, r0
   13e28:	b918      	cbnz	r0, 13e32 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   13e2a:	4b06      	ldr	r3, [pc, #24]	; (13e44 <k_mem_slab_alloc+0xb0>)
   13e2c:	689b      	ldr	r3, [r3, #8]
   13e2e:	695b      	ldr	r3, [r3, #20]
   13e30:	602b      	str	r3, [r5, #0]
}
   13e32:	4620      	mov	r0, r4
   13e34:	b003      	add	sp, #12
   13e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13e3a:	bf00      	nop
   13e3c:	000191d0 	.word	0x000191d0
   13e40:	00019196 	.word	0x00019196
   13e44:	200009d4 	.word	0x200009d4

00013e48 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   13e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e4c:	4604      	mov	r4, r0
   13e4e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   13e50:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   13e54:	f04f 0320 	mov.w	r3, #32
   13e58:	f3ef 8711 	mrs	r7, BASEPRI
   13e5c:	f383 8811 	msr	BASEPRI, r3
   13e60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13e64:	4630      	mov	r0, r6
   13e66:	f000 f911 	bl	1408c <z_spin_lock_valid>
   13e6a:	b940      	cbnz	r0, 13e7e <k_mem_slab_free+0x36>
   13e6c:	491d      	ldr	r1, [pc, #116]	; (13ee4 <k_mem_slab_free+0x9c>)
   13e6e:	481e      	ldr	r0, [pc, #120]	; (13ee8 <k_mem_slab_free+0xa0>)
   13e70:	2281      	movs	r2, #129	; 0x81
   13e72:	f004 fb06 	bl	18482 <printk>
   13e76:	2181      	movs	r1, #129	; 0x81
   13e78:	481a      	ldr	r0, [pc, #104]	; (13ee4 <k_mem_slab_free+0x9c>)
   13e7a:	f004 fbcb 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   13e7e:	4630      	mov	r0, r6
   13e80:	f000 f920 	bl	140c4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   13e84:	f8d4 8018 	ldr.w	r8, [r4, #24]
   13e88:	f1b8 0f00 	cmp.w	r8, #0
   13e8c:	d10f      	bne.n	13eae <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   13e8e:	4620      	mov	r0, r4
   13e90:	f001 f87a 	bl	14f88 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   13e94:	b158      	cbz	r0, 13eae <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   13e96:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   13e98:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   13e9c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   13e9e:	f000 fc33 	bl	14708 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   13ea2:	4639      	mov	r1, r7
   13ea4:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   13ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   13eaa:	f000 bc63 	b.w	14774 <z_reschedule>
	**(char ***) mem = slab->free_list;
   13eae:	682b      	ldr	r3, [r5, #0]
   13eb0:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13eb2:	4630      	mov	r0, r6
   13eb4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   13eb6:	682b      	ldr	r3, [r5, #0]
   13eb8:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   13eba:	69e3      	ldr	r3, [r4, #28]
   13ebc:	3b01      	subs	r3, #1
   13ebe:	61e3      	str	r3, [r4, #28]
   13ec0:	f000 f8f2 	bl	140a8 <z_spin_unlock_valid>
   13ec4:	b940      	cbnz	r0, 13ed8 <k_mem_slab_free+0x90>
   13ec6:	4907      	ldr	r1, [pc, #28]	; (13ee4 <k_mem_slab_free+0x9c>)
   13ec8:	4807      	ldr	r0, [pc, #28]	; (13ee8 <k_mem_slab_free+0xa0>)
   13eca:	22ac      	movs	r2, #172	; 0xac
   13ecc:	f004 fad9 	bl	18482 <printk>
   13ed0:	21ac      	movs	r1, #172	; 0xac
   13ed2:	4804      	ldr	r0, [pc, #16]	; (13ee4 <k_mem_slab_free+0x9c>)
   13ed4:	f004 fb9e 	bl	18614 <assert_post_action>
	__asm__ volatile(
   13ed8:	f387 8811 	msr	BASEPRI, r7
   13edc:	f3bf 8f6f 	isb	sy
}
   13ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ee4:	000191d0 	.word	0x000191d0
   13ee8:	00019196 	.word	0x00019196

00013eec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   13eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13ef0:	b085      	sub	sp, #20
   13ef2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   13ef6:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   13ef8:	f1b9 0f0f 	cmp.w	r9, #15
{
   13efc:	460f      	mov	r7, r1
   13efe:	4615      	mov	r5, r2
   13f00:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   13f02:	d12e      	bne.n	13f62 <z_setup_new_thread+0x76>
   13f04:	4b1f      	ldr	r3, [pc, #124]	; (13f84 <z_setup_new_thread+0x98>)
   13f06:	4598      	cmp	r8, r3
   13f08:	d12f      	bne.n	13f6a <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   13f0a:	f104 0358 	add.w	r3, r4, #88	; 0x58
   13f0e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   13f12:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   13f14:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   13f16:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   13f18:	2304      	movs	r3, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13f1a:	1de8      	adds	r0, r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   13f1c:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13f20:	f020 0007 	bic.w	r0, r0, #7
	new_thread->stack_info.size = stack_buf_size;
   13f24:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   13f28:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   13f2c:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   13f2e:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   13f32:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   13f34:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13f36:	9302      	str	r3, [sp, #8]
   13f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	stack_ptr = (char *)stack + stack_obj_size;
   13f3a:	183d      	adds	r5, r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   13f3c:	9301      	str	r3, [sp, #4]
   13f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13f40:	462a      	mov	r2, r5
   13f42:	9300      	str	r3, [sp, #0]
   13f44:	4639      	mov	r1, r7
   13f46:	4643      	mov	r3, r8
   13f48:	4620      	mov	r0, r4
   13f4a:	f7fe fa4d 	bl	123e8 <arch_new_thread>
	if (!_current) {
   13f4e:	4b0e      	ldr	r3, [pc, #56]	; (13f88 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   13f50:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   13f52:	689b      	ldr	r3, [r3, #8]
   13f54:	b103      	cbz	r3, 13f58 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   13f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   13f58:	4628      	mov	r0, r5
   13f5a:	6723      	str	r3, [r4, #112]	; 0x70
   13f5c:	b005      	add	sp, #20
   13f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   13f62:	f109 0310 	add.w	r3, r9, #16
   13f66:	2b1e      	cmp	r3, #30
   13f68:	d9cf      	bls.n	13f0a <z_setup_new_thread+0x1e>
   13f6a:	f240 2205 	movw	r2, #517	; 0x205
   13f6e:	4907      	ldr	r1, [pc, #28]	; (13f8c <z_setup_new_thread+0xa0>)
   13f70:	4807      	ldr	r0, [pc, #28]	; (13f90 <z_setup_new_thread+0xa4>)
   13f72:	f004 fa86 	bl	18482 <printk>
   13f76:	f240 2105 	movw	r1, #517	; 0x205
   13f7a:	4804      	ldr	r0, [pc, #16]	; (13f8c <z_setup_new_thread+0xa0>)
   13f7c:	f004 fb4a 	bl	18614 <assert_post_action>
   13f80:	e7c3      	b.n	13f0a <z_setup_new_thread+0x1e>
   13f82:	bf00      	nop
   13f84:	000140d5 	.word	0x000140d5
   13f88:	200009d4 	.word	0x200009d4
   13f8c:	00019fd8 	.word	0x00019fd8
   13f90:	00019196 	.word	0x00019196

00013f94 <z_init_static_threads>:
{
   13f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f98:	4c37      	ldr	r4, [pc, #220]	; (14078 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   13f9a:	4d38      	ldr	r5, [pc, #224]	; (1407c <z_init_static_threads+0xe8>)
   13f9c:	4f38      	ldr	r7, [pc, #224]	; (14080 <z_init_static_threads+0xec>)
{
   13f9e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   13fa0:	42ac      	cmp	r4, r5
   13fa2:	4626      	mov	r6, r4
   13fa4:	d90a      	bls.n	13fbc <z_init_static_threads+0x28>
   13fa6:	4639      	mov	r1, r7
   13fa8:	4836      	ldr	r0, [pc, #216]	; (14084 <z_init_static_threads+0xf0>)
   13faa:	f240 22d5 	movw	r2, #725	; 0x2d5
   13fae:	f004 fa68 	bl	18482 <printk>
   13fb2:	f240 21d5 	movw	r1, #725	; 0x2d5
   13fb6:	4638      	mov	r0, r7
   13fb8:	f004 fb2c 	bl	18614 <assert_post_action>
   13fbc:	42ae      	cmp	r6, r5
   13fbe:	f104 0430 	add.w	r4, r4, #48	; 0x30
   13fc2:	d31b      	bcc.n	13ffc <z_init_static_threads+0x68>
	k_sched_lock();
   13fc4:	f000 fc4e 	bl	14864 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   13fc8:	4c2b      	ldr	r4, [pc, #172]	; (14078 <z_init_static_threads+0xe4>)
   13fca:	4e2d      	ldr	r6, [pc, #180]	; (14080 <z_init_static_threads+0xec>)
   13fcc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14084 <z_init_static_threads+0xf0>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   13fd0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 14088 <z_init_static_threads+0xf4>
   13fd4:	42ac      	cmp	r4, r5
   13fd6:	d90a      	bls.n	13fee <z_init_static_threads+0x5a>
   13fd8:	4631      	mov	r1, r6
   13fda:	4640      	mov	r0, r8
   13fdc:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   13fe0:	f004 fa4f 	bl	18482 <printk>
   13fe4:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   13fe8:	4630      	mov	r0, r6
   13fea:	f004 fb13 	bl	18614 <assert_post_action>
   13fee:	42ac      	cmp	r4, r5
   13ff0:	d320      	bcc.n	14034 <z_init_static_threads+0xa0>
}
   13ff2:	b007      	add	sp, #28
   13ff4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   13ff8:	f000 bc88 	b.w	1490c <k_sched_unlock>
		z_setup_new_thread(
   13ffc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14000:	9305      	str	r3, [sp, #20]
   14002:	f854 3c10 	ldr.w	r3, [r4, #-16]
   14006:	9304      	str	r3, [sp, #16]
   14008:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1400c:	9303      	str	r3, [sp, #12]
   1400e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   14012:	9302      	str	r3, [sp, #8]
   14014:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   14018:	9301      	str	r3, [sp, #4]
   1401a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1401e:	9300      	str	r3, [sp, #0]
   14020:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   14024:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   14028:	f7ff ff60 	bl	13eec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1402c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   14030:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   14032:	e7b5      	b.n	13fa0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   14034:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14036:	1c5a      	adds	r2, r3, #1
   14038:	d00f      	beq.n	1405a <z_init_static_threads+0xc6>
		} else {
			return (t * to_hz + off) / from_hz;
   1403a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1403e:	f240 30e7 	movw	r0, #999	; 0x3e7
   14042:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   14044:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14048:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1404c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   14050:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14052:	d104      	bne.n	1405e <z_init_static_threads+0xca>
	z_sched_start(thread);
   14054:	4638      	mov	r0, r7
   14056:	f000 fbc3 	bl	147e0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1405a:	3430      	adds	r4, #48	; 0x30
   1405c:	e7ba      	b.n	13fd4 <z_init_static_threads+0x40>
   1405e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14062:	2300      	movs	r3, #0
   14064:	f7fc f9ea 	bl	1043c <__aeabi_uldivmod>
   14068:	4602      	mov	r2, r0
   1406a:	460b      	mov	r3, r1
   1406c:	f107 0018 	add.w	r0, r7, #24
   14070:	4649      	mov	r1, r9
   14072:	f001 fa15 	bl	154a0 <z_add_timeout>
   14076:	e7f0      	b.n	1405a <z_init_static_threads+0xc6>
   14078:	200000d0 	.word	0x200000d0
   1407c:	200000d0 	.word	0x200000d0
   14080:	00019fd8 	.word	0x00019fd8
   14084:	00019196 	.word	0x00019196
   14088:	00014ef9 	.word	0x00014ef9

0001408c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1408c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1408e:	b138      	cbz	r0, 140a0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   14090:	4b04      	ldr	r3, [pc, #16]	; (140a4 <z_spin_lock_valid+0x18>)
   14092:	f000 0003 	and.w	r0, r0, #3
   14096:	7d1b      	ldrb	r3, [r3, #20]
   14098:	1ac0      	subs	r0, r0, r3
   1409a:	bf18      	it	ne
   1409c:	2001      	movne	r0, #1
   1409e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   140a0:	2001      	movs	r0, #1
}
   140a2:	4770      	bx	lr
   140a4:	200009d4 	.word	0x200009d4

000140a8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   140a8:	4a05      	ldr	r2, [pc, #20]	; (140c0 <z_spin_unlock_valid+0x18>)
{
   140aa:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   140ac:	7d11      	ldrb	r1, [r2, #20]
   140ae:	6892      	ldr	r2, [r2, #8]
   140b0:	430a      	orrs	r2, r1
   140b2:	6801      	ldr	r1, [r0, #0]
   140b4:	2000      	movs	r0, #0
   140b6:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   140b8:	bf04      	itt	eq
   140ba:	6018      	streq	r0, [r3, #0]
	return true;
   140bc:	2001      	moveq	r0, #1
}
   140be:	4770      	bx	lr
   140c0:	200009d4 	.word	0x200009d4

000140c4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   140c4:	4b02      	ldr	r3, [pc, #8]	; (140d0 <z_spin_lock_set_owner+0xc>)
   140c6:	7d1a      	ldrb	r2, [r3, #20]
   140c8:	689b      	ldr	r3, [r3, #8]
   140ca:	4313      	orrs	r3, r2
   140cc:	6003      	str	r3, [r0, #0]
}
   140ce:	4770      	bx	lr
   140d0:	200009d4 	.word	0x200009d4

000140d4 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   140d4:	4c10      	ldr	r4, [pc, #64]	; (14118 <idle+0x44>)
{
   140d6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   140d8:	68a3      	ldr	r3, [r4, #8]
   140da:	f993 300e 	ldrsb.w	r3, [r3, #14]
   140de:	2b00      	cmp	r3, #0
   140e0:	da08      	bge.n	140f4 <idle+0x20>
   140e2:	490e      	ldr	r1, [pc, #56]	; (1411c <idle+0x48>)
   140e4:	480e      	ldr	r0, [pc, #56]	; (14120 <idle+0x4c>)
   140e6:	2246      	movs	r2, #70	; 0x46
   140e8:	f004 f9cb 	bl	18482 <printk>
   140ec:	2146      	movs	r1, #70	; 0x46
   140ee:	480b      	ldr	r0, [pc, #44]	; (1411c <idle+0x48>)
   140f0:	f004 fa90 	bl	18614 <assert_post_action>
	__asm__ volatile(
   140f4:	f04f 0220 	mov.w	r2, #32
   140f8:	f3ef 8311 	mrs	r3, BASEPRI
   140fc:	f382 8811 	msr	BASEPRI, r2
   14100:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   14104:	f001 fab6 	bl	15674 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   14108:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1410a:	f7fd fa51 	bl	115b0 <pm_system_suspend>
   1410e:	2800      	cmp	r0, #0
   14110:	d1f0      	bne.n	140f4 <idle+0x20>
	arch_cpu_idle();
   14112:	f7fe f99f 	bl	12454 <arch_cpu_idle>
}
   14116:	e7ed      	b.n	140f4 <idle+0x20>
   14118:	200009d4 	.word	0x200009d4
   1411c:	00019ffb 	.word	0x00019ffb
   14120:	00019196 	.word	0x00019196

00014124 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   14124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14128:	4604      	mov	r4, r0
   1412a:	4617      	mov	r7, r2
   1412c:	461e      	mov	r6, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1412e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   14132:	b143      	cbz	r3, 14146 <z_impl_k_mutex_lock+0x22>
   14134:	495f      	ldr	r1, [pc, #380]	; (142b4 <z_impl_k_mutex_lock+0x190>)
   14136:	4860      	ldr	r0, [pc, #384]	; (142b8 <z_impl_k_mutex_lock+0x194>)
   14138:	2265      	movs	r2, #101	; 0x65
   1413a:	f004 f9a2 	bl	18482 <printk>
   1413e:	2165      	movs	r1, #101	; 0x65
   14140:	485c      	ldr	r0, [pc, #368]	; (142b4 <z_impl_k_mutex_lock+0x190>)
   14142:	f004 fa67 	bl	18614 <assert_post_action>
   14146:	f04f 0320 	mov.w	r3, #32
   1414a:	f3ef 8811 	mrs	r8, BASEPRI
   1414e:	f383 8811 	msr	BASEPRI, r3
   14152:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14156:	4859      	ldr	r0, [pc, #356]	; (142bc <z_impl_k_mutex_lock+0x198>)
   14158:	f7ff ff98 	bl	1408c <z_spin_lock_valid>
   1415c:	b940      	cbnz	r0, 14170 <z_impl_k_mutex_lock+0x4c>
   1415e:	4958      	ldr	r1, [pc, #352]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   14160:	4855      	ldr	r0, [pc, #340]	; (142b8 <z_impl_k_mutex_lock+0x194>)
   14162:	2281      	movs	r2, #129	; 0x81
   14164:	f004 f98d 	bl	18482 <printk>
   14168:	2181      	movs	r1, #129	; 0x81
   1416a:	4855      	ldr	r0, [pc, #340]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   1416c:	f004 fa52 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14170:	4852      	ldr	r0, [pc, #328]	; (142bc <z_impl_k_mutex_lock+0x198>)
   14172:	f7ff ffa7 	bl	140c4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   14176:	68e3      	ldr	r3, [r4, #12]
   14178:	4a52      	ldr	r2, [pc, #328]	; (142c4 <z_impl_k_mutex_lock+0x1a0>)
   1417a:	b1e3      	cbz	r3, 141b6 <z_impl_k_mutex_lock+0x92>
   1417c:	68a0      	ldr	r0, [r4, #8]
   1417e:	6891      	ldr	r1, [r2, #8]
   14180:	4288      	cmp	r0, r1
   14182:	d033      	beq.n	141ec <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   14184:	ea57 0306 	orrs.w	r3, r7, r6
   14188:	d132      	bne.n	141f0 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1418a:	484c      	ldr	r0, [pc, #304]	; (142bc <z_impl_k_mutex_lock+0x198>)
   1418c:	f7ff ff8c 	bl	140a8 <z_spin_unlock_valid>
   14190:	b940      	cbnz	r0, 141a4 <z_impl_k_mutex_lock+0x80>
   14192:	494b      	ldr	r1, [pc, #300]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   14194:	4848      	ldr	r0, [pc, #288]	; (142b8 <z_impl_k_mutex_lock+0x194>)
   14196:	22ac      	movs	r2, #172	; 0xac
   14198:	f004 f973 	bl	18482 <printk>
   1419c:	21ac      	movs	r1, #172	; 0xac
   1419e:	4848      	ldr	r0, [pc, #288]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   141a0:	f004 fa38 	bl	18614 <assert_post_action>
	__asm__ volatile(
   141a4:	f388 8811 	msr	BASEPRI, r8
   141a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   141ac:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   141b0:	b002      	add	sp, #8
   141b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   141b6:	6891      	ldr	r1, [r2, #8]
   141b8:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   141bc:	3301      	adds	r3, #1
   141be:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   141c0:	6893      	ldr	r3, [r2, #8]
   141c2:	483e      	ldr	r0, [pc, #248]	; (142bc <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   141c4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   141c6:	60a3      	str	r3, [r4, #8]
   141c8:	f7ff ff6e 	bl	140a8 <z_spin_unlock_valid>
   141cc:	b940      	cbnz	r0, 141e0 <z_impl_k_mutex_lock+0xbc>
   141ce:	493c      	ldr	r1, [pc, #240]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   141d0:	4839      	ldr	r0, [pc, #228]	; (142b8 <z_impl_k_mutex_lock+0x194>)
   141d2:	22ac      	movs	r2, #172	; 0xac
   141d4:	f004 f955 	bl	18482 <printk>
   141d8:	21ac      	movs	r1, #172	; 0xac
   141da:	4839      	ldr	r0, [pc, #228]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   141dc:	f004 fa1a 	bl	18614 <assert_post_action>
   141e0:	f388 8811 	msr	BASEPRI, r8
   141e4:	f3bf 8f6f 	isb	sy
		return 0;
   141e8:	2000      	movs	r0, #0
   141ea:	e7e1      	b.n	141b0 <z_impl_k_mutex_lock+0x8c>
					_current->base.prio :
   141ec:	6921      	ldr	r1, [r4, #16]
   141ee:	e7e5      	b.n	141bc <z_impl_k_mutex_lock+0x98>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   141f0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   141f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   141f8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   141fc:	4299      	cmp	r1, r3
   141fe:	bfa8      	it	ge
   14200:	4619      	movge	r1, r3
   14202:	4291      	cmp	r1, r2
   14204:	bfb8      	it	lt
   14206:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   14208:	428b      	cmp	r3, r1
   1420a:	dd49      	ble.n	142a0 <z_impl_k_mutex_lock+0x17c>
		resched = adjust_owner_prio(mutex, new_prio);
   1420c:	f004 fbf8 	bl	18a00 <adjust_owner_prio.isra.0>
   14210:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   14212:	4622      	mov	r2, r4
   14214:	4641      	mov	r1, r8
   14216:	e9cd 7600 	strd	r7, r6, [sp]
   1421a:	4828      	ldr	r0, [pc, #160]	; (142bc <z_impl_k_mutex_lock+0x198>)
   1421c:	f000 fc96 	bl	14b4c <z_pend_curr>
	if (got_mutex == 0) {
   14220:	2800      	cmp	r0, #0
   14222:	d0e1      	beq.n	141e8 <z_impl_k_mutex_lock+0xc4>
	__asm__ volatile(
   14224:	f04f 0320 	mov.w	r3, #32
   14228:	f3ef 8611 	mrs	r6, BASEPRI
   1422c:	f383 8811 	msr	BASEPRI, r3
   14230:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14234:	4821      	ldr	r0, [pc, #132]	; (142bc <z_impl_k_mutex_lock+0x198>)
   14236:	f7ff ff29 	bl	1408c <z_spin_lock_valid>
   1423a:	b940      	cbnz	r0, 1424e <z_impl_k_mutex_lock+0x12a>
   1423c:	4920      	ldr	r1, [pc, #128]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   1423e:	481e      	ldr	r0, [pc, #120]	; (142b8 <z_impl_k_mutex_lock+0x194>)
   14240:	2281      	movs	r2, #129	; 0x81
   14242:	f004 f91e 	bl	18482 <printk>
   14246:	2181      	movs	r1, #129	; 0x81
   14248:	481d      	ldr	r0, [pc, #116]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   1424a:	f004 f9e3 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   1424e:	481b      	ldr	r0, [pc, #108]	; (142bc <z_impl_k_mutex_lock+0x198>)
   14250:	f7ff ff38 	bl	140c4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14254:	6823      	ldr	r3, [r4, #0]
   14256:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14258:	429c      	cmp	r4, r3
   1425a:	d00a      	beq.n	14272 <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1425c:	b14b      	cbz	r3, 14272 <z_impl_k_mutex_lock+0x14e>
   1425e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   14262:	4299      	cmp	r1, r3
   14264:	bfa8      	it	ge
   14266:	4619      	movge	r1, r3
   14268:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1426c:	4299      	cmp	r1, r3
   1426e:	bfb8      	it	lt
   14270:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   14272:	68a0      	ldr	r0, [r4, #8]
   14274:	f004 fbc4 	bl	18a00 <adjust_owner_prio.isra.0>
   14278:	b9a0      	cbnz	r0, 142a4 <z_impl_k_mutex_lock+0x180>
   1427a:	b99d      	cbnz	r5, 142a4 <z_impl_k_mutex_lock+0x180>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1427c:	480f      	ldr	r0, [pc, #60]	; (142bc <z_impl_k_mutex_lock+0x198>)
   1427e:	f7ff ff13 	bl	140a8 <z_spin_unlock_valid>
   14282:	b940      	cbnz	r0, 14296 <z_impl_k_mutex_lock+0x172>
   14284:	490e      	ldr	r1, [pc, #56]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   14286:	480c      	ldr	r0, [pc, #48]	; (142b8 <z_impl_k_mutex_lock+0x194>)
   14288:	22ac      	movs	r2, #172	; 0xac
   1428a:	f004 f8fa 	bl	18482 <printk>
   1428e:	21ac      	movs	r1, #172	; 0xac
   14290:	480b      	ldr	r0, [pc, #44]	; (142c0 <z_impl_k_mutex_lock+0x19c>)
   14292:	f004 f9bf 	bl	18614 <assert_post_action>
	__asm__ volatile(
   14296:	f386 8811 	msr	BASEPRI, r6
   1429a:	f3bf 8f6f 	isb	sy
   1429e:	e005      	b.n	142ac <z_impl_k_mutex_lock+0x188>
	bool resched = false;
   142a0:	2500      	movs	r5, #0
   142a2:	e7b6      	b.n	14212 <z_impl_k_mutex_lock+0xee>
		z_reschedule(&lock, key);
   142a4:	4631      	mov	r1, r6
   142a6:	4805      	ldr	r0, [pc, #20]	; (142bc <z_impl_k_mutex_lock+0x198>)
   142a8:	f000 fa64 	bl	14774 <z_reschedule>
	return -EAGAIN;
   142ac:	f06f 000a 	mvn.w	r0, #10
   142b0:	e77e      	b.n	141b0 <z_impl_k_mutex_lock+0x8c>
   142b2:	bf00      	nop
   142b4:	0001a01c 	.word	0x0001a01c
   142b8:	00019196 	.word	0x00019196
   142bc:	20000a04 	.word	0x20000a04
   142c0:	000191d0 	.word	0x000191d0
   142c4:	200009d4 	.word	0x200009d4

000142c8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   142c8:	b538      	push	{r3, r4, r5, lr}
   142ca:	4604      	mov	r4, r0
   142cc:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   142d0:	b143      	cbz	r3, 142e4 <z_impl_k_mutex_unlock+0x1c>
   142d2:	4943      	ldr	r1, [pc, #268]	; (143e0 <z_impl_k_mutex_unlock+0x118>)
   142d4:	4843      	ldr	r0, [pc, #268]	; (143e4 <z_impl_k_mutex_unlock+0x11c>)
   142d6:	22c7      	movs	r2, #199	; 0xc7
   142d8:	f004 f8d3 	bl	18482 <printk>
   142dc:	21c7      	movs	r1, #199	; 0xc7
   142de:	4840      	ldr	r0, [pc, #256]	; (143e0 <z_impl_k_mutex_unlock+0x118>)
   142e0:	f004 f998 	bl	18614 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   142e4:	68a3      	ldr	r3, [r4, #8]
   142e6:	2b00      	cmp	r3, #0
   142e8:	d074      	beq.n	143d4 <z_impl_k_mutex_unlock+0x10c>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   142ea:	4d3f      	ldr	r5, [pc, #252]	; (143e8 <z_impl_k_mutex_unlock+0x120>)
   142ec:	68aa      	ldr	r2, [r5, #8]
   142ee:	4293      	cmp	r3, r2
   142f0:	d173      	bne.n	143da <z_impl_k_mutex_unlock+0x112>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   142f2:	68e3      	ldr	r3, [r4, #12]
   142f4:	b943      	cbnz	r3, 14308 <z_impl_k_mutex_unlock+0x40>
   142f6:	493a      	ldr	r1, [pc, #232]	; (143e0 <z_impl_k_mutex_unlock+0x118>)
   142f8:	483a      	ldr	r0, [pc, #232]	; (143e4 <z_impl_k_mutex_unlock+0x11c>)
   142fa:	22df      	movs	r2, #223	; 0xdf
   142fc:	f004 f8c1 	bl	18482 <printk>
   14300:	21df      	movs	r1, #223	; 0xdf
   14302:	4837      	ldr	r0, [pc, #220]	; (143e0 <z_impl_k_mutex_unlock+0x118>)
   14304:	f004 f986 	bl	18614 <assert_post_action>
   14308:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   1430c:	b143      	cbz	r3, 14320 <z_impl_k_mutex_unlock+0x58>
   1430e:	4937      	ldr	r1, [pc, #220]	; (143ec <z_impl_k_mutex_unlock+0x124>)
   14310:	4834      	ldr	r0, [pc, #208]	; (143e4 <z_impl_k_mutex_unlock+0x11c>)
   14312:	22fd      	movs	r2, #253	; 0xfd
   14314:	f004 f8b5 	bl	18482 <printk>
   14318:	21fd      	movs	r1, #253	; 0xfd
   1431a:	4834      	ldr	r0, [pc, #208]	; (143ec <z_impl_k_mutex_unlock+0x124>)
   1431c:	f004 f97a 	bl	18614 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   14320:	68ab      	ldr	r3, [r5, #8]
   14322:	7bdb      	ldrb	r3, [r3, #15]
   14324:	2b01      	cmp	r3, #1
   14326:	d108      	bne.n	1433a <z_impl_k_mutex_unlock+0x72>
   14328:	4930      	ldr	r1, [pc, #192]	; (143ec <z_impl_k_mutex_unlock+0x124>)
   1432a:	482e      	ldr	r0, [pc, #184]	; (143e4 <z_impl_k_mutex_unlock+0x11c>)
   1432c:	22fe      	movs	r2, #254	; 0xfe
   1432e:	f004 f8a8 	bl	18482 <printk>
   14332:	21fe      	movs	r1, #254	; 0xfe
   14334:	482d      	ldr	r0, [pc, #180]	; (143ec <z_impl_k_mutex_unlock+0x124>)
   14336:	f004 f96d 	bl	18614 <assert_post_action>

	--_current->base.sched_locked;
   1433a:	68aa      	ldr	r2, [r5, #8]
   1433c:	7bd3      	ldrb	r3, [r2, #15]
   1433e:	3b01      	subs	r3, #1
   14340:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   14342:	68e3      	ldr	r3, [r4, #12]
   14344:	2b01      	cmp	r3, #1
   14346:	d905      	bls.n	14354 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   14348:	3b01      	subs	r3, #1
   1434a:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1434c:	f000 fade 	bl	1490c <k_sched_unlock>

	return 0;
   14350:	2000      	movs	r0, #0
}
   14352:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   14354:	f04f 0320 	mov.w	r3, #32
   14358:	f3ef 8511 	mrs	r5, BASEPRI
   1435c:	f383 8811 	msr	BASEPRI, r3
   14360:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14364:	4822      	ldr	r0, [pc, #136]	; (143f0 <z_impl_k_mutex_unlock+0x128>)
   14366:	f7ff fe91 	bl	1408c <z_spin_lock_valid>
   1436a:	b940      	cbnz	r0, 1437e <z_impl_k_mutex_unlock+0xb6>
   1436c:	4921      	ldr	r1, [pc, #132]	; (143f4 <z_impl_k_mutex_unlock+0x12c>)
   1436e:	481d      	ldr	r0, [pc, #116]	; (143e4 <z_impl_k_mutex_unlock+0x11c>)
   14370:	2281      	movs	r2, #129	; 0x81
   14372:	f004 f886 	bl	18482 <printk>
   14376:	2181      	movs	r1, #129	; 0x81
   14378:	481e      	ldr	r0, [pc, #120]	; (143f4 <z_impl_k_mutex_unlock+0x12c>)
   1437a:	f004 f94b 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   1437e:	481c      	ldr	r0, [pc, #112]	; (143f0 <z_impl_k_mutex_unlock+0x128>)
   14380:	f7ff fea0 	bl	140c4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   14384:	6921      	ldr	r1, [r4, #16]
   14386:	68a0      	ldr	r0, [r4, #8]
   14388:	f004 fb3a 	bl	18a00 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1438c:	4620      	mov	r0, r4
   1438e:	f000 fdfb 	bl	14f88 <z_unpend_first_thread>
	mutex->owner = new_owner;
   14392:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   14394:	b158      	cbz	r0, 143ae <z_impl_k_mutex_unlock+0xe6>
		mutex->owner_orig_prio = new_owner->base.prio;
   14396:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1439a:	6122      	str	r2, [r4, #16]
   1439c:	2200      	movs	r2, #0
   1439e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   143a0:	f000 f9b2 	bl	14708 <z_ready_thread>
		z_reschedule(&lock, key);
   143a4:	4629      	mov	r1, r5
   143a6:	4812      	ldr	r0, [pc, #72]	; (143f0 <z_impl_k_mutex_unlock+0x128>)
   143a8:	f000 f9e4 	bl	14774 <z_reschedule>
   143ac:	e7ce      	b.n	1434c <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   143ae:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   143b0:	480f      	ldr	r0, [pc, #60]	; (143f0 <z_impl_k_mutex_unlock+0x128>)
   143b2:	f7ff fe79 	bl	140a8 <z_spin_unlock_valid>
   143b6:	b940      	cbnz	r0, 143ca <z_impl_k_mutex_unlock+0x102>
   143b8:	490e      	ldr	r1, [pc, #56]	; (143f4 <z_impl_k_mutex_unlock+0x12c>)
   143ba:	480a      	ldr	r0, [pc, #40]	; (143e4 <z_impl_k_mutex_unlock+0x11c>)
   143bc:	22ac      	movs	r2, #172	; 0xac
   143be:	f004 f860 	bl	18482 <printk>
   143c2:	21ac      	movs	r1, #172	; 0xac
   143c4:	480b      	ldr	r0, [pc, #44]	; (143f4 <z_impl_k_mutex_unlock+0x12c>)
   143c6:	f004 f925 	bl	18614 <assert_post_action>
	__asm__ volatile(
   143ca:	f385 8811 	msr	BASEPRI, r5
   143ce:	f3bf 8f6f 	isb	sy
   143d2:	e7bb      	b.n	1434c <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   143d4:	f06f 0015 	mvn.w	r0, #21
   143d8:	e7bb      	b.n	14352 <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   143da:	f04f 30ff 	mov.w	r0, #4294967295
   143de:	e7b8      	b.n	14352 <z_impl_k_mutex_unlock+0x8a>
   143e0:	0001a01c 	.word	0x0001a01c
   143e4:	00019196 	.word	0x00019196
   143e8:	200009d4 	.word	0x200009d4
   143ec:	0001a03e 	.word	0x0001a03e
   143f0:	20000a04 	.word	0x20000a04
   143f4:	000191d0 	.word	0x000191d0

000143f8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   143f8:	b538      	push	{r3, r4, r5, lr}
   143fa:	4604      	mov	r4, r0
	__asm__ volatile(
   143fc:	f04f 0320 	mov.w	r3, #32
   14400:	f3ef 8511 	mrs	r5, BASEPRI
   14404:	f383 8811 	msr	BASEPRI, r3
   14408:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1440c:	4812      	ldr	r0, [pc, #72]	; (14458 <z_impl_k_sem_give+0x60>)
   1440e:	f7ff fe3d 	bl	1408c <z_spin_lock_valid>
   14412:	b940      	cbnz	r0, 14426 <z_impl_k_sem_give+0x2e>
   14414:	4911      	ldr	r1, [pc, #68]	; (1445c <z_impl_k_sem_give+0x64>)
   14416:	4812      	ldr	r0, [pc, #72]	; (14460 <z_impl_k_sem_give+0x68>)
   14418:	2281      	movs	r2, #129	; 0x81
   1441a:	f004 f832 	bl	18482 <printk>
   1441e:	2181      	movs	r1, #129	; 0x81
   14420:	480e      	ldr	r0, [pc, #56]	; (1445c <z_impl_k_sem_give+0x64>)
   14422:	f004 f8f7 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14426:	480c      	ldr	r0, [pc, #48]	; (14458 <z_impl_k_sem_give+0x60>)
   14428:	f7ff fe4c 	bl	140c4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1442c:	4620      	mov	r0, r4
   1442e:	f000 fdab 	bl	14f88 <z_unpend_first_thread>

	if (thread != NULL) {
   14432:	b148      	cbz	r0, 14448 <z_impl_k_sem_give+0x50>
   14434:	2200      	movs	r2, #0
   14436:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   14438:	f000 f966 	bl	14708 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1443c:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1443e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   14442:	4805      	ldr	r0, [pc, #20]	; (14458 <z_impl_k_sem_give+0x60>)
   14444:	f000 b996 	b.w	14774 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14448:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1444c:	429a      	cmp	r2, r3
   1444e:	bf18      	it	ne
   14450:	3301      	addne	r3, #1
   14452:	60a3      	str	r3, [r4, #8]
}
   14454:	e7f2      	b.n	1443c <z_impl_k_sem_give+0x44>
   14456:	bf00      	nop
   14458:	20000a08 	.word	0x20000a08
   1445c:	000191d0 	.word	0x000191d0
   14460:	00019196 	.word	0x00019196

00014464 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   14464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14466:	4604      	mov	r4, r0
   14468:	4617      	mov	r7, r2
   1446a:	461d      	mov	r5, r3
   1446c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   14470:	b15b      	cbz	r3, 1448a <z_impl_k_sem_take+0x26>
   14472:	ea52 0305 	orrs.w	r3, r2, r5
   14476:	d008      	beq.n	1448a <z_impl_k_sem_take+0x26>
   14478:	492b      	ldr	r1, [pc, #172]	; (14528 <z_impl_k_sem_take+0xc4>)
   1447a:	482c      	ldr	r0, [pc, #176]	; (1452c <z_impl_k_sem_take+0xc8>)
   1447c:	2279      	movs	r2, #121	; 0x79
   1447e:	f004 f800 	bl	18482 <printk>
   14482:	2179      	movs	r1, #121	; 0x79
   14484:	4828      	ldr	r0, [pc, #160]	; (14528 <z_impl_k_sem_take+0xc4>)
   14486:	f004 f8c5 	bl	18614 <assert_post_action>
   1448a:	f04f 0320 	mov.w	r3, #32
   1448e:	f3ef 8611 	mrs	r6, BASEPRI
   14492:	f383 8811 	msr	BASEPRI, r3
   14496:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1449a:	4825      	ldr	r0, [pc, #148]	; (14530 <z_impl_k_sem_take+0xcc>)
   1449c:	f7ff fdf6 	bl	1408c <z_spin_lock_valid>
   144a0:	b940      	cbnz	r0, 144b4 <z_impl_k_sem_take+0x50>
   144a2:	4924      	ldr	r1, [pc, #144]	; (14534 <z_impl_k_sem_take+0xd0>)
   144a4:	4821      	ldr	r0, [pc, #132]	; (1452c <z_impl_k_sem_take+0xc8>)
   144a6:	2281      	movs	r2, #129	; 0x81
   144a8:	f003 ffeb 	bl	18482 <printk>
   144ac:	2181      	movs	r1, #129	; 0x81
   144ae:	4821      	ldr	r0, [pc, #132]	; (14534 <z_impl_k_sem_take+0xd0>)
   144b0:	f004 f8b0 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   144b4:	481e      	ldr	r0, [pc, #120]	; (14530 <z_impl_k_sem_take+0xcc>)
   144b6:	f7ff fe05 	bl	140c4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   144ba:	68a3      	ldr	r3, [r4, #8]
   144bc:	b1ab      	cbz	r3, 144ea <z_impl_k_sem_take+0x86>
		sem->count--;
   144be:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   144c0:	481b      	ldr	r0, [pc, #108]	; (14530 <z_impl_k_sem_take+0xcc>)
   144c2:	60a3      	str	r3, [r4, #8]
   144c4:	f7ff fdf0 	bl	140a8 <z_spin_unlock_valid>
   144c8:	b940      	cbnz	r0, 144dc <z_impl_k_sem_take+0x78>
   144ca:	491a      	ldr	r1, [pc, #104]	; (14534 <z_impl_k_sem_take+0xd0>)
   144cc:	4817      	ldr	r0, [pc, #92]	; (1452c <z_impl_k_sem_take+0xc8>)
   144ce:	22ac      	movs	r2, #172	; 0xac
   144d0:	f003 ffd7 	bl	18482 <printk>
   144d4:	21ac      	movs	r1, #172	; 0xac
   144d6:	4817      	ldr	r0, [pc, #92]	; (14534 <z_impl_k_sem_take+0xd0>)
   144d8:	f004 f89c 	bl	18614 <assert_post_action>
	__asm__ volatile(
   144dc:	f386 8811 	msr	BASEPRI, r6
   144e0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   144e4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   144e6:	b003      	add	sp, #12
   144e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   144ea:	ea57 0305 	orrs.w	r3, r7, r5
   144ee:	d113      	bne.n	14518 <z_impl_k_sem_take+0xb4>
   144f0:	480f      	ldr	r0, [pc, #60]	; (14530 <z_impl_k_sem_take+0xcc>)
   144f2:	f7ff fdd9 	bl	140a8 <z_spin_unlock_valid>
   144f6:	b940      	cbnz	r0, 1450a <z_impl_k_sem_take+0xa6>
   144f8:	490e      	ldr	r1, [pc, #56]	; (14534 <z_impl_k_sem_take+0xd0>)
   144fa:	480c      	ldr	r0, [pc, #48]	; (1452c <z_impl_k_sem_take+0xc8>)
   144fc:	22ac      	movs	r2, #172	; 0xac
   144fe:	f003 ffc0 	bl	18482 <printk>
   14502:	21ac      	movs	r1, #172	; 0xac
   14504:	480b      	ldr	r0, [pc, #44]	; (14534 <z_impl_k_sem_take+0xd0>)
   14506:	f004 f885 	bl	18614 <assert_post_action>
   1450a:	f386 8811 	msr	BASEPRI, r6
   1450e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   14512:	f06f 000f 	mvn.w	r0, #15
   14516:	e7e6      	b.n	144e6 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   14518:	4622      	mov	r2, r4
   1451a:	4631      	mov	r1, r6
   1451c:	e9cd 7500 	strd	r7, r5, [sp]
   14520:	4803      	ldr	r0, [pc, #12]	; (14530 <z_impl_k_sem_take+0xcc>)
   14522:	f000 fb13 	bl	14b4c <z_pend_curr>
	return ret;
   14526:	e7de      	b.n	144e6 <z_impl_k_sem_take+0x82>
   14528:	0001a069 	.word	0x0001a069
   1452c:	00019196 	.word	0x00019196
   14530:	20000a08 	.word	0x20000a08
   14534:	000191d0 	.word	0x000191d0

00014538 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   14538:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1453a:	4c08      	ldr	r4, [pc, #32]	; (1455c <z_reset_time_slice+0x24>)
   1453c:	6823      	ldr	r3, [r4, #0]
   1453e:	b15b      	cbz	r3, 14558 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   14540:	f7fd fb96 	bl	11c70 <sys_clock_elapsed>
   14544:	4603      	mov	r3, r0
   14546:	6820      	ldr	r0, [r4, #0]
   14548:	4a05      	ldr	r2, [pc, #20]	; (14560 <z_reset_time_slice+0x28>)
   1454a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   1454c:	2100      	movs	r1, #0
	}
}
   1454e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   14552:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   14554:	f001 b8c4 	b.w	156e0 <z_set_timeout_expiry>
}
   14558:	bd10      	pop	{r4, pc}
   1455a:	bf00      	nop
   1455c:	20000a14 	.word	0x20000a14
   14560:	200009d4 	.word	0x200009d4

00014564 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   14564:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   14566:	4c14      	ldr	r4, [pc, #80]	; (145b8 <update_cache+0x54>)
   14568:	4623      	mov	r3, r4
   1456a:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1456e:	429d      	cmp	r5, r3
   14570:	d000      	beq.n	14574 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   14572:	b905      	cbnz	r5, 14576 <update_cache+0x12>
   14574:	68e5      	ldr	r5, [r4, #12]
	__ASSERT(_current != NULL, "");
   14576:	68a3      	ldr	r3, [r4, #8]
	if (preempt_ok != 0) {
   14578:	b120      	cbz	r0, 14584 <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1457a:	68a3      	ldr	r3, [r4, #8]
   1457c:	42ab      	cmp	r3, r5
   1457e:	d117      	bne.n	145b0 <update_cache+0x4c>
			z_reset_time_slice();
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   14580:	462b      	mov	r3, r5
   14582:	e013      	b.n	145ac <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   14584:	b943      	cbnz	r3, 14598 <update_cache+0x34>
   14586:	490d      	ldr	r1, [pc, #52]	; (145bc <update_cache+0x58>)
   14588:	480d      	ldr	r0, [pc, #52]	; (145c0 <update_cache+0x5c>)
   1458a:	2281      	movs	r2, #129	; 0x81
   1458c:	f003 ff79 	bl	18482 <printk>
   14590:	2181      	movs	r1, #129	; 0x81
   14592:	480a      	ldr	r0, [pc, #40]	; (145bc <update_cache+0x58>)
   14594:	f004 f83e 	bl	18614 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   14598:	68a3      	ldr	r3, [r4, #8]
   1459a:	7b5a      	ldrb	r2, [r3, #13]
   1459c:	06d2      	lsls	r2, r2, #27
   1459e:	d1ec      	bne.n	1457a <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   145a0:	69aa      	ldr	r2, [r5, #24]
   145a2:	2a00      	cmp	r2, #0
   145a4:	d1e9      	bne.n	1457a <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
   145a6:	89da      	ldrh	r2, [r3, #14]
   145a8:	2a7f      	cmp	r2, #127	; 0x7f
   145aa:	d9e6      	bls.n	1457a <update_cache+0x16>
		_kernel.ready_q.cache = thread;
   145ac:	6263      	str	r3, [r4, #36]	; 0x24
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   145ae:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice();
   145b0:	f7ff ffc2 	bl	14538 <z_reset_time_slice>
   145b4:	e7e4      	b.n	14580 <update_cache+0x1c>
   145b6:	bf00      	nop
   145b8:	200009d4 	.word	0x200009d4
   145bc:	0001a089 	.word	0x0001a089
   145c0:	00019196 	.word	0x00019196

000145c4 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   145c4:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   145c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   145ca:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   145cc:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   145ce:	7b43      	ldrb	r3, [r0, #13]
   145d0:	db3b      	blt.n	1464a <ready_thread+0x86>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   145d2:	06da      	lsls	r2, r3, #27
   145d4:	d139      	bne.n	1464a <ready_thread+0x86>
   145d6:	6982      	ldr	r2, [r0, #24]
   145d8:	2a00      	cmp	r2, #0
   145da:	d136      	bne.n	1464a <ready_thread+0x86>
	thread->base.thread_state |= _THREAD_QUEUED;
   145dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   145e0:	7343      	strb	r3, [r0, #13]

ALWAYS_INLINE void z_priq_dumb_add(sys_dlist_t *pq, struct k_thread *thread)
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   145e2:	4b1a      	ldr	r3, [pc, #104]	; (1464c <ready_thread+0x88>)
   145e4:	4298      	cmp	r0, r3
   145e6:	d10a      	bne.n	145fe <ready_thread+0x3a>
   145e8:	4919      	ldr	r1, [pc, #100]	; (14650 <ready_thread+0x8c>)
   145ea:	481a      	ldr	r0, [pc, #104]	; (14654 <ready_thread+0x90>)
   145ec:	f240 32a6 	movw	r2, #934	; 0x3a6
   145f0:	f003 ff47 	bl	18482 <printk>
   145f4:	f240 31a6 	movw	r1, #934	; 0x3a6
   145f8:	4815      	ldr	r0, [pc, #84]	; (14650 <ready_thread+0x8c>)
   145fa:	f004 f80b 	bl	18614 <assert_post_action>
	return list->head == list;
   145fe:	4a16      	ldr	r2, [pc, #88]	; (14658 <ready_thread+0x94>)
   14600:	4610      	mov	r0, r2
   14602:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14606:	4283      	cmp	r3, r0
   14608:	d11d      	bne.n	14646 <ready_thread+0x82>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1460a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1460c:	e9c4 0100 	strd	r0, r1, [r4]

	tail->next = node;
   14610:	600c      	str	r4, [r1, #0]
	list->tail = node;
   14612:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   14614:	e012      	b.n	1463c <ready_thread+0x78>
	return (node == list->tail) ? NULL : node->next;
   14616:	428b      	cmp	r3, r1
   14618:	d0f8      	beq.n	1460c <ready_thread+0x48>
   1461a:	681b      	ldr	r3, [r3, #0]

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1461c:	2b00      	cmp	r3, #0
   1461e:	d0f5      	beq.n	1460c <ready_thread+0x48>
	int32_t b1 = thread_1->base.prio;
   14620:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   14624:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   14628:	42ae      	cmp	r6, r5
   1462a:	d0f4      	beq.n	14616 <ready_thread+0x52>
		return b2 - b1;
   1462c:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1462e:	2d00      	cmp	r5, #0
   14630:	ddf1      	ble.n	14616 <ready_thread+0x52>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   14632:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   14634:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   14638:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1463a:	605c      	str	r4, [r3, #4]
		update_cache(0);
   1463c:	2000      	movs	r0, #0
}
   1463e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   14642:	f7ff bf8f 	b.w	14564 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   14646:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   14648:	e7e8      	b.n	1461c <ready_thread+0x58>
}
   1464a:	bd70      	pop	{r4, r5, r6, pc}
   1464c:	20000120 	.word	0x20000120
   14650:	0001a089 	.word	0x0001a089
   14654:	00019196 	.word	0x00019196
   14658:	200009d4 	.word	0x200009d4

0001465c <k_sched_time_slice_set>:
{
   1465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14660:	4604      	mov	r4, r0
   14662:	460d      	mov	r5, r1
	__asm__ volatile(
   14664:	f04f 0320 	mov.w	r3, #32
   14668:	f3ef 8811 	mrs	r8, BASEPRI
   1466c:	f383 8811 	msr	BASEPRI, r3
   14670:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14674:	481e      	ldr	r0, [pc, #120]	; (146f0 <k_sched_time_slice_set+0x94>)
   14676:	f7ff fd09 	bl	1408c <z_spin_lock_valid>
   1467a:	b940      	cbnz	r0, 1468e <k_sched_time_slice_set+0x32>
   1467c:	491d      	ldr	r1, [pc, #116]	; (146f4 <k_sched_time_slice_set+0x98>)
   1467e:	481e      	ldr	r0, [pc, #120]	; (146f8 <k_sched_time_slice_set+0x9c>)
   14680:	2281      	movs	r2, #129	; 0x81
   14682:	f003 fefe 	bl	18482 <printk>
   14686:	2181      	movs	r1, #129	; 0x81
   14688:	481a      	ldr	r0, [pc, #104]	; (146f4 <k_sched_time_slice_set+0x98>)
   1468a:	f003 ffc3 	bl	18614 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1468e:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   14690:	4817      	ldr	r0, [pc, #92]	; (146f0 <k_sched_time_slice_set+0x94>)
   14692:	f7ff fd17 	bl	140c4 <z_spin_lock_set_owner>
   14696:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1469a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1469e:	4631      	mov	r1, r6
   146a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   146a4:	2300      	movs	r3, #0
   146a6:	fbe4 0107 	umlal	r0, r1, r4, r7
   146aa:	f7fb fec7 	bl	1043c <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   146ae:	42b4      	cmp	r4, r6
   146b0:	dd02      	ble.n	146b8 <k_sched_time_slice_set+0x5c>
			slice_time = MAX(2, slice_time);
   146b2:	2802      	cmp	r0, #2
   146b4:	bfb8      	it	lt
   146b6:	2002      	movlt	r0, #2
		_current_cpu->slice_ticks = 0;
   146b8:	4b10      	ldr	r3, [pc, #64]	; (146fc <k_sched_time_slice_set+0xa0>)
   146ba:	611e      	str	r6, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
   146bc:	4b10      	ldr	r3, [pc, #64]	; (14700 <k_sched_time_slice_set+0xa4>)
   146be:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   146c0:	4b10      	ldr	r3, [pc, #64]	; (14704 <k_sched_time_slice_set+0xa8>)
   146c2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   146c4:	f7ff ff38 	bl	14538 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   146c8:	4809      	ldr	r0, [pc, #36]	; (146f0 <k_sched_time_slice_set+0x94>)
   146ca:	f7ff fced 	bl	140a8 <z_spin_unlock_valid>
   146ce:	b940      	cbnz	r0, 146e2 <k_sched_time_slice_set+0x86>
   146d0:	4908      	ldr	r1, [pc, #32]	; (146f4 <k_sched_time_slice_set+0x98>)
   146d2:	4809      	ldr	r0, [pc, #36]	; (146f8 <k_sched_time_slice_set+0x9c>)
   146d4:	22ac      	movs	r2, #172	; 0xac
   146d6:	f003 fed4 	bl	18482 <printk>
   146da:	21ac      	movs	r1, #172	; 0xac
   146dc:	4805      	ldr	r0, [pc, #20]	; (146f4 <k_sched_time_slice_set+0x98>)
   146de:	f003 ff99 	bl	18614 <assert_post_action>
	__asm__ volatile(
   146e2:	f388 8811 	msr	BASEPRI, r8
   146e6:	f3bf 8f6f 	isb	sy
}
   146ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146ee:	bf00      	nop
   146f0:	20000a18 	.word	0x20000a18
   146f4:	000191d0 	.word	0x000191d0
   146f8:	00019196 	.word	0x00019196
   146fc:	200009d4 	.word	0x200009d4
   14700:	20000a14 	.word	0x20000a14
   14704:	20000a10 	.word	0x20000a10

00014708 <z_ready_thread>:
{
   14708:	b538      	push	{r3, r4, r5, lr}
   1470a:	4604      	mov	r4, r0
	__asm__ volatile(
   1470c:	f04f 0320 	mov.w	r3, #32
   14710:	f3ef 8511 	mrs	r5, BASEPRI
   14714:	f383 8811 	msr	BASEPRI, r3
   14718:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1471c:	4812      	ldr	r0, [pc, #72]	; (14768 <z_ready_thread+0x60>)
   1471e:	f7ff fcb5 	bl	1408c <z_spin_lock_valid>
   14722:	b940      	cbnz	r0, 14736 <z_ready_thread+0x2e>
   14724:	4911      	ldr	r1, [pc, #68]	; (1476c <z_ready_thread+0x64>)
   14726:	4812      	ldr	r0, [pc, #72]	; (14770 <z_ready_thread+0x68>)
   14728:	2281      	movs	r2, #129	; 0x81
   1472a:	f003 feaa 	bl	18482 <printk>
   1472e:	2181      	movs	r1, #129	; 0x81
   14730:	480e      	ldr	r0, [pc, #56]	; (1476c <z_ready_thread+0x64>)
   14732:	f003 ff6f 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14736:	480c      	ldr	r0, [pc, #48]	; (14768 <z_ready_thread+0x60>)
   14738:	f7ff fcc4 	bl	140c4 <z_spin_lock_set_owner>
			ready_thread(thread);
   1473c:	4620      	mov	r0, r4
   1473e:	f7ff ff41 	bl	145c4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14742:	4809      	ldr	r0, [pc, #36]	; (14768 <z_ready_thread+0x60>)
   14744:	f7ff fcb0 	bl	140a8 <z_spin_unlock_valid>
   14748:	b940      	cbnz	r0, 1475c <z_ready_thread+0x54>
   1474a:	4908      	ldr	r1, [pc, #32]	; (1476c <z_ready_thread+0x64>)
   1474c:	4808      	ldr	r0, [pc, #32]	; (14770 <z_ready_thread+0x68>)
   1474e:	22ac      	movs	r2, #172	; 0xac
   14750:	f003 fe97 	bl	18482 <printk>
   14754:	21ac      	movs	r1, #172	; 0xac
   14756:	4805      	ldr	r0, [pc, #20]	; (1476c <z_ready_thread+0x64>)
   14758:	f003 ff5c 	bl	18614 <assert_post_action>
	__asm__ volatile(
   1475c:	f385 8811 	msr	BASEPRI, r5
   14760:	f3bf 8f6f 	isb	sy
}
   14764:	bd38      	pop	{r3, r4, r5, pc}
   14766:	bf00      	nop
   14768:	20000a18 	.word	0x20000a18
   1476c:	000191d0 	.word	0x000191d0
   14770:	00019196 	.word	0x00019196

00014774 <z_reschedule>:
{
   14774:	b510      	push	{r4, lr}
   14776:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14778:	460c      	mov	r4, r1
   1477a:	b9c1      	cbnz	r1, 147ae <z_reschedule+0x3a>
   1477c:	f3ef 8205 	mrs	r2, IPSR
   14780:	b9aa      	cbnz	r2, 147ae <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   14782:	4a14      	ldr	r2, [pc, #80]	; (147d4 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   14784:	6a51      	ldr	r1, [r2, #36]	; 0x24
   14786:	6892      	ldr	r2, [r2, #8]
   14788:	4291      	cmp	r1, r2
   1478a:	d010      	beq.n	147ae <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1478c:	f7ff fc8c 	bl	140a8 <z_spin_unlock_valid>
   14790:	b940      	cbnz	r0, 147a4 <z_reschedule+0x30>
   14792:	4911      	ldr	r1, [pc, #68]	; (147d8 <z_reschedule+0x64>)
   14794:	4811      	ldr	r0, [pc, #68]	; (147dc <z_reschedule+0x68>)
   14796:	22c3      	movs	r2, #195	; 0xc3
   14798:	f003 fe73 	bl	18482 <printk>
   1479c:	21c3      	movs	r1, #195	; 0xc3
   1479e:	480e      	ldr	r0, [pc, #56]	; (147d8 <z_reschedule+0x64>)
   147a0:	f003 ff38 	bl	18614 <assert_post_action>
}
   147a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   147a8:	2000      	movs	r0, #0
   147aa:	f7fd bd85 	b.w	122b8 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   147ae:	4618      	mov	r0, r3
   147b0:	f7ff fc7a 	bl	140a8 <z_spin_unlock_valid>
   147b4:	b940      	cbnz	r0, 147c8 <z_reschedule+0x54>
   147b6:	4908      	ldr	r1, [pc, #32]	; (147d8 <z_reschedule+0x64>)
   147b8:	4808      	ldr	r0, [pc, #32]	; (147dc <z_reschedule+0x68>)
   147ba:	22ac      	movs	r2, #172	; 0xac
   147bc:	f003 fe61 	bl	18482 <printk>
   147c0:	21ac      	movs	r1, #172	; 0xac
   147c2:	4805      	ldr	r0, [pc, #20]	; (147d8 <z_reschedule+0x64>)
   147c4:	f003 ff26 	bl	18614 <assert_post_action>
   147c8:	f384 8811 	msr	BASEPRI, r4
   147cc:	f3bf 8f6f 	isb	sy
   147d0:	bd10      	pop	{r4, pc}
   147d2:	bf00      	nop
   147d4:	200009d4 	.word	0x200009d4
   147d8:	000191d0 	.word	0x000191d0
   147dc:	00019196 	.word	0x00019196

000147e0 <z_sched_start>:
{
   147e0:	b538      	push	{r3, r4, r5, lr}
   147e2:	4604      	mov	r4, r0
	__asm__ volatile(
   147e4:	f04f 0320 	mov.w	r3, #32
   147e8:	f3ef 8511 	mrs	r5, BASEPRI
   147ec:	f383 8811 	msr	BASEPRI, r3
   147f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   147f4:	4818      	ldr	r0, [pc, #96]	; (14858 <z_sched_start+0x78>)
   147f6:	f7ff fc49 	bl	1408c <z_spin_lock_valid>
   147fa:	b940      	cbnz	r0, 1480e <z_sched_start+0x2e>
   147fc:	4917      	ldr	r1, [pc, #92]	; (1485c <z_sched_start+0x7c>)
   147fe:	4818      	ldr	r0, [pc, #96]	; (14860 <z_sched_start+0x80>)
   14800:	2281      	movs	r2, #129	; 0x81
   14802:	f003 fe3e 	bl	18482 <printk>
   14806:	2181      	movs	r1, #129	; 0x81
   14808:	4814      	ldr	r0, [pc, #80]	; (1485c <z_sched_start+0x7c>)
   1480a:	f003 ff03 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   1480e:	4812      	ldr	r0, [pc, #72]	; (14858 <z_sched_start+0x78>)
   14810:	f7ff fc58 	bl	140c4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   14814:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   14816:	075a      	lsls	r2, r3, #29
   14818:	d411      	bmi.n	1483e <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1481a:	480f      	ldr	r0, [pc, #60]	; (14858 <z_sched_start+0x78>)
   1481c:	f7ff fc44 	bl	140a8 <z_spin_unlock_valid>
   14820:	b940      	cbnz	r0, 14834 <z_sched_start+0x54>
   14822:	490e      	ldr	r1, [pc, #56]	; (1485c <z_sched_start+0x7c>)
   14824:	480e      	ldr	r0, [pc, #56]	; (14860 <z_sched_start+0x80>)
   14826:	22ac      	movs	r2, #172	; 0xac
   14828:	f003 fe2b 	bl	18482 <printk>
   1482c:	21ac      	movs	r1, #172	; 0xac
   1482e:	480b      	ldr	r0, [pc, #44]	; (1485c <z_sched_start+0x7c>)
   14830:	f003 fef0 	bl	18614 <assert_post_action>
	__asm__ volatile(
   14834:	f385 8811 	msr	BASEPRI, r5
   14838:	f3bf 8f6f 	isb	sy
}
   1483c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1483e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   14842:	4620      	mov	r0, r4
   14844:	7363      	strb	r3, [r4, #13]
   14846:	f7ff febd 	bl	145c4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1484a:	4629      	mov	r1, r5
}
   1484c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   14850:	4801      	ldr	r0, [pc, #4]	; (14858 <z_sched_start+0x78>)
   14852:	f7ff bf8f 	b.w	14774 <z_reschedule>
   14856:	bf00      	nop
   14858:	20000a18 	.word	0x20000a18
   1485c:	000191d0 	.word	0x000191d0
   14860:	00019196 	.word	0x00019196

00014864 <k_sched_lock>:
{
   14864:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   14866:	f04f 0320 	mov.w	r3, #32
   1486a:	f3ef 8511 	mrs	r5, BASEPRI
   1486e:	f383 8811 	msr	BASEPRI, r3
   14872:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14876:	4820      	ldr	r0, [pc, #128]	; (148f8 <k_sched_lock+0x94>)
   14878:	f7ff fc08 	bl	1408c <z_spin_lock_valid>
   1487c:	b940      	cbnz	r0, 14890 <k_sched_lock+0x2c>
   1487e:	491f      	ldr	r1, [pc, #124]	; (148fc <k_sched_lock+0x98>)
   14880:	481f      	ldr	r0, [pc, #124]	; (14900 <k_sched_lock+0x9c>)
   14882:	2281      	movs	r2, #129	; 0x81
   14884:	f003 fdfd 	bl	18482 <printk>
   14888:	2181      	movs	r1, #129	; 0x81
   1488a:	481c      	ldr	r0, [pc, #112]	; (148fc <k_sched_lock+0x98>)
   1488c:	f003 fec2 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14890:	4819      	ldr	r0, [pc, #100]	; (148f8 <k_sched_lock+0x94>)
   14892:	f7ff fc17 	bl	140c4 <z_spin_lock_set_owner>
   14896:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1489a:	b143      	cbz	r3, 148ae <k_sched_lock+0x4a>
   1489c:	4919      	ldr	r1, [pc, #100]	; (14904 <k_sched_lock+0xa0>)
   1489e:	4818      	ldr	r0, [pc, #96]	; (14900 <k_sched_lock+0x9c>)
   148a0:	22fd      	movs	r2, #253	; 0xfd
   148a2:	f003 fdee 	bl	18482 <printk>
   148a6:	21fd      	movs	r1, #253	; 0xfd
   148a8:	4816      	ldr	r0, [pc, #88]	; (14904 <k_sched_lock+0xa0>)
   148aa:	f003 feb3 	bl	18614 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   148ae:	4c16      	ldr	r4, [pc, #88]	; (14908 <k_sched_lock+0xa4>)
   148b0:	68a3      	ldr	r3, [r4, #8]
   148b2:	7bdb      	ldrb	r3, [r3, #15]
   148b4:	2b01      	cmp	r3, #1
   148b6:	d108      	bne.n	148ca <k_sched_lock+0x66>
   148b8:	4912      	ldr	r1, [pc, #72]	; (14904 <k_sched_lock+0xa0>)
   148ba:	4811      	ldr	r0, [pc, #68]	; (14900 <k_sched_lock+0x9c>)
   148bc:	22fe      	movs	r2, #254	; 0xfe
   148be:	f003 fde0 	bl	18482 <printk>
   148c2:	21fe      	movs	r1, #254	; 0xfe
   148c4:	480f      	ldr	r0, [pc, #60]	; (14904 <k_sched_lock+0xa0>)
   148c6:	f003 fea5 	bl	18614 <assert_post_action>
	--_current->base.sched_locked;
   148ca:	68a2      	ldr	r2, [r4, #8]
   148cc:	7bd3      	ldrb	r3, [r2, #15]
   148ce:	3b01      	subs	r3, #1
   148d0:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   148d2:	4809      	ldr	r0, [pc, #36]	; (148f8 <k_sched_lock+0x94>)
   148d4:	f7ff fbe8 	bl	140a8 <z_spin_unlock_valid>
   148d8:	b940      	cbnz	r0, 148ec <k_sched_lock+0x88>
   148da:	4908      	ldr	r1, [pc, #32]	; (148fc <k_sched_lock+0x98>)
   148dc:	4808      	ldr	r0, [pc, #32]	; (14900 <k_sched_lock+0x9c>)
   148de:	22ac      	movs	r2, #172	; 0xac
   148e0:	f003 fdcf 	bl	18482 <printk>
   148e4:	21ac      	movs	r1, #172	; 0xac
   148e6:	4805      	ldr	r0, [pc, #20]	; (148fc <k_sched_lock+0x98>)
   148e8:	f003 fe94 	bl	18614 <assert_post_action>
	__asm__ volatile(
   148ec:	f385 8811 	msr	BASEPRI, r5
   148f0:	f3bf 8f6f 	isb	sy
}
   148f4:	bd38      	pop	{r3, r4, r5, pc}
   148f6:	bf00      	nop
   148f8:	20000a18 	.word	0x20000a18
   148fc:	000191d0 	.word	0x000191d0
   14900:	00019196 	.word	0x00019196
   14904:	0001a03e 	.word	0x0001a03e
   14908:	200009d4 	.word	0x200009d4

0001490c <k_sched_unlock>:
{
   1490c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1490e:	f04f 0320 	mov.w	r3, #32
   14912:	f3ef 8511 	mrs	r5, BASEPRI
   14916:	f383 8811 	msr	BASEPRI, r3
   1491a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1491e:	4824      	ldr	r0, [pc, #144]	; (149b0 <k_sched_unlock+0xa4>)
   14920:	f7ff fbb4 	bl	1408c <z_spin_lock_valid>
   14924:	b940      	cbnz	r0, 14938 <k_sched_unlock+0x2c>
   14926:	4923      	ldr	r1, [pc, #140]	; (149b4 <k_sched_unlock+0xa8>)
   14928:	4823      	ldr	r0, [pc, #140]	; (149b8 <k_sched_unlock+0xac>)
   1492a:	2281      	movs	r2, #129	; 0x81
   1492c:	f003 fda9 	bl	18482 <printk>
   14930:	2181      	movs	r1, #129	; 0x81
   14932:	4820      	ldr	r0, [pc, #128]	; (149b4 <k_sched_unlock+0xa8>)
   14934:	f003 fe6e 	bl	18614 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   14938:	4c20      	ldr	r4, [pc, #128]	; (149bc <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1493a:	481d      	ldr	r0, [pc, #116]	; (149b0 <k_sched_unlock+0xa4>)
   1493c:	f7ff fbc2 	bl	140c4 <z_spin_lock_set_owner>
   14940:	68a3      	ldr	r3, [r4, #8]
   14942:	7bdb      	ldrb	r3, [r3, #15]
   14944:	b953      	cbnz	r3, 1495c <k_sched_unlock+0x50>
   14946:	491e      	ldr	r1, [pc, #120]	; (149c0 <k_sched_unlock+0xb4>)
   14948:	481b      	ldr	r0, [pc, #108]	; (149b8 <k_sched_unlock+0xac>)
   1494a:	f44f 7251 	mov.w	r2, #836	; 0x344
   1494e:	f003 fd98 	bl	18482 <printk>
   14952:	f44f 7151 	mov.w	r1, #836	; 0x344
   14956:	481a      	ldr	r0, [pc, #104]	; (149c0 <k_sched_unlock+0xb4>)
   14958:	f003 fe5c 	bl	18614 <assert_post_action>
   1495c:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   14960:	b153      	cbz	r3, 14978 <k_sched_unlock+0x6c>
   14962:	4917      	ldr	r1, [pc, #92]	; (149c0 <k_sched_unlock+0xb4>)
   14964:	4814      	ldr	r0, [pc, #80]	; (149b8 <k_sched_unlock+0xac>)
   14966:	f240 3245 	movw	r2, #837	; 0x345
   1496a:	f003 fd8a 	bl	18482 <printk>
   1496e:	f240 3145 	movw	r1, #837	; 0x345
   14972:	4813      	ldr	r0, [pc, #76]	; (149c0 <k_sched_unlock+0xb4>)
   14974:	f003 fe4e 	bl	18614 <assert_post_action>
		++_current->base.sched_locked;
   14978:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1497a:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1497c:	7bd3      	ldrb	r3, [r2, #15]
   1497e:	3301      	adds	r3, #1
   14980:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   14982:	f7ff fdef 	bl	14564 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14986:	480a      	ldr	r0, [pc, #40]	; (149b0 <k_sched_unlock+0xa4>)
   14988:	f7ff fb8e 	bl	140a8 <z_spin_unlock_valid>
   1498c:	b940      	cbnz	r0, 149a0 <k_sched_unlock+0x94>
   1498e:	4909      	ldr	r1, [pc, #36]	; (149b4 <k_sched_unlock+0xa8>)
   14990:	4809      	ldr	r0, [pc, #36]	; (149b8 <k_sched_unlock+0xac>)
   14992:	22ac      	movs	r2, #172	; 0xac
   14994:	f003 fd75 	bl	18482 <printk>
   14998:	21ac      	movs	r1, #172	; 0xac
   1499a:	4806      	ldr	r0, [pc, #24]	; (149b4 <k_sched_unlock+0xa8>)
   1499c:	f003 fe3a 	bl	18614 <assert_post_action>
	__asm__ volatile(
   149a0:	f385 8811 	msr	BASEPRI, r5
   149a4:	f3bf 8f6f 	isb	sy
}
   149a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   149ac:	f004 b843 	b.w	18a36 <z_reschedule_unlocked>
   149b0:	20000a18 	.word	0x20000a18
   149b4:	000191d0 	.word	0x000191d0
   149b8:	00019196 	.word	0x00019196
   149bc:	200009d4 	.word	0x200009d4
   149c0:	0001a089 	.word	0x0001a089

000149c4 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   149c4:	4b0b      	ldr	r3, [pc, #44]	; (149f4 <z_priq_dumb_remove+0x30>)
{
   149c6:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   149c8:	4299      	cmp	r1, r3
{
   149ca:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   149cc:	d10a      	bne.n	149e4 <z_priq_dumb_remove+0x20>
   149ce:	490a      	ldr	r1, [pc, #40]	; (149f8 <z_priq_dumb_remove+0x34>)
   149d0:	480a      	ldr	r0, [pc, #40]	; (149fc <z_priq_dumb_remove+0x38>)
   149d2:	f240 32b5 	movw	r2, #949	; 0x3b5
   149d6:	f003 fd54 	bl	18482 <printk>
   149da:	f240 31b5 	movw	r1, #949	; 0x3b5
   149de:	4806      	ldr	r0, [pc, #24]	; (149f8 <z_priq_dumb_remove+0x34>)
   149e0:	f003 fe18 	bl	18614 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   149e4:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   149e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   149ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   149ec:	2300      	movs	r3, #0
	node->prev = NULL;
   149ee:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   149f2:	bd10      	pop	{r4, pc}
   149f4:	20000120 	.word	0x20000120
   149f8:	0001a089 	.word	0x0001a089
   149fc:	00019196 	.word	0x00019196

00014a00 <unready_thread>:
{
   14a00:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   14a02:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   14a06:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   14a08:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   14a0a:	7b43      	ldrb	r3, [r0, #13]
   14a0c:	da06      	bge.n	14a1c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   14a12:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14a14:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   14a16:	4806      	ldr	r0, [pc, #24]	; (14a30 <unready_thread+0x30>)
   14a18:	f7ff ffd4 	bl	149c4 <z_priq_dumb_remove>
	update_cache(thread == _current);
   14a1c:	4b05      	ldr	r3, [pc, #20]	; (14a34 <unready_thread+0x34>)
   14a1e:	6898      	ldr	r0, [r3, #8]
   14a20:	1b03      	subs	r3, r0, r4
   14a22:	4258      	negs	r0, r3
   14a24:	4158      	adcs	r0, r3
}
   14a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   14a2a:	f7ff bd9b 	b.w	14564 <update_cache>
   14a2e:	bf00      	nop
   14a30:	200009fc 	.word	0x200009fc
   14a34:	200009d4 	.word	0x200009d4

00014a38 <add_to_waitq_locked>:
{
   14a38:	b538      	push	{r3, r4, r5, lr}
   14a3a:	4604      	mov	r4, r0
   14a3c:	460d      	mov	r5, r1
	unready_thread(thread);
   14a3e:	f7ff ffdf 	bl	14a00 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   14a42:	7b63      	ldrb	r3, [r4, #13]
   14a44:	f043 0302 	orr.w	r3, r3, #2
   14a48:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   14a4a:	b35d      	cbz	r5, 14aa4 <add_to_waitq_locked+0x6c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14a4c:	4b16      	ldr	r3, [pc, #88]	; (14aa8 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
   14a4e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14a50:	429c      	cmp	r4, r3
   14a52:	d10a      	bne.n	14a6a <add_to_waitq_locked+0x32>
   14a54:	4915      	ldr	r1, [pc, #84]	; (14aac <add_to_waitq_locked+0x74>)
   14a56:	4816      	ldr	r0, [pc, #88]	; (14ab0 <add_to_waitq_locked+0x78>)
   14a58:	f240 32a6 	movw	r2, #934	; 0x3a6
   14a5c:	f003 fd11 	bl	18482 <printk>
   14a60:	f240 31a6 	movw	r1, #934	; 0x3a6
   14a64:	4811      	ldr	r0, [pc, #68]	; (14aac <add_to_waitq_locked+0x74>)
   14a66:	f003 fdd5 	bl	18614 <assert_post_action>
	return list->head == list;
   14a6a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14a6c:	429d      	cmp	r5, r3
   14a6e:	d109      	bne.n	14a84 <add_to_waitq_locked+0x4c>
	sys_dnode_t *const tail = list->tail;
   14a70:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   14a72:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   14a76:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14a78:	606c      	str	r4, [r5, #4]
}
   14a7a:	e013      	b.n	14aa4 <add_to_waitq_locked+0x6c>
	return (node == list->tail) ? NULL : node->next;
   14a7c:	686a      	ldr	r2, [r5, #4]
   14a7e:	429a      	cmp	r2, r3
   14a80:	d0f6      	beq.n	14a70 <add_to_waitq_locked+0x38>
   14a82:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14a84:	2b00      	cmp	r3, #0
   14a86:	d0f3      	beq.n	14a70 <add_to_waitq_locked+0x38>
	int32_t b1 = thread_1->base.prio;
   14a88:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   14a8c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   14a90:	4291      	cmp	r1, r2
   14a92:	d0f3      	beq.n	14a7c <add_to_waitq_locked+0x44>
		return b2 - b1;
   14a94:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   14a96:	2a00      	cmp	r2, #0
   14a98:	ddf0      	ble.n	14a7c <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   14a9a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14a9c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   14aa0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   14aa2:	605c      	str	r4, [r3, #4]
}
   14aa4:	bd38      	pop	{r3, r4, r5, pc}
   14aa6:	bf00      	nop
   14aa8:	20000120 	.word	0x20000120
   14aac:	0001a089 	.word	0x0001a089
   14ab0:	00019196 	.word	0x00019196

00014ab4 <pend>:
{
   14ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ab8:	4604      	mov	r4, r0
   14aba:	4688      	mov	r8, r1
   14abc:	4616      	mov	r6, r2
   14abe:	461d      	mov	r5, r3
	__asm__ volatile(
   14ac0:	f04f 0320 	mov.w	r3, #32
   14ac4:	f3ef 8711 	mrs	r7, BASEPRI
   14ac8:	f383 8811 	msr	BASEPRI, r3
   14acc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14ad0:	481a      	ldr	r0, [pc, #104]	; (14b3c <pend+0x88>)
   14ad2:	f7ff fadb 	bl	1408c <z_spin_lock_valid>
   14ad6:	b940      	cbnz	r0, 14aea <pend+0x36>
   14ad8:	4919      	ldr	r1, [pc, #100]	; (14b40 <pend+0x8c>)
   14ada:	481a      	ldr	r0, [pc, #104]	; (14b44 <pend+0x90>)
   14adc:	2281      	movs	r2, #129	; 0x81
   14ade:	f003 fcd0 	bl	18482 <printk>
   14ae2:	2181      	movs	r1, #129	; 0x81
   14ae4:	4816      	ldr	r0, [pc, #88]	; (14b40 <pend+0x8c>)
   14ae6:	f003 fd95 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14aea:	4814      	ldr	r0, [pc, #80]	; (14b3c <pend+0x88>)
   14aec:	f7ff faea 	bl	140c4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   14af0:	4620      	mov	r0, r4
   14af2:	4641      	mov	r1, r8
   14af4:	f7ff ffa0 	bl	14a38 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14af8:	4810      	ldr	r0, [pc, #64]	; (14b3c <pend+0x88>)
   14afa:	f7ff fad5 	bl	140a8 <z_spin_unlock_valid>
   14afe:	b940      	cbnz	r0, 14b12 <pend+0x5e>
   14b00:	490f      	ldr	r1, [pc, #60]	; (14b40 <pend+0x8c>)
   14b02:	4810      	ldr	r0, [pc, #64]	; (14b44 <pend+0x90>)
   14b04:	22ac      	movs	r2, #172	; 0xac
   14b06:	f003 fcbc 	bl	18482 <printk>
   14b0a:	21ac      	movs	r1, #172	; 0xac
   14b0c:	480c      	ldr	r0, [pc, #48]	; (14b40 <pend+0x8c>)
   14b0e:	f003 fd81 	bl	18614 <assert_post_action>
	__asm__ volatile(
   14b12:	f387 8811 	msr	BASEPRI, r7
   14b16:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14b1a:	f1b5 3fff 	cmp.w	r5, #4294967295
   14b1e:	bf08      	it	eq
   14b20:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   14b24:	d008      	beq.n	14b38 <pend+0x84>
   14b26:	4632      	mov	r2, r6
   14b28:	462b      	mov	r3, r5
   14b2a:	f104 0018 	add.w	r0, r4, #24
   14b2e:	4906      	ldr	r1, [pc, #24]	; (14b48 <pend+0x94>)
}
   14b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14b34:	f000 bcb4 	b.w	154a0 <z_add_timeout>
   14b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b3c:	20000a18 	.word	0x20000a18
   14b40:	000191d0 	.word	0x000191d0
   14b44:	00019196 	.word	0x00019196
   14b48:	00014ef9 	.word	0x00014ef9

00014b4c <z_pend_curr>:
{
   14b4c:	b538      	push	{r3, r4, r5, lr}
   14b4e:	4605      	mov	r5, r0
	pending_current = _current;
   14b50:	4b0d      	ldr	r3, [pc, #52]	; (14b88 <z_pend_curr+0x3c>)
{
   14b52:	460c      	mov	r4, r1
	pending_current = _current;
   14b54:	6898      	ldr	r0, [r3, #8]
   14b56:	4b0d      	ldr	r3, [pc, #52]	; (14b8c <z_pend_curr+0x40>)
{
   14b58:	4611      	mov	r1, r2
	pending_current = _current;
   14b5a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   14b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14b60:	f7ff ffa8 	bl	14ab4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14b64:	4628      	mov	r0, r5
   14b66:	f7ff fa9f 	bl	140a8 <z_spin_unlock_valid>
   14b6a:	b940      	cbnz	r0, 14b7e <z_pend_curr+0x32>
   14b6c:	4908      	ldr	r1, [pc, #32]	; (14b90 <z_pend_curr+0x44>)
   14b6e:	4809      	ldr	r0, [pc, #36]	; (14b94 <z_pend_curr+0x48>)
   14b70:	22c3      	movs	r2, #195	; 0xc3
   14b72:	f003 fc86 	bl	18482 <printk>
   14b76:	21c3      	movs	r1, #195	; 0xc3
   14b78:	4805      	ldr	r0, [pc, #20]	; (14b90 <z_pend_curr+0x44>)
   14b7a:	f003 fd4b 	bl	18614 <assert_post_action>
   14b7e:	4620      	mov	r0, r4
}
   14b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14b84:	f7fd bb98 	b.w	122b8 <arch_swap>
   14b88:	200009d4 	.word	0x200009d4
   14b8c:	20000a0c 	.word	0x20000a0c
   14b90:	000191d0 	.word	0x000191d0
   14b94:	00019196 	.word	0x00019196

00014b98 <z_impl_k_thread_suspend>:
{
   14b98:	b570      	push	{r4, r5, r6, lr}
   14b9a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   14b9c:	3018      	adds	r0, #24
   14b9e:	f000 fd2d 	bl	155fc <z_abort_timeout>
	__asm__ volatile(
   14ba2:	f04f 0320 	mov.w	r3, #32
   14ba6:	f3ef 8611 	mrs	r6, BASEPRI
   14baa:	f383 8811 	msr	BASEPRI, r3
   14bae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14bb2:	4820      	ldr	r0, [pc, #128]	; (14c34 <z_impl_k_thread_suspend+0x9c>)
   14bb4:	f7ff fa6a 	bl	1408c <z_spin_lock_valid>
   14bb8:	b940      	cbnz	r0, 14bcc <z_impl_k_thread_suspend+0x34>
   14bba:	491f      	ldr	r1, [pc, #124]	; (14c38 <z_impl_k_thread_suspend+0xa0>)
   14bbc:	481f      	ldr	r0, [pc, #124]	; (14c3c <z_impl_k_thread_suspend+0xa4>)
   14bbe:	2281      	movs	r2, #129	; 0x81
   14bc0:	f003 fc5f 	bl	18482 <printk>
   14bc4:	2181      	movs	r1, #129	; 0x81
   14bc6:	481c      	ldr	r0, [pc, #112]	; (14c38 <z_impl_k_thread_suspend+0xa0>)
   14bc8:	f003 fd24 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14bcc:	4819      	ldr	r0, [pc, #100]	; (14c34 <z_impl_k_thread_suspend+0x9c>)
   14bce:	f7ff fa79 	bl	140c4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   14bd2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   14bd6:	7b63      	ldrb	r3, [r4, #13]
   14bd8:	2a00      	cmp	r2, #0
   14bda:	da06      	bge.n	14bea <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   14be0:	4621      	mov	r1, r4
   14be2:	4817      	ldr	r0, [pc, #92]	; (14c40 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14be4:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   14be6:	f7ff feed 	bl	149c4 <z_priq_dumb_remove>
		update_cache(thread == _current);
   14bea:	4d16      	ldr	r5, [pc, #88]	; (14c44 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   14bec:	7b63      	ldrb	r3, [r4, #13]
   14bee:	68a8      	ldr	r0, [r5, #8]
   14bf0:	f043 0310 	orr.w	r3, r3, #16
   14bf4:	7363      	strb	r3, [r4, #13]
   14bf6:	1b03      	subs	r3, r0, r4
   14bf8:	4258      	negs	r0, r3
   14bfa:	4158      	adcs	r0, r3
   14bfc:	f7ff fcb2 	bl	14564 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14c00:	480c      	ldr	r0, [pc, #48]	; (14c34 <z_impl_k_thread_suspend+0x9c>)
   14c02:	f7ff fa51 	bl	140a8 <z_spin_unlock_valid>
   14c06:	b940      	cbnz	r0, 14c1a <z_impl_k_thread_suspend+0x82>
   14c08:	490b      	ldr	r1, [pc, #44]	; (14c38 <z_impl_k_thread_suspend+0xa0>)
   14c0a:	480c      	ldr	r0, [pc, #48]	; (14c3c <z_impl_k_thread_suspend+0xa4>)
   14c0c:	22ac      	movs	r2, #172	; 0xac
   14c0e:	f003 fc38 	bl	18482 <printk>
   14c12:	21ac      	movs	r1, #172	; 0xac
   14c14:	4808      	ldr	r0, [pc, #32]	; (14c38 <z_impl_k_thread_suspend+0xa0>)
   14c16:	f003 fcfd 	bl	18614 <assert_post_action>
	__asm__ volatile(
   14c1a:	f386 8811 	msr	BASEPRI, r6
   14c1e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   14c22:	68ab      	ldr	r3, [r5, #8]
   14c24:	42a3      	cmp	r3, r4
   14c26:	d103      	bne.n	14c30 <z_impl_k_thread_suspend+0x98>
}
   14c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   14c2c:	f003 bf03 	b.w	18a36 <z_reschedule_unlocked>
}
   14c30:	bd70      	pop	{r4, r5, r6, pc}
   14c32:	bf00      	nop
   14c34:	20000a18 	.word	0x20000a18
   14c38:	000191d0 	.word	0x000191d0
   14c3c:	00019196 	.word	0x00019196
   14c40:	200009fc 	.word	0x200009fc
   14c44:	200009d4 	.word	0x200009d4

00014c48 <move_thread_to_end_of_prio_q>:
{
   14c48:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   14c4a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   14c4e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   14c50:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   14c52:	7b43      	ldrb	r3, [r0, #13]
   14c54:	da06      	bge.n	14c64 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   14c5a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14c5c:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   14c5e:	481e      	ldr	r0, [pc, #120]	; (14cd8 <move_thread_to_end_of_prio_q+0x90>)
   14c60:	f7ff feb0 	bl	149c4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   14c64:	7b63      	ldrb	r3, [r4, #13]
   14c66:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14c6a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14c6c:	4b1b      	ldr	r3, [pc, #108]	; (14cdc <move_thread_to_end_of_prio_q+0x94>)
   14c6e:	429c      	cmp	r4, r3
   14c70:	d10a      	bne.n	14c88 <move_thread_to_end_of_prio_q+0x40>
   14c72:	491b      	ldr	r1, [pc, #108]	; (14ce0 <move_thread_to_end_of_prio_q+0x98>)
   14c74:	481b      	ldr	r0, [pc, #108]	; (14ce4 <move_thread_to_end_of_prio_q+0x9c>)
   14c76:	f240 32a6 	movw	r2, #934	; 0x3a6
   14c7a:	f003 fc02 	bl	18482 <printk>
   14c7e:	f240 31a6 	movw	r1, #934	; 0x3a6
   14c82:	4817      	ldr	r0, [pc, #92]	; (14ce0 <move_thread_to_end_of_prio_q+0x98>)
   14c84:	f003 fcc6 	bl	18614 <assert_post_action>
	return list->head == list;
   14c88:	4a17      	ldr	r2, [pc, #92]	; (14ce8 <move_thread_to_end_of_prio_q+0xa0>)
   14c8a:	4610      	mov	r0, r2
   14c8c:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node == list->tail) ? NULL : node->next;
   14c90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14c92:	4283      	cmp	r3, r0
   14c94:	d107      	bne.n	14ca6 <move_thread_to_end_of_prio_q+0x5e>
	node->prev = tail;
   14c96:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   14c9a:	600c      	str	r4, [r1, #0]
	list->tail = node;
   14c9c:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   14c9e:	e012      	b.n	14cc6 <move_thread_to_end_of_prio_q+0x7e>
	return (node == list->tail) ? NULL : node->next;
   14ca0:	4299      	cmp	r1, r3
   14ca2:	d0f8      	beq.n	14c96 <move_thread_to_end_of_prio_q+0x4e>
   14ca4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14ca6:	2b00      	cmp	r3, #0
   14ca8:	d0f5      	beq.n	14c96 <move_thread_to_end_of_prio_q+0x4e>
	int32_t b1 = thread_1->base.prio;
   14caa:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   14cae:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   14cb2:	42ae      	cmp	r6, r5
   14cb4:	d0f4      	beq.n	14ca0 <move_thread_to_end_of_prio_q+0x58>
		return b2 - b1;
   14cb6:	1bad      	subs	r5, r5, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   14cb8:	2d00      	cmp	r5, #0
   14cba:	ddf1      	ble.n	14ca0 <move_thread_to_end_of_prio_q+0x58>
	sys_dnode_t *const prev = successor->prev;
   14cbc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   14cbe:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   14cc2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   14cc4:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   14cc6:	6890      	ldr	r0, [r2, #8]
   14cc8:	1b03      	subs	r3, r0, r4
   14cca:	4258      	negs	r0, r3
   14ccc:	4158      	adcs	r0, r3
}
   14cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   14cd2:	f7ff bc47 	b.w	14564 <update_cache>
   14cd6:	bf00      	nop
   14cd8:	200009fc 	.word	0x200009fc
   14cdc:	20000120 	.word	0x20000120
   14ce0:	0001a089 	.word	0x0001a089
   14ce4:	00019196 	.word	0x00019196
   14ce8:	200009d4 	.word	0x200009d4

00014cec <z_time_slice>:
{
   14cec:	b538      	push	{r3, r4, r5, lr}
   14cee:	4604      	mov	r4, r0
	__asm__ volatile(
   14cf0:	f04f 0320 	mov.w	r3, #32
   14cf4:	f3ef 8511 	mrs	r5, BASEPRI
   14cf8:	f383 8811 	msr	BASEPRI, r3
   14cfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14d00:	4824      	ldr	r0, [pc, #144]	; (14d94 <z_time_slice+0xa8>)
   14d02:	f7ff f9c3 	bl	1408c <z_spin_lock_valid>
   14d06:	b940      	cbnz	r0, 14d1a <z_time_slice+0x2e>
   14d08:	4923      	ldr	r1, [pc, #140]	; (14d98 <z_time_slice+0xac>)
   14d0a:	4824      	ldr	r0, [pc, #144]	; (14d9c <z_time_slice+0xb0>)
   14d0c:	2281      	movs	r2, #129	; 0x81
   14d0e:	f003 fbb8 	bl	18482 <printk>
   14d12:	2181      	movs	r1, #129	; 0x81
   14d14:	4820      	ldr	r0, [pc, #128]	; (14d98 <z_time_slice+0xac>)
   14d16:	f003 fc7d 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14d1a:	481e      	ldr	r0, [pc, #120]	; (14d94 <z_time_slice+0xa8>)
   14d1c:	f7ff f9d2 	bl	140c4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   14d20:	4b1f      	ldr	r3, [pc, #124]	; (14da0 <z_time_slice+0xb4>)
   14d22:	4a20      	ldr	r2, [pc, #128]	; (14da4 <z_time_slice+0xb8>)
   14d24:	6898      	ldr	r0, [r3, #8]
   14d26:	6811      	ldr	r1, [r2, #0]
   14d28:	4288      	cmp	r0, r1
   14d2a:	d113      	bne.n	14d54 <z_time_slice+0x68>
			z_reset_time_slice();
   14d2c:	f7ff fc04 	bl	14538 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14d30:	4818      	ldr	r0, [pc, #96]	; (14d94 <z_time_slice+0xa8>)
   14d32:	f7ff f9b9 	bl	140a8 <z_spin_unlock_valid>
   14d36:	b940      	cbnz	r0, 14d4a <z_time_slice+0x5e>
   14d38:	4917      	ldr	r1, [pc, #92]	; (14d98 <z_time_slice+0xac>)
   14d3a:	4818      	ldr	r0, [pc, #96]	; (14d9c <z_time_slice+0xb0>)
   14d3c:	22ac      	movs	r2, #172	; 0xac
   14d3e:	f003 fba0 	bl	18482 <printk>
   14d42:	21ac      	movs	r1, #172	; 0xac
   14d44:	4814      	ldr	r0, [pc, #80]	; (14d98 <z_time_slice+0xac>)
   14d46:	f003 fc65 	bl	18614 <assert_post_action>
	__asm__ volatile(
   14d4a:	f385 8811 	msr	BASEPRI, r5
   14d4e:	f3bf 8f6f 	isb	sy
}
   14d52:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   14d54:	2100      	movs	r1, #0
   14d56:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   14d58:	4a13      	ldr	r2, [pc, #76]	; (14da8 <z_time_slice+0xbc>)
   14d5a:	6812      	ldr	r2, [r2, #0]
   14d5c:	b1ba      	cbz	r2, 14d8e <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   14d5e:	89c2      	ldrh	r2, [r0, #14]
   14d60:	2a7f      	cmp	r2, #127	; 0x7f
   14d62:	d814      	bhi.n	14d8e <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   14d64:	7b42      	ldrb	r2, [r0, #13]
   14d66:	06d2      	lsls	r2, r2, #27
   14d68:	d111      	bne.n	14d8e <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   14d6a:	4a10      	ldr	r2, [pc, #64]	; (14dac <z_time_slice+0xc0>)
   14d6c:	f990 100e 	ldrsb.w	r1, [r0, #14]
   14d70:	6812      	ldr	r2, [r2, #0]
   14d72:	4291      	cmp	r1, r2
   14d74:	db0b      	blt.n	14d8e <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   14d76:	4a0e      	ldr	r2, [pc, #56]	; (14db0 <z_time_slice+0xc4>)
   14d78:	4290      	cmp	r0, r2
   14d7a:	d008      	beq.n	14d8e <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   14d7c:	691a      	ldr	r2, [r3, #16]
   14d7e:	42a2      	cmp	r2, r4
   14d80:	dc02      	bgt.n	14d88 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   14d82:	f7ff ff61 	bl	14c48 <move_thread_to_end_of_prio_q>
   14d86:	e7d1      	b.n	14d2c <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   14d88:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   14d8a:	611a      	str	r2, [r3, #16]
   14d8c:	e7d0      	b.n	14d30 <z_time_slice+0x44>
   14d8e:	2200      	movs	r2, #0
   14d90:	e7fb      	b.n	14d8a <z_time_slice+0x9e>
   14d92:	bf00      	nop
   14d94:	20000a18 	.word	0x20000a18
   14d98:	000191d0 	.word	0x000191d0
   14d9c:	00019196 	.word	0x00019196
   14da0:	200009d4 	.word	0x200009d4
   14da4:	20000a0c 	.word	0x20000a0c
   14da8:	20000a14 	.word	0x20000a14
   14dac:	20000a10 	.word	0x20000a10
   14db0:	20000120 	.word	0x20000120

00014db4 <z_set_prio>:
{
   14db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14db6:	4604      	mov	r4, r0
   14db8:	460d      	mov	r5, r1
	__asm__ volatile(
   14dba:	f04f 0320 	mov.w	r3, #32
   14dbe:	f3ef 8611 	mrs	r6, BASEPRI
   14dc2:	f383 8811 	msr	BASEPRI, r3
   14dc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14dca:	4835      	ldr	r0, [pc, #212]	; (14ea0 <z_set_prio+0xec>)
   14dcc:	f7ff f95e 	bl	1408c <z_spin_lock_valid>
   14dd0:	b940      	cbnz	r0, 14de4 <z_set_prio+0x30>
   14dd2:	4934      	ldr	r1, [pc, #208]	; (14ea4 <z_set_prio+0xf0>)
   14dd4:	4834      	ldr	r0, [pc, #208]	; (14ea8 <z_set_prio+0xf4>)
   14dd6:	2281      	movs	r2, #129	; 0x81
   14dd8:	f003 fb53 	bl	18482 <printk>
   14ddc:	2181      	movs	r1, #129	; 0x81
   14dde:	4831      	ldr	r0, [pc, #196]	; (14ea4 <z_set_prio+0xf0>)
   14de0:	f003 fc18 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14de4:	482e      	ldr	r0, [pc, #184]	; (14ea0 <z_set_prio+0xec>)
   14de6:	f7ff f96d 	bl	140c4 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   14dea:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   14dec:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14dee:	06da      	lsls	r2, r3, #27
   14df0:	d127      	bne.n	14e42 <z_set_prio+0x8e>
   14df2:	69a2      	ldr	r2, [r4, #24]
   14df4:	bb2a      	cbnz	r2, 14e42 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   14df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   14dfa:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   14dfc:	4621      	mov	r1, r4
   14dfe:	482b      	ldr	r0, [pc, #172]	; (14eac <z_set_prio+0xf8>)
   14e00:	f7ff fde0 	bl	149c4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   14e04:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   14e06:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   14e08:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14e0c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   14e0e:	4b28      	ldr	r3, [pc, #160]	; (14eb0 <z_set_prio+0xfc>)
   14e10:	429c      	cmp	r4, r3
   14e12:	d10a      	bne.n	14e2a <z_set_prio+0x76>
   14e14:	4927      	ldr	r1, [pc, #156]	; (14eb4 <z_set_prio+0x100>)
   14e16:	4824      	ldr	r0, [pc, #144]	; (14ea8 <z_set_prio+0xf4>)
   14e18:	f240 32a6 	movw	r2, #934	; 0x3a6
   14e1c:	f003 fb31 	bl	18482 <printk>
   14e20:	f240 31a6 	movw	r1, #934	; 0x3a6
   14e24:	4823      	ldr	r0, [pc, #140]	; (14eb4 <z_set_prio+0x100>)
   14e26:	f003 fbf5 	bl	18614 <assert_post_action>
	return list->head == list;
   14e2a:	4a23      	ldr	r2, [pc, #140]	; (14eb8 <z_set_prio+0x104>)
   14e2c:	4610      	mov	r0, r2
   14e2e:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14e32:	4283      	cmp	r3, r0
   14e34:	d132      	bne.n	14e9c <z_set_prio+0xe8>
	return (node == list->tail) ? NULL : node->next;
   14e36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	node->prev = tail;
   14e38:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   14e3c:	600c      	str	r4, [r1, #0]
	list->tail = node;
   14e3e:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   14e40:	e027      	b.n	14e92 <z_set_prio+0xde>
			thread->base.prio = prio;
   14e42:	73a5      	strb	r5, [r4, #14]
   14e44:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14e46:	4816      	ldr	r0, [pc, #88]	; (14ea0 <z_set_prio+0xec>)
   14e48:	f7ff f92e 	bl	140a8 <z_spin_unlock_valid>
   14e4c:	b940      	cbnz	r0, 14e60 <z_set_prio+0xac>
   14e4e:	4915      	ldr	r1, [pc, #84]	; (14ea4 <z_set_prio+0xf0>)
   14e50:	4815      	ldr	r0, [pc, #84]	; (14ea8 <z_set_prio+0xf4>)
   14e52:	22ac      	movs	r2, #172	; 0xac
   14e54:	f003 fb15 	bl	18482 <printk>
   14e58:	21ac      	movs	r1, #172	; 0xac
   14e5a:	4812      	ldr	r0, [pc, #72]	; (14ea4 <z_set_prio+0xf0>)
   14e5c:	f003 fbda 	bl	18614 <assert_post_action>
	__asm__ volatile(
   14e60:	f386 8811 	msr	BASEPRI, r6
   14e64:	f3bf 8f6f 	isb	sy
}
   14e68:	4620      	mov	r0, r4
   14e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   14e6c:	428b      	cmp	r3, r1
   14e6e:	d0e3      	beq.n	14e38 <z_set_prio+0x84>
   14e70:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14e72:	2b00      	cmp	r3, #0
   14e74:	d0e0      	beq.n	14e38 <z_set_prio+0x84>
	int32_t b1 = thread_1->base.prio;
   14e76:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   14e7a:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   14e7e:	42af      	cmp	r7, r5
   14e80:	d0f4      	beq.n	14e6c <z_set_prio+0xb8>
		return b2 - b1;
   14e82:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   14e84:	2d00      	cmp	r5, #0
   14e86:	ddf1      	ble.n	14e6c <z_set_prio+0xb8>
	sys_dnode_t *const prev = successor->prev;
   14e88:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14e8a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   14e8e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   14e90:	605c      	str	r4, [r3, #4]
			update_cache(1);
   14e92:	2001      	movs	r0, #1
   14e94:	f7ff fb66 	bl	14564 <update_cache>
   14e98:	2401      	movs	r4, #1
   14e9a:	e7d4      	b.n	14e46 <z_set_prio+0x92>
	return (node == list->tail) ? NULL : node->next;
   14e9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   14e9e:	e7e8      	b.n	14e72 <z_set_prio+0xbe>
   14ea0:	20000a18 	.word	0x20000a18
   14ea4:	000191d0 	.word	0x000191d0
   14ea8:	00019196 	.word	0x00019196
   14eac:	200009fc 	.word	0x200009fc
   14eb0:	20000120 	.word	0x20000120
   14eb4:	0001a089 	.word	0x0001a089
   14eb8:	200009d4 	.word	0x200009d4

00014ebc <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   14ebc:	6883      	ldr	r3, [r0, #8]
{
   14ebe:	b510      	push	{r4, lr}
   14ec0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   14ec2:	b953      	cbnz	r3, 14eda <unpend_thread_no_timeout+0x1e>
   14ec4:	490a      	ldr	r1, [pc, #40]	; (14ef0 <unpend_thread_no_timeout+0x34>)
   14ec6:	480b      	ldr	r0, [pc, #44]	; (14ef4 <unpend_thread_no_timeout+0x38>)
   14ec8:	f240 2242 	movw	r2, #578	; 0x242
   14ecc:	f003 fad9 	bl	18482 <printk>
   14ed0:	f240 2142 	movw	r1, #578	; 0x242
   14ed4:	4806      	ldr	r0, [pc, #24]	; (14ef0 <unpend_thread_no_timeout+0x34>)
   14ed6:	f003 fb9d 	bl	18614 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   14eda:	4621      	mov	r1, r4
   14edc:	68a0      	ldr	r0, [r4, #8]
   14ede:	f7ff fd71 	bl	149c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14ee2:	7b63      	ldrb	r3, [r4, #13]
   14ee4:	f023 0302 	bic.w	r3, r3, #2
   14ee8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   14eea:	2300      	movs	r3, #0
   14eec:	60a3      	str	r3, [r4, #8]
}
   14eee:	bd10      	pop	{r4, pc}
   14ef0:	0001a089 	.word	0x0001a089
   14ef4:	00019196 	.word	0x00019196

00014ef8 <z_thread_timeout>:
{
   14ef8:	b570      	push	{r4, r5, r6, lr}
   14efa:	4604      	mov	r4, r0
	__asm__ volatile(
   14efc:	f04f 0320 	mov.w	r3, #32
   14f00:	f3ef 8611 	mrs	r6, BASEPRI
   14f04:	f383 8811 	msr	BASEPRI, r3
   14f08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14f0c:	481b      	ldr	r0, [pc, #108]	; (14f7c <z_thread_timeout+0x84>)
   14f0e:	f7ff f8bd 	bl	1408c <z_spin_lock_valid>
   14f12:	b940      	cbnz	r0, 14f26 <z_thread_timeout+0x2e>
   14f14:	491a      	ldr	r1, [pc, #104]	; (14f80 <z_thread_timeout+0x88>)
   14f16:	481b      	ldr	r0, [pc, #108]	; (14f84 <z_thread_timeout+0x8c>)
   14f18:	2281      	movs	r2, #129	; 0x81
   14f1a:	f003 fab2 	bl	18482 <printk>
   14f1e:	2181      	movs	r1, #129	; 0x81
   14f20:	4817      	ldr	r0, [pc, #92]	; (14f80 <z_thread_timeout+0x88>)
   14f22:	f003 fb77 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14f26:	4815      	ldr	r0, [pc, #84]	; (14f7c <z_thread_timeout+0x84>)
   14f28:	f7ff f8cc 	bl	140c4 <z_spin_lock_set_owner>
		if (!killed) {
   14f2c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   14f30:	f013 0f28 	tst.w	r3, #40	; 0x28
   14f34:	d110      	bne.n	14f58 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   14f36:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   14f3a:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   14f3e:	b113      	cbz	r3, 14f46 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   14f40:	4628      	mov	r0, r5
   14f42:	f7ff ffbb 	bl	14ebc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   14f46:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   14f4a:	4628      	mov	r0, r5
   14f4c:	f023 0314 	bic.w	r3, r3, #20
   14f50:	f804 3c0b 	strb.w	r3, [r4, #-11]
   14f54:	f7ff fb36 	bl	145c4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14f58:	4808      	ldr	r0, [pc, #32]	; (14f7c <z_thread_timeout+0x84>)
   14f5a:	f7ff f8a5 	bl	140a8 <z_spin_unlock_valid>
   14f5e:	b940      	cbnz	r0, 14f72 <z_thread_timeout+0x7a>
   14f60:	4907      	ldr	r1, [pc, #28]	; (14f80 <z_thread_timeout+0x88>)
   14f62:	4808      	ldr	r0, [pc, #32]	; (14f84 <z_thread_timeout+0x8c>)
   14f64:	22ac      	movs	r2, #172	; 0xac
   14f66:	f003 fa8c 	bl	18482 <printk>
   14f6a:	21ac      	movs	r1, #172	; 0xac
   14f6c:	4804      	ldr	r0, [pc, #16]	; (14f80 <z_thread_timeout+0x88>)
   14f6e:	f003 fb51 	bl	18614 <assert_post_action>
	__asm__ volatile(
   14f72:	f386 8811 	msr	BASEPRI, r6
   14f76:	f3bf 8f6f 	isb	sy
}
   14f7a:	bd70      	pop	{r4, r5, r6, pc}
   14f7c:	20000a18 	.word	0x20000a18
   14f80:	000191d0 	.word	0x000191d0
   14f84:	00019196 	.word	0x00019196

00014f88 <z_unpend_first_thread>:
{
   14f88:	b570      	push	{r4, r5, r6, lr}
   14f8a:	4605      	mov	r5, r0
	__asm__ volatile(
   14f8c:	f04f 0320 	mov.w	r3, #32
   14f90:	f3ef 8611 	mrs	r6, BASEPRI
   14f94:	f383 8811 	msr	BASEPRI, r3
   14f98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14f9c:	4817      	ldr	r0, [pc, #92]	; (14ffc <z_unpend_first_thread+0x74>)
   14f9e:	f7ff f875 	bl	1408c <z_spin_lock_valid>
   14fa2:	b940      	cbnz	r0, 14fb6 <z_unpend_first_thread+0x2e>
   14fa4:	4916      	ldr	r1, [pc, #88]	; (15000 <z_unpend_first_thread+0x78>)
   14fa6:	4817      	ldr	r0, [pc, #92]	; (15004 <z_unpend_first_thread+0x7c>)
   14fa8:	2281      	movs	r2, #129	; 0x81
   14faa:	f003 fa6a 	bl	18482 <printk>
   14fae:	2181      	movs	r1, #129	; 0x81
   14fb0:	4813      	ldr	r0, [pc, #76]	; (15000 <z_unpend_first_thread+0x78>)
   14fb2:	f003 fb2f 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   14fb6:	4811      	ldr	r0, [pc, #68]	; (14ffc <z_unpend_first_thread+0x74>)
   14fb8:	f7ff f884 	bl	140c4 <z_spin_lock_set_owner>
	return list->head == list;
   14fbc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14fbe:	42a5      	cmp	r5, r4
   14fc0:	d01a      	beq.n	14ff8 <z_unpend_first_thread+0x70>
		if (thread != NULL) {
   14fc2:	b134      	cbz	r4, 14fd2 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   14fc4:	4620      	mov	r0, r4
   14fc6:	f7ff ff79 	bl	14ebc <unpend_thread_no_timeout>
   14fca:	f104 0018 	add.w	r0, r4, #24
   14fce:	f000 fb15 	bl	155fc <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14fd2:	480a      	ldr	r0, [pc, #40]	; (14ffc <z_unpend_first_thread+0x74>)
   14fd4:	f7ff f868 	bl	140a8 <z_spin_unlock_valid>
   14fd8:	b940      	cbnz	r0, 14fec <z_unpend_first_thread+0x64>
   14fda:	4909      	ldr	r1, [pc, #36]	; (15000 <z_unpend_first_thread+0x78>)
   14fdc:	4809      	ldr	r0, [pc, #36]	; (15004 <z_unpend_first_thread+0x7c>)
   14fde:	22ac      	movs	r2, #172	; 0xac
   14fe0:	f003 fa4f 	bl	18482 <printk>
   14fe4:	21ac      	movs	r1, #172	; 0xac
   14fe6:	4806      	ldr	r0, [pc, #24]	; (15000 <z_unpend_first_thread+0x78>)
   14fe8:	f003 fb14 	bl	18614 <assert_post_action>
	__asm__ volatile(
   14fec:	f386 8811 	msr	BASEPRI, r6
   14ff0:	f3bf 8f6f 	isb	sy
}
   14ff4:	4620      	mov	r0, r4
   14ff6:	bd70      	pop	{r4, r5, r6, pc}
   14ff8:	2400      	movs	r4, #0
   14ffa:	e7ea      	b.n	14fd2 <z_unpend_first_thread+0x4a>
   14ffc:	20000a18 	.word	0x20000a18
   15000:	000191d0 	.word	0x000191d0
   15004:	00019196 	.word	0x00019196

00015008 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   15008:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1500a:	4b04      	ldr	r3, [pc, #16]	; (1501c <z_sched_init+0x14>)
   1500c:	4608      	mov	r0, r1
   1500e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   15012:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   15016:	f7ff bb21 	b.w	1465c <k_sched_time_slice_set>
   1501a:	bf00      	nop
   1501c:	200009d4 	.word	0x200009d4

00015020 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   15020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15022:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   15026:	b153      	cbz	r3, 1503e <z_impl_k_yield+0x1e>
   15028:	4938      	ldr	r1, [pc, #224]	; (1510c <z_impl_k_yield+0xec>)
   1502a:	4839      	ldr	r0, [pc, #228]	; (15110 <z_impl_k_yield+0xf0>)
   1502c:	f240 42a1 	movw	r2, #1185	; 0x4a1
   15030:	f003 fa27 	bl	18482 <printk>
   15034:	f240 41a1 	movw	r1, #1185	; 0x4a1
   15038:	4834      	ldr	r0, [pc, #208]	; (1510c <z_impl_k_yield+0xec>)
   1503a:	f003 faeb 	bl	18614 <assert_post_action>
	__asm__ volatile(
   1503e:	f04f 0320 	mov.w	r3, #32
   15042:	f3ef 8611 	mrs	r6, BASEPRI
   15046:	f383 8811 	msr	BASEPRI, r3
   1504a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1504e:	4831      	ldr	r0, [pc, #196]	; (15114 <z_impl_k_yield+0xf4>)
   15050:	f7ff f81c 	bl	1408c <z_spin_lock_valid>
   15054:	b940      	cbnz	r0, 15068 <z_impl_k_yield+0x48>
   15056:	4930      	ldr	r1, [pc, #192]	; (15118 <z_impl_k_yield+0xf8>)
   15058:	482d      	ldr	r0, [pc, #180]	; (15110 <z_impl_k_yield+0xf0>)
   1505a:	2281      	movs	r2, #129	; 0x81
   1505c:	f003 fa11 	bl	18482 <printk>
   15060:	2181      	movs	r1, #129	; 0x81
   15062:	482d      	ldr	r0, [pc, #180]	; (15118 <z_impl_k_yield+0xf8>)
   15064:	f003 fad6 	bl	18614 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   15068:	4d2c      	ldr	r5, [pc, #176]	; (1511c <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   1506a:	482a      	ldr	r0, [pc, #168]	; (15114 <z_impl_k_yield+0xf4>)
   1506c:	f7ff f82a 	bl	140c4 <z_spin_lock_set_owner>
   15070:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
   15072:	f105 0028 	add.w	r0, r5, #40	; 0x28
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15076:	7b4b      	ldrb	r3, [r1, #13]
   15078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1507c:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   1507e:	f7ff fca1 	bl	149c4 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   15082:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   15084:	7b63      	ldrb	r3, [r4, #13]
   15086:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1508a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1508c:	4b24      	ldr	r3, [pc, #144]	; (15120 <z_impl_k_yield+0x100>)
   1508e:	429c      	cmp	r4, r3
   15090:	d10a      	bne.n	150a8 <z_impl_k_yield+0x88>
   15092:	491e      	ldr	r1, [pc, #120]	; (1510c <z_impl_k_yield+0xec>)
   15094:	481e      	ldr	r0, [pc, #120]	; (15110 <z_impl_k_yield+0xf0>)
   15096:	f240 32a6 	movw	r2, #934	; 0x3a6
   1509a:	f003 f9f2 	bl	18482 <printk>
   1509e:	f240 31a6 	movw	r1, #934	; 0x3a6
   150a2:	481a      	ldr	r0, [pc, #104]	; (1510c <z_impl_k_yield+0xec>)
   150a4:	f003 fab6 	bl	18614 <assert_post_action>
	return list->head == list;
   150a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   150aa:	481e      	ldr	r0, [pc, #120]	; (15124 <z_impl_k_yield+0x104>)
	return (node == list->tail) ? NULL : node->next;
   150ac:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   150ae:	4283      	cmp	r3, r0
   150b0:	d107      	bne.n	150c2 <z_impl_k_yield+0xa2>
	node->prev = tail;
   150b2:	e9c4 0200 	strd	r0, r2, [r4]
	tail->next = node;
   150b6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   150b8:	62ec      	str	r4, [r5, #44]	; 0x2c
}
   150ba:	e012      	b.n	150e2 <z_impl_k_yield+0xc2>
	return (node == list->tail) ? NULL : node->next;
   150bc:	429a      	cmp	r2, r3
   150be:	d0f8      	beq.n	150b2 <z_impl_k_yield+0x92>
   150c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   150c2:	2b00      	cmp	r3, #0
   150c4:	d0f5      	beq.n	150b2 <z_impl_k_yield+0x92>
	int32_t b1 = thread_1->base.prio;
   150c6:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   150ca:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   150ce:	428f      	cmp	r7, r1
   150d0:	d0f4      	beq.n	150bc <z_impl_k_yield+0x9c>
		return b2 - b1;
   150d2:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   150d4:	2900      	cmp	r1, #0
   150d6:	ddf1      	ble.n	150bc <z_impl_k_yield+0x9c>
	sys_dnode_t *const prev = successor->prev;
   150d8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   150da:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   150de:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   150e0:	605c      	str	r4, [r3, #4]
	update_cache(1);
   150e2:	2001      	movs	r0, #1
   150e4:	f7ff fa3e 	bl	14564 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   150e8:	480a      	ldr	r0, [pc, #40]	; (15114 <z_impl_k_yield+0xf4>)
   150ea:	f7fe ffdd 	bl	140a8 <z_spin_unlock_valid>
   150ee:	b940      	cbnz	r0, 15102 <z_impl_k_yield+0xe2>
   150f0:	4909      	ldr	r1, [pc, #36]	; (15118 <z_impl_k_yield+0xf8>)
   150f2:	4807      	ldr	r0, [pc, #28]	; (15110 <z_impl_k_yield+0xf0>)
   150f4:	22c3      	movs	r2, #195	; 0xc3
   150f6:	f003 f9c4 	bl	18482 <printk>
   150fa:	21c3      	movs	r1, #195	; 0xc3
   150fc:	4806      	ldr	r0, [pc, #24]	; (15118 <z_impl_k_yield+0xf8>)
   150fe:	f003 fa89 	bl	18614 <assert_post_action>
   15102:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   15104:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15108:	f7fd b8d6 	b.w	122b8 <arch_swap>
   1510c:	0001a089 	.word	0x0001a089
   15110:	00019196 	.word	0x00019196
   15114:	20000a18 	.word	0x20000a18
   15118:	000191d0 	.word	0x000191d0
   1511c:	200009d4 	.word	0x200009d4
   15120:	20000120 	.word	0x20000120
   15124:	200009fc 	.word	0x200009fc

00015128 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   15128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1512c:	4605      	mov	r5, r0
   1512e:	460e      	mov	r6, r1
   15130:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   15134:	b153      	cbz	r3, 1514c <z_tick_sleep+0x24>
   15136:	493a      	ldr	r1, [pc, #232]	; (15220 <z_tick_sleep+0xf8>)
   15138:	483a      	ldr	r0, [pc, #232]	; (15224 <z_tick_sleep+0xfc>)
   1513a:	f240 42be 	movw	r2, #1214	; 0x4be
   1513e:	f003 f9a0 	bl	18482 <printk>
   15142:	f240 41be 	movw	r1, #1214	; 0x4be
   15146:	4836      	ldr	r0, [pc, #216]	; (15220 <z_tick_sleep+0xf8>)
   15148:	f003 fa64 	bl	18614 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1514c:	ea55 0306 	orrs.w	r3, r5, r6
   15150:	d103      	bne.n	1515a <z_tick_sleep+0x32>
	z_impl_k_yield();
   15152:	f7ff ff65 	bl	15020 <z_impl_k_yield>
		k_yield();
		return 0;
   15156:	2000      	movs	r0, #0
   15158:	e05f      	b.n	1521a <z_tick_sleep+0xf2>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1515a:	f06f 0401 	mvn.w	r4, #1
   1515e:	f04f 33ff 	mov.w	r3, #4294967295
   15162:	1b64      	subs	r4, r4, r5
   15164:	eb63 0306 	sbc.w	r3, r3, r6
   15168:	2c01      	cmp	r4, #1
   1516a:	f173 0300 	sbcs.w	r3, r3, #0
   1516e:	da02      	bge.n	15176 <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   15170:	f003 fc6b 	bl	18a4a <sys_clock_tick_get_32>
   15174:	1944      	adds	r4, r0, r5
   15176:	f04f 0320 	mov.w	r3, #32
   1517a:	f3ef 8811 	mrs	r8, BASEPRI
   1517e:	f383 8811 	msr	BASEPRI, r3
   15182:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15186:	4828      	ldr	r0, [pc, #160]	; (15228 <z_tick_sleep+0x100>)
   15188:	f7fe ff80 	bl	1408c <z_spin_lock_valid>
   1518c:	b940      	cbnz	r0, 151a0 <z_tick_sleep+0x78>
   1518e:	4927      	ldr	r1, [pc, #156]	; (1522c <z_tick_sleep+0x104>)
   15190:	4824      	ldr	r0, [pc, #144]	; (15224 <z_tick_sleep+0xfc>)
   15192:	2281      	movs	r2, #129	; 0x81
   15194:	f003 f975 	bl	18482 <printk>
   15198:	2181      	movs	r1, #129	; 0x81
   1519a:	4824      	ldr	r0, [pc, #144]	; (1522c <z_tick_sleep+0x104>)
   1519c:	f003 fa3a 	bl	18614 <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   151a0:	4f23      	ldr	r7, [pc, #140]	; (15230 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   151a2:	4821      	ldr	r0, [pc, #132]	; (15228 <z_tick_sleep+0x100>)
   151a4:	f7fe ff8e 	bl	140c4 <z_spin_lock_set_owner>
   151a8:	68b8      	ldr	r0, [r7, #8]
   151aa:	4b22      	ldr	r3, [pc, #136]	; (15234 <z_tick_sleep+0x10c>)
   151ac:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   151ae:	f7ff fc27 	bl	14a00 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   151b2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   151b4:	462a      	mov	r2, r5
   151b6:	4633      	mov	r3, r6
   151b8:	3018      	adds	r0, #24
   151ba:	491f      	ldr	r1, [pc, #124]	; (15238 <z_tick_sleep+0x110>)
   151bc:	f000 f970 	bl	154a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   151c0:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   151c2:	4819      	ldr	r0, [pc, #100]	; (15228 <z_tick_sleep+0x100>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   151c4:	7b53      	ldrb	r3, [r2, #13]
   151c6:	f043 0310 	orr.w	r3, r3, #16
   151ca:	7353      	strb	r3, [r2, #13]
   151cc:	f7fe ff6c 	bl	140a8 <z_spin_unlock_valid>
   151d0:	b940      	cbnz	r0, 151e4 <z_tick_sleep+0xbc>
   151d2:	4916      	ldr	r1, [pc, #88]	; (1522c <z_tick_sleep+0x104>)
   151d4:	4813      	ldr	r0, [pc, #76]	; (15224 <z_tick_sleep+0xfc>)
   151d6:	22c3      	movs	r2, #195	; 0xc3
   151d8:	f003 f953 	bl	18482 <printk>
   151dc:	21c3      	movs	r1, #195	; 0xc3
   151de:	4813      	ldr	r0, [pc, #76]	; (1522c <z_tick_sleep+0x104>)
   151e0:	f003 fa18 	bl	18614 <assert_post_action>
   151e4:	4640      	mov	r0, r8
   151e6:	f7fd f867 	bl	122b8 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   151ea:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   151ec:	7b5b      	ldrb	r3, [r3, #13]
   151ee:	06db      	lsls	r3, r3, #27
   151f0:	d50a      	bpl.n	15208 <z_tick_sleep+0xe0>
   151f2:	490b      	ldr	r1, [pc, #44]	; (15220 <z_tick_sleep+0xf8>)
   151f4:	480b      	ldr	r0, [pc, #44]	; (15224 <z_tick_sleep+0xfc>)
   151f6:	f240 42df 	movw	r2, #1247	; 0x4df
   151fa:	f003 f942 	bl	18482 <printk>
   151fe:	f240 41df 	movw	r1, #1247	; 0x4df
   15202:	4807      	ldr	r0, [pc, #28]	; (15220 <z_tick_sleep+0xf8>)
   15204:	f003 fa06 	bl	18614 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   15208:	f003 fc1f 	bl	18a4a <sys_clock_tick_get_32>
   1520c:	1a20      	subs	r0, r4, r0
   1520e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   15212:	2801      	cmp	r0, #1
   15214:	f173 0300 	sbcs.w	r3, r3, #0
   15218:	db9d      	blt.n	15156 <z_tick_sleep+0x2e>
		return ticks;
	}
#endif

	return 0;
}
   1521a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1521e:	bf00      	nop
   15220:	0001a089 	.word	0x0001a089
   15224:	00019196 	.word	0x00019196
   15228:	20000a18 	.word	0x20000a18
   1522c:	000191d0 	.word	0x000191d0
   15230:	200009d4 	.word	0x200009d4
   15234:	20000a0c 	.word	0x20000a0c
   15238:	00014ef9 	.word	0x00014ef9

0001523c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1523c:	b538      	push	{r3, r4, r5, lr}
   1523e:	4605      	mov	r5, r0
   15240:	460c      	mov	r4, r1
   15242:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   15246:	b153      	cbz	r3, 1525e <z_impl_k_sleep+0x22>
   15248:	4911      	ldr	r1, [pc, #68]	; (15290 <z_impl_k_sleep+0x54>)
   1524a:	4812      	ldr	r0, [pc, #72]	; (15294 <z_impl_k_sleep+0x58>)
   1524c:	f240 42ee 	movw	r2, #1262	; 0x4ee
   15250:	f003 f917 	bl	18482 <printk>
   15254:	f240 41ee 	movw	r1, #1262	; 0x4ee
   15258:	480d      	ldr	r0, [pc, #52]	; (15290 <z_impl_k_sleep+0x54>)
   1525a:	f003 f9db 	bl	18614 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1525e:	f1b4 3fff 	cmp.w	r4, #4294967295
   15262:	bf08      	it	eq
   15264:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   15268:	d106      	bne.n	15278 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   1526a:	4b0b      	ldr	r3, [pc, #44]	; (15298 <z_impl_k_sleep+0x5c>)
   1526c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1526e:	f7ff fc93 	bl	14b98 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   15272:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   15276:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   15278:	4628      	mov	r0, r5
   1527a:	4621      	mov	r1, r4
   1527c:	f7ff ff54 	bl	15128 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   15280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15284:	fb80 0303 	smull	r0, r3, r0, r3
   15288:	0bc0      	lsrs	r0, r0, #15
   1528a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1528e:	e7f2      	b.n	15276 <z_impl_k_sleep+0x3a>
   15290:	0001a089 	.word	0x0001a089
   15294:	00019196 	.word	0x00019196
   15298:	200009d4 	.word	0x200009d4

0001529c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1529c:	4b01      	ldr	r3, [pc, #4]	; (152a4 <z_impl_k_current_get+0x8>)
   1529e:	6898      	ldr	r0, [r3, #8]
   152a0:	4770      	bx	lr
   152a2:	bf00      	nop
   152a4:	200009d4 	.word	0x200009d4

000152a8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   152a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152ac:	4604      	mov	r4, r0
   152ae:	f04f 0320 	mov.w	r3, #32
   152b2:	f3ef 8611 	mrs	r6, BASEPRI
   152b6:	f383 8811 	msr	BASEPRI, r3
   152ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   152be:	483e      	ldr	r0, [pc, #248]	; (153b8 <z_thread_abort+0x110>)
   152c0:	f7fe fee4 	bl	1408c <z_spin_lock_valid>
   152c4:	b940      	cbnz	r0, 152d8 <z_thread_abort+0x30>
   152c6:	493d      	ldr	r1, [pc, #244]	; (153bc <z_thread_abort+0x114>)
   152c8:	483d      	ldr	r0, [pc, #244]	; (153c0 <z_thread_abort+0x118>)
   152ca:	2281      	movs	r2, #129	; 0x81
   152cc:	f003 f8d9 	bl	18482 <printk>
   152d0:	2181      	movs	r1, #129	; 0x81
   152d2:	483a      	ldr	r0, [pc, #232]	; (153bc <z_thread_abort+0x114>)
   152d4:	f003 f99e 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   152d8:	4837      	ldr	r0, [pc, #220]	; (153b8 <z_thread_abort+0x110>)
   152da:	f7fe fef3 	bl	140c4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   152de:	7b63      	ldrb	r3, [r4, #13]
   152e0:	071a      	lsls	r2, r3, #28
   152e2:	d512      	bpl.n	1530a <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   152e4:	4834      	ldr	r0, [pc, #208]	; (153b8 <z_thread_abort+0x110>)
   152e6:	f7fe fedf 	bl	140a8 <z_spin_unlock_valid>
   152ea:	b940      	cbnz	r0, 152fe <z_thread_abort+0x56>
   152ec:	4933      	ldr	r1, [pc, #204]	; (153bc <z_thread_abort+0x114>)
   152ee:	4834      	ldr	r0, [pc, #208]	; (153c0 <z_thread_abort+0x118>)
   152f0:	22ac      	movs	r2, #172	; 0xac
   152f2:	f003 f8c6 	bl	18482 <printk>
   152f6:	21ac      	movs	r1, #172	; 0xac
   152f8:	4830      	ldr	r0, [pc, #192]	; (153bc <z_thread_abort+0x114>)
   152fa:	f003 f98b 	bl	18614 <assert_post_action>
	__asm__ volatile(
   152fe:	f386 8811 	msr	BASEPRI, r6
   15302:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   15306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1530a:	f023 0220 	bic.w	r2, r3, #32
   1530e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   15312:	09d2      	lsrs	r2, r2, #7
   15314:	d138      	bne.n	15388 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   15316:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   15318:	68a3      	ldr	r3, [r4, #8]
   1531a:	b113      	cbz	r3, 15322 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   1531c:	4620      	mov	r0, r4
   1531e:	f7ff fdcd 	bl	14ebc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   15322:	f104 0018 	add.w	r0, r4, #24
   15326:	f000 f969 	bl	155fc <z_abort_timeout>
   1532a:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1532e:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   15332:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15334:	42bd      	cmp	r5, r7
   15336:	d000      	beq.n	1533a <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   15338:	bb85      	cbnz	r5, 1539c <z_thread_abort+0xf4>
		update_cache(1);
   1533a:	2001      	movs	r0, #1
   1533c:	f7ff f912 	bl	14564 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   15340:	4b20      	ldr	r3, [pc, #128]	; (153c4 <z_thread_abort+0x11c>)
   15342:	689b      	ldr	r3, [r3, #8]
   15344:	42a3      	cmp	r3, r4
   15346:	d1cd      	bne.n	152e4 <z_thread_abort+0x3c>
   15348:	f3ef 8305 	mrs	r3, IPSR
   1534c:	2b00      	cmp	r3, #0
   1534e:	d1c9      	bne.n	152e4 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15350:	4819      	ldr	r0, [pc, #100]	; (153b8 <z_thread_abort+0x110>)
   15352:	f7fe fea9 	bl	140a8 <z_spin_unlock_valid>
   15356:	b940      	cbnz	r0, 1536a <z_thread_abort+0xc2>
   15358:	4918      	ldr	r1, [pc, #96]	; (153bc <z_thread_abort+0x114>)
   1535a:	4819      	ldr	r0, [pc, #100]	; (153c0 <z_thread_abort+0x118>)
   1535c:	22c3      	movs	r2, #195	; 0xc3
   1535e:	f003 f890 	bl	18482 <printk>
   15362:	21c3      	movs	r1, #195	; 0xc3
   15364:	4815      	ldr	r0, [pc, #84]	; (153bc <z_thread_abort+0x114>)
   15366:	f003 f955 	bl	18614 <assert_post_action>
   1536a:	4630      	mov	r0, r6
   1536c:	f7fc ffa4 	bl	122b8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   15370:	f240 6201 	movw	r2, #1537	; 0x601
   15374:	4914      	ldr	r1, [pc, #80]	; (153c8 <z_thread_abort+0x120>)
   15376:	4812      	ldr	r0, [pc, #72]	; (153c0 <z_thread_abort+0x118>)
   15378:	f003 f883 	bl	18482 <printk>
   1537c:	f240 6101 	movw	r1, #1537	; 0x601
   15380:	4811      	ldr	r0, [pc, #68]	; (153c8 <z_thread_abort+0x120>)
   15382:	f003 f947 	bl	18614 <assert_post_action>
   15386:	e7ad      	b.n	152e4 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15388:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1538c:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   15390:	4621      	mov	r1, r4
   15392:	480e      	ldr	r0, [pc, #56]	; (153cc <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   15394:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   15396:	f7ff fb15 	bl	149c4 <z_priq_dumb_remove>
}
   1539a:	e7bd      	b.n	15318 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   1539c:	4628      	mov	r0, r5
   1539e:	f7ff fd8d 	bl	14ebc <unpend_thread_no_timeout>
   153a2:	f105 0018 	add.w	r0, r5, #24
   153a6:	f000 f929 	bl	155fc <z_abort_timeout>
		ready_thread(thread);
   153aa:	4628      	mov	r0, r5
   153ac:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   153b0:	f7ff f908 	bl	145c4 <ready_thread>
   153b4:	e7bd      	b.n	15332 <z_thread_abort+0x8a>
   153b6:	bf00      	nop
   153b8:	20000a18 	.word	0x20000a18
   153bc:	000191d0 	.word	0x000191d0
   153c0:	00019196 	.word	0x00019196
   153c4:	200009d4 	.word	0x200009d4
   153c8:	0001a089 	.word	0x0001a089
   153cc:	200009fc 	.word	0x200009fc

000153d0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   153d0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   153d2:	4806      	ldr	r0, [pc, #24]	; (153ec <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   153d4:	4a06      	ldr	r2, [pc, #24]	; (153f0 <z_data_copy+0x20>)
   153d6:	4907      	ldr	r1, [pc, #28]	; (153f4 <z_data_copy+0x24>)
   153d8:	1a12      	subs	r2, r2, r0
   153da:	f003 fa31 	bl	18840 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   153de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   153e2:	4a05      	ldr	r2, [pc, #20]	; (153f8 <z_data_copy+0x28>)
   153e4:	4905      	ldr	r1, [pc, #20]	; (153fc <z_data_copy+0x2c>)
   153e6:	4806      	ldr	r0, [pc, #24]	; (15400 <z_data_copy+0x30>)
   153e8:	f003 ba2a 	b.w	18840 <memcpy>
   153ec:	20000000 	.word	0x20000000
   153f0:	20000120 	.word	0x20000120
   153f4:	0001a108 	.word	0x0001a108
   153f8:	00000000 	.word	0x00000000
   153fc:	0001a108 	.word	0x0001a108
   15400:	20000000 	.word	0x20000000

00015404 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   15404:	4b03      	ldr	r3, [pc, #12]	; (15414 <elapsed+0x10>)
   15406:	681b      	ldr	r3, [r3, #0]
   15408:	b90b      	cbnz	r3, 1540e <elapsed+0xa>
   1540a:	f7fc bc31 	b.w	11c70 <sys_clock_elapsed>
}
   1540e:	2000      	movs	r0, #0
   15410:	4770      	bx	lr
   15412:	bf00      	nop
   15414:	20000a1c 	.word	0x20000a1c

00015418 <next_timeout>:
	return list->head == list;
   15418:	4b12      	ldr	r3, [pc, #72]	; (15464 <next_timeout+0x4c>)

static int32_t next_timeout(void)
{
   1541a:	b510      	push	{r4, lr}
   1541c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1541e:	429c      	cmp	r4, r3
   15420:	d104      	bne.n	1542c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   15422:	f7ff ffef 	bl	15404 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   15426:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1542a:	e012      	b.n	15452 <next_timeout+0x3a>
	int32_t ticks_elapsed = elapsed();
   1542c:	f7ff ffea 	bl	15404 <elapsed>
   15430:	4601      	mov	r1, r0
	int32_t ret = to == NULL ? MAX_WAIT
   15432:	2c00      	cmp	r4, #0
   15434:	d0f7      	beq.n	15426 <next_timeout+0xe>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   15436:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   1543a:	1a40      	subs	r0, r0, r1
   1543c:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   15440:	2801      	cmp	r0, #1
   15442:	f173 0200 	sbcs.w	r2, r3, #0
   15446:	db0b      	blt.n	15460 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   15448:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1544c:	f173 0300 	sbcs.w	r3, r3, #0
   15450:	dae9      	bge.n	15426 <next_timeout+0xe>

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   15452:	4b05      	ldr	r3, [pc, #20]	; (15468 <next_timeout+0x50>)
   15454:	691b      	ldr	r3, [r3, #16]
   15456:	b113      	cbz	r3, 1545e <next_timeout+0x46>
   15458:	4298      	cmp	r0, r3
   1545a:	bfa8      	it	ge
   1545c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1545e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   15460:	2000      	movs	r0, #0
   15462:	e7f6      	b.n	15452 <next_timeout+0x3a>
   15464:	20000058 	.word	0x20000058
   15468:	200009d4 	.word	0x200009d4

0001546c <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
   1546c:	4a0b      	ldr	r2, [pc, #44]	; (1549c <remove_timeout+0x30>)
{
   1546e:	b530      	push	{r4, r5, lr}
   15470:	6852      	ldr	r2, [r2, #4]
   15472:	6803      	ldr	r3, [r0, #0]
   15474:	4290      	cmp	r0, r2
   15476:	d009      	beq.n	1548c <remove_timeout+0x20>
	if (next(t) != NULL) {
   15478:	b143      	cbz	r3, 1548c <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
   1547a:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1547e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   15482:	1912      	adds	r2, r2, r4
   15484:	eb41 0105 	adc.w	r1, r1, r5
   15488:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   1548c:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   1548e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15490:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15492:	2300      	movs	r3, #0
	node->prev = NULL;
   15494:	e9c0 3300 	strd	r3, r3, [r0]
}
   15498:	bd30      	pop	{r4, r5, pc}
   1549a:	bf00      	nop
   1549c:	20000058 	.word	0x20000058

000154a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   154a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   154a4:	bf08      	it	eq
   154a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   154aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   154ae:	4604      	mov	r4, r0
   154b0:	460e      	mov	r6, r1
   154b2:	461d      	mov	r5, r3
   154b4:	4617      	mov	r7, r2
   154b6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   154b8:	f000 8087 	beq.w	155ca <z_add_timeout+0x12a>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   154bc:	6803      	ldr	r3, [r0, #0]
   154be:	b143      	cbz	r3, 154d2 <z_add_timeout+0x32>
   154c0:	4947      	ldr	r1, [pc, #284]	; (155e0 <z_add_timeout+0x140>)
   154c2:	4848      	ldr	r0, [pc, #288]	; (155e4 <z_add_timeout+0x144>)
   154c4:	225d      	movs	r2, #93	; 0x5d
   154c6:	f002 ffdc 	bl	18482 <printk>
   154ca:	215d      	movs	r1, #93	; 0x5d
   154cc:	4844      	ldr	r0, [pc, #272]	; (155e0 <z_add_timeout+0x140>)
   154ce:	f003 f8a1 	bl	18614 <assert_post_action>
	to->fn = fn;
   154d2:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   154d4:	f04f 0320 	mov.w	r3, #32
   154d8:	f3ef 8611 	mrs	r6, BASEPRI
   154dc:	f383 8811 	msr	BASEPRI, r3
   154e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   154e4:	4840      	ldr	r0, [pc, #256]	; (155e8 <z_add_timeout+0x148>)
   154e6:	f7fe fdd1 	bl	1408c <z_spin_lock_valid>
   154ea:	b940      	cbnz	r0, 154fe <z_add_timeout+0x5e>
   154ec:	493f      	ldr	r1, [pc, #252]	; (155ec <z_add_timeout+0x14c>)
   154ee:	483d      	ldr	r0, [pc, #244]	; (155e4 <z_add_timeout+0x144>)
   154f0:	2281      	movs	r2, #129	; 0x81
   154f2:	f002 ffc6 	bl	18482 <printk>
   154f6:	2181      	movs	r1, #129	; 0x81
   154f8:	483c      	ldr	r0, [pc, #240]	; (155ec <z_add_timeout+0x14c>)
   154fa:	f003 f88b 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   154fe:	483a      	ldr	r0, [pc, #232]	; (155e8 <z_add_timeout+0x148>)
   15500:	f7fe fde0 	bl	140c4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   15504:	f06f 0301 	mvn.w	r3, #1
   15508:	f04f 3cff 	mov.w	ip, #4294967295
   1550c:	1bda      	subs	r2, r3, r7
   1550e:	eb6c 0208 	sbc.w	r2, ip, r8
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   15512:	2a00      	cmp	r2, #0
   15514:	db1e      	blt.n	15554 <z_add_timeout+0xb4>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   15516:	4936      	ldr	r1, [pc, #216]	; (155f0 <z_add_timeout+0x150>)
   15518:	e9d1 2000 	ldrd	r2, r0, [r1]
   1551c:	1a9b      	subs	r3, r3, r2
   1551e:	eb6c 0000 	sbc.w	r0, ip, r0
   15522:	1bda      	subs	r2, r3, r7
   15524:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
   15528:	2a01      	cmp	r2, #1
   1552a:	f170 0300 	sbcs.w	r3, r0, #0
   1552e:	da01      	bge.n	15534 <z_add_timeout+0x94>
   15530:	2201      	movs	r2, #1
   15532:	2000      	movs	r0, #0
   15534:	e9c4 2004 	strd	r2, r0, [r4, #16]
	return list->head == list;
   15538:	4a2e      	ldr	r2, [pc, #184]	; (155f4 <z_add_timeout+0x154>)
   1553a:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
   1553c:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15540:	4293      	cmp	r3, r2
   15542:	bf08      	it	eq
   15544:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   15546:	b973      	cbnz	r3, 15566 <z_add_timeout+0xc6>
	node->prev = tail;
   15548:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1554c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   15550:	6054      	str	r4, [r2, #4]
}
   15552:	e01a      	b.n	1558a <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   15554:	f7ff ff56 	bl	15404 <elapsed>
   15558:	1c7a      	adds	r2, r7, #1
   1555a:	f145 0500 	adc.w	r5, r5, #0
   1555e:	1812      	adds	r2, r2, r0
   15560:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   15564:	e7e6      	b.n	15534 <z_add_timeout+0x94>
			if (t->dticks > to->dticks) {
   15566:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   1556a:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   1556e:	4281      	cmp	r1, r0
   15570:	eb75 0e07 	sbcs.w	lr, r5, r7
   15574:	da2b      	bge.n	155ce <z_add_timeout+0x12e>
				t->dticks -= to->dticks;
   15576:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
   15578:	6859      	ldr	r1, [r3, #4]
   1557a:	eb67 0705 	sbc.w	r7, r7, r5
   1557e:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
   15582:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   15586:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   15588:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1558a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1558c:	4293      	cmp	r3, r2
   1558e:	d00b      	beq.n	155a8 <z_add_timeout+0x108>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   15590:	429c      	cmp	r4, r3
   15592:	d109      	bne.n	155a8 <z_add_timeout+0x108>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   15594:	f7ff ff40 	bl	15418 <next_timeout>

			if (next_time == 0 ||
   15598:	b118      	cbz	r0, 155a2 <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   1559a:	4b17      	ldr	r3, [pc, #92]	; (155f8 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   1559c:	691b      	ldr	r3, [r3, #16]
   1559e:	4283      	cmp	r3, r0
   155a0:	d002      	beq.n	155a8 <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   155a2:	2100      	movs	r1, #0
   155a4:	f7fc fb32 	bl	11c0c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   155a8:	480f      	ldr	r0, [pc, #60]	; (155e8 <z_add_timeout+0x148>)
   155aa:	f7fe fd7d 	bl	140a8 <z_spin_unlock_valid>
   155ae:	b940      	cbnz	r0, 155c2 <z_add_timeout+0x122>
   155b0:	490e      	ldr	r1, [pc, #56]	; (155ec <z_add_timeout+0x14c>)
   155b2:	480c      	ldr	r0, [pc, #48]	; (155e4 <z_add_timeout+0x144>)
   155b4:	22ac      	movs	r2, #172	; 0xac
   155b6:	f002 ff64 	bl	18482 <printk>
   155ba:	21ac      	movs	r1, #172	; 0xac
   155bc:	480b      	ldr	r0, [pc, #44]	; (155ec <z_add_timeout+0x14c>)
   155be:	f003 f829 	bl	18614 <assert_post_action>
	__asm__ volatile(
   155c2:	f386 8811 	msr	BASEPRI, r6
   155c6:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   155ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			to->dticks -= t->dticks;
   155ce:	1a09      	subs	r1, r1, r0
   155d0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   155d4:	4563      	cmp	r3, ip
   155d6:	e9c4 1504 	strd	r1, r5, [r4, #16]
   155da:	d0b5      	beq.n	15548 <z_add_timeout+0xa8>
   155dc:	681b      	ldr	r3, [r3, #0]
   155de:	e7b2      	b.n	15546 <z_add_timeout+0xa6>
   155e0:	0001a0ab 	.word	0x0001a0ab
   155e4:	00019196 	.word	0x00019196
   155e8:	20000a20 	.word	0x20000a20
   155ec:	000191d0 	.word	0x000191d0
   155f0:	20000220 	.word	0x20000220
   155f4:	20000058 	.word	0x20000058
   155f8:	200009d4 	.word	0x200009d4

000155fc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   155fc:	b538      	push	{r3, r4, r5, lr}
   155fe:	4604      	mov	r4, r0
	__asm__ volatile(
   15600:	f04f 0320 	mov.w	r3, #32
   15604:	f3ef 8511 	mrs	r5, BASEPRI
   15608:	f383 8811 	msr	BASEPRI, r3
   1560c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15610:	4815      	ldr	r0, [pc, #84]	; (15668 <z_abort_timeout+0x6c>)
   15612:	f7fe fd3b 	bl	1408c <z_spin_lock_valid>
   15616:	b940      	cbnz	r0, 1562a <z_abort_timeout+0x2e>
   15618:	4914      	ldr	r1, [pc, #80]	; (1566c <z_abort_timeout+0x70>)
   1561a:	4815      	ldr	r0, [pc, #84]	; (15670 <z_abort_timeout+0x74>)
   1561c:	2281      	movs	r2, #129	; 0x81
   1561e:	f002 ff30 	bl	18482 <printk>
   15622:	2181      	movs	r1, #129	; 0x81
   15624:	4811      	ldr	r0, [pc, #68]	; (1566c <z_abort_timeout+0x70>)
   15626:	f002 fff5 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   1562a:	480f      	ldr	r0, [pc, #60]	; (15668 <z_abort_timeout+0x6c>)
   1562c:	f7fe fd4a 	bl	140c4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   15630:	6823      	ldr	r3, [r4, #0]
   15632:	b1b3      	cbz	r3, 15662 <z_abort_timeout+0x66>
			remove_timeout(to);
   15634:	4620      	mov	r0, r4
   15636:	f7ff ff19 	bl	1546c <remove_timeout>
			ret = 0;
   1563a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1563c:	480a      	ldr	r0, [pc, #40]	; (15668 <z_abort_timeout+0x6c>)
   1563e:	f7fe fd33 	bl	140a8 <z_spin_unlock_valid>
   15642:	b940      	cbnz	r0, 15656 <z_abort_timeout+0x5a>
   15644:	4909      	ldr	r1, [pc, #36]	; (1566c <z_abort_timeout+0x70>)
   15646:	480a      	ldr	r0, [pc, #40]	; (15670 <z_abort_timeout+0x74>)
   15648:	22ac      	movs	r2, #172	; 0xac
   1564a:	f002 ff1a 	bl	18482 <printk>
   1564e:	21ac      	movs	r1, #172	; 0xac
   15650:	4806      	ldr	r0, [pc, #24]	; (1566c <z_abort_timeout+0x70>)
   15652:	f002 ffdf 	bl	18614 <assert_post_action>
	__asm__ volatile(
   15656:	f385 8811 	msr	BASEPRI, r5
   1565a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   1565e:	4620      	mov	r0, r4
   15660:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   15662:	f06f 0415 	mvn.w	r4, #21
   15666:	e7e9      	b.n	1563c <z_abort_timeout+0x40>
   15668:	20000a20 	.word	0x20000a20
   1566c:	000191d0 	.word	0x000191d0
   15670:	00019196 	.word	0x00019196

00015674 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   15674:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15676:	f04f 0320 	mov.w	r3, #32
   1567a:	f3ef 8511 	mrs	r5, BASEPRI
   1567e:	f383 8811 	msr	BASEPRI, r3
   15682:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15686:	4813      	ldr	r0, [pc, #76]	; (156d4 <z_get_next_timeout_expiry+0x60>)
   15688:	f7fe fd00 	bl	1408c <z_spin_lock_valid>
   1568c:	b940      	cbnz	r0, 156a0 <z_get_next_timeout_expiry+0x2c>
   1568e:	4912      	ldr	r1, [pc, #72]	; (156d8 <z_get_next_timeout_expiry+0x64>)
   15690:	4812      	ldr	r0, [pc, #72]	; (156dc <z_get_next_timeout_expiry+0x68>)
   15692:	2281      	movs	r2, #129	; 0x81
   15694:	f002 fef5 	bl	18482 <printk>
   15698:	2181      	movs	r1, #129	; 0x81
   1569a:	480f      	ldr	r0, [pc, #60]	; (156d8 <z_get_next_timeout_expiry+0x64>)
   1569c:	f002 ffba 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   156a0:	480c      	ldr	r0, [pc, #48]	; (156d4 <z_get_next_timeout_expiry+0x60>)
   156a2:	f7fe fd0f 	bl	140c4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   156a6:	f7ff feb7 	bl	15418 <next_timeout>
   156aa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   156ac:	4809      	ldr	r0, [pc, #36]	; (156d4 <z_get_next_timeout_expiry+0x60>)
   156ae:	f7fe fcfb 	bl	140a8 <z_spin_unlock_valid>
   156b2:	b940      	cbnz	r0, 156c6 <z_get_next_timeout_expiry+0x52>
   156b4:	4908      	ldr	r1, [pc, #32]	; (156d8 <z_get_next_timeout_expiry+0x64>)
   156b6:	4809      	ldr	r0, [pc, #36]	; (156dc <z_get_next_timeout_expiry+0x68>)
   156b8:	22ac      	movs	r2, #172	; 0xac
   156ba:	f002 fee2 	bl	18482 <printk>
   156be:	21ac      	movs	r1, #172	; 0xac
   156c0:	4805      	ldr	r0, [pc, #20]	; (156d8 <z_get_next_timeout_expiry+0x64>)
   156c2:	f002 ffa7 	bl	18614 <assert_post_action>
	__asm__ volatile(
   156c6:	f385 8811 	msr	BASEPRI, r5
   156ca:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   156ce:	4620      	mov	r0, r4
   156d0:	bd38      	pop	{r3, r4, r5, pc}
   156d2:	bf00      	nop
   156d4:	20000a20 	.word	0x20000a20
   156d8:	000191d0 	.word	0x000191d0
   156dc:	00019196 	.word	0x00019196

000156e0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   156e0:	b570      	push	{r4, r5, r6, lr}
   156e2:	4604      	mov	r4, r0
   156e4:	460d      	mov	r5, r1
	__asm__ volatile(
   156e6:	f04f 0320 	mov.w	r3, #32
   156ea:	f3ef 8611 	mrs	r6, BASEPRI
   156ee:	f383 8811 	msr	BASEPRI, r3
   156f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   156f6:	4817      	ldr	r0, [pc, #92]	; (15754 <z_set_timeout_expiry+0x74>)
   156f8:	f7fe fcc8 	bl	1408c <z_spin_lock_valid>
   156fc:	b940      	cbnz	r0, 15710 <z_set_timeout_expiry+0x30>
   156fe:	4916      	ldr	r1, [pc, #88]	; (15758 <z_set_timeout_expiry+0x78>)
   15700:	4816      	ldr	r0, [pc, #88]	; (1575c <z_set_timeout_expiry+0x7c>)
   15702:	2281      	movs	r2, #129	; 0x81
   15704:	f002 febd 	bl	18482 <printk>
   15708:	2181      	movs	r1, #129	; 0x81
   1570a:	4813      	ldr	r0, [pc, #76]	; (15758 <z_set_timeout_expiry+0x78>)
   1570c:	f002 ff82 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   15710:	4810      	ldr	r0, [pc, #64]	; (15754 <z_set_timeout_expiry+0x74>)
   15712:	f7fe fcd7 	bl	140c4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   15716:	f7ff fe7f 	bl	15418 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   1571a:	2801      	cmp	r0, #1
   1571c:	dd07      	ble.n	1572e <z_set_timeout_expiry+0x4e>
   1571e:	42a0      	cmp	r0, r4
   15720:	db05      	blt.n	1572e <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   15722:	42a0      	cmp	r0, r4
   15724:	4629      	mov	r1, r5
   15726:	bfa8      	it	ge
   15728:	4620      	movge	r0, r4
   1572a:	f7fc fa6f 	bl	11c0c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1572e:	4809      	ldr	r0, [pc, #36]	; (15754 <z_set_timeout_expiry+0x74>)
   15730:	f7fe fcba 	bl	140a8 <z_spin_unlock_valid>
   15734:	b940      	cbnz	r0, 15748 <z_set_timeout_expiry+0x68>
   15736:	4908      	ldr	r1, [pc, #32]	; (15758 <z_set_timeout_expiry+0x78>)
   15738:	4808      	ldr	r0, [pc, #32]	; (1575c <z_set_timeout_expiry+0x7c>)
   1573a:	22ac      	movs	r2, #172	; 0xac
   1573c:	f002 fea1 	bl	18482 <printk>
   15740:	21ac      	movs	r1, #172	; 0xac
   15742:	4805      	ldr	r0, [pc, #20]	; (15758 <z_set_timeout_expiry+0x78>)
   15744:	f002 ff66 	bl	18614 <assert_post_action>
	__asm__ volatile(
   15748:	f386 8811 	msr	BASEPRI, r6
   1574c:	f3bf 8f6f 	isb	sy
		}
	}
}
   15750:	bd70      	pop	{r4, r5, r6, pc}
   15752:	bf00      	nop
   15754:	20000a20 	.word	0x20000a20
   15758:	000191d0 	.word	0x000191d0
   1575c:	00019196 	.word	0x00019196

00015760 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   15760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15764:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   15766:	f7ff fac1 	bl	14cec <z_time_slice>
	__asm__ volatile(
   1576a:	f04f 0320 	mov.w	r3, #32
   1576e:	f3ef 8511 	mrs	r5, BASEPRI
   15772:	f383 8811 	msr	BASEPRI, r3
   15776:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1577a:	4842      	ldr	r0, [pc, #264]	; (15884 <sys_clock_announce+0x124>)
   1577c:	f7fe fc86 	bl	1408c <z_spin_lock_valid>
   15780:	b940      	cbnz	r0, 15794 <sys_clock_announce+0x34>
   15782:	4941      	ldr	r1, [pc, #260]	; (15888 <sys_clock_announce+0x128>)
   15784:	4841      	ldr	r0, [pc, #260]	; (1588c <sys_clock_announce+0x12c>)
   15786:	2281      	movs	r2, #129	; 0x81
   15788:	f002 fe7b 	bl	18482 <printk>
   1578c:	2181      	movs	r1, #129	; 0x81
   1578e:	483e      	ldr	r0, [pc, #248]	; (15888 <sys_clock_announce+0x128>)
   15790:	f002 ff40 	bl	18614 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   15794:	4f3e      	ldr	r7, [pc, #248]	; (15890 <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   15796:	483b      	ldr	r0, [pc, #236]	; (15884 <sys_clock_announce+0x124>)
	return list->head == list;
   15798:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 15894 <sys_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1579c:	4e3e      	ldr	r6, [pc, #248]	; (15898 <sys_clock_announce+0x138>)
   1579e:	f7fe fc91 	bl	140c4 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   157a2:	603c      	str	r4, [r7, #0]
   157a4:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   157a8:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   157aa:	4544      	cmp	r4, r8
   157ac:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   157b0:	e9d6 1e00 	ldrd	r1, lr, [r6]
   157b4:	d00b      	beq.n	157ce <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   157b6:	b154      	cbz	r4, 157ce <sys_clock_announce+0x6e>
   157b8:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   157bc:	429a      	cmp	r2, r3
   157be:	eb70 090c 	sbcs.w	r9, r0, ip
   157c2:	da23      	bge.n	1580c <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   157c4:	1a9b      	subs	r3, r3, r2
   157c6:	eb6c 0c00 	sbc.w	ip, ip, r0
   157ca:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   157ce:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   157d0:	1851      	adds	r1, r2, r1
   157d2:	eb4e 0000 	adc.w	r0, lr, r0
   157d6:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
   157da:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   157dc:	f7ff fe1c 	bl	15418 <next_timeout>
   157e0:	4621      	mov	r1, r4
   157e2:	f7fc fa13 	bl	11c0c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   157e6:	4827      	ldr	r0, [pc, #156]	; (15884 <sys_clock_announce+0x124>)
   157e8:	f7fe fc5e 	bl	140a8 <z_spin_unlock_valid>
   157ec:	b940      	cbnz	r0, 15800 <sys_clock_announce+0xa0>
   157ee:	4926      	ldr	r1, [pc, #152]	; (15888 <sys_clock_announce+0x128>)
   157f0:	4826      	ldr	r0, [pc, #152]	; (1588c <sys_clock_announce+0x12c>)
   157f2:	22ac      	movs	r2, #172	; 0xac
   157f4:	f002 fe45 	bl	18482 <printk>
   157f8:	21ac      	movs	r1, #172	; 0xac
   157fa:	4823      	ldr	r0, [pc, #140]	; (15888 <sys_clock_announce+0x128>)
   157fc:	f002 ff0a 	bl	18614 <assert_post_action>
	__asm__ volatile(
   15800:	f385 8811 	msr	BASEPRI, r5
   15804:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   15808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1580c:	1859      	adds	r1, r3, r1
   1580e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   15812:	1ad3      	subs	r3, r2, r3
   15814:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   15816:	2200      	movs	r2, #0
   15818:	2300      	movs	r3, #0
		curr_tick += dt;
   1581a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   1581e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   15822:	4620      	mov	r0, r4
   15824:	f7ff fe22 	bl	1546c <remove_timeout>
   15828:	4816      	ldr	r0, [pc, #88]	; (15884 <sys_clock_announce+0x124>)
   1582a:	f7fe fc3d 	bl	140a8 <z_spin_unlock_valid>
   1582e:	b940      	cbnz	r0, 15842 <sys_clock_announce+0xe2>
   15830:	4915      	ldr	r1, [pc, #84]	; (15888 <sys_clock_announce+0x128>)
   15832:	4816      	ldr	r0, [pc, #88]	; (1588c <sys_clock_announce+0x12c>)
   15834:	22ac      	movs	r2, #172	; 0xac
   15836:	f002 fe24 	bl	18482 <printk>
   1583a:	21ac      	movs	r1, #172	; 0xac
   1583c:	4812      	ldr	r0, [pc, #72]	; (15888 <sys_clock_announce+0x128>)
   1583e:	f002 fee9 	bl	18614 <assert_post_action>
   15842:	f385 8811 	msr	BASEPRI, r5
   15846:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1584a:	4620      	mov	r0, r4
   1584c:	68a3      	ldr	r3, [r4, #8]
   1584e:	4798      	blx	r3
	__asm__ volatile(
   15850:	f04f 0320 	mov.w	r3, #32
   15854:	f3ef 8511 	mrs	r5, BASEPRI
   15858:	f383 8811 	msr	BASEPRI, r3
   1585c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15860:	4808      	ldr	r0, [pc, #32]	; (15884 <sys_clock_announce+0x124>)
   15862:	f7fe fc13 	bl	1408c <z_spin_lock_valid>
   15866:	b940      	cbnz	r0, 1587a <sys_clock_announce+0x11a>
   15868:	4907      	ldr	r1, [pc, #28]	; (15888 <sys_clock_announce+0x128>)
   1586a:	4808      	ldr	r0, [pc, #32]	; (1588c <sys_clock_announce+0x12c>)
   1586c:	2281      	movs	r2, #129	; 0x81
   1586e:	f002 fe08 	bl	18482 <printk>
   15872:	2181      	movs	r1, #129	; 0x81
   15874:	4804      	ldr	r0, [pc, #16]	; (15888 <sys_clock_announce+0x128>)
   15876:	f002 fecd 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   1587a:	4802      	ldr	r0, [pc, #8]	; (15884 <sys_clock_announce+0x124>)
   1587c:	f7fe fc22 	bl	140c4 <z_spin_lock_set_owner>
	return k;
   15880:	e790      	b.n	157a4 <sys_clock_announce+0x44>
   15882:	bf00      	nop
   15884:	20000a20 	.word	0x20000a20
   15888:	000191d0 	.word	0x000191d0
   1588c:	00019196 	.word	0x00019196
   15890:	20000a1c 	.word	0x20000a1c
   15894:	20000058 	.word	0x20000058
   15898:	20000220 	.word	0x20000220

0001589c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1589c:	b570      	push	{r4, r5, r6, lr}
   1589e:	f04f 0320 	mov.w	r3, #32
   158a2:	f3ef 8611 	mrs	r6, BASEPRI
   158a6:	f383 8811 	msr	BASEPRI, r3
   158aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   158ae:	4816      	ldr	r0, [pc, #88]	; (15908 <sys_clock_tick_get+0x6c>)
   158b0:	f7fe fbec 	bl	1408c <z_spin_lock_valid>
   158b4:	b940      	cbnz	r0, 158c8 <sys_clock_tick_get+0x2c>
   158b6:	4915      	ldr	r1, [pc, #84]	; (1590c <sys_clock_tick_get+0x70>)
   158b8:	4815      	ldr	r0, [pc, #84]	; (15910 <sys_clock_tick_get+0x74>)
   158ba:	2281      	movs	r2, #129	; 0x81
   158bc:	f002 fde1 	bl	18482 <printk>
   158c0:	2181      	movs	r1, #129	; 0x81
   158c2:	4812      	ldr	r0, [pc, #72]	; (1590c <sys_clock_tick_get+0x70>)
   158c4:	f002 fea6 	bl	18614 <assert_post_action>
	z_spin_lock_set_owner(l);
   158c8:	480f      	ldr	r0, [pc, #60]	; (15908 <sys_clock_tick_get+0x6c>)
   158ca:	f7fe fbfb 	bl	140c4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   158ce:	f7fc f9cf 	bl	11c70 <sys_clock_elapsed>
   158d2:	4a10      	ldr	r2, [pc, #64]	; (15914 <sys_clock_tick_get+0x78>)
   158d4:	e9d2 4500 	ldrd	r4, r5, [r2]
   158d8:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   158da:	480b      	ldr	r0, [pc, #44]	; (15908 <sys_clock_tick_get+0x6c>)
   158dc:	f145 0500 	adc.w	r5, r5, #0
   158e0:	f7fe fbe2 	bl	140a8 <z_spin_unlock_valid>
   158e4:	b940      	cbnz	r0, 158f8 <sys_clock_tick_get+0x5c>
   158e6:	4909      	ldr	r1, [pc, #36]	; (1590c <sys_clock_tick_get+0x70>)
   158e8:	4809      	ldr	r0, [pc, #36]	; (15910 <sys_clock_tick_get+0x74>)
   158ea:	22ac      	movs	r2, #172	; 0xac
   158ec:	f002 fdc9 	bl	18482 <printk>
   158f0:	21ac      	movs	r1, #172	; 0xac
   158f2:	4806      	ldr	r0, [pc, #24]	; (1590c <sys_clock_tick_get+0x70>)
   158f4:	f002 fe8e 	bl	18614 <assert_post_action>
	__asm__ volatile(
   158f8:	f386 8811 	msr	BASEPRI, r6
   158fc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   15900:	4620      	mov	r0, r4
   15902:	4629      	mov	r1, r5
   15904:	bd70      	pop	{r4, r5, r6, pc}
   15906:	bf00      	nop
   15908:	20000a20 	.word	0x20000a20
   1590c:	000191d0 	.word	0x000191d0
   15910:	00019196 	.word	0x00019196
   15914:	20000220 	.word	0x20000220

00015918 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   15918:	4a02      	ldr	r2, [pc, #8]	; (15924 <boot_banner+0xc>)
   1591a:	4903      	ldr	r1, [pc, #12]	; (15928 <boot_banner+0x10>)
   1591c:	4803      	ldr	r0, [pc, #12]	; (1592c <boot_banner+0x14>)
   1591e:	f002 bdb0 	b.w	18482 <printk>
   15922:	bf00      	nop
   15924:	000192f6 	.word	0x000192f6
   15928:	0001a0cf 	.word	0x0001a0cf
   1592c:	0001a0dc 	.word	0x0001a0dc

00015930 <nrf_cc3xx_platform_init>:
   15930:	b510      	push	{r4, lr}
   15932:	4c0c      	ldr	r4, [pc, #48]	; (15964 <nrf_cc3xx_platform_init+0x34>)
   15934:	6823      	ldr	r3, [r4, #0]
   15936:	b113      	cbz	r3, 1593e <nrf_cc3xx_platform_init+0xe>
   15938:	4b0b      	ldr	r3, [pc, #44]	; (15968 <nrf_cc3xx_platform_init+0x38>)
   1593a:	681b      	ldr	r3, [r3, #0]
   1593c:	b92b      	cbnz	r3, 1594a <nrf_cc3xx_platform_init+0x1a>
   1593e:	f000 fabb 	bl	15eb8 <CC_LibInit>
   15942:	b930      	cbnz	r0, 15952 <nrf_cc3xx_platform_init+0x22>
   15944:	2201      	movs	r2, #1
   15946:	4b08      	ldr	r3, [pc, #32]	; (15968 <nrf_cc3xx_platform_init+0x38>)
   15948:	601a      	str	r2, [r3, #0]
   1594a:	2301      	movs	r3, #1
   1594c:	2000      	movs	r0, #0
   1594e:	6023      	str	r3, [r4, #0]
   15950:	bd10      	pop	{r4, pc}
   15952:	3801      	subs	r0, #1
   15954:	2806      	cmp	r0, #6
   15956:	d901      	bls.n	1595c <nrf_cc3xx_platform_init+0x2c>
   15958:	4804      	ldr	r0, [pc, #16]	; (1596c <nrf_cc3xx_platform_init+0x3c>)
   1595a:	bd10      	pop	{r4, pc}
   1595c:	4b04      	ldr	r3, [pc, #16]	; (15970 <nrf_cc3xx_platform_init+0x40>)
   1595e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   15962:	bd10      	pop	{r4, pc}
   15964:	20000a24 	.word	0x20000a24
   15968:	20000a28 	.word	0x20000a28
   1596c:	ffff8ffe 	.word	0xffff8ffe
   15970:	00018fec 	.word	0x00018fec

00015974 <nrf_cc3xx_platform_abort>:
   15974:	f3bf 8f4f 	dsb	sy
   15978:	4905      	ldr	r1, [pc, #20]	; (15990 <nrf_cc3xx_platform_abort+0x1c>)
   1597a:	4b06      	ldr	r3, [pc, #24]	; (15994 <nrf_cc3xx_platform_abort+0x20>)
   1597c:	68ca      	ldr	r2, [r1, #12]
   1597e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15982:	4313      	orrs	r3, r2
   15984:	60cb      	str	r3, [r1, #12]
   15986:	f3bf 8f4f 	dsb	sy
   1598a:	bf00      	nop
   1598c:	e7fd      	b.n	1598a <nrf_cc3xx_platform_abort+0x16>
   1598e:	bf00      	nop
   15990:	e000ed00 	.word	0xe000ed00
   15994:	05fa0004 	.word	0x05fa0004

00015998 <CC_PalAbort>:
   15998:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1599c:	2100      	movs	r1, #0
   1599e:	b430      	push	{r4, r5}
   159a0:	4a06      	ldr	r2, [pc, #24]	; (159bc <CC_PalAbort+0x24>)
   159a2:	4d07      	ldr	r5, [pc, #28]	; (159c0 <CC_PalAbort+0x28>)
   159a4:	4c07      	ldr	r4, [pc, #28]	; (159c4 <CC_PalAbort+0x2c>)
   159a6:	602b      	str	r3, [r5, #0]
   159a8:	6013      	str	r3, [r2, #0]
   159aa:	6023      	str	r3, [r4, #0]
   159ac:	4a06      	ldr	r2, [pc, #24]	; (159c8 <CC_PalAbort+0x30>)
   159ae:	4c07      	ldr	r4, [pc, #28]	; (159cc <CC_PalAbort+0x34>)
   159b0:	60eb      	str	r3, [r5, #12]
   159b2:	6863      	ldr	r3, [r4, #4]
   159b4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   159b8:	bc30      	pop	{r4, r5}
   159ba:	4718      	bx	r3
   159bc:	50841404 	.word	0x50841404
   159c0:	50841400 	.word	0x50841400
   159c4:	50841408 	.word	0x50841408
   159c8:	50840000 	.word	0x50840000
   159cc:	20000060 	.word	0x20000060

000159d0 <nrf_cc3xx_platform_set_abort>:
   159d0:	4b02      	ldr	r3, [pc, #8]	; (159dc <nrf_cc3xx_platform_set_abort+0xc>)
   159d2:	e9d0 1200 	ldrd	r1, r2, [r0]
   159d6:	e9c3 1200 	strd	r1, r2, [r3]
   159da:	4770      	bx	lr
   159dc:	20000060 	.word	0x20000060

000159e0 <nrf_cc3xx_platform_ctr_drbg_init>:
   159e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   159e4:	4c15      	ldr	r4, [pc, #84]	; (15a3c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   159e6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 15a44 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   159ea:	2800      	cmp	r0, #0
   159ec:	bf18      	it	ne
   159ee:	4604      	movne	r4, r0
   159f0:	6820      	ldr	r0, [r4, #0]
   159f2:	b083      	sub	sp, #12
   159f4:	4540      	cmp	r0, r8
   159f6:	d01d      	beq.n	15a34 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   159f8:	4616      	mov	r6, r2
   159fa:	460d      	mov	r5, r1
   159fc:	4620      	mov	r0, r4
   159fe:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   15a02:	f104 0904 	add.w	r9, r4, #4
   15a06:	f000 fe9b 	bl	16740 <mbedtls_platform_zeroize>
   15a0a:	f504 778c 	add.w	r7, r4, #280	; 0x118
   15a0e:	4648      	mov	r0, r9
   15a10:	f000 f93e 	bl	15c90 <cc_mbedtls_entropy_init>
   15a14:	4638      	mov	r0, r7
   15a16:	f001 fa75 	bl	16f04 <cc_mbedtls_ctr_drbg_init>
   15a1a:	464a      	mov	r2, r9
   15a1c:	4638      	mov	r0, r7
   15a1e:	462b      	mov	r3, r5
   15a20:	4907      	ldr	r1, [pc, #28]	; (15a40 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   15a22:	9600      	str	r6, [sp, #0]
   15a24:	f001 fa80 	bl	16f28 <cc_mbedtls_ctr_drbg_seed>
   15a28:	b908      	cbnz	r0, 15a2e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   15a2a:	f8c4 8000 	str.w	r8, [r4]
   15a2e:	b003      	add	sp, #12
   15a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15a34:	2000      	movs	r0, #0
   15a36:	b003      	add	sp, #12
   15a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15a3c:	20001328 	.word	0x20001328
   15a40:	00015d11 	.word	0x00015d11
   15a44:	5ac9bca5 	.word	0x5ac9bca5

00015a48 <nrf_cc3xx_platform_ctr_drbg_get>:
   15a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a4a:	4c0d      	ldr	r4, [pc, #52]	; (15a80 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   15a4c:	4e0d      	ldr	r6, [pc, #52]	; (15a84 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   15a4e:	2800      	cmp	r0, #0
   15a50:	bf08      	it	eq
   15a52:	4620      	moveq	r0, r4
   15a54:	6807      	ldr	r7, [r0, #0]
   15a56:	b083      	sub	sp, #12
   15a58:	42b7      	cmp	r7, r6
   15a5a:	d10e      	bne.n	15a7a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   15a5c:	2600      	movs	r6, #0
   15a5e:	461d      	mov	r5, r3
   15a60:	f500 708c 	add.w	r0, r0, #280	; 0x118
   15a64:	4633      	mov	r3, r6
   15a66:	9600      	str	r6, [sp, #0]
   15a68:	4614      	mov	r4, r2
   15a6a:	f001 faad 	bl	16fc8 <cc_mbedtls_ctr_drbg_random_with_add>
   15a6e:	2800      	cmp	r0, #0
   15a70:	bf18      	it	ne
   15a72:	4634      	movne	r4, r6
   15a74:	602c      	str	r4, [r5, #0]
   15a76:	b003      	add	sp, #12
   15a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a7a:	4803      	ldr	r0, [pc, #12]	; (15a88 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   15a7c:	e7fb      	b.n	15a76 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   15a7e:	bf00      	nop
   15a80:	20001328 	.word	0x20001328
   15a84:	5ac9bca5 	.word	0x5ac9bca5
   15a88:	ffff8fe8 	.word	0xffff8fe8

00015a8c <mutex_free>:
   15a8c:	b510      	push	{r4, lr}
   15a8e:	4604      	mov	r4, r0
   15a90:	b130      	cbz	r0, 15aa0 <mutex_free+0x14>
   15a92:	6863      	ldr	r3, [r4, #4]
   15a94:	06db      	lsls	r3, r3, #27
   15a96:	d502      	bpl.n	15a9e <mutex_free+0x12>
   15a98:	2300      	movs	r3, #0
   15a9a:	6023      	str	r3, [r4, #0]
   15a9c:	6063      	str	r3, [r4, #4]
   15a9e:	bd10      	pop	{r4, pc}
   15aa0:	4b02      	ldr	r3, [pc, #8]	; (15aac <mutex_free+0x20>)
   15aa2:	4803      	ldr	r0, [pc, #12]	; (15ab0 <mutex_free+0x24>)
   15aa4:	685b      	ldr	r3, [r3, #4]
   15aa6:	4798      	blx	r3
   15aa8:	e7f3      	b.n	15a92 <mutex_free+0x6>
   15aaa:	bf00      	nop
   15aac:	20000060 	.word	0x20000060
   15ab0:	00019008 	.word	0x00019008

00015ab4 <mutex_unlock>:
   15ab4:	b168      	cbz	r0, 15ad2 <mutex_unlock+0x1e>
   15ab6:	6843      	ldr	r3, [r0, #4]
   15ab8:	b13b      	cbz	r3, 15aca <mutex_unlock+0x16>
   15aba:	06db      	lsls	r3, r3, #27
   15abc:	d507      	bpl.n	15ace <mutex_unlock+0x1a>
   15abe:	f3bf 8f5f 	dmb	sy
   15ac2:	2300      	movs	r3, #0
   15ac4:	6003      	str	r3, [r0, #0]
   15ac6:	4618      	mov	r0, r3
   15ac8:	4770      	bx	lr
   15aca:	4803      	ldr	r0, [pc, #12]	; (15ad8 <mutex_unlock+0x24>)
   15acc:	4770      	bx	lr
   15ace:	4803      	ldr	r0, [pc, #12]	; (15adc <mutex_unlock+0x28>)
   15ad0:	4770      	bx	lr
   15ad2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   15ad6:	4770      	bx	lr
   15ad8:	ffff8fea 	.word	0xffff8fea
   15adc:	ffff8fe9 	.word	0xffff8fe9

00015ae0 <mutex_init>:
   15ae0:	b510      	push	{r4, lr}
   15ae2:	4604      	mov	r4, r0
   15ae4:	b120      	cbz	r0, 15af0 <mutex_init+0x10>
   15ae6:	2200      	movs	r2, #0
   15ae8:	2311      	movs	r3, #17
   15aea:	6022      	str	r2, [r4, #0]
   15aec:	6063      	str	r3, [r4, #4]
   15aee:	bd10      	pop	{r4, pc}
   15af0:	4801      	ldr	r0, [pc, #4]	; (15af8 <mutex_init+0x18>)
   15af2:	f7ff ff51 	bl	15998 <CC_PalAbort>
   15af6:	e7f6      	b.n	15ae6 <mutex_init+0x6>
   15af8:	00019030 	.word	0x00019030

00015afc <mutex_lock>:
   15afc:	b1a0      	cbz	r0, 15b28 <mutex_lock+0x2c>
   15afe:	6843      	ldr	r3, [r0, #4]
   15b00:	b183      	cbz	r3, 15b24 <mutex_lock+0x28>
   15b02:	06db      	lsls	r3, r3, #27
   15b04:	d50c      	bpl.n	15b20 <mutex_lock+0x24>
   15b06:	2201      	movs	r2, #1
   15b08:	e8d0 3fef 	ldaex	r3, [r0]
   15b0c:	e8c0 2fe1 	stlex	r1, r2, [r0]
   15b10:	2900      	cmp	r1, #0
   15b12:	d1f9      	bne.n	15b08 <mutex_lock+0xc>
   15b14:	2b01      	cmp	r3, #1
   15b16:	d0f7      	beq.n	15b08 <mutex_lock+0xc>
   15b18:	f3bf 8f5f 	dmb	sy
   15b1c:	2000      	movs	r0, #0
   15b1e:	4770      	bx	lr
   15b20:	4803      	ldr	r0, [pc, #12]	; (15b30 <mutex_lock+0x34>)
   15b22:	4770      	bx	lr
   15b24:	4803      	ldr	r0, [pc, #12]	; (15b34 <mutex_lock+0x38>)
   15b26:	4770      	bx	lr
   15b28:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   15b2c:	4770      	bx	lr
   15b2e:	bf00      	nop
   15b30:	ffff8fe9 	.word	0xffff8fe9
   15b34:	ffff8fea 	.word	0xffff8fea

00015b38 <nrf_cc3xx_platform_set_mutexes>:
   15b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b3c:	4c14      	ldr	r4, [pc, #80]	; (15b90 <nrf_cc3xx_platform_set_mutexes+0x58>)
   15b3e:	6802      	ldr	r2, [r0, #0]
   15b40:	68c3      	ldr	r3, [r0, #12]
   15b42:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   15b46:	e9c4 6302 	strd	r6, r3, [r4, #8]
   15b4a:	e9c4 2500 	strd	r2, r5, [r4]
   15b4e:	4b11      	ldr	r3, [pc, #68]	; (15b94 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   15b50:	680e      	ldr	r6, [r1, #0]
   15b52:	6848      	ldr	r0, [r1, #4]
   15b54:	4d10      	ldr	r5, [pc, #64]	; (15b98 <nrf_cc3xx_platform_set_mutexes+0x60>)
   15b56:	e9c3 6000 	strd	r6, r0, [r3]
   15b5a:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
   15b5e:	6908      	ldr	r0, [r1, #16]
   15b60:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   15b64:	e9c3 7602 	strd	r7, r6, [r3, #8]
   15b68:	6118      	str	r0, [r3, #16]
   15b6a:	06cb      	lsls	r3, r1, #27
   15b6c:	d50d      	bpl.n	15b8a <nrf_cc3xx_platform_set_mutexes+0x52>
   15b6e:	2300      	movs	r3, #0
   15b70:	f505 7088 	add.w	r0, r5, #272	; 0x110
   15b74:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   15b78:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   15b7c:	4790      	blx	r2
   15b7e:	6823      	ldr	r3, [r4, #0]
   15b80:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   15b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15b88:	4718      	bx	r3
   15b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15b8e:	bf00      	nop
   15b90:	20000070 	.word	0x20000070
   15b94:	20000080 	.word	0x20000080
   15b98:	20001328 	.word	0x20001328

00015b9c <entropy_update>:
   15b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15ba0:	2b20      	cmp	r3, #32
   15ba2:	461d      	mov	r5, r3
   15ba4:	4606      	mov	r6, r0
   15ba6:	4689      	mov	r9, r1
   15ba8:	4690      	mov	r8, r2
   15baa:	b08b      	sub	sp, #44	; 0x2c
   15bac:	d826      	bhi.n	15bfc <entropy_update+0x60>
   15bae:	b2db      	uxtb	r3, r3
   15bb0:	af02      	add	r7, sp, #8
   15bb2:	6831      	ldr	r1, [r6, #0]
   15bb4:	f88d 9004 	strb.w	r9, [sp, #4]
   15bb8:	f88d 3005 	strb.w	r3, [sp, #5]
   15bbc:	f106 0904 	add.w	r9, r6, #4
   15bc0:	b921      	cbnz	r1, 15bcc <entropy_update+0x30>
   15bc2:	4648      	mov	r0, r9
   15bc4:	f000 fe62 	bl	1688c <cc_mbedtls_sha256_starts_ret>
   15bc8:	4604      	mov	r4, r0
   15bca:	b940      	cbnz	r0, 15bde <entropy_update+0x42>
   15bcc:	2301      	movs	r3, #1
   15bce:	2202      	movs	r2, #2
   15bd0:	4648      	mov	r0, r9
   15bd2:	6033      	str	r3, [r6, #0]
   15bd4:	a901      	add	r1, sp, #4
   15bd6:	f000 fe6d 	bl	168b4 <cc_mbedtls_sha256_update_ret>
   15bda:	4604      	mov	r4, r0
   15bdc:	b138      	cbz	r0, 15bee <entropy_update+0x52>
   15bde:	4638      	mov	r0, r7
   15be0:	2120      	movs	r1, #32
   15be2:	f000 fdad 	bl	16740 <mbedtls_platform_zeroize>
   15be6:	4620      	mov	r0, r4
   15be8:	b00b      	add	sp, #44	; 0x2c
   15bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15bee:	462a      	mov	r2, r5
   15bf0:	4641      	mov	r1, r8
   15bf2:	4648      	mov	r0, r9
   15bf4:	f000 fe5e 	bl	168b4 <cc_mbedtls_sha256_update_ret>
   15bf8:	4604      	mov	r4, r0
   15bfa:	e7f0      	b.n	15bde <entropy_update+0x42>
   15bfc:	af02      	add	r7, sp, #8
   15bfe:	4619      	mov	r1, r3
   15c00:	4610      	mov	r0, r2
   15c02:	2300      	movs	r3, #0
   15c04:	463a      	mov	r2, r7
   15c06:	f001 fad3 	bl	171b0 <cc_mbedtls_sha256_ret>
   15c0a:	4604      	mov	r4, r0
   15c0c:	2800      	cmp	r0, #0
   15c0e:	d1e6      	bne.n	15bde <entropy_update+0x42>
   15c10:	2320      	movs	r3, #32
   15c12:	46b8      	mov	r8, r7
   15c14:	461d      	mov	r5, r3
   15c16:	e7cc      	b.n	15bb2 <entropy_update+0x16>

00015c18 <entropy_gather_internal.part.0>:
   15c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c1a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   15c1e:	b0a7      	sub	sp, #156	; 0x9c
   15c20:	2b00      	cmp	r3, #0
   15c22:	bfd8      	it	le
   15c24:	ae02      	addle	r6, sp, #8
   15c26:	dd2c      	ble.n	15c82 <entropy_gather_internal.part.0+0x6a>
   15c28:	4605      	mov	r5, r0
   15c2a:	2300      	movs	r3, #0
   15c2c:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   15c30:	ae02      	add	r6, sp, #8
   15c32:	9301      	str	r3, [sp, #4]
   15c34:	f1a4 0701 	sub.w	r7, r4, #1
   15c38:	4631      	mov	r1, r6
   15c3a:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   15c3e:	2290      	movs	r2, #144	; 0x90
   15c40:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   15c44:	ab01      	add	r3, sp, #4
   15c46:	fab7 f787 	clz	r7, r7
   15c4a:	47a0      	blx	r4
   15c4c:	097f      	lsrs	r7, r7, #5
   15c4e:	4604      	mov	r4, r0
   15c50:	b910      	cbnz	r0, 15c58 <entropy_gather_internal.part.0+0x40>
   15c52:	9b01      	ldr	r3, [sp, #4]
   15c54:	b93b      	cbnz	r3, 15c66 <entropy_gather_internal.part.0+0x4e>
   15c56:	b1a7      	cbz	r7, 15c82 <entropy_gather_internal.part.0+0x6a>
   15c58:	4630      	mov	r0, r6
   15c5a:	2190      	movs	r1, #144	; 0x90
   15c5c:	f000 fd70 	bl	16740 <mbedtls_platform_zeroize>
   15c60:	4620      	mov	r0, r4
   15c62:	b027      	add	sp, #156	; 0x9c
   15c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c66:	4601      	mov	r1, r0
   15c68:	4632      	mov	r2, r6
   15c6a:	4628      	mov	r0, r5
   15c6c:	f7ff ff96 	bl	15b9c <entropy_update>
   15c70:	b950      	cbnz	r0, 15c88 <entropy_gather_internal.part.0+0x70>
   15c72:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   15c76:	9a01      	ldr	r2, [sp, #4]
   15c78:	4413      	add	r3, r2
   15c7a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   15c7e:	2f00      	cmp	r7, #0
   15c80:	d1ea      	bne.n	15c58 <entropy_gather_internal.part.0+0x40>
   15c82:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   15c86:	e7e7      	b.n	15c58 <entropy_gather_internal.part.0+0x40>
   15c88:	4604      	mov	r4, r0
   15c8a:	4620      	mov	r0, r4
   15c8c:	b027      	add	sp, #156	; 0x9c
   15c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015c90 <cc_mbedtls_entropy_init>:
   15c90:	b570      	push	{r4, r5, r6, lr}
   15c92:	2500      	movs	r5, #0
   15c94:	4604      	mov	r4, r0
   15c96:	4629      	mov	r1, r5
   15c98:	2214      	movs	r2, #20
   15c9a:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   15c9e:	30f8      	adds	r0, #248	; 0xf8
   15ca0:	f002 fdd9 	bl	18856 <memset>
   15ca4:	4b16      	ldr	r3, [pc, #88]	; (15d00 <cc_mbedtls_entropy_init+0x70>)
   15ca6:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   15caa:	681b      	ldr	r3, [r3, #0]
   15cac:	4630      	mov	r0, r6
   15cae:	4798      	blx	r3
   15cb0:	4620      	mov	r0, r4
   15cb2:	f840 5b04 	str.w	r5, [r0], #4
   15cb6:	f000 fdcf 	bl	16858 <cc_mbedtls_sha256_init>
   15cba:	4b12      	ldr	r3, [pc, #72]	; (15d04 <cc_mbedtls_entropy_init+0x74>)
   15cbc:	4630      	mov	r0, r6
   15cbe:	681b      	ldr	r3, [r3, #0]
   15cc0:	4798      	blx	r3
   15cc2:	b9d8      	cbnz	r0, 15cfc <cc_mbedtls_entropy_init+0x6c>
   15cc4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   15cc8:	42ab      	cmp	r3, r5
   15cca:	dc11      	bgt.n	15cf0 <cc_mbedtls_entropy_init+0x60>
   15ccc:	2101      	movs	r1, #1
   15cce:	2520      	movs	r5, #32
   15cd0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   15cd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   15cd8:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   15cdc:	480a      	ldr	r0, [pc, #40]	; (15d08 <cc_mbedtls_entropy_init+0x78>)
   15cde:	440b      	add	r3, r1
   15ce0:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
   15ce4:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
   15ce8:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   15cec:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   15cf0:	4b06      	ldr	r3, [pc, #24]	; (15d0c <cc_mbedtls_entropy_init+0x7c>)
   15cf2:	4630      	mov	r0, r6
   15cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15cf8:	681b      	ldr	r3, [r3, #0]
   15cfa:	4718      	bx	r3
   15cfc:	bd70      	pop	{r4, r5, r6, pc}
   15cfe:	bf00      	nop
   15d00:	200000c4 	.word	0x200000c4
   15d04:	200000c8 	.word	0x200000c8
   15d08:	00016755 	.word	0x00016755
   15d0c:	200000cc 	.word	0x200000cc

00015d10 <cc_mbedtls_entropy_func>:
   15d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15d14:	2a20      	cmp	r2, #32
   15d16:	b088      	sub	sp, #32
   15d18:	d878      	bhi.n	15e0c <cc_mbedtls_entropy_func+0xfc>
   15d1a:	4b3e      	ldr	r3, [pc, #248]	; (15e14 <cc_mbedtls_entropy_func+0x104>)
   15d1c:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   15d20:	4604      	mov	r4, r0
   15d22:	681b      	ldr	r3, [r3, #0]
   15d24:	4648      	mov	r0, r9
   15d26:	4617      	mov	r7, r2
   15d28:	4688      	mov	r8, r1
   15d2a:	4798      	blx	r3
   15d2c:	4605      	mov	r5, r0
   15d2e:	bb40      	cbnz	r0, 15d82 <cc_mbedtls_entropy_func+0x72>
   15d30:	f240 1601 	movw	r6, #257	; 0x101
   15d34:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   15d38:	2b00      	cmp	r3, #0
   15d3a:	d063      	beq.n	15e04 <cc_mbedtls_entropy_func+0xf4>
   15d3c:	4620      	mov	r0, r4
   15d3e:	f7ff ff6b 	bl	15c18 <entropy_gather_internal.part.0>
   15d42:	4605      	mov	r5, r0
   15d44:	2800      	cmp	r0, #0
   15d46:	d15f      	bne.n	15e08 <cc_mbedtls_entropy_func+0xf8>
   15d48:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   15d4c:	2b00      	cmp	r3, #0
   15d4e:	dd07      	ble.n	15d60 <cc_mbedtls_entropy_func+0x50>
   15d50:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   15d54:	4290      	cmp	r0, r2
   15d56:	d303      	bcc.n	15d60 <cc_mbedtls_entropy_func+0x50>
   15d58:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   15d5c:	2a01      	cmp	r2, #1
   15d5e:	d014      	beq.n	15d8a <cc_mbedtls_entropy_func+0x7a>
   15d60:	3e01      	subs	r6, #1
   15d62:	d1e9      	bne.n	15d38 <cc_mbedtls_entropy_func+0x28>
   15d64:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   15d68:	466e      	mov	r6, sp
   15d6a:	4630      	mov	r0, r6
   15d6c:	2120      	movs	r1, #32
   15d6e:	f000 fce7 	bl	16740 <mbedtls_platform_zeroize>
   15d72:	4b29      	ldr	r3, [pc, #164]	; (15e18 <cc_mbedtls_entropy_func+0x108>)
   15d74:	4648      	mov	r0, r9
   15d76:	681b      	ldr	r3, [r3, #0]
   15d78:	4798      	blx	r3
   15d7a:	2800      	cmp	r0, #0
   15d7c:	bf18      	it	ne
   15d7e:	f06f 051d 	mvnne.w	r5, #29
   15d82:	4628      	mov	r0, r5
   15d84:	b008      	add	sp, #32
   15d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d8a:	281f      	cmp	r0, #31
   15d8c:	d9e8      	bls.n	15d60 <cc_mbedtls_entropy_func+0x50>
   15d8e:	466e      	mov	r6, sp
   15d90:	4629      	mov	r1, r5
   15d92:	2220      	movs	r2, #32
   15d94:	4630      	mov	r0, r6
   15d96:	f104 0a04 	add.w	sl, r4, #4
   15d9a:	f002 fd5c 	bl	18856 <memset>
   15d9e:	4631      	mov	r1, r6
   15da0:	4650      	mov	r0, sl
   15da2:	f000 fd8f 	bl	168c4 <cc_mbedtls_sha256_finish_ret>
   15da6:	4605      	mov	r5, r0
   15da8:	2800      	cmp	r0, #0
   15daa:	d1de      	bne.n	15d6a <cc_mbedtls_entropy_func+0x5a>
   15dac:	4650      	mov	r0, sl
   15dae:	f000 fd67 	bl	16880 <cc_mbedtls_sha256_free>
   15db2:	4650      	mov	r0, sl
   15db4:	f000 fd50 	bl	16858 <cc_mbedtls_sha256_init>
   15db8:	4629      	mov	r1, r5
   15dba:	4650      	mov	r0, sl
   15dbc:	f000 fd66 	bl	1688c <cc_mbedtls_sha256_starts_ret>
   15dc0:	4605      	mov	r5, r0
   15dc2:	2800      	cmp	r0, #0
   15dc4:	d1d1      	bne.n	15d6a <cc_mbedtls_entropy_func+0x5a>
   15dc6:	4650      	mov	r0, sl
   15dc8:	2220      	movs	r2, #32
   15dca:	4631      	mov	r1, r6
   15dcc:	f000 fd72 	bl	168b4 <cc_mbedtls_sha256_update_ret>
   15dd0:	4605      	mov	r5, r0
   15dd2:	2800      	cmp	r0, #0
   15dd4:	d1c9      	bne.n	15d6a <cc_mbedtls_entropy_func+0x5a>
   15dd6:	4603      	mov	r3, r0
   15dd8:	4632      	mov	r2, r6
   15dda:	2120      	movs	r1, #32
   15ddc:	4630      	mov	r0, r6
   15dde:	f001 f9e7 	bl	171b0 <cc_mbedtls_sha256_ret>
   15de2:	4605      	mov	r5, r0
   15de4:	2800      	cmp	r0, #0
   15de6:	d1c0      	bne.n	15d6a <cc_mbedtls_entropy_func+0x5a>
   15de8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   15dec:	463a      	mov	r2, r7
   15dee:	2b00      	cmp	r3, #0
   15df0:	bfc8      	it	gt
   15df2:	2300      	movgt	r3, #0
   15df4:	4640      	mov	r0, r8
   15df6:	4631      	mov	r1, r6
   15df8:	bfc8      	it	gt
   15dfa:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   15dfe:	f002 fd1f 	bl	18840 <memcpy>
   15e02:	e7b2      	b.n	15d6a <cc_mbedtls_entropy_func+0x5a>
   15e04:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   15e08:	466e      	mov	r6, sp
   15e0a:	e7ae      	b.n	15d6a <cc_mbedtls_entropy_func+0x5a>
   15e0c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   15e10:	e7b7      	b.n	15d82 <cc_mbedtls_entropy_func+0x72>
   15e12:	bf00      	nop
   15e14:	200000c8 	.word	0x200000c8
   15e18:	200000cc 	.word	0x200000cc

00015e1c <RndStartupTest.constprop.0>:
   15e1c:	2100      	movs	r1, #0
   15e1e:	b530      	push	{r4, r5, lr}
   15e20:	b08d      	sub	sp, #52	; 0x34
   15e22:	2228      	movs	r2, #40	; 0x28
   15e24:	a802      	add	r0, sp, #8
   15e26:	9101      	str	r1, [sp, #4]
   15e28:	f002 fd15 	bl	18856 <memset>
   15e2c:	a802      	add	r0, sp, #8
   15e2e:	f001 f9e7 	bl	17200 <RNG_PLAT_SetUserRngParameters>
   15e32:	4604      	mov	r4, r0
   15e34:	b110      	cbz	r0, 15e3c <RndStartupTest.constprop.0+0x20>
   15e36:	4620      	mov	r0, r4
   15e38:	b00d      	add	sp, #52	; 0x34
   15e3a:	bd30      	pop	{r4, r5, pc}
   15e3c:	4d18      	ldr	r5, [pc, #96]	; (15ea0 <RndStartupTest.constprop.0+0x84>)
   15e3e:	f04f 31ff 	mov.w	r1, #4294967295
   15e42:	6828      	ldr	r0, [r5, #0]
   15e44:	f000 f93a 	bl	160bc <CC_PalMutexLock>
   15e48:	4604      	mov	r4, r0
   15e4a:	b9c0      	cbnz	r0, 15e7e <RndStartupTest.constprop.0+0x62>
   15e4c:	2000      	movs	r0, #0
   15e4e:	f000 f965 	bl	1611c <CC_PalPowerSaveModeSelect>
   15e52:	bb00      	cbnz	r0, 15e96 <RndStartupTest.constprop.0+0x7a>
   15e54:	4a13      	ldr	r2, [pc, #76]	; (15ea4 <RndStartupTest.constprop.0+0x88>)
   15e56:	a902      	add	r1, sp, #8
   15e58:	a801      	add	r0, sp, #4
   15e5a:	f000 fc63 	bl	16724 <LLF_RND_RunTrngStartupTest>
   15e5e:	4604      	mov	r4, r0
   15e60:	2001      	movs	r0, #1
   15e62:	f000 f95b 	bl	1611c <CC_PalPowerSaveModeSelect>
   15e66:	b990      	cbnz	r0, 15e8e <RndStartupTest.constprop.0+0x72>
   15e68:	6828      	ldr	r0, [r5, #0]
   15e6a:	f000 f92f 	bl	160cc <CC_PalMutexUnlock>
   15e6e:	2800      	cmp	r0, #0
   15e70:	d0e1      	beq.n	15e36 <RndStartupTest.constprop.0+0x1a>
   15e72:	480d      	ldr	r0, [pc, #52]	; (15ea8 <RndStartupTest.constprop.0+0x8c>)
   15e74:	f7ff fd90 	bl	15998 <CC_PalAbort>
   15e78:	4620      	mov	r0, r4
   15e7a:	b00d      	add	sp, #52	; 0x34
   15e7c:	bd30      	pop	{r4, r5, pc}
   15e7e:	480b      	ldr	r0, [pc, #44]	; (15eac <RndStartupTest.constprop.0+0x90>)
   15e80:	f7ff fd8a 	bl	15998 <CC_PalAbort>
   15e84:	2c01      	cmp	r4, #1
   15e86:	bf08      	it	eq
   15e88:	2405      	moveq	r4, #5
   15e8a:	d0ed      	beq.n	15e68 <RndStartupTest.constprop.0+0x4c>
   15e8c:	e7de      	b.n	15e4c <RndStartupTest.constprop.0+0x30>
   15e8e:	4808      	ldr	r0, [pc, #32]	; (15eb0 <RndStartupTest.constprop.0+0x94>)
   15e90:	f7ff fd82 	bl	15998 <CC_PalAbort>
   15e94:	e7e8      	b.n	15e68 <RndStartupTest.constprop.0+0x4c>
   15e96:	4807      	ldr	r0, [pc, #28]	; (15eb4 <RndStartupTest.constprop.0+0x98>)
   15e98:	f7ff fd7e 	bl	15998 <CC_PalAbort>
   15e9c:	e7da      	b.n	15e54 <RndStartupTest.constprop.0+0x38>
   15e9e:	bf00      	nop
   15ea0:	200000c0 	.word	0x200000c0
   15ea4:	20000aa4 	.word	0x20000aa4
   15ea8:	000190ac 	.word	0x000190ac
   15eac:	00019054 	.word	0x00019054
   15eb0:	0001908c 	.word	0x0001908c
   15eb4:	0001906c 	.word	0x0001906c

00015eb8 <CC_LibInit>:
   15eb8:	b510      	push	{r4, lr}
   15eba:	b082      	sub	sp, #8
   15ebc:	f000 f854 	bl	15f68 <CC_HalInit>
   15ec0:	b128      	cbz	r0, 15ece <CC_LibInit+0x16>
   15ec2:	f000 f8a3 	bl	1600c <CC_PalTerminate>
   15ec6:	2403      	movs	r4, #3
   15ec8:	4620      	mov	r0, r4
   15eca:	b002      	add	sp, #8
   15ecc:	bd10      	pop	{r4, pc}
   15ece:	f000 f86f 	bl	15fb0 <CC_PalInit>
   15ed2:	b9d0      	cbnz	r0, 15f0a <CC_LibInit+0x52>
   15ed4:	f000 f922 	bl	1611c <CC_PalPowerSaveModeSelect>
   15ed8:	b9d8      	cbnz	r0, 15f12 <CC_LibInit+0x5a>
   15eda:	4b1e      	ldr	r3, [pc, #120]	; (15f54 <CC_LibInit+0x9c>)
   15edc:	681b      	ldr	r3, [r3, #0]
   15ede:	0e1b      	lsrs	r3, r3, #24
   15ee0:	2bf0      	cmp	r3, #240	; 0xf0
   15ee2:	d10a      	bne.n	15efa <CC_LibInit+0x42>
   15ee4:	4a1c      	ldr	r2, [pc, #112]	; (15f58 <CC_LibInit+0xa0>)
   15ee6:	4b1d      	ldr	r3, [pc, #116]	; (15f5c <CC_LibInit+0xa4>)
   15ee8:	6812      	ldr	r2, [r2, #0]
   15eea:	429a      	cmp	r2, r3
   15eec:	d029      	beq.n	15f42 <CC_LibInit+0x8a>
   15eee:	f000 f83d 	bl	15f6c <CC_HalTerminate>
   15ef2:	2407      	movs	r4, #7
   15ef4:	f000 f88a 	bl	1600c <CC_PalTerminate>
   15ef8:	e7e6      	b.n	15ec8 <CC_LibInit+0x10>
   15efa:	2406      	movs	r4, #6
   15efc:	f000 f836 	bl	15f6c <CC_HalTerminate>
   15f00:	f000 f884 	bl	1600c <CC_PalTerminate>
   15f04:	4620      	mov	r0, r4
   15f06:	b002      	add	sp, #8
   15f08:	bd10      	pop	{r4, pc}
   15f0a:	2404      	movs	r4, #4
   15f0c:	4620      	mov	r0, r4
   15f0e:	b002      	add	sp, #8
   15f10:	bd10      	pop	{r4, pc}
   15f12:	f000 f82b 	bl	15f6c <CC_HalTerminate>
   15f16:	f000 f879 	bl	1600c <CC_PalTerminate>
   15f1a:	f7ff ff7f 	bl	15e1c <RndStartupTest.constprop.0>
   15f1e:	4604      	mov	r4, r0
   15f20:	b958      	cbnz	r0, 15f3a <CC_LibInit+0x82>
   15f22:	4602      	mov	r2, r0
   15f24:	4601      	mov	r1, r0
   15f26:	f7ff fd5b 	bl	159e0 <nrf_cc3xx_platform_ctr_drbg_init>
   15f2a:	b930      	cbnz	r0, 15f3a <CC_LibInit+0x82>
   15f2c:	2268      	movs	r2, #104	; 0x68
   15f2e:	490c      	ldr	r1, [pc, #48]	; (15f60 <CC_LibInit+0xa8>)
   15f30:	ab01      	add	r3, sp, #4
   15f32:	f7ff fd89 	bl	15a48 <nrf_cc3xx_platform_ctr_drbg_get>
   15f36:	2800      	cmp	r0, #0
   15f38:	d0c6      	beq.n	15ec8 <CC_LibInit+0x10>
   15f3a:	2405      	movs	r4, #5
   15f3c:	4620      	mov	r0, r4
   15f3e:	b002      	add	sp, #8
   15f40:	bd10      	pop	{r4, pc}
   15f42:	2001      	movs	r0, #1
   15f44:	f000 f8ea 	bl	1611c <CC_PalPowerSaveModeSelect>
   15f48:	2800      	cmp	r0, #0
   15f4a:	d1e2      	bne.n	15f12 <CC_LibInit+0x5a>
   15f4c:	4b05      	ldr	r3, [pc, #20]	; (15f64 <CC_LibInit+0xac>)
   15f4e:	6018      	str	r0, [r3, #0]
   15f50:	e7e3      	b.n	15f1a <CC_LibInit+0x62>
   15f52:	bf00      	nop
   15f54:	50841928 	.word	0x50841928
   15f58:	50841a24 	.word	0x50841a24
   15f5c:	20e00000 	.word	0x20e00000
   15f60:	20000a3c 	.word	0x20000a3c
   15f64:	50841a0c 	.word	0x50841a0c

00015f68 <CC_HalInit>:
   15f68:	2000      	movs	r0, #0
   15f6a:	4770      	bx	lr

00015f6c <CC_HalTerminate>:
   15f6c:	2000      	movs	r0, #0
   15f6e:	4770      	bx	lr

00015f70 <CC_HalClearInterruptBit>:
   15f70:	0543      	lsls	r3, r0, #21
   15f72:	d503      	bpl.n	15f7c <CC_HalClearInterruptBit+0xc>
   15f74:	f04f 32ff 	mov.w	r2, #4294967295
   15f78:	4b02      	ldr	r3, [pc, #8]	; (15f84 <CC_HalClearInterruptBit+0x14>)
   15f7a:	601a      	str	r2, [r3, #0]
   15f7c:	4b02      	ldr	r3, [pc, #8]	; (15f88 <CC_HalClearInterruptBit+0x18>)
   15f7e:	6018      	str	r0, [r3, #0]
   15f80:	4770      	bx	lr
   15f82:	bf00      	nop
   15f84:	50841108 	.word	0x50841108
   15f88:	50841a08 	.word	0x50841a08

00015f8c <CC_HalMaskInterrupt>:
   15f8c:	4b01      	ldr	r3, [pc, #4]	; (15f94 <CC_HalMaskInterrupt+0x8>)
   15f8e:	6018      	str	r0, [r3, #0]
   15f90:	4770      	bx	lr
   15f92:	bf00      	nop
   15f94:	50841a04 	.word	0x50841a04

00015f98 <CC_HalWaitInterrupt>:
   15f98:	b108      	cbz	r0, 15f9e <CC_HalWaitInterrupt+0x6>
   15f9a:	f000 b86d 	b.w	16078 <CC_PalWaitInterrupt>
   15f9e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   15fa2:	4770      	bx	lr

00015fa4 <CC_HalWaitInterruptRND>:
   15fa4:	b108      	cbz	r0, 15faa <CC_HalWaitInterruptRND+0x6>
   15fa6:	f000 b84f 	b.w	16048 <CC_PalWaitInterruptRND>
   15faa:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   15fae:	4770      	bx	lr

00015fb0 <CC_PalInit>:
   15fb0:	b510      	push	{r4, lr}
   15fb2:	4811      	ldr	r0, [pc, #68]	; (15ff8 <CC_PalInit+0x48>)
   15fb4:	f000 f86e 	bl	16094 <CC_PalMutexCreate>
   15fb8:	b100      	cbz	r0, 15fbc <CC_PalInit+0xc>
   15fba:	bd10      	pop	{r4, pc}
   15fbc:	480f      	ldr	r0, [pc, #60]	; (15ffc <CC_PalInit+0x4c>)
   15fbe:	f000 f869 	bl	16094 <CC_PalMutexCreate>
   15fc2:	2800      	cmp	r0, #0
   15fc4:	d1f9      	bne.n	15fba <CC_PalInit+0xa>
   15fc6:	4c0e      	ldr	r4, [pc, #56]	; (16000 <CC_PalInit+0x50>)
   15fc8:	4620      	mov	r0, r4
   15fca:	f000 f863 	bl	16094 <CC_PalMutexCreate>
   15fce:	2800      	cmp	r0, #0
   15fd0:	d1f3      	bne.n	15fba <CC_PalInit+0xa>
   15fd2:	4b0c      	ldr	r3, [pc, #48]	; (16004 <CC_PalInit+0x54>)
   15fd4:	480c      	ldr	r0, [pc, #48]	; (16008 <CC_PalInit+0x58>)
   15fd6:	601c      	str	r4, [r3, #0]
   15fd8:	f000 f85c 	bl	16094 <CC_PalMutexCreate>
   15fdc:	4601      	mov	r1, r0
   15fde:	2800      	cmp	r0, #0
   15fe0:	d1eb      	bne.n	15fba <CC_PalInit+0xa>
   15fe2:	f000 f82d 	bl	16040 <CC_PalDmaInit>
   15fe6:	4604      	mov	r4, r0
   15fe8:	b108      	cbz	r0, 15fee <CC_PalInit+0x3e>
   15fea:	4620      	mov	r0, r4
   15fec:	bd10      	pop	{r4, pc}
   15fee:	f000 f877 	bl	160e0 <CC_PalPowerSaveModeInit>
   15ff2:	4620      	mov	r0, r4
   15ff4:	e7fa      	b.n	15fec <CC_PalInit+0x3c>
   15ff6:	bf00      	nop
   15ff8:	200000bc 	.word	0x200000bc
   15ffc:	200000b0 	.word	0x200000b0
   16000:	200000b8 	.word	0x200000b8
   16004:	200000c0 	.word	0x200000c0
   16008:	200000b4 	.word	0x200000b4

0001600c <CC_PalTerminate>:
   1600c:	b508      	push	{r3, lr}
   1600e:	4808      	ldr	r0, [pc, #32]	; (16030 <CC_PalTerminate+0x24>)
   16010:	f000 f84a 	bl	160a8 <CC_PalMutexDestroy>
   16014:	4807      	ldr	r0, [pc, #28]	; (16034 <CC_PalTerminate+0x28>)
   16016:	f000 f847 	bl	160a8 <CC_PalMutexDestroy>
   1601a:	4807      	ldr	r0, [pc, #28]	; (16038 <CC_PalTerminate+0x2c>)
   1601c:	f000 f844 	bl	160a8 <CC_PalMutexDestroy>
   16020:	4806      	ldr	r0, [pc, #24]	; (1603c <CC_PalTerminate+0x30>)
   16022:	f000 f841 	bl	160a8 <CC_PalMutexDestroy>
   16026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1602a:	f000 b80b 	b.w	16044 <CC_PalDmaTerminate>
   1602e:	bf00      	nop
   16030:	200000bc 	.word	0x200000bc
   16034:	200000b0 	.word	0x200000b0
   16038:	200000b8 	.word	0x200000b8
   1603c:	200000b4 	.word	0x200000b4

00016040 <CC_PalDmaInit>:
   16040:	2000      	movs	r0, #0
   16042:	4770      	bx	lr

00016044 <CC_PalDmaTerminate>:
   16044:	4770      	bx	lr
   16046:	bf00      	nop

00016048 <CC_PalWaitInterruptRND>:
   16048:	4602      	mov	r2, r0
   1604a:	4807      	ldr	r0, [pc, #28]	; (16068 <CC_PalWaitInterruptRND+0x20>)
   1604c:	6803      	ldr	r3, [r0, #0]
   1604e:	4213      	tst	r3, r2
   16050:	d0fc      	beq.n	1604c <CC_PalWaitInterruptRND+0x4>
   16052:	b121      	cbz	r1, 1605e <CC_PalWaitInterruptRND+0x16>
   16054:	4b05      	ldr	r3, [pc, #20]	; (1606c <CC_PalWaitInterruptRND+0x24>)
   16056:	4806      	ldr	r0, [pc, #24]	; (16070 <CC_PalWaitInterruptRND+0x28>)
   16058:	681b      	ldr	r3, [r3, #0]
   1605a:	600b      	str	r3, [r1, #0]
   1605c:	6003      	str	r3, [r0, #0]
   1605e:	4b05      	ldr	r3, [pc, #20]	; (16074 <CC_PalWaitInterruptRND+0x2c>)
   16060:	2000      	movs	r0, #0
   16062:	601a      	str	r2, [r3, #0]
   16064:	4770      	bx	lr
   16066:	bf00      	nop
   16068:	50841a00 	.word	0x50841a00
   1606c:	50841104 	.word	0x50841104
   16070:	50841108 	.word	0x50841108
   16074:	50841a08 	.word	0x50841a08

00016078 <CC_PalWaitInterrupt>:
   16078:	4602      	mov	r2, r0
   1607a:	4904      	ldr	r1, [pc, #16]	; (1608c <CC_PalWaitInterrupt+0x14>)
   1607c:	680b      	ldr	r3, [r1, #0]
   1607e:	421a      	tst	r2, r3
   16080:	d0fc      	beq.n	1607c <CC_PalWaitInterrupt+0x4>
   16082:	4b03      	ldr	r3, [pc, #12]	; (16090 <CC_PalWaitInterrupt+0x18>)
   16084:	2000      	movs	r0, #0
   16086:	601a      	str	r2, [r3, #0]
   16088:	4770      	bx	lr
   1608a:	bf00      	nop
   1608c:	50841a00 	.word	0x50841a00
   16090:	50841a08 	.word	0x50841a08

00016094 <CC_PalMutexCreate>:
   16094:	b508      	push	{r3, lr}
   16096:	4b03      	ldr	r3, [pc, #12]	; (160a4 <CC_PalMutexCreate+0x10>)
   16098:	6802      	ldr	r2, [r0, #0]
   1609a:	681b      	ldr	r3, [r3, #0]
   1609c:	6810      	ldr	r0, [r2, #0]
   1609e:	4798      	blx	r3
   160a0:	2000      	movs	r0, #0
   160a2:	bd08      	pop	{r3, pc}
   160a4:	20000070 	.word	0x20000070

000160a8 <CC_PalMutexDestroy>:
   160a8:	b508      	push	{r3, lr}
   160aa:	4b03      	ldr	r3, [pc, #12]	; (160b8 <CC_PalMutexDestroy+0x10>)
   160ac:	6802      	ldr	r2, [r0, #0]
   160ae:	685b      	ldr	r3, [r3, #4]
   160b0:	6810      	ldr	r0, [r2, #0]
   160b2:	4798      	blx	r3
   160b4:	2000      	movs	r0, #0
   160b6:	bd08      	pop	{r3, pc}
   160b8:	20000070 	.word	0x20000070

000160bc <CC_PalMutexLock>:
   160bc:	4b02      	ldr	r3, [pc, #8]	; (160c8 <CC_PalMutexLock+0xc>)
   160be:	6802      	ldr	r2, [r0, #0]
   160c0:	689b      	ldr	r3, [r3, #8]
   160c2:	6810      	ldr	r0, [r2, #0]
   160c4:	4718      	bx	r3
   160c6:	bf00      	nop
   160c8:	20000070 	.word	0x20000070

000160cc <CC_PalMutexUnlock>:
   160cc:	b508      	push	{r3, lr}
   160ce:	4b03      	ldr	r3, [pc, #12]	; (160dc <CC_PalMutexUnlock+0x10>)
   160d0:	6802      	ldr	r2, [r0, #0]
   160d2:	68db      	ldr	r3, [r3, #12]
   160d4:	6810      	ldr	r0, [r2, #0]
   160d6:	4798      	blx	r3
   160d8:	2000      	movs	r0, #0
   160da:	bd08      	pop	{r3, pc}
   160dc:	20000070 	.word	0x20000070

000160e0 <CC_PalPowerSaveModeInit>:
   160e0:	b570      	push	{r4, r5, r6, lr}
   160e2:	4c09      	ldr	r4, [pc, #36]	; (16108 <CC_PalPowerSaveModeInit+0x28>)
   160e4:	4d09      	ldr	r5, [pc, #36]	; (1610c <CC_PalPowerSaveModeInit+0x2c>)
   160e6:	6920      	ldr	r0, [r4, #16]
   160e8:	68ab      	ldr	r3, [r5, #8]
   160ea:	4798      	blx	r3
   160ec:	b118      	cbz	r0, 160f6 <CC_PalPowerSaveModeInit+0x16>
   160ee:	4b08      	ldr	r3, [pc, #32]	; (16110 <CC_PalPowerSaveModeInit+0x30>)
   160f0:	4808      	ldr	r0, [pc, #32]	; (16114 <CC_PalPowerSaveModeInit+0x34>)
   160f2:	685b      	ldr	r3, [r3, #4]
   160f4:	4798      	blx	r3
   160f6:	2100      	movs	r1, #0
   160f8:	4a07      	ldr	r2, [pc, #28]	; (16118 <CC_PalPowerSaveModeInit+0x38>)
   160fa:	68eb      	ldr	r3, [r5, #12]
   160fc:	6011      	str	r1, [r2, #0]
   160fe:	6920      	ldr	r0, [r4, #16]
   16100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16104:	4718      	bx	r3
   16106:	bf00      	nop
   16108:	20000080 	.word	0x20000080
   1610c:	20000070 	.word	0x20000070
   16110:	20000060 	.word	0x20000060
   16114:	000190c4 	.word	0x000190c4
   16118:	20000cc4 	.word	0x20000cc4

0001611c <CC_PalPowerSaveModeSelect>:
   1611c:	b570      	push	{r4, r5, r6, lr}
   1611e:	4d1a      	ldr	r5, [pc, #104]	; (16188 <CC_PalPowerSaveModeSelect+0x6c>)
   16120:	4e1a      	ldr	r6, [pc, #104]	; (1618c <CC_PalPowerSaveModeSelect+0x70>)
   16122:	4604      	mov	r4, r0
   16124:	68b2      	ldr	r2, [r6, #8]
   16126:	6928      	ldr	r0, [r5, #16]
   16128:	4790      	blx	r2
   1612a:	b9f0      	cbnz	r0, 1616a <CC_PalPowerSaveModeSelect+0x4e>
   1612c:	b15c      	cbz	r4, 16146 <CC_PalPowerSaveModeSelect+0x2a>
   1612e:	4c18      	ldr	r4, [pc, #96]	; (16190 <CC_PalPowerSaveModeSelect+0x74>)
   16130:	6823      	ldr	r3, [r4, #0]
   16132:	b1ab      	cbz	r3, 16160 <CC_PalPowerSaveModeSelect+0x44>
   16134:	2b01      	cmp	r3, #1
   16136:	d01a      	beq.n	1616e <CC_PalPowerSaveModeSelect+0x52>
   16138:	3b01      	subs	r3, #1
   1613a:	6023      	str	r3, [r4, #0]
   1613c:	6928      	ldr	r0, [r5, #16]
   1613e:	68f3      	ldr	r3, [r6, #12]
   16140:	4798      	blx	r3
   16142:	2000      	movs	r0, #0
   16144:	bd70      	pop	{r4, r5, r6, pc}
   16146:	4c12      	ldr	r4, [pc, #72]	; (16190 <CC_PalPowerSaveModeSelect+0x74>)
   16148:	6821      	ldr	r1, [r4, #0]
   1614a:	b939      	cbnz	r1, 1615c <CC_PalPowerSaveModeSelect+0x40>
   1614c:	2001      	movs	r0, #1
   1614e:	4b11      	ldr	r3, [pc, #68]	; (16194 <CC_PalPowerSaveModeSelect+0x78>)
   16150:	4a11      	ldr	r2, [pc, #68]	; (16198 <CC_PalPowerSaveModeSelect+0x7c>)
   16152:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   16156:	6813      	ldr	r3, [r2, #0]
   16158:	2b00      	cmp	r3, #0
   1615a:	d1fc      	bne.n	16156 <CC_PalPowerSaveModeSelect+0x3a>
   1615c:	3101      	adds	r1, #1
   1615e:	6021      	str	r1, [r4, #0]
   16160:	68f3      	ldr	r3, [r6, #12]
   16162:	6928      	ldr	r0, [r5, #16]
   16164:	4798      	blx	r3
   16166:	2000      	movs	r0, #0
   16168:	bd70      	pop	{r4, r5, r6, pc}
   1616a:	480c      	ldr	r0, [pc, #48]	; (1619c <CC_PalPowerSaveModeSelect+0x80>)
   1616c:	bd70      	pop	{r4, r5, r6, pc}
   1616e:	4a0a      	ldr	r2, [pc, #40]	; (16198 <CC_PalPowerSaveModeSelect+0x7c>)
   16170:	6813      	ldr	r3, [r2, #0]
   16172:	2b00      	cmp	r3, #0
   16174:	d1fc      	bne.n	16170 <CC_PalPowerSaveModeSelect+0x54>
   16176:	4a07      	ldr	r2, [pc, #28]	; (16194 <CC_PalPowerSaveModeSelect+0x78>)
   16178:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1617c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   16180:	f7ff ff04 	bl	15f8c <CC_HalMaskInterrupt>
   16184:	6823      	ldr	r3, [r4, #0]
   16186:	e7d7      	b.n	16138 <CC_PalPowerSaveModeSelect+0x1c>
   16188:	20000080 	.word	0x20000080
   1618c:	20000070 	.word	0x20000070
   16190:	20000cc4 	.word	0x20000cc4
   16194:	50840000 	.word	0x50840000
   16198:	50841910 	.word	0x50841910
   1619c:	ffff8fe9 	.word	0xffff8fe9

000161a0 <mutex_init>:
   161a0:	4b01      	ldr	r3, [pc, #4]	; (161a8 <mutex_init+0x8>)
   161a2:	681b      	ldr	r3, [r3, #0]
   161a4:	4718      	bx	r3
   161a6:	bf00      	nop
   161a8:	20000070 	.word	0x20000070

000161ac <mutex_lock>:
   161ac:	4b01      	ldr	r3, [pc, #4]	; (161b4 <mutex_lock+0x8>)
   161ae:	689b      	ldr	r3, [r3, #8]
   161b0:	4718      	bx	r3
   161b2:	bf00      	nop
   161b4:	20000070 	.word	0x20000070

000161b8 <mutex_unlock>:
   161b8:	4b01      	ldr	r3, [pc, #4]	; (161c0 <mutex_unlock+0x8>)
   161ba:	68db      	ldr	r3, [r3, #12]
   161bc:	4718      	bx	r3
   161be:	bf00      	nop
   161c0:	20000070 	.word	0x20000070

000161c4 <startTrngHW>:
   161c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   161c8:	2800      	cmp	r0, #0
   161ca:	d078      	beq.n	162be <startTrngHW+0xfa>
   161cc:	460c      	mov	r4, r1
   161ce:	2900      	cmp	r1, #0
   161d0:	d075      	beq.n	162be <startTrngHW+0xfa>
   161d2:	461d      	mov	r5, r3
   161d4:	2b00      	cmp	r3, #0
   161d6:	d072      	beq.n	162be <startTrngHW+0xfa>
   161d8:	4606      	mov	r6, r0
   161da:	b11a      	cbz	r2, 161e4 <startTrngHW+0x20>
   161dc:	2201      	movs	r2, #1
   161de:	2300      	movs	r3, #0
   161e0:	602a      	str	r2, [r5, #0]
   161e2:	6003      	str	r3, [r0, #0]
   161e4:	682b      	ldr	r3, [r5, #0]
   161e6:	2b00      	cmp	r3, #0
   161e8:	d065      	beq.n	162b6 <startTrngHW+0xf2>
   161ea:	4629      	mov	r1, r5
   161ec:	4620      	mov	r0, r4
   161ee:	f001 f903 	bl	173f8 <LLF_RND_GetFastestRosc>
   161f2:	4607      	mov	r7, r0
   161f4:	2800      	cmp	r0, #0
   161f6:	d15f      	bne.n	162b8 <startTrngHW+0xf4>
   161f8:	4621      	mov	r1, r4
   161fa:	6828      	ldr	r0, [r5, #0]
   161fc:	f001 f8de 	bl	173bc <LLF_RND_GetRoscSampleCnt>
   16200:	4607      	mov	r7, r0
   16202:	2800      	cmp	r0, #0
   16204:	d158      	bne.n	162b8 <startTrngHW+0xf4>
   16206:	682b      	ldr	r3, [r5, #0]
   16208:	2b08      	cmp	r3, #8
   1620a:	d067      	beq.n	162dc <startTrngHW+0x118>
   1620c:	2b04      	cmp	r3, #4
   1620e:	d068      	beq.n	162e2 <startTrngHW+0x11e>
   16210:	f1a3 0802 	sub.w	r8, r3, #2
   16214:	fab8 f888 	clz	r8, r8
   16218:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1621c:	2301      	movs	r3, #1
   1621e:	469c      	mov	ip, r3
   16220:	4a31      	ldr	r2, [pc, #196]	; (162e8 <startTrngHW+0x124>)
   16222:	4932      	ldr	r1, [pc, #200]	; (162ec <startTrngHW+0x128>)
   16224:	6013      	str	r3, [r2, #0]
   16226:	4610      	mov	r0, r2
   16228:	600b      	str	r3, [r1, #0]
   1622a:	3a94      	subs	r2, #148	; 0x94
   1622c:	f8c0 c000 	str.w	ip, [r0]
   16230:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16232:	6013      	str	r3, [r2, #0]
   16234:	6811      	ldr	r1, [r2, #0]
   16236:	428b      	cmp	r3, r1
   16238:	d1f8      	bne.n	1622c <startTrngHW+0x68>
   1623a:	f04f 0900 	mov.w	r9, #0
   1623e:	4b2c      	ldr	r3, [pc, #176]	; (162f0 <startTrngHW+0x12c>)
   16240:	f04f 30ff 	mov.w	r0, #4294967295
   16244:	f8c3 9000 	str.w	r9, [r3]
   16248:	f7ff fe92 	bl	15f70 <CC_HalClearInterruptBit>
   1624c:	f06f 021b 	mvn.w	r2, #27
   16250:	4b28      	ldr	r3, [pc, #160]	; (162f4 <startTrngHW+0x130>)
   16252:	4648      	mov	r0, r9
   16254:	601a      	str	r2, [r3, #0]
   16256:	f7ff fe99 	bl	15f8c <CC_HalMaskInterrupt>
   1625a:	4a27      	ldr	r2, [pc, #156]	; (162f8 <startTrngHW+0x134>)
   1625c:	4b27      	ldr	r3, [pc, #156]	; (162fc <startTrngHW+0x138>)
   1625e:	f8c2 8000 	str.w	r8, [r2]
   16262:	6818      	ldr	r0, [r3, #0]
   16264:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   16268:	f7ff fe90 	bl	15f8c <CC_HalMaskInterrupt>
   1626c:	220a      	movs	r2, #10
   1626e:	4b24      	ldr	r3, [pc, #144]	; (16300 <startTrngHW+0x13c>)
   16270:	601a      	str	r2, [r3, #0]
   16272:	9a08      	ldr	r2, [sp, #32]
   16274:	6923      	ldr	r3, [r4, #16]
   16276:	2a01      	cmp	r2, #1
   16278:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1627a:	d024      	beq.n	162c6 <startTrngHW+0x102>
   1627c:	4a21      	ldr	r2, [pc, #132]	; (16304 <startTrngHW+0x140>)
   1627e:	fba2 2303 	umull	r2, r3, r2, r3
   16282:	091b      	lsrs	r3, r3, #4
   16284:	2201      	movs	r2, #1
   16286:	fb03 f301 	mul.w	r3, r3, r1
   1628a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1628e:	491e      	ldr	r1, [pc, #120]	; (16308 <startTrngHW+0x144>)
   16290:	03db      	lsls	r3, r3, #15
   16292:	099b      	lsrs	r3, r3, #6
   16294:	600b      	str	r3, [r1, #0]
   16296:	4b16      	ldr	r3, [pc, #88]	; (162f0 <startTrngHW+0x12c>)
   16298:	4638      	mov	r0, r7
   1629a:	601a      	str	r2, [r3, #0]
   1629c:	6833      	ldr	r3, [r6, #0]
   1629e:	682a      	ldr	r2, [r5, #0]
   162a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   162a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   162a8:	6033      	str	r3, [r6, #0]
   162aa:	682a      	ldr	r2, [r5, #0]
   162ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   162b0:	6033      	str	r3, [r6, #0]
   162b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   162b6:	4f15      	ldr	r7, [pc, #84]	; (1630c <startTrngHW+0x148>)
   162b8:	4638      	mov	r0, r7
   162ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   162be:	4f14      	ldr	r7, [pc, #80]	; (16310 <startTrngHW+0x14c>)
   162c0:	4638      	mov	r0, r7
   162c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   162c6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   162ca:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   162ce:	3201      	adds	r2, #1
   162d0:	d002      	beq.n	162d8 <startTrngHW+0x114>
   162d2:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   162d6:	e7d1      	b.n	1627c <startTrngHW+0xb8>
   162d8:	2316      	movs	r3, #22
   162da:	e7d3      	b.n	16284 <startTrngHW+0xc0>
   162dc:	f04f 0803 	mov.w	r8, #3
   162e0:	e79c      	b.n	1621c <startTrngHW+0x58>
   162e2:	f04f 0802 	mov.w	r8, #2
   162e6:	e799      	b.n	1621c <startTrngHW+0x58>
   162e8:	508411c4 	.word	0x508411c4
   162ec:	50841140 	.word	0x50841140
   162f0:	5084112c 	.word	0x5084112c
   162f4:	50841100 	.word	0x50841100
   162f8:	5084110c 	.word	0x5084110c
   162fc:	50841a04 	.word	0x50841a04
   16300:	50841138 	.word	0x50841138
   16304:	aaaaaaab 	.word	0xaaaaaaab
   16308:	508411d8 	.word	0x508411d8
   1630c:	00f10c31 	.word	0x00f10c31
   16310:	00f10c35 	.word	0x00f10c35

00016314 <LLF_RND_RepetitionCounterTest.part.0>:
   16314:	b4f0      	push	{r4, r5, r6, r7}
   16316:	2400      	movs	r4, #0
   16318:	00c9      	lsls	r1, r1, #3
   1631a:	4626      	mov	r6, r4
   1631c:	4627      	mov	r7, r4
   1631e:	f101 3cff 	add.w	ip, r1, #4294967295
   16322:	e006      	b.n	16332 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
   16324:	429f      	cmp	r7, r3
   16326:	d015      	beq.n	16354 <LLF_RND_RepetitionCounterTest.part.0+0x40>
   16328:	2601      	movs	r6, #1
   1632a:	4565      	cmp	r5, ip
   1632c:	d818      	bhi.n	16360 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   1632e:	462c      	mov	r4, r5
   16330:	461f      	mov	r7, r3
   16332:	0963      	lsrs	r3, r4, #5
   16334:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   16338:	f004 011f 	and.w	r1, r4, #31
   1633c:	40cb      	lsrs	r3, r1
   1633e:	291f      	cmp	r1, #31
   16340:	f104 0501 	add.w	r5, r4, #1
   16344:	bf18      	it	ne
   16346:	f003 0301 	andne.w	r3, r3, #1
   1634a:	2c00      	cmp	r4, #0
   1634c:	d1ea      	bne.n	16324 <LLF_RND_RepetitionCounterTest.part.0+0x10>
   1634e:	2601      	movs	r6, #1
   16350:	4635      	mov	r5, r6
   16352:	e7ec      	b.n	1632e <LLF_RND_RepetitionCounterTest.part.0+0x1a>
   16354:	3601      	adds	r6, #1
   16356:	4296      	cmp	r6, r2
   16358:	d1e7      	bne.n	1632a <LLF_RND_RepetitionCounterTest.part.0+0x16>
   1635a:	4803      	ldr	r0, [pc, #12]	; (16368 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
   1635c:	bcf0      	pop	{r4, r5, r6, r7}
   1635e:	4770      	bx	lr
   16360:	2000      	movs	r0, #0
   16362:	bcf0      	pop	{r4, r5, r6, r7}
   16364:	4770      	bx	lr
   16366:	bf00      	nop
   16368:	00f10c36 	.word	0x00f10c36

0001636c <LLF_RND_AdaptiveProportionTest>:
   1636c:	2800      	cmp	r0, #0
   1636e:	d05f      	beq.n	16430 <LLF_RND_AdaptiveProportionTest+0xc4>
   16370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16374:	1e4c      	subs	r4, r1, #1
   16376:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1637a:	d226      	bcs.n	163ca <LLF_RND_AdaptiveProportionTest+0x5e>
   1637c:	b32b      	cbz	r3, 163ca <LLF_RND_AdaptiveProportionTest+0x5e>
   1637e:	b322      	cbz	r2, 163ca <LLF_RND_AdaptiveProportionTest+0x5e>
   16380:	00cc      	lsls	r4, r1, #3
   16382:	2b01      	cmp	r3, #1
   16384:	f104 3eff 	add.w	lr, r4, #4294967295
   16388:	d02f      	beq.n	163ea <LLF_RND_AdaptiveProportionTest+0x7e>
   1638a:	2100      	movs	r1, #0
   1638c:	468c      	mov	ip, r1
   1638e:	460f      	mov	r7, r1
   16390:	460d      	mov	r5, r1
   16392:	f103 38ff 	add.w	r8, r3, #4294967295
   16396:	094c      	lsrs	r4, r1, #5
   16398:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1639c:	f001 061f 	and.w	r6, r1, #31
   163a0:	40f4      	lsrs	r4, r6
   163a2:	2e1f      	cmp	r6, #31
   163a4:	bf18      	it	ne
   163a6:	f004 0401 	andne.w	r4, r4, #1
   163aa:	b921      	cbnz	r1, 163b6 <LLF_RND_AdaptiveProportionTest+0x4a>
   163ac:	2501      	movs	r5, #1
   163ae:	46ac      	mov	ip, r5
   163b0:	4629      	mov	r1, r5
   163b2:	4627      	mov	r7, r4
   163b4:	e7ef      	b.n	16396 <LLF_RND_AdaptiveProportionTest+0x2a>
   163b6:	42ab      	cmp	r3, r5
   163b8:	d013      	beq.n	163e2 <LLF_RND_AdaptiveProportionTest+0x76>
   163ba:	42a7      	cmp	r7, r4
   163bc:	d101      	bne.n	163c2 <LLF_RND_AdaptiveProportionTest+0x56>
   163be:	f10c 0c01 	add.w	ip, ip, #1
   163c2:	4545      	cmp	r5, r8
   163c4:	d104      	bne.n	163d0 <LLF_RND_AdaptiveProportionTest+0x64>
   163c6:	4562      	cmp	r2, ip
   163c8:	d202      	bcs.n	163d0 <LLF_RND_AdaptiveProportionTest+0x64>
   163ca:	481a      	ldr	r0, [pc, #104]	; (16434 <LLF_RND_AdaptiveProportionTest+0xc8>)
   163cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   163d0:	463c      	mov	r4, r7
   163d2:	3101      	adds	r1, #1
   163d4:	458e      	cmp	lr, r1
   163d6:	f105 0501 	add.w	r5, r5, #1
   163da:	d2ea      	bcs.n	163b2 <LLF_RND_AdaptiveProportionTest+0x46>
   163dc:	2000      	movs	r0, #0
   163de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   163e2:	2500      	movs	r5, #0
   163e4:	f04f 0c01 	mov.w	ip, #1
   163e8:	e7f3      	b.n	163d2 <LLF_RND_AdaptiveProportionTest+0x66>
   163ea:	2600      	movs	r6, #0
   163ec:	46b4      	mov	ip, r6
   163ee:	4637      	mov	r7, r6
   163f0:	4631      	mov	r1, r6
   163f2:	094b      	lsrs	r3, r1, #5
   163f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   163f8:	f001 051f 	and.w	r5, r1, #31
   163fc:	40eb      	lsrs	r3, r5
   163fe:	2d1f      	cmp	r5, #31
   16400:	bf18      	it	ne
   16402:	f003 0301 	andne.w	r3, r3, #1
   16406:	b139      	cbz	r1, 16418 <LLF_RND_AdaptiveProportionTest+0xac>
   16408:	b95f      	cbnz	r7, 16422 <LLF_RND_AdaptiveProportionTest+0xb6>
   1640a:	459c      	cmp	ip, r3
   1640c:	d001      	beq.n	16412 <LLF_RND_AdaptiveProportionTest+0xa6>
   1640e:	4663      	mov	r3, ip
   16410:	e008      	b.n	16424 <LLF_RND_AdaptiveProportionTest+0xb8>
   16412:	4663      	mov	r3, ip
   16414:	3601      	adds	r6, #1
   16416:	e005      	b.n	16424 <LLF_RND_AdaptiveProportionTest+0xb8>
   16418:	2601      	movs	r6, #1
   1641a:	4631      	mov	r1, r6
   1641c:	469c      	mov	ip, r3
   1641e:	2701      	movs	r7, #1
   16420:	e7e7      	b.n	163f2 <LLF_RND_AdaptiveProportionTest+0x86>
   16422:	463e      	mov	r6, r7
   16424:	42b2      	cmp	r2, r6
   16426:	d3d0      	bcc.n	163ca <LLF_RND_AdaptiveProportionTest+0x5e>
   16428:	3101      	adds	r1, #1
   1642a:	42a1      	cmp	r1, r4
   1642c:	d1f6      	bne.n	1641c <LLF_RND_AdaptiveProportionTest+0xb0>
   1642e:	e7d5      	b.n	163dc <LLF_RND_AdaptiveProportionTest+0x70>
   16430:	4800      	ldr	r0, [pc, #0]	; (16434 <LLF_RND_AdaptiveProportionTest+0xc8>)
   16432:	4770      	bx	lr
   16434:	00f10c37 	.word	0x00f10c37

00016438 <getTrngSource>:
   16438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1643c:	b08d      	sub	sp, #52	; 0x34
   1643e:	9e18      	ldr	r6, [sp, #96]	; 0x60
   16440:	4607      	mov	r7, r0
   16442:	460c      	mov	r4, r1
   16444:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   16446:	2e00      	cmp	r6, #0
   16448:	d14c      	bne.n	164e4 <getTrngSource+0xac>
   1644a:	f8d1 b010 	ldr.w	fp, [r1, #16]
   1644e:	2100      	movs	r1, #0
   16450:	601d      	str	r5, [r3, #0]
   16452:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16454:	6019      	str	r1, [r3, #0]
   16456:	2a00      	cmp	r2, #0
   16458:	f000 8122 	beq.w	166a0 <getTrngSource+0x268>
   1645c:	4a9c      	ldr	r2, [pc, #624]	; (166d0 <getTrngSource+0x298>)
   1645e:	4b9d      	ldr	r3, [pc, #628]	; (166d4 <getTrngSource+0x29c>)
   16460:	6811      	ldr	r1, [r2, #0]
   16462:	6a62      	ldr	r2, [r4, #36]	; 0x24
   16464:	681b      	ldr	r3, [r3, #0]
   16466:	429a      	cmp	r2, r3
   16468:	d147      	bne.n	164fa <getTrngSource+0xc2>
   1646a:	290a      	cmp	r1, #10
   1646c:	d145      	bne.n	164fa <getTrngSource+0xc2>
   1646e:	78fb      	ldrb	r3, [r7, #3]
   16470:	9304      	str	r3, [sp, #16]
   16472:	2304      	movs	r3, #4
   16474:	46b8      	mov	r8, r7
   16476:	9302      	str	r3, [sp, #8]
   16478:	4b97      	ldr	r3, [pc, #604]	; (166d8 <getTrngSource+0x2a0>)
   1647a:	fba3 230b 	umull	r2, r3, r3, fp
   1647e:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   16482:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   16486:	f105 0208 	add.w	r2, r5, #8
   1648a:	9203      	str	r2, [sp, #12]
   1648c:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
   16490:	9b16      	ldr	r3, [sp, #88]	; 0x58
   16492:	f8c3 b000 	str.w	fp, [r3]
   16496:	f1bb 0f00 	cmp.w	fp, #0
   1649a:	f000 80c7 	beq.w	1662c <getTrngSource+0x1f4>
   1649e:	465d      	mov	r5, fp
   164a0:	f04f 0900 	mov.w	r9, #0
   164a4:	9e03      	ldr	r6, [sp, #12]
   164a6:	f000 ffb7 	bl	17418 <LLF_RND_TurnOffTrng>
   164aa:	2300      	movs	r3, #0
   164ac:	9305      	str	r3, [sp, #20]
   164ae:	f1b8 0f00 	cmp.w	r8, #0
   164b2:	f000 80e9 	beq.w	16688 <getTrngSource+0x250>
   164b6:	2c00      	cmp	r4, #0
   164b8:	f000 80e6 	beq.w	16688 <getTrngSource+0x250>
   164bc:	9b04      	ldr	r3, [sp, #16]
   164be:	2b00      	cmp	r3, #0
   164c0:	f000 80e0 	beq.w	16684 <getTrngSource+0x24c>
   164c4:	4620      	mov	r0, r4
   164c6:	a904      	add	r1, sp, #16
   164c8:	f000 ff96 	bl	173f8 <LLF_RND_GetFastestRosc>
   164cc:	b1b8      	cbz	r0, 164fe <getTrngSource+0xc6>
   164ce:	4b83      	ldr	r3, [pc, #524]	; (166dc <getTrngSource+0x2a4>)
   164d0:	4298      	cmp	r0, r3
   164d2:	f040 80ab 	bne.w	1662c <getTrngSource+0x1f4>
   164d6:	9002      	str	r0, [sp, #8]
   164d8:	f000 ff9e 	bl	17418 <LLF_RND_TurnOffTrng>
   164dc:	9802      	ldr	r0, [sp, #8]
   164de:	b00d      	add	sp, #52	; 0x34
   164e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164e4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   164e8:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   164ec:	3001      	adds	r0, #1
   164ee:	bf0c      	ite	eq
   164f0:	f44f 7b04 	moveq.w	fp, #528	; 0x210
   164f4:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
   164f8:	e7a9      	b.n	1644e <getTrngSource+0x16>
   164fa:	4879      	ldr	r0, [pc, #484]	; (166e0 <getTrngSource+0x2a8>)
   164fc:	e7eb      	b.n	164d6 <getTrngSource+0x9e>
   164fe:	4621      	mov	r1, r4
   16500:	9804      	ldr	r0, [sp, #16]
   16502:	f000 ff5b 	bl	173bc <LLF_RND_GetRoscSampleCnt>
   16506:	2800      	cmp	r0, #0
   16508:	d1e1      	bne.n	164ce <getTrngSource+0x96>
   1650a:	9f04      	ldr	r7, [sp, #16]
   1650c:	2f08      	cmp	r7, #8
   1650e:	f000 80bd 	beq.w	1668c <getTrngSource+0x254>
   16512:	2f04      	cmp	r7, #4
   16514:	f000 80bc 	beq.w	16690 <getTrngSource+0x258>
   16518:	f1a7 0702 	sub.w	r7, r7, #2
   1651c:	fab7 f787 	clz	r7, r7
   16520:	097f      	lsrs	r7, r7, #5
   16522:	2301      	movs	r3, #1
   16524:	4619      	mov	r1, r3
   16526:	486f      	ldr	r0, [pc, #444]	; (166e4 <getTrngSource+0x2ac>)
   16528:	6003      	str	r3, [r0, #0]
   1652a:	f840 3c84 	str.w	r3, [r0, #-132]
   1652e:	4b6d      	ldr	r3, [pc, #436]	; (166e4 <getTrngSource+0x2ac>)
   16530:	4868      	ldr	r0, [pc, #416]	; (166d4 <getTrngSource+0x29c>)
   16532:	6019      	str	r1, [r3, #0]
   16534:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16536:	6003      	str	r3, [r0, #0]
   16538:	6800      	ldr	r0, [r0, #0]
   1653a:	4283      	cmp	r3, r0
   1653c:	d1f7      	bne.n	1652e <getTrngSource+0xf6>
   1653e:	2300      	movs	r3, #0
   16540:	4a69      	ldr	r2, [pc, #420]	; (166e8 <getTrngSource+0x2b0>)
   16542:	f04f 30ff 	mov.w	r0, #4294967295
   16546:	6013      	str	r3, [r2, #0]
   16548:	f7ff fd12 	bl	15f70 <CC_HalClearInterruptBit>
   1654c:	2300      	movs	r3, #0
   1654e:	f06f 011b 	mvn.w	r1, #27
   16552:	4618      	mov	r0, r3
   16554:	4b65      	ldr	r3, [pc, #404]	; (166ec <getTrngSource+0x2b4>)
   16556:	6019      	str	r1, [r3, #0]
   16558:	f7ff fd18 	bl	15f8c <CC_HalMaskInterrupt>
   1655c:	4964      	ldr	r1, [pc, #400]	; (166f0 <getTrngSource+0x2b8>)
   1655e:	4b65      	ldr	r3, [pc, #404]	; (166f4 <getTrngSource+0x2bc>)
   16560:	600f      	str	r7, [r1, #0]
   16562:	6818      	ldr	r0, [r3, #0]
   16564:	4f5c      	ldr	r7, [pc, #368]	; (166d8 <getTrngSource+0x2a0>)
   16566:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1656a:	f7ff fd0f 	bl	15f8c <CC_HalMaskInterrupt>
   1656e:	210a      	movs	r1, #10
   16570:	2201      	movs	r2, #1
   16572:	4b57      	ldr	r3, [pc, #348]	; (166d0 <getTrngSource+0x298>)
   16574:	4860      	ldr	r0, [pc, #384]	; (166f8 <getTrngSource+0x2c0>)
   16576:	6019      	str	r1, [r3, #0]
   16578:	6921      	ldr	r1, [r4, #16]
   1657a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1657c:	fba7 c101 	umull	ip, r1, r7, r1
   16580:	0909      	lsrs	r1, r1, #4
   16582:	fb03 f301 	mul.w	r3, r3, r1
   16586:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1658a:	03db      	lsls	r3, r3, #15
   1658c:	099b      	lsrs	r3, r3, #6
   1658e:	6003      	str	r3, [r0, #0]
   16590:	4b55      	ldr	r3, [pc, #340]	; (166e8 <getTrngSource+0x2b0>)
   16592:	a805      	add	r0, sp, #20
   16594:	601a      	str	r2, [r3, #0]
   16596:	9904      	ldr	r1, [sp, #16]
   16598:	f8d8 2000 	ldr.w	r2, [r8]
   1659c:	020b      	lsls	r3, r1, #8
   1659e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   165a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   165a6:	4313      	orrs	r3, r2
   165a8:	f8c8 3000 	str.w	r3, [r8]
   165ac:	f000 fef6 	bl	1739c <LLF_RND_WaitRngInterrupt>
   165b0:	9b05      	ldr	r3, [sp, #20]
   165b2:	f003 031a 	and.w	r3, r3, #26
   165b6:	4303      	orrs	r3, r0
   165b8:	d138      	bne.n	1662c <getTrngSource+0x1f4>
   165ba:	4b50      	ldr	r3, [pc, #320]	; (166fc <getTrngSource+0x2c4>)
   165bc:	fba7 2705 	umull	r2, r7, r7, r5
   165c0:	681a      	ldr	r2, [r3, #0]
   165c2:	3314      	adds	r3, #20
   165c4:	9206      	str	r2, [sp, #24]
   165c6:	f853 2c10 	ldr.w	r2, [r3, #-16]
   165ca:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   165ce:	9207      	str	r2, [sp, #28]
   165d0:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   165d4:	9208      	str	r2, [sp, #32]
   165d6:	f853 2c08 	ldr.w	r2, [r3, #-8]
   165da:	9209      	str	r2, [sp, #36]	; 0x24
   165dc:	f853 2c04 	ldr.w	r2, [r3, #-4]
   165e0:	920a      	str	r2, [sp, #40]	; 0x28
   165e2:	681b      	ldr	r3, [r3, #0]
   165e4:	930b      	str	r3, [sp, #44]	; 0x2c
   165e6:	d102      	bne.n	165ee <getTrngSource+0x1b6>
   165e8:	f1ba 0f00 	cmp.w	sl, #0
   165ec:	d141      	bne.n	16672 <getTrngSource+0x23a>
   165ee:	2218      	movs	r2, #24
   165f0:	4630      	mov	r0, r6
   165f2:	eb0d 0102 	add.w	r1, sp, r2
   165f6:	f000 fe41 	bl	1727c <CC_PalMemCopyPlat>
   165fa:	3d18      	subs	r5, #24
   165fc:	3618      	adds	r6, #24
   165fe:	f109 0901 	add.w	r9, r9, #1
   16602:	2d00      	cmp	r5, #0
   16604:	f47f af4f 	bne.w	164a6 <getTrngSource+0x6e>
   16608:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
   1660c:	d85d      	bhi.n	166ca <getTrngSource+0x292>
   1660e:	9d03      	ldr	r5, [sp, #12]
   16610:	4659      	mov	r1, fp
   16612:	4628      	mov	r0, r5
   16614:	6962      	ldr	r2, [r4, #20]
   16616:	f7ff fe7d 	bl	16314 <LLF_RND_RepetitionCounterTest.part.0>
   1661a:	2800      	cmp	r0, #0
   1661c:	d04b      	beq.n	166b6 <getTrngSource+0x27e>
   1661e:	2300      	movs	r3, #0
   16620:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16622:	6013      	str	r3, [r2, #0]
   16624:	4b2d      	ldr	r3, [pc, #180]	; (166dc <getTrngSource+0x2a4>)
   16626:	4298      	cmp	r0, r3
   16628:	f43f af55 	beq.w	164d6 <getTrngSource+0x9e>
   1662c:	9d04      	ldr	r5, [sp, #16]
   1662e:	2d08      	cmp	r5, #8
   16630:	d034      	beq.n	1669c <getTrngSource+0x264>
   16632:	2200      	movs	r2, #0
   16634:	ab04      	add	r3, sp, #16
   16636:	4621      	mov	r1, r4
   16638:	4640      	mov	r0, r8
   1663a:	006d      	lsls	r5, r5, #1
   1663c:	9200      	str	r2, [sp, #0]
   1663e:	9504      	str	r5, [sp, #16]
   16640:	f7ff fdc0 	bl	161c4 <startTrngHW>
   16644:	4b2e      	ldr	r3, [pc, #184]	; (16700 <getTrngSource+0x2c8>)
   16646:	4298      	cmp	r0, r3
   16648:	d024      	beq.n	16694 <getTrngSource+0x25c>
   1664a:	2800      	cmp	r0, #0
   1664c:	f47f af43 	bne.w	164d6 <getTrngSource+0x9e>
   16650:	f8d8 2000 	ldr.w	r2, [r8]
   16654:	0a13      	lsrs	r3, r2, #8
   16656:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1665a:	4313      	orrs	r3, r2
   1665c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   16660:	f8c8 3000 	str.w	r3, [r8]
   16664:	9b02      	ldr	r3, [sp, #8]
   16666:	3b01      	subs	r3, #1
   16668:	9302      	str	r3, [sp, #8]
   1666a:	f47f af11 	bne.w	16490 <getTrngSource+0x58>
   1666e:	2000      	movs	r0, #0
   16670:	e731      	b.n	164d6 <getTrngSource+0x9e>
   16672:	4630      	mov	r0, r6
   16674:	4652      	mov	r2, sl
   16676:	a906      	add	r1, sp, #24
   16678:	f000 fe00 	bl	1727c <CC_PalMemCopyPlat>
   1667c:	eba5 050a 	sub.w	r5, r5, sl
   16680:	4456      	add	r6, sl
   16682:	e7bc      	b.n	165fe <getTrngSource+0x1c6>
   16684:	481e      	ldr	r0, [pc, #120]	; (16700 <getTrngSource+0x2c8>)
   16686:	e722      	b.n	164ce <getTrngSource+0x96>
   16688:	481e      	ldr	r0, [pc, #120]	; (16704 <getTrngSource+0x2cc>)
   1668a:	e720      	b.n	164ce <getTrngSource+0x96>
   1668c:	2703      	movs	r7, #3
   1668e:	e748      	b.n	16522 <getTrngSource+0xea>
   16690:	2702      	movs	r7, #2
   16692:	e746      	b.n	16522 <getTrngSource+0xea>
   16694:	6a23      	ldr	r3, [r4, #32]
   16696:	2b00      	cmp	r3, #0
   16698:	f43f af1d 	beq.w	164d6 <getTrngSource+0x9e>
   1669c:	481a      	ldr	r0, [pc, #104]	; (16708 <getTrngSource+0x2d0>)
   1669e:	e71a      	b.n	164d6 <getTrngSource+0x9e>
   166a0:	2201      	movs	r2, #1
   166a2:	4621      	mov	r1, r4
   166a4:	4638      	mov	r0, r7
   166a6:	9600      	str	r6, [sp, #0]
   166a8:	ab04      	add	r3, sp, #16
   166aa:	f7ff fd8b 	bl	161c4 <startTrngHW>
   166ae:	2800      	cmp	r0, #0
   166b0:	f43f aedf 	beq.w	16472 <getTrngSource+0x3a>
   166b4:	e70f      	b.n	164d6 <getTrngSource+0x9e>
   166b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   166ba:	4659      	mov	r1, fp
   166bc:	4628      	mov	r0, r5
   166be:	69a2      	ldr	r2, [r4, #24]
   166c0:	f7ff fe54 	bl	1636c <LLF_RND_AdaptiveProportionTest>
   166c4:	2800      	cmp	r0, #0
   166c6:	d1aa      	bne.n	1661e <getTrngSource+0x1e6>
   166c8:	e7d1      	b.n	1666e <getTrngSource+0x236>
   166ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
   166cc:	601d      	str	r5, [r3, #0]
   166ce:	e7ad      	b.n	1662c <getTrngSource+0x1f4>
   166d0:	50841138 	.word	0x50841138
   166d4:	50841130 	.word	0x50841130
   166d8:	aaaaaaab 	.word	0xaaaaaaab
   166dc:	00f10c02 	.word	0x00f10c02
   166e0:	00f10c30 	.word	0x00f10c30
   166e4:	508411c4 	.word	0x508411c4
   166e8:	5084112c 	.word	0x5084112c
   166ec:	50841100 	.word	0x50841100
   166f0:	5084110c 	.word	0x5084110c
   166f4:	50841a04 	.word	0x50841a04
   166f8:	508411d8 	.word	0x508411d8
   166fc:	50841114 	.word	0x50841114
   16700:	00f10c31 	.word	0x00f10c31
   16704:	00f10c35 	.word	0x00f10c35
   16708:	00f10c32 	.word	0x00f10c32

0001670c <LLF_RND_GetTrngSource>:
   1670c:	2300      	movs	r3, #0
   1670e:	b430      	push	{r4, r5}
   16710:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
   16714:	9304      	str	r3, [sp, #16]
   16716:	9b02      	ldr	r3, [sp, #8]
   16718:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1671c:	bc30      	pop	{r4, r5}
   1671e:	f7ff be8b 	b.w	16438 <getTrngSource>
   16722:	bf00      	nop

00016724 <LLF_RND_RunTrngStartupTest>:
   16724:	b510      	push	{r4, lr}
   16726:	2401      	movs	r4, #1
   16728:	b086      	sub	sp, #24
   1672a:	ab05      	add	r3, sp, #20
   1672c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   16730:	9300      	str	r3, [sp, #0]
   16732:	2200      	movs	r2, #0
   16734:	ab04      	add	r3, sp, #16
   16736:	f7ff fe7f 	bl	16438 <getTrngSource>
   1673a:	b006      	add	sp, #24
   1673c:	bd10      	pop	{r4, pc}
   1673e:	bf00      	nop

00016740 <mbedtls_platform_zeroize>:
   16740:	b138      	cbz	r0, 16752 <mbedtls_platform_zeroize+0x12>
   16742:	b131      	cbz	r1, 16752 <mbedtls_platform_zeroize+0x12>
   16744:	2200      	movs	r2, #0
   16746:	4401      	add	r1, r0
   16748:	4603      	mov	r3, r0
   1674a:	3001      	adds	r0, #1
   1674c:	4281      	cmp	r1, r0
   1674e:	701a      	strb	r2, [r3, #0]
   16750:	d1fa      	bne.n	16748 <mbedtls_platform_zeroize+0x8>
   16752:	4770      	bx	lr

00016754 <mbedtls_hardware_poll>:
   16754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16758:	b088      	sub	sp, #32
   1675a:	9205      	str	r2, [sp, #20]
   1675c:	2900      	cmp	r1, #0
   1675e:	d068      	beq.n	16832 <mbedtls_hardware_poll+0xde>
   16760:	461c      	mov	r4, r3
   16762:	2b00      	cmp	r3, #0
   16764:	d065      	beq.n	16832 <mbedtls_hardware_poll+0xde>
   16766:	4615      	mov	r5, r2
   16768:	2a00      	cmp	r2, #0
   1676a:	d062      	beq.n	16832 <mbedtls_hardware_poll+0xde>
   1676c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 16854 <mbedtls_hardware_poll+0x100>
   16770:	460e      	mov	r6, r1
   16772:	f8d8 0000 	ldr.w	r0, [r8]
   16776:	f04f 31ff 	mov.w	r1, #4294967295
   1677a:	f7ff fc9f 	bl	160bc <CC_PalMutexLock>
   1677e:	2800      	cmp	r0, #0
   16780:	d14c      	bne.n	1681c <mbedtls_hardware_poll+0xc8>
   16782:	2000      	movs	r0, #0
   16784:	f7ff fcca 	bl	1611c <CC_PalPowerSaveModeSelect>
   16788:	2800      	cmp	r0, #0
   1678a:	d143      	bne.n	16814 <mbedtls_hardware_poll+0xc0>
   1678c:	482a      	ldr	r0, [pc, #168]	; (16838 <mbedtls_hardware_poll+0xe4>)
   1678e:	f000 fd37 	bl	17200 <RNG_PLAT_SetUserRngParameters>
   16792:	b1e8      	cbz	r0, 167d0 <mbedtls_hardware_poll+0x7c>
   16794:	2001      	movs	r0, #1
   16796:	f04f 37ff 	mov.w	r7, #4294967295
   1679a:	f7ff fcbf 	bl	1611c <CC_PalPowerSaveModeSelect>
   1679e:	2800      	cmp	r0, #0
   167a0:	d134      	bne.n	1680c <mbedtls_hardware_poll+0xb8>
   167a2:	f44f 7108 	mov.w	r1, #544	; 0x220
   167a6:	4825      	ldr	r0, [pc, #148]	; (1683c <mbedtls_hardware_poll+0xe8>)
   167a8:	f7ff ffca 	bl	16740 <mbedtls_platform_zeroize>
   167ac:	2104      	movs	r1, #4
   167ae:	4824      	ldr	r0, [pc, #144]	; (16840 <mbedtls_hardware_poll+0xec>)
   167b0:	f7ff ffc6 	bl	16740 <mbedtls_platform_zeroize>
   167b4:	4820      	ldr	r0, [pc, #128]	; (16838 <mbedtls_hardware_poll+0xe4>)
   167b6:	2128      	movs	r1, #40	; 0x28
   167b8:	f7ff ffc2 	bl	16740 <mbedtls_platform_zeroize>
   167bc:	f8d8 0000 	ldr.w	r0, [r8]
   167c0:	f7ff fc84 	bl	160cc <CC_PalMutexUnlock>
   167c4:	2800      	cmp	r0, #0
   167c6:	d12d      	bne.n	16824 <mbedtls_hardware_poll+0xd0>
   167c8:	4638      	mov	r0, r7
   167ca:	b008      	add	sp, #32
   167cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   167d0:	491a      	ldr	r1, [pc, #104]	; (1683c <mbedtls_hardware_poll+0xe8>)
   167d2:	ab07      	add	r3, sp, #28
   167d4:	4602      	mov	r2, r0
   167d6:	9003      	str	r0, [sp, #12]
   167d8:	9102      	str	r1, [sp, #8]
   167da:	9300      	str	r3, [sp, #0]
   167dc:	4916      	ldr	r1, [pc, #88]	; (16838 <mbedtls_hardware_poll+0xe4>)
   167de:	4818      	ldr	r0, [pc, #96]	; (16840 <mbedtls_hardware_poll+0xec>)
   167e0:	9401      	str	r4, [sp, #4]
   167e2:	ab05      	add	r3, sp, #20
   167e4:	f7ff ff92 	bl	1670c <LLF_RND_GetTrngSource>
   167e8:	2800      	cmp	r0, #0
   167ea:	d1d3      	bne.n	16794 <mbedtls_hardware_poll+0x40>
   167ec:	6823      	ldr	r3, [r4, #0]
   167ee:	42ab      	cmp	r3, r5
   167f0:	d3d0      	bcc.n	16794 <mbedtls_hardware_poll+0x40>
   167f2:	9907      	ldr	r1, [sp, #28]
   167f4:	4607      	mov	r7, r0
   167f6:	462a      	mov	r2, r5
   167f8:	4630      	mov	r0, r6
   167fa:	3108      	adds	r1, #8
   167fc:	f000 fd3e 	bl	1727c <CC_PalMemCopyPlat>
   16800:	2001      	movs	r0, #1
   16802:	6025      	str	r5, [r4, #0]
   16804:	f7ff fc8a 	bl	1611c <CC_PalPowerSaveModeSelect>
   16808:	2800      	cmp	r0, #0
   1680a:	d0ca      	beq.n	167a2 <mbedtls_hardware_poll+0x4e>
   1680c:	480d      	ldr	r0, [pc, #52]	; (16844 <mbedtls_hardware_poll+0xf0>)
   1680e:	f7ff f8c3 	bl	15998 <CC_PalAbort>
   16812:	e7c6      	b.n	167a2 <mbedtls_hardware_poll+0x4e>
   16814:	480c      	ldr	r0, [pc, #48]	; (16848 <mbedtls_hardware_poll+0xf4>)
   16816:	f7ff f8bf 	bl	15998 <CC_PalAbort>
   1681a:	e7b7      	b.n	1678c <mbedtls_hardware_poll+0x38>
   1681c:	480b      	ldr	r0, [pc, #44]	; (1684c <mbedtls_hardware_poll+0xf8>)
   1681e:	f7ff f8bb 	bl	15998 <CC_PalAbort>
   16822:	e7ae      	b.n	16782 <mbedtls_hardware_poll+0x2e>
   16824:	480a      	ldr	r0, [pc, #40]	; (16850 <mbedtls_hardware_poll+0xfc>)
   16826:	f7ff f8b7 	bl	15998 <CC_PalAbort>
   1682a:	4638      	mov	r0, r7
   1682c:	b008      	add	sp, #32
   1682e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16832:	f04f 37ff 	mov.w	r7, #4294967295
   16836:	e7c7      	b.n	167c8 <mbedtls_hardware_poll+0x74>
   16838:	20000eec 	.word	0x20000eec
   1683c:	20000ccc 	.word	0x20000ccc
   16840:	20000cc8 	.word	0x20000cc8
   16844:	0001908c 	.word	0x0001908c
   16848:	0001906c 	.word	0x0001906c
   1684c:	00019054 	.word	0x00019054
   16850:	000190e4 	.word	0x000190e4
   16854:	200000c0 	.word	0x200000c0

00016858 <cc_mbedtls_sha256_init>:
   16858:	b510      	push	{r4, lr}
   1685a:	4604      	mov	r4, r0
   1685c:	b128      	cbz	r0, 1686a <cc_mbedtls_sha256_init+0x12>
   1685e:	4620      	mov	r0, r4
   16860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16864:	21f0      	movs	r1, #240	; 0xf0
   16866:	f000 bd0d 	b.w	17284 <CC_PalMemSetZeroPlat>
   1686a:	4804      	ldr	r0, [pc, #16]	; (1687c <cc_mbedtls_sha256_init+0x24>)
   1686c:	f7ff f894 	bl	15998 <CC_PalAbort>
   16870:	4620      	mov	r0, r4
   16872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16876:	21f0      	movs	r1, #240	; 0xf0
   16878:	f000 bd04 	b.w	17284 <CC_PalMemSetZeroPlat>
   1687c:	000190fc 	.word	0x000190fc

00016880 <cc_mbedtls_sha256_free>:
   16880:	b110      	cbz	r0, 16888 <cc_mbedtls_sha256_free+0x8>
   16882:	21f0      	movs	r1, #240	; 0xf0
   16884:	f7ff bf5c 	b.w	16740 <mbedtls_platform_zeroize>
   16888:	4770      	bx	lr
   1688a:	bf00      	nop

0001688c <cc_mbedtls_sha256_starts_ret>:
   1688c:	b508      	push	{r3, lr}
   1688e:	b161      	cbz	r1, 168aa <cc_mbedtls_sha256_starts_ret+0x1e>
   16890:	2901      	cmp	r1, #1
   16892:	d107      	bne.n	168a4 <cc_mbedtls_sha256_starts_ret+0x18>
   16894:	2102      	movs	r1, #2
   16896:	f000 f839 	bl	1690c <mbedtls_sha_starts_internal>
   1689a:	2800      	cmp	r0, #0
   1689c:	bf18      	it	ne
   1689e:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   168a2:	bd08      	pop	{r3, pc}
   168a4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   168a8:	bd08      	pop	{r3, pc}
   168aa:	2101      	movs	r1, #1
   168ac:	f000 f82e 	bl	1690c <mbedtls_sha_starts_internal>
   168b0:	e7f3      	b.n	1689a <cc_mbedtls_sha256_starts_ret+0xe>
   168b2:	bf00      	nop

000168b4 <cc_mbedtls_sha256_update_ret>:
   168b4:	b508      	push	{r3, lr}
   168b6:	f000 f86b 	bl	16990 <mbedtls_sha_update_internal>
   168ba:	2800      	cmp	r0, #0
   168bc:	bf18      	it	ne
   168be:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   168c2:	bd08      	pop	{r3, pc}

000168c4 <cc_mbedtls_sha256_finish_ret>:
   168c4:	b570      	push	{r4, r5, r6, lr}
   168c6:	b1e8      	cbz	r0, 16904 <cc_mbedtls_sha256_finish_ret+0x40>
   168c8:	460e      	mov	r6, r1
   168ca:	b1d9      	cbz	r1, 16904 <cc_mbedtls_sha256_finish_ret+0x40>
   168cc:	4604      	mov	r4, r0
   168ce:	f000 f831 	bl	16934 <mbedtls_sha_finish_internal>
   168d2:	4605      	mov	r5, r0
   168d4:	b9b0      	cbnz	r0, 16904 <cc_mbedtls_sha256_finish_ret+0x40>
   168d6:	6823      	ldr	r3, [r4, #0]
   168d8:	2b01      	cmp	r3, #1
   168da:	d00b      	beq.n	168f4 <cc_mbedtls_sha256_finish_ret+0x30>
   168dc:	2b02      	cmp	r3, #2
   168de:	d001      	beq.n	168e4 <cc_mbedtls_sha256_finish_ret+0x20>
   168e0:	4628      	mov	r0, r5
   168e2:	bd70      	pop	{r4, r5, r6, pc}
   168e4:	4630      	mov	r0, r6
   168e6:	221c      	movs	r2, #28
   168e8:	f104 0108 	add.w	r1, r4, #8
   168ec:	f000 fcc6 	bl	1727c <CC_PalMemCopyPlat>
   168f0:	4628      	mov	r0, r5
   168f2:	bd70      	pop	{r4, r5, r6, pc}
   168f4:	4630      	mov	r0, r6
   168f6:	2220      	movs	r2, #32
   168f8:	f104 0108 	add.w	r1, r4, #8
   168fc:	f000 fcbe 	bl	1727c <CC_PalMemCopyPlat>
   16900:	4628      	mov	r0, r5
   16902:	bd70      	pop	{r4, r5, r6, pc}
   16904:	f06f 0536 	mvn.w	r5, #54	; 0x36
   16908:	e7ea      	b.n	168e0 <cc_mbedtls_sha256_finish_ret+0x1c>
   1690a:	bf00      	nop

0001690c <mbedtls_sha_starts_internal>:
   1690c:	b178      	cbz	r0, 1692e <mbedtls_sha_starts_internal+0x22>
   1690e:	b538      	push	{r3, r4, r5, lr}
   16910:	460d      	mov	r5, r1
   16912:	21f0      	movs	r1, #240	; 0xf0
   16914:	4604      	mov	r4, r0
   16916:	f000 fcb5 	bl	17284 <CC_PalMemSetZeroPlat>
   1691a:	2340      	movs	r3, #64	; 0x40
   1691c:	4620      	mov	r0, r4
   1691e:	6025      	str	r5, [r4, #0]
   16920:	65e3      	str	r3, [r4, #92]	; 0x5c
   16922:	f000 fdbf 	bl	174a4 <InitHashDrv>
   16926:	3800      	subs	r0, #0
   16928:	bf18      	it	ne
   1692a:	2001      	movne	r0, #1
   1692c:	bd38      	pop	{r3, r4, r5, pc}
   1692e:	2001      	movs	r0, #1
   16930:	4770      	bx	lr
   16932:	bf00      	nop

00016934 <mbedtls_sha_finish_internal>:
   16934:	b570      	push	{r4, r5, r6, lr}
   16936:	6e05      	ldr	r5, [r0, #96]	; 0x60
   16938:	b0a4      	sub	sp, #144	; 0x90
   1693a:	4604      	mov	r4, r0
   1693c:	ae04      	add	r6, sp, #16
   1693e:	b9e5      	cbnz	r5, 1697a <mbedtls_sha_finish_internal+0x46>
   16940:	2201      	movs	r2, #1
   16942:	2300      	movs	r3, #0
   16944:	6062      	str	r2, [r4, #4]
   16946:	4630      	mov	r0, r6
   16948:	4629      	mov	r1, r5
   1694a:	e9cd 3300 	strd	r3, r3, [sp]
   1694e:	aa02      	add	r2, sp, #8
   16950:	f000 fd70 	bl	17434 <SetDataBuffersInfo>
   16954:	b110      	cbz	r0, 1695c <mbedtls_sha_finish_internal+0x28>
   16956:	2001      	movs	r0, #1
   16958:	b024      	add	sp, #144	; 0x90
   1695a:	bd70      	pop	{r4, r5, r6, pc}
   1695c:	462a      	mov	r2, r5
   1695e:	4620      	mov	r0, r4
   16960:	a902      	add	r1, sp, #8
   16962:	f000 fdc9 	bl	174f8 <ProcessHashDrv>
   16966:	2800      	cmp	r0, #0
   16968:	d1f5      	bne.n	16956 <mbedtls_sha_finish_internal+0x22>
   1696a:	4620      	mov	r0, r4
   1696c:	f000 feee 	bl	1774c <FinishHashDrv>
   16970:	2800      	cmp	r0, #0
   16972:	d1f0      	bne.n	16956 <mbedtls_sha_finish_internal+0x22>
   16974:	6620      	str	r0, [r4, #96]	; 0x60
   16976:	b024      	add	sp, #144	; 0x90
   16978:	bd70      	pop	{r4, r5, r6, pc}
   1697a:	2d80      	cmp	r5, #128	; 0x80
   1697c:	462a      	mov	r2, r5
   1697e:	4630      	mov	r0, r6
   16980:	bf28      	it	cs
   16982:	2280      	movcs	r2, #128	; 0x80
   16984:	f104 0164 	add.w	r1, r4, #100	; 0x64
   16988:	f000 fc78 	bl	1727c <CC_PalMemCopyPlat>
   1698c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1698e:	e7d7      	b.n	16940 <mbedtls_sha_finish_internal+0xc>

00016990 <mbedtls_sha_update_internal>:
   16990:	2800      	cmp	r0, #0
   16992:	d055      	beq.n	16a40 <mbedtls_sha_update_internal+0xb0>
   16994:	b5f0      	push	{r4, r5, r6, r7, lr}
   16996:	4615      	mov	r5, r2
   16998:	b0a5      	sub	sp, #148	; 0x94
   1699a:	b1b2      	cbz	r2, 169ca <mbedtls_sha_update_internal+0x3a>
   1699c:	460e      	mov	r6, r1
   1699e:	b351      	cbz	r1, 169f6 <mbedtls_sha_update_internal+0x66>
   169a0:	4604      	mov	r4, r0
   169a2:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   169a6:	1a1a      	subs	r2, r3, r0
   169a8:	fbb2 f7f3 	udiv	r7, r2, r3
   169ac:	fb03 2717 	mls	r7, r3, r7, r2
   169b0:	42af      	cmp	r7, r5
   169b2:	bf28      	it	cs
   169b4:	462f      	movcs	r7, r5
   169b6:	2f00      	cmp	r7, #0
   169b8:	d144      	bne.n	16a44 <mbedtls_sha_update_internal+0xb4>
   169ba:	4283      	cmp	r3, r0
   169bc:	d008      	beq.n	169d0 <mbedtls_sha_update_internal+0x40>
   169be:	fbb5 f7f3 	udiv	r7, r5, r3
   169c2:	fb03 f707 	mul.w	r7, r3, r7
   169c6:	b9cf      	cbnz	r7, 169fc <mbedtls_sha_update_internal+0x6c>
   169c8:	bb6d      	cbnz	r5, 16a26 <mbedtls_sha_update_internal+0x96>
   169ca:	4628      	mov	r0, r5
   169cc:	b025      	add	sp, #148	; 0x94
   169ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   169d0:	2b80      	cmp	r3, #128	; 0x80
   169d2:	bf28      	it	cs
   169d4:	2380      	movcs	r3, #128	; 0x80
   169d6:	f104 0164 	add.w	r1, r4, #100	; 0x64
   169da:	461a      	mov	r2, r3
   169dc:	a804      	add	r0, sp, #16
   169de:	f000 fc4d 	bl	1727c <CC_PalMemCopyPlat>
   169e2:	2300      	movs	r3, #0
   169e4:	e9cd 3300 	strd	r3, r3, [sp]
   169e8:	a804      	add	r0, sp, #16
   169ea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   169ec:	aa02      	add	r2, sp, #8
   169ee:	f000 fd21 	bl	17434 <SetDataBuffersInfo>
   169f2:	2800      	cmp	r0, #0
   169f4:	d033      	beq.n	16a5e <mbedtls_sha_update_internal+0xce>
   169f6:	2001      	movs	r0, #1
   169f8:	b025      	add	sp, #148	; 0x94
   169fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   169fc:	2300      	movs	r3, #0
   169fe:	4639      	mov	r1, r7
   16a00:	4630      	mov	r0, r6
   16a02:	e9cd 3300 	strd	r3, r3, [sp]
   16a06:	aa02      	add	r2, sp, #8
   16a08:	f000 fd14 	bl	17434 <SetDataBuffersInfo>
   16a0c:	2800      	cmp	r0, #0
   16a0e:	d1f2      	bne.n	169f6 <mbedtls_sha_update_internal+0x66>
   16a10:	463a      	mov	r2, r7
   16a12:	4620      	mov	r0, r4
   16a14:	a902      	add	r1, sp, #8
   16a16:	f000 fd6f 	bl	174f8 <ProcessHashDrv>
   16a1a:	2800      	cmp	r0, #0
   16a1c:	d1eb      	bne.n	169f6 <mbedtls_sha_update_internal+0x66>
   16a1e:	1bed      	subs	r5, r5, r7
   16a20:	443e      	add	r6, r7
   16a22:	2d00      	cmp	r5, #0
   16a24:	d0d1      	beq.n	169ca <mbedtls_sha_update_internal+0x3a>
   16a26:	6e20      	ldr	r0, [r4, #96]	; 0x60
   16a28:	462a      	mov	r2, r5
   16a2a:	3019      	adds	r0, #25
   16a2c:	4631      	mov	r1, r6
   16a2e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   16a32:	f000 fc23 	bl	1727c <CC_PalMemCopyPlat>
   16a36:	6e22      	ldr	r2, [r4, #96]	; 0x60
   16a38:	2000      	movs	r0, #0
   16a3a:	442a      	add	r2, r5
   16a3c:	6622      	str	r2, [r4, #96]	; 0x60
   16a3e:	e7c5      	b.n	169cc <mbedtls_sha_update_internal+0x3c>
   16a40:	2001      	movs	r0, #1
   16a42:	4770      	bx	lr
   16a44:	f104 0364 	add.w	r3, r4, #100	; 0x64
   16a48:	4418      	add	r0, r3
   16a4a:	463a      	mov	r2, r7
   16a4c:	f000 fc16 	bl	1727c <CC_PalMemCopyPlat>
   16a50:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
   16a54:	4438      	add	r0, r7
   16a56:	443e      	add	r6, r7
   16a58:	1bed      	subs	r5, r5, r7
   16a5a:	6620      	str	r0, [r4, #96]	; 0x60
   16a5c:	e7ad      	b.n	169ba <mbedtls_sha_update_internal+0x2a>
   16a5e:	4620      	mov	r0, r4
   16a60:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   16a62:	a902      	add	r1, sp, #8
   16a64:	f000 fd48 	bl	174f8 <ProcessHashDrv>
   16a68:	2800      	cmp	r0, #0
   16a6a:	d1c4      	bne.n	169f6 <mbedtls_sha_update_internal+0x66>
   16a6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   16a6e:	6620      	str	r0, [r4, #96]	; 0x60
   16a70:	e7a5      	b.n	169be <mbedtls_sha_update_internal+0x2e>
   16a72:	bf00      	nop

00016a74 <block_cipher_df>:
   16a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a78:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   16a7c:	b0af      	sub	sp, #188	; 0xbc
   16a7e:	f200 812c 	bhi.w	16cda <block_cipher_df+0x266>
   16a82:	f8df 926c 	ldr.w	r9, [pc, #620]	; 16cf0 <block_cipher_df+0x27c>
   16a86:	4690      	mov	r8, r2
   16a88:	460c      	mov	r4, r1
   16a8a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   16a8e:	2100      	movs	r1, #0
   16a90:	4682      	mov	sl, r0
   16a92:	4648      	mov	r0, r9
   16a94:	f001 fedf 	bl	18856 <memset>
   16a98:	a811      	add	r0, sp, #68	; 0x44
   16a9a:	f000 fe97 	bl	177cc <cc_mbedtls_aes_init>
   16a9e:	2200      	movs	r2, #0
   16aa0:	2320      	movs	r3, #32
   16aa2:	4621      	mov	r1, r4
   16aa4:	f8a9 2010 	strh.w	r2, [r9, #16]
   16aa8:	fa98 f498 	rev16.w	r4, r8
   16aac:	4642      	mov	r2, r8
   16aae:	f109 0018 	add.w	r0, r9, #24
   16ab2:	f8a9 4012 	strh.w	r4, [r9, #18]
   16ab6:	f889 3017 	strb.w	r3, [r9, #23]
   16aba:	f001 fec1 	bl	18840 <memcpy>
   16abe:	2280      	movs	r2, #128	; 0x80
   16ac0:	4b87      	ldr	r3, [pc, #540]	; (16ce0 <block_cipher_df+0x26c>)
   16ac2:	4988      	ldr	r1, [pc, #544]	; (16ce4 <block_cipher_df+0x270>)
   16ac4:	4c88      	ldr	r4, [pc, #544]	; (16ce8 <block_cipher_df+0x274>)
   16ac6:	eb09 0008 	add.w	r0, r9, r8
   16aca:	e9cd 4102 	strd	r4, r1, [sp, #8]
   16ace:	7602      	strb	r2, [r0, #24]
   16ad0:	9301      	str	r3, [sp, #4]
   16ad2:	a811      	add	r0, sp, #68	; 0x44
   16ad4:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
   16ad8:	a901      	add	r1, sp, #4
   16ada:	9304      	str	r3, [sp, #16]
   16adc:	f000 fe8c 	bl	177f8 <cc_mbedtls_aes_setkey_enc>
   16ae0:	4607      	mov	r7, r0
   16ae2:	2800      	cmp	r0, #0
   16ae4:	f040 80d8 	bne.w	16c98 <block_cipher_df+0x224>
   16ae8:	f108 0819 	add.w	r8, r8, #25
   16aec:	ae05      	add	r6, sp, #20
   16aee:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
   16af2:	2210      	movs	r2, #16
   16af4:	2100      	movs	r1, #0
   16af6:	4630      	mov	r0, r6
   16af8:	f001 fead 	bl	18856 <memset>
   16afc:	4645      	mov	r5, r8
   16afe:	4c7b      	ldr	r4, [pc, #492]	; (16cec <block_cipher_df+0x278>)
   16b00:	f89d 2014 	ldrb.w	r2, [sp, #20]
   16b04:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   16b08:	f89d c015 	ldrb.w	ip, [sp, #21]
   16b0c:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   16b10:	f89d 0016 	ldrb.w	r0, [sp, #22]
   16b14:	4053      	eors	r3, r2
   16b16:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   16b1a:	ea8c 0c01 	eor.w	ip, ip, r1
   16b1e:	4050      	eors	r0, r2
   16b20:	f89d 1017 	ldrb.w	r1, [sp, #23]
   16b24:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
   16b28:	f89d e018 	ldrb.w	lr, [sp, #24]
   16b2c:	4051      	eors	r1, r2
   16b2e:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
   16b32:	f88d 3014 	strb.w	r3, [sp, #20]
   16b36:	ea8e 0202 	eor.w	r2, lr, r2
   16b3a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   16b3e:	f89d e019 	ldrb.w	lr, [sp, #25]
   16b42:	f88d c015 	strb.w	ip, [sp, #21]
   16b46:	ea8e 0303 	eor.w	r3, lr, r3
   16b4a:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
   16b4e:	f89d e01a 	ldrb.w	lr, [sp, #26]
   16b52:	f88d 0016 	strb.w	r0, [sp, #22]
   16b56:	ea8e 0c0c 	eor.w	ip, lr, ip
   16b5a:	f814 0c09 	ldrb.w	r0, [r4, #-9]
   16b5e:	f89d e01b 	ldrb.w	lr, [sp, #27]
   16b62:	f88d 1017 	strb.w	r1, [sp, #23]
   16b66:	ea8e 0000 	eor.w	r0, lr, r0
   16b6a:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   16b6e:	f89d e01c 	ldrb.w	lr, [sp, #28]
   16b72:	f88d 2018 	strb.w	r2, [sp, #24]
   16b76:	ea8e 0101 	eor.w	r1, lr, r1
   16b7a:	f814 2c07 	ldrb.w	r2, [r4, #-7]
   16b7e:	f89d e01d 	ldrb.w	lr, [sp, #29]
   16b82:	f88d 3019 	strb.w	r3, [sp, #25]
   16b86:	ea8e 0202 	eor.w	r2, lr, r2
   16b8a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   16b8e:	f814 ec06 	ldrb.w	lr, [r4, #-6]
   16b92:	f88d c01a 	strb.w	ip, [sp, #26]
   16b96:	ea83 030e 	eor.w	r3, r3, lr
   16b9a:	f88d 001b 	strb.w	r0, [sp, #27]
   16b9e:	f88d 101c 	strb.w	r1, [sp, #28]
   16ba2:	f88d 201d 	strb.w	r2, [sp, #29]
   16ba6:	f88d 301e 	strb.w	r3, [sp, #30]
   16baa:	f89d 101f 	ldrb.w	r1, [sp, #31]
   16bae:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   16bb2:	f89d c020 	ldrb.w	ip, [sp, #32]
   16bb6:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   16bba:	404b      	eors	r3, r1
   16bbc:	f814 2c04 	ldrb.w	r2, [r4, #-4]
   16bc0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   16bc4:	ea8c 0202 	eor.w	r2, ip, r2
   16bc8:	4041      	eors	r1, r0
   16bca:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   16bce:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   16bd2:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
   16bd6:	ea8c 0000 	eor.w	r0, ip, r0
   16bda:	f814 cc01 	ldrb.w	ip, [r4, #-1]
   16bde:	f88d 301f 	strb.w	r3, [sp, #31]
   16be2:	ea8e 0c0c 	eor.w	ip, lr, ip
   16be6:	f88d 2020 	strb.w	r2, [sp, #32]
   16bea:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   16bee:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   16bf2:	4633      	mov	r3, r6
   16bf4:	4632      	mov	r2, r6
   16bf6:	2101      	movs	r1, #1
   16bf8:	a811      	add	r0, sp, #68	; 0x44
   16bfa:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
   16bfe:	f000 fe15 	bl	1782c <cc_mbedtls_aes_crypt_ecb>
   16c02:	2d10      	cmp	r5, #16
   16c04:	bf94      	ite	ls
   16c06:	1b6d      	subls	r5, r5, r5
   16c08:	3d10      	subhi	r5, #16
   16c0a:	2800      	cmp	r0, #0
   16c0c:	d163      	bne.n	16cd6 <block_cipher_df+0x262>
   16c0e:	3410      	adds	r4, #16
   16c10:	2d00      	cmp	r5, #0
   16c12:	f47f af75 	bne.w	16b00 <block_cipher_df+0x8c>
   16c16:	eb0b 0007 	add.w	r0, fp, r7
   16c1a:	2210      	movs	r2, #16
   16c1c:	4631      	mov	r1, r6
   16c1e:	f001 fe0f 	bl	18840 <memcpy>
   16c22:	f899 3003 	ldrb.w	r3, [r9, #3]
   16c26:	3710      	adds	r7, #16
   16c28:	3301      	adds	r3, #1
   16c2a:	2f20      	cmp	r7, #32
   16c2c:	f889 3003 	strb.w	r3, [r9, #3]
   16c30:	f47f af5f 	bne.w	16af2 <block_cipher_df+0x7e>
   16c34:	2280      	movs	r2, #128	; 0x80
   16c36:	4659      	mov	r1, fp
   16c38:	a811      	add	r0, sp, #68	; 0x44
   16c3a:	f000 fddd 	bl	177f8 <cc_mbedtls_aes_setkey_enc>
   16c3e:	4607      	mov	r7, r0
   16c40:	bb68      	cbnz	r0, 16c9e <block_cipher_df+0x22a>
   16c42:	4654      	mov	r4, sl
   16c44:	f10a 0520 	add.w	r5, sl, #32
   16c48:	ab0d      	add	r3, sp, #52	; 0x34
   16c4a:	461a      	mov	r2, r3
   16c4c:	2101      	movs	r1, #1
   16c4e:	a811      	add	r0, sp, #68	; 0x44
   16c50:	f000 fdec 	bl	1782c <cc_mbedtls_aes_crypt_ecb>
   16c54:	4607      	mov	r7, r0
   16c56:	bb10      	cbnz	r0, 16c9e <block_cipher_df+0x22a>
   16c58:	2210      	movs	r2, #16
   16c5a:	4620      	mov	r0, r4
   16c5c:	a90d      	add	r1, sp, #52	; 0x34
   16c5e:	4414      	add	r4, r2
   16c60:	f001 fdee 	bl	18840 <memcpy>
   16c64:	42ac      	cmp	r4, r5
   16c66:	d1ef      	bne.n	16c48 <block_cipher_df+0x1d4>
   16c68:	a811      	add	r0, sp, #68	; 0x44
   16c6a:	f000 fdbf 	bl	177ec <cc_mbedtls_aes_free>
   16c6e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   16c72:	481f      	ldr	r0, [pc, #124]	; (16cf0 <block_cipher_df+0x27c>)
   16c74:	f7ff fd64 	bl	16740 <mbedtls_platform_zeroize>
   16c78:	4658      	mov	r0, fp
   16c7a:	2120      	movs	r1, #32
   16c7c:	f7ff fd60 	bl	16740 <mbedtls_platform_zeroize>
   16c80:	a801      	add	r0, sp, #4
   16c82:	2110      	movs	r1, #16
   16c84:	f7ff fd5c 	bl	16740 <mbedtls_platform_zeroize>
   16c88:	4630      	mov	r0, r6
   16c8a:	2110      	movs	r1, #16
   16c8c:	f7ff fd58 	bl	16740 <mbedtls_platform_zeroize>
   16c90:	4638      	mov	r0, r7
   16c92:	b02f      	add	sp, #188	; 0xbc
   16c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c98:	ae05      	add	r6, sp, #20
   16c9a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
   16c9e:	a811      	add	r0, sp, #68	; 0x44
   16ca0:	f000 fda4 	bl	177ec <cc_mbedtls_aes_free>
   16ca4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   16ca8:	4811      	ldr	r0, [pc, #68]	; (16cf0 <block_cipher_df+0x27c>)
   16caa:	f7ff fd49 	bl	16740 <mbedtls_platform_zeroize>
   16cae:	4658      	mov	r0, fp
   16cb0:	2120      	movs	r1, #32
   16cb2:	f7ff fd45 	bl	16740 <mbedtls_platform_zeroize>
   16cb6:	2110      	movs	r1, #16
   16cb8:	a801      	add	r0, sp, #4
   16cba:	f7ff fd41 	bl	16740 <mbedtls_platform_zeroize>
   16cbe:	4630      	mov	r0, r6
   16cc0:	2110      	movs	r1, #16
   16cc2:	f7ff fd3d 	bl	16740 <mbedtls_platform_zeroize>
   16cc6:	4650      	mov	r0, sl
   16cc8:	2120      	movs	r1, #32
   16cca:	f7ff fd39 	bl	16740 <mbedtls_platform_zeroize>
   16cce:	4638      	mov	r0, r7
   16cd0:	b02f      	add	sp, #188	; 0xbc
   16cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cd6:	4607      	mov	r7, r0
   16cd8:	e7e1      	b.n	16c9e <block_cipher_df+0x22a>
   16cda:	f06f 0737 	mvn.w	r7, #55	; 0x37
   16cde:	e7f6      	b.n	16cce <block_cipher_df+0x25a>
   16ce0:	03020100 	.word	0x03020100
   16ce4:	0b0a0908 	.word	0x0b0a0908
   16ce8:	07060504 	.word	0x07060504
   16cec:	20000f24 	.word	0x20000f24
   16cf0:	20000f14 	.word	0x20000f14

00016cf4 <ctr_drbg_update_internal>:
   16cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cf8:	2220      	movs	r2, #32
   16cfa:	4604      	mov	r4, r0
   16cfc:	b088      	sub	sp, #32
   16cfe:	460d      	mov	r5, r1
   16d00:	4668      	mov	r0, sp
   16d02:	2100      	movs	r1, #0
   16d04:	18a6      	adds	r6, r4, r2
   16d06:	466f      	mov	r7, sp
   16d08:	f001 fda5 	bl	18856 <memset>
   16d0c:	7be2      	ldrb	r2, [r4, #15]
   16d0e:	3201      	adds	r2, #1
   16d10:	b2d2      	uxtb	r2, r2
   16d12:	73e2      	strb	r2, [r4, #15]
   16d14:	2a00      	cmp	r2, #0
   16d16:	d14d      	bne.n	16db4 <ctr_drbg_update_internal+0xc0>
   16d18:	7ba2      	ldrb	r2, [r4, #14]
   16d1a:	3201      	adds	r2, #1
   16d1c:	b2d2      	uxtb	r2, r2
   16d1e:	73a2      	strb	r2, [r4, #14]
   16d20:	2a00      	cmp	r2, #0
   16d22:	d147      	bne.n	16db4 <ctr_drbg_update_internal+0xc0>
   16d24:	7b63      	ldrb	r3, [r4, #13]
   16d26:	3301      	adds	r3, #1
   16d28:	b2db      	uxtb	r3, r3
   16d2a:	7363      	strb	r3, [r4, #13]
   16d2c:	2b00      	cmp	r3, #0
   16d2e:	d141      	bne.n	16db4 <ctr_drbg_update_internal+0xc0>
   16d30:	7b23      	ldrb	r3, [r4, #12]
   16d32:	3301      	adds	r3, #1
   16d34:	b2db      	uxtb	r3, r3
   16d36:	7323      	strb	r3, [r4, #12]
   16d38:	2b00      	cmp	r3, #0
   16d3a:	d13b      	bne.n	16db4 <ctr_drbg_update_internal+0xc0>
   16d3c:	7ae3      	ldrb	r3, [r4, #11]
   16d3e:	3301      	adds	r3, #1
   16d40:	b2db      	uxtb	r3, r3
   16d42:	72e3      	strb	r3, [r4, #11]
   16d44:	2b00      	cmp	r3, #0
   16d46:	d135      	bne.n	16db4 <ctr_drbg_update_internal+0xc0>
   16d48:	7aa3      	ldrb	r3, [r4, #10]
   16d4a:	3301      	adds	r3, #1
   16d4c:	b2db      	uxtb	r3, r3
   16d4e:	72a3      	strb	r3, [r4, #10]
   16d50:	2b00      	cmp	r3, #0
   16d52:	d12f      	bne.n	16db4 <ctr_drbg_update_internal+0xc0>
   16d54:	7a63      	ldrb	r3, [r4, #9]
   16d56:	3301      	adds	r3, #1
   16d58:	b2db      	uxtb	r3, r3
   16d5a:	7263      	strb	r3, [r4, #9]
   16d5c:	bb53      	cbnz	r3, 16db4 <ctr_drbg_update_internal+0xc0>
   16d5e:	7a23      	ldrb	r3, [r4, #8]
   16d60:	3301      	adds	r3, #1
   16d62:	b2db      	uxtb	r3, r3
   16d64:	7223      	strb	r3, [r4, #8]
   16d66:	bb2b      	cbnz	r3, 16db4 <ctr_drbg_update_internal+0xc0>
   16d68:	79e3      	ldrb	r3, [r4, #7]
   16d6a:	3301      	adds	r3, #1
   16d6c:	b2db      	uxtb	r3, r3
   16d6e:	71e3      	strb	r3, [r4, #7]
   16d70:	bb03      	cbnz	r3, 16db4 <ctr_drbg_update_internal+0xc0>
   16d72:	79a3      	ldrb	r3, [r4, #6]
   16d74:	3301      	adds	r3, #1
   16d76:	b2db      	uxtb	r3, r3
   16d78:	71a3      	strb	r3, [r4, #6]
   16d7a:	b9db      	cbnz	r3, 16db4 <ctr_drbg_update_internal+0xc0>
   16d7c:	7963      	ldrb	r3, [r4, #5]
   16d7e:	3301      	adds	r3, #1
   16d80:	b2db      	uxtb	r3, r3
   16d82:	7163      	strb	r3, [r4, #5]
   16d84:	b9b3      	cbnz	r3, 16db4 <ctr_drbg_update_internal+0xc0>
   16d86:	7923      	ldrb	r3, [r4, #4]
   16d88:	3301      	adds	r3, #1
   16d8a:	b2db      	uxtb	r3, r3
   16d8c:	7123      	strb	r3, [r4, #4]
   16d8e:	b98b      	cbnz	r3, 16db4 <ctr_drbg_update_internal+0xc0>
   16d90:	78e3      	ldrb	r3, [r4, #3]
   16d92:	3301      	adds	r3, #1
   16d94:	b2db      	uxtb	r3, r3
   16d96:	70e3      	strb	r3, [r4, #3]
   16d98:	b963      	cbnz	r3, 16db4 <ctr_drbg_update_internal+0xc0>
   16d9a:	78a3      	ldrb	r3, [r4, #2]
   16d9c:	3301      	adds	r3, #1
   16d9e:	b2db      	uxtb	r3, r3
   16da0:	70a3      	strb	r3, [r4, #2]
   16da2:	b93b      	cbnz	r3, 16db4 <ctr_drbg_update_internal+0xc0>
   16da4:	7863      	ldrb	r3, [r4, #1]
   16da6:	3301      	adds	r3, #1
   16da8:	b2db      	uxtb	r3, r3
   16daa:	7063      	strb	r3, [r4, #1]
   16dac:	b913      	cbnz	r3, 16db4 <ctr_drbg_update_internal+0xc0>
   16dae:	7823      	ldrb	r3, [r4, #0]
   16db0:	3301      	adds	r3, #1
   16db2:	7023      	strb	r3, [r4, #0]
   16db4:	463b      	mov	r3, r7
   16db6:	4622      	mov	r2, r4
   16db8:	2101      	movs	r1, #1
   16dba:	4630      	mov	r0, r6
   16dbc:	f000 fd36 	bl	1782c <cc_mbedtls_aes_crypt_ecb>
   16dc0:	4680      	mov	r8, r0
   16dc2:	2800      	cmp	r0, #0
   16dc4:	d12a      	bne.n	16e1c <ctr_drbg_update_internal+0x128>
   16dc6:	3710      	adds	r7, #16
   16dc8:	ab08      	add	r3, sp, #32
   16dca:	429f      	cmp	r7, r3
   16dcc:	d19e      	bne.n	16d0c <ctr_drbg_update_internal+0x18>
   16dce:	9900      	ldr	r1, [sp, #0]
   16dd0:	682b      	ldr	r3, [r5, #0]
   16dd2:	686a      	ldr	r2, [r5, #4]
   16dd4:	404b      	eors	r3, r1
   16dd6:	9901      	ldr	r1, [sp, #4]
   16dd8:	4630      	mov	r0, r6
   16dda:	404a      	eors	r2, r1
   16ddc:	68ae      	ldr	r6, [r5, #8]
   16dde:	9902      	ldr	r1, [sp, #8]
   16de0:	9300      	str	r3, [sp, #0]
   16de2:	4071      	eors	r1, r6
   16de4:	68eb      	ldr	r3, [r5, #12]
   16de6:	9e03      	ldr	r6, [sp, #12]
   16de8:	9201      	str	r2, [sp, #4]
   16dea:	4073      	eors	r3, r6
   16dec:	692a      	ldr	r2, [r5, #16]
   16dee:	9e04      	ldr	r6, [sp, #16]
   16df0:	9102      	str	r1, [sp, #8]
   16df2:	4056      	eors	r6, r2
   16df4:	9905      	ldr	r1, [sp, #20]
   16df6:	696a      	ldr	r2, [r5, #20]
   16df8:	9303      	str	r3, [sp, #12]
   16dfa:	4051      	eors	r1, r2
   16dfc:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   16e00:	9d06      	ldr	r5, [sp, #24]
   16e02:	9105      	str	r1, [sp, #20]
   16e04:	4055      	eors	r5, r2
   16e06:	9a07      	ldr	r2, [sp, #28]
   16e08:	4669      	mov	r1, sp
   16e0a:	4053      	eors	r3, r2
   16e0c:	2280      	movs	r2, #128	; 0x80
   16e0e:	e9cd 5306 	strd	r5, r3, [sp, #24]
   16e12:	9604      	str	r6, [sp, #16]
   16e14:	f000 fcf0 	bl	177f8 <cc_mbedtls_aes_setkey_enc>
   16e18:	4680      	mov	r8, r0
   16e1a:	b138      	cbz	r0, 16e2c <ctr_drbg_update_internal+0x138>
   16e1c:	4668      	mov	r0, sp
   16e1e:	2120      	movs	r1, #32
   16e20:	f7ff fc8e 	bl	16740 <mbedtls_platform_zeroize>
   16e24:	4640      	mov	r0, r8
   16e26:	b008      	add	sp, #32
   16e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e2c:	2210      	movs	r2, #16
   16e2e:	4620      	mov	r0, r4
   16e30:	eb0d 0102 	add.w	r1, sp, r2
   16e34:	f001 fd04 	bl	18840 <memcpy>
   16e38:	e7f0      	b.n	16e1c <ctr_drbg_update_internal+0x128>
   16e3a:	bf00      	nop

00016e3c <mbedtls_ctr_drbg_reseed_internal>:
   16e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16e40:	4604      	mov	r4, r0
   16e42:	6980      	ldr	r0, [r0, #24]
   16e44:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   16e48:	d853      	bhi.n	16ef2 <mbedtls_ctr_drbg_reseed_internal+0xb6>
   16e4a:	461d      	mov	r5, r3
   16e4c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   16e50:	42ab      	cmp	r3, r5
   16e52:	d34e      	bcc.n	16ef2 <mbedtls_ctr_drbg_reseed_internal+0xb6>
   16e54:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   16e58:	1a18      	subs	r0, r3, r0
   16e5a:	4290      	cmp	r0, r2
   16e5c:	4616      	mov	r6, r2
   16e5e:	d348      	bcc.n	16ef2 <mbedtls_ctr_drbg_reseed_internal+0xb6>
   16e60:	f8df 809c 	ldr.w	r8, [pc, #156]	; 16f00 <mbedtls_ctr_drbg_reseed_internal+0xc4>
   16e64:	f44f 72c0 	mov.w	r2, #384	; 0x180
   16e68:	460f      	mov	r7, r1
   16e6a:	4640      	mov	r0, r8
   16e6c:	2100      	movs	r1, #0
   16e6e:	f001 fcf2 	bl	18856 <memset>
   16e72:	4641      	mov	r1, r8
   16e74:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   16e78:	69a2      	ldr	r2, [r4, #24]
   16e7a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   16e7e:	4798      	blx	r3
   16e80:	2800      	cmp	r0, #0
   16e82:	d139      	bne.n	16ef8 <mbedtls_ctr_drbg_reseed_internal+0xbc>
   16e84:	f8d4 9018 	ldr.w	r9, [r4, #24]
   16e88:	b145      	cbz	r5, 16e9c <mbedtls_ctr_drbg_reseed_internal+0x60>
   16e8a:	462a      	mov	r2, r5
   16e8c:	4641      	mov	r1, r8
   16e8e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   16e92:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   16e96:	4798      	blx	r3
   16e98:	bb70      	cbnz	r0, 16ef8 <mbedtls_ctr_drbg_reseed_internal+0xbc>
   16e9a:	44a9      	add	r9, r5
   16e9c:	b107      	cbz	r7, 16ea0 <mbedtls_ctr_drbg_reseed_internal+0x64>
   16e9e:	b9c6      	cbnz	r6, 16ed2 <mbedtls_ctr_drbg_reseed_internal+0x96>
   16ea0:	4917      	ldr	r1, [pc, #92]	; (16f00 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   16ea2:	464a      	mov	r2, r9
   16ea4:	4608      	mov	r0, r1
   16ea6:	f7ff fde5 	bl	16a74 <block_cipher_df>
   16eaa:	4605      	mov	r5, r0
   16eac:	b138      	cbz	r0, 16ebe <mbedtls_ctr_drbg_reseed_internal+0x82>
   16eae:	f44f 71c0 	mov.w	r1, #384	; 0x180
   16eb2:	4813      	ldr	r0, [pc, #76]	; (16f00 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   16eb4:	f7ff fc44 	bl	16740 <mbedtls_platform_zeroize>
   16eb8:	4628      	mov	r0, r5
   16eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16ebe:	4620      	mov	r0, r4
   16ec0:	490f      	ldr	r1, [pc, #60]	; (16f00 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   16ec2:	f7ff ff17 	bl	16cf4 <ctr_drbg_update_internal>
   16ec6:	4605      	mov	r5, r0
   16ec8:	2800      	cmp	r0, #0
   16eca:	d1f0      	bne.n	16eae <mbedtls_ctr_drbg_reseed_internal+0x72>
   16ecc:	2301      	movs	r3, #1
   16ece:	6123      	str	r3, [r4, #16]
   16ed0:	e7ed      	b.n	16eae <mbedtls_ctr_drbg_reseed_internal+0x72>
   16ed2:	4639      	mov	r1, r7
   16ed4:	4632      	mov	r2, r6
   16ed6:	eb08 0009 	add.w	r0, r8, r9
   16eda:	f001 fcb1 	bl	18840 <memcpy>
   16ede:	4908      	ldr	r1, [pc, #32]	; (16f00 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
   16ee0:	44b1      	add	r9, r6
   16ee2:	464a      	mov	r2, r9
   16ee4:	4608      	mov	r0, r1
   16ee6:	f7ff fdc5 	bl	16a74 <block_cipher_df>
   16eea:	4605      	mov	r5, r0
   16eec:	2800      	cmp	r0, #0
   16eee:	d1de      	bne.n	16eae <mbedtls_ctr_drbg_reseed_internal+0x72>
   16ef0:	e7e5      	b.n	16ebe <mbedtls_ctr_drbg_reseed_internal+0x82>
   16ef2:	f06f 0537 	mvn.w	r5, #55	; 0x37
   16ef6:	e7df      	b.n	16eb8 <mbedtls_ctr_drbg_reseed_internal+0x7c>
   16ef8:	f06f 0533 	mvn.w	r5, #51	; 0x33
   16efc:	e7dc      	b.n	16eb8 <mbedtls_ctr_drbg_reseed_internal+0x7c>
   16efe:	bf00      	nop
   16f00:	200010b4 	.word	0x200010b4

00016f04 <cc_mbedtls_ctr_drbg_init>:
   16f04:	b510      	push	{r4, lr}
   16f06:	22a4      	movs	r2, #164	; 0xa4
   16f08:	2100      	movs	r1, #0
   16f0a:	4604      	mov	r4, r0
   16f0c:	f001 fca3 	bl	18856 <memset>
   16f10:	f04f 32ff 	mov.w	r2, #4294967295
   16f14:	4b03      	ldr	r3, [pc, #12]	; (16f24 <cc_mbedtls_ctr_drbg_init+0x20>)
   16f16:	6122      	str	r2, [r4, #16]
   16f18:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   16f1c:	681b      	ldr	r3, [r3, #0]
   16f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16f22:	4718      	bx	r3
   16f24:	200000c4 	.word	0x200000c4

00016f28 <cc_mbedtls_ctr_drbg_seed>:
   16f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16f2c:	4605      	mov	r5, r0
   16f2e:	b085      	sub	sp, #20
   16f30:	460f      	mov	r7, r1
   16f32:	4616      	mov	r6, r2
   16f34:	4668      	mov	r0, sp
   16f36:	2210      	movs	r2, #16
   16f38:	2100      	movs	r1, #0
   16f3a:	4699      	mov	r9, r3
   16f3c:	f001 fc8b 	bl	18856 <memset>
   16f40:	4b1f      	ldr	r3, [pc, #124]	; (16fc0 <cc_mbedtls_ctr_drbg_seed+0x98>)
   16f42:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   16f46:	4640      	mov	r0, r8
   16f48:	681b      	ldr	r3, [r3, #0]
   16f4a:	4798      	blx	r3
   16f4c:	b120      	cbz	r0, 16f58 <cc_mbedtls_ctr_drbg_seed+0x30>
   16f4e:	4604      	mov	r4, r0
   16f50:	4620      	mov	r0, r4
   16f52:	b005      	add	sp, #20
   16f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16f58:	f105 0420 	add.w	r4, r5, #32
   16f5c:	4620      	mov	r0, r4
   16f5e:	f000 fc35 	bl	177cc <cc_mbedtls_aes_init>
   16f62:	69aa      	ldr	r2, [r5, #24]
   16f64:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   16f68:	bb02      	cbnz	r2, 16fac <cc_mbedtls_ctr_drbg_seed+0x84>
   16f6a:	2220      	movs	r2, #32
   16f6c:	692e      	ldr	r6, [r5, #16]
   16f6e:	61aa      	str	r2, [r5, #24]
   16f70:	2e00      	cmp	r6, #0
   16f72:	db23      	blt.n	16fbc <cc_mbedtls_ctr_drbg_seed+0x94>
   16f74:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   16f78:	4620      	mov	r0, r4
   16f7a:	4669      	mov	r1, sp
   16f7c:	2280      	movs	r2, #128	; 0x80
   16f7e:	61eb      	str	r3, [r5, #28]
   16f80:	f000 fc3a 	bl	177f8 <cc_mbedtls_aes_setkey_enc>
   16f84:	4604      	mov	r4, r0
   16f86:	b930      	cbnz	r0, 16f96 <cc_mbedtls_ctr_drbg_seed+0x6e>
   16f88:	4633      	mov	r3, r6
   16f8a:	4649      	mov	r1, r9
   16f8c:	4628      	mov	r0, r5
   16f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16f90:	f7ff ff54 	bl	16e3c <mbedtls_ctr_drbg_reseed_internal>
   16f94:	4604      	mov	r4, r0
   16f96:	4b0b      	ldr	r3, [pc, #44]	; (16fc4 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   16f98:	4640      	mov	r0, r8
   16f9a:	681b      	ldr	r3, [r3, #0]
   16f9c:	4798      	blx	r3
   16f9e:	2800      	cmp	r0, #0
   16fa0:	bf18      	it	ne
   16fa2:	4604      	movne	r4, r0
   16fa4:	4620      	mov	r0, r4
   16fa6:	b005      	add	sp, #20
   16fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16fac:	692e      	ldr	r6, [r5, #16]
   16fae:	2e00      	cmp	r6, #0
   16fb0:	dae0      	bge.n	16f74 <cc_mbedtls_ctr_drbg_seed+0x4c>
   16fb2:	2a17      	cmp	r2, #23
   16fb4:	d802      	bhi.n	16fbc <cc_mbedtls_ctr_drbg_seed+0x94>
   16fb6:	1c53      	adds	r3, r2, #1
   16fb8:	085e      	lsrs	r6, r3, #1
   16fba:	e7db      	b.n	16f74 <cc_mbedtls_ctr_drbg_seed+0x4c>
   16fbc:	2600      	movs	r6, #0
   16fbe:	e7d9      	b.n	16f74 <cc_mbedtls_ctr_drbg_seed+0x4c>
   16fc0:	200000c8 	.word	0x200000c8
   16fc4:	200000cc 	.word	0x200000cc

00016fc8 <cc_mbedtls_ctr_drbg_random_with_add>:
   16fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fcc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   16fd0:	b08d      	sub	sp, #52	; 0x34
   16fd2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   16fd6:	f200 80e4 	bhi.w	171a2 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   16fda:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   16fde:	f200 80dd 	bhi.w	1719c <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   16fe2:	4604      	mov	r4, r0
   16fe4:	4615      	mov	r5, r2
   16fe6:	460e      	mov	r6, r1
   16fe8:	2220      	movs	r2, #32
   16fea:	2100      	movs	r1, #0
   16fec:	a804      	add	r0, sp, #16
   16fee:	461f      	mov	r7, r3
   16ff0:	f001 fc31 	bl	18856 <memset>
   16ff4:	4b6c      	ldr	r3, [pc, #432]	; (171a8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   16ff6:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   16ffa:	4648      	mov	r0, r9
   16ffc:	681b      	ldr	r3, [r3, #0]
   16ffe:	4798      	blx	r3
   17000:	4683      	mov	fp, r0
   17002:	2800      	cmp	r0, #0
   17004:	f040 8093 	bne.w	1712e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   17008:	6922      	ldr	r2, [r4, #16]
   1700a:	69e3      	ldr	r3, [r4, #28]
   1700c:	429a      	cmp	r2, r3
   1700e:	f300 8092 	bgt.w	17136 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   17012:	6963      	ldr	r3, [r4, #20]
   17014:	2b00      	cmp	r3, #0
   17016:	f040 808e 	bne.w	17136 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1701a:	f1b8 0f00 	cmp.w	r8, #0
   1701e:	f040 80a9 	bne.w	17174 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   17022:	f8df a188 	ldr.w	sl, [pc, #392]	; 171ac <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   17026:	466f      	mov	r7, sp
   17028:	2d00      	cmp	r5, #0
   1702a:	f000 8098 	beq.w	1715e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1702e:	466f      	mov	r7, sp
   17030:	f104 0820 	add.w	r8, r4, #32
   17034:	e00e      	b.n	17054 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   17036:	2d10      	cmp	r5, #16
   17038:	46ab      	mov	fp, r5
   1703a:	bf28      	it	cs
   1703c:	f04f 0b10 	movcs.w	fp, #16
   17040:	4630      	mov	r0, r6
   17042:	4639      	mov	r1, r7
   17044:	465a      	mov	r2, fp
   17046:	f001 fbfb 	bl	18840 <memcpy>
   1704a:	ebb5 050b 	subs.w	r5, r5, fp
   1704e:	445e      	add	r6, fp
   17050:	f000 8085 	beq.w	1715e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   17054:	7be3      	ldrb	r3, [r4, #15]
   17056:	3301      	adds	r3, #1
   17058:	b2db      	uxtb	r3, r3
   1705a:	73e3      	strb	r3, [r4, #15]
   1705c:	2b00      	cmp	r3, #0
   1705e:	d14d      	bne.n	170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17060:	7ba3      	ldrb	r3, [r4, #14]
   17062:	3301      	adds	r3, #1
   17064:	b2db      	uxtb	r3, r3
   17066:	73a3      	strb	r3, [r4, #14]
   17068:	2b00      	cmp	r3, #0
   1706a:	d147      	bne.n	170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1706c:	7b63      	ldrb	r3, [r4, #13]
   1706e:	3301      	adds	r3, #1
   17070:	b2db      	uxtb	r3, r3
   17072:	7363      	strb	r3, [r4, #13]
   17074:	2b00      	cmp	r3, #0
   17076:	d141      	bne.n	170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17078:	7b23      	ldrb	r3, [r4, #12]
   1707a:	3301      	adds	r3, #1
   1707c:	b2db      	uxtb	r3, r3
   1707e:	7323      	strb	r3, [r4, #12]
   17080:	2b00      	cmp	r3, #0
   17082:	d13b      	bne.n	170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17084:	7ae3      	ldrb	r3, [r4, #11]
   17086:	3301      	adds	r3, #1
   17088:	b2db      	uxtb	r3, r3
   1708a:	72e3      	strb	r3, [r4, #11]
   1708c:	2b00      	cmp	r3, #0
   1708e:	d135      	bne.n	170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   17090:	7aa3      	ldrb	r3, [r4, #10]
   17092:	3301      	adds	r3, #1
   17094:	b2db      	uxtb	r3, r3
   17096:	72a3      	strb	r3, [r4, #10]
   17098:	2b00      	cmp	r3, #0
   1709a:	d12f      	bne.n	170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1709c:	7a63      	ldrb	r3, [r4, #9]
   1709e:	3301      	adds	r3, #1
   170a0:	b2db      	uxtb	r3, r3
   170a2:	7263      	strb	r3, [r4, #9]
   170a4:	bb53      	cbnz	r3, 170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   170a6:	7a23      	ldrb	r3, [r4, #8]
   170a8:	3301      	adds	r3, #1
   170aa:	b2db      	uxtb	r3, r3
   170ac:	7223      	strb	r3, [r4, #8]
   170ae:	bb2b      	cbnz	r3, 170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   170b0:	79e3      	ldrb	r3, [r4, #7]
   170b2:	3301      	adds	r3, #1
   170b4:	b2db      	uxtb	r3, r3
   170b6:	71e3      	strb	r3, [r4, #7]
   170b8:	bb03      	cbnz	r3, 170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   170ba:	79a3      	ldrb	r3, [r4, #6]
   170bc:	3301      	adds	r3, #1
   170be:	b2db      	uxtb	r3, r3
   170c0:	71a3      	strb	r3, [r4, #6]
   170c2:	b9db      	cbnz	r3, 170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   170c4:	7963      	ldrb	r3, [r4, #5]
   170c6:	3301      	adds	r3, #1
   170c8:	b2db      	uxtb	r3, r3
   170ca:	7163      	strb	r3, [r4, #5]
   170cc:	b9b3      	cbnz	r3, 170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   170ce:	7923      	ldrb	r3, [r4, #4]
   170d0:	3301      	adds	r3, #1
   170d2:	b2db      	uxtb	r3, r3
   170d4:	7123      	strb	r3, [r4, #4]
   170d6:	b98b      	cbnz	r3, 170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   170d8:	78e3      	ldrb	r3, [r4, #3]
   170da:	3301      	adds	r3, #1
   170dc:	b2db      	uxtb	r3, r3
   170de:	70e3      	strb	r3, [r4, #3]
   170e0:	b963      	cbnz	r3, 170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   170e2:	78a3      	ldrb	r3, [r4, #2]
   170e4:	3301      	adds	r3, #1
   170e6:	b2db      	uxtb	r3, r3
   170e8:	70a3      	strb	r3, [r4, #2]
   170ea:	b93b      	cbnz	r3, 170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   170ec:	7863      	ldrb	r3, [r4, #1]
   170ee:	3301      	adds	r3, #1
   170f0:	b2db      	uxtb	r3, r3
   170f2:	7063      	strb	r3, [r4, #1]
   170f4:	b913      	cbnz	r3, 170fc <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   170f6:	7823      	ldrb	r3, [r4, #0]
   170f8:	3301      	adds	r3, #1
   170fa:	7023      	strb	r3, [r4, #0]
   170fc:	463b      	mov	r3, r7
   170fe:	4622      	mov	r2, r4
   17100:	2101      	movs	r1, #1
   17102:	4640      	mov	r0, r8
   17104:	f000 fb92 	bl	1782c <cc_mbedtls_aes_crypt_ecb>
   17108:	4683      	mov	fp, r0
   1710a:	2800      	cmp	r0, #0
   1710c:	d093      	beq.n	17036 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1710e:	f8da 3000 	ldr.w	r3, [sl]
   17112:	4648      	mov	r0, r9
   17114:	4798      	blx	r3
   17116:	4603      	mov	r3, r0
   17118:	2120      	movs	r1, #32
   1711a:	a804      	add	r0, sp, #16
   1711c:	2b00      	cmp	r3, #0
   1711e:	bf18      	it	ne
   17120:	469b      	movne	fp, r3
   17122:	f7ff fb0d 	bl	16740 <mbedtls_platform_zeroize>
   17126:	4638      	mov	r0, r7
   17128:	2110      	movs	r1, #16
   1712a:	f7ff fb09 	bl	16740 <mbedtls_platform_zeroize>
   1712e:	4658      	mov	r0, fp
   17130:	b00d      	add	sp, #52	; 0x34
   17132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17136:	4642      	mov	r2, r8
   17138:	4639      	mov	r1, r7
   1713a:	2300      	movs	r3, #0
   1713c:	4620      	mov	r0, r4
   1713e:	f7ff fe7d 	bl	16e3c <mbedtls_ctr_drbg_reseed_internal>
   17142:	f8df a068 	ldr.w	sl, [pc, #104]	; 171ac <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   17146:	2800      	cmp	r0, #0
   17148:	f43f af6d 	beq.w	17026 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1714c:	4648      	mov	r0, r9
   1714e:	f8da 3000 	ldr.w	r3, [sl]
   17152:	4798      	blx	r3
   17154:	4683      	mov	fp, r0
   17156:	2800      	cmp	r0, #0
   17158:	f43f af65 	beq.w	17026 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1715c:	e7e7      	b.n	1712e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1715e:	4620      	mov	r0, r4
   17160:	a904      	add	r1, sp, #16
   17162:	f7ff fdc7 	bl	16cf4 <ctr_drbg_update_internal>
   17166:	4683      	mov	fp, r0
   17168:	2800      	cmp	r0, #0
   1716a:	d1d0      	bne.n	1710e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1716c:	6923      	ldr	r3, [r4, #16]
   1716e:	3301      	adds	r3, #1
   17170:	6123      	str	r3, [r4, #16]
   17172:	e7cc      	b.n	1710e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   17174:	4642      	mov	r2, r8
   17176:	4639      	mov	r1, r7
   17178:	a804      	add	r0, sp, #16
   1717a:	f7ff fc7b 	bl	16a74 <block_cipher_df>
   1717e:	4683      	mov	fp, r0
   17180:	b118      	cbz	r0, 1718a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   17182:	466f      	mov	r7, sp
   17184:	f8df a024 	ldr.w	sl, [pc, #36]	; 171ac <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   17188:	e7c1      	b.n	1710e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1718a:	4620      	mov	r0, r4
   1718c:	a904      	add	r1, sp, #16
   1718e:	f7ff fdb1 	bl	16cf4 <ctr_drbg_update_internal>
   17192:	4683      	mov	fp, r0
   17194:	2800      	cmp	r0, #0
   17196:	f43f af44 	beq.w	17022 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1719a:	e7f2      	b.n	17182 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1719c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   171a0:	e7c5      	b.n	1712e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   171a2:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   171a6:	e7c2      	b.n	1712e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   171a8:	200000c8 	.word	0x200000c8
   171ac:	200000cc 	.word	0x200000cc

000171b0 <cc_mbedtls_sha256_ret>:
   171b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   171b2:	461c      	mov	r4, r3
   171b4:	4605      	mov	r5, r0
   171b6:	4811      	ldr	r0, [pc, #68]	; (171fc <cc_mbedtls_sha256_ret+0x4c>)
   171b8:	460e      	mov	r6, r1
   171ba:	4617      	mov	r7, r2
   171bc:	f7ff fb4c 	bl	16858 <cc_mbedtls_sha256_init>
   171c0:	4621      	mov	r1, r4
   171c2:	480e      	ldr	r0, [pc, #56]	; (171fc <cc_mbedtls_sha256_ret+0x4c>)
   171c4:	f7ff fb62 	bl	1688c <cc_mbedtls_sha256_starts_ret>
   171c8:	4604      	mov	r4, r0
   171ca:	b120      	cbz	r0, 171d6 <cc_mbedtls_sha256_ret+0x26>
   171cc:	480b      	ldr	r0, [pc, #44]	; (171fc <cc_mbedtls_sha256_ret+0x4c>)
   171ce:	f7ff fb57 	bl	16880 <cc_mbedtls_sha256_free>
   171d2:	4620      	mov	r0, r4
   171d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   171d6:	4632      	mov	r2, r6
   171d8:	4629      	mov	r1, r5
   171da:	4808      	ldr	r0, [pc, #32]	; (171fc <cc_mbedtls_sha256_ret+0x4c>)
   171dc:	f7ff fb6a 	bl	168b4 <cc_mbedtls_sha256_update_ret>
   171e0:	4604      	mov	r4, r0
   171e2:	2800      	cmp	r0, #0
   171e4:	d1f2      	bne.n	171cc <cc_mbedtls_sha256_ret+0x1c>
   171e6:	4639      	mov	r1, r7
   171e8:	4804      	ldr	r0, [pc, #16]	; (171fc <cc_mbedtls_sha256_ret+0x4c>)
   171ea:	f7ff fb6b 	bl	168c4 <cc_mbedtls_sha256_finish_ret>
   171ee:	4604      	mov	r4, r0
   171f0:	4802      	ldr	r0, [pc, #8]	; (171fc <cc_mbedtls_sha256_ret+0x4c>)
   171f2:	f7ff fb45 	bl	16880 <cc_mbedtls_sha256_free>
   171f6:	4620      	mov	r0, r4
   171f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   171fa:	bf00      	nop
   171fc:	20001234 	.word	0x20001234

00017200 <RNG_PLAT_SetUserRngParameters>:
   17200:	231c      	movs	r3, #28
   17202:	b530      	push	{r4, r5, lr}
   17204:	b083      	sub	sp, #12
   17206:	a901      	add	r1, sp, #4
   17208:	4604      	mov	r4, r0
   1720a:	9301      	str	r3, [sp, #4]
   1720c:	f000 f83e 	bl	1728c <CC_PalTrngParamGet>
   17210:	4605      	mov	r5, r0
   17212:	b938      	cbnz	r0, 17224 <RNG_PLAT_SetUserRngParameters+0x24>
   17214:	9b01      	ldr	r3, [sp, #4]
   17216:	2b1c      	cmp	r3, #28
   17218:	d007      	beq.n	1722a <RNG_PLAT_SetUserRngParameters+0x2a>
   1721a:	4d16      	ldr	r5, [pc, #88]	; (17274 <RNG_PLAT_SetUserRngParameters+0x74>)
   1721c:	4620      	mov	r0, r4
   1721e:	211c      	movs	r1, #28
   17220:	f000 f830 	bl	17284 <CC_PalMemSetZeroPlat>
   17224:	4628      	mov	r0, r5
   17226:	b003      	add	sp, #12
   17228:	bd30      	pop	{r4, r5, pc}
   1722a:	2101      	movs	r1, #1
   1722c:	e9d4 3200 	ldrd	r3, r2, [r4]
   17230:	3b00      	subs	r3, #0
   17232:	bf18      	it	ne
   17234:	2301      	movne	r3, #1
   17236:	61e1      	str	r1, [r4, #28]
   17238:	b10a      	cbz	r2, 1723e <RNG_PLAT_SetUserRngParameters+0x3e>
   1723a:	f043 0302 	orr.w	r3, r3, #2
   1723e:	68a2      	ldr	r2, [r4, #8]
   17240:	b932      	cbnz	r2, 17250 <RNG_PLAT_SetUserRngParameters+0x50>
   17242:	68e2      	ldr	r2, [r4, #12]
   17244:	b942      	cbnz	r2, 17258 <RNG_PLAT_SetUserRngParameters+0x58>
   17246:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1724a:	b98b      	cbnz	r3, 17270 <RNG_PLAT_SetUserRngParameters+0x70>
   1724c:	4d0a      	ldr	r5, [pc, #40]	; (17278 <RNG_PLAT_SetUserRngParameters+0x78>)
   1724e:	e7e5      	b.n	1721c <RNG_PLAT_SetUserRngParameters+0x1c>
   17250:	68e2      	ldr	r2, [r4, #12]
   17252:	f043 0304 	orr.w	r3, r3, #4
   17256:	b13a      	cbz	r2, 17268 <RNG_PLAT_SetUserRngParameters+0x68>
   17258:	2200      	movs	r2, #0
   1725a:	4628      	mov	r0, r5
   1725c:	f043 0308 	orr.w	r3, r3, #8
   17260:	e9c4 3208 	strd	r3, r2, [r4, #32]
   17264:	b003      	add	sp, #12
   17266:	bd30      	pop	{r4, r5, pc}
   17268:	4615      	mov	r5, r2
   1726a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1726e:	e7d9      	b.n	17224 <RNG_PLAT_SetUserRngParameters+0x24>
   17270:	4615      	mov	r5, r2
   17272:	e7d7      	b.n	17224 <RNG_PLAT_SetUserRngParameters+0x24>
   17274:	00f00c37 	.word	0x00f00c37
   17278:	00f00c0e 	.word	0x00f00c0e

0001727c <CC_PalMemCopyPlat>:
   1727c:	f001 bac9 	b.w	18812 <memmove>

00017280 <CC_PalMemSetPlat>:
   17280:	f001 bae9 	b.w	18856 <memset>

00017284 <CC_PalMemSetZeroPlat>:
   17284:	460a      	mov	r2, r1
   17286:	2100      	movs	r1, #0
   17288:	f001 bae5 	b.w	18856 <memset>

0001728c <CC_PalTrngParamGet>:
   1728c:	2800      	cmp	r0, #0
   1728e:	d066      	beq.n	1735e <CC_PalTrngParamGet+0xd2>
   17290:	2900      	cmp	r1, #0
   17292:	d064      	beq.n	1735e <CC_PalTrngParamGet+0xd2>
   17294:	680b      	ldr	r3, [r1, #0]
   17296:	2b1c      	cmp	r3, #28
   17298:	d161      	bne.n	1735e <CC_PalTrngParamGet+0xd2>
   1729a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1729e:	4a3b      	ldr	r2, [pc, #236]	; (1738c <CC_PalTrngParamGet+0x100>)
   172a0:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   172a4:	4291      	cmp	r1, r2
   172a6:	d05c      	beq.n	17362 <CC_PalTrngParamGet+0xd6>
   172a8:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   172ac:	3201      	adds	r2, #1
   172ae:	d058      	beq.n	17362 <CC_PalTrngParamGet+0xd6>
   172b0:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   172b4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   172b8:	6002      	str	r2, [r0, #0]
   172ba:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   172be:	4a34      	ldr	r2, [pc, #208]	; (17390 <CC_PalTrngParamGet+0x104>)
   172c0:	4291      	cmp	r1, r2
   172c2:	d060      	beq.n	17386 <CC_PalTrngParamGet+0xfa>
   172c4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   172c8:	3201      	adds	r2, #1
   172ca:	d05c      	beq.n	17386 <CC_PalTrngParamGet+0xfa>
   172cc:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   172d0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   172d4:	6042      	str	r2, [r0, #4]
   172d6:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   172da:	f512 7f94 	cmn.w	r2, #296	; 0x128
   172de:	d04f      	beq.n	17380 <CC_PalTrngParamGet+0xf4>
   172e0:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   172e4:	3201      	adds	r2, #1
   172e6:	d04b      	beq.n	17380 <CC_PalTrngParamGet+0xf4>
   172e8:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   172ec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   172f0:	6082      	str	r2, [r0, #8]
   172f2:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   172f6:	4a27      	ldr	r2, [pc, #156]	; (17394 <CC_PalTrngParamGet+0x108>)
   172f8:	4291      	cmp	r1, r2
   172fa:	d03e      	beq.n	1737a <CC_PalTrngParamGet+0xee>
   172fc:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   17300:	3201      	adds	r2, #1
   17302:	d03a      	beq.n	1737a <CC_PalTrngParamGet+0xee>
   17304:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   17308:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1730c:	60c2      	str	r2, [r0, #12]
   1730e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   17312:	3270      	adds	r2, #112	; 0x70
   17314:	d02f      	beq.n	17376 <CC_PalTrngParamGet+0xea>
   17316:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1731a:	3201      	adds	r2, #1
   1731c:	d02b      	beq.n	17376 <CC_PalTrngParamGet+0xea>
   1731e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   17322:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   17326:	6102      	str	r2, [r0, #16]
   17328:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1732c:	32af      	adds	r2, #175	; 0xaf
   1732e:	d020      	beq.n	17372 <CC_PalTrngParamGet+0xe6>
   17330:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   17334:	3201      	adds	r2, #1
   17336:	d01c      	beq.n	17372 <CC_PalTrngParamGet+0xe6>
   17338:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1733c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   17340:	6142      	str	r2, [r0, #20]
   17342:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   17346:	4a14      	ldr	r2, [pc, #80]	; (17398 <CC_PalTrngParamGet+0x10c>)
   17348:	4291      	cmp	r1, r2
   1734a:	d00d      	beq.n	17368 <CC_PalTrngParamGet+0xdc>
   1734c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   17350:	3201      	adds	r2, #1
   17352:	d009      	beq.n	17368 <CC_PalTrngParamGet+0xdc>
   17354:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   17358:	6183      	str	r3, [r0, #24]
   1735a:	2000      	movs	r0, #0
   1735c:	4770      	bx	lr
   1735e:	2001      	movs	r0, #1
   17360:	4770      	bx	lr
   17362:	f640 02fc 	movw	r2, #2300	; 0x8fc
   17366:	e7a5      	b.n	172b4 <CC_PalTrngParamGet+0x28>
   17368:	f240 3337 	movw	r3, #823	; 0x337
   1736c:	6183      	str	r3, [r0, #24]
   1736e:	2000      	movs	r0, #0
   17370:	4770      	bx	lr
   17372:	2251      	movs	r2, #81	; 0x51
   17374:	e7e2      	b.n	1733c <CC_PalTrngParamGet+0xb0>
   17376:	2290      	movs	r2, #144	; 0x90
   17378:	e7d3      	b.n	17322 <CC_PalTrngParamGet+0x96>
   1737a:	f642 1204 	movw	r2, #10500	; 0x2904
   1737e:	e7c3      	b.n	17308 <CC_PalTrngParamGet+0x7c>
   17380:	f640 62d8 	movw	r2, #3800	; 0xed8
   17384:	e7b2      	b.n	172ec <CC_PalTrngParamGet+0x60>
   17386:	f242 02d0 	movw	r2, #8400	; 0x20d0
   1738a:	e7a1      	b.n	172d0 <CC_PalTrngParamGet+0x44>
   1738c:	fffff8fc 	.word	0xfffff8fc
   17390:	ffff20d0 	.word	0xffff20d0
   17394:	ffff2904 	.word	0xffff2904
   17398:	fffff337 	.word	0xfffff337

0001739c <LLF_RND_WaitRngInterrupt>:
   1739c:	4601      	mov	r1, r0
   1739e:	b508      	push	{r3, lr}
   173a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   173a4:	f7fe fdfe 	bl	15fa4 <CC_HalWaitInterruptRND>
   173a8:	2300      	movs	r3, #0
   173aa:	4902      	ldr	r1, [pc, #8]	; (173b4 <LLF_RND_WaitRngInterrupt+0x18>)
   173ac:	4a02      	ldr	r2, [pc, #8]	; (173b8 <LLF_RND_WaitRngInterrupt+0x1c>)
   173ae:	600b      	str	r3, [r1, #0]
   173b0:	6013      	str	r3, [r2, #0]
   173b2:	bd08      	pop	{r3, pc}
   173b4:	508411c8 	.word	0x508411c8
   173b8:	5084112c 	.word	0x5084112c

000173bc <LLF_RND_GetRoscSampleCnt>:
   173bc:	3801      	subs	r0, #1
   173be:	2807      	cmp	r0, #7
   173c0:	d805      	bhi.n	173ce <LLF_RND_GetRoscSampleCnt+0x12>
   173c2:	e8df f000 	tbb	[pc, r0]
   173c6:	0e0a      	.short	0x0e0a
   173c8:	04041204 	.word	0x04041204
   173cc:	0604      	.short	0x0604
   173ce:	4809      	ldr	r0, [pc, #36]	; (173f4 <LLF_RND_GetRoscSampleCnt+0x38>)
   173d0:	4770      	bx	lr
   173d2:	68cb      	ldr	r3, [r1, #12]
   173d4:	2000      	movs	r0, #0
   173d6:	624b      	str	r3, [r1, #36]	; 0x24
   173d8:	4770      	bx	lr
   173da:	680b      	ldr	r3, [r1, #0]
   173dc:	2000      	movs	r0, #0
   173de:	624b      	str	r3, [r1, #36]	; 0x24
   173e0:	4770      	bx	lr
   173e2:	684b      	ldr	r3, [r1, #4]
   173e4:	2000      	movs	r0, #0
   173e6:	624b      	str	r3, [r1, #36]	; 0x24
   173e8:	4770      	bx	lr
   173ea:	688b      	ldr	r3, [r1, #8]
   173ec:	2000      	movs	r0, #0
   173ee:	624b      	str	r3, [r1, #36]	; 0x24
   173f0:	4770      	bx	lr
   173f2:	bf00      	nop
   173f4:	00f10c31 	.word	0x00f10c31

000173f8 <LLF_RND_GetFastestRosc>:
   173f8:	680b      	ldr	r3, [r1, #0]
   173fa:	e002      	b.n	17402 <LLF_RND_GetFastestRosc+0xa>
   173fc:	2b08      	cmp	r3, #8
   173fe:	600b      	str	r3, [r1, #0]
   17400:	d806      	bhi.n	17410 <LLF_RND_GetFastestRosc+0x18>
   17402:	6a02      	ldr	r2, [r0, #32]
   17404:	4213      	tst	r3, r2
   17406:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1740a:	d0f7      	beq.n	173fc <LLF_RND_GetFastestRosc+0x4>
   1740c:	2000      	movs	r0, #0
   1740e:	4770      	bx	lr
   17410:	4800      	ldr	r0, [pc, #0]	; (17414 <LLF_RND_GetFastestRosc+0x1c>)
   17412:	4770      	bx	lr
   17414:	00f10c31 	.word	0x00f10c31

00017418 <LLF_RND_TurnOffTrng>:
   17418:	2300      	movs	r3, #0
   1741a:	4904      	ldr	r1, [pc, #16]	; (1742c <LLF_RND_TurnOffTrng+0x14>)
   1741c:	4a04      	ldr	r2, [pc, #16]	; (17430 <LLF_RND_TurnOffTrng+0x18>)
   1741e:	600b      	str	r3, [r1, #0]
   17420:	f44f 6080 	mov.w	r0, #1024	; 0x400
   17424:	6013      	str	r3, [r2, #0]
   17426:	f7fe bda3 	b.w	15f70 <CC_HalClearInterruptBit>
   1742a:	bf00      	nop
   1742c:	5084112c 	.word	0x5084112c
   17430:	508411c4 	.word	0x508411c4

00017434 <SetDataBuffersInfo>:
   17434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17438:	2600      	movs	r6, #0
   1743a:	b082      	sub	sp, #8
   1743c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   17440:	f88d 6007 	strb.w	r6, [sp, #7]
   17444:	9e09      	ldr	r6, [sp, #36]	; 0x24
   17446:	d327      	bcc.n	17498 <SetDataBuffersInfo+0x64>
   17448:	460c      	mov	r4, r1
   1744a:	4404      	add	r4, r0
   1744c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   17450:	4605      	mov	r5, r0
   17452:	d821      	bhi.n	17498 <SetDataBuffersInfo+0x64>
   17454:	4617      	mov	r7, r2
   17456:	4698      	mov	r8, r3
   17458:	2201      	movs	r2, #1
   1745a:	f10d 0307 	add.w	r3, sp, #7
   1745e:	f000 fa0f 	bl	17880 <CC_PalDataBufferAttrGet>
   17462:	4604      	mov	r4, r0
   17464:	b9c0      	cbnz	r0, 17498 <SetDataBuffersInfo+0x64>
   17466:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1746a:	603d      	str	r5, [r7, #0]
   1746c:	713b      	strb	r3, [r7, #4]
   1746e:	b1ae      	cbz	r6, 1749c <SetDataBuffersInfo+0x68>
   17470:	f1b8 0f00 	cmp.w	r8, #0
   17474:	d009      	beq.n	1748a <SetDataBuffersInfo+0x56>
   17476:	4602      	mov	r2, r0
   17478:	9908      	ldr	r1, [sp, #32]
   1747a:	4640      	mov	r0, r8
   1747c:	f10d 0307 	add.w	r3, sp, #7
   17480:	f000 f9fe 	bl	17880 <CC_PalDataBufferAttrGet>
   17484:	b940      	cbnz	r0, 17498 <SetDataBuffersInfo+0x64>
   17486:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1748a:	4620      	mov	r0, r4
   1748c:	f8c6 8000 	str.w	r8, [r6]
   17490:	7133      	strb	r3, [r6, #4]
   17492:	b002      	add	sp, #8
   17494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17498:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1749c:	4620      	mov	r0, r4
   1749e:	b002      	add	sp, #8
   174a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000174a4 <InitHashDrv>:
   174a4:	b1e8      	cbz	r0, 174e2 <InitHashDrv+0x3e>
   174a6:	b510      	push	{r4, lr}
   174a8:	6804      	ldr	r4, [r0, #0]
   174aa:	2c01      	cmp	r4, #1
   174ac:	d004      	beq.n	174b8 <InitHashDrv+0x14>
   174ae:	2c02      	cmp	r4, #2
   174b0:	d010      	beq.n	174d4 <InitHashDrv+0x30>
   174b2:	b144      	cbz	r4, 174c6 <InitHashDrv+0x22>
   174b4:	480c      	ldr	r0, [pc, #48]	; (174e8 <InitHashDrv+0x44>)
   174b6:	bd10      	pop	{r4, pc}
   174b8:	2220      	movs	r2, #32
   174ba:	490c      	ldr	r1, [pc, #48]	; (174ec <InitHashDrv+0x48>)
   174bc:	3008      	adds	r0, #8
   174be:	f7ff fedd 	bl	1727c <CC_PalMemCopyPlat>
   174c2:	2000      	movs	r0, #0
   174c4:	bd10      	pop	{r4, pc}
   174c6:	2214      	movs	r2, #20
   174c8:	4909      	ldr	r1, [pc, #36]	; (174f0 <InitHashDrv+0x4c>)
   174ca:	3008      	adds	r0, #8
   174cc:	f7ff fed6 	bl	1727c <CC_PalMemCopyPlat>
   174d0:	4620      	mov	r0, r4
   174d2:	bd10      	pop	{r4, pc}
   174d4:	2220      	movs	r2, #32
   174d6:	4907      	ldr	r1, [pc, #28]	; (174f4 <InitHashDrv+0x50>)
   174d8:	3008      	adds	r0, #8
   174da:	f7ff fecf 	bl	1727c <CC_PalMemCopyPlat>
   174de:	2000      	movs	r0, #0
   174e0:	bd10      	pop	{r4, pc}
   174e2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   174e6:	4770      	bx	lr
   174e8:	00f30001 	.word	0x00f30001
   174ec:	00019140 	.word	0x00019140
   174f0:	0001910c 	.word	0x0001910c
   174f4:	00019120 	.word	0x00019120

000174f8 <ProcessHashDrv>:
   174f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174fc:	2900      	cmp	r1, #0
   174fe:	f000 80ef 	beq.w	176e0 <ProcessHashDrv+0x1e8>
   17502:	4604      	mov	r4, r0
   17504:	2800      	cmp	r0, #0
   17506:	f000 80ef 	beq.w	176e8 <ProcessHashDrv+0x1f0>
   1750a:	6803      	ldr	r3, [r0, #0]
   1750c:	4617      	mov	r7, r2
   1750e:	460e      	mov	r6, r1
   17510:	2b00      	cmp	r3, #0
   17512:	f000 80b9 	beq.w	17688 <ProcessHashDrv+0x190>
   17516:	3b01      	subs	r3, #1
   17518:	2b01      	cmp	r3, #1
   1751a:	f200 80cd 	bhi.w	176b8 <ProcessHashDrv+0x1c0>
   1751e:	f04f 31ff 	mov.w	r1, #4294967295
   17522:	4873      	ldr	r0, [pc, #460]	; (176f0 <ProcessHashDrv+0x1f8>)
   17524:	f04f 0802 	mov.w	r8, #2
   17528:	f7fe fdc8 	bl	160bc <CC_PalMutexLock>
   1752c:	2800      	cmp	r0, #0
   1752e:	f040 80b5 	bne.w	1769c <ProcessHashDrv+0x1a4>
   17532:	2000      	movs	r0, #0
   17534:	f7fe fdf2 	bl	1611c <CC_PalPowerSaveModeSelect>
   17538:	4605      	mov	r5, r0
   1753a:	2800      	cmp	r0, #0
   1753c:	f040 80b8 	bne.w	176b0 <ProcessHashDrv+0x1b8>
   17540:	4a6c      	ldr	r2, [pc, #432]	; (176f4 <ProcessHashDrv+0x1fc>)
   17542:	6813      	ldr	r3, [r2, #0]
   17544:	2b00      	cmp	r3, #0
   17546:	d1fc      	bne.n	17542 <ProcessHashDrv+0x4a>
   17548:	486b      	ldr	r0, [pc, #428]	; (176f8 <ProcessHashDrv+0x200>)
   1754a:	6803      	ldr	r3, [r0, #0]
   1754c:	2b00      	cmp	r3, #0
   1754e:	d1fc      	bne.n	1754a <ProcessHashDrv+0x52>
   17550:	f04f 30ff 	mov.w	r0, #4294967295
   17554:	f7fe fd0c 	bl	15f70 <CC_HalClearInterruptBit>
   17558:	4b68      	ldr	r3, [pc, #416]	; (176fc <ProcessHashDrv+0x204>)
   1755a:	6818      	ldr	r0, [r3, #0]
   1755c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   17560:	f7fe fd14 	bl	15f8c <CC_HalMaskInterrupt>
   17564:	2301      	movs	r3, #1
   17566:	2007      	movs	r0, #7
   17568:	4a65      	ldr	r2, [pc, #404]	; (17700 <ProcessHashDrv+0x208>)
   1756a:	4966      	ldr	r1, [pc, #408]	; (17704 <ProcessHashDrv+0x20c>)
   1756c:	6013      	str	r3, [r2, #0]
   1756e:	6008      	str	r0, [r1, #0]
   17570:	f842 3c54 	str.w	r3, [r2, #-84]
   17574:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   17576:	4b64      	ldr	r3, [pc, #400]	; (17708 <ProcessHashDrv+0x210>)
   17578:	3a48      	subs	r2, #72	; 0x48
   1757a:	6019      	str	r1, [r3, #0]
   1757c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1757e:	6011      	str	r1, [r2, #0]
   17580:	f843 8c0c 	str.w	r8, [r3, #-12]
   17584:	6823      	ldr	r3, [r4, #0]
   17586:	b163      	cbz	r3, 175a2 <ProcessHashDrv+0xaa>
   17588:	3b01      	subs	r3, #1
   1758a:	2b01      	cmp	r3, #1
   1758c:	d818      	bhi.n	175c0 <ProcessHashDrv+0xc8>
   1758e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   17590:	4b5e      	ldr	r3, [pc, #376]	; (1770c <ProcessHashDrv+0x214>)
   17592:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
   17596:	6019      	str	r1, [r3, #0]
   17598:	6a21      	ldr	r1, [r4, #32]
   1759a:	6011      	str	r1, [r2, #0]
   1759c:	69e2      	ldr	r2, [r4, #28]
   1759e:	f843 2c08 	str.w	r2, [r3, #-8]
   175a2:	69a1      	ldr	r1, [r4, #24]
   175a4:	4b5a      	ldr	r3, [pc, #360]	; (17710 <ProcessHashDrv+0x218>)
   175a6:	4a5b      	ldr	r2, [pc, #364]	; (17714 <ProcessHashDrv+0x21c>)
   175a8:	6019      	str	r1, [r3, #0]
   175aa:	6961      	ldr	r1, [r4, #20]
   175ac:	6011      	str	r1, [r2, #0]
   175ae:	6921      	ldr	r1, [r4, #16]
   175b0:	f843 1c08 	str.w	r1, [r3, #-8]
   175b4:	68e1      	ldr	r1, [r4, #12]
   175b6:	f842 1c08 	str.w	r1, [r2, #-8]
   175ba:	68a2      	ldr	r2, [r4, #8]
   175bc:	f843 2c10 	str.w	r2, [r3, #-16]
   175c0:	4a55      	ldr	r2, [pc, #340]	; (17718 <ProcessHashDrv+0x220>)
   175c2:	6813      	ldr	r3, [r2, #0]
   175c4:	2b00      	cmp	r3, #0
   175c6:	d1fc      	bne.n	175c2 <ProcessHashDrv+0xca>
   175c8:	2f00      	cmp	r7, #0
   175ca:	d059      	beq.n	17680 <ProcessHashDrv+0x188>
   175cc:	6863      	ldr	r3, [r4, #4]
   175ce:	2040      	movs	r0, #64	; 0x40
   175d0:	2b01      	cmp	r3, #1
   175d2:	bf04      	itt	eq
   175d4:	4a51      	ldreq	r2, [pc, #324]	; (1771c <ProcessHashDrv+0x224>)
   175d6:	6013      	streq	r3, [r2, #0]
   175d8:	6831      	ldr	r1, [r6, #0]
   175da:	4a51      	ldr	r2, [pc, #324]	; (17720 <ProcessHashDrv+0x228>)
   175dc:	4b51      	ldr	r3, [pc, #324]	; (17724 <ProcessHashDrv+0x22c>)
   175de:	6011      	str	r1, [r2, #0]
   175e0:	601f      	str	r7, [r3, #0]
   175e2:	f7fe fcd9 	bl	15f98 <CC_HalWaitInterrupt>
   175e6:	4605      	mov	r5, r0
   175e8:	4a4b      	ldr	r2, [pc, #300]	; (17718 <ProcessHashDrv+0x220>)
   175ea:	6813      	ldr	r3, [r2, #0]
   175ec:	2b00      	cmp	r3, #0
   175ee:	d1fc      	bne.n	175ea <ProcessHashDrv+0xf2>
   175f0:	4a41      	ldr	r2, [pc, #260]	; (176f8 <ProcessHashDrv+0x200>)
   175f2:	6813      	ldr	r3, [r2, #0]
   175f4:	2b00      	cmp	r3, #0
   175f6:	d1fc      	bne.n	175f2 <ProcessHashDrv+0xfa>
   175f8:	6823      	ldr	r3, [r4, #0]
   175fa:	b15b      	cbz	r3, 17614 <ProcessHashDrv+0x11c>
   175fc:	3b01      	subs	r3, #1
   175fe:	2b01      	cmp	r3, #1
   17600:	d816      	bhi.n	17630 <ProcessHashDrv+0x138>
   17602:	4b42      	ldr	r3, [pc, #264]	; (1770c <ProcessHashDrv+0x214>)
   17604:	4a48      	ldr	r2, [pc, #288]	; (17728 <ProcessHashDrv+0x230>)
   17606:	6819      	ldr	r1, [r3, #0]
   17608:	3b08      	subs	r3, #8
   1760a:	6261      	str	r1, [r4, #36]	; 0x24
   1760c:	6812      	ldr	r2, [r2, #0]
   1760e:	6222      	str	r2, [r4, #32]
   17610:	681b      	ldr	r3, [r3, #0]
   17612:	61e3      	str	r3, [r4, #28]
   17614:	4b3e      	ldr	r3, [pc, #248]	; (17710 <ProcessHashDrv+0x218>)
   17616:	4a3f      	ldr	r2, [pc, #252]	; (17714 <ProcessHashDrv+0x21c>)
   17618:	6819      	ldr	r1, [r3, #0]
   1761a:	3a08      	subs	r2, #8
   1761c:	61a1      	str	r1, [r4, #24]
   1761e:	6891      	ldr	r1, [r2, #8]
   17620:	3b10      	subs	r3, #16
   17622:	6161      	str	r1, [r4, #20]
   17624:	6899      	ldr	r1, [r3, #8]
   17626:	6121      	str	r1, [r4, #16]
   17628:	6812      	ldr	r2, [r2, #0]
   1762a:	60e2      	str	r2, [r4, #12]
   1762c:	681b      	ldr	r3, [r3, #0]
   1762e:	60a3      	str	r3, [r4, #8]
   17630:	2101      	movs	r1, #1
   17632:	2300      	movs	r3, #0
   17634:	4834      	ldr	r0, [pc, #208]	; (17708 <ProcessHashDrv+0x210>)
   17636:	4a3d      	ldr	r2, [pc, #244]	; (1772c <ProcessHashDrv+0x234>)
   17638:	6800      	ldr	r0, [r0, #0]
   1763a:	64a0      	str	r0, [r4, #72]	; 0x48
   1763c:	6810      	ldr	r0, [r2, #0]
   1763e:	64e0      	str	r0, [r4, #76]	; 0x4c
   17640:	f842 1c0c 	str.w	r1, [r2, #-12]
   17644:	4835      	ldr	r0, [pc, #212]	; (1771c <ProcessHashDrv+0x224>)
   17646:	493a      	ldr	r1, [pc, #232]	; (17730 <ProcessHashDrv+0x238>)
   17648:	6003      	str	r3, [r0, #0]
   1764a:	f502 72a0 	add.w	r2, r2, #320	; 0x140
   1764e:	600b      	str	r3, [r1, #0]
   17650:	6813      	ldr	r3, [r2, #0]
   17652:	2b00      	cmp	r3, #0
   17654:	d1fc      	bne.n	17650 <ProcessHashDrv+0x158>
   17656:	4a2a      	ldr	r2, [pc, #168]	; (17700 <ProcessHashDrv+0x208>)
   17658:	6013      	str	r3, [r2, #0]
   1765a:	2d00      	cmp	r5, #0
   1765c:	d13a      	bne.n	176d4 <ProcessHashDrv+0x1dc>
   1765e:	4b27      	ldr	r3, [pc, #156]	; (176fc <ProcessHashDrv+0x204>)
   17660:	6818      	ldr	r0, [r3, #0]
   17662:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   17666:	f7fe fc91 	bl	15f8c <CC_HalMaskInterrupt>
   1766a:	2001      	movs	r0, #1
   1766c:	f7fe fd56 	bl	1611c <CC_PalPowerSaveModeSelect>
   17670:	bb60      	cbnz	r0, 176cc <ProcessHashDrv+0x1d4>
   17672:	481f      	ldr	r0, [pc, #124]	; (176f0 <ProcessHashDrv+0x1f8>)
   17674:	f7fe fd2a 	bl	160cc <CC_PalMutexUnlock>
   17678:	bb10      	cbnz	r0, 176c0 <ProcessHashDrv+0x1c8>
   1767a:	4628      	mov	r0, r5
   1767c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17680:	2204      	movs	r2, #4
   17682:	4b2b      	ldr	r3, [pc, #172]	; (17730 <ProcessHashDrv+0x238>)
   17684:	601a      	str	r2, [r3, #0]
   17686:	e7af      	b.n	175e8 <ProcessHashDrv+0xf0>
   17688:	f04f 31ff 	mov.w	r1, #4294967295
   1768c:	4818      	ldr	r0, [pc, #96]	; (176f0 <ProcessHashDrv+0x1f8>)
   1768e:	f04f 0801 	mov.w	r8, #1
   17692:	f7fe fd13 	bl	160bc <CC_PalMutexLock>
   17696:	2800      	cmp	r0, #0
   17698:	f43f af4b 	beq.w	17532 <ProcessHashDrv+0x3a>
   1769c:	4825      	ldr	r0, [pc, #148]	; (17734 <ProcessHashDrv+0x23c>)
   1769e:	f7fe f97b 	bl	15998 <CC_PalAbort>
   176a2:	2000      	movs	r0, #0
   176a4:	f7fe fd3a 	bl	1611c <CC_PalPowerSaveModeSelect>
   176a8:	4605      	mov	r5, r0
   176aa:	2800      	cmp	r0, #0
   176ac:	f43f af48 	beq.w	17540 <ProcessHashDrv+0x48>
   176b0:	4821      	ldr	r0, [pc, #132]	; (17738 <ProcessHashDrv+0x240>)
   176b2:	f7fe f971 	bl	15998 <CC_PalAbort>
   176b6:	e743      	b.n	17540 <ProcessHashDrv+0x48>
   176b8:	4d20      	ldr	r5, [pc, #128]	; (1773c <ProcessHashDrv+0x244>)
   176ba:	4628      	mov	r0, r5
   176bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176c0:	481f      	ldr	r0, [pc, #124]	; (17740 <ProcessHashDrv+0x248>)
   176c2:	f7fe f969 	bl	15998 <CC_PalAbort>
   176c6:	4628      	mov	r0, r5
   176c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176cc:	481d      	ldr	r0, [pc, #116]	; (17744 <ProcessHashDrv+0x24c>)
   176ce:	f7fe f963 	bl	15998 <CC_PalAbort>
   176d2:	e7ce      	b.n	17672 <ProcessHashDrv+0x17a>
   176d4:	2110      	movs	r1, #16
   176d6:	f104 0008 	add.w	r0, r4, #8
   176da:	f7ff fdd3 	bl	17284 <CC_PalMemSetZeroPlat>
   176de:	e7be      	b.n	1765e <ProcessHashDrv+0x166>
   176e0:	4d19      	ldr	r5, [pc, #100]	; (17748 <ProcessHashDrv+0x250>)
   176e2:	4628      	mov	r0, r5
   176e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176e8:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   176ec:	e7c5      	b.n	1767a <ProcessHashDrv+0x182>
   176ee:	bf00      	nop
   176f0:	200000bc 	.word	0x200000bc
   176f4:	5084191c 	.word	0x5084191c
   176f8:	50841c20 	.word	0x50841c20
   176fc:	50841a04 	.word	0x50841a04
   17700:	50841818 	.word	0x50841818
   17704:	50841900 	.word	0x50841900
   17708:	508417cc 	.word	0x508417cc
   1770c:	5084165c 	.word	0x5084165c
   17710:	50841650 	.word	0x50841650
   17714:	5084164c 	.word	0x5084164c
   17718:	50841910 	.word	0x50841910
   1771c:	50841684 	.word	0x50841684
   17720:	50841c28 	.word	0x50841c28
   17724:	50841c2c 	.word	0x50841c2c
   17728:	50841658 	.word	0x50841658
   1772c:	508417d0 	.word	0x508417d0
   17730:	508417c8 	.word	0x508417c8
   17734:	00019054 	.word	0x00019054
   17738:	0001906c 	.word	0x0001906c
   1773c:	00f30001 	.word	0x00f30001
   17740:	000190ac 	.word	0x000190ac
   17744:	0001908c 	.word	0x0001908c
   17748:	00f30003 	.word	0x00f30003

0001774c <FinishHashDrv>:
   1774c:	2800      	cmp	r0, #0
   1774e:	d03a      	beq.n	177c6 <FinishHashDrv+0x7a>
   17750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17754:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   17758:	fa92 f882 	rev.w	r8, r2
   1775c:	fa93 fe83 	rev.w	lr, r3
   17760:	6a02      	ldr	r2, [r0, #32]
   17762:	6a43      	ldr	r3, [r0, #36]	; 0x24
   17764:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
   17768:	ba12      	rev	r2, r2
   1776a:	ba24      	rev	r4, r4
   1776c:	ba1b      	rev	r3, r3
   1776e:	6104      	str	r4, [r0, #16]
   17770:	6202      	str	r2, [r0, #32]
   17772:	6a84      	ldr	r4, [r0, #40]	; 0x28
   17774:	6b82      	ldr	r2, [r0, #56]	; 0x38
   17776:	6243      	str	r3, [r0, #36]	; 0x24
   17778:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1777a:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
   1777e:	ba09      	rev	r1, r1
   17780:	ba36      	rev	r6, r6
   17782:	ba2d      	rev	r5, r5
   17784:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   17786:	6086      	str	r6, [r0, #8]
   17788:	60c5      	str	r5, [r0, #12]
   1778a:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1778c:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1778e:	6141      	str	r1, [r0, #20]
   17790:	fa94 fc84 	rev.w	ip, r4
   17794:	ba19      	rev	r1, r3
   17796:	ba14      	rev	r4, r2
   17798:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1779a:	6c02      	ldr	r2, [r0, #64]	; 0x40
   1779c:	ba3f      	rev	r7, r7
   1779e:	ba36      	rev	r6, r6
   177a0:	ba2d      	rev	r5, r5
   177a2:	ba12      	rev	r2, r2
   177a4:	ba1b      	rev	r3, r3
   177a6:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   177aa:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   177ae:	f8c0 8018 	str.w	r8, [r0, #24]
   177b2:	f8c0 e01c 	str.w	lr, [r0, #28]
   177b6:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   177ba:	62c7      	str	r7, [r0, #44]	; 0x2c
   177bc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   177c0:	2000      	movs	r0, #0
   177c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   177c6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   177ca:	4770      	bx	lr

000177cc <cc_mbedtls_aes_init>:
   177cc:	b510      	push	{r4, lr}
   177ce:	4604      	mov	r4, r0
   177d0:	b130      	cbz	r0, 177e0 <cc_mbedtls_aes_init+0x14>
   177d2:	2200      	movs	r2, #0
   177d4:	2301      	movs	r3, #1
   177d6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   177da:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   177de:	bd10      	pop	{r4, pc}
   177e0:	4801      	ldr	r0, [pc, #4]	; (177e8 <cc_mbedtls_aes_init+0x1c>)
   177e2:	f7fe f8d9 	bl	15998 <CC_PalAbort>
   177e6:	e7f4      	b.n	177d2 <cc_mbedtls_aes_init+0x6>
   177e8:	00019160 	.word	0x00019160

000177ec <cc_mbedtls_aes_free>:
   177ec:	b118      	cbz	r0, 177f6 <cc_mbedtls_aes_free+0xa>
   177ee:	2274      	movs	r2, #116	; 0x74
   177f0:	2100      	movs	r1, #0
   177f2:	f7ff bd45 	b.w	17280 <CC_PalMemSetPlat>
   177f6:	4770      	bx	lr

000177f8 <cc_mbedtls_aes_setkey_enc>:
   177f8:	b188      	cbz	r0, 1781e <cc_mbedtls_aes_setkey_enc+0x26>
   177fa:	b199      	cbz	r1, 17824 <cc_mbedtls_aes_setkey_enc+0x2c>
   177fc:	b510      	push	{r4, lr}
   177fe:	2400      	movs	r4, #0
   17800:	2a80      	cmp	r2, #128	; 0x80
   17802:	6384      	str	r4, [r0, #56]	; 0x38
   17804:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   17808:	d106      	bne.n	17818 <cc_mbedtls_aes_setkey_enc+0x20>
   1780a:	6304      	str	r4, [r0, #48]	; 0x30
   1780c:	2210      	movs	r2, #16
   1780e:	3010      	adds	r0, #16
   17810:	f7ff fd34 	bl	1727c <CC_PalMemCopyPlat>
   17814:	4620      	mov	r0, r4
   17816:	bd10      	pop	{r4, pc}
   17818:	f06f 001f 	mvn.w	r0, #31
   1781c:	bd10      	pop	{r4, pc}
   1781e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   17822:	4770      	bx	lr
   17824:	f06f 001f 	mvn.w	r0, #31
   17828:	4770      	bx	lr
   1782a:	bf00      	nop

0001782c <cc_mbedtls_aes_crypt_ecb>:
   1782c:	b328      	cbz	r0, 1787a <cc_mbedtls_aes_crypt_ecb+0x4e>
   1782e:	b322      	cbz	r2, 1787a <cc_mbedtls_aes_crypt_ecb+0x4e>
   17830:	b31b      	cbz	r3, 1787a <cc_mbedtls_aes_crypt_ecb+0x4e>
   17832:	2901      	cmp	r1, #1
   17834:	d821      	bhi.n	1787a <cc_mbedtls_aes_crypt_ecb+0x4e>
   17836:	b570      	push	{r4, r5, r6, lr}
   17838:	4604      	mov	r4, r0
   1783a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1783c:	b086      	sub	sp, #24
   1783e:	d017      	beq.n	17870 <cc_mbedtls_aes_crypt_ecb+0x44>
   17840:	2901      	cmp	r1, #1
   17842:	d117      	bne.n	17874 <cc_mbedtls_aes_crypt_ecb+0x48>
   17844:	2510      	movs	r5, #16
   17846:	2100      	movs	r1, #0
   17848:	eb0d 0605 	add.w	r6, sp, r5
   1784c:	6361      	str	r1, [r4, #52]	; 0x34
   1784e:	4610      	mov	r0, r2
   17850:	4629      	mov	r1, r5
   17852:	9500      	str	r5, [sp, #0]
   17854:	aa02      	add	r2, sp, #8
   17856:	9601      	str	r6, [sp, #4]
   17858:	f7ff fdec 	bl	17434 <SetDataBuffersInfo>
   1785c:	b950      	cbnz	r0, 17874 <cc_mbedtls_aes_crypt_ecb+0x48>
   1785e:	462b      	mov	r3, r5
   17860:	4632      	mov	r2, r6
   17862:	4620      	mov	r0, r4
   17864:	a902      	add	r1, sp, #8
   17866:	f000 f8fd 	bl	17a64 <ProcessAesDrv>
   1786a:	b918      	cbnz	r0, 17874 <cc_mbedtls_aes_crypt_ecb+0x48>
   1786c:	b006      	add	sp, #24
   1786e:	bd70      	pop	{r4, r5, r6, pc}
   17870:	2900      	cmp	r1, #0
   17872:	d0e7      	beq.n	17844 <cc_mbedtls_aes_crypt_ecb+0x18>
   17874:	f06f 0021 	mvn.w	r0, #33	; 0x21
   17878:	e7f8      	b.n	1786c <cc_mbedtls_aes_crypt_ecb+0x40>
   1787a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1787e:	4770      	bx	lr

00017880 <CC_PalDataBufferAttrGet>:
   17880:	2000      	movs	r0, #0
   17882:	7018      	strb	r0, [r3, #0]
   17884:	4770      	bx	lr
   17886:	bf00      	nop

00017888 <LoadAesKey>:
   17888:	2800      	cmp	r0, #0
   1788a:	d060      	beq.n	1794e <LoadAesKey+0xc6>
   1788c:	b538      	push	{r3, r4, r5, lr}
   1788e:	4604      	mov	r4, r0
   17890:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   17894:	2802      	cmp	r0, #2
   17896:	d016      	beq.n	178c6 <LoadAesKey+0x3e>
   17898:	2803      	cmp	r0, #3
   1789a:	d03c      	beq.n	17916 <LoadAesKey+0x8e>
   1789c:	2800      	cmp	r0, #0
   1789e:	d02f      	beq.n	17900 <LoadAesKey+0x78>
   178a0:	482c      	ldr	r0, [pc, #176]	; (17954 <LoadAesKey+0xcc>)
   178a2:	4d2d      	ldr	r5, [pc, #180]	; (17958 <LoadAesKey+0xd0>)
   178a4:	682a      	ldr	r2, [r5, #0]
   178a6:	4b2d      	ldr	r3, [pc, #180]	; (1795c <LoadAesKey+0xd4>)
   178a8:	6812      	ldr	r2, [r2, #0]
   178aa:	492d      	ldr	r1, [pc, #180]	; (17960 <LoadAesKey+0xd8>)
   178ac:	601a      	str	r2, [r3, #0]
   178ae:	682b      	ldr	r3, [r5, #0]
   178b0:	4a2c      	ldr	r2, [pc, #176]	; (17964 <LoadAesKey+0xdc>)
   178b2:	685c      	ldr	r4, [r3, #4]
   178b4:	4b2c      	ldr	r3, [pc, #176]	; (17968 <LoadAesKey+0xe0>)
   178b6:	600c      	str	r4, [r1, #0]
   178b8:	6829      	ldr	r1, [r5, #0]
   178ba:	6889      	ldr	r1, [r1, #8]
   178bc:	6011      	str	r1, [r2, #0]
   178be:	682a      	ldr	r2, [r5, #0]
   178c0:	68d2      	ldr	r2, [r2, #12]
   178c2:	601a      	str	r2, [r3, #0]
   178c4:	bd38      	pop	{r3, r4, r5, pc}
   178c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   178c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
   178ca:	f000 fbdd 	bl	18088 <kmu_validate_slot_and_size_no_kdr>
   178ce:	4d22      	ldr	r5, [pc, #136]	; (17958 <LoadAesKey+0xd0>)
   178d0:	2800      	cmp	r0, #0
   178d2:	d1e7      	bne.n	178a4 <LoadAesKey+0x1c>
   178d4:	682a      	ldr	r2, [r5, #0]
   178d6:	4b21      	ldr	r3, [pc, #132]	; (1795c <LoadAesKey+0xd4>)
   178d8:	6810      	ldr	r0, [r2, #0]
   178da:	4921      	ldr	r1, [pc, #132]	; (17960 <LoadAesKey+0xd8>)
   178dc:	6018      	str	r0, [r3, #0]
   178de:	6828      	ldr	r0, [r5, #0]
   178e0:	4a20      	ldr	r2, [pc, #128]	; (17964 <LoadAesKey+0xdc>)
   178e2:	6840      	ldr	r0, [r0, #4]
   178e4:	6008      	str	r0, [r1, #0]
   178e6:	6829      	ldr	r1, [r5, #0]
   178e8:	6889      	ldr	r1, [r1, #8]
   178ea:	6011      	str	r1, [r2, #0]
   178ec:	682a      	ldr	r2, [r5, #0]
   178ee:	68d2      	ldr	r2, [r2, #12]
   178f0:	60da      	str	r2, [r3, #12]
   178f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   178f4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   178f6:	f000 fc35 	bl	18164 <kmu_load_key_aes>
   178fa:	2800      	cmp	r0, #0
   178fc:	d025      	beq.n	1794a <LoadAesKey+0xc2>
   178fe:	e7d1      	b.n	178a4 <LoadAesKey+0x1c>
   17900:	6921      	ldr	r1, [r4, #16]
   17902:	4a16      	ldr	r2, [pc, #88]	; (1795c <LoadAesKey+0xd4>)
   17904:	4b16      	ldr	r3, [pc, #88]	; (17960 <LoadAesKey+0xd8>)
   17906:	6011      	str	r1, [r2, #0]
   17908:	6961      	ldr	r1, [r4, #20]
   1790a:	6019      	str	r1, [r3, #0]
   1790c:	69a1      	ldr	r1, [r4, #24]
   1790e:	6091      	str	r1, [r2, #8]
   17910:	69e2      	ldr	r2, [r4, #28]
   17912:	609a      	str	r2, [r3, #8]
   17914:	bd38      	pop	{r3, r4, r5, pc}
   17916:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17918:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1791a:	f000 fbf3 	bl	18104 <kmu_validate_kdr_slot_and_size>
   1791e:	4d0e      	ldr	r5, [pc, #56]	; (17958 <LoadAesKey+0xd0>)
   17920:	2800      	cmp	r0, #0
   17922:	d1bf      	bne.n	178a4 <LoadAesKey+0x1c>
   17924:	682a      	ldr	r2, [r5, #0]
   17926:	4b0d      	ldr	r3, [pc, #52]	; (1795c <LoadAesKey+0xd4>)
   17928:	6810      	ldr	r0, [r2, #0]
   1792a:	490d      	ldr	r1, [pc, #52]	; (17960 <LoadAesKey+0xd8>)
   1792c:	6018      	str	r0, [r3, #0]
   1792e:	6828      	ldr	r0, [r5, #0]
   17930:	4a0c      	ldr	r2, [pc, #48]	; (17964 <LoadAesKey+0xdc>)
   17932:	6840      	ldr	r0, [r0, #4]
   17934:	6008      	str	r0, [r1, #0]
   17936:	6829      	ldr	r1, [r5, #0]
   17938:	6889      	ldr	r1, [r1, #8]
   1793a:	6011      	str	r1, [r2, #0]
   1793c:	682a      	ldr	r2, [r5, #0]
   1793e:	68d2      	ldr	r2, [r2, #12]
   17940:	60da      	str	r2, [r3, #12]
   17942:	f000 fc03 	bl	1814c <kmu_use_kdr_key>
   17946:	2800      	cmp	r0, #0
   17948:	d1ac      	bne.n	178a4 <LoadAesKey+0x1c>
   1794a:	2000      	movs	r0, #0
   1794c:	bd38      	pop	{r3, r4, r5, pc}
   1794e:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   17952:	4770      	bx	lr
   17954:	00f10009 	.word	0x00f10009
   17958:	200000ac 	.word	0x200000ac
   1795c:	50841400 	.word	0x50841400
   17960:	50841404 	.word	0x50841404
   17964:	50841408 	.word	0x50841408
   17968:	5084140c 	.word	0x5084140c

0001796c <InitAes.part.0>:
   1796c:	b510      	push	{r4, lr}
   1796e:	4604      	mov	r4, r0
   17970:	4a31      	ldr	r2, [pc, #196]	; (17a38 <InitAes.part.0+0xcc>)
   17972:	6813      	ldr	r3, [r2, #0]
   17974:	2b00      	cmp	r3, #0
   17976:	d1fc      	bne.n	17972 <InitAes.part.0+0x6>
   17978:	4a30      	ldr	r2, [pc, #192]	; (17a3c <InitAes.part.0+0xd0>)
   1797a:	6813      	ldr	r3, [r2, #0]
   1797c:	2b00      	cmp	r3, #0
   1797e:	d1fc      	bne.n	1797a <InitAes.part.0+0xe>
   17980:	4a2f      	ldr	r2, [pc, #188]	; (17a40 <InitAes.part.0+0xd4>)
   17982:	6813      	ldr	r3, [r2, #0]
   17984:	2b00      	cmp	r3, #0
   17986:	d1fc      	bne.n	17982 <InitAes.part.0+0x16>
   17988:	4a2e      	ldr	r2, [pc, #184]	; (17a44 <InitAes.part.0+0xd8>)
   1798a:	6813      	ldr	r3, [r2, #0]
   1798c:	2b00      	cmp	r3, #0
   1798e:	d1fc      	bne.n	1798a <InitAes.part.0+0x1e>
   17990:	4a2d      	ldr	r2, [pc, #180]	; (17a48 <InitAes.part.0+0xdc>)
   17992:	6813      	ldr	r3, [r2, #0]
   17994:	2b00      	cmp	r3, #0
   17996:	d1fc      	bne.n	17992 <InitAes.part.0+0x26>
   17998:	4a2c      	ldr	r2, [pc, #176]	; (17a4c <InitAes.part.0+0xe0>)
   1799a:	6813      	ldr	r3, [r2, #0]
   1799c:	2b00      	cmp	r3, #0
   1799e:	d1fc      	bne.n	1799a <InitAes.part.0+0x2e>
   179a0:	f04f 30ff 	mov.w	r0, #4294967295
   179a4:	f7fe fae4 	bl	15f70 <CC_HalClearInterruptBit>
   179a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   179aa:	f023 0304 	bic.w	r3, r3, #4
   179ae:	2b03      	cmp	r3, #3
   179b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   179b2:	d036      	beq.n	17a22 <InitAes.part.0+0xb6>
   179b4:	2b01      	cmp	r3, #1
   179b6:	4b26      	ldr	r3, [pc, #152]	; (17a50 <InitAes.part.0+0xe4>)
   179b8:	6818      	ldr	r0, [r3, #0]
   179ba:	bf0c      	ite	eq
   179bc:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   179c0:	f020 0020 	bicne.w	r0, r0, #32
   179c4:	f7fe fae2 	bl	15f8c <CC_HalMaskInterrupt>
   179c8:	2101      	movs	r1, #1
   179ca:	4b22      	ldr	r3, [pc, #136]	; (17a54 <InitAes.part.0+0xe8>)
   179cc:	4a1a      	ldr	r2, [pc, #104]	; (17a38 <InitAes.part.0+0xcc>)
   179ce:	6019      	str	r1, [r3, #0]
   179d0:	6813      	ldr	r3, [r2, #0]
   179d2:	2b00      	cmp	r3, #0
   179d4:	d1fc      	bne.n	179d0 <InitAes.part.0+0x64>
   179d6:	4a19      	ldr	r2, [pc, #100]	; (17a3c <InitAes.part.0+0xd0>)
   179d8:	6813      	ldr	r3, [r2, #0]
   179da:	2b00      	cmp	r3, #0
   179dc:	d1fc      	bne.n	179d8 <InitAes.part.0+0x6c>
   179de:	491e      	ldr	r1, [pc, #120]	; (17a58 <InitAes.part.0+0xec>)
   179e0:	4a15      	ldr	r2, [pc, #84]	; (17a38 <InitAes.part.0+0xcc>)
   179e2:	600b      	str	r3, [r1, #0]
   179e4:	6813      	ldr	r3, [r2, #0]
   179e6:	2b00      	cmp	r3, #0
   179e8:	d1fc      	bne.n	179e4 <InitAes.part.0+0x78>
   179ea:	4a14      	ldr	r2, [pc, #80]	; (17a3c <InitAes.part.0+0xd0>)
   179ec:	6813      	ldr	r3, [r2, #0]
   179ee:	2b00      	cmp	r3, #0
   179f0:	d1fc      	bne.n	179ec <InitAes.part.0+0x80>
   179f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   179f4:	f022 0104 	bic.w	r1, r2, #4
   179f8:	2903      	cmp	r1, #3
   179fa:	bf18      	it	ne
   179fc:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   179fe:	ea4f 0282 	mov.w	r2, r2, lsl #2
   17a02:	bf18      	it	ne
   17a04:	f003 0301 	andne.w	r3, r3, #1
   17a08:	4914      	ldr	r1, [pc, #80]	; (17a5c <InitAes.part.0+0xf0>)
   17a0a:	f002 021c 	and.w	r2, r2, #28
   17a0e:	4313      	orrs	r3, r2
   17a10:	600b      	str	r3, [r1, #0]
   17a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17a14:	2b07      	cmp	r3, #7
   17a16:	d102      	bne.n	17a1e <InitAes.part.0+0xb2>
   17a18:	2201      	movs	r2, #1
   17a1a:	4b11      	ldr	r3, [pc, #68]	; (17a60 <InitAes.part.0+0xf4>)
   17a1c:	601a      	str	r2, [r3, #0]
   17a1e:	2000      	movs	r0, #0
   17a20:	bd10      	pop	{r4, pc}
   17a22:	2b01      	cmp	r3, #1
   17a24:	4b0a      	ldr	r3, [pc, #40]	; (17a50 <InitAes.part.0+0xe4>)
   17a26:	6818      	ldr	r0, [r3, #0]
   17a28:	bf0c      	ite	eq
   17a2a:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   17a2e:	f020 0010 	bicne.w	r0, r0, #16
   17a32:	f7fe faab 	bl	15f8c <CC_HalMaskInterrupt>
   17a36:	e7c7      	b.n	179c8 <InitAes.part.0+0x5c>
   17a38:	50841910 	.word	0x50841910
   17a3c:	50841470 	.word	0x50841470
   17a40:	50841d20 	.word	0x50841d20
   17a44:	50841c20 	.word	0x50841c20
   17a48:	50841d38 	.word	0x50841d38
   17a4c:	50841c38 	.word	0x50841c38
   17a50:	50841a04 	.word	0x50841a04
   17a54:	50841900 	.word	0x50841900
   17a58:	508414bc 	.word	0x508414bc
   17a5c:	508414c0 	.word	0x508414c0
   17a60:	5084147c 	.word	0x5084147c

00017a64 <ProcessAesDrv>:
   17a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a68:	b087      	sub	sp, #28
   17a6a:	2900      	cmp	r1, #0
   17a6c:	f000 80a5 	beq.w	17bba <ProcessAesDrv+0x156>
   17a70:	4616      	mov	r6, r2
   17a72:	2a00      	cmp	r2, #0
   17a74:	f000 80a1 	beq.w	17bba <ProcessAesDrv+0x156>
   17a78:	4604      	mov	r4, r0
   17a7a:	2800      	cmp	r0, #0
   17a7c:	f000 8141 	beq.w	17d02 <ProcessAesDrv+0x29e>
   17a80:	461f      	mov	r7, r3
   17a82:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   17a84:	460d      	mov	r5, r1
   17a86:	2b00      	cmp	r3, #0
   17a88:	d150      	bne.n	17b2c <ProcessAesDrv+0xc8>
   17a8a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   17a8e:	d252      	bcs.n	17b36 <ProcessAesDrv+0xd2>
   17a90:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   17a94:	2b04      	cmp	r3, #4
   17a96:	f000 810b 	beq.w	17cb0 <ProcessAesDrv+0x24c>
   17a9a:	f04f 0800 	mov.w	r8, #0
   17a9e:	f04f 31ff 	mov.w	r1, #4294967295
   17aa2:	48a9      	ldr	r0, [pc, #676]	; (17d48 <ProcessAesDrv+0x2e4>)
   17aa4:	f7fe fb0a 	bl	160bc <CC_PalMutexLock>
   17aa8:	2800      	cmp	r0, #0
   17aaa:	f040 80e0 	bne.w	17c6e <ProcessAesDrv+0x20a>
   17aae:	2000      	movs	r0, #0
   17ab0:	f7fe fb34 	bl	1611c <CC_PalPowerSaveModeSelect>
   17ab4:	2800      	cmp	r0, #0
   17ab6:	f040 80e3 	bne.w	17c80 <ProcessAesDrv+0x21c>
   17aba:	2101      	movs	r1, #1
   17abc:	4ba3      	ldr	r3, [pc, #652]	; (17d4c <ProcessAesDrv+0x2e8>)
   17abe:	4aa4      	ldr	r2, [pc, #656]	; (17d50 <ProcessAesDrv+0x2ec>)
   17ac0:	6019      	str	r1, [r3, #0]
   17ac2:	6813      	ldr	r3, [r2, #0]
   17ac4:	2b00      	cmp	r3, #0
   17ac6:	d1fc      	bne.n	17ac2 <ProcessAesDrv+0x5e>
   17ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17aca:	2b03      	cmp	r3, #3
   17acc:	dc39      	bgt.n	17b42 <ProcessAesDrv+0xde>
   17ace:	2b00      	cmp	r3, #0
   17ad0:	da3a      	bge.n	17b48 <ProcessAesDrv+0xe4>
   17ad2:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 17d9c <ProcessAesDrv+0x338>
   17ad6:	4a9e      	ldr	r2, [pc, #632]	; (17d50 <ProcessAesDrv+0x2ec>)
   17ad8:	6813      	ldr	r3, [r2, #0]
   17ada:	2b00      	cmp	r3, #0
   17adc:	d1fc      	bne.n	17ad8 <ProcessAesDrv+0x74>
   17ade:	f1b8 0f00 	cmp.w	r8, #0
   17ae2:	f040 80dc 	bne.w	17c9e <ProcessAesDrv+0x23a>
   17ae6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17ae8:	f023 0304 	bic.w	r3, r3, #4
   17aec:	2b03      	cmp	r3, #3
   17aee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   17af0:	d058      	beq.n	17ba4 <ProcessAesDrv+0x140>
   17af2:	2b01      	cmp	r3, #1
   17af4:	4b97      	ldr	r3, [pc, #604]	; (17d54 <ProcessAesDrv+0x2f0>)
   17af6:	6818      	ldr	r0, [r3, #0]
   17af8:	bf0c      	ite	eq
   17afa:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   17afe:	f040 0020 	orrne.w	r0, r0, #32
   17b02:	f7fe fa43 	bl	15f8c <CC_HalMaskInterrupt>
   17b06:	2200      	movs	r2, #0
   17b08:	4b90      	ldr	r3, [pc, #576]	; (17d4c <ProcessAesDrv+0x2e8>)
   17b0a:	2001      	movs	r0, #1
   17b0c:	601a      	str	r2, [r3, #0]
   17b0e:	f7fe fb05 	bl	1611c <CC_PalPowerSaveModeSelect>
   17b12:	2800      	cmp	r0, #0
   17b14:	f040 80bf 	bne.w	17c96 <ProcessAesDrv+0x232>
   17b18:	488b      	ldr	r0, [pc, #556]	; (17d48 <ProcessAesDrv+0x2e4>)
   17b1a:	f7fe fad7 	bl	160cc <CC_PalMutexUnlock>
   17b1e:	2800      	cmp	r0, #0
   17b20:	f040 80b2 	bne.w	17c88 <ProcessAesDrv+0x224>
   17b24:	4648      	mov	r0, r9
   17b26:	b007      	add	sp, #28
   17b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b2c:	2b01      	cmp	r3, #1
   17b2e:	d1af      	bne.n	17a90 <ProcessAesDrv+0x2c>
   17b30:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   17b34:	d3ac      	bcc.n	17a90 <ProcessAesDrv+0x2c>
   17b36:	f8df 9268 	ldr.w	r9, [pc, #616]	; 17da0 <ProcessAesDrv+0x33c>
   17b3a:	4648      	mov	r0, r9
   17b3c:	b007      	add	sp, #28
   17b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b42:	3b06      	subs	r3, #6
   17b44:	2b01      	cmp	r3, #1
   17b46:	d8c4      	bhi.n	17ad2 <ProcessAesDrv+0x6e>
   17b48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17b4a:	2b01      	cmp	r3, #1
   17b4c:	f200 80d6 	bhi.w	17cfc <ProcessAesDrv+0x298>
   17b50:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   17b52:	2b01      	cmp	r3, #1
   17b54:	d837      	bhi.n	17bc6 <ProcessAesDrv+0x162>
   17b56:	6e23      	ldr	r3, [r4, #96]	; 0x60
   17b58:	2b01      	cmp	r3, #1
   17b5a:	f200 8134 	bhi.w	17dc6 <ProcessAesDrv+0x362>
   17b5e:	4620      	mov	r0, r4
   17b60:	f7ff ff04 	bl	1796c <InitAes.part.0>
   17b64:	4681      	mov	r9, r0
   17b66:	2800      	cmp	r0, #0
   17b68:	d1b5      	bne.n	17ad6 <ProcessAesDrv+0x72>
   17b6a:	4620      	mov	r0, r4
   17b6c:	f7ff fe8c 	bl	17888 <LoadAesKey>
   17b70:	4681      	mov	r9, r0
   17b72:	2800      	cmp	r0, #0
   17b74:	d1af      	bne.n	17ad6 <ProcessAesDrv+0x72>
   17b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17b78:	2b07      	cmp	r3, #7
   17b7a:	d8aa      	bhi.n	17ad2 <ProcessAesDrv+0x6e>
   17b7c:	a201      	add	r2, pc, #4	; (adr r2, 17b84 <ProcessAesDrv+0x120>)
   17b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17b82:	bf00      	nop
   17b84:	00017be3 	.word	0x00017be3
   17b88:	00017bcd 	.word	0x00017bcd
   17b8c:	00017d3f 	.word	0x00017d3f
   17b90:	00017bcd 	.word	0x00017bcd
   17b94:	00017ad3 	.word	0x00017ad3
   17b98:	00017ad3 	.word	0x00017ad3
   17b9c:	00017d3f 	.word	0x00017d3f
   17ba0:	00017bcd 	.word	0x00017bcd
   17ba4:	2b01      	cmp	r3, #1
   17ba6:	4b6b      	ldr	r3, [pc, #428]	; (17d54 <ProcessAesDrv+0x2f0>)
   17ba8:	6818      	ldr	r0, [r3, #0]
   17baa:	bf0c      	ite	eq
   17bac:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   17bb0:	f040 0010 	orrne.w	r0, r0, #16
   17bb4:	f7fe f9ea 	bl	15f8c <CC_HalMaskInterrupt>
   17bb8:	e7a5      	b.n	17b06 <ProcessAesDrv+0xa2>
   17bba:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 17da4 <ProcessAesDrv+0x340>
   17bbe:	4648      	mov	r0, r9
   17bc0:	b007      	add	sp, #28
   17bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bc6:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 17da8 <ProcessAesDrv+0x344>
   17bca:	e784      	b.n	17ad6 <ProcessAesDrv+0x72>
   17bcc:	6821      	ldr	r1, [r4, #0]
   17bce:	4a62      	ldr	r2, [pc, #392]	; (17d58 <ProcessAesDrv+0x2f4>)
   17bd0:	4b62      	ldr	r3, [pc, #392]	; (17d5c <ProcessAesDrv+0x2f8>)
   17bd2:	6011      	str	r1, [r2, #0]
   17bd4:	6861      	ldr	r1, [r4, #4]
   17bd6:	6019      	str	r1, [r3, #0]
   17bd8:	68a1      	ldr	r1, [r4, #8]
   17bda:	6091      	str	r1, [r2, #8]
   17bdc:	68e2      	ldr	r2, [r4, #12]
   17bde:	609a      	str	r2, [r3, #8]
   17be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17be2:	f023 0304 	bic.w	r3, r3, #4
   17be6:	2b03      	cmp	r3, #3
   17be8:	682a      	ldr	r2, [r5, #0]
   17bea:	d009      	beq.n	17c00 <ProcessAesDrv+0x19c>
   17bec:	6e21      	ldr	r1, [r4, #96]	; 0x60
   17bee:	6833      	ldr	r3, [r6, #0]
   17bf0:	2901      	cmp	r1, #1
   17bf2:	bf07      	ittee	eq
   17bf4:	485a      	ldreq	r0, [pc, #360]	; (17d60 <ProcessAesDrv+0x2fc>)
   17bf6:	495b      	ldreq	r1, [pc, #364]	; (17d64 <ProcessAesDrv+0x300>)
   17bf8:	485b      	ldrne	r0, [pc, #364]	; (17d68 <ProcessAesDrv+0x304>)
   17bfa:	495c      	ldrne	r1, [pc, #368]	; (17d6c <ProcessAesDrv+0x308>)
   17bfc:	6003      	str	r3, [r0, #0]
   17bfe:	600f      	str	r7, [r1, #0]
   17c00:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   17c02:	2b01      	cmp	r3, #1
   17c04:	bf0b      	itete	eq
   17c06:	4b5a      	ldreq	r3, [pc, #360]	; (17d70 <ProcessAesDrv+0x30c>)
   17c08:	4b5a      	ldrne	r3, [pc, #360]	; (17d74 <ProcessAesDrv+0x310>)
   17c0a:	495b      	ldreq	r1, [pc, #364]	; (17d78 <ProcessAesDrv+0x314>)
   17c0c:	495b      	ldrne	r1, [pc, #364]	; (17d7c <ProcessAesDrv+0x318>)
   17c0e:	600a      	str	r2, [r1, #0]
   17c10:	601f      	str	r7, [r3, #0]
   17c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17c14:	f023 0304 	bic.w	r3, r3, #4
   17c18:	2b03      	cmp	r3, #3
   17c1a:	d075      	beq.n	17d08 <ProcessAesDrv+0x2a4>
   17c1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   17c1e:	2b01      	cmp	r3, #1
   17c20:	bf0c      	ite	eq
   17c22:	2080      	moveq	r0, #128	; 0x80
   17c24:	2020      	movne	r0, #32
   17c26:	f7fe f9b7 	bl	15f98 <CC_HalWaitInterrupt>
   17c2a:	4681      	mov	r9, r0
   17c2c:	2800      	cmp	r0, #0
   17c2e:	f47f af52 	bne.w	17ad6 <ProcessAesDrv+0x72>
   17c32:	4b47      	ldr	r3, [pc, #284]	; (17d50 <ProcessAesDrv+0x2ec>)
   17c34:	681a      	ldr	r2, [r3, #0]
   17c36:	2a00      	cmp	r2, #0
   17c38:	d1fc      	bne.n	17c34 <ProcessAesDrv+0x1d0>
   17c3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17c3c:	4691      	mov	r9, r2
   17c3e:	3b01      	subs	r3, #1
   17c40:	2b06      	cmp	r3, #6
   17c42:	d811      	bhi.n	17c68 <ProcessAesDrv+0x204>
   17c44:	e8df f003 	tbb	[pc, r3]
   17c48:	1004bc04 	.word	0x1004bc04
   17c4c:	bc10      	.short	0xbc10
   17c4e:	04          	.byte	0x04
   17c4f:	00          	.byte	0x00
   17c50:	4a41      	ldr	r2, [pc, #260]	; (17d58 <ProcessAesDrv+0x2f4>)
   17c52:	4b42      	ldr	r3, [pc, #264]	; (17d5c <ProcessAesDrv+0x2f8>)
   17c54:	6811      	ldr	r1, [r2, #0]
   17c56:	3208      	adds	r2, #8
   17c58:	6021      	str	r1, [r4, #0]
   17c5a:	6819      	ldr	r1, [r3, #0]
   17c5c:	3308      	adds	r3, #8
   17c5e:	6061      	str	r1, [r4, #4]
   17c60:	6812      	ldr	r2, [r2, #0]
   17c62:	60a2      	str	r2, [r4, #8]
   17c64:	681b      	ldr	r3, [r3, #0]
   17c66:	60e3      	str	r3, [r4, #12]
   17c68:	2301      	movs	r3, #1
   17c6a:	65a3      	str	r3, [r4, #88]	; 0x58
   17c6c:	e733      	b.n	17ad6 <ProcessAesDrv+0x72>
   17c6e:	4844      	ldr	r0, [pc, #272]	; (17d80 <ProcessAesDrv+0x31c>)
   17c70:	f7fd fe92 	bl	15998 <CC_PalAbort>
   17c74:	2000      	movs	r0, #0
   17c76:	f7fe fa51 	bl	1611c <CC_PalPowerSaveModeSelect>
   17c7a:	2800      	cmp	r0, #0
   17c7c:	f43f af1d 	beq.w	17aba <ProcessAesDrv+0x56>
   17c80:	4840      	ldr	r0, [pc, #256]	; (17d84 <ProcessAesDrv+0x320>)
   17c82:	f7fd fe89 	bl	15998 <CC_PalAbort>
   17c86:	e718      	b.n	17aba <ProcessAesDrv+0x56>
   17c88:	483f      	ldr	r0, [pc, #252]	; (17d88 <ProcessAesDrv+0x324>)
   17c8a:	f7fd fe85 	bl	15998 <CC_PalAbort>
   17c8e:	4648      	mov	r0, r9
   17c90:	b007      	add	sp, #28
   17c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c96:	483d      	ldr	r0, [pc, #244]	; (17d8c <ProcessAesDrv+0x328>)
   17c98:	f7fd fe7e 	bl	15998 <CC_PalAbort>
   17c9c:	e73c      	b.n	17b18 <ProcessAesDrv+0xb4>
   17c9e:	2304      	movs	r3, #4
   17ca0:	2120      	movs	r1, #32
   17ca2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   17ca6:	f104 0010 	add.w	r0, r4, #16
   17caa:	f7ff faeb 	bl	17284 <CC_PalMemSetZeroPlat>
   17cae:	e71a      	b.n	17ae6 <ProcessAesDrv+0x82>
   17cb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17cb2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   17cb4:	f000 f9d2 	bl	1805c <kmu_validate_slot_and_size>
   17cb8:	b9e8      	cbnz	r0, 17cf6 <ProcessAesDrv+0x292>
   17cba:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 17dac <ProcessAesDrv+0x348>
   17cbe:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 17db0 <ProcessAesDrv+0x34c>
   17cc2:	f8d8 3000 	ldr.w	r3, [r8]
   17cc6:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 17db4 <ProcessAesDrv+0x350>
   17cca:	681b      	ldr	r3, [r3, #0]
   17ccc:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 17db8 <ProcessAesDrv+0x354>
   17cd0:	f8cb 3000 	str.w	r3, [fp]
   17cd4:	f8d8 3000 	ldr.w	r3, [r8]
   17cd8:	4a2d      	ldr	r2, [pc, #180]	; (17d90 <ProcessAesDrv+0x32c>)
   17cda:	685b      	ldr	r3, [r3, #4]
   17cdc:	f8ca 3000 	str.w	r3, [sl]
   17ce0:	f8d8 3000 	ldr.w	r3, [r8]
   17ce4:	689b      	ldr	r3, [r3, #8]
   17ce6:	f8c9 3000 	str.w	r3, [r9]
   17cea:	f8d8 3000 	ldr.w	r3, [r8]
   17cee:	68db      	ldr	r3, [r3, #12]
   17cf0:	6013      	str	r3, [r2, #0]
   17cf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17cf4:	b171      	cbz	r1, 17d14 <ProcessAesDrv+0x2b0>
   17cf6:	f04f 0801 	mov.w	r8, #1
   17cfa:	e6d0      	b.n	17a9e <ProcessAesDrv+0x3a>
   17cfc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 17dbc <ProcessAesDrv+0x358>
   17d00:	e6e9      	b.n	17ad6 <ProcessAesDrv+0x72>
   17d02:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   17d06:	e70d      	b.n	17b24 <ProcessAesDrv+0xc0>
   17d08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   17d0a:	2b01      	cmp	r3, #1
   17d0c:	bf0c      	ite	eq
   17d0e:	2040      	moveq	r0, #64	; 0x40
   17d10:	2010      	movne	r0, #16
   17d12:	e788      	b.n	17c26 <ProcessAesDrv+0x1c2>
   17d14:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   17d18:	9300      	str	r3, [sp, #0]
   17d1a:	2310      	movs	r3, #16
   17d1c:	f104 0010 	add.w	r0, r4, #16
   17d20:	e9cd 2001 	strd	r2, r0, [sp, #4]
   17d24:	9303      	str	r3, [sp, #12]
   17d26:	9005      	str	r0, [sp, #20]
   17d28:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   17d2c:	6c20      	ldr	r0, [r4, #64]	; 0x40
   17d2e:	f000 fa8b 	bl	18248 <kmu_derive_cmac>
   17d32:	2800      	cmp	r0, #0
   17d34:	d14a      	bne.n	17dcc <ProcessAesDrv+0x368>
   17d36:	2300      	movs	r3, #0
   17d38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   17d3c:	e7db      	b.n	17cf6 <ProcessAesDrv+0x292>
   17d3e:	6821      	ldr	r1, [r4, #0]
   17d40:	4a14      	ldr	r2, [pc, #80]	; (17d94 <ProcessAesDrv+0x330>)
   17d42:	4b15      	ldr	r3, [pc, #84]	; (17d98 <ProcessAesDrv+0x334>)
   17d44:	e745      	b.n	17bd2 <ProcessAesDrv+0x16e>
   17d46:	bf00      	nop
   17d48:	200000bc 	.word	0x200000bc
   17d4c:	50841810 	.word	0x50841810
   17d50:	50841910 	.word	0x50841910
   17d54:	50841a04 	.word	0x50841a04
   17d58:	50841440 	.word	0x50841440
   17d5c:	50841444 	.word	0x50841444
   17d60:	50841d28 	.word	0x50841d28
   17d64:	50841d2c 	.word	0x50841d2c
   17d68:	50841d30 	.word	0x50841d30
   17d6c:	50841d34 	.word	0x50841d34
   17d70:	50841c2c 	.word	0x50841c2c
   17d74:	50841c34 	.word	0x50841c34
   17d78:	50841c28 	.word	0x50841c28
   17d7c:	50841c30 	.word	0x50841c30
   17d80:	00019054 	.word	0x00019054
   17d84:	0001906c 	.word	0x0001906c
   17d88:	000190ac 	.word	0x000190ac
   17d8c:	0001908c 	.word	0x0001908c
   17d90:	5084140c 	.word	0x5084140c
   17d94:	50841460 	.word	0x50841460
   17d98:	50841464 	.word	0x50841464
   17d9c:	00f10001 	.word	0x00f10001
   17da0:	00f10005 	.word	0x00f10005
   17da4:	00f1000b 	.word	0x00f1000b
   17da8:	00f10003 	.word	0x00f10003
   17dac:	200000ac 	.word	0x200000ac
   17db0:	50841400 	.word	0x50841400
   17db4:	50841404 	.word	0x50841404
   17db8:	50841408 	.word	0x50841408
   17dbc:	00f10002 	.word	0x00f10002
   17dc0:	4a0f      	ldr	r2, [pc, #60]	; (17e00 <ProcessAesDrv+0x39c>)
   17dc2:	4b10      	ldr	r3, [pc, #64]	; (17e04 <ProcessAesDrv+0x3a0>)
   17dc4:	e746      	b.n	17c54 <ProcessAesDrv+0x1f0>
   17dc6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 17e0c <ProcessAesDrv+0x3a8>
   17dca:	e684      	b.n	17ad6 <ProcessAesDrv+0x72>
   17dcc:	f8d8 3000 	ldr.w	r3, [r8]
   17dd0:	9805      	ldr	r0, [sp, #20]
   17dd2:	681b      	ldr	r3, [r3, #0]
   17dd4:	4a0c      	ldr	r2, [pc, #48]	; (17e08 <ProcessAesDrv+0x3a4>)
   17dd6:	f8cb 3000 	str.w	r3, [fp]
   17dda:	f8d8 3000 	ldr.w	r3, [r8]
   17dde:	2110      	movs	r1, #16
   17de0:	685b      	ldr	r3, [r3, #4]
   17de2:	f8ca 3000 	str.w	r3, [sl]
   17de6:	f8d8 3000 	ldr.w	r3, [r8]
   17dea:	689b      	ldr	r3, [r3, #8]
   17dec:	f8c9 3000 	str.w	r3, [r9]
   17df0:	f8d8 3000 	ldr.w	r3, [r8]
   17df4:	68db      	ldr	r3, [r3, #12]
   17df6:	6013      	str	r3, [r2, #0]
   17df8:	f7ff fa44 	bl	17284 <CC_PalMemSetZeroPlat>
   17dfc:	e79b      	b.n	17d36 <ProcessAesDrv+0x2d2>
   17dfe:	bf00      	nop
   17e00:	50841460 	.word	0x50841460
   17e04:	50841464 	.word	0x50841464
   17e08:	5084140c 	.word	0x5084140c
   17e0c:	00f10004 	.word	0x00f10004

00017e10 <FinishAesDrv>:
   17e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e14:	b301      	cbz	r1, 17e58 <FinishAesDrv+0x48>
   17e16:	b1fa      	cbz	r2, 17e58 <FinishAesDrv+0x48>
   17e18:	4604      	mov	r4, r0
   17e1a:	2800      	cmp	r0, #0
   17e1c:	d07a      	beq.n	17f14 <FinishAesDrv+0x104>
   17e1e:	461d      	mov	r5, r3
   17e20:	6b43      	ldr	r3, [r0, #52]	; 0x34
   17e22:	460e      	mov	r6, r1
   17e24:	2b07      	cmp	r3, #7
   17e26:	d01b      	beq.n	17e60 <FinishAesDrv+0x50>
   17e28:	b95d      	cbnz	r5, 17e42 <FinishAesDrv+0x32>
   17e2a:	2b03      	cmp	r3, #3
   17e2c:	d110      	bne.n	17e50 <FinishAesDrv+0x40>
   17e2e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   17e30:	b973      	cbnz	r3, 17e50 <FinishAesDrv+0x40>
   17e32:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   17e36:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   17e3a:	2510      	movs	r5, #16
   17e3c:	f100 0364 	add.w	r3, r0, #100	; 0x64
   17e40:	600b      	str	r3, [r1, #0]
   17e42:	462b      	mov	r3, r5
   17e44:	4631      	mov	r1, r6
   17e46:	4620      	mov	r0, r4
   17e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   17e4c:	f7ff be0a 	b.w	17a64 <ProcessAesDrv>
   17e50:	462f      	mov	r7, r5
   17e52:	4638      	mov	r0, r7
   17e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e58:	4f68      	ldr	r7, [pc, #416]	; (17ffc <FinishAesDrv+0x1ec>)
   17e5a:	4638      	mov	r0, r7
   17e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e60:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   17e62:	2b00      	cmp	r3, #0
   17e64:	d159      	bne.n	17f1a <FinishAesDrv+0x10a>
   17e66:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   17e6a:	d25b      	bcs.n	17f24 <FinishAesDrv+0x114>
   17e6c:	b915      	cbnz	r5, 17e74 <FinishAesDrv+0x64>
   17e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   17e70:	2b00      	cmp	r3, #0
   17e72:	d157      	bne.n	17f24 <FinishAesDrv+0x114>
   17e74:	f04f 31ff 	mov.w	r1, #4294967295
   17e78:	4861      	ldr	r0, [pc, #388]	; (18000 <FinishAesDrv+0x1f0>)
   17e7a:	f7fe f91f 	bl	160bc <CC_PalMutexLock>
   17e7e:	2800      	cmp	r0, #0
   17e80:	f040 809a 	bne.w	17fb8 <FinishAesDrv+0x1a8>
   17e84:	2000      	movs	r0, #0
   17e86:	f7fe f949 	bl	1611c <CC_PalPowerSaveModeSelect>
   17e8a:	2800      	cmp	r0, #0
   17e8c:	f040 8090 	bne.w	17fb0 <FinishAesDrv+0x1a0>
   17e90:	2101      	movs	r1, #1
   17e92:	4b5c      	ldr	r3, [pc, #368]	; (18004 <FinishAesDrv+0x1f4>)
   17e94:	4a5c      	ldr	r2, [pc, #368]	; (18008 <FinishAesDrv+0x1f8>)
   17e96:	6019      	str	r1, [r3, #0]
   17e98:	6813      	ldr	r3, [r2, #0]
   17e9a:	2b00      	cmp	r3, #0
   17e9c:	d1fc      	bne.n	17e98 <FinishAesDrv+0x88>
   17e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17ea0:	2b03      	cmp	r3, #3
   17ea2:	dd20      	ble.n	17ee6 <FinishAesDrv+0xd6>
   17ea4:	3b06      	subs	r3, #6
   17ea6:	2b01      	cmp	r3, #1
   17ea8:	d81f      	bhi.n	17eea <FinishAesDrv+0xda>
   17eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17eac:	2b01      	cmp	r3, #1
   17eae:	d83b      	bhi.n	17f28 <FinishAesDrv+0x118>
   17eb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   17eb2:	2b01      	cmp	r3, #1
   17eb4:	f200 8088 	bhi.w	17fc8 <FinishAesDrv+0x1b8>
   17eb8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   17eba:	2b01      	cmp	r3, #1
   17ebc:	f200 8086 	bhi.w	17fcc <FinishAesDrv+0x1bc>
   17ec0:	4620      	mov	r0, r4
   17ec2:	f7ff fd53 	bl	1796c <InitAes.part.0>
   17ec6:	4607      	mov	r7, r0
   17ec8:	b980      	cbnz	r0, 17eec <FinishAesDrv+0xdc>
   17eca:	4620      	mov	r0, r4
   17ecc:	f7ff fcdc 	bl	17888 <LoadAesKey>
   17ed0:	4607      	mov	r7, r0
   17ed2:	b958      	cbnz	r0, 17eec <FinishAesDrv+0xdc>
   17ed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17ed6:	2b07      	cmp	r3, #7
   17ed8:	d807      	bhi.n	17eea <FinishAesDrv+0xda>
   17eda:	e8df f003 	tbb	[pc, r3]
   17ede:	2731      	.short	0x2731
   17ee0:	06062755 	.word	0x06062755
   17ee4:	2755      	.short	0x2755
   17ee6:	2b00      	cmp	r3, #0
   17ee8:	dadf      	bge.n	17eaa <FinishAesDrv+0x9a>
   17eea:	4f48      	ldr	r7, [pc, #288]	; (1800c <FinishAesDrv+0x1fc>)
   17eec:	4a46      	ldr	r2, [pc, #280]	; (18008 <FinishAesDrv+0x1f8>)
   17eee:	6813      	ldr	r3, [r2, #0]
   17ef0:	2b00      	cmp	r3, #0
   17ef2:	d1fc      	bne.n	17eee <FinishAesDrv+0xde>
   17ef4:	4a43      	ldr	r2, [pc, #268]	; (18004 <FinishAesDrv+0x1f4>)
   17ef6:	2001      	movs	r0, #1
   17ef8:	6013      	str	r3, [r2, #0]
   17efa:	f7fe f90f 	bl	1611c <CC_PalPowerSaveModeSelect>
   17efe:	2800      	cmp	r0, #0
   17f00:	d15e      	bne.n	17fc0 <FinishAesDrv+0x1b0>
   17f02:	483f      	ldr	r0, [pc, #252]	; (18000 <FinishAesDrv+0x1f0>)
   17f04:	f7fe f8e2 	bl	160cc <CC_PalMutexUnlock>
   17f08:	2800      	cmp	r0, #0
   17f0a:	d0a2      	beq.n	17e52 <FinishAesDrv+0x42>
   17f0c:	4840      	ldr	r0, [pc, #256]	; (18010 <FinishAesDrv+0x200>)
   17f0e:	f7fd fd43 	bl	15998 <CC_PalAbort>
   17f12:	e79e      	b.n	17e52 <FinishAesDrv+0x42>
   17f14:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   17f18:	e79b      	b.n	17e52 <FinishAesDrv+0x42>
   17f1a:	2b01      	cmp	r3, #1
   17f1c:	d1a6      	bne.n	17e6c <FinishAesDrv+0x5c>
   17f1e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   17f22:	d3a3      	bcc.n	17e6c <FinishAesDrv+0x5c>
   17f24:	4f3b      	ldr	r7, [pc, #236]	; (18014 <FinishAesDrv+0x204>)
   17f26:	e794      	b.n	17e52 <FinishAesDrv+0x42>
   17f28:	4f3b      	ldr	r7, [pc, #236]	; (18018 <FinishAesDrv+0x208>)
   17f2a:	e7df      	b.n	17eec <FinishAesDrv+0xdc>
   17f2c:	6821      	ldr	r1, [r4, #0]
   17f2e:	4a3b      	ldr	r2, [pc, #236]	; (1801c <FinishAesDrv+0x20c>)
   17f30:	4b3b      	ldr	r3, [pc, #236]	; (18020 <FinishAesDrv+0x210>)
   17f32:	6011      	str	r1, [r2, #0]
   17f34:	6861      	ldr	r1, [r4, #4]
   17f36:	6019      	str	r1, [r3, #0]
   17f38:	68a1      	ldr	r1, [r4, #8]
   17f3a:	6091      	str	r1, [r2, #8]
   17f3c:	68e2      	ldr	r2, [r4, #12]
   17f3e:	609a      	str	r2, [r3, #8]
   17f40:	2301      	movs	r3, #1
   17f42:	4938      	ldr	r1, [pc, #224]	; (18024 <FinishAesDrv+0x214>)
   17f44:	4a38      	ldr	r2, [pc, #224]	; (18028 <FinishAesDrv+0x218>)
   17f46:	600b      	str	r3, [r1, #0]
   17f48:	6015      	str	r5, [r2, #0]
   17f4a:	2d00      	cmp	r5, #0
   17f4c:	d140      	bne.n	17fd0 <FinishAesDrv+0x1c0>
   17f4e:	6da2      	ldr	r2, [r4, #88]	; 0x58
   17f50:	b90a      	cbnz	r2, 17f56 <FinishAesDrv+0x146>
   17f52:	4a36      	ldr	r2, [pc, #216]	; (1802c <FinishAesDrv+0x21c>)
   17f54:	6013      	str	r3, [r2, #0]
   17f56:	4b2c      	ldr	r3, [pc, #176]	; (18008 <FinishAesDrv+0x1f8>)
   17f58:	681f      	ldr	r7, [r3, #0]
   17f5a:	2f00      	cmp	r7, #0
   17f5c:	d1fc      	bne.n	17f58 <FinishAesDrv+0x148>
   17f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17f60:	3b01      	subs	r3, #1
   17f62:	2b06      	cmp	r3, #6
   17f64:	d8c2      	bhi.n	17eec <FinishAesDrv+0xdc>
   17f66:	a201      	add	r2, pc, #4	; (adr r2, 17f6c <FinishAesDrv+0x15c>)
   17f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17f6c:	00017f91 	.word	0x00017f91
   17f70:	00017fab 	.word	0x00017fab
   17f74:	00017f91 	.word	0x00017f91
   17f78:	00017eed 	.word	0x00017eed
   17f7c:	00017eed 	.word	0x00017eed
   17f80:	00017fab 	.word	0x00017fab
   17f84:	00017f91 	.word	0x00017f91
   17f88:	6821      	ldr	r1, [r4, #0]
   17f8a:	4a29      	ldr	r2, [pc, #164]	; (18030 <FinishAesDrv+0x220>)
   17f8c:	4b29      	ldr	r3, [pc, #164]	; (18034 <FinishAesDrv+0x224>)
   17f8e:	e7d0      	b.n	17f32 <FinishAesDrv+0x122>
   17f90:	4a22      	ldr	r2, [pc, #136]	; (1801c <FinishAesDrv+0x20c>)
   17f92:	4b23      	ldr	r3, [pc, #140]	; (18020 <FinishAesDrv+0x210>)
   17f94:	6811      	ldr	r1, [r2, #0]
   17f96:	3208      	adds	r2, #8
   17f98:	6021      	str	r1, [r4, #0]
   17f9a:	6819      	ldr	r1, [r3, #0]
   17f9c:	3308      	adds	r3, #8
   17f9e:	6061      	str	r1, [r4, #4]
   17fa0:	6812      	ldr	r2, [r2, #0]
   17fa2:	60a2      	str	r2, [r4, #8]
   17fa4:	681b      	ldr	r3, [r3, #0]
   17fa6:	60e3      	str	r3, [r4, #12]
   17fa8:	e7a0      	b.n	17eec <FinishAesDrv+0xdc>
   17faa:	4a21      	ldr	r2, [pc, #132]	; (18030 <FinishAesDrv+0x220>)
   17fac:	4b21      	ldr	r3, [pc, #132]	; (18034 <FinishAesDrv+0x224>)
   17fae:	e7f1      	b.n	17f94 <FinishAesDrv+0x184>
   17fb0:	4821      	ldr	r0, [pc, #132]	; (18038 <FinishAesDrv+0x228>)
   17fb2:	f7fd fcf1 	bl	15998 <CC_PalAbort>
   17fb6:	e76b      	b.n	17e90 <FinishAesDrv+0x80>
   17fb8:	4820      	ldr	r0, [pc, #128]	; (1803c <FinishAesDrv+0x22c>)
   17fba:	f7fd fced 	bl	15998 <CC_PalAbort>
   17fbe:	e761      	b.n	17e84 <FinishAesDrv+0x74>
   17fc0:	481f      	ldr	r0, [pc, #124]	; (18040 <FinishAesDrv+0x230>)
   17fc2:	f7fd fce9 	bl	15998 <CC_PalAbort>
   17fc6:	e79c      	b.n	17f02 <FinishAesDrv+0xf2>
   17fc8:	4f1e      	ldr	r7, [pc, #120]	; (18044 <FinishAesDrv+0x234>)
   17fca:	e78f      	b.n	17eec <FinishAesDrv+0xdc>
   17fcc:	4f1e      	ldr	r7, [pc, #120]	; (18048 <FinishAesDrv+0x238>)
   17fce:	e78d      	b.n	17eec <FinishAesDrv+0xdc>
   17fd0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   17fd2:	6833      	ldr	r3, [r6, #0]
   17fd4:	2a01      	cmp	r2, #1
   17fd6:	d00a      	beq.n	17fee <FinishAesDrv+0x1de>
   17fd8:	2010      	movs	r0, #16
   17fda:	491c      	ldr	r1, [pc, #112]	; (1804c <FinishAesDrv+0x23c>)
   17fdc:	4a1c      	ldr	r2, [pc, #112]	; (18050 <FinishAesDrv+0x240>)
   17fde:	600b      	str	r3, [r1, #0]
   17fe0:	6015      	str	r5, [r2, #0]
   17fe2:	f7fd ffd9 	bl	15f98 <CC_HalWaitInterrupt>
   17fe6:	4607      	mov	r7, r0
   17fe8:	2800      	cmp	r0, #0
   17fea:	d0b4      	beq.n	17f56 <FinishAesDrv+0x146>
   17fec:	e77e      	b.n	17eec <FinishAesDrv+0xdc>
   17fee:	4919      	ldr	r1, [pc, #100]	; (18054 <FinishAesDrv+0x244>)
   17ff0:	4a19      	ldr	r2, [pc, #100]	; (18058 <FinishAesDrv+0x248>)
   17ff2:	600b      	str	r3, [r1, #0]
   17ff4:	2040      	movs	r0, #64	; 0x40
   17ff6:	6015      	str	r5, [r2, #0]
   17ff8:	e7f3      	b.n	17fe2 <FinishAesDrv+0x1d2>
   17ffa:	bf00      	nop
   17ffc:	00f1000b 	.word	0x00f1000b
   18000:	200000bc 	.word	0x200000bc
   18004:	50841810 	.word	0x50841810
   18008:	50841910 	.word	0x50841910
   1800c:	00f10001 	.word	0x00f10001
   18010:	000190ac 	.word	0x000190ac
   18014:	00f10005 	.word	0x00f10005
   18018:	00f10002 	.word	0x00f10002
   1801c:	50841440 	.word	0x50841440
   18020:	50841444 	.word	0x50841444
   18024:	5084147c 	.word	0x5084147c
   18028:	508414bc 	.word	0x508414bc
   1802c:	50841524 	.word	0x50841524
   18030:	50841460 	.word	0x50841460
   18034:	50841464 	.word	0x50841464
   18038:	0001906c 	.word	0x0001906c
   1803c:	00019054 	.word	0x00019054
   18040:	0001908c 	.word	0x0001908c
   18044:	00f10003 	.word	0x00f10003
   18048:	00f10004 	.word	0x00f10004
   1804c:	50841c30 	.word	0x50841c30
   18050:	50841c34 	.word	0x50841c34
   18054:	50841c28 	.word	0x50841c28
   18058:	50841c2c 	.word	0x50841c2c

0001805c <kmu_validate_slot_and_size>:
   1805c:	287f      	cmp	r0, #127	; 0x7f
   1805e:	d80c      	bhi.n	1807a <kmu_validate_slot_and_size+0x1e>
   18060:	b149      	cbz	r1, 18076 <kmu_validate_slot_and_size+0x1a>
   18062:	2903      	cmp	r1, #3
   18064:	d001      	beq.n	1806a <kmu_validate_slot_and_size+0xe>
   18066:	4806      	ldr	r0, [pc, #24]	; (18080 <kmu_validate_slot_and_size+0x24>)
   18068:	4770      	bx	lr
   1806a:	4906      	ldr	r1, [pc, #24]	; (18084 <kmu_validate_slot_and_size+0x28>)
   1806c:	287f      	cmp	r0, #127	; 0x7f
   1806e:	bf0c      	ite	eq
   18070:	4608      	moveq	r0, r1
   18072:	2000      	movne	r0, #0
   18074:	4770      	bx	lr
   18076:	4608      	mov	r0, r1
   18078:	4770      	bx	lr
   1807a:	4802      	ldr	r0, [pc, #8]	; (18084 <kmu_validate_slot_and_size+0x28>)
   1807c:	4770      	bx	lr
   1807e:	bf00      	nop
   18080:	00f70003 	.word	0x00f70003
   18084:	00f70001 	.word	0x00f70001

00018088 <kmu_validate_slot_and_size_no_kdr>:
   18088:	b470      	push	{r4, r5, r6}
   1808a:	2400      	movs	r4, #0
   1808c:	4a19      	ldr	r2, [pc, #100]	; (180f4 <kmu_validate_slot_and_size_no_kdr+0x6c>)
   1808e:	00c3      	lsls	r3, r0, #3
   18090:	1c45      	adds	r5, r0, #1
   18092:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   18096:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
   1809a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1809e:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
   180a2:	b083      	sub	sp, #12
   180a4:	9600      	str	r6, [sp, #0]
   180a6:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   180aa:	4d13      	ldr	r5, [pc, #76]	; (180f8 <kmu_validate_slot_and_size_no_kdr+0x70>)
   180ac:	9e00      	ldr	r6, [sp, #0]
   180ae:	42ae      	cmp	r6, r5
   180b0:	d015      	beq.n	180de <kmu_validate_slot_and_size_no_kdr+0x56>
   180b2:	b191      	cbz	r1, 180da <kmu_validate_slot_and_size_no_kdr+0x52>
   180b4:	1c86      	adds	r6, r0, #2
   180b6:	f8c2 6500 	str.w	r6, [r2, #1280]	; 0x500
   180ba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
   180be:	9301      	str	r3, [sp, #4]
   180c0:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   180c4:	9b01      	ldr	r3, [sp, #4]
   180c6:	42ab      	cmp	r3, r5
   180c8:	d009      	beq.n	180de <kmu_validate_slot_and_size_no_kdr+0x56>
   180ca:	287f      	cmp	r0, #127	; 0x7f
   180cc:	d807      	bhi.n	180de <kmu_validate_slot_and_size_no_kdr+0x56>
   180ce:	2903      	cmp	r1, #3
   180d0:	d10b      	bne.n	180ea <kmu_validate_slot_and_size_no_kdr+0x62>
   180d2:	287f      	cmp	r0, #127	; 0x7f
   180d4:	d003      	beq.n	180de <kmu_validate_slot_and_size_no_kdr+0x56>
   180d6:	4620      	mov	r0, r4
   180d8:	e002      	b.n	180e0 <kmu_validate_slot_and_size_no_kdr+0x58>
   180da:	287f      	cmp	r0, #127	; 0x7f
   180dc:	d903      	bls.n	180e6 <kmu_validate_slot_and_size_no_kdr+0x5e>
   180de:	4807      	ldr	r0, [pc, #28]	; (180fc <kmu_validate_slot_and_size_no_kdr+0x74>)
   180e0:	b003      	add	sp, #12
   180e2:	bc70      	pop	{r4, r5, r6}
   180e4:	4770      	bx	lr
   180e6:	4608      	mov	r0, r1
   180e8:	e7fa      	b.n	180e0 <kmu_validate_slot_and_size_no_kdr+0x58>
   180ea:	4805      	ldr	r0, [pc, #20]	; (18100 <kmu_validate_slot_and_size_no_kdr+0x78>)
   180ec:	b003      	add	sp, #12
   180ee:	bc70      	pop	{r4, r5, r6}
   180f0:	4770      	bx	lr
   180f2:	bf00      	nop
   180f4:	50039000 	.word	0x50039000
   180f8:	50841a50 	.word	0x50841a50
   180fc:	00f70001 	.word	0x00f70001
   18100:	00f70003 	.word	0x00f70003

00018104 <kmu_validate_kdr_slot_and_size>:
   18104:	b9a9      	cbnz	r1, 18132 <kmu_validate_kdr_slot_and_size+0x2e>
   18106:	b410      	push	{r4}
   18108:	4b0b      	ldr	r3, [pc, #44]	; (18138 <kmu_validate_kdr_slot_and_size+0x34>)
   1810a:	1c44      	adds	r4, r0, #1
   1810c:	4a0b      	ldr	r2, [pc, #44]	; (1813c <kmu_validate_kdr_slot_and_size+0x38>)
   1810e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
   18112:	3080      	adds	r0, #128	; 0x80
   18114:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
   18118:	b083      	sub	sp, #12
   1811a:	9001      	str	r0, [sp, #4]
   1811c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
   18120:	4a07      	ldr	r2, [pc, #28]	; (18140 <kmu_validate_kdr_slot_and_size+0x3c>)
   18122:	9b01      	ldr	r3, [sp, #4]
   18124:	4807      	ldr	r0, [pc, #28]	; (18144 <kmu_validate_kdr_slot_and_size+0x40>)
   18126:	4293      	cmp	r3, r2
   18128:	bf08      	it	eq
   1812a:	2000      	moveq	r0, #0
   1812c:	b003      	add	sp, #12
   1812e:	bc10      	pop	{r4}
   18130:	4770      	bx	lr
   18132:	4805      	ldr	r0, [pc, #20]	; (18148 <kmu_validate_kdr_slot_and_size+0x44>)
   18134:	4770      	bx	lr
   18136:	bf00      	nop
   18138:	50039000 	.word	0x50039000
   1813c:	00ff8000 	.word	0x00ff8000
   18140:	50841a50 	.word	0x50841a50
   18144:	00f70001 	.word	0x00f70001
   18148:	00f70003 	.word	0x00f70003

0001814c <kmu_use_kdr_key>:
   1814c:	2000      	movs	r0, #0
   1814e:	2201      	movs	r2, #1
   18150:	4902      	ldr	r1, [pc, #8]	; (1815c <kmu_use_kdr_key+0x10>)
   18152:	4b03      	ldr	r3, [pc, #12]	; (18160 <kmu_use_kdr_key+0x14>)
   18154:	6008      	str	r0, [r1, #0]
   18156:	601a      	str	r2, [r3, #0]
   18158:	4770      	bx	lr
   1815a:	bf00      	nop
   1815c:	50841a38 	.word	0x50841a38
   18160:	50841478 	.word	0x50841478

00018164 <kmu_load_key_aes>:
   18164:	b109      	cbz	r1, 1816a <kmu_load_key_aes+0x6>
   18166:	4830      	ldr	r0, [pc, #192]	; (18228 <kmu_load_key_aes+0xc4>)
   18168:	4770      	bx	lr
   1816a:	b430      	push	{r4, r5}
   1816c:	2401      	movs	r4, #1
   1816e:	4b2f      	ldr	r3, [pc, #188]	; (1822c <kmu_load_key_aes+0xc8>)
   18170:	4a2f      	ldr	r2, [pc, #188]	; (18230 <kmu_load_key_aes+0xcc>)
   18172:	b084      	sub	sp, #16
   18174:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   18178:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1817c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   18180:	1905      	adds	r5, r0, r4
   18182:	9202      	str	r2, [sp, #8]
   18184:	9a02      	ldr	r2, [sp, #8]
   18186:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1818a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1818e:	3080      	adds	r0, #128	; 0x80
   18190:	9202      	str	r2, [sp, #8]
   18192:	9a02      	ldr	r2, [sp, #8]
   18194:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   18198:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   1819c:	4a25      	ldr	r2, [pc, #148]	; (18234 <kmu_load_key_aes+0xd0>)
   1819e:	9102      	str	r1, [sp, #8]
   181a0:	9902      	ldr	r1, [sp, #8]
   181a2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
   181a6:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
   181aa:	4a23      	ldr	r2, [pc, #140]	; (18238 <kmu_load_key_aes+0xd4>)
   181ac:	9103      	str	r1, [sp, #12]
   181ae:	9903      	ldr	r1, [sp, #12]
   181b0:	4291      	cmp	r1, r2
   181b2:	d132      	bne.n	1821a <kmu_load_key_aes+0xb6>
   181b4:	461a      	mov	r2, r3
   181b6:	601c      	str	r4, [r3, #0]
   181b8:	e005      	b.n	181c6 <kmu_load_key_aes+0x62>
   181ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
   181be:	b9db      	cbnz	r3, 181f8 <kmu_load_key_aes+0x94>
   181c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   181c4:	b9c3      	cbnz	r3, 181f8 <kmu_load_key_aes+0x94>
   181c6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   181ca:	3b00      	subs	r3, #0
   181cc:	bf18      	it	ne
   181ce:	2301      	movne	r3, #1
   181d0:	f88d 3005 	strb.w	r3, [sp, #5]
   181d4:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   181d8:	3b00      	subs	r3, #0
   181da:	bf18      	it	ne
   181dc:	2301      	movne	r3, #1
   181de:	f88d 3006 	strb.w	r3, [sp, #6]
   181e2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   181e6:	3b00      	subs	r3, #0
   181e8:	bf18      	it	ne
   181ea:	2301      	movne	r3, #1
   181ec:	f88d 3007 	strb.w	r3, [sp, #7]
   181f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   181f4:	2b00      	cmp	r3, #0
   181f6:	d0e0      	beq.n	181ba <kmu_load_key_aes+0x56>
   181f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   181fc:	b98b      	cbnz	r3, 18222 <kmu_load_key_aes+0xbe>
   181fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18202:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   18206:	b933      	cbnz	r3, 18216 <kmu_load_key_aes+0xb2>
   18208:	4610      	mov	r0, r2
   1820a:	4b08      	ldr	r3, [pc, #32]	; (1822c <kmu_load_key_aes+0xc8>)
   1820c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   18210:	b004      	add	sp, #16
   18212:	bc30      	pop	{r4, r5}
   18214:	4770      	bx	lr
   18216:	4809      	ldr	r0, [pc, #36]	; (1823c <kmu_load_key_aes+0xd8>)
   18218:	e7fa      	b.n	18210 <kmu_load_key_aes+0xac>
   1821a:	4809      	ldr	r0, [pc, #36]	; (18240 <kmu_load_key_aes+0xdc>)
   1821c:	b004      	add	sp, #16
   1821e:	bc30      	pop	{r4, r5}
   18220:	4770      	bx	lr
   18222:	4808      	ldr	r0, [pc, #32]	; (18244 <kmu_load_key_aes+0xe0>)
   18224:	e7f4      	b.n	18210 <kmu_load_key_aes+0xac>
   18226:	bf00      	nop
   18228:	00f1000c 	.word	0x00f1000c
   1822c:	50039000 	.word	0x50039000
   18230:	50840000 	.word	0x50840000
   18234:	00ff8000 	.word	0x00ff8000
   18238:	50841400 	.word	0x50841400
   1823c:	00f70002 	.word	0x00f70002
   18240:	00f70006 	.word	0x00f70006
   18244:	00f70001 	.word	0x00f70001

00018248 <kmu_derive_cmac>:
   18248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1824c:	2400      	movs	r4, #0
   1824e:	b0ce      	sub	sp, #312	; 0x138
   18250:	4605      	mov	r5, r0
   18252:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
   18256:	468a      	mov	sl, r1
   18258:	4617      	mov	r7, r2
   1825a:	4621      	mov	r1, r4
   1825c:	2274      	movs	r2, #116	; 0x74
   1825e:	a810      	add	r0, sp, #64	; 0x40
   18260:	4698      	mov	r8, r3
   18262:	f000 faf8 	bl	18856 <memset>
   18266:	4621      	mov	r1, r4
   18268:	2280      	movs	r2, #128	; 0x80
   1826a:	a82e      	add	r0, sp, #184	; 0xb8
   1826c:	942d      	str	r4, [sp, #180]	; 0xb4
   1826e:	f000 faf2 	bl	18856 <memset>
   18272:	2384      	movs	r3, #132	; 0x84
   18274:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
   18278:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1827c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
   18280:	9306      	str	r3, [sp, #24]
   18282:	d870      	bhi.n	18366 <kmu_derive_cmac+0x11e>
   18284:	ab06      	add	r3, sp, #24
   18286:	ac2d      	add	r4, sp, #180	; 0xb4
   18288:	9301      	str	r3, [sp, #4]
   1828a:	4641      	mov	r1, r8
   1828c:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   18290:	4638      	mov	r0, r7
   18292:	9602      	str	r6, [sp, #8]
   18294:	9400      	str	r4, [sp, #0]
   18296:	f000 f87d 	bl	18394 <UtilCmacBuildDataForDerivation>
   1829a:	2800      	cmp	r0, #0
   1829c:	d16a      	bne.n	18374 <kmu_derive_cmac+0x12c>
   1829e:	2200      	movs	r2, #0
   182a0:	2301      	movs	r3, #1
   182a2:	2107      	movs	r1, #7
   182a4:	2701      	movs	r7, #1
   182a6:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
   182aa:	4b35      	ldr	r3, [pc, #212]	; (18380 <kmu_derive_cmac+0x138>)
   182ac:	911d      	str	r1, [sp, #116]	; 0x74
   182ae:	4a35      	ldr	r2, [pc, #212]	; (18384 <kmu_derive_cmac+0x13c>)
   182b0:	19e9      	adds	r1, r5, r7
   182b2:	9520      	str	r5, [sp, #128]	; 0x80
   182b4:	901e      	str	r0, [sp, #120]	; 0x78
   182b6:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
   182ba:	9728      	str	r7, [sp, #160]	; 0xa0
   182bc:	3580      	adds	r5, #128	; 0x80
   182be:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
   182c2:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
   182c6:	9207      	str	r2, [sp, #28]
   182c8:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   182cc:	9a07      	ldr	r2, [sp, #28]
   182ce:	4b2e      	ldr	r3, [pc, #184]	; (18388 <kmu_derive_cmac+0x140>)
   182d0:	429a      	cmp	r2, r3
   182d2:	d142      	bne.n	1835a <kmu_derive_cmac+0x112>
   182d4:	2203      	movs	r2, #3
   182d6:	f10d 0317 	add.w	r3, sp, #23
   182da:	701a      	strb	r2, [r3, #0]
   182dc:	781b      	ldrb	r3, [r3, #0]
   182de:	2110      	movs	r1, #16
   182e0:	a810      	add	r0, sp, #64	; 0x40
   182e2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
   182e6:	f7fe ffcd 	bl	17284 <CC_PalMemSetZeroPlat>
   182ea:	2210      	movs	r2, #16
   182ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   182f0:	9200      	str	r2, [sp, #0]
   182f2:	4620      	mov	r0, r4
   182f4:	9906      	ldr	r1, [sp, #24]
   182f6:	ab0c      	add	r3, sp, #48	; 0x30
   182f8:	aa08      	add	r2, sp, #32
   182fa:	f8cd 8004 	str.w	r8, [sp, #4]
   182fe:	f7ff f899 	bl	17434 <SetDataBuffersInfo>
   18302:	4607      	mov	r7, r0
   18304:	bb00      	cbnz	r0, 18348 <kmu_derive_cmac+0x100>
   18306:	2401      	movs	r4, #1
   18308:	e010      	b.n	1832c <kmu_derive_cmac+0xe4>
   1830a:	2e10      	cmp	r6, #16
   1830c:	4635      	mov	r5, r6
   1830e:	bf28      	it	cs
   18310:	2510      	movcs	r5, #16
   18312:	a910      	add	r1, sp, #64	; 0x40
   18314:	462a      	mov	r2, r5
   18316:	f7fe ffb1 	bl	1727c <CC_PalMemCopyPlat>
   1831a:	2110      	movs	r1, #16
   1831c:	a810      	add	r0, sp, #64	; 0x40
   1831e:	f7fe ffb1 	bl	17284 <CC_PalMemSetZeroPlat>
   18322:	3401      	adds	r4, #1
   18324:	1b76      	subs	r6, r6, r5
   18326:	442f      	add	r7, r5
   18328:	b2e4      	uxtb	r4, r4
   1832a:	d021      	beq.n	18370 <kmu_derive_cmac+0x128>
   1832c:	9b06      	ldr	r3, [sp, #24]
   1832e:	4642      	mov	r2, r8
   18330:	a908      	add	r1, sp, #32
   18332:	a810      	add	r0, sp, #64	; 0x40
   18334:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
   18338:	f7ff fd6a 	bl	17e10 <FinishAesDrv>
   1833c:	4603      	mov	r3, r0
   1833e:	eb09 0007 	add.w	r0, r9, r7
   18342:	2b00      	cmp	r3, #0
   18344:	d0e1      	beq.n	1830a <kmu_derive_cmac+0xc2>
   18346:	461f      	mov	r7, r3
   18348:	a810      	add	r0, sp, #64	; 0x40
   1834a:	2274      	movs	r2, #116	; 0x74
   1834c:	2100      	movs	r1, #0
   1834e:	f7fe ff97 	bl	17280 <CC_PalMemSetPlat>
   18352:	4638      	mov	r0, r7
   18354:	b04e      	add	sp, #312	; 0x138
   18356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1835a:	2202      	movs	r2, #2
   1835c:	f10d 0317 	add.w	r3, sp, #23
   18360:	f88d 2017 	strb.w	r2, [sp, #23]
   18364:	e7ba      	b.n	182dc <kmu_derive_cmac+0x94>
   18366:	4f09      	ldr	r7, [pc, #36]	; (1838c <kmu_derive_cmac+0x144>)
   18368:	4638      	mov	r0, r7
   1836a:	b04e      	add	sp, #312	; 0x138
   1836c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18370:	4637      	mov	r7, r6
   18372:	e7e9      	b.n	18348 <kmu_derive_cmac+0x100>
   18374:	4f06      	ldr	r7, [pc, #24]	; (18390 <kmu_derive_cmac+0x148>)
   18376:	4638      	mov	r0, r7
   18378:	b04e      	add	sp, #312	; 0x138
   1837a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1837e:	bf00      	nop
   18380:	50039000 	.word	0x50039000
   18384:	00ff8000 	.word	0x00ff8000
   18388:	50841a50 	.word	0x50841a50
   1838c:	00f1000f 	.word	0x00f1000f
   18390:	00f1000e 	.word	0x00f1000e

00018394 <UtilCmacBuildDataForDerivation>:
   18394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18398:	2600      	movs	r6, #0
   1839a:	b082      	sub	sp, #8
   1839c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1839e:	9601      	str	r6, [sp, #4]
   183a0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   183a4:	d83b      	bhi.n	1841e <UtilCmacBuildDataForDerivation+0x8a>
   183a6:	00ee      	lsls	r6, r5, #3
   183a8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   183ac:	461f      	mov	r7, r3
   183ae:	bf34      	ite	cc
   183b0:	2303      	movcc	r3, #3
   183b2:	2304      	movcs	r3, #4
   183b4:	1e4d      	subs	r5, r1, #1
   183b6:	2d3f      	cmp	r5, #63	; 0x3f
   183b8:	460c      	mov	r4, r1
   183ba:	9300      	str	r3, [sp, #0]
   183bc:	d82f      	bhi.n	1841e <UtilCmacBuildDataForDerivation+0x8a>
   183be:	b370      	cbz	r0, 1841e <UtilCmacBuildDataForDerivation+0x8a>
   183c0:	4690      	mov	r8, r2
   183c2:	b117      	cbz	r7, 183ca <UtilCmacBuildDataForDerivation+0x36>
   183c4:	b35a      	cbz	r2, 1841e <UtilCmacBuildDataForDerivation+0x8a>
   183c6:	2f40      	cmp	r7, #64	; 0x40
   183c8:	d829      	bhi.n	1841e <UtilCmacBuildDataForDerivation+0x8a>
   183ca:	9a08      	ldr	r2, [sp, #32]
   183cc:	b33a      	cbz	r2, 1841e <UtilCmacBuildDataForDerivation+0x8a>
   183ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   183d0:	6811      	ldr	r1, [r2, #0]
   183d2:	b321      	cbz	r1, 1841e <UtilCmacBuildDataForDerivation+0x8a>
   183d4:	19e2      	adds	r2, r4, r7
   183d6:	4413      	add	r3, r2
   183d8:	4299      	cmp	r1, r3
   183da:	d320      	bcc.n	1841e <UtilCmacBuildDataForDerivation+0x8a>
   183dc:	9b08      	ldr	r3, [sp, #32]
   183de:	4622      	mov	r2, r4
   183e0:	4601      	mov	r1, r0
   183e2:	1c58      	adds	r0, r3, #1
   183e4:	f7fe ff4a 	bl	1727c <CC_PalMemCopyPlat>
   183e8:	2200      	movs	r2, #0
   183ea:	9b08      	ldr	r3, [sp, #32]
   183ec:	4423      	add	r3, r4
   183ee:	705a      	strb	r2, [r3, #1]
   183f0:	3402      	adds	r4, #2
   183f2:	bb07      	cbnz	r7, 18436 <UtilCmacBuildDataForDerivation+0xa2>
   183f4:	2eff      	cmp	r6, #255	; 0xff
   183f6:	9600      	str	r6, [sp, #0]
   183f8:	d915      	bls.n	18426 <UtilCmacBuildDataForDerivation+0x92>
   183fa:	9b08      	ldr	r3, [sp, #32]
   183fc:	0235      	lsls	r5, r6, #8
   183fe:	b2ad      	uxth	r5, r5
   18400:	1918      	adds	r0, r3, r4
   18402:	2202      	movs	r2, #2
   18404:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   18408:	a901      	add	r1, sp, #4
   1840a:	9501      	str	r5, [sp, #4]
   1840c:	f7fe ff36 	bl	1727c <CC_PalMemCopyPlat>
   18410:	3402      	adds	r4, #2
   18412:	2000      	movs	r0, #0
   18414:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18416:	601c      	str	r4, [r3, #0]
   18418:	b002      	add	sp, #8
   1841a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1841e:	480a      	ldr	r0, [pc, #40]	; (18448 <UtilCmacBuildDataForDerivation+0xb4>)
   18420:	b002      	add	sp, #8
   18422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18426:	9b08      	ldr	r3, [sp, #32]
   18428:	2201      	movs	r2, #1
   1842a:	1918      	adds	r0, r3, r4
   1842c:	4669      	mov	r1, sp
   1842e:	f7fe ff25 	bl	1727c <CC_PalMemCopyPlat>
   18432:	3401      	adds	r4, #1
   18434:	e7ed      	b.n	18412 <UtilCmacBuildDataForDerivation+0x7e>
   18436:	9b08      	ldr	r3, [sp, #32]
   18438:	4641      	mov	r1, r8
   1843a:	1918      	adds	r0, r3, r4
   1843c:	463a      	mov	r2, r7
   1843e:	f7fe ff1d 	bl	1727c <CC_PalMemCopyPlat>
   18442:	443c      	add	r4, r7
   18444:	e7d6      	b.n	183f4 <UtilCmacBuildDataForDerivation+0x60>
   18446:	bf00      	nop
   18448:	80000006 	.word	0x80000006

0001844c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1844c:	4770      	bx	lr

0001844e <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   1844e:	b508      	push	{r3, lr}
	spm_config();
   18450:	f7f9 fcfc 	bl	11e4c <spm_config>
	spm_jump();
}
   18454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   18458:	f7f9 bcaa 	b.w	11db0 <spm_jump>

0001845c <sys_notify_validate>:
	if (notify == NULL) {
   1845c:	4603      	mov	r3, r0
   1845e:	b158      	cbz	r0, 18478 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   18460:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   18462:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   18466:	2a01      	cmp	r2, #1
   18468:	d003      	beq.n	18472 <sys_notify_validate+0x16>
   1846a:	2a03      	cmp	r2, #3
   1846c:	d104      	bne.n	18478 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
   1846e:	6802      	ldr	r2, [r0, #0]
   18470:	b112      	cbz	r2, 18478 <sys_notify_validate+0x1c>
		notify->result = 0;
   18472:	2000      	movs	r0, #0
   18474:	6098      	str	r0, [r3, #8]
   18476:	4770      	bx	lr
   18478:	f06f 0015 	mvn.w	r0, #21
}
   1847c:	4770      	bx	lr

0001847e <arch_printk_char_out>:
}
   1847e:	2000      	movs	r0, #0
   18480:	4770      	bx	lr

00018482 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   18482:	b40f      	push	{r0, r1, r2, r3}
   18484:	b507      	push	{r0, r1, r2, lr}
   18486:	a904      	add	r1, sp, #16
   18488:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1848c:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   1848e:	f7f8 f985 	bl	1079c <vprintk>
	}
	va_end(ap);
}
   18492:	b003      	add	sp, #12
   18494:	f85d eb04 	ldr.w	lr, [sp], #4
   18498:	b004      	add	sp, #16
   1849a:	4770      	bx	lr

0001849c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1849c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1849e:	f013 0307 	ands.w	r3, r3, #7
   184a2:	d105      	bne.n	184b0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   184a4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   184a6:	2b00      	cmp	r3, #0
   184a8:	bf0c      	ite	eq
   184aa:	2000      	moveq	r0, #0
   184ac:	2003      	movne	r0, #3
   184ae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   184b0:	2b02      	cmp	r3, #2
   184b2:	d105      	bne.n	184c0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   184b4:	8bc0      	ldrh	r0, [r0, #30]
   184b6:	fab0 f080 	clz	r0, r0
   184ba:	0940      	lsrs	r0, r0, #5
   184bc:	0080      	lsls	r0, r0, #2
   184be:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   184c0:	2b01      	cmp	r3, #1
   184c2:	d105      	bne.n	184d0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   184c4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   184c6:	2b00      	cmp	r3, #0
   184c8:	bf0c      	ite	eq
   184ca:	2000      	moveq	r0, #0
   184cc:	2005      	movne	r0, #5
   184ce:	4770      	bx	lr
	int evt = EVT_NOP;
   184d0:	2000      	movs	r0, #0
}
   184d2:	4770      	bx	lr

000184d4 <validate_args>:
{
   184d4:	b510      	push	{r4, lr}
   184d6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   184d8:	b100      	cbz	r0, 184dc <validate_args+0x8>
   184da:	b911      	cbnz	r1, 184e2 <validate_args+0xe>
		return -EINVAL;
   184dc:	f06f 0015 	mvn.w	r0, #21
}
   184e0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   184e2:	1d08      	adds	r0, r1, #4
   184e4:	f7ff ffba 	bl	1845c <sys_notify_validate>
	if ((rv == 0)
   184e8:	2800      	cmp	r0, #0
   184ea:	d1f9      	bne.n	184e0 <validate_args+0xc>
	    && ((cli->notify.flags
   184ec:	68a3      	ldr	r3, [r4, #8]
   184ee:	2b03      	cmp	r3, #3
   184f0:	d9f6      	bls.n	184e0 <validate_args+0xc>
   184f2:	e7f3      	b.n	184dc <validate_args+0x8>

000184f4 <notify_one>:
{
   184f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   184f8:	460d      	mov	r5, r1
   184fa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   184fc:	4619      	mov	r1, r3
   184fe:	1d28      	adds	r0, r5, #4
{
   18500:	4690      	mov	r8, r2
   18502:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   18504:	f7f8 f91e 	bl	10744 <sys_notify_finalize>
	if (cb) {
   18508:	4604      	mov	r4, r0
   1850a:	b138      	cbz	r0, 1851c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1850c:	4633      	mov	r3, r6
   1850e:	4642      	mov	r2, r8
   18510:	4629      	mov	r1, r5
   18512:	4638      	mov	r0, r7
   18514:	46a4      	mov	ip, r4
}
   18516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1851a:	4760      	bx	ip
}
   1851c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018520 <onoff_manager_init>:
{
   18520:	b538      	push	{r3, r4, r5, lr}
   18522:	460c      	mov	r4, r1
	if ((mgr == NULL)
   18524:	4605      	mov	r5, r0
   18526:	b158      	cbz	r0, 18540 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   18528:	b151      	cbz	r1, 18540 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1852a:	680b      	ldr	r3, [r1, #0]
   1852c:	b143      	cbz	r3, 18540 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1852e:	684b      	ldr	r3, [r1, #4]
   18530:	b133      	cbz	r3, 18540 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   18532:	2220      	movs	r2, #32
   18534:	2100      	movs	r1, #0
   18536:	f000 f98e 	bl	18856 <memset>
	return 0;
   1853a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1853c:	612c      	str	r4, [r5, #16]
}
   1853e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18540:	f06f 0015 	mvn.w	r0, #21
   18544:	e7fb      	b.n	1853e <onoff_manager_init+0x1e>

00018546 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   18546:	4604      	mov	r4, r0
   18548:	b508      	push	{r3, lr}
   1854a:	4608      	mov	r0, r1
   1854c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1854e:	461a      	mov	r2, r3
   18550:	47a0      	blx	r4
	return z_impl_k_current_get();
   18552:	f7fc fea3 	bl	1529c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   18556:	f7fa fb01 	bl	12b5c <z_impl_k_thread_abort>

0001855a <encode_uint>:
{
   1855a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1855e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   18560:	78d3      	ldrb	r3, [r2, #3]
{
   18562:	4680      	mov	r8, r0
	switch (specifier) {
   18564:	2b6f      	cmp	r3, #111	; 0x6f
{
   18566:	460f      	mov	r7, r1
   18568:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1856a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1856e:	d029      	beq.n	185c4 <encode_uint+0x6a>
   18570:	d824      	bhi.n	185bc <encode_uint+0x62>
		return 10;
   18572:	2b58      	cmp	r3, #88	; 0x58
   18574:	bf0c      	ite	eq
   18576:	2610      	moveq	r6, #16
   18578:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1857a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1857e:	4632      	mov	r2, r6
   18580:	2300      	movs	r3, #0
   18582:	4640      	mov	r0, r8
   18584:	4639      	mov	r1, r7
   18586:	f7f7 ff59 	bl	1043c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1858a:	2a09      	cmp	r2, #9
   1858c:	b2d4      	uxtb	r4, r2
   1858e:	d81e      	bhi.n	185ce <encode_uint+0x74>
   18590:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   18592:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18594:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   18596:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1859a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1859e:	d301      	bcc.n	185a4 <encode_uint+0x4a>
   185a0:	45d1      	cmp	r9, sl
   185a2:	d811      	bhi.n	185c8 <encode_uint+0x6e>
	if (conv->flag_hash) {
   185a4:	782b      	ldrb	r3, [r5, #0]
   185a6:	069b      	lsls	r3, r3, #26
   185a8:	d505      	bpl.n	185b6 <encode_uint+0x5c>
		if (radix == 8) {
   185aa:	2e08      	cmp	r6, #8
   185ac:	d115      	bne.n	185da <encode_uint+0x80>
			conv->altform_0 = true;
   185ae:	78ab      	ldrb	r3, [r5, #2]
   185b0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   185b4:	70ab      	strb	r3, [r5, #2]
}
   185b6:	4648      	mov	r0, r9
   185b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   185bc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   185c0:	2b70      	cmp	r3, #112	; 0x70
   185c2:	e7d7      	b.n	18574 <encode_uint+0x1a>
	switch (specifier) {
   185c4:	2608      	movs	r6, #8
   185c6:	e7d8      	b.n	1857a <encode_uint+0x20>
		value /= radix;
   185c8:	4680      	mov	r8, r0
   185ca:	460f      	mov	r7, r1
   185cc:	e7d7      	b.n	1857e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   185ce:	f1bb 0f19 	cmp.w	fp, #25
   185d2:	bf94      	ite	ls
   185d4:	3437      	addls	r4, #55	; 0x37
   185d6:	3457      	addhi	r4, #87	; 0x57
   185d8:	e7db      	b.n	18592 <encode_uint+0x38>
		} else if (radix == 16) {
   185da:	2e10      	cmp	r6, #16
   185dc:	d1eb      	bne.n	185b6 <encode_uint+0x5c>
			conv->altform_0c = true;
   185de:	78ab      	ldrb	r3, [r5, #2]
   185e0:	f043 0310 	orr.w	r3, r3, #16
   185e4:	e7e6      	b.n	185b4 <encode_uint+0x5a>

000185e6 <outs>:
{
   185e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185ea:	4607      	mov	r7, r0
   185ec:	4688      	mov	r8, r1
   185ee:	4615      	mov	r5, r2
   185f0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   185f2:	4614      	mov	r4, r2
   185f4:	42b4      	cmp	r4, r6
   185f6:	d305      	bcc.n	18604 <outs+0x1e>
   185f8:	b10e      	cbz	r6, 185fe <outs+0x18>
	return (int)count;
   185fa:	1b60      	subs	r0, r4, r5
   185fc:	e008      	b.n	18610 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   185fe:	7823      	ldrb	r3, [r4, #0]
   18600:	2b00      	cmp	r3, #0
   18602:	d0fa      	beq.n	185fa <outs+0x14>
		int rc = out((int)*sp++, ctx);
   18604:	4641      	mov	r1, r8
   18606:	f814 0b01 	ldrb.w	r0, [r4], #1
   1860a:	47b8      	blx	r7
		if (rc < 0) {
   1860c:	2800      	cmp	r0, #0
   1860e:	daf1      	bge.n	185f4 <outs+0xe>
}
   18610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018614 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   18614:	4040      	eors	r0, r0
   18616:	f380 8811 	msr	BASEPRI, r0
   1861a:	f04f 0004 	mov.w	r0, #4
   1861e:	df02      	svc	2
}
   18620:	4770      	bx	lr

00018622 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   18622:	4770      	bx	lr

00018624 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   18624:	b084      	sub	sp, #16
   18626:	ab04      	add	r3, sp, #16
   18628:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1862c:	2300      	movs	r3, #0
   1862e:	f383 8811 	msr	BASEPRI, r3
   18632:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   18636:	b004      	add	sp, #16
   18638:	4770      	bx	lr

0001863a <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   1863a:	b40f      	push	{r0, r1, r2, r3}
   1863c:	b507      	push	{r0, r1, r2, lr}
   1863e:	a904      	add	r1, sp, #16
   18640:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   18644:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   18646:	f7f8 f8a9 	bl	1079c <vprintk>
	va_end(ap);
}
   1864a:	b003      	add	sp, #12
   1864c:	f85d eb04 	ldr.w	lr, [sp], #4
   18650:	b004      	add	sp, #16
   18652:	4770      	bx	lr

00018654 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   18654:	2200      	movs	r2, #0
   18656:	e9c0 2200 	strd	r2, r2, [r0]
   1865a:	6082      	str	r2, [r0, #8]
}
   1865c:	4770      	bx	lr

0001865e <set_on_state>:
	__asm__ volatile(
   1865e:	f04f 0320 	mov.w	r3, #32
   18662:	f3ef 8211 	mrs	r2, BASEPRI
   18666:	f383 8811 	msr	BASEPRI, r3
   1866a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1866e:	6803      	ldr	r3, [r0, #0]
   18670:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18674:	f043 0302 	orr.w	r3, r3, #2
   18678:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1867a:	f382 8811 	msr	BASEPRI, r2
   1867e:	f3bf 8f6f 	isb	sy
}
   18682:	4770      	bx	lr

00018684 <async_start>:
{
   18684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18686:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   18688:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1868a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1868c:	f04f 0520 	mov.w	r5, #32
   18690:	f3ef 8611 	mrs	r6, BASEPRI
   18694:	f385 8811 	msr	BASEPRI, r5
   18698:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1869c:	250c      	movs	r5, #12
   1869e:	4369      	muls	r1, r5
   186a0:	440c      	add	r4, r1
   186a2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   186a4:	f005 0c07 	and.w	ip, r5, #7
   186a8:	f1bc 0f01 	cmp.w	ip, #1
   186ac:	d10b      	bne.n	186c6 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   186ae:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   186b0:	f386 8811 	msr	BASEPRI, r6
   186b4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   186b8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   186bc:	6843      	ldr	r3, [r0, #4]
   186be:	585b      	ldr	r3, [r3, r1]
   186c0:	4798      	blx	r3
	return 0;
   186c2:	2000      	movs	r0, #0
}
   186c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   186c6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   186ca:	42af      	cmp	r7, r5
   186cc:	f386 8811 	msr	BASEPRI, r6
   186d0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   186d4:	bf0c      	ite	eq
   186d6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   186da:	f04f 30ff 	movne.w	r0, #4294967295
   186de:	e7f1      	b.n	186c4 <async_start+0x40>

000186e0 <api_start>:
{
   186e0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   186e2:	2480      	movs	r4, #128	; 0x80
   186e4:	9400      	str	r4, [sp, #0]
   186e6:	f7ff ffcd 	bl	18684 <async_start>
}
   186ea:	b002      	add	sp, #8
   186ec:	bd10      	pop	{r4, pc}

000186ee <onoff_started_callback>:
	return &data->mgr[type];
   186ee:	6900      	ldr	r0, [r0, #16]
   186f0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   186f2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   186f6:	2100      	movs	r1, #0
   186f8:	4710      	bx	r2

000186fa <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   186fa:	2000      	movs	r0, #0
   186fc:	f7fb b8ae 	b.w	1385c <nrfx_clock_start>

00018700 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   18700:	2000      	movs	r0, #0
   18702:	f7fb b8fd 	b.w	13900 <nrfx_clock_stop>

00018706 <api_stop>:
	return stop(dev, subsys, CTX_API);
   18706:	2280      	movs	r2, #128	; 0x80
   18708:	f7f9 b808 	b.w	1171c <stop>

0001870c <blocking_start_callback>:
{
   1870c:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1870e:	f7fb be73 	b.w	143f8 <z_impl_k_sem_give>

00018712 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   18712:	4770      	bx	lr

00018714 <sys_clock_disable>:

void __weak sys_clock_disable(void)
   18714:	4770      	bx	lr

00018716 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   18716:	2000      	movs	r0, #0
   18718:	f7f8 be96 	b.w	11448 <sys_reboot>

0001871c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1871c:	2100      	movs	r1, #0
   1871e:	2001      	movs	r0, #1
   18720:	f7f9 beb0 	b.w	12484 <z_arm_fatal_error>

00018724 <irq_target_state_set>:
{
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
		/* Set target to Secure */
		result = NVIC_ClearTargetState(irq);
   18724:	b243      	sxtb	r3, r0
	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   18726:	4608      	mov	r0, r1
   18728:	b9c1      	cbnz	r1, 1875c <irq_target_state_set+0x38>
  if ((int32_t)(IRQn) >= 0)
   1872a:	2b00      	cmp	r3, #0
   1872c:	db27      	blt.n	1877e <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   1872e:	2001      	movs	r0, #1
   18730:	095a      	lsrs	r2, r3, #5
   18732:	0092      	lsls	r2, r2, #2
   18734:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   18738:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
   1873c:	f8d2 1280 	ldr.w	r1, [r2, #640]	; 0x280
   18740:	f003 031f 	and.w	r3, r3, #31
   18744:	4098      	lsls	r0, r3
   18746:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   1874a:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   1874e:	f8d2 0280 	ldr.w	r0, [r2, #640]	; 0x280
   18752:	40d8      	lsrs	r0, r3
   18754:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   18758:	b2c0      	uxtb	r0, r0
   1875a:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   1875c:	2b00      	cmp	r3, #0
   1875e:	db0d      	blt.n	1877c <irq_target_state_set+0x58>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   18760:	2101      	movs	r1, #1
   18762:	095a      	lsrs	r2, r3, #5
   18764:	0092      	lsls	r2, r2, #2
   18766:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   1876a:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
   1876e:	f8d2 0280 	ldr.w	r0, [r2, #640]	; 0x280
   18772:	f003 031f 	and.w	r3, r3, #31
   18776:	4099      	lsls	r1, r3
   18778:	4301      	orrs	r1, r0
   1877a:	e7e6      	b.n	1874a <irq_target_state_set+0x26>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
   1877c:	2000      	movs	r0, #0
	}
}
   1877e:	4770      	bx	lr

00018780 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   18780:	6e43      	ldr	r3, [r0, #100]	; 0x64
   18782:	f383 880b 	msr	PSPLIM, r3
}
   18786:	4770      	bx	lr

00018788 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   18788:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1878a:	6800      	ldr	r0, [r0, #0]
   1878c:	f7f9 be7a 	b.w	12484 <z_arm_fatal_error>

00018790 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   18790:	b508      	push	{r3, lr}
	handler();
   18792:	f7f9 fea5 	bl	124e0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   18796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1879a:	f7fa b97b 	b.w	12a94 <z_arm_exc_exit>

0001879e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1879e:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   187a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   187a6:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   187a8:	bf08      	it	eq
   187aa:	f06f 0015 	mvneq.w	r0, #21
   187ae:	4770      	bx	lr

000187b0 <arm_cmse_addr_is_secure>:
   187b0:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
   187b4:	f3c0 5080 	ubfx	r0, r0, #22, #1
   187b8:	4770      	bx	lr

000187ba <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   187ba:	4603      	mov	r3, r0
	size_t n = 0;
   187bc:	2000      	movs	r0, #0

	while (*s != '\0') {
   187be:	5c1a      	ldrb	r2, [r3, r0]
   187c0:	b902      	cbnz	r2, 187c4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   187c2:	4770      	bx	lr
		n++;
   187c4:	3001      	adds	r0, #1
   187c6:	e7fa      	b.n	187be <strlen+0x4>

000187c8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   187c8:	4603      	mov	r3, r0
	size_t n = 0;
   187ca:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   187cc:	5c1a      	ldrb	r2, [r3, r0]
   187ce:	b10a      	cbz	r2, 187d4 <strnlen+0xc>
   187d0:	4288      	cmp	r0, r1
   187d2:	d100      	bne.n	187d6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   187d4:	4770      	bx	lr
		n++;
   187d6:	3001      	adds	r0, #1
   187d8:	e7f8      	b.n	187cc <strnlen+0x4>

000187da <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   187da:	1e43      	subs	r3, r0, #1
   187dc:	3901      	subs	r1, #1
   187de:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   187e2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   187e6:	4282      	cmp	r2, r0
   187e8:	d101      	bne.n	187ee <strcmp+0x14>
   187ea:	2a00      	cmp	r2, #0
   187ec:	d1f7      	bne.n	187de <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   187ee:	1a10      	subs	r0, r2, r0
   187f0:	4770      	bx	lr

000187f2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   187f2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   187f4:	b15a      	cbz	r2, 1880e <memcmp+0x1c>
   187f6:	3901      	subs	r1, #1
   187f8:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   187fa:	f810 2b01 	ldrb.w	r2, [r0], #1
   187fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   18802:	42a0      	cmp	r0, r4
   18804:	d001      	beq.n	1880a <memcmp+0x18>
   18806:	429a      	cmp	r2, r3
   18808:	d0f7      	beq.n	187fa <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1880a:	1ad0      	subs	r0, r2, r3
}
   1880c:	bd10      	pop	{r4, pc}
		return 0;
   1880e:	4610      	mov	r0, r2
   18810:	e7fc      	b.n	1880c <memcmp+0x1a>

00018812 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   18812:	1a43      	subs	r3, r0, r1
   18814:	4293      	cmp	r3, r2
{
   18816:	b510      	push	{r4, lr}
   18818:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1881c:	d308      	bcc.n	18830 <memmove+0x1e>
	char *dest = d;
   1881e:	4602      	mov	r2, r0
   18820:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   18822:	429a      	cmp	r2, r3
   18824:	d00b      	beq.n	1883e <memmove+0x2c>
			*dest = *src;
   18826:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1882a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1882e:	e7f8      	b.n	18822 <memmove+0x10>
   18830:	440a      	add	r2, r1
			dest[n] = src[n];
   18832:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   18836:	428a      	cmp	r2, r1
			dest[n] = src[n];
   18838:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1883c:	d1f9      	bne.n	18832 <memmove+0x20>
		}
	}

	return d;
}
   1883e:	bd10      	pop	{r4, pc}

00018840 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   18840:	b510      	push	{r4, lr}
   18842:	1e43      	subs	r3, r0, #1
   18844:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   18846:	4291      	cmp	r1, r2
   18848:	d100      	bne.n	1884c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1884a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1884c:	f811 4b01 	ldrb.w	r4, [r1], #1
   18850:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   18854:	e7f7      	b.n	18846 <memcpy+0x6>

00018856 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   18856:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
   18858:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1885a:	4402      	add	r2, r0
   1885c:	4293      	cmp	r3, r2
   1885e:	d100      	bne.n	18862 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   18860:	4770      	bx	lr
		*(d_byte++) = c_byte;
   18862:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   18866:	e7f9      	b.n	1885c <memset+0x6>

00018868 <_stdout_hook_default>:
}
   18868:	f04f 30ff 	mov.w	r0, #4294967295
   1886c:	4770      	bx	lr

0001886e <uarte_nrfx_config_get>:
{
   1886e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   18870:	6902      	ldr	r2, [r0, #16]
   18872:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   18876:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1887a:	2000      	movs	r0, #0
   1887c:	4770      	bx	lr

0001887e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1887e:	6843      	ldr	r3, [r0, #4]
   18880:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   18882:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   18886:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1888a:	4770      	bx	lr

0001888c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1888c:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1888e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   18890:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18892:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   18896:	b148      	cbz	r0, 188ac <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18898:	2000      	movs	r0, #0
	*c = data->rx_data;
   1889a:	7c52      	ldrb	r2, [r2, #17]
   1889c:	700a      	strb	r2, [r1, #0]
   1889e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   188a2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   188a6:	2201      	movs	r2, #1
   188a8:	601a      	str	r2, [r3, #0]
	return 0;
   188aa:	4770      	bx	lr
		return -1;
   188ac:	f04f 30ff 	mov.w	r0, #4294967295
}
   188b0:	4770      	bx	lr

000188b2 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   188b2:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   188b4:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   188b6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   188ba:	b940      	cbnz	r0, 188ce <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   188bc:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   188be:	071b      	lsls	r3, r3, #28
   188c0:	d406      	bmi.n	188d0 <is_tx_ready.isra.0+0x1e>
   188c2:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   188c6:	3800      	subs	r0, #0
   188c8:	bf18      	it	ne
   188ca:	2001      	movne	r0, #1
   188cc:	4770      	bx	lr
   188ce:	2001      	movs	r0, #1
}
   188d0:	4770      	bx	lr

000188d2 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   188d2:	6843      	ldr	r3, [r0, #4]
   188d4:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   188d6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   188da:	05d1      	lsls	r1, r2, #23
   188dc:	d518      	bpl.n	18910 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   188de:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   188e2:	b1aa      	cbz	r2, 18910 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   188e4:	f04f 0120 	mov.w	r1, #32
   188e8:	f3ef 8211 	mrs	r2, BASEPRI
   188ec:	f381 8811 	msr	BASEPRI, r1
   188f0:	f3bf 8f6f 	isb	sy
   188f4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   188f8:	b131      	cbz	r1, 18908 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   188fa:	2100      	movs	r1, #0
   188fc:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   18900:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18904:	2101      	movs	r1, #1
   18906:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   18908:	f382 8811 	msr	BASEPRI, r2
   1890c:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   18910:	6842      	ldr	r2, [r0, #4]
   18912:	6852      	ldr	r2, [r2, #4]
   18914:	06d2      	lsls	r2, r2, #27
   18916:	d515      	bpl.n	18944 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   18918:	f04f 0120 	mov.w	r1, #32
   1891c:	f3ef 8211 	mrs	r2, BASEPRI
   18920:	f381 8811 	msr	BASEPRI, r1
   18924:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18928:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1892c:	b111      	cbz	r1, 18934 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1892e:	2100      	movs	r1, #0
   18930:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   18934:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   18938:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1893c:	f382 8811 	msr	BASEPRI, r2
   18940:	f3bf 8f6f 	isb	sy
}
   18944:	4770      	bx	lr

00018946 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   18946:	2200      	movs	r2, #0
{
   18948:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   1894a:	4611      	mov	r1, r2
   1894c:	4610      	mov	r0, r2
   1894e:	f7fd f847 	bl	159e0 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
			return -EINVAL;
   18952:	2800      	cmp	r0, #0
		}
	#endif

	return 0;
}
   18954:	bf18      	it	ne
   18956:	f06f 0015 	mvnne.w	r0, #21
   1895a:	bd08      	pop	{r3, pc}

0001895c <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   1895c:	f7fc bfe8 	b.w	15930 <nrf_cc3xx_platform_init>

00018960 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   18960:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   18962:	f7f9 fbe7 	bl	12134 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   18966:	f7f9 fc91 	bl	1228c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1896a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1896e:	f7fc bfdf 	b.w	15930 <nrf_cc3xx_platform_init>

00018972 <nrf91_errata_14>:
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   18972:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
            if (var1 == 0x09)
   18976:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1897a:	2a09      	cmp	r2, #9
   1897c:	d105      	bne.n	1898a <nrf91_errata_14+0x18>
                switch(var2)
   1897e:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
   18982:	1e43      	subs	r3, r0, #1
   18984:	4258      	negs	r0, r3
   18986:	4158      	adcs	r0, r3
   18988:	4770      	bx	lr
                        return false;
   1898a:	2000      	movs	r0, #0
}
   1898c:	4770      	bx	lr

0001898e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1898e:	4700      	bx	r0

00018990 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   18990:	f000 b85f 	b.w	18a52 <z_impl_k_busy_wait>

00018994 <z_device_state_init>:
}
   18994:	4770      	bx	lr

00018996 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   18996:	b138      	cbz	r0, 189a8 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   18998:	68c3      	ldr	r3, [r0, #12]
   1899a:	8818      	ldrh	r0, [r3, #0]
   1899c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   189a0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   189a4:	4258      	negs	r0, r3
   189a6:	4158      	adcs	r0, r3
}
   189a8:	4770      	bx	lr

000189aa <k_mem_slab_init>:
{
   189aa:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   189ac:	2400      	movs	r4, #0
   189ae:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   189b0:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   189b2:	ea41 0402 	orr.w	r4, r1, r2
   189b6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   189ba:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   189be:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   189c0:	d10c      	bne.n	189dc <k_mem_slab_init+0x32>
   189c2:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
   189c4:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
   189c6:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   189c8:	d103      	bne.n	189d2 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
   189ca:	e9c0 0000 	strd	r0, r0, [r0]
}
   189ce:	2000      	movs	r0, #0
}
   189d0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   189d2:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   189d4:	3401      	adds	r4, #1
   189d6:	460d      	mov	r5, r1
		p += slab->block_size;
   189d8:	4411      	add	r1, r2
   189da:	e7f3      	b.n	189c4 <k_mem_slab_init+0x1a>
		return -EINVAL;
   189dc:	f06f 0015 	mvn.w	r0, #21
	return rc;
   189e0:	e7f6      	b.n	189d0 <k_mem_slab_init+0x26>

000189e2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   189e2:	f3ef 8005 	mrs	r0, IPSR
}
   189e6:	3800      	subs	r0, #0
   189e8:	bf18      	it	ne
   189ea:	2001      	movne	r0, #1
   189ec:	4770      	bx	lr

000189ee <k_thread_name_get>:
}
   189ee:	2000      	movs	r0, #0
   189f0:	4770      	bx	lr

000189f2 <z_pm_save_idle_exit>:
{
   189f2:	b508      	push	{r3, lr}
	pm_system_resume();
   189f4:	f7f8 fdb6 	bl	11564 <pm_system_resume>
}
   189f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   189fc:	f7ff be89 	b.w	18712 <sys_clock_idle_exit>

00018a00 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   18a00:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18a04:	428b      	cmp	r3, r1
   18a06:	d001      	beq.n	18a0c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   18a08:	f7fc b9d4 	b.w	14db4 <z_set_prio>
}
   18a0c:	2000      	movs	r0, #0
   18a0e:	4770      	bx	lr

00018a10 <z_impl_k_mutex_init>:
{
   18a10:	4603      	mov	r3, r0
	mutex->owner = NULL;
   18a12:	2000      	movs	r0, #0
   18a14:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   18a18:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   18a1c:	4770      	bx	lr

00018a1e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18a1e:	4603      	mov	r3, r0
   18a20:	b920      	cbnz	r0, 18a2c <z_reschedule_irqlock+0xe>
   18a22:	f3ef 8205 	mrs	r2, IPSR
   18a26:	b90a      	cbnz	r2, 18a2c <z_reschedule_irqlock+0xe>
   18a28:	f7f9 bc46 	b.w	122b8 <arch_swap>
   18a2c:	f383 8811 	msr	BASEPRI, r3
   18a30:	f3bf 8f6f 	isb	sy
}
   18a34:	4770      	bx	lr

00018a36 <z_reschedule_unlocked>:
	__asm__ volatile(
   18a36:	f04f 0320 	mov.w	r3, #32
   18a3a:	f3ef 8011 	mrs	r0, BASEPRI
   18a3e:	f383 8811 	msr	BASEPRI, r3
   18a42:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   18a46:	f7ff bfea 	b.w	18a1e <z_reschedule_irqlock>

00018a4a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   18a4a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   18a4c:	f7fc ff26 	bl	1589c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   18a50:	bd08      	pop	{r3, pc}

00018a52 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   18a52:	b108      	cbz	r0, 18a58 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   18a54:	f7f8 bd24 	b.w	114a0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   18a58:	4770      	bx	lr
	...

00018a5c <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   18a5c:	f7fa be12 	b.w	13684 <SystemInit>

Disassembly of section .gnu.sgstubs:

0001a240 <spm_firmware_info_nse-0x5da0>:
	...

0001ffe0 <spm_firmware_info_nse>:
   1ffe0:	e97f e97f 	sg
   1ffe4:	f7f2 b862 	b.w	120ac <__acle_se_spm_firmware_info_nse>

0001ffe8 <spm_request_random_number_nse>:
   1ffe8:	e97f e97f 	sg
   1ffec:	f7f2 b83a 	b.w	12064 <__acle_se_spm_request_random_number_nse>

0001fff0 <spm_request_read_nse>:
   1fff0:	e97f e97f 	sg
   1fff4:	f7f1 bffe 	b.w	11ff4 <__acle_se_spm_request_read_nse>
	...
